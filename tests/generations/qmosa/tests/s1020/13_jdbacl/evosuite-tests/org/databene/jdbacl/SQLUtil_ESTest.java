/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 00:11:43 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.sql.compile.CostEstimate;
import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;
import org.apache.derby.iapi.sql.compile.Optimizer;
import org.apache.derby.iapi.sql.compile.RowOrdering;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.CostEstimateImpl;
import org.apache.derby.impl.sql.compile.CurrentOfNode;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.compile.HalfOuterJoinNode;
import org.apache.derby.impl.sql.compile.HashJoinStrategy;
import org.apache.derby.impl.sql.compile.Level2CostEstimateImpl;
import org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy;
import org.apache.derby.impl.sql.compile.PredicateList;
import org.apache.derby.impl.sql.compile.ProjectRestrictNode;
import org.apache.derby.impl.sql.compile.SelectNode;
import org.apache.derby.impl.sql.compile.UnionNode;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.store.raw.xact.TransactionTable;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8xOqnqB)JSmzrj");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.h2.store.fs.FileSystemZip", 22);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      charArrayWriter0.writeTo(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) charArrayWriter0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l4G");
      DBSchema dBSchema0 = new DBSchema("ex&c");
      charArrayWriter0.write("ex&c");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9263548464292743
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "drop tablealter matriali~ed#v!ewcardinali3y int");
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized viewexccte}mri", (DBSchema) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "drop tablealter matriali~ed#v!ewcardinali3y int";
      stringArray0[1] = "create u*ique index(8\"%,@wxha()vgi";
      stringArray0[2] = "drop tablealter matriali~ed#v!ewcardinali3y int";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create u*ique index(8\"%,@wxha()vgi", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (drop tablealter matriali~ed#v!ewcardinali3y int, create u*ique index(8\"%,@wxha()vgi, drop tablealter matriali~ed#v!ewcardinali3y int) REFERENCES alter materialized viewexccte}mri(drop tablealter matriali~ed#v!ewcardinali3y int, create u*ique index(8\"%,@wxha()vgi, drop tablealter matriali~ed#v!ewcardinali3y int)", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6427964292660797
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLUtil.removeComments("");
      SQLUtil.normalize("", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1747), "SUBSTR");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setFractionDigits(integer0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create tablereferees", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("SUBSTR(3,3)", string0);
      
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
      
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string1 = SQLUtil.renderColumnNames(list0);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.derby.impl.sql.compile.ColumnDefinitionNode";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "SUBSTR(3,3)";
      stringArray0[5] = "GvQx\u0001\"(";
      stringArray0[6] = "A";
      String string2 = SQLUtil.join("org.apache.derby.impl.sql.compile.ColumnDefinitionNode", "A", stringArray0, "", "GvQx\u0001\"(", stringArray0);
      assertEquals("org.apache.derby.impl.sql.compile.ColumnDefinitionNode join  as GvQx\u0001\"( on A.org.apache.derby.impl.sql.compile.ColumnDefinitionNode = GvQx\u0001\"(.org.apache.derby.impl.sql.compile.ColumnDefinitionNode and A. = GvQx\u0001\"(. and A. = GvQx\u0001\"(. and A. = GvQx\u0001\"(. and A.SUBSTR(3,3) = GvQx\u0001\"(.SUBSTR(3,3) and A.GvQx\u0001\"( = GvQx\u0001\"(.GvQx\u0001\"( and A.A = GvQx\u0001\"(.A", string2);
      
      String string3 = SQLUtil.renderColumnListWithTableName("'<:+#", stringArray0);
      assertEquals("'<:+#.org.apache.derby.impl.sql.compile.ColumnDefinitionNode, '<:+#., '<:+#., '<:+#., '<:+#.SUBSTR(3,3), '<:+#.GvQx\u0001\"(, '<:+#.A", string3);
      
      String string4 = SQLUtil.substituteMarkers("", "'<:+#", "");
      assertTrue(string4.equals((Object)string1));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.731556613448952
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1494);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) "42Y66";
      objectArray0[2] = (Object) charArrayWriter0;
      mockPrintWriter0.format("42Y66", objectArray0);
      Locale locale0 = Locale.GERMANY;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l4G");
      DBSchema dBSchema0 = new DBSchema("exec");
      charArrayWriter0.write("hIC+N#9");
      mockPrintWriter0.println('D');
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/+*.gKFBA";
      stringArray0[1] = "exec";
      stringArray0[2] = "qA";
      stringArray0[3] = "42Y66";
      stringArray0[4] = "exec";
      stringArray0[5] = "Uq>ylq\"N]2k+6";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/+*.gKFBA", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintWriter0.append((CharSequence) "l4G");
      defaultDBTable0.removeForeignKeyConstraint((DBForeignKeyConstraint) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals(167, charArrayWriter0.size());
      assertEquals("42Y66hIC+N#9D\nl4Gcreate table exec (,\n\tFOREIGN KEY (/+*.gKFBA, exec, qA, 42Y66, exec, Uq>ylq\"N]2k+6) REFERENCES exec(/+*.gKFBA, exec, qA, 42Y66, exec, Uq>ylq\"N]2k+6)\n)", charArrayWriter0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8x50nqB)JSzrj");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.h2.store.fs.FileSystemZip", 22);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      charArrayWriter0.writeTo(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) charArrayWriter0;
      Locale locale0 = Locale.CANADA;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l4G");
      DBSchema dBSchema0 = new DBSchema("ex&c");
      charArrayWriter0.write("ex&c");
      mockPrintWriter0.println('C');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ex&c");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CURTIME");
      mockPrintWriter0.println();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("m(.|}cuBjf", defaultDBTable0, (DBDataType) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.nval = (double) (-4);
      String string0 = "/jsxa|i'!";
      streamTokenizer0.slashSlashComments(false);
      SQLUtil.renderNumber(streamTokenizer0);
      char[] charArray0 = new char[11];
      charArray0[0] = '?';
      int int0 = (-608573527);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-608573527));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1494);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) "42Y66";
      objectArray0[2] = (Object) charArrayWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("42Y66", objectArray0);
      Locale locale0 = Locale.GERMANY;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l4G");
      DBSchema dBSchema0 = new DBSchema("exec");
      charArrayWriter0.write("hIC+N#9");
      mockPrintWriter0.println('D');
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "42Y66";
      stringArray0[1] = "42Y66";
      stringArray0[2] = "PRIMARY KEY ";
      stringArray0[3] = "l4G";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("PRIMARY KEY ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertEquals("42Y66hIC+N#9D\ncreate table exec (\n)ALTER TABLE exec ADD \n\tCONSTRAINT \"PRIMARY KEY \" FOREIGN KEY (42Y66, 42Y66, PRIMARY KEY , l4G) REFERENCES exec(42Y66, 42Y66, PRIMARY KEY , l4G)", charArrayWriter0.toString());
      assertEquals(178, charArrayWriter0.size());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "shdutdown";
      objectArray0[1] = (Object) ">rzU;`H*FC,pAeyF";
      objectArray0[2] = (Object) "XhrVxu4;i/.33";
      objectArray0[1] = (Object) ">rzU;`H*FC,pAeyF";
      objectArray0[2] = (Object) "XhrVxu4;i/.33";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "XhrVxu4;i/.33";
      stringArray0[1] = " (";
      stringArray0[2] = "\"2<~!|+2hZ";
      stringArray0[3] = "shdutdown";
      stringArray0[5] = " (";
      stringArray0[6] = "shdutdown";
      String string0 = SQLUtil.renderColumnListWithTableName(">rzU;`H*FC,pAeyF", stringArray0);
      assertEquals(">rzU;`H*FC,pAeyF.XhrVxu4;i/.33, >rzU;`H*FC,pAeyF. (, >rzU;`H*FC,pAeyF.\"2<~!|+2hZ, >rzU;`H*FC,pAeyF.shdutdown, >rzU;`H*FC,pAeyF.null, >rzU;`H*FC,pAeyF. (, >rzU;`H*FC,pAeyF.shdutdown", string0);
      
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "XhrVxu4;i/.33");
      String string1 = SQLUtil.join("inner", " (", stringArray0, "\"2<~!|+2hZ", (String) null, stringArray0);
      assertEquals("\"2<~!|+2hZ as null on  (.XhrVxu4;i/.33 = null.XhrVxu4;i/.33 and  (. ( = null. ( and  (.\"2<~!|+2hZ = null.\"2<~!|+2hZ and  (.shdutdown = null.shdutdown and  (.null = null.null and  (. ( = null. ( and  (.shdutdown = null.shdutdown", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5594882106393415
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Z_Q3dAC3bd";
      stringArray0[1] = "alter materialized view";
      stringArray0[3] = "gOmnkxr0L+6H|Jc";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Random.setNextRandom((-1845716541));
      Random.setNextRandom(39);
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      String string0 = SQLUtil.renderValue(dBCatalog0);
      assertNull(string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7535384363599835
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      System.setCurrentTimeMillis(642L);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "qWLp4";
      stringArray0[1] = "qWLp4";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("qWLp4 = 'qWLp4' AND qWLp4 = 'qWLp4' AND null = null AND null = null AND null = null AND null = null", string0);
      
      Level2CostEstimateImpl level2CostEstimateImpl0 = new Level2CostEstimateImpl();
      level2CostEstimateImpl0.cost = (double) 642L;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance((-240815449), "execute~y3x~u*jh3kf$");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("qWLp4", defaultDBTable0, dBDataType0, integer0, integer0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.stream();
      UnaryOperator<DBColumn> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      vector0.replaceAll(unaryOperator0);
      String string1 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("qWLp4, qWLp4", string1);
      
      Level2CostEstimateImpl level2CostEstimateImpl1 = new Level2CostEstimateImpl(642.0, 0.0, 0.0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ".", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter tablecallreference", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(dBTable0, (String) null, false, stringArray0);
      String string2 = SQLUtil.constraintName(dBPrimaryKeyConstraint1);
      assertEquals("", string2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.256494175364925
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("hu%JbdaCG");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "hu%JbdaCG";
      stringArray0[1] = " t:";
      stringArray0[2] = " t:";
      stringArray0[3] = "hu%JbdaCG";
      stringArray0[4] = "hu%JbdaCG";
      StringBuilder stringBuilder0 = new StringBuilder("E._%~m9ICV");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.isProcedureCall("hu%JbdaCG");
      SQLUtil.typeAndName(defaultDBTable0);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.add((Object) "E._%~m9ICV");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NestedLoopJoinStrategy nestedLoopJoinStrategy0 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy1 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy2 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy3 = new NestedLoopJoinStrategy();
      CurrentOfNode currentOfNode0 = new CurrentOfNode();
      PredicateList predicateList0 = new PredicateList();
      Optimizer optimizer0 = mock(Optimizer.class, new ViolatedAssumptionAnswer());
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("N>Pr^@", defaultDBTable0, (-4442), "N+;_V3p|t");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      defaultDBColumn0.equals(nestedLoopJoinStrategy2);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.setDefaultValue("_myw)50");
      DBColumn dBColumn0 = defaultDBTable0.getColumn("N>Pr^@");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.renderColumn(dBColumn0);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "checkpoint", false, (String) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // column name is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.nval = (double) 31;
      streamTokenizer0.slashSlashComments(false);
      SQLUtil.renderNumber(streamTokenizer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 902;
      DBDataType dBDataType0 = DBDataType.getInstance(902, "c");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c", (DBTable) null, dBDataType0, integer0, integer1);
      defaultDBColumn0.toString();
      defaultDBColumn0.isIdentical((DBObject) null);
      FromVTI fromVTI0 = new FromVTI();
      fromVTI0.getContextManager();
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      BasicDatabase basicDatabase0 = new BasicDatabase();
      GenericLanguageFactory genericLanguageFactory1 = new GenericLanguageFactory();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("c : C(0,0)", (DBTable) null, dBDataType0, (Integer) 3, (Integer) 0);
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer.toUnsignedLong(0);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("c : C(0,0)", (DBTable) null, dBDataType0, integer2);
      defaultDBColumn0.setSize((Integer) 1);
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("getRowCountResultSet", (DBTable) null, (-3051), "c");
      defaultDBColumn1.isIdentical(defaultDBColumn0);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn3;
      Integer.sum(1, 855);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn3;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn2;
      Integer.getInteger("wBWsfU/)6", (Integer) 3);
      dBColumnArray0[6] = (DBColumn) defaultDBColumn2;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PredicateList predicateList0 = new PredicateList();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte)90;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      rowOutputBinary0.writeShort((byte) (-56));
      rowOutputBinary0.writeShortData((byte)90);
      rowOutputBinary0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.196664918501384
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Random.setNextRandom(1036);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("PRIMARY KEY ", 90);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">rzU;`H*FC,pAeyF";
      stringArray0[1] = "shdutdown";
      stringArray0[2] = ">rzU;`H*FC,pAeyF";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "BLOB", false, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT BLOB UNIQUE (>rzU;`H*FC,pAeyF, shdutdown, >rzU;`H*FC,pAeyF)", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      String string0 = "alter sessionjoin";
      SQLUtil.mutatesDataOrStructure("alter sessionjoin");
      Boolean boolean0 = Boolean.TRUE;
      FromVTI fromVTI0 = new FromVTI();
      HashJoinStrategy hashJoinStrategy0 = new HashJoinStrategy();
      HashJoinStrategy hashJoinStrategy1 = new HashJoinStrategy();
      HashJoinStrategy hashJoinStrategy2 = new HashJoinStrategy();
      OptimizablePredicateList optimizablePredicateList0 = null;
      // Undeclared exception!
      try { 
        hashJoinStrategy1.putBasePredicates((OptimizablePredicateList) null, (OptimizablePredicateList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.HashJoinStrategy", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("createVu*ique idex8\"%,@wxha()vgi");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4701374856066742
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLUtil.removeComments("01]D5ho(Ah?");
      String string0 = "tmE^^RiN";
      SQLUtil.mutatesDataOrStructure("getDae");
      ProjectRestrictNode projectRestrictNode0 = new ProjectRestrictNode();
      ProjectRestrictNode projectRestrictNode1 = new ProjectRestrictNode();
      PredicateList predicateList0 = projectRestrictNode1.restrictionList;
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2480, "N+;_V3p|t");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = Integer.getInteger(" join ", integer1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer.sum((-1982), (-1982));
      Integer.compare(2729, 2729);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Integer integer3 = RawTransaction.COMMIT;
      Integer integer4 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/oSn]nw9c`,pW8K6", defaultDBTable0, dBDataType0, integer0, integer2);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("pJMyV/TxRiY", defaultDBTable1, 1952, " join ");
      Integer integer5 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBColumn0.setFractionDigits(integer5);
      Integer integer6 = RawTransaction.LOCK_ESCALATE;
      Integer integer7 = RawTransaction.COMMIT;
      Integer integer8 = RawTransaction.ABORT;
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      Vector<DBColumn> vector1 = new Vector<DBColumn>(vector0);
      vector0.add((DBColumn) defaultDBColumn1);
      vector0.stream();
      UnaryOperator<DBColumn> unaryOperator0 = UnaryOperator.identity();
      vector0.add((DBColumn) null);
      Function.identity();
      vector1.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4472483959455777
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLUtil.removeComments(" arg2=[");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "select";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("XRE23");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "qWfQZU(` =lE|:p@lw");
      stringArray0[1] = "select";
      SQLUtil.join((String) null, "m`-4y9`H|", stringArray0, "select", "m`-4y9`H|", stringArray0);
      SQLUtil.isDML("update");
      StringBuilder stringBuilder0 = new StringBuilder("select");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.mutatesStructure("E6g70<}G\">B%9");
      SQLUtil.isProcedureCall(" arg2=[");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "select into");
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable(" arg2=[", false);
      SQLUtil.isQuery("select into");
      MockFile mockFile0 = new MockFile("XRE23");
      SQLUtil.mutatesStructure("select");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, (DBTable) null, stringArray0, (DBTable) null, stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select'range'");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.7530798155024991
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.sval = "/jsxa|i'!";
      streamTokenizer0.slashSlashComments(false);
      SQLUtil.normalize("/jsxa|i'!", false);
      char[] charArray0 = new char[8];
      charArray0[0] = '?';
      charArray0[1] = 'F';
      charArray0[2] = '.';
      long long0 = 17179869176L;
      StringBuilder stringBuilder0 = new StringBuilder("drop materialized viewgetdate");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("/ jsxa | i '!'", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("/ jsxa | i '!'", stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder2.delete((-4), (-4));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -4
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, "COLUMNDEFAULT", "c");
      StringBuilder stringBuilder0 = new StringBuilder("COLUMNDEFAULT");
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertSame(stringBuilder1, stringBuilder0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "shdutdown";
      objectArray0[1] = (Object) "c";
      objectArray0[2] = (Object) ">rzU;`H*FC,pAeyF";
      objectArray0[3] = (Object) ">rzU;`H*FC,pAeyF";
      objectArray0[4] = (Object) "c";
      objectArray0[5] = (Object) ">rzU;`H*FC,pAeyF";
      objectArray0[6] = (Object) "XhrVxu4;i/.33";
      DBDataType.getInstance(32, "c");
      Integer integer0 = RawTransaction.COMMIT;
      Integer.max(32, 32);
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("51m", stringArray0);
      Random.setNextRandom(32);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = SQLUtil.normalize("2LW2(\"d>T}cf", true);
      assertEquals("2L  W2 (\"d>T}cf\"", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Boolean boolean0 = new Boolean("alMer matrialized v!ewcPrdinali3y int");
      DBDataType dBDataType0 = DBDataType.getInstance(2225, "alMer matrialized v!ewcPrdinali3y int");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger((String) null, integer0);
      DBSchema dBSchema0 = new DBSchema("alMer matrialized v!ewcPrdinali3y int");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\"l||oQ??}21(^z=", defaultDBTable0, dBDataType0, integer0, integer1);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("WHEN", defaultDBTable0, 1952, "WHEN");
      defaultDBColumn0.setFractionDigits(integer0);
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn(",)<9vxn`Ba`'", defaultDBTable0, dBDataType0, integer0, integer1);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn2);
      vector0.stream();
      UnaryOperator<DBColumn> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      vector0.replaceAll(unaryOperator0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("[\"l||oQ??}21(^z= : ALMER MATRIALIZED V!EWCPRDINALI3Y INT(2,2), ,)<9vxn`Ba`' : ALMER MATRIALIZED V!EWCPRDINALI3Y INT(2,0)]", vector0.toString());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1, stringBuilder0);
      assertEquals("WHEN", stringBuilder0.toString());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9448468679826323
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      SQLUtil.isProcedureCall("drop t");
      Boolean boolean1 = Boolean.FALSE;
      ProjectRestrictNode projectRestrictNode0 = new ProjectRestrictNode();
      Boolean boolean2 = Boolean.TRUE;
      SQLUtil.isProcedureCall("exectme^^rin");
      NestedLoopJoinStrategy nestedLoopJoinStrategy0 = new NestedLoopJoinStrategy();
      PredicateList predicateList0 = new PredicateList();
      UnionNode unionNode0 = new UnionNode();
      ProjectRestrictNode projectRestrictNode1 = new ProjectRestrictNode();
      HalfOuterJoinNode halfOuterJoinNode0 = new HalfOuterJoinNode();
      // Undeclared exception!
      try { 
        unionNode0.orReliability((-141533688));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashStarComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.parseNumbers();
      pipedReader0.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer2.lowerCaseMode(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(pipedReader0);
      streamTokenizer3.slashSlashComments(false);
      streamTokenizer3.slashStarComments(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(pipedReader0);
      streamTokenizer4.parseNumbers();
      DBSchema dBSchema0 = new DBSchema("F+-$p~^x_a");
      dBSchema0.getTables();
      pipedReader0.close();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(pipedReader0);
      streamTokenizer5.whitespaceChars(471, (-4));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 263, "80000026-00d0-fd77-3ed8-000a0a0b1900");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "FOREIGN KEY ", true, stringArray0);
      String[] stringArray1 = new String[9];
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("FOREIGN KEY ", true, defaultDBTable0, stringArray1);
      defaultDBTable0.addIndex(dBNonUniqueIndex0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "shutdown";
      objectArray0[1] = (Object) "c";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("shutdown", false, (String) null, "call");
      StringBuilder stringBuilder0 = new StringBuilder(";x(JUUd/W.NOiT)");
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals(";x(JUUd/W.NOiT)", stringBuilder1.toString());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Level2CostEstimateImpl level2CostEstimateImpl0 = new Level2CostEstimateImpl(0.0, 953.47082267, 953.47082267);
      CostEstimate costEstimate0 = level2CostEstimateImpl0.divide(953.47082267, (CostEstimate) null);
      Level2CostEstimateImpl level2CostEstimateImpl1 = new Level2CostEstimateImpl(953.47082267, 0.0, 953.47082267);
      level2CostEstimateImpl1.divide(953.47082267, (CostEstimate) null);
      level2CostEstimateImpl1.setCost(0.0, 0.0, 0.0);
      Level2CostEstimateImpl level2CostEstimateImpl2 = new Level2CostEstimateImpl(953.47082267, 3905.9916081667934, 1.0);
      Level2CostEstimateImpl level2CostEstimateImpl3 = new Level2CostEstimateImpl();
      Level2CostEstimateImpl level2CostEstimateImpl4 = new Level2CostEstimateImpl(0.0, 1.0, 1.0);
      level2CostEstimateImpl1.compare(costEstimate0);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.718171126669182
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.sql.execute.ExecutonConext");
      String[] stringArray0 = new String[8];
      stringArray0[1] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      stringArray0[0] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "?4e6eBnv", true, stringArray0);
      defaultDBTable0.equals(dBPrimaryKeyConstraint0);
      stringArray0[3] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      MockFile mockFile0 = new MockFile("org.apache.derby.iapi.sql.execute.ExecutonConext", "'");
      mockFile0.delete();
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      mockFileWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      mockPrintWriter0.print(0L);
      mockPrintWriter0.write(5);
      char[] charArray0 = new char[5];
      mockPrintWriter0.checkError();
      charArray0[0] = '\u0010';
      charArray0[1] = 'l';
      charArray0[2] = 'v';
      charArray0[3] = 'l';
      mockFileWriter0.write(charArray0);
      charArray0[4] = 'B';
      mockPrintWriter0.print(charArray0);
      mockFile0.getCanonicalFile();
      MockFile mockFile1 = new MockFile("org.apache.derby.iapi.sql.execute.ExecutonConext");
      mockPrintWriter0.println(true);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("hu%JbdaCG");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "hu%JbdaCG";
      stringArray0[1] = " t:";
      stringArray0[2] = " t:";
      stringArray0[3] = "hu%JbdaCG";
      stringArray0[4] = "hu%JbdaCG";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " t:", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("E._%~m9ICV");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("E._%~m9ICVCONSTRAINT \" t:\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.162409200836301
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLUtil.isQuery("CARDINALITY INT");
      SQLUtil.isProcedureCall("~x5");
      SQLUtil.parseColumnTypeAndSize("deM\"g;VK`-");
      Random.setNextRandom((-39));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`?`");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "~x5";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "~x5", false, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("uS3w>;1S3[", true, "c", "c");
      StringBuilder stringBuilder0 = new StringBuilder(";x(JUUd/W.NOiT)");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals(";x(JUUd/W.NOiT)CONSTRAINT uS3w>;1S3[ ", stringBuilder0.toString());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9982695885852573
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      int int0 = (-34862631);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "deletegellref1rence";
      stringArray0[1] = "deletegellref1rence";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("deletegellref1rence", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.0202828965748285
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLUtil.mutatesStructure("exectme^^rin");
      String string0 = "I=DJF+t(";
      SelectNode selectNode0 = new SelectNode();
      PredicateList predicateList0 = new PredicateList();
      HashJoinStrategy hashJoinStrategy0 = new HashJoinStrategy();
      UnionNode unionNode0 = new UnionNode();
      ProjectRestrictNode projectRestrictNode0 = new ProjectRestrictNode();
      HalfOuterJoinNode halfOuterJoinNode0 = new HalfOuterJoinNode();
      Level2CostEstimateImpl level2CostEstimateImpl0 = new Level2CostEstimateImpl();
      SQLUtil.isDDL("exectme^^rin");
      RowOrdering rowOrdering0 = mock(RowOrdering.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("h%1H/*z, T>])DW");
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NestedLoopJoinStrategy nestedLoopJoinStrategy0 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy1 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy2 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy3 = new NestedLoopJoinStrategy();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "N+;_V3p|t";
      stringArray0[1] = "N>Pr^@";
      stringArray0[2] = "N>Pr^@";
      stringArray0[3] = "referee";
      MockFile mockFile0 = new MockFile("N+;_V3p|t", "*/");
      File file0 = mockFile0.getCanonicalFile();
      MockFile mockFile1 = new MockFile("N>Pr^@");
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.forLanguageTag("WITHADMINOPTION");
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, ">y01CF", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8xOqnqB)JSmzrj");
      boolean boolean0 = new Boolean(false);
      SQLUtil.parseColumnTypeAndSize("SUBSTRING");
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(902, "c");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.COMMIT;
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c", (DBTable) null, dBDataType0, integer1);
      defaultDBColumn0.toString();
      defaultDBColumn0.isIdentical((DBObject) null);
      FromVTI fromVTI0 = new FromVTI();
      fromVTI0.getContextManager();
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      BasicDatabase basicDatabase0 = new BasicDatabase();
      GenericLanguageFactory genericLanguageFactory1 = new GenericLanguageFactory();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      // Undeclared exception!
      try { 
        constantActionActivation0.getTransactionController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "XhrVxu4;i/.33";
      stringArray0[0] = "XhrVxu4;i/.33";
      Integer integer0 = RawTransaction.ABORT;
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("r^oO;");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XhrVxu4;i/.33", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "WrITX";
      SQLUtil.mutatesStructure("drop materialized view");
      List<Object> list0 = null;
      String string1 = "<2o";
      VersionNumber.valueOf("<2o");
      VersionNumber versionNumber0 = null;
      try {
        versionNumber0 = new VersionNumber((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.version.VersionNumber", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.360448974670294
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "hdFw|I1?dh;0x";
      DBCatalog dBCatalog0 = new DBCatalog("/*");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBSchema dBSchema0 = new DBSchema("/*", dBCatalog0);
      dBSchema0.getTable("hdFw|I1?dh;0x");
      DBDataType dBDataType0 = DBDataType.getInstance(541, "Unknown constraint type: ");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer integer3 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/*", (DBTable) null, dBDataType0, integer2, integer3);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("/*", (DBTable) null, (DBDataType) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.mutatesDataOrStructure("FOREIGN KEY ");
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Integer.sum(855, (-2070));
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.remainderUnsigned(4, (-339588226));
      Integer.getInteger("dh", integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.355785150714608
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      SQLUtil.mutatesDataOrStructure("select into");
      HashJoinStrategy hashJoinStrategy0 = new HashJoinStrategy();
      HashJoinStrategy hashJoinStrategy1 = new HashJoinStrategy();
      HashJoinStrategy hashJoinStrategy2 = new HashJoinStrategy();
      assertTrue(hashJoinStrategy2.ignoreBulkFetch());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.sql.execute.ExecutonConext");
      Level2CostEstimateImpl level2CostEstimateImpl0 = new Level2CostEstimateImpl(549.4, 549.4, Double.NEGATIVE_INFINITY);
      Level2CostEstimateImpl level2CostEstimateImpl1 = new Level2CostEstimateImpl(1039.748585207, 1039.748585207, 549.4);
      Level2CostEstimateImpl level2CostEstimateImpl2 = new Level2CostEstimateImpl(549.4, 1039.748585207, -0.0);
      level2CostEstimateImpl0.divide(954.2395422292601, level2CostEstimateImpl1);
      level2CostEstimateImpl2.setCost((CostEstimate) level2CostEstimateImpl0);
      level2CostEstimateImpl0.setCost((-1.0), (-1.0), 3905.9916081667934);
      level2CostEstimateImpl2.setCost(1.0, (-1.0), (-2.147483648E9));
      level2CostEstimateImpl2.divide(1.736875759427121, level2CostEstimateImpl1);
      Level2CostEstimateImpl level2CostEstimateImpl3 = new Level2CostEstimateImpl(1413.4, 2564.0139090801003, 1750.656682);
      CostEstimate costEstimate0 = level2CostEstimateImpl1.divide(0.0, level2CostEstimateImpl2);
      level2CostEstimateImpl2.setEstimatedRowCount(1091L);
      level2CostEstimateImpl1.cloneMe();
      level2CostEstimateImpl2.cloneMe();
      level2CostEstimateImpl2.setEstimatedRowCount(810L);
      level2CostEstimateImpl2.multiply(3905.9916081667934, costEstimate0);
      Level2CostEstimateImpl level2CostEstimateImpl4 = new Level2CostEstimateImpl(2564.0139090801003, 0.0, 1.0);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.371919820900468
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "shdutdown";
      objectArray0[1] = (Object) "XhrVxu4;i/.33";
      objectArray0[2] = (Object) "XhrVxu4;i/.33";
      objectArray0[2] = (Object) "XhrVxu4;i/.33";
      Integer.max(402, 402);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">rzU;`H*FC,pAeyF");
      String[] stringArray0 = new String[7];
      stringArray0[1] = " (";
      stringArray0[2] = " (";
      objectArray0[2] = (Object) "shdutdown";
      stringArray0[4] = "XhrVxu4;i/.33";
      stringArray0[5] = " (";
      stringArray0[6] = "shdutdown";
      SQLUtil.renderColumnListWithTableName(">rzU;`H*FC,pAeyF", stringArray0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = " (";
      stringArray1[1] = ">rzU;`H*FC,pAeyF.null, >rzU;`H*FC,pAeyF. (, >rzU;`H*FC,pAeyF. (, >rzU;`H*FC,pAeyF.null, >rzU;`H*FC,pAeyF.XhrVxu4;i/.33, >rzU;`H*FC,pAeyF. (, >rzU;`H*FC,pAeyF.shdutdown";
      stringArray1[2] = "shdutdown";
      stringArray1[3] = ">rzU;`H*FC,pAeyF";
      stringArray1[4] = ">rzU;`H*FC,pAeyF";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("deleteulu>", stringArray1, "D~T_bb", "Gg!Zx1Wq=}>", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("crea[e u*ique index(8%,@wxha(vgi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: crea[e u*ique index(8%,@wxha(vgi
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7754337976947765
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLUtil.mutatesStructure("callreference");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDictionaryImpl dataDictionaryImpl1 = new DataDictionaryImpl();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTransactionExecute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.3190095981344987
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("callreference");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDictionaryImpl dataDictionaryImpl1 = new DataDictionaryImpl();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTransactionExecute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Character character0 = Character.valueOf(']');
      SQLUtil.renderValue(character0);
      DBCatalog dBCatalog0 = new DBCatalog("']'");
      DBSchema dBSchema0 = new DBSchema("']'", dBCatalog0);
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName(" join ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.119810414333839
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLUtil.normalize("/*", false);
      SQLUtil.mutatesDataOrStructure("Whc;hGBQ!LF");
      ProjectRestrictNode projectRestrictNode0 = new ProjectRestrictNode();
      PredicateList predicateList0 = projectRestrictNode0.restrictionList;
      SQLUtil.mutatesStructure("tmE^^RiN");
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "hdFw|I1?dh;0x";
      DBCatalog dBCatalog0 = new DBCatalog("/*");
      DBSchema dBSchema0 = new DBSchema("/*", dBCatalog0);
      dBSchema0.getTable("hdFw|I1?dh;0x");
      ProjectRestrictNode projectRestrictNode0 = new ProjectRestrictNode();
      HalfOuterJoinNode halfOuterJoinNode0 = new HalfOuterJoinNode();
      Level2CostEstimateImpl level2CostEstimateImpl0 = new Level2CostEstimateImpl();
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "T-UFse?]g#24VBlu";
      stringArray0[1] = "T-UFse?]g#24VBlu";
      stringArray0[2] = "T-UFse?]g#24VBlu";
      stringArray0[3] = "T-UFse?]g#24VBlu";
      stringArray0[4] = "T-UFse?]g#24VBlu";
      stringArray0[5] = "T-UFse?]g#24VBlu";
      stringArray0[6] = "BLOB";
      stringArray0[7] = "T-UFse?]g#24VBlu";
      stringArray0[8] = "T-UFse?]g#24VBlu";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "T-UFse?]g#24VBlu";
      stringArray1[1] = "T-UFse?]g#24VBlu";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "T-UFse?]g#24VBlu", true, stringArray1);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (T-UFse?]g#24VBlu, T-UFse?]g#24VBlu)", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.sql.execute.ExecutonConext");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      stringArray0[1] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      stringArray0[3] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.iapi.sql.execute.ExecutonConext", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("select  RF.RDB$RELATION_NAME as RELATION_NAME, RF.RDB$FIELD_NAME as FIELD_NAME, F.RDB$FIELD_TYPE as FIELD_TYPE, F.RDB$FIELD_SUB_TYPE as FIELD_SUB_TYPE, F.RDB$FIELD_PRECISION as FIELD_PRECISION, F.RDB$FIELD_SCALE as FIELD_SCALE, F.RDB$FIELD_LENGTH as FIELD_LENGTH, F.RDB$CHARACTER_LENGTH as CHAR_LEN, RF.RDB$DESCRIPTION AS REMARKS, RF.RDB$DEFAULT_SOURCE as DEFAULT_SOURCE, RF.RDB$FIELD_POSITION as FIELD_POSITION,  RF.RDB$NULL_FLAG as NULL_FLAG,  F.RDB$NULL_FLAG as SOURCE_NULL_FLAG from RDB$RELATION_FIELDS RF, RDB$FIELDS F where ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT org.apache.derby.iapi.sql.execute.ExecutonConext PRIMARY KEY (org.apache.derby.iapi.sql.execute.ExecutonConext, org.apache.derby.iapi.sql.execute.ExecutonConext, , org.apache.derby.iapi.sql.execute.ExecutonConext)", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(2480, "This statement is already closed.");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      Integer integer4 = new Integer((-1781));
      Integer.getInteger("Sv!K\"= +1xmr#s!", integer3);
      Integer integer5 = new Integer(94);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer6 = RawTransaction.COMMIT;
      Integer integer7 = RawTransaction.COMMIT;
      Integer integer8 = RawTransaction.COMMIT;
      Integer integer9 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("This statement is already closed.", defaultDBTable0, dBDataType0, integer9, integer1);
      Integer integer10 = new Integer((-1781));
      Integer.remainderUnsigned(2043, 969);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("This statement is already closed. THIS STATEMENT IS ALREADY CLOSED.(0,2) NULL", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5814742493461305
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLUtil.removeComments(" arg2=[");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "constraint";
      stringArray0[1] = "constraint";
      stringArray0[2] = " arg2=[";
      stringArray0[3] = " arg2=[";
      stringArray0[4] = "constraint";
      stringArray0[5] = " arg2=[";
      stringArray0[6] = " arg2=[";
      stringArray0[7] = "constraint";
      String[] stringArray1 = new String[6];
      stringArray1[0] = " arg2=[";
      stringArray1[1] = "constraint";
      stringArray1[2] = "constraint";
      stringArray1[3] = " arg2=[";
      stringArray1[4] = " arg2=[";
      stringArray1[5] = "constraint";
      SQLUtil.join("create unique index", "create unique index", stringArray1, " arg2=[", "//", stringArray1);
      SQLUtil.renderColumnListWithTableName("constraint", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("create unique index join  arg2=[ as // on create unique index. arg2=[ = //. arg2=[ and create unique index.constraint = //.constraint and create unique index.constraint = //.constraint and create unique index. arg2=[ = //. arg2=[ and create unique index. arg2=[ = //. arg2=[ and create unique index.constraint = //.constraint", stringArray0, "setBoolean(", "2 BxH", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.3065868781693233
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NestedLoopJoinStrategy nestedLoopJoinStrategy0 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy1 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy2 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy3 = new NestedLoopJoinStrategy();
      SQLUtil.mutatesDataOrStructure("alter materialized viewselect ixto");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("J.8R)~J9H/N`");
      assertNull(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLUtil.normalize("|ex\"**ss>", false);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      assertEquals(Integer.MAX_VALUE, constantActionActivation0.getStalePlanCheckInterval());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = SQLUtil.normalize("$G.!41SpV*-ow})a", true);
      assertEquals("$ G.! 41SpV * - ow }) a", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashStarComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      pipedReader0.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer2.lowerCaseMode(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.pushBack();
      streamTokenizer1.ordinaryChar((-1473));
      streamTokenizer3.slashStarComments(false);
      streamTokenizer3.slashSlashComments(true);
      streamTokenizer3.pushBack();
      streamTokenizer1.ordinaryChar(87);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(pipedReader0);
      streamTokenizer3.slashSlashComments(true);
      streamTokenizer4.nval = 0.0;
      streamTokenizer4.lowerCaseMode(false);
      streamTokenizer4.lowerCaseMode(true);
      streamTokenizer0.parseNumbers();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.whitespaceChars((-2028802042), 1755);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      SQLUtil.renderNumber(streamTokenizer0);
      Level2CostEstimateImpl level2CostEstimateImpl0 = new Level2CostEstimateImpl();
      Level2CostEstimateImpl level2CostEstimateImpl1 = new Level2CostEstimateImpl(0.0, 0.0, (-4));
      CostEstimateImpl costEstimateImpl0 = new CostEstimateImpl();
      Level2CostEstimateImpl level2CostEstimateImpl2 = new Level2CostEstimateImpl(0.0, 0.0, 0.0);
      Level2CostEstimateImpl level2CostEstimateImpl3 = new Level2CostEstimateImpl();
      Level2CostEstimateImpl level2CostEstimateImpl4 = new Level2CostEstimateImpl();
      costEstimateImpl0.setSingleScanRowCount((-2972.0941349661853));
      level2CostEstimateImpl3.add(level2CostEstimateImpl4, level2CostEstimateImpl2);
      level2CostEstimateImpl2.setSingleScanRowCount((-4.0));
      level2CostEstimateImpl4.setEstimatedCost((-961.520886762));
      level2CostEstimateImpl0.setEstimatedRowCount(810L);
      Level2CostEstimateImpl level2CostEstimateImpl5 = new Level2CostEstimateImpl((-881.0619), 0.0, 0.0);
      level2CostEstimateImpl3.setEstimatedCost(4032.44897);
      level2CostEstimateImpl4.setEstimatedCost(1.0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      BasicUUID basicUUID0 = null;
      try {
        basicUUID0 = new BasicUUID(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.derby.impl.services.uuid.BasicUUID", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1495747713671385
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "S6b{";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "create materialized viewalter matrialized v!ewcardinali3y int";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Z(tK)r{q";
      objectArray0[3] = (Object) "Z(tK)r{q";
      objectArray0[4] = (Object) "S6b{";
      Object object1 = new Object();
      objectArray0[5] = object1;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Level2CostEstimateImpl level2CostEstimateImpl0 = new Level2CostEstimateImpl(0.0, 30.7302805898137, 954.2573328035629);
      Level2CostEstimateImpl level2CostEstimateImpl1 = new Level2CostEstimateImpl(0.0, 954.2573328035629, 30.7302805898137);
      Level2CostEstimateImpl level2CostEstimateImpl2 = new Level2CostEstimateImpl();
      level2CostEstimateImpl2.setCost(30.7302805898137, 0.0, 0.0);
      Level2CostEstimateImpl level2CostEstimateImpl3 = new Level2CostEstimateImpl(954.2573328035629, 3905.9916081667934, 30.7302805898137);
      level2CostEstimateImpl2.divide(954.2573328035629, level2CostEstimateImpl0);
      level2CostEstimateImpl2.setCost(30.7302805898137, 0.03220334760177277, 30.7302805898137);
      level2CostEstimateImpl0.toString();
      level2CostEstimateImpl2.cloneMe();
      Level2CostEstimateImpl level2CostEstimateImpl4 = new Level2CostEstimateImpl(0.0, (-1.0E-13), 1002.3570758353426);
      Level2CostEstimateImpl level2CostEstimateImpl5 = new Level2CostEstimateImpl(0.0, 954.2573328035629, 30.7302805898137);
      Level2CostEstimateImpl level2CostEstimateImpl6 = new Level2CostEstimateImpl(1002.3570758353426, 0.0, 0.0);
      level2CostEstimateImpl6.cost = 3905.9916081667934;
      level2CostEstimateImpl6.cloneMe();
      level2CostEstimateImpl1.cloneMe();
      level2CostEstimateImpl2.multiply(30.7302805898137, level2CostEstimateImpl4);
      String string0 = SQLUtil.normalize("Level2CostEstimateImpl: at 1, cost == 0.03220334760177277, rowCount == 0.0, singleScanRowCount == 954.2573328035629", false);
      assertEquals("Level2CostEstimateImpl : at 1, cost = = 0.03220334760177277, rowCount = = 0.0, singleScanRowCount = = 954.2573328035629", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      System.setCurrentTimeMillis(642L);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Level2CostEstimateImpl level2CostEstimateImpl0 = new Level2CostEstimateImpl(179.8201568516, 1121.471377904, 179.8201568516);
      CostEstimate costEstimate0 = level2CostEstimateImpl0.cloneMe();
      level2CostEstimateImpl0.divide(1121.471377904, costEstimate0);
      level2CostEstimateImpl0.setEstimatedCost(179.8201568516);
      level2CostEstimateImpl0.cloneMe();
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, stringArray0, "?U4FH\"$", "-(qR", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)114;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder("<6J:`y@O0/V");
      stringBuilder0.append(false);
      StringBuilder stringBuilder1 = stringBuilder0.append(115);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      pipedReader0.markSupported();
      Integer.max((-4), (-4));
      streamTokenizer0.lowerCaseMode(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.sval = " (";
      stringArray0[3] = " (";
      stringArray0[4] = " (";
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      pipedReader0.markSupported();
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.slashStarComments(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.sval = " (";
      DBSchema dBSchema0 = new DBSchema("FsX1>J2J");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" (", defaultDBTable0, (-4), "X:<HSbOR0HZ.#N6)");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("create materialized view", (DBCatalog) null);
      DBPackage dBPackage0 = new DBPackage("2NQ=hMWmT8v(", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("create table", dBPackage0);
      String string0 = SQLUtil.ownerDotComponent(dBProcedure0);
      assertEquals("2NQ=hMWmT8v(.create table", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.031212452726609
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "alte";
      stringArray0[1] = "*s9_$9ZdRYZB";
      stringArray0[2] = "alte";
      stringArray0[3] = "alte";
      stringArray0[4] = "alte";
      stringArray0[5] = "alte";
      stringArray0[6] = "alte";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("alter m", 7);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      stringArray0[7] = "alte";
      SQLUtil.renderColumnListWithTableName("alte", stringArray0);
      DBSchema dBSchema0 = new DBSchema("1h5ui^8_c=)5354", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("wv;3^Sv -+fH$f}\"uiV", dBSchema0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.renderColumnListWithTableName("yVe3", stringArray0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = "wv;3^Sv -+fH$f}\"uiV";
      stringArray1[1] = "yVe3";
      stringArray1[2] = "*s9_$9ZdRYZB";
      stringArray1[3] = "alte.alte, alte.*s9_$9ZdRYZB, alte.alte, alte.alte, alte.alte, alte.alte, alte.alte, alte.alte";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("&1_\"", stringArray0, "alter materialized view", "SELECT * FROM wv;3^Sv -+fH$f}\"uiV WHERE alte = 'alte' AND *s9_$9ZdRYZB = '*s9_$9ZdRYZB' AND alte = 'alte' AND alte = 'alte' AND alte = 'alte' AND alte = 'alte' AND alte = 'alte' AND alte = 'alte'", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      stringArray0[1] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      stringArray0[2] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "/GNF4F^Q";
      stringArray1[1] = "Y2mSnPW>X!0`G#w$D8";
      stringArray1[2] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      stringArray1[3] = "/GNF4F^Q";
      stringArray1[4] = "/GNF4F^Q";
      // Undeclared exception!
      try { 
        SQLUtil.join("select", "/GNF4F^Q", stringArray1, "org.apache.derby.iapi.sql.execute.ExecutonConext", "YZ'x?aRhtVEFW1", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[2];
      stringArray1[0] = "rename";
      stringArray1[1] = "rename";
      String string0 = SQLUtil.innerJoin("rename", stringArray0, ";>N)", "org.h2.util.Tool", stringArray1);
      assertEquals(";>N) as org.h2.util.Tool on ", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NestedLoopJoinStrategy nestedLoopJoinStrategy0 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy1 = new NestedLoopJoinStrategy();
      Random.setNextRandom((-684));
      Random.setNextRandom((-684));
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "into";
      String string0 = SQLUtil.join((String) null, "into", stringArray0, ".?$9R&5`O", "a2b51J'vIeG8?-6wJ", stringArray0);
      assertEquals(".?$9R&5`O as a2b51J'vIeG8?-6wJ on into.null = a2b51J'vIeG8?-6wJ.null and into.null = a2b51J'vIeG8?-6wJ.null and into.null = a2b51J'vIeG8?-6wJ.null and into.null = a2b51J'vIeG8?-6wJ.null and into.null = a2b51J'vIeG8?-6wJ.null and into.null = a2b51J'vIeG8?-6wJ.null and into.null = a2b51J'vIeG8?-6wJ.null and into.into = a2b51J'vIeG8?-6wJ.into", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "$G.}!4HSpV*-oYw}>a";
      List<Object> list0 = null;
      VersionNumber.valueOf("p2'0RgNe4eV{*%");
      VersionNumber.valueOf("p2'0RgNe4eV{*%");
      String string1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getContextManager();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      SQLUtil.typeAndName((DBObject) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.getUniqueConstraints(false);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      HashJoinStrategy hashJoinStrategy0 = new HashJoinStrategy();
      PredicateList predicateList0 = new PredicateList();
      NestedLoopJoinStrategy nestedLoopJoinStrategy0 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy1 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy2 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy3 = new NestedLoopJoinStrategy();
      HashJoinStrategy hashJoinStrategy1 = new HashJoinStrategy();
      assertEquals(1, hashJoinStrategy1.scanCostType());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DBDataType.getInstance(2480, "This statement is already closed.");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      Integer integer1 = RawTransaction.COMMIT;
      DBDataType.getInstance((-2626), "org.apache.derby.impl.sql.execute.rts.RealRowResultSetStatistics");
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      Integer integer4 = new Integer((-1781));
      Integer.getInteger("4.k0RMV", integer4);
      int int0 = (-554);
      Integer.sum((-2626), 2480);
      Integer integer5 = new Integer(94);
      Integer integer6 = RawTransaction.COMMIT;
      Integer integer7 = RawTransaction.COMMIT;
      Integer integer8 = RawTransaction.LOCK_ESCALATE;
      Integer integer9 = RawTransaction.COMMIT;
      Integer integer10 = new Integer((-554));
      Integer.remainderUnsigned(2043, 969);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.stream();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<DBColumn> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[8];
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.sql.execute.ExecutonConext");
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("org.apache.derby.iapi.sql.execute.ExecutonConext");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "[+N-U<%\"c`";
      String string1 = "Xhru4i/.3";
      StringBuilder stringBuilder0 = new StringBuilder(2471);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("[+N-U<%\"c`", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "drop tablealter matrialized v!ewcardinali3y int");
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "shdutdown";
      objectArray0[1] = (Object) ">rzU;`H*FC,pAeyF";
      objectArray0[2] = (Object) "XhrVxu4;i/.33";
      objectArray0[1] = (Object) ">rzU;`H*FC,pAeyF";
      objectArray0[2] = (Object) "XhrVxu4;i/.33";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "XhrVxu4;i/.33";
      stringArray0[1] = " (";
      stringArray0[2] = "\"24<~!|+2hZ";
      boolean boolean0 = SQLUtil.isDDL("create unique indexreferences");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~uFKGTSZT.;qu:#+qCM";
      String string0 = SQLUtil.normalize("~uFKGTSZT.;qu:#+qCM", false);
      assertEquals("~ uFKGTSZT.; qu : # + qCM", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("FaG");
      dBCatalog0.getSchema("q*t?t,SpuAaTg)l?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("FaG", (DBSchema) null);
      defaultDBTable0.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Level2CostEstimateImpl level2CostEstimateImpl0 = new Level2CostEstimateImpl();
      CostEstimate costEstimate0 = level2CostEstimateImpl0.cloneMe();
      level2CostEstimateImpl0.compare(costEstimate0);
      level2CostEstimateImpl0.setEstimatedCost(0.0);
      level2CostEstimateImpl0.cloneMe();
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "shdutdown";
      objectArray0[2] = (Object) "XhrVxu4;i/.33";
      objectArray0[3] = (Object) ">rzU;`H*FC,pAeyF";
      objectArray0[2] = (Object) "c";
      objectArray0[5] = (Object) ">rzU;`H*FC,pAeyF";
      objectArray0[2] = (Object) "XhrVxu4;i/.33";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Unknown constraint type: ";
      stringArray0[1] = "shdutdown";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Unknown constraint type: ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint("XhrVxu4;i/.33", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint1, nameSpec0);
      assertEquals("CONSTRAINT XhrVxu4;i/.33 FOREIGN KEY (Unknown constraint type: , shdutdown) REFERENCES null(Unknown constraint type: , shdutdown)", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, "select", "update");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK update", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "select  RF.RDB$RELATION_NAME as RELATION_NAME, RF.RDB$FIELD_NAME as FIELD_NAME, F.RDB$FIELD_TYPE as FIELD_TYPE, F.RDB$FIELD_SUB_TYPE as FIELD_SUB_TYPE, F.RDB$FIELD_PRECISION as FIELD_PRECISION, F.RDB$FIELD_SCALE as FIELD_SCALE, F.RDB$FIELD_LENGTH as FIELD_LENGTH, F.RDB$CHARACTER_LENGTH as CHAR_LEN, RF.RDB$DESCRIPTION AS REMARKS, RF.RDB$DEFAULT_SOURCE as DEFAULT_SOURCE, RF.RDB$FIELD_POSITION as FIELD_POSITION,  RF.RDB$NULL_FLAG as NULL_FLAG,  F.RDB$NULL_FLAG as SOURCE_NULL_FLAG from RDB$RELATION_FIELDS RF, RDB$FIELDS F where ";
      stringArray0[1] = "create u*ique index(8\"%,@wxha()vgi";
      stringArray0[2] = "select  RF.RDB$RELATION_NAME as RELATION_NAME, RF.RDB$FIELD_NAME as FIELD_NAME, F.RDB$FIELD_TYPE as FIELD_TYPE, F.RDB$FIELD_SUB_TYPE as FIELD_SUB_TYPE, F.RDB$FIELD_PRECISION as FIELD_PRECISION, F.RDB$FIELD_SCALE as FIELD_SCALE, F.RDB$FIELD_LENGTH as FIELD_LENGTH, F.RDB$CHARACTER_LENGTH as CHAR_LEN, RF.RDB$DESCRIPTION AS REMARKS, RF.RDB$DEFAULT_SOURCE as DEFAULT_SOURCE, RF.RDB$FIELD_POSITION as FIELD_POSITION,  RF.RDB$NULL_FLAG as NULL_FLAG,  F.RDB$NULL_FLAG as SOURCE_NULL_FLAG from RDB$RELATION_FIELDS RF, RDB$FIELDS F where ";
      stringArray0[3] = "create u*ique index(8\"%,@wxha()vgi";
      stringArray0[4] = "select  RF.RDB$RELATION_NAME as RELATION_NAME, RF.RDB$FIELD_NAME as FIELD_NAME, F.RDB$FIELD_TYPE as FIELD_TYPE, F.RDB$FIELD_SUB_TYPE as FIELD_SUB_TYPE, F.RDB$FIELD_PRECISION as FIELD_PRECISION, F.RDB$FIELD_SCALE as FIELD_SCALE, F.RDB$FIELD_LENGTH as FIELD_LENGTH, F.RDB$CHARACTER_LENGTH as CHAR_LEN, RF.RDB$DESCRIPTION AS REMARKS, RF.RDB$DEFAULT_SOURCE as DEFAULT_SOURCE, RF.RDB$FIELD_POSITION as FIELD_POSITION,  RF.RDB$NULL_FLAG as NULL_FLAG,  F.RDB$NULL_FLAG as SOURCE_NULL_FLAG from RDB$RELATION_FIELDS RF, RDB$FIELDS F where ";
      stringArray0[5] = "create u*ique index(8\"%,@wxha()vgi";
      stringArray0[6] = "altr matrialized vew";
      stringArray0[7] = "altr matrialized vew";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "altr matrialized vew", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.sql.execute.ExecutonConext");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      stringArray0[1] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      stringArray0[2] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      stringArray0[3] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.iapi.sql.execute.ExecutonConext", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("select  RF.RDB$RELATION_NAME as RELATION_NAME, RF.RDB$FIELD_NAME as FIELD_NAME, F.RDB$FIELD_TYPE as FIELD_TYPE, F.RDB$FIELD_SUB_TYPE as FIELD_SUB_TYPE, F.RDB$FIELD_PRECISION as FIELD_PRECISION, F.RDB$FIELD_SCALE as FIELD_SCALE, F.RDB$FIELD_LENGTH as FIELD_LENGTH, F.RDB$CHARACTER_LENGTH as CHAR_LEN, RF.RDB$DESCRIPTION AS REMARKS, RF.RDB$DEFAULT_SOURCE as DEFAULT_SOURCE, RF.RDB$FIELD_POSITION as FIELD_POSITION,  RF.RDB$NULL_FLAG as NULL_FLAG,  F.RDB$NULL_FLAG as SOURCE_NULL_FLAG from RDB$RELATION_FIELDS RF, RDB$FIELDS F where ");
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (org.apache.derby.iapi.sql.execute.ExecutonConext, org.apache.derby.iapi.sql.execute.ExecutonConext, org.apache.derby.iapi.sql.execute.ExecutonConext, org.apache.derby.iapi.sql.execute.ExecutonConext)", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[0] = "WrITX";
      Level2CostEstimateImpl level2CostEstimateImpl0 = new Level2CostEstimateImpl(26.4305183982, 26.4305183982, 26.4305183982);
      CostEstimateImpl costEstimateImpl0 = new CostEstimateImpl();
      Level2CostEstimateImpl level2CostEstimateImpl1 = new Level2CostEstimateImpl(412.922, 26.4305183982, 1.0);
      Level2CostEstimateImpl level2CostEstimateImpl2 = new Level2CostEstimateImpl();
      Level2CostEstimateImpl level2CostEstimateImpl3 = new Level2CostEstimateImpl();
      Level2CostEstimateImpl level2CostEstimateImpl4 = new Level2CostEstimateImpl();
      level2CostEstimateImpl4.setSingleScanRowCount((-4.0));
      level2CostEstimateImpl1.setEstimatedRowCount(1L);
      Level2CostEstimateImpl level2CostEstimateImpl5 = new Level2CostEstimateImpl(0.0, (-2524.0), 1.0);
      level2CostEstimateImpl3.compare(level2CostEstimateImpl4);
      level2CostEstimateImpl0.setEstimatedCost(0.0);
      level2CostEstimateImpl2.cloneMe();
      Random.setNextRandom((-93250594));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("WrITX");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "WrITX", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (WrITX, , , , , , , , , , , , , )", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.sql.execute.ExecutonConext");
      String[] stringArray0 = new String[4];
      stringArray0[1] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      stringArray0[0] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      stringArray0[3] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.iapi.sql.execute.ExecutonConext", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("select  RF.RDB$RELATION_NAME as RELATION_NAME, RF.RDB$FIELD_NAME as FIELD_NAME, F.RDB$FIELD_TYPE as FIELD_TYPE, F.RDB$FIELD_SUB_TYPE as FIELD_SUB_TYPE, F.RDB$FIELD_PRECISION as FIELD_PRECISION, F.RDB$FIELD_SCALE as FIELD_SCALE, F.RDB$FIELD_LENGTH as FIELD_LENGTH, F.RDB$CHARACTER_LENGTH as CHAR_LEN, RF.RDB$DESCRIPTION AS REMARKS, RF.RDB$DEFAULT_SOURCE as DEFAULT_SOURCE, RF.RDB$FIELD_POSITION as FIELD_POSITION,  RF.RDB$NULL_FLAG as NULL_FLAG,  F.RDB$NULL_FLAG as SOURCE_NULL_FLAG from RDB$RELATION_FIELDS RF, RDB$FIELDS F where ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT org.apache.derby.iapi.sql.execute.ExecutonConext PRIMARY KEY (org.apache.derby.iapi.sql.execute.ExecutonConext, org.apache.derby.iapi.sql.execute.ExecutonConext, , org.apache.derby.iapi.sql.execute.ExecutonConext)", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashStarComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      pipedReader0.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer2.lowerCaseMode(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.pushBack();
      streamTokenizer3.slashStarComments(false);
      streamTokenizer3.slashSlashComments(true);
      streamTokenizer3.pushBack();
      streamTokenizer1.ordinaryChar(87);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(pipedReader0);
      streamTokenizer3.slashSlashComments(true);
      streamTokenizer4.nval = 0.0;
      streamTokenizer4.lowerCaseMode(false);
      streamTokenizer4.lowerCaseMode(true);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.4387424672740172
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLUtil.removeComments("");
      SQLUtil.isDDL("");
      SQLUtil.mutatesDataOrStructure(".");
      FromVTI fromVTI0 = new FromVTI();
      HashJoinStrategy hashJoinStrategy0 = new HashJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy0 = new NestedLoopJoinStrategy();
      PredicateList predicateList0 = new PredicateList();
      // Undeclared exception!
      try { 
        hashJoinStrategy0.getBasePredicates(predicateList0, predicateList0, fromVTI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.HashJoinStrategy", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = new Boolean("N+;_V3p|t");
      NestedLoopJoinStrategy nestedLoopJoinStrategy0 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy1 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy2 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy3 = new NestedLoopJoinStrategy();
      int int0 = (-4442);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("N>Pr^@", defaultDBTable0, (-4442), "N+;_V3p|t");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "N>Pr^@";
      stringArray0[1] = "N>Pr^@";
      stringArray0[2] = "N+;_V3p|t";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "This statement is already closed.";
      String string1 = "Xhru4i/.3";
      StringBuilder stringBuilder0 = new StringBuilder(2471);
      SQLUtil.addRequiredCondition("This statement is already closed.", stringBuilder0);
      List<Object> list0 = null;
      VersionNumber.valueOf("This statement is already closed.");
      VersionNumber versionNumber0 = null;
      try {
        versionNumber0 = new VersionNumber((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.version.VersionNumber", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("getDatH");
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.chars();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("create materialized viewreferees", false, "alter materialized viewreferees", "getDatH");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "getDatH", dBCheckConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("insert", 41);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "drop tablealter matriali~ed#v!ewcardinali3y int");
      Random.setNextRandom(4930);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.203456186693981
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.sql.execute.ExecutonConext");
      Random.setNextRandom(2292);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      stringArray0[1] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      stringArray0[2] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      stringArray0[3] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      stringArray0[4] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      DBSchema dBSchema0 = new DBSchema("");
      defaultDBTable0.setSchema(dBSchema0);
      stringArray0[5] = "select";
      stringArray0[6] = "select  RF.RDB$RELATION_NAME as RELATION_NAME, RF.RDB$FIELD_NAME as FIELD_NAME, F.RDB$FIELD_TYPE as FIELD_TYPE, F.RDB$FIELD_SUB_TYPE as FIELD_SUB_TYPE, F.RDB$FIELD_PRECISION as FIELD_PRECISION, F.RDB$FIELD_SCALE as FIELD_SCALE, F.RDB$FIELD_LENGTH as FIELD_LENGTH, F.RDB$CHARACTER_LENGTH as CHAR_LEN, RF.RDB$DESCRIPTION AS REMARKS, RF.RDB$DEFAULT_SOURCE as DEFAULT_SOURCE, RF.RDB$FIELD_POSITION as FIELD_POSITION,  RF.RDB$NULL_FLAG as NULL_FLAG,  F.RDB$NULL_FLAG as SOURCE_NULL_FLAG from RDB$RELATION_FIELDS RF, RDB$FIELDS F where ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.apache.derby.iapi.sql.execute.ExecutonConext", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT org.apache.derby.iapi.sql.execute.ExecutonConext ", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "z^1|TSBP\"Z\"oc+|";
      stringArray0[1] = " (not found)";
      stringArray0[2] = ".KGGJ' ";
      stringArray0[3] = "z^1|TSBP\"Z\"oc+|";
      stringArray0[4] = "z^1|TSBP\"Z\"oc+|";
      stringArray0[5] = "z^1|TSBP\"Z\"oc+|";
      stringArray0[6] = "z^1|TSBP\"Z\"oc+|";
      // Undeclared exception!
      try { 
        SQLUtil.join(".KGGJ' ", ".KGGJ' ", (String[]) null, "z^1|TSBP\"Z\"oc+|", ".KGGJ' ", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      Boolean boolean0 = new Boolean("N+;_V3p|t");
      NestedLoopJoinStrategy nestedLoopJoinStrategy0 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy1 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy2 = new NestedLoopJoinStrategy();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.getInteger((String) null, integer0);
      Integer integer1 = RawTransaction.COMMIT;
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition(";ODQ-1$1VxM}", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      TransactionTable transactionTable0 = null;
      try {
        transactionTable0 = new TransactionTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.store.raw.xact.TransactionTable", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|ex%**:s>";
      stringArray0[1] = "qWLp4";
      SQLUtil.normalize("|ex%**:s>", false);
      int int0 = 8;
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = 'w';
      charArray0[2] = '.';
      charArray0[3] = 'K';
      charArray0[4] = '\"';
      charArray0[5] = 'u';
      charArray0[6] = 'm';
      try { 
        pipedReader0.read(charArray0, 8, 8);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = " REFERENCES ";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " REFERENCES ");
      SQLUtil.addOptionalCondition(" REFERENCES ", stringBuilder0);
      int int0 = 40;
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-2878));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      SQLUtil.addOptionalCondition("4\r&L", stringBuilder0);
      int int0 = 40;
      StringBuffer stringBuffer1 = new StringBuffer(40);
      // Undeclared exception!
      try { 
        stringBuffer0.delete(164, 40);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = true;
      TransactionTable transactionTable0 = null;
      try {
        transactionTable0 = new TransactionTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.store.raw.xact.TransactionTable", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "shdutdown";
      objectArray0[1] = (Object) "c";
      objectArray0[2] = (Object) "XhrVxu4;i/.33";
      objectArray0[3] = (Object) ">rzU;`H*FC,pAeyF";
      objectArray0[2] = (Object) "c";
      objectArray0[5] = (Object) ">rzU;`H*FC,pAeyF";
      objectArray0[2] = (Object) "XhrVxu4;i/.33";
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.sql.execute.ExecutonConext");
      String[] stringArray0 = new String[21];
      stringArray0[1] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      stringArray0[5] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      stringArray0[3] = "org.apache.derby.iapi.sql.execute.ExecutonConext";
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("org.apache.derby.iapi.sql.execute.ExecutonConext");
      String string0 = SQLUtil.renderValue("org.apache.derby.iapi.sql.execute.ExecutonConext");
      assertEquals("'org.apache.derby.iapi.sql.execute.ExecutonConext'", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = SQLUtil.isDML("excc");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      String string0 = SQLUtil.renderValue(constantActionActivation0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[14];
      char char0 = '^';
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("WrITX");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "b@QQ|;b-6", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      int int0 = (-1881919244);
      // Undeclared exception!
      try { 
        stringBuilder0.appendCodePoint((-1881919244));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Character character0 = new Character('i');
      String string0 = SQLUtil.substituteMarkers("rename", "renamereferences", character0);
      assertEquals("rename", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("PRIMARY KEY ", 90);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.isDDL("alterWtable");
      System.setCurrentTimeMillis(518);
      System.setCurrentTimeMillis(550L);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NestedLoopJoinStrategy nestedLoopJoinStrategy0 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy1 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy2 = new NestedLoopJoinStrategy();
      NestedLoopJoinStrategy nestedLoopJoinStrategy3 = new NestedLoopJoinStrategy();
      SQLUtil.parseColumnTypeAndSize("N>Pr^@");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      Random.setNextRandom((-3053));
      VersionNumber versionNumber0 = VersionNumber.valueOf((String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("(xfRiT:] 3Qo5p(", "shdutdown", versionNumber0);
      String string0 = SQLUtil.ownerDotComponent(defaultDatabase0);
      assertEquals("(xfRiT:] 3Qo5p(", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "lfPc7.lZX4u.rv";
      stringArray0[1] = "lfPc7.lZX4u.rv";
      stringArray0[2] = "lfPc7.lZX4u.rv";
      stringArray0[3] = "lfPc7.lZX4u.rv";
      stringArray0[4] = "lfPc7.lZX4u.rv";
      stringArray0[5] = "create materialized viewselect ixto";
      stringArray0[6] = "[99zq;T8%g;dQ6J$K";
      String string0 = SQLUtil.leftJoin("lfPc7.lZX4u.rv", stringArray0, "'39RVU`{@.xAk3,/zX", "create materialized viewselect ixto", stringArray0);
      assertEquals("left join '39RVU`{@.xAk3,/zX as create materialized viewselect ixto on lfPc7.lZX4u.rv.lfPc7.lZX4u.rv = create materialized viewselect ixto.lfPc7.lZX4u.rv and lfPc7.lZX4u.rv.lfPc7.lZX4u.rv = create materialized viewselect ixto.lfPc7.lZX4u.rv and lfPc7.lZX4u.rv.lfPc7.lZX4u.rv = create materialized viewselect ixto.lfPc7.lZX4u.rv and lfPc7.lZX4u.rv.lfPc7.lZX4u.rv = create materialized viewselect ixto.lfPc7.lZX4u.rv and lfPc7.lZX4u.rv.lfPc7.lZX4u.rv = create materialized viewselect ixto.lfPc7.lZX4u.rv and lfPc7.lZX4u.rv.create materialized viewselect ixto = create materialized viewselect ixto.create materialized viewselect ixto and lfPc7.lZX4u.rv.[99zq;T8%g;dQ6J$K = create materialized viewselect ixto.[99zq;T8%g;dQ6J$K", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("create u*ique index(8\"%,@wxha()vgi");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8\"%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("DELETE");
      VersionNumber versionNumber0 = VersionNumber.valueOf("inner");
      VersionNumber versionNumber1 = VersionNumber.valueOf("inner");
      VersionNumber versionNumber2 = VersionNumber.valueOf("inner");
      VersionNumber versionNumber3 = VersionNumber.valueOf("&PgT)(V}xH");
      versionNumber0.toString();
      VersionNumber.valueOf((String) null);
      versionNumber3.toString();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("15=*=T+", "UvdjTkV/wDY*Rf5V", versionNumber0);
      versionNumber1.toString();
      VersionNumber versionNumber4 = VersionNumber.valueOf("(w41=v(yBXeB");
      VersionNumber versionNumber5 = VersionNumber.valueOf("(w41=v(yBXeB");
      versionNumber3.compareTo(versionNumber5);
      versionNumber4.compareTo(versionNumber3);
      DefaultDatabase defaultDatabase1 = new DefaultDatabase("inner", "U", versionNumber2);
      assertNull(defaultDatabase1.getDoc());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MElTB5(";
      stringArray0[1] = "MElTB5(";
      stringArray0[2] = "select";
      stringArray0[3] = "--";
      stringArray0[4] = "MElTB5(";
      stringArray0[5] = "MElTB5(";
      stringArray0[6] = "EACH";
      stringArray0[7] = "MElTB5(";
      stringArray0[8] = " REFERENCES ";
      String string0 = SQLUtil.innerJoin("MElTB5(", stringArray0, "eM.}V[FcNfo,:NoS)", "lD", stringArray0);
      assertEquals("eM.}V[FcNfo,:NoS) as lD on MElTB5(.MElTB5( = lD.MElTB5( and MElTB5(.MElTB5( = lD.MElTB5( and MElTB5(.select = lD.select and MElTB5(.-- = lD.-- and MElTB5(.MElTB5( = lD.MElTB5( and MElTB5(.MElTB5( = lD.MElTB5( and MElTB5(.EACH = lD.EACH and MElTB5(.MElTB5( = lD.MElTB5( and MElTB5(. REFERENCES  = lD. REFERENCES ", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[0] = "WrITX";
      SQLUtil.join("WrITX", "WrITX", stringArray0, "hP`ZMupSA-", "\u0001\u0168", stringArray0);
      SelectNode selectNode0 = new SelectNode();
      SelectNode selectNode1 = new SelectNode();
      PredicateList predicateList0 = selectNode1.getWherePredicates();
      assertNull(predicateList0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter matrialized v!ewcardinali3y int");
      VersionNumber versionNumber0 = VersionNumber.valueOf("alter matrialized v!ewcardinali3y int");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber1 = new VersionNumber(columnDescriptorList0);
      VersionNumber versionNumber2 = new VersionNumber(columnDescriptorList0);
      versionNumber0.toString();
      VersionNumber versionNumber3 = VersionNumber.valueOf("alter");
      versionNumber3.toString();
      VersionNumber.valueOf("alter matrialized v!ewcardinali3y int");
      VersionNumber versionNumber4 = VersionNumber.valueOf("(5~!WXwx[?k");
      VersionNumber.valueOf("ALTER TABLE ");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("alter", "alter", versionNumber4);
      VersionNumber versionNumber5 = new VersionNumber(columnDescriptorList0);
      VersionNumber.valueOf("K4sWH6cqF  sx94y3t");
      DefaultDatabase defaultDatabase1 = new DefaultDatabase("(5~!WXwx[?k", "alter", versionNumber3);
      defaultDatabase1.toString();
      // Undeclared exception!
      try { 
        defaultDatabase1.getSchema("alter indexexccte}mri");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '(5~!WXwx[?k'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "exCcte}Mri";
      SQLUtil.mutatesStructure("exCcte}Mri");
      Random.setNextRandom((-114));
      char char0 = 'i';
      char char1 = 'p';
      char char2 = 'S';
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-114));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.1950865325403197
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select ixto");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Level2CostEstimateImpl level2CostEstimateImpl0 = new Level2CostEstimateImpl(0.0, 31.0, 953.47082267);
      CostEstimate costEstimate0 = level2CostEstimateImpl0.divide(953.47082267, (CostEstimate) null);
      Level2CostEstimateImpl level2CostEstimateImpl1 = new Level2CostEstimateImpl();
      Level2CostEstimateImpl level2CostEstimateImpl2 = new Level2CostEstimateImpl(953.47082267, 3901.020637727974, 1.0);
      Level2CostEstimateImpl level2CostEstimateImpl3 = new Level2CostEstimateImpl();
      Level2CostEstimateImpl level2CostEstimateImpl4 = new Level2CostEstimateImpl(0.0, 1.0, 1.0);
      level2CostEstimateImpl1.compare(costEstimate0);
      level2CostEstimateImpl1.setEstimatedCost(179.8201568516);
      CostEstimate costEstimate1 = level2CostEstimateImpl0.cloneMe();
      assertFalse(costEstimate1.equals((Object)level2CostEstimateImpl1));
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("execute", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "j~97qX.?~h(?]mrOf";
      stringArray0[1] = "k";
      stringArray0[2] = "alter index";
      stringArray0[3] = "S/";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(j~97qX.?~h(?]mrOf, k, alter index, S/)", string0);
  }
}
