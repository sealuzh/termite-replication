/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 22:15:41 GMT 2019
 */

package net.sourceforge.schemaspy.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import net.sourceforge.schemaspy.Config;
import net.sourceforge.schemaspy.model.ForeignKeyConstraint;
import net.sourceforge.schemaspy.model.Table;
import net.sourceforge.schemaspy.model.TableColumn;
import net.sourceforge.schemaspy.model.xml.SchemaMeta;
import net.sourceforge.schemaspy.model.xml.TableColumnMeta;
import net.sourceforge.schemaspy.view.DefaultSqlFormatter;
import net.sourceforge.schemaspy.view.SqlFormatter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ForeignKeyConstraint_ESTest extends ForeignKeyConstraint_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5639997577313354
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 0, 0);
      foreignKeyConstraint0.isRestrictDelete();
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.isNullOnDelete();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getUpdateRule();
      foreignKeyConstraint0.getParentTable();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getDeleteRuleName();
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7736806390558368
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "{s!5/{\u0007?U", (-1), 2);
      foreignKeyConstraint0.isNullOnDelete();
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      assertTrue(boolean0);
      
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("N", string0);
      
      foreignKeyConstraint0.getParentColumns();
      assertEquals((-1), foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.400704712407596
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 1, 1);
      linkedList0.spliterator();
      foreignKeyConstraint0.getDeleteRuleDescription();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "Restrict delete:\n Parent cannot be deleted if children exist", 1361, 1);
      foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
      foreignKeyConstraint0.getName();
      foreignKeyConstraint0.isReal();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.getDeleteRuleName();
      // Undeclared exception!
      try { 
        foreignKeyConstraint1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.284895754901243
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "~(@)U/5JdnW_yI33*n");
      linkedList0.removeIf(predicate0);
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.setShortType("Cascade on delete:\n Deletion of parent deletes child");
      linkedList0.parallelStream();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 0, 1226);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      foreignKeyConstraint0.addParentColumn(tableColumn0);
      Integer integer0 = new Integer(0);
      foreignKeyConstraint0.getName();
      foreignKeyConstraint0.getParentColumns();
      System.setCurrentTimeMillis((long) integer0);
      foreignKeyConstraint0.getParentTable();
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getChildTable();
      assertEquals(1226, foreignKeyConstraint0.getDeleteRule());
      assertEquals(0, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Config config0 = new Config();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 3, 3);
      foreignKeyConstraint0.isRestrictDelete();
      Config config1 = new Config();
      Config config2 = new Config();
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta("d;p7)49SS", "d;p7)49SS", "+Cm]C`Hsho*6n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Specified meta file \"d;p7)49SS\" does not exist
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6081850857674325
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<TableColumn> linkedList1 = new LinkedList<TableColumn>();
      linkedList1.poll();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList1);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "TYPE_NAME", (-1611), 1);
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getChildColumns();
      boolean boolean0 = foreignKeyConstraint0.isCascadeOnDelete();
      assertFalse(boolean0);
      
      foreignKeyConstraint0.getChildTable();
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Restrict delete", string0);
      
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.getParentTable();
      foreignKeyConstraint0.getParentColumns();
      boolean boolean1 = foreignKeyConstraint0.isRestrictDelete();
      assertTrue(boolean1);
      
      foreignKeyConstraint0.getParentColumns();
      String string1 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string1);
      assertEquals((-1611), foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9594045983154567
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 3, 3);
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getParentColumns();
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("R", string0);
      assertEquals(3, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", (-157), 1);
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals((-157), foreignKeyConstraint0.getUpdateRule());
      assertEquals("R", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Config config0 = Config.getInstance();
      config0.getCharset();
      config0.setHtmlGenerationEnabled(false);
      config0.getCss();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", (-1), (-267));
      config0.setDb("UTF-8");
      config0.isOneOfMultipleSchemas();
      Config config1 = Config.getInstance();
      config0.isHtmlGenerationEnabled();
      config1.getFont();
      config1.getDb();
      config1.getSchemaSpec();
      SqlFormatter sqlFormatter0 = config1.getSqlFormatter();
      config1.setSqlFormatter(sqlFormatter0);
      config1.setMaxDetailedTabled(1909);
      Config config2 = new Config();
      config1.setNumRowsEnabled(false);
      config2.setFontSize(1709);
      config0.setSchema("UTF-8");
      config2.getConnectionProperties();
      config2.isOneOfMultipleSchemas();
      config2.setHtmlGenerationEnabled(false);
      config1.setDbType("#");
      Config config3 = new Config();
      config2.setPort((Integer) null);
      config3.getDbProperties();
      foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals((-1), foreignKeyConstraint0.getUpdateRule());
      assertEquals((-267), foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7884586555891517
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 3, 3);
      foreignKeyConstraint0.isReal();
      Config config0 = new Config();
      System.setCurrentTimeMillis(179L);
      System.setCurrentTimeMillis((-18L));
      System.setCurrentTimeMillis(179L);
      System.setCurrentTimeMillis(3);
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleDescription();
      System.setCurrentTimeMillis(3);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "gS0|\"|", 191, (-820));
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8,_Ft[R,%)l]d}I+FN");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SESSION_USER");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8,_Ft[R,%)l]d}I+FN");
      int int0 = foreignKeyConstraint0.getUpdateRule();
      assertEquals((-820), foreignKeyConstraint0.getDeleteRule());
      assertEquals(191, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Config config0 = Config.getInstance();
      config0.getCharset();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 300, 300);
      foreignKeyConstraint0.isRestrictDelete();
      Config config1 = Config.getInstance();
      config0.isHtmlGenerationEnabled();
      config1.getSchemaSpec();
      config0.isImpliedConstraintsEnabled();
      config1.setMaxDetailedTabled(300);
      Config config2 = Config.getInstance();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "UTF-8";
      stringArray0[1] = "UTF-8";
      stringArray0[2] = "UTF-8";
      stringArray0[3] = "UTF-8";
      Config config3 = new Config(stringArray0);
      Config.setInstance(config3);
      config2.setOutputDir("UTF-8");
      config1.setNumRowsEnabled(true);
      config0.setSchema("UTF-8");
      config2.setDbType("UTF-8");
      config2.isLowQuality();
      config0.isEvaluateAllEnabled();
      Config config4 = Config.getInstance();
      Config.getLoadedFromJar();
      config1.setCharset("UTF-8");
      config0.setUser("UTF-8");
      config4.setRailsEnabled(false);
      config2.getParam("UTF-8");
      config0.setSchemaSpec("UTF-8");
      Config config5 = Config.getInstance();
      config5.isViewsEnabled();
      config5.setImpliedConstraintsEnabled(false);
      config5.setCharset("UTF-8");
      config0.getUser();
      config2.isHtmlGenerationEnabled();
      config1.setNumRowsEnabled(false);
      config1.getCatalog();
      Config config6 = new Config();
      assertFalse(config6.equals((Object)config1));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "You can use your own databae types by specifying the filespec of a .properties file with -t.");
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)48;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "You can use your own databae types by specifying the filespec of a .properties file with -t.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "You can use your own databae types by specifying the filespec of a .properties file with -t.");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "HQh!`C}sW`", (-1169), (-1169));
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";T?~ZHlWsLm'");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HQh!`C}sW`");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")l&F7T<tg\"-");
      int int0 = foreignKeyConstraint0.getUpdateRule();
      assertEquals((-1169), foreignKeyConstraint0.getDeleteRule());
      assertEquals((-1169), int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";T?~ZHlWsLm'");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, ";T?~ZHlWsLm'", 3453, 5211);
      foreignKeyConstraint0.addChildColumn((TableColumn) null);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      System.setCurrentTimeMillis(5211);
      System.setCurrentTimeMillis(5211);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(5211);
      System.setCurrentTimeMillis(724L);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Adding foreign key constraint '", (-224), (-224));
      foreignKeyConstraint0.getName();
      assertEquals((-224), foreignKeyConstraint0.getUpdateRule());
      assertEquals((-224), foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2686538392284157
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "java.util.LinkedList@0000000001", 0, 0);
      foreignKeyConstraint0.getParentColumns();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "java.util.LinkedList@0000000001";
      objectArray0[1] = (Object) null;
      linkedList0.toArray(objectArray0);
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      assertFalse(boolean0);
      
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("C", string0);
      
      foreignKeyConstraint0.getParentColumns();
      String string1 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Cascade on delete:\n Deletion of parent deletes child", string1);
      
      String string2 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals(0, foreignKeyConstraint0.getUpdateRule());
      assertEquals("Cascade on delete", string2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Config config0 = Config.getInstance();
      config0.getCharset();
      config0.setHtmlGenerationEnabled(true);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", (-209), (-209));
      foreignKeyConstraint0.addParentColumn((TableColumn) null);
      config0.setDb("UTF-8");
      config0.isOneOfMultipleSchemas();
      Config config1 = Config.getInstance();
      config1.getSchemaSpec();
      Config config2 = Config.getInstance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      config1.setOutputDir("UTF-8");
      config1.setNumRowsEnabled(true);
      config2.setFontSize(1710);
      config2.setSchemaSpec("Cascade on delete");
      config0.setSchema("UTF-8");
      config2.setDbType("UTF-8");
      config0.isEvaluateAllEnabled();
      Config config3 = Config.getInstance();
      config3.setMaxDbThreads(3);
      assertSame(config3, config1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.800604404577006
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "{s!5/{\u0007?U", (-1), 2);
      foreignKeyConstraint0.isNullOnDelete();
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      assertTrue(boolean0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{s!5/{\u0007?U");
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Null on delete", string0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Null on delete:\n Foreign key to parent set to NULL when parent deleted", string1);
      assertEquals((-1), foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3876362280213312
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 0, 0);
      boolean boolean0 = foreignKeyConstraint0.isCascadeOnDelete();
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.isCascadeOnDelete();
      boolean boolean1 = foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getDeleteRule();
      boolean boolean2 = foreignKeyConstraint0.isRestrictDelete();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      foreignKeyConstraint0.getChildColumns();
      assertEquals(0, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "You can use your own databae types by specifying the filespec of a .properties file with -t.");
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)48;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "You can use your own databae types by specifying the filespec of a .properties file with -t.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "You can use your own databae types by specifying the filespec of a .properties file with -t.");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "h;rs.9LUIV;}E#>T", (-1169), (-1169));
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";T?~ZHlWsLm'");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h;rs.9LUIV;}E#>T");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")l&F7T<tg\"-");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cN Qo ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cN Qo ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vpsO#JL>g'jS ;");
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint0);
      assertEquals((-1169), foreignKeyConstraint0.getUpdateRule());
      assertEquals(0, int0);
      assertEquals((-1169), foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "You can use your own databae types by specifying the filespec of a .properties file with -t.");
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)48;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-113);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "You can use your own databae types by specifying the filespec of a .properties file with -t.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "You can use your own databae types by specifying the filespec of a .properties file with -t.");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "You can use your own databae types by specifying the filespec of a .properties file with -t.", (-1169), (-1169));
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";T?~ZHlWsLm'");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "You can use your own databae types by specifying the filespec of a .properties file with -t.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")l&F7T<tg\"-");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "You can use your own databae types by specifying the filespec of a .properties file with -t.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cN Qo ");
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, ";T?~ZHlWsLm'", (-1169), 1624);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vpsO#JL>g'jS ;");
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
      assertEquals(1624, foreignKeyConstraint1.getDeleteRule());
      assertEquals(62, int0);
      assertEquals((-1169), foreignKeyConstraint1.getUpdateRule());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Config config0 = Config.getInstance();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "UTF-8";
      stringArray0[2] = "UTF-8";
      stringArray0[3] = "UTF-8";
      Config config1 = Config.getInstance();
      SqlFormatter sqlFormatter0 = config1.getSqlFormatter();
      config0.setSqlFormatter(sqlFormatter0);
      config0.getCharset();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 324, 324);
      config0.setDb("UTF-8");
      config0.isOneOfMultipleSchemas();
      Config config2 = Config.getInstance();
      config2.getFont();
      config2.getSchemaSpec();
      SqlFormatter sqlFormatter1 = config2.getSqlFormatter();
      config2.setSqlFormatter(sqlFormatter1);
      config0.isImpliedConstraintsEnabled();
      Config config3 = Config.getInstance();
      config3.setSqlFormatter((SqlFormatter) null);
      config3.setOutputDir("UTF-8");
      config2.setNumRowsEnabled(false);
      config3.setDbType("UTF-8");
      config0.isEvaluateAllEnabled();
      Config config4 = Config.getInstance();
      config2.setCharset("UTF-8");
      config0.setUser("UTF-8");
      config4.setRailsEnabled(false);
      config3.getParam("UTF-8");
      config0.setSchemaSpec("UTF-8");
      Config config5 = new Config();
      config3.setEncodeCommentsEnabled(false);
      Config.getInstance();
      foreignKeyConstraint0.getDeleteRuleName();
      assertEquals(324, foreignKeyConstraint0.getDeleteRule());
      assertEquals(324, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5350813079469845
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "{s!5/{\u0007?U", 3915, 17);
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      assertFalse(boolean0);
      
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals(17, int0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals(3915, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "{s!5/{\u0007?U", 3936, (-1));
      foreignKeyConstraint0.isNullOnDelete();
      foreignKeyConstraint0.getDeleteRule();
      Config config0 = new Config();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      String string0 = "73H\\ftflmysL4jk";
      String string1 = "table_id";
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta("73H\ftflmysL4jk", "table_id", "73H\ftflmysL4jk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Specified meta file \"73H\ftflmysL4jk\" does not exist
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Config config0 = Config.getInstance();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "UTF-8";
      stringArray0[1] = "UTF-8";
      stringArray0[2] = "UTF-8";
      stringArray0[3] = "UTF-8";
      Config config1 = new Config(stringArray0);
      SqlFormatter sqlFormatter0 = config1.getSqlFormatter();
      config0.setSqlFormatter(sqlFormatter0);
      config0.getCharset();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 300, 300);
      config0.setDb("UTF-8");
      config0.isOneOfMultipleSchemas();
      Config config2 = Config.getInstance();
      config2.getFont();
      config2.getSchemaSpec();
      config0.getLogLevel();
      SqlFormatter sqlFormatter1 = config2.getSqlFormatter();
      config2.setSqlFormatter(sqlFormatter1);
      config0.isImpliedConstraintsEnabled();
      Config config3 = Config.getInstance();
      config3.setSqlFormatter((SqlFormatter) null);
      config3.setOutputDir("UTF-8");
      config2.setNumRowsEnabled(true);
      config3.setDbType("UTF-8");
      config0.isEvaluateAllEnabled();
      Config config4 = Config.getInstance();
      config2.setCharset("UTF-8");
      config0.setUser("UTF-8");
      config4.setRailsEnabled(false);
      config3.getParam("UTF-8");
      config0.setSchemaSpec("UTF-8");
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.compareTo((ForeignKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "You can use your own database types by specifying the filespec of a .properties file with -t.");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";T?~ZHlWsLm'");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "You can use your own database types by specifying the filespec of a .properties file with -t.");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Nul on(deleEe", (-1169), (-1169));
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";T?~ZHlWsLm'");
      System.setCurrentTimeMillis(961L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Nul on(deleEe");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")l&F7T<^tg\"-");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cN Qo ");
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vpsO#JL>g'jS ;");
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint0);
      assertEquals((-1169), foreignKeyConstraint0.getDeleteRule());
      assertEquals((-1169), foreignKeyConstraint0.getUpdateRule());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "You can use your own database types by specifying the filespec of a .properties file with -t.");
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-113);
      byteArray0[1] = (byte) (-113);
      byteArray0[5] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";T?~ZHlWsLm'");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "You can use your own database types by specifying the filespec of a .properties file with -t.");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "&ul on(#eleke", (-1169), (-1169));
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";T?~ZHlWsLm'");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&ul on(#eleke");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")l&F7T<tg\"-");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cN Qo ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cN Qo ");
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "&ul on(#eleke", (-1169), 1624);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vpsO#JL>g'jS ;");
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "You can use your own databae types by specifying the filespec of a .properties file with -t.");
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)48;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "You can use your own databae types by specifying the filespec of a .properties file with -t.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "You can use your own databae types by specifying the filespec of a .properties file with -t.");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "hrs.9LUI}E#>", (-1169), (-1169));
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";T?~ZHlWsLm'");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hrs.9LUI}E#>");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")l&F7T<tg\"-");
      boolean boolean0 = foreignKeyConstraint0.isCascadeOnDelete();
      assertEquals((-1169), foreignKeyConstraint0.getDeleteRule());
      assertFalse(boolean0);
      assertEquals((-1169), foreignKeyConstraint0.getUpdateRule());
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cN Qo ");
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vpsO#JL>g'jS ;");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Config config0 = Config.getInstance();
      config0.getCharset();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", (-223), (-223));
      config0.setDb("UTF-8");
      config0.isOneOfMultipleSchemas();
      Config config1 = Config.getInstance();
      config0.isHtmlGenerationEnabled();
      config1.getFont();
      config1.getSchemaSpec();
      config0.getLogLevel();
      SqlFormatter sqlFormatter0 = config1.getSqlFormatter();
      config1.setSqlFormatter(sqlFormatter0);
      config0.isImpliedConstraintsEnabled();
      config1.setMaxDetailedTabled((-223));
      Config config2 = Config.getInstance();
      config2.setSqlFormatter((SqlFormatter) null);
      config2.setOutputDir("UTF-8");
      config1.setNumRowsEnabled(false);
      config0.setSchema("UTF-8");
      config2.setDbType("UTF-8");
      config0.isEvaluateAllEnabled();
      Config config3 = Config.getInstance();
      config1.setCharset("UTF-8");
      config0.setUser("UTF-8");
      config3.setRailsEnabled(false);
      config2.getParam("UTF-8");
      config0.setSchemaSpec("UTF-8");
      Config config4 = Config.getInstance();
      Config config5 = Config.getInstance();
      config4.getUser();
      Config.setInstance(config5);
      config4.isHtmlGenerationEnabled();
      config1.setNumRowsEnabled(false);
      config1.getCatalog();
      Config config6 = new Config();
      boolean boolean0 = foreignKeyConstraint0.isImplied();
      assertEquals((-223), foreignKeyConstraint0.getDeleteRule());
      assertFalse(boolean0);
      assertEquals((-223), foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3823452227303257
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      int int0 = (-486);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "2os", (-2342), 3);
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.addParentColumn(tableColumn0);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "a", (-470), (-486));
      foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
      List<TableColumn> list0 = foreignKeyConstraint0.getParentColumns();
      ForeignKeyConstraint.toString(list0);
      foreignKeyConstraint1.getParentColumns();
      System.setCurrentTimeMillis((-47));
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      // Undeclared exception!
      try { 
        tableColumn1.isUnique();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.add((TableColumn) null);
      linkedList0.spliterator();
      // Undeclared exception!
      try { 
        ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.unlinkParents();
      tableColumn0.setType("i!(V^=toViN?{");
      tableColumn0.removeParent((TableColumn) null);
      tableColumn0.removeChild((TableColumn) null);
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      tableColumn0.unlinkParents();
      tableColumn1.setType("i!(V^=toViN?{");
      tableColumn1.setIsAutoUpdated(false);
      tableColumn1.setType("i!(V^=toViN?{");
      tableColumn1.setIsAutoUpdated(false);
      tableColumn0.setShortType("i!(V^=toViN?{");
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint((TableColumn) null, tableColumn1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.setType("i!(MV^=toViN?{$");
      tableColumn0.setShortType("^BNvf9]0'5t>O@\"|");
      tableColumn0.unlinkParents();
      tableColumn0.setIsAutoUpdated(false);
      tableColumn0.setIsAutoUpdated(false);
      tableColumn0.setShortType("^BNvf9]0'5t>O@\"|");
      tableColumn0.setShortType("n+FzXYnd?'5?");
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint(tableColumn0, tableColumn0, 111, 1081);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }
}
