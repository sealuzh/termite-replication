/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 03:33:44 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASSearch;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.classifiers.trees.RandomTree;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.MiddleOutConstructor;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.unsupervised.attribute.Remove;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      RandomTree randomTree0 = new RandomTree();
      AbstractClassifier.runClassifier(randomTree0, (String[]) null);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      jRip0.getOptions();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      Filter.makeCopy(allFilter0);
      AllFilter allFilter2 = new AllFilter();
      Filter.makeCopy(allFilter0);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      AllFilter allFilter3 = new AllFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      Filter.makeCopy(allFilter2);
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      AllFilter allFilter4 = new AllFilter();
      Filter.makeCopy(filter0);
      Random.setNextRandom(2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo((-3226.456595356992));
      jRip0.listOptions();
      jRip0.getMinNo();
      jRip0.listOptions();
      JRip jRip1 = new JRip();
      String string0 = "second_value";
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7039917864324614
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale.getISOCountries();
      int[] intArray0 = new int[9];
      intArray0[0] = 1641;
      intArray0[1] = 1641;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-9), intArray0, 4104);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties0.replaceAll(biFunction0);
      Attribute attribute0 = new Attribute("6ax3", (String) null, protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd1.cover = 5429.69556387409;
      jRip_NumericAntd1.value = (double) (-2145929752);
      jRip_NumericAntd1.covers(binarySparseInstance0);
      System.setCurrentTimeMillis((-1693L));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(17);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties1);
      BiFunction<Object, Object, Locale.LanguageRange> biFunction0 = (BiFunction<Object, Object, Locale.LanguageRange>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties4.replaceAll(biFunction0);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties1);
      Properties properties3 = new Properties(properties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties4);
      Attribute attribute0 = new Attribute("kP:h", " // ");
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(2);
      sparseInstance0.setMissing(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertFalse(boolean0);
      
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals("kP:h <= NaN", string0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale.getISOCountries();
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-9), intArray0, 4104);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Function<Object, RuleStats> function0 = (Function<Object, RuleStats>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      properties0.computeIfAbsent(binarySparseInstance0, function0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties0.replaceAll(biFunction0);
      Attribute attribute0 = new Attribute("6ax3", (String) null, protectedProperties0);
      BiFunction<Object, Object, RuleStats> biFunction1 = (BiFunction<Object, Object, RuleStats>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      BiFunction<Object, Object, JRip.RipperRule> biFunction2 = (BiFunction<Object, Object, JRip.RipperRule>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties0.replaceAll(biFunction2);
      jRip_NumericAntd0.value = 2.0;
      jRip_NumericAntd0.covers(binarySparseInstance0);
      CoverTree coverTree0 = new CoverTree();
      jRip_NumericAntd0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      VotedPerceptron votedPerceptron1 = new VotedPerceptron();
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      Utils.log2 = (-1748.55628897);
      jRip0.getOptions();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      MiddleOutConstructor middleOutConstructor1 = new MiddleOutConstructor();
      AbstractInstance.s_numericAfterDecimalPoint = (-2145929752);
      System.setCurrentTimeMillis(0L);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double[] doubleArray0 = new double[2];
      jRip0.getFolds();
      doubleArray0[0] = 0.8;
      int[] intArray0 = new int[0];
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(0L, doubleArray0, intArray0, (-1201));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.getUsePruning();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      DecisionTable decisionTable0 = new DecisionTable();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      middleOutConstructor0.printInsts((-3334), 3);
      MiddleOutConstructor middleOutConstructor1 = new MiddleOutConstructor();
      middleOutConstructor1.printInsts(126, 1);
      MiddleOutConstructor middleOutConstructor2 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor3 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor4 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor5 = new MiddleOutConstructor();
      middleOutConstructor2.printInsts(10000, 2026);
      MiddleOutConstructor middleOutConstructor6 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor7 = new MiddleOutConstructor();
      middleOutConstructor6.setInitialAnchorRandom(false);
      MiddleOutConstructor middleOutConstructor8 = new MiddleOutConstructor();
      middleOutConstructor6.printInsts(5, 10000);
      MiddleOutConstructor middleOutConstructor9 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor10 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor11 = new MiddleOutConstructor();
      try { 
        middleOutConstructor10.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale.getISOCountries();
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("David J.C. Mackay", arrayList0, 4104);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.132999251994992
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      jRip0.setUsePruning(false);
      Instances instances0 = null;
      try { 
        jRip0.rulesetForOneClass(0.0, (Instances) null, (-2.0), (-2.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      Hashtable<Attribute, RuleStats> hashtable0 = new Hashtable<Attribute, RuleStats>();
      decisionTable0.m_entries = hashtable0;
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".bsi", linkedList0, 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.relationalValue((-6));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale.getISOCountries();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties5);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties4);
      Properties properties3 = new Properties(protectedProperties10);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties10);
      Attribute attribute0 = new Attribute("PS.  We have compared this implementation with the original ripper ", " // ");
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("PS.  We have compared this implementation with the original ripper  <= NaN", string0);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(boolean0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9594045983154567
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      try { 
        jRip0.rulesetForOneClass((-805.6595248), (Instances) null, (-166.30730260401725), (-166.30730260401725));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("xx");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[9];
      intArray0[8] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[5] = 4;
      intArray0[7] = 0;
      intArray0[8] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 1);
      binarySparseInstance0.isMissing(3);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      jRip_NominalAntd0.covers(binarySparseInstance1);
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.647826624623992
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("CY],_`S-kXLY!YlH", arrayList0, 124);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Instances instances1 = new Instances(instances0);
      jRip_RipperRule0.copy();
      jRip_RipperRule0.copy();
      String[] stringArray0 = new String[18];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@relation";
      stringArray0[2] = "1Lu=C'QeJ'?";
      stringArray0[3] = ".bsi";
      stringArray0[4] = ".arff";
      stringArray0[5] = "@relation";
      stringArray0[6] = "@relation";
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CY],_`S-kXLY!YlH");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      jRip_RipperRule0.setConsequent(4.9E-324);
      jRip_RipperRule0.grow(instances1);
      assertEquals(4.9E-324, jRip_RipperRule0.getConsequent(), 0.01);
      
      System.setCurrentTimeMillis(124);
      Random.setNextRandom(124);
      Instances.mergeInstances(instances1, instances1);
      Attribute attribute0 = new Attribute(".arff", 124);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertEquals(".arff = ", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) null, locale_FilteringMode0);
      Properties properties0 = new Properties();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Attribute> arrayList5 = new ArrayList<Attribute>();
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      Attribute attribute0 = new Attribute("#n{oDy5h[");
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAccu();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.trimToSize();
      Attribute attribute0 = new Attribute(")iZ#WrE:P6dw06SZ(9");
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("q", arrayList2, 0);
      try { 
        jRip0.rulesetForOneClass(2, instances0, 3, 815.610126608987);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-p");
      Attribute attribute0 = new Attribute("Ri,", (-1337));
      attribute0.value((-1337));
      jRip_RipperRule0.toString(attribute0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-p");
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Environment environment0 = Environment.getSystemWide();
      environment0.getVariableNames();
      JRip jRip0 = new JRip();
      DenseInstance denseInstance0 = new DenseInstance(2);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(17);
      byteArrayOutputStream0.reset();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.print((long) 17);
      mockPrintStream0.println();
      byteArrayOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintStream0.print((-37.0));
      mockPrintStream0.println();
      mockPrintStream0.checkError();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) byteArrayOutputStream0;
      objectArray1[1] = (Object) byteArrayOutputStream0;
      objectArray1[2] = (Object) mockPrintStream0;
      mockPrintWriter0.printf("Ka`E", objectArray1);
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      mockPrintWriter0.println(true);
      Object object0 = new Object();
      objectArray0[2] = (Object) mockPrintStream0;
      mockPrintWriter0.format("Ka`E", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Ka`E");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.minNoTipText();
      String string0 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Instances instances0 = new Instances("4E`, Sb&", arrayList0, 105);
      jRip0.foldsTipText();
      jRip_RipperRule0.prune(instances0, false);
      jRip_RipperRule0.copy();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList2.sort(comparator0);
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      middleOutConstructor0.setMaxRelativeLeafRadius(210.1395699672);
      MiddleOutConstructor middleOutConstructor1 = new MiddleOutConstructor();
      middleOutConstructor0.printInsts(126, 126);
      MiddleOutConstructor middleOutConstructor2 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor3 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor4 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor5 = new MiddleOutConstructor();
      middleOutConstructor2.printInsts(105, 10000);
      MiddleOutConstructor middleOutConstructor6 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor7 = new MiddleOutConstructor();
      middleOutConstructor4.setInitialAnchorRandom(false);
      MiddleOutConstructor middleOutConstructor8 = new MiddleOutConstructor();
      middleOutConstructor2.printInsts(10000, 105);
      MiddleOutConstructor middleOutConstructor9 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor10 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor11 = new MiddleOutConstructor();
      try { 
        middleOutConstructor9.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2278680974667573
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Instances instances0 = new Instances("", arrayList0, (byte)76);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      jRip_RipperRule0.copy();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka.filters.unsupervised.instance.RemoveWithValues");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CY],_`S-kXLY!YlH");
      instances0.clear();
      jRip_RipperRule0.setConsequent((-783.517978));
      jRip_RipperRule0.grow(instances0);
      StringReader stringReader0 = new StringReader("Attribute type unknown to NaiveBayes");
      ClassOrder classOrder0 = new ClassOrder();
      Filter.makeCopy(classOrder0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      classOrder0.getOptions();
      Random.setNextRandom((-3036));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2240585736572336
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, (byte)0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tPJHRVhMMs!%kBv");
      Instances instances1 = new Instances(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W/8@DtKg;f");
      Attribute attribute0 = new Attribute(".arff");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Object object0 = jRip_NumericAntd0.copy();
      attribute0.equals(object0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      attribute0.addRelation(instances0);
      jRip_NumericAntd1.splitData(instances1, 4, (-2131.49069119));
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.521452740110338
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(935.60240263, intArray0, (-4));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1271.1661, intArray0, 6);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers(binarySparseInstance2);
      jRip_RipperRule0.covers(binarySparseInstance0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      binarySparseInstance0.copy();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.copy();
      jRip_RipperRule0.hasAntds();
      // Undeclared exception!
      try { 
        binarySparseInstance3.relationalValue(80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.trimToSize();
      Attribute attribute0 = new Attribute(")iZ#WrE:P6dw06SZ(9");
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("q", arrayList2, 0);
      jRip_NominalAntd0.splitData(instances0, 0.0, (-4));
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      middleOutConstructor0.setInitialAnchorRandom(true);
      MiddleOutConstructor middleOutConstructor1 = new MiddleOutConstructor();
      middleOutConstructor1.setInitialAnchorRandom(true);
      MiddleOutConstructor middleOutConstructor2 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor3 = new MiddleOutConstructor();
      middleOutConstructor3.printInsts(5, 0);
      MiddleOutConstructor middleOutConstructor4 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor5 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor6 = new MiddleOutConstructor();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      Filter.makeCopy(filter0);
      CoverTree coverTree0 = new CoverTree();
      jRip_NominalAntd0.splitData(instances0, Double.NaN, (-1.0));
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(17);
      Locale.getISOCountries();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(17);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties5);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties4);
      Properties properties3 = new Properties(protectedProperties11);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties11);
      Attribute attribute0 = new Attribute("PS.  We have compared this implementation with the original ripper ", " // ");
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute1 = new Attribute("l^=)4msE", linkedList0, (-2146742395));
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.toString(attribute0);
      Remove remove0 = new Remove();
      Random.setNextRandom(0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      IBk iBk0 = new IBk((-682));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      iBk0.pruneToK((Instances) null, doubleArray0, 17);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, (-1670.4), 4.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale.getISOCountries();
      jRip0.getOptions();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor1 = new MiddleOutConstructor();
      middleOutConstructor1.printInsts(2026, (-4817));
      MiddleOutConstructor middleOutConstructor2 = new MiddleOutConstructor();
      middleOutConstructor2.printInsts((-4817), (-4817));
      MiddleOutConstructor middleOutConstructor3 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor4 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor5 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor6 = new MiddleOutConstructor();
      middleOutConstructor1.printInsts((-19), (-4817));
      MiddleOutConstructor middleOutConstructor7 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor8 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor9 = new MiddleOutConstructor();
      middleOutConstructor9.printInsts(5, 2026);
      MiddleOutConstructor middleOutConstructor10 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor11 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor12 = new MiddleOutConstructor();
      System.setCurrentTimeMillis(2026);
      Random.setNextRandom(2026);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, (-4817), (-3226.456595356992));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1119339714219736
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(6);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.print((-2638L));
      protectedProperties0.list((PrintStream) mockPrintStream0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      properties0.put(jRip0, properties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties4);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd1.getMaxInfoGain();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7689192975524
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = Locale.getISOCountries();
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4104);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Function<Object, RuleStats> function0 = (Function<Object, RuleStats>) mock(Function.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, JRip.RipperRule> biFunction1 = (BiFunction<Object, Object, JRip.RipperRule>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      protectedProperties0.compute("6ax3", biFunction1);
      properties0.replaceAll(biFunction0);
      Attribute attribute0 = new Attribute("6ax3", (String) null, protectedProperties0);
      BiFunction<Object, Object, RuleStats> biFunction2 = (BiFunction<Object, Object, RuleStats>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BiFunction<Object, Object, JRip.RipperRule> biFunction3 = (BiFunction<Object, Object, JRip.RipperRule>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties0.replaceAll(biFunction3);
      jRip_NumericAntd0.value = 2.0;
      jRip_NumericAntd0.covers(binarySparseInstance0);
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      jRip0.setOptions(stringArray0);
      Random.setNextRandom(2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4459311899497576
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(17);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.print((long) 17);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      protectedProperties3.list((PrintStream) mockPrintStream0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      Properties properties1 = new Properties();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[0] = (Object) mockPrintStream0;
      protectedProperties4.stringPropertyNames();
      objectArray0[4] = (Object) properties1;
      mockPrintWriter0.format("U1!aVnR&?)1X", objectArray0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("U1!aVnR&?)1X", protectedProperties8);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      StringReader stringReader0 = new StringReader("K>tDJA.Ox]z!N");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean1 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("LJX.Hr/", linkedList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals("8118", string0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      Attribute attribute0 = new Attribute("The default DL = ");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(462.3289386486208, intArray0, 4);
      binarySparseInstance0.isMissing(0);
      String string0 = jRip_NominalAntd0.toString();
      assertEquals("The default DL =  = ", string0);
      
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCheckErrorRate();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      DecisionTable decisionTable0 = new DecisionTable();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      middleOutConstructor0.printInsts((-3334), 3);
      MiddleOutConstructor middleOutConstructor1 = new MiddleOutConstructor();
      middleOutConstructor1.printInsts(126, 1);
      MiddleOutConstructor middleOutConstructor2 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor3 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor4 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor5 = new MiddleOutConstructor();
      middleOutConstructor2.printInsts(10000, 2026);
      MiddleOutConstructor middleOutConstructor6 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor7 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor8 = new MiddleOutConstructor();
      middleOutConstructor6.printInsts(5, 10000);
      MiddleOutConstructor middleOutConstructor9 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor10 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor11 = new MiddleOutConstructor();
      try { 
        middleOutConstructor10.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(17);
      Locale.getISOCountries();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor1 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor2 = new MiddleOutConstructor();
      middleOutConstructor0.setInitialAnchorRandom(true);
      MiddleOutConstructor middleOutConstructor3 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor4 = new MiddleOutConstructor();
      middleOutConstructor3.setInitialAnchorRandom(true);
      MiddleOutConstructor middleOutConstructor5 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor6 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor7 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor8 = new MiddleOutConstructor();
      middleOutConstructor8.printInsts(4, 17);
      MiddleOutConstructor middleOutConstructor9 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor10 = new MiddleOutConstructor();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // N not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.132999251994992
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("\nrevDL: ", "", protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAttr();
      double double0 = jRip_NumericAntd0.getAccuRate();
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      
      jRip0.getTechnicalInformation();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds(3663);
      Attribute attribute0 = new Attribute("./]Sb#MKI");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      DecisionTable decisionTable0 = new DecisionTable();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getFilter();
      Instances instances0 = decisionTable0.m_dtInstances;
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances1 = decisionTable0.m_dtInstances;
      try { 
        inputMappedClassifier0.getModelHeader((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3469992135645263
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<JRip.RipperRule> arrayList0 = new ArrayList<JRip.RipperRule>();
      linkedList0.removeAll(linkedList2);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList3);
      Attribute attribute0 = new Attribute(" Consequent not set yet.");
      Attribute.typeToString(attribute0);
      jRip0.setOptions(stringArray0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(11, stringArray0.length);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "': infoGain = ";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Environment environment0 = Environment.getSystemWide();
      environment0.removeVariable("B'LC_L]B.[y1");
      environment0.getVariableNames();
      JRip jRip0 = new JRip();
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9487605215810104
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, intArray0, (-606));
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", 3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      Utils.SMALL = (double) 3;
      Attribute attribute1 = new Attribute("i", "");
      JRip.NumericAntd jRip_NumericAntd2 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd2.getRevision();
      jRip_NumericAntd2.covers(binarySparseInstance0);
      Attribute attribute2 = new Attribute("relational", protectedProperties0);
      attribute2.copy("@attribute");
      StringReader stringReader0 = new StringReader("=>?vmZ-x6k]06k");
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("CY],_`S-kXLY!YlH", arrayList0, 124);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Instances instances1 = new Instances(instances0);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      middleOutConstructor0.setInitialAnchorRandom(false);
      MiddleOutConstructor middleOutConstructor1 = new MiddleOutConstructor();
      middleOutConstructor1.setInitialAnchorRandom(false);
      MiddleOutConstructor middleOutConstructor2 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor3 = new MiddleOutConstructor();
      middleOutConstructor3.printInsts(630, 5);
      MiddleOutConstructor middleOutConstructor4 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor5 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor6 = new MiddleOutConstructor();
      System.setCurrentTimeMillis(1691L);
      Random.setNextRandom(5);
      Attribute attribute0 = new Attribute("Mi3I#1:^;`Pp;`", instances0, (-2146838841));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances1, 2.0, (-2146838841));
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals("8118", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      ArrayList<JRip.RipperRule> arrayList0 = new ArrayList<JRip.RipperRule>();
      linkedList1.removeAll(linkedList3);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList4);
      jRip0.seedTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.copy();
      jRip_RipperRule1.getConsequent();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("G&c{GKeKA6Q_C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // G&c{GKeKA6Q_C not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass(1552.858, (Instances) null, 3004.34556926154, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 351;
      intArray0[1] = 1641;
      intArray0[2] = 1507;
      intArray0[3] = (-399);
      intArray0[4] = 351;
      intArray0[5] = 3;
      intArray0[6] = 1507;
      intArray0[7] = 1641;
      intArray0[8] = 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(351, intArray0, 3806);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("\nrevDL: ", "", protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      jRip_NumericAntd0.getAttr();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(17);
      byteArrayOutputStream0.reset();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.print((long) 17);
      mockPrintStream0.println();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintStream0.print((-37.0));
      mockPrintStream0.println();
      mockPrintStream0.checkError();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) byteArrayOutputStream0;
      objectArray1[1] = (Object) byteArrayOutputStream0;
      objectArray1[2] = (Object) mockPrintStream0;
      mockPrintWriter0.printf("Ka`E", objectArray1);
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      mockPrintWriter0.println(true);
      Object object0 = new Object();
      objectArray0[2] = (Object) mockPrintStream0;
      mockPrintWriter0.format("Ka`E", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Ka`E");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string0 = jRip0.debugTipText();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals("Whether debug information is output to the console.", string0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<JRip.RipperRule> arrayList1 = new ArrayList<JRip.RipperRule>();
      linkedList2.removeAll(arrayList1);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList3);
      Attribute attribute0 = new Attribute("");
      String string0 = Attribute.typeToString(attribute0);
      assertEquals("numeric", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(17);
      byteArrayOutputStream0.reset();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.print((long) 17);
      mockPrintStream0.println();
      byteArrayOutputStream0.flush();
      byteArrayOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintStream0.print((-37.0));
      mockPrintStream0.println();
      mockPrintStream0.print("");
      mockPrintStream0.checkError();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) byteArrayOutputStream0;
      objectArray1[1] = (Object) byteArrayOutputStream0;
      objectArray1[2] = (Object) mockPrintStream0;
      mockPrintWriter0.printf("Ka`E", objectArray1);
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      mockPrintWriter0.println(true);
      objectArray0[2] = (Object) mockPrintStream0;
      mockPrintWriter0.format("Ka`E", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Ka`E");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.enumerateMeasures();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(17);
      byteArrayOutputStream0.reset();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.print((long) 17);
      mockPrintStream0.println();
      byteArrayOutputStream0.flush();
      byteArrayOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintStream0.print((double) 17);
      mockPrintStream0.print((-37.0));
      mockPrintStream0.println();
      mockPrintStream0.print("");
      mockPrintWriter0.print((-2602L));
      mockPrintStream0.checkError();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[5];
      mockPrintWriter0.print("");
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) byteArrayOutputStream0;
      objectArray1[1] = (Object) byteArrayOutputStream0;
      objectArray1[2] = (Object) mockPrintStream0;
      mockPrintWriter0.printf("Ka`E", objectArray1);
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      mockPrintWriter0.println(true);
      objectArray0[2] = (Object) mockPrintStream0;
      mockPrintWriter0.format("Ka`E", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Ka`E");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale.getISOCountries();
      DecisionTable decisionTable0 = new DecisionTable();
      AbstractClassifier.makeCopy(decisionTable0);
      DecisionTable decisionTable1 = (DecisionTable)AbstractClassifier.makeCopy(decisionTable0);
      Instances instances0 = decisionTable1.m_theInstances;
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(17);
      Locale.getISOCountries();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(17);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor1 = new MiddleOutConstructor();
      middleOutConstructor1.setInitialAnchorRandom(true);
      MiddleOutConstructor middleOutConstructor2 = new MiddleOutConstructor();
      middleOutConstructor0.setInitialAnchorRandom(true);
      MiddleOutConstructor middleOutConstructor3 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor4 = new MiddleOutConstructor();
      middleOutConstructor3.setInitialAnchorRandom(true);
      MiddleOutConstructor middleOutConstructor5 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor6 = new MiddleOutConstructor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MiddleOutConstructor middleOutConstructor7 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor8 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor9 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor10 = new MiddleOutConstructor();
      middleOutConstructor7.printInsts((-1323), 80);
      MiddleOutConstructor middleOutConstructor11 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor12 = new MiddleOutConstructor();
      JRip jRip0 = new JRip();
      String string0 = jRip0.usePruningTipText();
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("Whether pruning is performed.", string0);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Attribute attribute0 = new Attribute("amvb}X.R|>N{V", arrayList0);
      Attribute.typeToString(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.getSplitPoint();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "integer");
      intArray0[4] = 0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      intArray0[5] = 0;
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable1.m_dtInstances;
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter1);
      Filter filter1 = Filter.makeCopy(filter0);
      AllFilter allFilter2 = new AllFilter();
      Filter filter2 = Filter.makeCopy(filter1);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      Filter.makeCopy(filter2);
      try { 
        Filter.useFilter((Instances) null, multiFilter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      Properties properties1 = new Properties();
      String string0 = "<OUTCOME>";
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(938);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.527062838287056
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("CY],_`S-kXLY!YlH", arrayList0, 124);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Instances instances1 = new Instances(instances0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".arff";
      stringArray0[2] = ".arff";
      JRip.main(stringArray0);
      jRip_RipperRule0.copy();
      jRip_RipperRule0.copy();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CY],_`S-kXLY!YlH");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      jRip_RipperRule0.setConsequent(4.9E-324);
      jRip_RipperRule0.grow(instances1);
      StringReader stringReader0 = new StringReader("@data");
      System.setCurrentTimeMillis(124);
      Random.setNextRandom(124);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed(0L);
      jRip0.setMinNo((-5741.93));
      jRip0.getSeed();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(0L);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, (byte)8);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tPJHRVhMMs!%kBv");
      Instances instances1 = new Instances(instances0);
      arrayList0.remove((Object) "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h%");
      Attribute attribute0 = new Attribute("", instances0, (int) (byte)8);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances1, 4, (-2131.49069119));
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip0.globalInfo();
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      principalComponents0.setVarianceCovered((-709.1208344271133));
      PrincipalComponents principalComponents2 = new PrincipalComponents();
      PrincipalComponents principalComponents3 = new PrincipalComponents();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-5.151093813771503), (int[]) null, (-3179));
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale.getISOCountries();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      jRip0.getUsePruning();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      DecisionTable decisionTable5 = new DecisionTable();
      Instances instances1 = decisionTable0.m_dtInstances;
      Remove remove0 = decisionTable3.m_delTransform;
      decisionTable3.m_delTransform = null;
      DecisionTable decisionTable6 = new DecisionTable();
      decisionTable3.getSearch();
      DecisionTable decisionTable7 = new DecisionTable();
      Random.setNextRandom(5);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(17);
      byteArrayOutputStream0.reset();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.print((long) 17);
      mockPrintStream0.println();
      byteArrayOutputStream0.flush();
      byteArrayOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintStream0.print((-37.0));
      mockPrintStream0.println();
      mockPrintStream0.print("");
      mockPrintStream0.checkError();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) byteArrayOutputStream0;
      objectArray1[1] = (Object) byteArrayOutputStream0;
      objectArray1[2] = (Object) mockPrintStream0;
      mockPrintWriter0.printf("Ka`E", objectArray1);
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      mockPrintWriter0.println(true);
      objectArray0[2] = (Object) mockPrintStream0;
      mockPrintWriter0.format("Ka`E", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Ka`E");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      jRip0.getTechnicalInformation();
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(935.60240263, intArray0, (-4));
      int int0 = 6;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1271.1661, intArray0, 6);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(4859.974);
      jRip_RipperRule0.covers(binarySparseInstance0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instance instance0 = null;
      try {
        instance0 = new SparseInstance((-4));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getCheckErrorRate());
      
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      MiddleOutConstructor middleOutConstructor1 = new MiddleOutConstructor();
      StringReader stringReader0 = new StringReader("\nUsage:\n\tweka.core.Instances help\n\t\tPrints this help\n\tweka.core.Instances <filename>\n\t\tOutputs dataset statistics\n\tweka.core.Instances merge <filename1> <filename2>\n\t\tMerges the datasets (must have same number of rows).\n\t\tGenerated dataset gets output on stdout.\n\tweka.core.Instances append <filename1> <filename2>\n\t\tAppends the second dataset to the first (must have same number of attributes).\n\t\tGenerated dataset gets output on stdout.\n\tweka.core.Instances headers <filename1> <filename2>\n\t\tCompares the structure of the two datasets and outputs whether they\n\t\tdiffer or not.\n\tweka.core.Instances randomize <seed> <filename>\n\t\tRandomizes the dataset and outputs it on stdout.\n");
      System.setCurrentTimeMillis(0L);
      Random.setNextRandom(946);
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      jRip0.toString();
      jRip0.setCheckErrorRate(true);
      jRip0.setMinNo((-489.5564));
      jRip0.setCheckErrorRate(false);
      jRip0.getOptimizations();
      jRip0.getOptimizations();
      Attribute attribute0 = new Attribute("JRIP: No model built yet.");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getCover();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 2;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      CoverTree coverTree0 = new CoverTree();
      CostMatrix costMatrix0 = new CostMatrix(1);
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(0L);
      try { 
        costMatrix0.applyCostMatrix((Instances) null, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getFilter();
      JRip jRip0 = new JRip();
      jRip0.getDebug();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      decisionTable0.setDisplayRules(true);
      DecisionTable decisionTable5 = new DecisionTable();
      Instances instances1 = decisionTable3.m_dtInstances;
      DecisionTable decisionTable6 = new DecisionTable();
      ASSearch aSSearch0 = decisionTable1.getSearch();
      DecisionTable decisionTable7 = new DecisionTable();
      decisionTable4.setSearch(aSSearch0);
      StringReader stringReader0 = new StringReader("Yd+Imoz<b");
      System.setCurrentTimeMillis(0L);
      Random.setNextRandom(4);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getFolds();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      try { 
        CostMatrix.parseMatlab("every");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(17);
      byteArrayOutputStream0.reset();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.print((long) 17);
      mockPrintStream0.println();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintStream0.print((-37.0));
      mockPrintStream0.println();
      mockPrintStream0.checkError();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) byteArrayOutputStream0;
      objectArray1[1] = (Object) byteArrayOutputStream0;
      objectArray1[2] = (Object) mockPrintStream0;
      mockPrintWriter0.printf("Ka`E", objectArray1);
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      mockPrintWriter0.println(true);
      Object object0 = new Object();
      objectArray0[2] = (Object) mockPrintStream0;
      mockPrintWriter0.format("Ka`E", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Ka`E");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      String string0 = jRip0.getRevision();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals("8118", string0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(17);
      Locale.getISOCountries();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(17);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      properties0.put("8*eoKoDokh:|o", jRip_RipperRule0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      DecisionTable decisionTable5 = new DecisionTable();
      Instances instances0 = decisionTable2.m_dtInstances;
      DecisionTable decisionTable6 = new DecisionTable();
      decisionTable1.getSearch();
      DecisionTable decisionTable7 = new DecisionTable();
      Random.setNextRandom(1);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.1128269022900783
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Instances instances0 = new Instances("CY],_`S-kXLY!YlH", arrayList0, (byte)78);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      jRip_RipperRule0.copy();
      jRip_RipperRule0.copy();
      byte[] byteArray1 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CY],_`S-kXLY!YlH");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      instances0.clear();
      jRip_RipperRule0.setConsequent((byte)78);
      jRip_RipperRule0.grow(instances0);
      StringReader stringReader0 = new StringReader("@data");
      ClassOrder classOrder0 = new ClassOrder();
      Filter.makeCopy(classOrder0);
      jRip0.setOptions((String[]) null);
      Random.setNextRandom(2);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(17);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties1);
      Properties properties3 = new Properties(properties0);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties4);
      Attribute attribute0 = new Attribute("kP:h", " // ");
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(2);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertTrue(boolean0);
      
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("kP:h <= NaN", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      String string1 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string1);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo((-2299.09422038));
      jRip0.checkErrorRateTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setSeed((-561L));
      jRip_RipperRule0.getRevision();
      jRip0.getSeed();
      jRip0.checkErrorRateTipText();
      jRip0.checkErrorRateTipText();
      Instances instances0 = null;
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("Whether check for error rate >= 1/2 is included in stopping criterion.", (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      DecisionTable decisionTable0 = new DecisionTable();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      middleOutConstructor0.printInsts(5, (-1218));
      MiddleOutConstructor middleOutConstructor1 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor2 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor3 = new MiddleOutConstructor();
      jRip_RipperRule0.getRevision();
      MiddleOutConstructor middleOutConstructor4 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor5 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor6 = new MiddleOutConstructor();
      try { 
        middleOutConstructor4.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      jRip0.getSeed();
      ClassOrder classOrder0 = new ClassOrder();
      classOrder0.setSeed(42L);
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip0.setSeed(888L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip_RipperRule0.setConsequent(0.0);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-767));
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      middleOutConstructor0.printInsts(11, 15);
      try { 
        middleOutConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Attribute attribute0 = new Attribute((String) null, list0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      Attribute attribute0 = new Attribute("xx");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier3 = new InputMappedClassifier();
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter0);
      AllFilter allFilter1 = new AllFilter();
      Filter.makeCopy(filter0);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      Filter.makeCopy(filter0);
      Filter.makeCopy(filter0);
      System.setCurrentTimeMillis(0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(935.60240263, intArray0, (-4));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1271.1661, intArray0, (-6));
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance2.mergeInstance(binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers(binarySparseInstance2);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      binarySparseInstance0.copy();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      Utils.SMALL = (double) 80;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.copy();
      jRip_RipperRule0.hasAntds();
      // Undeclared exception!
      try { 
        binarySparseInstance3.relationalValue((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(935.60240263, intArray0, (-4));
      int int0 = 6;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1271.1661, intArray0, 6);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(6);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(4859.974);
      jRip_RipperRule0.covers(binarySparseInstance0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      SparseInstance sparseInstance1 = null;
      try {
        sparseInstance1 = new SparseInstance((-4));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }
}
