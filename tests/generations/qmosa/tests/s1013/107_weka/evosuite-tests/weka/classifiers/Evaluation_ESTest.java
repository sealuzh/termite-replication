/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 01:01:11 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Random;
import java.util.Stack;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.REPTree;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.OptionHandlerJavadoc;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.JSONLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.estimators.KernelEstimator;
import weka.estimators.UnivariateKernelEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6952297464988506
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      textDirectoryLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      textDirectoryLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0E-8;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.globalInfo();
      wrapperSubsetEval0.getOptions();
      // Undeclared exception!
      try { 
        evaluation0.falsePositiveRate(7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5294971533842068
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      textDirectoryLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.setPriors(instances0);
      textDirectoryLoader0.getNextInstance(instances0);
      evaluation0.setDiscardPredictions(false);
      evaluation0.rootRelativeSquaredError();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      evaluation0.addNumericTrainClass((-1102.403638), Double.NaN);
      Evaluation evaluation1 = new Evaluation(instances1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 200.26021238006066;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 200.26021238006066;
      doubleArray0[3] = (-1102.403638);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.026826921523848
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      evaluation0.SFMeanSchemeEntropy();
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      textDirectoryLoader0.getRevision();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.areaUnderPRC(17);
      Bagging bagging0 = new Bagging();
      Vote vote0 = new Vote();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.m_MissingClass;
      evaluation0.kappa();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.areaUnderPRC((-1125));
      Bagging bagging1 = new Bagging();
      evaluation0.weightedAreaUnderROC();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falseNegativeRate(100);
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5445159434901585
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      evaluation0.addNumericTrainClass(1.0, (-1763.6199372173094));
      evaluation0.setDiscardPredictions(true);
      evaluation0.rootRelativeSquaredError();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      evaluation0.addNumericTrainClass(7.936507936507937E-4, 200.26021238006066);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 200.26021238006066;
      doubleArray0[1] = (-224.0);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1722511863633867
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "makeCopies");
      evaluation0.setDiscardPredictions(true);
      evaluation0.incorrect();
      evaluation0.numTruePositives((-1));
      evaluation0.numFalsePositives((-1));
      evaluation0.weightedAreaUnderPRC();
      evaluation0.numFalseNegatives((-219252797));
      evaluation0.weightedAreaUnderPRC();
      instances0.enumerateAttributes();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(2011.604398969, doubleArray0);
      AbstractInstance.s_numericAfterDecimalPoint = (-914);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance0);
      UnaryOperator.identity();
      evaluation0.rootRelativeSquaredError();
      evaluation0.rootRelativeSquaredError();
      evaluation0.SFSchemeEntropy();
      evaluation0.priorEntropy();
      testInstances0.clone();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.SFPriorEntropy();
      evaluation0.priorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      textDirectoryLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      textDirectoryLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0E-8;
      byte byte0 = (byte) (-1);
      evaluation0.numTruePositives(858);
      // Undeclared exception!
      try { 
        evaluation0.confusionMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      textDirectoryLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1889.071;
      doubleArray0[1] = Double.NaN;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9896217341979847
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      textDirectoryLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      textDirectoryLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0E-8;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.globalInfo();
      wrapperSubsetEval0.getOptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0E-8, doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7914765784434397
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      textDirectoryLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      textDirectoryLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0E-8;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      textDirectoryLoader0.getStructure();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.correlationCoefficient();
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.326764478528172
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "makeCopies");
      evaluation0.setDiscardPredictions(true);
      evaluation0.incorrect();
      evaluation0.numTruePositives((-1));
      evaluation0.numFalsePositives((-1));
      evaluation0.weightedAreaUnderPRC();
      evaluation0.numFalseNegatives((-219252797));
      evaluation0.weightedAreaUnderPRC();
      evaluation0.errorRate();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.kappa();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.areaUnderPRC((-1125));
      Bagging bagging0 = new Bagging();
      evaluation0.weightedAreaUnderROC();
      evaluation0.falseNegativeRate((-4225));
      evaluation0.toCumulativeMarginDistributionString();
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2760124321839665
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "makeCopies");
      evaluation0.setDiscardPredictions(true);
      evaluation0.incorrect();
      evaluation0.numTruePositives((-1));
      evaluation0.numFalsePositives((-1));
      evaluation0.weightedAreaUnderPRC();
      evaluation0.numFalseNegatives((-219252797));
      evaluation0.weightedAreaUnderPRC();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) simpleLinearRegression0);
      instances0.removeIf(predicate0);
      instances0.enumerateAttributes();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(2011.604398969, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(124);
      instances0.add((Instance) sparseInstance0);
      UnaryOperator.identity();
      evaluation0.rootRelativeSquaredError();
      evaluation0.rootRelativeSquaredError();
      evaluation0.SFSchemeEntropy();
      evaluation0.priorEntropy();
      testInstances0.clone();
      evaluation0.KBMeanInformation();
      evaluation0.SFMeanEntropyGain();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.SFEntropyGain();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) simpleLinearRegression0, (Instance) sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1474346503786346
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      JSONLoader jSONLoader0 = new JSONLoader();
      Enumeration enumeration0 = new WordTokenizer();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-1);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2647041057820085
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      DenseInstance denseInstance0 = new DenseInstance(18);
      instances0.add((Instance) denseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "makeCopies");
      evaluation0.setDiscardPredictions(true);
      evaluation0.incorrect();
      evaluation0.numTruePositives((-1));
      evaluation0.numFalsePositives((-1));
      evaluation0.weightedAreaUnderPRC();
      evaluation0.numFalseNegatives((-219252797));
      evaluation0.weightedAreaUnderPRC();
      evaluation0.errorRate();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.kappa();
      evaluation0.weightedTrueNegativeRate();
      Bagging bagging0 = new Bagging();
      evaluation0.weightedAreaUnderROC();
      evaluation0.falseNegativeRate((-4225));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5116900029887046
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      evaluation0.addNumericTrainClass(1.0, 645.73755965764);
      evaluation0.rootRelativeSquaredError();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      evaluation0.addNumericTrainClass(Double.NaN, 1.0);
      evaluation0.getDiscardPredictions();
      evaluation0.rootMeanSquaredError();
      evaluation0.getHeader();
      evaluation0.pctIncorrect();
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.622827904722017
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      JSONLoader jSONLoader0 = new JSONLoader();
      instances0.enumerateAttributes();
      evaluation0.getClassPriors();
      instances1.parallelStream();
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      Properties properties0 = new Properties();
      properties0.replace((Object) univariateKernelEstimator0, (Object) univariateKernelEstimator0, (Object) univariateKernelEstimator0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-2338), false, false);
      String[] stringArray0 = simpleLogistic0.getOptions();
      SimpleLogistic.main(stringArray0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      WrapperSubsetEval wrapperSubsetEval1 = new WrapperSubsetEval();
      WrapperSubsetEval wrapperSubsetEval2 = new WrapperSubsetEval();
      DenseInstance denseInstance0 = new DenseInstance(1);
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has beenspecified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0615632381579823
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      int int0 = 0;
      double double0 = 1.0E-8;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0E-8;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-571.0);
      doubleArray0[3] = 1.0E-8;
      M5Rules m5Rules0 = new M5Rules();
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel((Classifier) m5Rules0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.M5Rules:
         // 
         // -N
         // \tUse unpruned tree/rules
         // -U
         // \tUse unsmoothed predictions
         // -R
         // \tBuild regression tree/rule rather than a model tree/rule
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf
         // \t(default 4)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6771036052120776
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      JSONLoader jSONLoader0 = new JSONLoader();
      evaluation0.weightedPrecision();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-2);
      evaluation0.m_SumSqrClass = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-914));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7298559431500813
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = false;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1867.194131158);
      doubleArray0[1] = 548.5990000499226;
      doubleArray0[2] = 548.5990000499226;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 548.5990000499226;
      doubleArray0[5] = 548.5990000499226;
      doubleArray0[6] = 548.5990000499226;
      doubleArray0[7] = 548.5990000499226;
      SparseInstance sparseInstance0 = new SparseInstance(548.5990000499226, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-914));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9484994158509448
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      evaluation0.weightedPrecision();
      double[] doubleArray0 = new double[4];
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)27;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      testInstances0.setNumClasses(1759);
      evaluation0.useNoPriors();
      JSONLoader jSONLoader0 = new JSONLoader();
      instances1.enumerateAttributes();
      instances1.toArray();
      SparseInstance sparseInstance0 = new SparseInstance(900.927965125676, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)111);
      instances1.add((Instance) sparseInstance0);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      evaluation1.rootRelativeSquaredError();
      evaluation1.rootRelativeSquaredError();
      evaluation1.SFSchemeEntropy();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.SFPriorEntropy();
      evaluation1.priorEntropy();
      evaluation1.KBMeanInformation();
      evaluation1.SFMeanEntropyGain();
      evaluation0.getClassPriors();
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.618959953106913
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)108;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.useNoPriors();
      JSONLoader jSONLoader0 = new JSONLoader();
      instances0.enumerateAttributes();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)108;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-914));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9379053472006187
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval(2307);
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) (-1);
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 1;
      doubleArray0[2] = doubleArray3;
      gaussianProcesses0.m_L = doubleArray0;
      MockRandom mockRandom0 = new MockRandom((-900L));
      evaluation0.sizeOfPredictedRegions();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.numTrueNegatives(1);
      PipedReader pipedReader0 = new PipedReader(33);
      long long0 = new Integer(2);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.826248670915256
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      double[] doubleArray0 = new double[0];
      evaluation0.addNumericTrainClass(645.73755965764, 0.2);
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      evaluation0.setDiscardPredictions(false);
      evaluation0.SFMeanSchemeEntropy();
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      evaluation0.rootRelativeSquaredError();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      evaluation0.addNumericTrainClass((-139.99200046084), Double.NaN);
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = '|';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-914), charArray0, (-914));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.5135807481953294
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.SFMeanSchemeEntropy();
      evaluation0.errorRate();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.listOptions();
      textDirectoryLoader1.getRevision();
      Properties properties0 = new Properties();
      properties0.keySet();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      textDirectoryLoader3.reset();
      textDirectoryLoader1.getDirectory();
      textDirectoryLoader2.getRevision();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n                 TP Rate  FP Rate");
      evaluation0.toClassDetailsString();
      evaluation0.rootRelativeSquaredError();
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
      
      Double double2 = new Double(2);
      evaluation0.SFPriorEntropy();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double3 = evaluation0.KBInformation();
      assertEquals(0.0, double3, 0.01);
      
      evaluation0.weightedTruePositiveRate();
      double double4 = evaluation0.meanAbsoluteError();
      assertEquals(double4, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      textDirectoryLoader0.getRevision();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      textDirectoryLoader0.getDirectory();
      textDirectoryLoader0.getRevision();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8034");
      try { 
        Evaluation.handleCostOption("8034", (-3348));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Line 0: expected number of rows
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.8170658775905055
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      JSONLoader jSONLoader0 = new JSONLoader();
      evaluation0.weightedPrecision();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-914));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9662607578599127
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      double[] doubleArray0 = new double[0];
      evaluation0.addNumericTrainClass(645.73755965764, 0.2);
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_NumClasses = (-1983656986);
      evaluation0.setDiscardPredictions(false);
      evaluation0.SFMeanSchemeEntropy();
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      evaluation0.rootRelativeSquaredError();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      evaluation0.addNumericTrainClass((-139.99200046084), 0.0);
      sparseInstance0.setValue(278, (-139.99200046084));
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      
      double double1 = evaluation0.precision((-914));
      double double2 = evaluation0.numFalseNegatives((-914));
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double4 = evaluation1.weightedAreaUnderPRC();
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      double[] doubleArray0 = evaluation0.m_MarginCounts;
      double double0 = evaluation0.m_TotalCoverage;
      DenseInstance denseInstance0 = new DenseInstance(2059.7247372, doubleArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      AbstractClassifier.makeCopy(regressionByDiscretization0);
      regressionByDiscretization0.getCapabilities();
      double double1 = 3890.12;
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, denseInstance0, 3890.12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.181623928013576
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(false);
      textDirectoryLoader0.getNextInstance(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      evaluation0.sizeOfPredictedRegions();
      textDirectoryLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom(0L);
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom1 = new MockRandom();
      textDirectoryLoader0.getDataSet();
      evaluation0.toClassDetailsString();
      // Undeclared exception!
      try { 
        evaluation1.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6632973009906986
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.setDiscardPredictions(false);
      textDirectoryLoader0.getNextInstance(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.toArray();
      evaluation1.setPriors(instances0);
      evaluation0.sizeOfPredictedRegions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(0L);
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom1 = new MockRandom(1390L);
      instances0.resample(mockRandom0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.truePositiveRate(1);
      MockRandom mockRandom2 = new MockRandom();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation.makeOptionString(costSensitiveClassifier0, false);
      // Undeclared exception!
      try { 
        evaluation1.matthewsCorrelationCoefficient(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1772874989622344
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      evaluation0.setDiscardPredictions(false);
      evaluation0.SFMeanSchemeEntropy();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      evaluation0.errorRate();
      FileSystemHandling.createFolder(evoSuiteFile0);
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      evaluation0.rootRelativeSquaredError();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.addNumericTrainClass((-139.99200046084), Double.NaN);
      sparseInstance0.setWeight((-3407.24619));
      sparseInstance0.setValue((-914), (-139.99200046084));
      evaluation0.precision((-914));
      evaluation0.numFalseNegatives((-914));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.fMeasure(17);
      evaluation0.pctIncorrect();
      J48 j48_0 = new J48();
      String string0 = Evaluation.makeOptionString(j48_0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.509355403085682
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      evaluation0.SFMeanSchemeEntropy();
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      textDirectoryLoader0.getRevision();
      evaluation0.m_Incorrect = Double.NaN;
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(1);
      costSensitiveClassifier0.setCostMatrix(costMatrix0);
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2845);
      boolean boolean0 = evaluation0.m_NoPriors;
      double double0 = evaluation0.m_MinTarget;
      evaluation0.precision(1);
      DenseInstance denseInstance0 = new DenseInstance((-4176), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((-139.99200046084), (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -139
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.656185661560307
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(0L);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.errorRate();
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      textDirectoryLoader0.getRevision();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-0.9189385332046727);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = Double.NaN;
      evaluation0.updateMargins(doubleArray0, 0, 2);
      int int0 = 2144163161;
      evaluation0.areaUnderROC(2);
      evaluation0.numTruePositives((-2058));
      evaluation0.confusionMatrix();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      char[] charArray0 = new char[0];
      int int1 = (-1132887188);
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID((-2058), charArray0, (-1132887188));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1816239280135754
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(false);
      DenseInstance denseInstance0 = new DenseInstance(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      evaluation0.sizeOfPredictedRegions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      textDirectoryLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom(0L);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.toClassDetailsString();
      // Undeclared exception!
      try { 
        evaluation1.truePositiveRate(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, (String) null);
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.0549626987123517
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      Object[] objectArray0 = new Object[1];
      double[] doubleArray0 = evaluation0.m_TrainClassVals;
      evaluation0.useNoPriors();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      char[] charArray0 = new char[0];
      evaluation0.toSummaryString("momentumTipText", true);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LibSVMLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2230944704111635
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(false);
      textDirectoryLoader0.getNextInstance(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.toArray();
      evaluation1.setPriors(instances0);
      evaluation0.sizeOfPredictedRegions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(0L);
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom1 = new MockRandom(1390L);
      instances0.resample(mockRandom0);
      evaluation0.toClassDetailsString();
      evaluation0.truePositiveRate(1);
      MockRandom mockRandom2 = new MockRandom();
      String[] stringArray0 = null;
      String string0 = "CDATA";
      // Undeclared exception!
      try { 
        evaluation1.trueNegativeRate((-2082));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.716320498336093
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      KernelEstimator kernelEstimator0 = new KernelEstimator(2116.7202190834);
      Capabilities capabilities0 = new Capabilities(kernelEstimator0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(kernelEstimator0);
      Instances instances0 = testInstances0.generate("vI:BjW*joplWe8?%];F");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<ListOptions> priorityQueue0 = new PriorityQueue<ListOptions>(comparator0);
      ListOptions listOptions0 = new ListOptions();
      priorityQueue0.add(listOptions0);
      LinkedList<ListOptions> linkedList0 = new LinkedList<ListOptions>(priorityQueue0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@data");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC((-1));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.equals((Object) null);
      evaluation1.pctIncorrect();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.weightedFalseNegativeRate();
      capabilities0.disableAll();
      M5Rules m5Rules0 = new M5Rules();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.weightedTruePositiveRate();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2116.7202190834;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (double) (-2);
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, 0.8);
      assertEquals(Double.POSITIVE_INFINITY, evaluation1.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.6511462673547306
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      KernelEstimator kernelEstimator0 = new KernelEstimator(0.975);
      Capabilities capabilities0 = new Capabilities(kernelEstimator0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(kernelEstimator0);
      Instances instances0 = testInstances0.generate("vI:BjW*joplWe8?%];F");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<ListOptions> priorityQueue0 = new PriorityQueue<ListOptions>(comparator0);
      LinkedList<ListOptions> linkedList0 = new LinkedList<ListOptions>(priorityQueue0);
      instances0.retainAll(linkedList0);
      evaluation0.toMatrixString();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@data");
      evaluation0.toClassDetailsString();
      evaluation0.rootRelativeSquaredError();
      evaluation0.SFSchemeEntropy();
      Double double0 = new Double(0.0);
      evaluation0.SFPriorEntropy();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.toClassDetailsString();
      evaluation0.weightedFMeasure();
      evaluation0.toClassDetailsString(" splitVal: ");
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-505));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -505
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.6168642768227426
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      BayesNet bayesNet0 = new BayesNet();
      Capabilities capabilities0 = bayesNet0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      JSONLoader jSONLoader0 = new JSONLoader();
      evaluation0.weightedPrecision();
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = Double.NaN;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-914));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.2966626668579395
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      textDirectoryLoader0.getNextInstance(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      evaluation0.sizeOfPredictedRegions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(0L);
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom1 = new MockRandom(1390L);
      instances0.resample(mockRandom0);
      evaluation0.toClassDetailsString();
      evaluation0.truePositiveRate(1);
      MockRandom mockRandom2 = new MockRandom();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation2 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.fMeasure(1150);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.4241320255979484
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.KBMeanInformation();
      evaluation0.incorrect();
      evaluation0.SFMeanSchemeEntropy();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".arff";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[1] = ".arff";
      stringArray0[2] = "@relation";
      evaluation0.m_Incorrect = (-2118.8024053);
      evaluation0.SFMeanSchemeEntropy();
      TextDirectoryLoader.main(stringArray0);
      evaluation0.errorRate();
      textDirectoryLoader0.getRevision();
      Evaluation.main(stringArray0);
      evaluation0.kappa();
      evaluation0.areaUnderPRC(1840);
      Bagging bagging0 = new Bagging();
      Vote vote0 = new Vote();
      Evaluation.main(stringArray0);
      Evaluation.getGlobalInfo(bagging0);
      evaluation0.weightedAreaUnderPRC();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numTrueNegatives(4);
      evaluation0.areaUnderROC(6);
      evaluation1.SFSchemeEntropy();
      evaluation0.KBRelativeInformation();
      evaluation0.numFalseNegatives(81);
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.errorRate(), 0.01);
      
      double double0 = evaluation1.numInstances();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      textDirectoryLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        evaluation0.weightedPrecision();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8564909139241832
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)108;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.useNoPriors();
      JSONLoader jSONLoader0 = new JSONLoader();
      instances0.enumerateAttributes();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)108;
      doubleArray0[1] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(1549);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1549
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.9353352836868116
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      double double0 = evaluation0.weightedPrecision();
      double double1 = evaluation0.m_SumSqrErr;
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("@data");
      instances0.deleteWithMissing(attribute0);
      evaluation0.totalCost();
      evaluation0.toMatrixString();
      univariateKernelEstimator0.logDensity(4);
      evaluation0.areaUnderROC(2144163161);
      evaluation0.numTruePositives(1);
      evaluation0.confusionMatrix();
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = 'J';
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = (int) 'J';
      intArray0[3] = 2;
      Instance instance0 = BallNode.calcCentroidPivot(851, (-3855), intArray0, instances0);
      instances0.add(instance0);
      double double2 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.numFalsePositives(2);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double4, double0, 0.01);
      
      double double5 = evaluation0.truePositiveRate(0);
      assertNotEquals(double5, double0, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IBk iBk0 = new IBk();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".cost");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      Evaluation.handleCostOption("", 1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Evaluation.handleCostOption(".cost", 1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList1, 106);
      CostMatrix costMatrix0 = new CostMatrix(2915);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-1);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.29725122987882
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = '*';
      charArray0[2] = '%';
      charArray0[3] = '@';
      charArray0[4] = 'o';
      charArray0[5] = 'u';
      charArray0[6] = 'g';
      evaluation0.num2ShortID(0, charArray0, 0);
      evaluation0.setDiscardPredictions(true);
      textDirectoryLoader0.getNextInstance(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      evaluation0.sizeOfPredictedRegions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(0L);
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom1 = new MockRandom(1390L);
      Instances instances1 = instances0.resample(mockRandom0);
      evaluation0.toClassDetailsString();
      evaluation0.truePositiveRate(1);
      MockRandom mockRandom2 = new MockRandom();
      try { 
        evaluation0.crossValidateModel("CDATA", instances1, 1, (String[]) null, (Random) mockRandom2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: CDATA
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      textDirectoryLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      textDirectoryLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0E-8;
      Utils.SMALL = 2483.167251316;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      textDirectoryLoader0.getStructure();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      evaluation0.areaUnderPRC((byte) (-1));
      // Undeclared exception!
      try { 
        evaluation0.weightedFalsePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.6061881354005965
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      JSONLoader jSONLoader0 = new JSONLoader();
      evaluation0.weightedFalsePositiveRate();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.m_SumKBInfo;
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.useNoPriors();
      double double1 = evaluation0.m_SumSqrPredicted;
      evaluation0.areaUnderPRC((-2));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-616.976421969183), doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.9473771417815726
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      JSONLoader jSONLoader0 = new JSONLoader();
      double[] doubleArray0 = new double[4];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)27;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances1 = testInstances0.generate();
      instances1.containsAll(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      JSONLoader jSONLoader1 = new JSONLoader();
      instances1.enumerateAttributes();
      SparseInstance sparseInstance0 = new SparseInstance(900.927965125676, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)111);
      instances1.add((Instance) sparseInstance0);
      UnaryOperator.identity();
      evaluation0.rootRelativeSquaredError();
      evaluation0.rootRelativeSquaredError();
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double1, 0.01);
      
      double double2 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.SFMeanEntropyGain();
      double double4 = evaluation0.weightedFMeasure();
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.720162034690764
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      BayesNet bayesNet0 = new BayesNet();
      Capabilities capabilities0 = bayesNet0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      JSONLoader jSONLoader0 = new JSONLoader();
      evaluation0.weightedPrecision();
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = Double.NaN;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-914));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.5167418409558273
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      JSONLoader jSONLoader0 = new JSONLoader();
      double[] doubleArray0 = new double[4];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)27;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances1.enumerateAttributes();
      SparseInstance sparseInstance0 = new SparseInstance(900.927965125676, doubleArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".json");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)111);
      instances1.add((Instance) sparseInstance0);
      UnaryOperator.identity();
      evaluation0.rootRelativeSquaredError();
      evaluation0.rootRelativeSquaredError();
      evaluation0.SFSchemeEntropy();
      evaluation0.priorEntropy();
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.SFMeanEntropyGain();
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.2348807375083437
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      evaluation0.incorrect();
      evaluation0.SFMeanSchemeEntropy();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".arff";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".arff";
      stringArray0[3] = "@relation";
      stringArray0[4] = "@data";
      stringArray0[5] = ".bsi";
      stringArray0[6] = "";
      stringArray0[7] = "@data";
      TextDirectoryLoader.main(stringArray0);
      evaluation0.errorRate();
      textDirectoryLoader0.getRevision();
      Evaluation.main(stringArray0);
      evaluation0.kappa();
      evaluation0.areaUnderPRC(2220);
      Bagging bagging0 = new Bagging();
      Evaluation.getGlobalInfo(bagging0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.numTrueNegatives(8);
      evaluation0.areaUnderROC((-427));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFSchemeEntropy();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation2 = new Evaluation(instances0, costMatrix0);
      evaluation2.numFalsePositives(0);
      evaluation1.meanPriorAbsoluteError();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 8;
      intArray0[2] = 2220;
      intArray0[3] = (-427);
      intArray0[4] = 2220;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(73.68, intArray0, (-1152));
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.5076162726508993
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.useNoPriors();
      JSONLoader jSONLoader0 = new JSONLoader();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-914));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.751073646394981
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      BayesNet bayesNet0 = new BayesNet();
      Capabilities capabilities0 = bayesNet0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      JSONLoader jSONLoader0 = new JSONLoader();
      testInstances0.setWordSeparators("Class must be nominal for margin distributions");
      evaluation0.weightedPrecision();
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = Double.NaN;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-914));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.2473779345300193
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances2 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances2);
      costSensitiveClassifier0.setDebug(false);
      instances2.setClassIndex((-2005497621));
      evaluation0.weightedAreaUnderROC();
      CostMatrix costMatrix0 = new CostMatrix(0);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = new Evaluation(instances1, costMatrix1);
      evaluation1.toSummaryString("@data", false);
      Evaluation evaluation2 = new Evaluation(instances1, costMatrix0);
      evaluation2.weightedPrecision();
      Evaluation evaluation3 = null;
      try {
        evaluation3 = new Evaluation(instances2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6593387642402389
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Stack<BinarySparseInstance> stack0 = new Stack<BinarySparseInstance>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      JSONLoader jSONLoader0 = new JSONLoader();
      instances0.enumerateAttributes();
      instances0.parallelStream();
      evaluation0.setPriors(instances0);
      evaluation0.sizeOfPredictedRegions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.405788492067722
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      evaluation0.weightedFalsePositiveRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      evaluation0.unweightedMacroFmeasure();
      Instances instances1 = instances0.resample(mockRandom0);
      evaluation0.toClassDetailsString();
      evaluation0.truePositiveRate(1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(645.73755965764, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances1.add((Instance) sparseInstance1);
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.addNumericTrainClass(1000.0, 0.0);
      evaluation0.precision(0);
      evaluation0.weightedFalseNegativeRate();
      try { 
        evaluation0.evaluateModel((Classifier) gaussianProcesses0, instances1, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.6584547706839947
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.useNoPriors();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 2;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) (-2);
      gaussianProcesses0.m_L = gaussianProcesses0.m_L;
      MockRandom mockRandom0 = new MockRandom((-900L));
      evaluation0.sizeOfPredictedRegions();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom2 = new MockRandom(2);
      mockRandom2.doubles((-3013.1452591603), (double) 1);
      instances1.resample(mockRandom2);
      evaluation0.toClassDetailsString();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.truePositiveRate(0);
      MockRandom mockRandom3 = new MockRandom();
      testInstances0.setMultiInstance(false);
      evaluation0.trueNegativeRate(2);
      MockRandom mockRandom4 = new MockRandom();
      try { 
        evaluation0.crossValidateModel("V/n`}5N(-;!2%xex", instances1, 109, (String[]) null, (Random) mockRandom4);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: V/n`}5N(-;!2%xex
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.169511140689048
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.setDiscardPredictions(false);
      double double0 = evaluation0.m_SumSqrErr;
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@relation");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute(".bsi", instances0, protectedProperties1);
      instances0.deleteWithMissing(attribute0);
      double double1 = evaluation0.totalCost();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.toMatrixString();
      evaluation0.rootRelativeSquaredError();
      double[] doubleArray0 = new double[5];
      univariateKernelEstimator0.logDensity((-3430.0));
      doubleArray0[0] = 477.78;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (-0.9189385332046727);
      doubleArray0[3] = (double) 1;
      evaluation0.updateMargins(doubleArray0, 2, 3);
      evaluation0.areaUnderROC(2144163161);
      evaluation0.numTruePositives(1);
      evaluation0.confusionMatrix();
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = 'J';
      charArray0[2] = '|';
      String string0 = evaluation0.num2ShortID(3, charArray0, 3);
      assertEquals(" ((", string0);
      
      double double2 = evaluation0.truePositiveRate(2144163161);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.falsePositiveRate(1);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.528966596020963
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      costSensitiveClassifier0.setCostMatrix(costMatrix0);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      evaluation0.addNumericTrainClass(1, 1);
      evaluation0.setDiscardPredictions(true);
      evaluation0.rootRelativeSquaredError();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      evaluation0.addNumericTrainClass(0.2, 2.0);
      evaluation0.getDiscardPredictions();
      evaluation0.rootMeanSquaredError();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = 'D';
      charArray0[2] = 's';
      charArray0[3] = 'o';
      charArray0[4] = 'Z';
      evaluation0.num2ShortID(1, charArray0, 489);
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      int int0 = 0;
      instances0.setClassIndex(0);
      textDirectoryLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.setPriors(instances0);
      textDirectoryLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.093712898568014
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "makeCopies");
      evaluation0.setDiscardPredictions(true);
      evaluation0.incorrect();
      evaluation0.numTruePositives((-1));
      evaluation0.numFalsePositives((-1));
      evaluation0.weightedAreaUnderPRC();
      evaluation0.numFalseNegatives((-219252797));
      evaluation0.weightedAreaUnderPRC();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) simpleLinearRegression0);
      instances0.removeIf(predicate0);
      instances0.enumerateAttributes();
      double[] doubleArray0 = new double[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      doubleArray0[0] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(2011.604398969, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(124);
      instances0.add((Instance) sparseInstance0);
      UnaryOperator.identity();
      evaluation0.rootRelativeSquaredError();
      evaluation0.rootRelativeSquaredError();
      DenseInstance denseInstance0 = new DenseInstance(22);
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.areaUnderPRC(1539);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-914), doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      int int0 = 0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      instances0.setClassIndex(0);
      textDirectoryLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.kappa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances2 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = false;
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) instances1;
      objectArray0[1] = (Object) simpleLogistic0;
      objectArray0[2] = (Object) evaluation0;
      objectArray0[3] = (Object) textDirectoryLoader0;
      objectArray0[4] = (Object) textDirectoryLoader1;
      objectArray0[5] = (Object) instances1;
      objectArray0[6] = (Object) textDirectoryLoader1;
      try { 
        evaluation0.evaluateModel((Classifier) simpleLogistic0, instances2, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Instances cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) simpleLogistic0, instances0, objectArray0);
      evaluation0.useNoPriors();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[0];
      try { 
        pipedReader0.read(charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.51412949522295
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      evaluation0.useNoPriors();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.errorRate();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.listOptions();
      textDirectoryLoader1.getRevision();
      Properties properties0 = new Properties();
      properties0.keySet();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      textDirectoryLoader4.reset();
      textDirectoryLoader3.getDirectory();
      textDirectoryLoader3.getRevision();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@data");
      evaluation0.toClassDetailsString();
      evaluation1.rootRelativeSquaredError();
      evaluation0.SFSchemeEntropy();
      Double double0 = new Double(Double.NaN);
      evaluation1.SFPriorEntropy();
      evaluation1.toClassDetailsString();
      evaluation0.KBInformation();
      evaluation0.weightedTruePositiveRate();
      evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.607233700255774
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)108;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances1);
      JSONLoader jSONLoader0 = new JSONLoader();
      instances0.enumerateAttributes();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)108;
      doubleArray0[1] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[3] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-914));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.6476827945164167
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) (-2);
      gaussianProcesses0.m_L = gaussianProcesses0.m_L;
      MockRandom mockRandom0 = new MockRandom((-900L));
      evaluation0.sizeOfPredictedRegions();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom2 = new MockRandom(2);
      mockRandom2.doubles((-3013.1452591603), (double) 1);
      instances1.resample(mockRandom2);
      evaluation0.toClassDetailsString();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.truePositiveRate(0);
      MockRandom mockRandom3 = new MockRandom();
      testInstances0.setMultiInstance(false);
      evaluation0.trueNegativeRate(2);
      MockRandom mockRandom4 = new MockRandom(0);
      try { 
        evaluation0.crossValidateModel("V/n`}5N(-;!2%xex", instances1, 109, (String[]) null, (Random) mockRandom4);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: V/n`}5N(-;!2%xex
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.306684889563356
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      evaluation0.setDiscardPredictions(false);
      evaluation0.SFMeanSchemeEntropy();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      evaluation0.errorRate();
      FileSystemHandling.createFolder(evoSuiteFile0);
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      evaluation0.rootRelativeSquaredError();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.addNumericTrainClass((-139.99200046084), Double.NaN);
      sparseInstance0.setWeight((-3407.24619));
      sparseInstance0.setValue((-914), (-139.99200046084));
      evaluation0.precision((-914));
      evaluation0.numFalseNegatives((-914));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.fMeasure(17);
      evaluation0.pctIncorrect();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.637541774063024
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      textDirectoryLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      evaluation0.makeDistribution(5.55555);
      evaluation0.addNumericTrainClass(0.2, 4.9E-324);
      evaluation0.setDiscardPredictions(false);
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.rootRelativeSquaredError();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      evaluation0.addNumericTrainClass(1467.186, 752.74095952);
      evaluation0.getDiscardPredictions();
      evaluation0.rootMeanSquaredError();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.2376830354502575
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "  ?  ");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      evaluation0.weightedAreaUnderROC();
      evaluation0.toSummaryString("[MappingInfo] Unable to find a match for mining schema attribute ", true);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 0, 2.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.9330645420032675
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      costSensitiveClassifier0.setCostMatrix(costMatrix0);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      evaluation0.areaUnderPRC(1);
      Bagging bagging0 = new Bagging();
      Vote vote0 = new Vote();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".cost";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "setNominalToBinaryFilter";
      Evaluation.main(stringArray0);
      double double0 = evaluation0.m_MissingClass;
      double double1 = evaluation0.numTrueNegatives(3);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.m_SumSqrClass;
      double double4 = evaluation0.numFalseNegatives(6);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = evaluation0.weightedAreaUnderROC();
      double double6 = evaluation0.numInstances();
      assertEquals(0.0, double6, 0.01);
      
      double double7 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double7, double5, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.4922963932744846
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances1);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      instances1.enumerateInstances();
      evaluation0.equals(instances1);
      evaluation0.pctIncorrect();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.weightedFalseNegativeRate();
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities0 = multiScheme0.getCapabilities();
      capabilities0.disableAll();
      M5Rules m5Rules0 = new M5Rules();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedTruePositiveRate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-1495);
      doubleArray0[3] = Double.NaN;
      // Undeclared exception!
      try { 
        instances1.kthSmallestValue((-1495), (-1495));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.542233408785356
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      Properties properties0 = new Properties();
      properties0.replace((Object) univariateKernelEstimator0, (Object) univariateKernelEstimator0, (Object) univariateKernelEstimator0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)119;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      JSONLoader jSONLoader0 = new JSONLoader();
      int int0 = (-686);
      int[] intArray0 = new int[2];
      intArray0[0] = 19;
      intArray0[1] = (-686);
      evaluation0.toClassDetailsString(")6s>,`YWXhsTbEUK!");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-686), intArray0, (-686));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.setDataset(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) (-2), (Instance) binarySparseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.078501712671704
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      evaluation0.SFMeanSchemeEntropy();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".bsi";
      stringArray0[4] = ".bsi";
      stringArray0[5] = ".arff";
      stringArray0[6] = "@data";
      stringArray0[7] = ".bsi";
      stringArray0[8] = ".bsi";
      TextDirectoryLoader.main(stringArray0);
      evaluation0.errorRate();
      textDirectoryLoader0.getRevision();
      String[] stringArray1 = new String[2];
      stringArray1[0] = ".arff";
      stringArray1[1] = "8034";
      Evaluation.main(stringArray1);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getRevision();
      Evaluation.main(stringArray0);
      evaluation0.kappa();
      evaluation0.areaUnderPRC(104);
      SparseInstance sparseInstance0 = new SparseInstance(1817.5624176186, evaluation0.m_MarginCounts);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.9626639794177194
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      evaluation0.weightedFalsePositiveRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      evaluation0.unweightedMacroFmeasure();
      Instances instances1 = instances0.resample(mockRandom0);
      evaluation0.toMatrixString();
      double double0 = evaluation0.m_SumKBInfo;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(646.1053102281014, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances1.add((Instance) sparseInstance1);
      double double1 = evaluation0.m_TotalCoverage;
      evaluation0.addNumericTrainClass(0, 2.0);
      evaluation0.precision((-1954653100));
      evaluation0.weightedFalseNegativeRate();
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.1925426847001717
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      KernelEstimator kernelEstimator0 = new KernelEstimator(0.975);
      Capabilities capabilities0 = new Capabilities(kernelEstimator0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(kernelEstimator0);
      capabilities0.disableAll();
      Instances instances0 = testInstances0.generate("vI:BjW*joplWe8?%];F");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<ListOptions> priorityQueue0 = new PriorityQueue<ListOptions>(comparator0);
      LinkedList<ListOptions> linkedList0 = new LinkedList<ListOptions>(priorityQueue0);
      instances0.retainAll(linkedList0);
      instances0.getRevision();
      String string0 = evaluation0.toSummaryString("Q", false);
      assertEquals("Q\nTotal Number of Instances                0     \n", string0);
      
      evaluation0.m_ClassPriorsSum = 1.0;
      double double0 = evaluation0.avgCost();
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      
      double double1 = evaluation0.unclassified();
      assertEquals(0.0, double1, 0.01);
      
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray0.length);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.3856475412341362
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[2] = (byte)108;
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      JSONLoader jSONLoader0 = new JSONLoader();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)108;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[1] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-914));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.4697846931481098
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.SFMeanSchemeEntropy();
      double double1 = evaluation0.errorRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.listOptions();
      textDirectoryLoader1.getRevision();
      Properties properties0 = new Properties();
      properties0.keySet();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      textDirectoryLoader3.reset();
      textDirectoryLoader3.reset();
      textDirectoryLoader1.getDirectory();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n                 TP Rate  FP Rate");
      evaluation0.toClassDetailsString();
      evaluation0.rootRelativeSquaredError();
      double double2 = evaluation0.SFSchemeEntropy();
      Double double3 = new Double(2);
      double double4 = evaluation0.SFPriorEntropy();
      assertNotEquals(double4, double0, 0.01);
      
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double5 = evaluation0.KBInformation();
      assertEquals(double5, double2, 0.01);
      
      evaluation0.weightedTruePositiveRate();
      DataFlavor dataFlavor0 = DataFlavor.fragmentHtmlFlavor;
      textDirectoryLoader1.setDebug(false);
      Clipboard clipboard0 = new Clipboard("@data");
      clipboard0.getContents(textDirectoryLoader1);
      double double6 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, double6, 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.629820911715024
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      costSensitiveClassifier0.setCostMatrix(costMatrix0);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      instances0.add((Instance) sparseInstance0);
      double double0 = evaluation0.m_MinTarget;
      SparseInstance sparseInstance1 = new SparseInstance(2.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(3);
      instances0.add((Instance) sparseInstance1);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.8034733179897713
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      double[] doubleArray0 = new double[0];
      evaluation0.addNumericTrainClass(645.73755965764, 0.2);
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      evaluation0.setDiscardPredictions(false);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.errorRate();
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.addNumericTrainClass((-139.99200046084), Double.NaN);
      sparseInstance0.setValue(278, (-139.99200046084));
      evaluation0.precision((-914));
      evaluation0.numFalseNegatives((-914));
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(evaluation0.m_Header);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) filteredClassifier0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.9456645463488123
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      Stack<String> stack0 = new Stack<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute(".bsi", stack0, protectedProperties0);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.totalCost();
      try { 
        evaluation1.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.8564909139241832
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costSensitiveClassifier0.setCostMatrix(costMatrix0);
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      boolean boolean0 = evaluation0.m_NoPriors;
      double double0 = evaluation0.m_MinTarget;
      // Undeclared exception!
      try { 
        evaluation0.precision(980);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 980
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      textDirectoryLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      textDirectoryLoader0.getNextInstance(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setCostMatrix((CostMatrix) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 2476.1465169437;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-3802.0);
      SparseInstance sparseInstance0 = new SparseInstance((-3802.0), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      boolean boolean0 = evaluation0.m_NoPriors;
      double double0 = evaluation0.m_MinTarget;
      int int0 = 37;
      // Undeclared exception!
      try { 
        evaluation0.precision(37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.5574502480119636
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costSensitiveClassifier0.setCostMatrix(costMatrix0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2656);
      boolean boolean0 = evaluation0.m_NoPriors;
      evaluation0.precision((-914));
      DenseInstance denseInstance0 = new DenseInstance(Double.NaN, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.117456111453701
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      KernelEstimator kernelEstimator0 = new KernelEstimator(0.975);
      Capabilities capabilities0 = new Capabilities(kernelEstimator0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(kernelEstimator0);
      Instances instances0 = testInstances0.generate("vI:BjW*joplWe8?%];F");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 0.975;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = 0.975;
      doubleArray0[7] = 0.975;
      SparseInstance sparseInstance0 = new SparseInstance(2.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.3265171534282083
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-2338), false, false);
      String string0 = Evaluation.makeOptionString(simpleLogistic0, true);
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, string0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.637888134795497
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      evaluation0.weightedFalsePositiveRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      evaluation0.unweightedMacroFmeasure();
      instances0.resample(mockRandom0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.setDiscardPredictions(false);
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation1.errorRate();
      textDirectoryLoader0.getRevision();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".bsi";
      Evaluation.main(stringArray0);
      evaluation0.kappa();
      double double3 = evaluation1.pctCorrect();
      assertEquals(double3, double2, 0.01);
      
      evaluation0.correct();
      double double4 = evaluation0.fMeasure(1384);
      assertEquals(0.0, double4, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      sparseInstance0.deleteAttributeAt(2);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) costSensitiveClassifier0, (Instance) sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.8613788200998673
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      costSensitiveClassifier0.setCostMatrix(costMatrix0);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      instances0.add((Instance) sparseInstance0);
      double double0 = evaluation0.m_MinTarget;
      evaluation0.precision(1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-2.0), doubleArray0);
      binarySparseInstance1.setWeight((-2.0));
      binarySparseInstance0.setValue((-914), 2.0);
      evaluation0.precision(1180);
      evaluation0.numFalseNegatives((-1213));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getTechnicalInformation();
      evaluation0.fMeasure(1);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.SFPriorEntropy();
      double double1 = evaluation0.priorEntropy();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.6255821340310974
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances1);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      double[] doubleArray0 = evaluation0.m_MarginCounts;
      evaluation0.trueNegativeRate(16);
      DenseInstance denseInstance0 = new DenseInstance(2059.7247372, doubleArray0);
      instances0.add((Instance) denseInstance0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      AbstractClassifier.makeCopy(regressionByDiscretization0);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      DenseInstance denseInstance1 = new DenseInstance(767);
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      evaluation0.incorrect();
      evaluation0.numTrueNegatives(3364);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.weightedTruePositiveRate();
      evaluation0.toMatrixString();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      WrapperSubsetEval wrapperSubsetEval1 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      // Undeclared exception!
      try { 
        instances0.kthSmallestValue(2, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.7919293214413823
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      KernelEstimator kernelEstimator0 = new KernelEstimator(2116.7202190834);
      Capabilities capabilities0 = new Capabilities(kernelEstimator0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(kernelEstimator0);
      Instances instances0 = testInstances0.generate("vI:BjW*joplWe8?%];F");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<ListOptions> priorityQueue0 = new PriorityQueue<ListOptions>(comparator0);
      ListOptions listOptions0 = new ListOptions();
      priorityQueue0.add(listOptions0);
      LinkedList<ListOptions> linkedList0 = new LinkedList<ListOptions>(priorityQueue0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@data");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-1), false, true);
      SimpleLogistic simpleLogistic1 = new SimpleLogistic((-1), true, true);
      simpleLogistic1.getOptions();
      String string0 = Evaluation.makeOptionString(simpleLogistic0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.056195950544659
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      double double0 = evaluation0.weightedPrecision();
      double double1 = evaluation0.m_SumSqrErr;
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("@data");
      instances0.deleteWithMissing(attribute0);
      double double2 = evaluation0.totalCost();
      evaluation0.toMatrixString();
      univariateKernelEstimator0.logDensity(4);
      evaluation0.areaUnderROC(2144163161);
      evaluation0.numTruePositives(1);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = 'J';
      charArray0[2] = '|';
      evaluation0.truePositiveRate(2144163161);
      double double3 = evaluation0.falsePositiveRate(1);
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation0.KBRelativeInformation();
      assertEquals(double4, double0, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      costSensitiveClassifier0.setCostMatrix(costMatrix0);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      instances0.add((Instance) sparseInstance0);
      double double0 = evaluation0.m_MinTarget;
      DenseInstance denseInstance0 = new DenseInstance((-914), doubleArray0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, (-914), (Random) mockRandom0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IBk iBk0 = new IBk();
      int int0 = 7;
      CostMatrix costMatrix0 = new CostMatrix(1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(".cost", arrayList0, 1005);
      CostMatrix costMatrix1 = new CostMatrix(23);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.8238073285225154
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      double[] doubleArray0 = new double[0];
      evaluation0.addNumericTrainClass(645.73755965764, 0.2);
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.setDiscardPredictions(false);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      evaluation0.addNumericTrainClass(Double.NaN, 0.0);
      evaluation0.getDiscardPredictions();
      double double1 = evaluation0.rootMeanSquaredError();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double2 = evaluation0.KBMeanInformation();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.numTrueNegatives(12);
      assertEquals(0.0, double3, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.3588553868687185
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      evaluation0.addNumericTrainClass(239.22726374254, (-1243.996782));
      assertFalse(evaluation0.getDiscardPredictions());
      
      evaluation0.setDiscardPredictions(true);
      evaluation0.rootRelativeSquaredError();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      evaluation0.addNumericTrainClass((-0.9189385332046727), 1.0);
      evaluation0.getDiscardPredictions();
      double double0 = evaluation0.rootMeanSquaredError();
      assertTrue(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.1660899068057584
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      // Undeclared exception!
      try { 
        evaluation0.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.8393579695774942
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 0;
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      textDirectoryLoader0.getNextInstance(instances0);
      instances0.stream();
      evaluation0.sizeOfPredictedRegions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.9792528475755982
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      double[] doubleArray0 = new double[0];
      evaluation0.addNumericTrainClass(645.73755965764, 0.2);
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      REPTree rEPTree0 = new REPTree();
      MockRandom mockRandom0 = new MockRandom();
      LMT lMT0 = new LMT();
      try { 
        evaluation0.crossValidateModel((Classifier) lMT0, instances0, 489, (Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.2613403257547118
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      evaluation0.weightedFalsePositiveRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      evaluation0.unweightedMacroFmeasure();
      Instances instances1 = instances0.resample(mockRandom0);
      evaluation0.toClassDetailsString();
      evaluation0.truePositiveRate(1);
      try { 
        evaluation0.crossValidateModel((Classifier) gaussianProcesses0, instances1, (-600), (Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.5209746451886317
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      JSONLoader jSONLoader0 = new JSONLoader();
      double[] doubleArray0 = new double[4];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)27;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      JSONLoader jSONLoader1 = new JSONLoader();
      Enumeration enumeration0 = new NGramTokenizer();
      SparseInstance sparseInstance0 = new SparseInstance(900.927965125676, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)111);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnaryOperator.identity();
      evaluation0.rootRelativeSquaredError();
      evaluation0.rootRelativeSquaredError();
      double double0 = evaluation0.SFSchemeEntropy();
      evaluation0.priorEntropy();
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(double1, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation1.priorEntropy();
      assertEquals(0.9940302114769565, double2, 0.01);
      
      double double3 = evaluation0.unclassified();
      assertEquals(0.0, double3, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.2539987538588084
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      String string0 = "  ?  ";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "  ?  ");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      evaluation0.weightedAreaUnderROC();
      String string1 = "[MappingInfo] Unable to find a match for mining schema attribute ";
      boolean boolean0 = true;
      evaluation0.toSummaryString("[MappingInfo] Unable to find a match for mining schema attribute ", true);
      evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.1864137057509496
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      BayesNet bayesNet0 = new BayesNet();
      Capabilities capabilities0 = bayesNet0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      JSONLoader jSONLoader0 = new JSONLoader();
      evaluation0.weightedPrecision();
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = Double.NaN;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-914));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.635249933263966
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      JSONLoader jSONLoader0 = new JSONLoader();
      double[] doubleArray0 = new double[4];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)27;
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) optionHandlerJavadoc0);
      instances0.removeIf(predicate0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      JSONLoader jSONLoader1 = new JSONLoader();
      instances1.enumerateAttributes();
      SparseInstance sparseInstance0 = new SparseInstance(900.927965125676, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)111);
      instances1.add((Instance) sparseInstance0);
      UnaryOperator.identity();
      evaluation0.rootRelativeSquaredError();
      evaluation0.rootRelativeSquaredError();
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double1, 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double2 = evaluation0.KBMeanInformation();
      double double3 = evaluation0.SFMeanEntropyGain();
      assertEquals(double3, double2, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.3204863871626777
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      boolean boolean0 = evaluation0.m_NoPriors;
      double double0 = evaluation0.m_MinTarget;
      evaluation0.precision((-4176));
      evaluation0.incorrect();
      evaluation0.pctCorrect();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      String string0 = Evaluation.makeOptionString(costSensitiveClassifier0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.9255315330723697
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      costSensitiveClassifier0.setCostMatrix(costMatrix0);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      instances0.add((Instance) sparseInstance0);
      double double0 = evaluation0.m_MinTarget;
      evaluation0.precision((-4176));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-2.0), doubleArray0);
      binarySparseInstance1.setWeight((-2.0));
      binarySparseInstance0.setValue((-914), 2.0);
      evaluation0.precision(1180);
      int int0 = (-1213);
      evaluation0.numFalseNegatives((-1213));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getTechnicalInformation();
      evaluation0.fMeasure(1);
      evaluation0.pctIncorrect();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.484623759003385
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      costSensitiveClassifier0.setCostMatrix(costMatrix0);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      instances0.add((Instance) sparseInstance0);
      double double0 = evaluation0.m_MinTarget;
      evaluation0.precision((-4176));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-2.0), doubleArray0);
      binarySparseInstance1.setWeight((-2.0));
      binarySparseInstance0.setValue((-914), 2.0);
      evaluation0.truePositiveRate(1180);
      evaluation0.falsePositiveRate((-206797271));
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.348614010734844
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)108;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.useNoPriors();
      JSONLoader jSONLoader0 = new JSONLoader();
      instances0.enumerateAttributes();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)108;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-914));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IBk iBk0 = new IBk();
      CostMatrix costMatrix0 = new CostMatrix(2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      try { 
        Evaluation.handleCostOption(".cost", 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "O{pGtm0l$Sm2<ni`EI";
      stringArray0[1] = "O{pGtm0l$Sm2<ni`EI";
      stringArray0[2] = "O{pGtm0l$Sm2<ni`EI";
      stringArray0[3] = "O{pGtm0l$Sm2<ni`EI";
      stringArray0[4] = "O{pGtm0l$Sm2<ni`EI";
      stringArray0[5] = "O{pGtm0l$Sm2<ni`EI";
      stringArray0[6] = "O{pGtm0l$Sm2<ni`EI";
      stringArray0[7] = "O{pGtm0l$Sm2<ni`EI";
      try { 
        Evaluation.evaluateModel("O{pGtm0l$Sm2<ni`EI", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name O{pGtm0l$Sm2<ni`EI.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.4665346693860966
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      textDirectoryLoader0.setOutputFilename(true);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.SFMeanSchemeEntropy();
      evaluation1.errorRate();
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      textDirectoryLoader0.getRevision();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("getRevision");
      evaluation1.totalCost();
      try { 
        evaluation1.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.405175374829327
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      evaluation0.addNumericTrainClass(0.0, (-2841.537535675322));
      evaluation0.setDiscardPredictions(true);
      evaluation0.rootRelativeSquaredError();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      evaluation0.addNumericTrainClass(645.73755965764, (-2841.537535675322));
      evaluation0.getDiscardPredictions();
      double double0 = evaluation0.rootMeanSquaredError();
      assertTrue(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.31128814303217
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockRandom mockRandom0 = new MockRandom((-1495));
      evaluation0.sizeOfPredictedRegions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom2 = new MockRandom((-1237L));
      mockRandom0.doubles(0.2, 2705.9954);
      MockRandom mockRandom3 = new MockRandom(0L);
      evaluation0.getRevision();
      evaluation0.truePositiveRate(2);
      MockRandom mockRandom4 = new MockRandom();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setMultiInstance(false);
      MockRandom mockRandom5 = new MockRandom();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "^){>");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "V/n`}5N(-;!2%xex";
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.169195541471393
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.setDiscardPredictions(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      evaluation0.numTruePositives((-54));
      evaluation0.numFalsePositives((-54));
      evaluation0.weightedAreaUnderPRC();
      evaluation0.numFalseNegatives((-54));
      double double1 = evaluation0.weightedAreaUnderPRC();
      double double2 = evaluation0.errorRate();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.kappa();
      double double3 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double3, double2, 0.01);
      
      evaluation0.areaUnderPRC((-1125));
      Bagging bagging0 = new Bagging();
      double double4 = evaluation0.weightedAreaUnderROC();
      assertEquals(double4, double1, 0.01);
      
      double double5 = evaluation0.falseNegativeRate(37);
      assertNotEquals(double5, double2, 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.8080247346755955
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.SFMeanSchemeEntropy();
      evaluation0.errorRate();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.listOptions();
      textDirectoryLoader1.getRevision();
      Properties properties0 = new Properties();
      properties0.keySet();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      textDirectoryLoader3.reset();
      textDirectoryLoader3.reset();
      textDirectoryLoader1.getDirectory();
      evaluation0.weightedAreaUnderPRC();
      double double1 = evaluation0.errorRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.weightedTrueNegativeRate();
      double double3 = evaluation0.kappa();
      assertEquals(1.0, double3, 0.01);
      
      evaluation0.weightedTrueNegativeRate();
      evaluation0.areaUnderPRC(558);
      Bagging bagging0 = new Bagging();
      double double4 = evaluation0.weightedAreaUnderROC();
      assertEquals(double4, double2, 0.01);
      
      double double5 = evaluation0.falseNegativeRate((-4225));
      assertNotEquals(double5, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.886992732113916
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      costSensitiveClassifier0.setCostMatrix(costMatrix0);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.numFalseNegatives((-219252797));
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.errorRate();
      double double2 = evaluation0.weightedTrueNegativeRate();
      double double3 = evaluation0.kappa();
      assertEquals(1.0, double3, 0.01);
      
      evaluation0.weightedTrueNegativeRate();
      evaluation0.areaUnderPRC(12);
      Bagging bagging0 = new Bagging();
      double double4 = evaluation0.weightedAreaUnderROC();
      assertEquals(double4, double2, 0.01);
      
      double double5 = evaluation0.falseNegativeRate(679);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.960269375248542
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getStructure();
      Evaluation evaluation1 = new Evaluation(instances1);
      instances0.setClassIndex(0);
      evaluation1.weightedAreaUnderROC();
      evaluation0.toSummaryString(".bsi", false);
      double double0 = evaluation0.weightedPrecision();
      Evaluation evaluation2 = new Evaluation(instances1);
      double double1 = evaluation2.weightedAreaUnderROC();
      double double2 = evaluation2.weightedFalseNegativeRate();
      assertEquals(double2, double0, 0.01);
      
      REPTree rEPTree0 = new REPTree();
      MockRandom mockRandom0 = new MockRandom();
      Double double3 = new Double((-1.6737117907371815));
      double double4 = evaluation1.SFPriorEntropy();
      assertEquals(0.0, double4, 0.01);
      
      evaluation2.weightedFMeasure();
      evaluation1.toSummaryString();
      evaluation1.totalCost();
      double double5 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double5, double1, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances1);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      double[] doubleArray0 = evaluation0.m_MarginCounts;
      evaluation0.trueNegativeRate(16);
      DenseInstance denseInstance0 = new DenseInstance(2059.7247372, doubleArray0);
      instances0.add((Instance) denseInstance0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      AbstractClassifier.makeCopy(regressionByDiscretization0);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      DenseInstance denseInstance1 = new DenseInstance(767);
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      Instance instance0 = null;
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization2, (Instance) null, (-1048.26530346));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.612422411327526
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) (-2);
      MockRandom mockRandom0 = new MockRandom((-900L));
      evaluation0.sizeOfPredictedRegions();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom2 = new MockRandom(2);
      instances0.resample(mockRandom2);
      evaluation0.truePositiveRate(0);
      MockRandom mockRandom3 = new MockRandom();
      testInstances0.setMultiInstance(false);
      evaluation0.trueNegativeRate(2);
      MockRandom mockRandom4 = new MockRandom(0);
      try { 
        evaluation0.crossValidateModel("V/n`}5N(-;!2%xex", instances0, 109, (String[]) null, (Random) mockRandom4);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: V/n`}5N(-;!2%xex
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.8992399051814026
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      double[] doubleArray0 = evaluation0.m_MarginCounts;
      evaluation0.trueNegativeRate(16);
      DenseInstance denseInstance0 = new DenseInstance(2059.7247372, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(99.0, doubleArray0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      instances0.add((Instance) denseInstance0);
      evaluation0.weightedAreaUnderPRC();
      double double0 = evaluation0.m_SumSqrClass;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.3387308522635606
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      JSONLoader jSONLoader0 = new JSONLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedPrecision();
      evaluation0.weightedAreaUnderROC();
      REPTree rEPTree0 = new REPTree();
      MockRandom mockRandom0 = new MockRandom();
      LMT lMT0 = new LMT();
      PipedReader pipedReader0 = new PipedReader(2861);
      long long0 = 2586L;
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      try { 
        pipedReader0.connect(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costSensitiveClassifier0.costMatrixSourceTipText();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IBk iBk0 = new IBk();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      iBk0.pruneToK((Instances) null, doubleArray0, (-1812));
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
