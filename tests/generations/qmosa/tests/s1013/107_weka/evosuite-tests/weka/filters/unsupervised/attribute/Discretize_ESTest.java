/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 03:00:00 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0297406741726904
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      String[] stringArray0 = new String[1];
      Filter.runFilter(multiFilter0, stringArray0);
      Filter.runFilter(filter0, stringArray0);
      Filter.runFilter(multiFilter0, stringArray0);
      Filter.runFilter(filter0, stringArray0);
      AllFilter allFilter0 = new AllFilter();
      Filter.runFilter(filter0, stringArray0);
      Filter.makeCopies(filter0, 2867);
      Filter.makeCopy(multiFilter0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("Nq2v2uT", 2);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2867);
      discretize0.setFindNumBins(true);
      Instances instances0 = new Instances("Nq2v2uT", arrayList0, 2);
      Instances instances1 = new Instances(instances0, 1);
      discretize0.setInputFormat(instances1);
      Locale.getISOLanguages();
      discretize0.batchFinished();
      discretize0.calculateCutPoints();
      boolean boolean0 = discretize0.m_MakeBinary;
      discretize0.setFindNumBins(true);
      discretize0.setInputFormat(instances1);
      Locale.getISOLanguages();
      discretize0.batchFinished();
      // Undeclared exception!
      discretize0.calculateCutPoints();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3080561808079394
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)40;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("69E;vi8jt* TGh/", arrayList0, 19);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("3>%u", protectedProperties3);
      arrayList0.add(attribute0);
      boolean boolean0 = discretize0.m_MakeBinary;
      Properties properties1 = new Properties();
      instances0.stream();
      attribute0.setWeight(1035.79);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "@attribute");
      attribute0.addStringValue(attribute0, 66);
      discretize0.setInputFormat(instances0);
      Discretize discretize1 = new Discretize();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(66, (int[]) null, (-2070787801));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0, (int[]) null, 1436);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0611833526061294
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      String[] stringArray0 = new String[1];
      Filter.runFilter(multiFilter0, stringArray0);
      Filter.runFilter(filter0, stringArray0);
      Filter.runFilter(multiFilter0, stringArray0);
      Filter.runFilter(filter0, stringArray0);
      AllFilter allFilter0 = new AllFilter();
      Filter.runFilter(filter0, (String[]) null);
      Filter.makeCopies(filter0, 2819);
      MultiFilter multiFilter1 = new MultiFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("5L&_<)znN2#", 125);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2819);
      Instances instances0 = new Instances("string", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.getBins();
      Locale.getISOLanguages();
      discretize0.batchFinished();
      Object object0 = new Object();
      discretize0.getCapabilities(instances0);
      Object object1 = new Object();
      instances0.remove(object1);
      boolean boolean0 = discretize0.m_IgnoreClass;
      discretize0.setFindNumBins(true);
      discretize0.setInputFormat(instances0);
      discretize0.getBins();
      discretize0.m_MakeBinary = true;
      Locale.getISOCountries();
      discretize0.getMakeBinary();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0202587852594895
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      String[] stringArray0 = new String[1];
      Filter.runFilter(multiFilter0, stringArray0);
      Filter.runFilter(filter0, stringArray0);
      Filter.runFilter(multiFilter0, stringArray0);
      Filter.runFilter(filter0, stringArray0);
      AllFilter allFilter0 = new AllFilter();
      Filter.runFilter(filter0, stringArray0);
      Filter.makeCopies(filter0, 2867);
      Filter.makeCopy(multiFilter0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("Nq2v2uT", 125);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2867);
      Instances instances0 = new Instances("string", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      Locale.getISOLanguages();
      boolean boolean0 = discretize0.m_IgnoreClass;
      DenseInstance denseInstance0 = new DenseInstance((-0.0017331022530329288), (double[]) null);
      Locale.getISOLanguages();
      discretize0.batchFinished();
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DefaultCols = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseEqualFrequency = false;
      discretize0.setInvertSelection(true);
      boolean boolean0 = discretize0.getInvertSelection();
      assertTrue(boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6018777666463064
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2807);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("69E;vi8jt* TGh/", arrayList0, 19);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("3>%u", protectedProperties3);
      arrayList0.add(attribute0);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = discretize0.m_IgnoreClass;
      Instances instances1 = new Instances("-B <num>", arrayList0, 19);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      Attribute attribute1 = new Attribute("of", protectedProperties3);
      arrayList0.add(attribute0);
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances1);
      discretize1.setInputFormat(instances1);
      discretize0.getBins();
      protectedProperties2.entrySet();
      int int0 = discretize0.m_NumBins;
      // Undeclared exception!
      try { 
        discretize1.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '3>%u' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.676392514341509
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2807);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("3>%u", arrayList0, 19);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("3>%u", protectedProperties3);
      arrayList0.add(attribute0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      properties0.put(instances0, protectedProperties0);
      discretize0.setInputFormat(instances0);
      discretize0.getBins();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, (-3724));
      binarySparseInstance0.isMissing(2807);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0999634270167356
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      String[] stringArray0 = new String[1];
      Filter.runFilter(filter0, stringArray0);
      Filter.runFilter(filter0, stringArray0);
      AllFilter allFilter0 = new AllFilter();
      Filter.runFilter(filter0, stringArray0);
      Filter.makeCopies(filter0, 2819);
      Filter.makeCopy(multiFilter0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("5L&_<)znN2#", 125);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2819);
      Instances instances0 = new Instances("string", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.getBins();
      Locale.getISOLanguages();
      discretize0.batchFinished();
      int[] intArray0 = new int[9];
      intArray0[0] = 2819;
      intArray0[1] = 0;
      intArray0[2] = 125;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 0);
      AbstractInstance.s_numericAfterDecimalPoint = 2;
      binarySparseInstance0.isMissing(2);
      discretize0.convertInstance(binarySparseInstance0);
      discretize0.calculateCutPoints();
      discretize0.getBinRangesString(0);
      assertEquals(2819, discretize0.getBins());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7307495598404636
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("5L&_<)znN2#", 125);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2819);
      Instances instances0 = new Instances("string", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.getBins();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      Attribute attribute1 = new Attribute("@relation", 102);
      arrayList0.add(attribute0);
      Discretize discretize1 = new Discretize();
      discretize1.setBins(0);
      Instances instances1 = new Instances("must be terminated by", arrayList1, 2819);
      discretize1.setInputFormat(instances0);
      Locale.getISOLanguages();
      boolean boolean0 = discretize1.m_IgnoreClass;
      DenseInstance denseInstance0 = new DenseInstance(1, (double[]) null);
      Locale.getISOLanguages();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.497906491451203
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2807);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("69E;vi8jt* TGh/", arrayList0, 19);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("3>%u", protectedProperties3);
      arrayList0.add(attribute0);
      instances0.remove((Object) "3>%u");
      boolean boolean0 = discretize0.m_MakeBinary;
      Properties properties1 = new Properties();
      instances0.stream();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      Attribute attribute1 = new Attribute("date", instances0, protectedProperties4);
      attribute1.setWeight(1035.79);
      Attribute attribute2 = new Attribute("", 0);
      arrayList0.add(attribute2);
      discretize0.setBins(1);
      Instances instances1 = new Instances("numeric", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.setInputFormat(instances0);
      discretize0.getBins();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.942240727044267
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("5L&_<)znN2#", 125);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2819);
      Instances instances0 = new Instances("string", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      Filter.wekaStaticWrapper(allFilter0, "@relation", instances0, instances0);
      int int0 = discretize0.m_ClassIndex;
      Locale.getISOLanguages();
      discretize0.batchFinished();
      Object object0 = new Object();
      Object object1 = new Object();
      instances0.remove(object1);
      Properties properties0 = new Properties();
      instances0.stream();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute1 = new Attribute("string", instances0, protectedProperties0);
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      arrayList0.addAll((Collection<? extends Attribute>) linkedList0);
      attribute1.setWeight(1);
      attribute0.addStringValue(attribute1, (-2303));
      discretize0.setInputFormat(instances0);
      discretize0.m_MakeBinary = true;
      Locale.getISOLanguages();
      discretize0.batchFinished();
      discretize0.calculateCutPoints();
      discretize0.calculateCutPoints();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0947552307862773
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      String[] stringArray0 = new String[1];
      Filter.runFilter(filter0, stringArray0);
      Filter.runFilter(filter0, stringArray0);
      AllFilter allFilter0 = new AllFilter();
      Filter.runFilter(filter0, stringArray0);
      Filter.makeCopies(filter0, 2819);
      Filter.makeCopy(multiFilter0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("5L&_<)znN2#", 125);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2819);
      Instances instances0 = new Instances("string", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.getBins();
      Locale.getISOLanguages();
      discretize0.batchFinished();
      int[] intArray0 = new int[9];
      intArray0[0] = 2819;
      Discretize discretize1 = new Discretize("5L&_<)znN2#");
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1554);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1554
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2064794578178835
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2807);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("69E;vi8jt* TGh/", arrayList0, 19);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("3>%u", protectedProperties3);
      arrayList0.add(attribute0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances1 = new Instances("-B <num>", arrayList0, 19);
      properties0.put(instances0, protectedProperties0);
      discretize0.setInputFormat(instances1);
      discretize0.getBins();
      discretize0.batchFinished();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, (-3724));
      binarySparseInstance0.isMissing(2807);
      discretize0.calculateCutPoints();
      discretize0.input(binarySparseInstance0);
      discretize0.findNumBinsTipText();
      discretize0.batchFinished();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      assertEquals(2807, discretize0.getBins());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.025053568627163
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2807);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("69E;vi8jt* TGh/", arrayList0, 19);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("3>%u", protectedProperties3);
      arrayList0.add(attribute0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances1 = new Instances("-B <num>", arrayList0, 19);
      properties0.put(instances0, protectedProperties0);
      discretize0.setInputFormat(instances1);
      discretize0.getBins();
      discretize0.batchFinished();
      Attribute attribute1 = new Attribute(".arff", (List<String>) null, protectedProperties3);
      attribute0.addStringValue(attribute1, (-2303));
      discretize0.setFindNumBins(false);
      Discretize discretize1 = new Discretize();
      Instances instances2 = Filter.useFilter(instances1, discretize0);
      discretize1.setInputFormat(instances2);
      Locale.getISOLanguages();
      discretize0.batchFinished();
      assertEquals(2807, discretize0.getBins());
      
      discretize1.calculateCutPoints();
      discretize1.calculateCutPoints();
      assertEquals(10, discretize1.getBins());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.176552646138356
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute(" KB", 125);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute1 = new Attribute(" KB", list0, 0);
      arrayList0.add(attribute1);
      Discretize discretize0 = new Discretize();
      discretize0.setBins(1443);
      Instances instances0 = new Instances("integer", arrayList0, 607);
      discretize0.setInputFormat(instances0);
      discretize0.getBins();
      Locale.getISOLanguages();
      discretize0.batchFinished();
      Object object0 = new Object();
      Object object1 = new Object();
      SparseInstance sparseInstance0 = new SparseInstance(2804);
      instances0.remove((Object) sparseInstance0);
      discretize0.listOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.setFindNumBins(true);
      discretize0.setInputFormat(instances0);
      Locale.getISOLanguages();
      Discretize discretize1 = new Discretize("string");
      // Undeclared exception!
      try { 
        discretize1.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.648230467888501
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2807);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("69E;vi8jt* TGh/", arrayList0, 19);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("3>%u", protectedProperties3);
      arrayList0.add(attribute0);
      boolean boolean0 = discretize0.m_MakeBinary;
      Properties properties1 = new Properties();
      instances0.stream();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      attribute0.setWeight(1035.79);
      attribute0.addStringValue(attribute0, 66);
      discretize0.setFindNumBins(true);
      discretize0.setInputFormat(instances0);
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      discretize0.getBins();
      Locale.getISOCountries();
      discretize0.setInputFormat(instances0);
      assertEquals(2807, discretize0.getBins());
      
      discretize1.calculateCutPoints();
      assertEquals(10, discretize1.getBins());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.196224597313987
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2807);
      SystemInUtil.addInputLine("J&;*lQ'F)6");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("69E;vi8jt* TGh/", arrayList0, 19);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("3>%u", protectedProperties3);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.setInputFormat(instances0);
      discretize0.getBins();
      protectedProperties3.entrySet();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-1886));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9922924435929237
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SystemInUtil.addInputLine("$d'=hi([$k%3");
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = (MultiFilter)Filter.makeCopy(multiFilter0);
      String[] stringArray0 = new String[1];
      Filter.runFilter(multiFilter1, stringArray0);
      Filter.runFilter(multiFilter1, stringArray0);
      Filter[] filterArray0 = new Filter[0];
      multiFilter1.setFilters(filterArray0);
      AllFilter allFilter0 = new AllFilter();
      Filter.runFilter(multiFilter1, stringArray0);
      Filter.makeCopies(multiFilter1, 2819);
      Filter.makeCopy(multiFilter0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("5L&_<)znN2#", 125);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2819);
      Instances instances0 = new Instances("string", arrayList0, 0);
      Instances instances1 = new Instances("@attribute", arrayList0, 2819);
      discretize0.setInputFormat(instances0);
      discretize0.getBins();
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-2388));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.058088942376764
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.makeCopy(multiFilter0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("5L&_<)znN2#", 2);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("@attribute", arrayList0, 0);
      instances0.renameAttribute(attribute0, "@end");
      discretize0.setInputFormat(instances0);
      Locale.getISOLanguages();
      discretize0.batchFinished();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1377);
      discretize0.convertInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2, intArray0, 4);
      binarySparseInstance1.isMissing(1);
      discretize0.convertInstance(binarySparseInstance1);
      discretize0.calculateCutPoints();
      discretize0.input(binarySparseInstance1);
      assertFalse(discretize0.isNewBatch());
      
      discretize0.batchFinished();
      discretize0.calculateCutPoints();
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2029402429333644
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling7 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling8 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling9 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling10 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling11 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling12 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling13 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      Filter.runFilter(discretize0, (String[]) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("date", 2792);
      arrayList0.add(attribute0);
      discretize0.setBins((-190));
      Instances instances0 = new Instances("Y", arrayList0, 2);
      discretize0.setInputFormat(instances0);
      discretize0.setInputFormat(instances0);
      discretize0.getBins();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.983795636054818
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling7 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling8 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling9 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling10 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling11 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "weka.core.Capabilities$Capability";
      Filter.runFilter(discretize0, stringArray0);
      assertEquals(10, discretize0.getBins());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("weka.core.Capabilities$Capability", 125);
      arrayList0.add(attribute0);
      discretize0.setBins(0);
      Instances instances0 = new Instances("\nThere are conflicting dependencies:\n", arrayList0, 125);
      instances0.remove((Object) fileSystemHandling10);
      discretize0.setInputFormat(instances0);
      discretize0.getBins();
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.069820752039947
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2807);
      SystemInUtil.addInputLine("J&;*lQ'F)6");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("A$(", arrayList0, 79);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("r'Mtn9AR,A<T{%", protectedProperties2);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.setInputFormat(instances0);
      discretize0.getBins();
      assertEquals(2807, discretize0.getBins());
      
      protectedProperties0.entrySet();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@end";
      stringArray0[1] = "real";
      stringArray0[2] = "r'Mtn9AR,A<T{%";
      stringArray0[3] = "@relation";
      stringArray0[4] = "real";
      stringArray0[5] = "@relation";
      stringArray0[6] = "string";
      stringArray0[7] = "string";
      stringArray0[8] = "J&;*lQ'F)6";
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.030847990816896
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      String[] stringArray0 = new String[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Filter.runFilter(multiFilter0, stringArray0);
      Filter.runFilter(filter0, stringArray0);
      Filter.runFilter(multiFilter0, stringArray0);
      Filter.runFilter(filter0, stringArray0);
      AllFilter allFilter0 = new AllFilter();
      Filter.runFilter(filter0, stringArray0);
      Filter.makeCopies(filter0, 2867);
      MultiFilter multiFilter1 = new MultiFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("5L&_<)znN2#", 5507);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setBins(1);
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      discretize0.setInputFormat(instances0);
      Locale.getISOLanguages();
      discretize0.batchFinished();
      Locale.getISOLanguages();
      Discretize discretize1 = new Discretize("5L&_<)znN2#");
      // Undeclared exception!
      try { 
        discretize1.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0985787352729592
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling7 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling8 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling9 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling10 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling11 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling12 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      Filter.runFilter(discretize0, (String[]) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("\nThere are conflicting dependencies:\n", 2792);
      arrayList0.add(attribute0);
      discretize0.setBins(2);
      Instances instances0 = new Instances("$Revision: 8964 $", arrayList0, 150);
      discretize0.setInputFormat(instances0);
      discretize0.getBins();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.100569775591526
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling7 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling8 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling9 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling10 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling11 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling12 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 4.8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 4.8;
      doubleArray2[1] = 4.8;
      doubleArray2[2] = 4.8;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 5285.274154958102;
      doubleArray3[1] = 4.8;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = 4.8;
      doubleArray3[4] = 4.8;
      doubleArray3[5] = 4.8;
      doubleArray3[6] = 4.8;
      doubleArray3[7] = 4.8;
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      Filter.runFilter(discretize0, (String[]) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("\nThere are conflicting dependencies:\n", 2792);
      arrayList0.add(attribute0);
      discretize0.setBins(2);
      Instances instances0 = new Instances("$Revision: 8964 $", arrayList0, 2792);
      discretize0.setInputFormat(instances0);
      discretize0.setInputFormat(instances0);
      discretize0.getBins();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.744423627337201
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("5L&_<)znN2#", 125);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2819);
      Instances instances0 = new Instances("string", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      Filter.wekaStaticWrapper(allFilter0, "@relation", instances0, instances0);
      int int0 = discretize0.m_ClassIndex;
      Locale.getISOLanguages();
      Attribute attribute1 = new Attribute(".u1@[||i<r/G0hJCq)", 1423);
      arrayList0.add(attribute1);
      Discretize discretize1 = new Discretize();
      discretize0.setBins(2);
      Instances instances1 = new Instances("relational", arrayList0, 3);
      discretize1.setInputFormat(instances1);
      discretize0.getBins();
      Locale.getISOLanguages();
      boolean boolean0 = discretize0.m_UseEqualFrequency;
      Object object0 = new Object();
      Object object1 = new Object();
      instances0.remove((Object) null);
      boolean boolean1 = discretize0.m_IgnoreClass;
      discretize1.setFindNumBins(false);
      discretize1.setInputFormat(instances0);
      discretize1.getBins();
      Locale.getISOCountries();
      discretize1.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.846860235133839
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      String[] stringArray0 = new String[1];
      Filter.runFilter(multiFilter0, stringArray0);
      Filter.runFilter(filter0, stringArray0);
      Filter.runFilter(multiFilter0, stringArray0);
      Filter.runFilter(filter0, stringArray0);
      AllFilter allFilter0 = new AllFilter();
      Filter.runFilter(filter0, stringArray0);
      Filter.makeCopies(filter0, 2867);
      Filter.makeCopy(multiFilter0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("Nq2v2uT", 125);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("string", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      Locale.getISOLanguages();
      boolean boolean0 = discretize0.m_IgnoreClass;
      DenseInstance denseInstance0 = new DenseInstance((-0.0017331022530329288), (double[]) null);
      Locale.getISOLanguages();
      discretize0.calculateCutPoints();
      discretize0.setOutputFormat();
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.makeCopy(multiFilter0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("5L&_<)znN2#", 2);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("real");
      Instances instances0 = new Instances("@attribute", arrayList0, 0);
      instances0.renameAttribute(attribute0, "@end");
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at real
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5607810812183933
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2807);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("69E;vi8jt* TGh/", arrayList0, 19);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("3>%u", protectedProperties3);
      arrayList0.add(attribute0);
      boolean boolean0 = discretize0.m_MakeBinary;
      Properties properties1 = new Properties();
      instances0.stream();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      attribute0.setWeight(1035.79);
      attribute0.addStringValue(attribute0, 66);
      discretize0.setFindNumBins(true);
      discretize0.setInputFormat(instances0);
      Discretize discretize1 = new Discretize();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(66, (int[]) null, (-2070787801));
      discretize0.calculateCutPoints();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@data";
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(415);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 415
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = (-1040);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int1 = (-2021161078);
      discretize0.setBins((-2021161078));
      discretize0.m_NumBins = (-1040);
      int int2 = 842;
      discretize0.getCapabilities();
      double double0 = 4143.1586143302;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2021161078);
      doubleArray0[1] = (double) 842;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ACc.2OxL'R.i\"@");
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(1919.80145);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.useBinNumbersTipText();
      discretize0.setOutputFormat();
      byte[] byteArray0 = null;
      AllFilter allFilter0 = new AllFilter();
      allFilter0.toString();
      String string0 = "LY-Dm1~v-M";
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.711395681466945
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1760);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.714704200904497
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize("-R <col1,col2-col4,...>");
      discretize0.setInvertSelection(true);
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      discretize0.getAttributeIndices();
      discretize0.setInvertSelection(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      discretize0.setInvertSelection(true);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getAttributeIndices();
      discretize0.getOptions();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.0360667554551606
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[1];
      Filter.runFilter(multiFilter0, stringArray0);
      Filter.runFilter((Filter) null, (String[]) null);
      AllFilter allFilter0 = new AllFilter();
      Filter.runFilter(multiFilter0, stringArray0);
      Filter.makeCopy(multiFilter0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("5L&_<)znN2#", 125);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      Instances instances0 = new Instances("string", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      int int0 = discretize0.getBins();
      assertEquals(10, int0);
      
      discretize0.setInvertSelection(true);
      Locale.getISOLanguages();
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[1] = 0;
      intArray0[2] = 125;
      discretize0.calculateCutPoints();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[2][1];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Rs1/\"l+zxF\"@glrH[");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qw$l@kDj}zUK}AUeKO");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = Locale.getISOCountries();
      AllFilter allFilter0 = new AllFilter();
      Filter.makeCopy(allFilter0);
      Filter.runFilter(allFilter0, stringArray0);
      Discretize discretize0 = new Discretize("");
      discretize0.getAttributeIndices();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3(");
      Discretize discretize1 = new Discretize("indices have to be ordered");
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.makeCopy(multiFilter0);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      binarySparseInstance0.toString();
      discretize0.m_UseBinNumbers = true;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      binarySparseInstance0.toStringNoWeight();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      discretize0.getOptions();
      System.setCurrentTimeMillis(2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize("l*{e5SNh");
      discretize0.m_ClassIndex = (-1522);
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setUseEqualFrequency(true);
      double[][] doubleArray0 = new double[5][9];
      discretize0.getBinRangesString(105);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-1522);
      doubleArray1[1] = (double) (-1522);
      doubleArray1[2] = (double) (-1522);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) (-1522);
      doubleArray2[1] = (double) (-1522);
      doubleArray0[0] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) (-1522);
      doubleArray3[1] = (double) (-1522);
      doubleArray3[2] = (double) (-1522);
      doubleArray3[1] = (double) (-1522);
      doubleArray3[4] = (double) (-1522);
      doubleArray3[5] = (double) (-1522);
      discretize0.setUseEqualFrequency(true);
      doubleArray3[6] = (double) (-1522);
      doubleArray3[7] = (double) (-1522);
      doubleArray3[8] = (double) (-1522);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) (-1522);
      discretize0.listOptions();
      discretize0.findNumBinsTipText();
      discretize0.setInvertSelection(true);
      discretize0.getBinRangesString((-1073741822));
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = (MultiFilter)Filter.makeCopy(multiFilter0);
      String[] stringArray0 = new String[1];
      Filter.runFilter(multiFilter1, stringArray0);
      MultiFilter multiFilter2 = (MultiFilter)Filter.makeCopy(multiFilter1);
      Filter.makeCopy(multiFilter2);
      AllFilter allFilter0 = new AllFilter();
      Filter.runFilter(allFilter0, stringArray0);
      multiFilter1.getFilters();
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 80;
      Discretize discretize0 = new Discretize();
      String string0 = "KLuA_";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.toString();
      Instances instances0 = new Instances("KLuA_", arrayList0, 80);
      instances0.setRelationName("KLuA_");
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0315492106201987
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      AllFilter allFilter0 = new AllFilter();
      Filter.runFilter(allFilter0, (String[]) null);
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getFilters();
      MultiFilter multiFilter1 = new MultiFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("5L&_<)znN2#", 125);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2);
      Instances instances0 = new Instances("A", arrayList0, 1);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Locale.getISOLanguages();
      boolean boolean0 = discretize0.m_UseEqualFrequency;
      Object object0 = new Object();
      Object object1 = new Object();
      instances0.remove((Object) multiFilter1);
      boolean boolean1 = discretize0.m_IgnoreClass;
      discretize0.setFindNumBins(true);
      boolean boolean2 = discretize0.m_MakeBinary;
      discretize0.getBins();
      discretize0.getOptions();
      discretize0.setInputFormat(instances0);
      Discretize discretize1 = new Discretize("@attribute");
      // Undeclared exception!
      try { 
        discretize1.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.056660354259899
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("5L&_<)znN2#", 125);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2819);
      Instances instances0 = new Instances("string", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.getBins();
      Locale.getISOLanguages();
      discretize0.batchFinished();
      Object object0 = new Object();
      Object object1 = new Object();
      instances0.remove(object1);
      discretize0.setFindNumBins(true);
      discretize0.setInputFormat(instances0);
      attribute0.toString();
      discretize0.m_MakeBinary = true;
      Locale.getISOLanguages();
      discretize0.batchFinished();
      discretize0.calculateCutPoints();
      boolean boolean0 = discretize0.m_MakeBinary;
      discretize0.setFindNumBins(false);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = " requires the following packages:\n";
      Filter.runFilter(filter0, stringArray0);
      AllFilter allFilter0 = new AllFilter();
      Filter.runFilter(allFilter0, stringArray0);
      Discretize discretize0 = new Discretize("");
      Filter.makeCopy(multiFilter0);
      String[] stringArray1 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals(4, stringArray1.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.798534689126567
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize("l*{e5SNh");
      discretize0.setUseEqualFrequency(true);
      discretize0.setOutputFormat();
      discretize0.getOptions();
      discretize0.getBinRangesString(0);
      int int0 = (-140);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2544);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance1.dataset();
      BinarySparseInstance binarySparseInstance3 = null;
      try {
        binarySparseInstance3 = new BinarySparseInstance((-140));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.9835246240036266
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      String[] stringArray0 = new String[1];
      Filter.runFilter(multiFilter0, stringArray0);
      Filter.runFilter(filter0, stringArray0);
      Filter.runFilter(multiFilter0, stringArray0);
      Filter.runFilter(filter0, stringArray0);
      AllFilter allFilter0 = new AllFilter();
      Filter.runFilter(filter0, stringArray0);
      Filter.makeCopies(filter0, 2867);
      Filter.makeCopy(multiFilter0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("Nq2v2uT", 125);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2867);
      Instances instances0 = new Instances("string", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      Locale.getISOLanguages();
      boolean boolean0 = discretize0.m_IgnoreClass;
      discretize0.m_UseEqualFrequency = true;
      DenseInstance denseInstance0 = new DenseInstance((-0.0017331022530329288), (double[]) null);
      Locale.getISOLanguages();
      discretize0.batchFinished();
      discretize0.calculateCutPoints();
      discretize0.setOutputFormat();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8235438958599737
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize("l*{e5SNh");
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (-1);
      doubleArray0[0] = doubleArray0[0];
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) (-1);
      doubleArray3[2] = (double) (-1);
      doubleArray3[4] = (double) (-1);
      doubleArray3[5] = (double) (-1);
      doubleArray3[6] = (double) (-1);
      doubleArray3[7] = (double) (-1);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) (-1);
      doubleArray4[2] = (double) (-1);
      doubleArray3[8] = (double) (-1);
      doubleArray4[4] = (double) (-1);
      doubleArray3[7] = (double) (-1);
      doubleArray4[7] = (double) (-1);
      discretize0.m_CutPoints = doubleArray0;
      discretize0.findNumBinsTipText();
      discretize0.getBinRangesString(1);
      Discretize discretize1 = new Discretize("-O");
      // Undeclared exception!
      try { 
        discretize1.calculateCutPointsByEqualWidthBinning((-1717986916));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.156778601039888
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("5L&_<)znN2#", 125);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2819);
      Instances instances0 = new Instances("string", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.getBins();
      Locale.getISOLanguages();
      discretize0.batchFinished();
      Object object0 = new Object();
      Object object1 = new Object();
      instances0.remove(object1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.setFindNumBins(true);
      discretize0.setInputFormat(instances0);
      discretize0.m_MakeBinary = true;
      Locale.getISOLanguages();
      discretize0.batchFinished();
      discretize0.calculateCutPoints();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2819;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 3;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "relational");
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2819;
      doubleArray0[5] = (double) 2;
      attribute0.toString();
      doubleArray0[6] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      discretize0.convertInstance(sparseInstance0);
      discretize0.binsTipText();
      discretize0.getCapabilities();
      assertEquals(2819, discretize0.getBins());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.024193424964256
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("5L&_<)znN2#", 125);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2848);
      Instances instances0 = new Instances("string", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      Filter.wekaStaticWrapper(allFilter0, "@relation", instances0, instances0);
      int int0 = discretize0.m_ClassIndex;
      Locale.getISOLanguages();
      Object object0 = new Object();
      Object object1 = new Object();
      instances0.remove(object1);
      Properties properties0 = new Properties();
      instances0.stream();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute1 = new Attribute("string", instances0, protectedProperties0);
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      arrayList0.addAll((Collection<? extends Attribute>) linkedList0);
      attribute1.setWeight(1);
      attribute0.addStringValue(attribute1, (-2303));
      discretize0.setInputFormat(instances0);
      discretize0.m_MakeBinary = true;
      Locale.getISOLanguages();
      discretize0.batchFinished();
      discretize0.calculateCutPoints();
      discretize0.calculateCutPoints();
      System.setCurrentTimeMillis((-1L));
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SystemInUtil.addInputLine("3#9g3agp0Vt4fY5xc+");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "first-last");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String string0 = "GP?E";
      Discretize discretize0 = new Discretize("b ^~");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "b ^~";
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1360570143460755
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling7 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling8 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling9 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling10 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling11 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling12 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling13 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling14 = new FileSystemHandling();
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.makeCopies(multiFilter0, 2793);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ZE''%u@+)[CR";
      stringArray0[1] = "8IX LUsD5Mpz";
      stringArray0[2] = "8IX LUsD5Mpz";
      stringArray0[3] = "Some packages no longer exist at the repository. Refreshing cache...";
      stringArray0[4] = "ZE''%u@+)[CR";
      stringArray0[5] = "8IX LUsD5Mpz";
      stringArray0[6] = "ZE''%u@+)[CR";
      stringArray0[7] = "8IX LUsD5Mpz";
      stringArray0[8] = "8IX LUsD5Mpz";
      Discretize discretize0 = new Discretize("Y\"=Yt");
      String[] stringArray1 = discretize0.getOptions();
      discretize0.setOptions(stringArray1);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(6, stringArray1.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.4461755171495705
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "foV)");
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "foV)");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5 * log(5): ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YOYj0");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lln3:fcKkTH");
      FileSystemHandling fileSystemHandling7 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling8 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling9 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("5 * log(5): ");
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      discretize0.getOptions();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      int[] intArray0 = new int[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[1] = 0;
      discretize0.setFindNumBins(true);
      discretize0.getFindNumBins();
      discretize0.binsTipText();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SystemInUtil.addInputLine("J&;*lQ'F)6");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2808);
      Discretize discretize0 = new Discretize("@data");
      String string0 = discretize0.attributeIndicesTipText();
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Rs1/\"l+zxF\"@glrH[");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qw$l@kDj}zUK}AUeKO");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.551643266517218
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = new Discretize("b ^~");
      discretize0.setAttributeIndices("b ^~");
      discretize0.m_IgnoreClass = true;
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(7, stringArray0.length);
      
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, (-3332));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      String string0 = discretize0.invertSelectionTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SystemInUtil.addInputLine("e8f@-(g* q8U(e");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling7 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling8 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling9 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling10 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling11 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling12 = new FileSystemHandling();
      SystemInUtil.addInputLine("&M<qa9%3>|j");
      DenseInstance denseInstance0 = new DenseInstance((-1051.275), (double[]) null);
      Discretize discretize0 = new Discretize("5 * log(5):");
      String string0 = discretize0.globalInfo();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize("''7>adYE#qsCX4");
      // Undeclared exception!
      try { 
        discretize0.findNumBins(184);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Discretize discretize0 = new Discretize("*W5D<hSCW|8@I");
      int[] intArray0 = new int[9];
      intArray0[0] = (-1405);
      intArray0[1] = (-2938);
      intArray0[2] = (-1954);
      intArray0[3] = 9;
      intArray0[4] = 66;
      intArray0[5] = 573;
      intArray0[6] = 0;
      intArray0[7] = (-71);
      intArray0[8] = 99;
      discretize0.setAttributeIndicesArray(intArray0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(18);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 5.3;
      int[] intArray0 = new int[6];
      doubleArray0[0] = (double) 2;
      intArray0[1] = 2;
      intArray0[1] = 59;
      intArray0[3] = 18;
      doubleArray0[0] = (double) 59;
      intArray0[5] = 18;
      SparseInstance sparseInstance0 = new SparseInstance(59, doubleArray0, intArray0, 2);
      sparseInstance0.dataset();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(2);
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(2);
      int int0 = (-1731);
      // Undeclared exception!
      try { 
        sparseInstance0.insertAttributeAt(8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't insert attribute: index out of range
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[18];
      stringArray0[0] = "]4ZpO)]f|m\"}aGt7}";
      stringArray0[1] = "i~A!6f9]XO:";
      stringArray0[2] = "QlM{Eo%4[";
      stringArray0[3] = "<7=r_q39mc0zxs PS%";
      stringArray0[4] = "first-last";
      discretize0.setFindNumBins(false);
      stringArray0[5] = "(";
      Filter.runFilter(multiFilter0, stringArray0);
      Filter.runFilter(multiFilter0, (String[]) null);
      AllFilter allFilter0 = new AllFilter();
      Filter.runFilter(discretize0, (String[]) null);
      MultiFilter multiFilter1 = new MultiFilter();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2819);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(18);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 5.3;
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 80;
      intArray0[3] = (-164);
      intArray0[4] = 80;
      intArray0[5] = (-164);
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray0, intArray0, 2);
      sparseInstance0.dataset();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance2);
      Discretize discretize0 = new Discretize("-MQ<num>");
      discretize0.getCutPoints(2);
      // Undeclared exception!
      try { 
        binarySparseInstance1.toStringNoWeight((-1731));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 18;
      intArray0[3] = (-164);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(80);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(18);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance2.toString(374, 18);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(0.0, intArray0, 2340);
      Discretize discretize0 = new Discretize("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance6);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 25;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(25);
      binarySparseInstance0.dataset();
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.908238329122374
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling7 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling8 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling9 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling10 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling11 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      Filter.runFilter(discretize0, (String[]) null);
      discretize0.getCapabilities();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("HM <num!");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1457.0378360784296);
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 10.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10.0, doubleArray0);
      Discretize discretize1 = new Discretize();
      BinarySparseInstance binarySparseInstance1 = null;
      try {
        binarySparseInstance1 = new BinarySparseInstance((-1968526675));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("first-last");
      Discretize discretize1 = new Discretize();
      discretize1.setDesiredWeightOfInstancesPerInterval((byte) (-126));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-126);
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = 4.6;
      doubleArray0[3] = (double) (byte) (-126);
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = (double) (byte)1;
      doubleArray0[6] = (double) (byte)1;
      doubleArray0[7] = 4.6;
      doubleArray0[8] = (double) (byte)1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4.6, doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.attributeSparse(1129);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 2;
      Discretize discretize0 = new Discretize("No upper limit has been specified for range");
      discretize0.getInvertSelection();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-985));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Discretize discretize0 = new Discretize("FCdpJ");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(80);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance1.dataset();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(18);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(991, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance4);
      int[] intArray0 = new int[7];
      intArray0[0] = 1182;
      intArray0[1] = (-164);
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 80;
      intArray0[6] = (-164);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(0.0, intArray0, (-1717986916));
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getUseBinNumbers();
      int[] intArray0 = new int[6];
      SystemInUtil.addInputLine("]x3CboLg2c05x#`mLm");
      intArray0[0] = 802;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2508);
      intArray0[4] = 0;
      intArray0[5] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(680.58, intArray0, (-3332));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      discretize0.setUseBinNumbers(false);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 18;
      intArray0[3] = 18;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(80);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(18);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance2.toString(374, 18);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(0.0, intArray0, 2340);
      Discretize discretize0 = new Discretize("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 18;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 18;
      doubleArray2[1] = (double) 18;
      doubleArray2[2] = (double) 2;
      doubleArray2[3] = (double) 18;
      doubleArray2[4] = (double) 18;
      doubleArray2[5] = (double) 2;
      doubleArray2[6] = (double) 2;
      doubleArray0[1] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(86);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 86
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getRevision();
      int[] intArray0 = new int[18];
      intArray0[0] = 3084;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), intArray0, 3084);
      AbstractInstance.s_numericAfterDecimalPoint = 2;
      SystemInUtil.addInputLine("&M<qa9kos%>|j");
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      // Undeclared exception!
      try { 
        binarySparseInstance1.relationalValue(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Discretize discretize0 = new Discretize("first-last");
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Discretize discretize0 = new Discretize("-M <num>");
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "first-last");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)54;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "first-last";
      stringArray0[1] = "first-last";
      stringArray0[2] = ");";
      stringArray0[3] = "first-last";
      stringArray0[6] = "first-last";
      stringArray0[7] = "first-last";
      Discretize.main(stringArray0);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k:fop{L(<r>6l5");
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pH%$5Jq})X^f3");
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      AllFilter allFilter0 = new AllFilter();
      Filter.makeCopy(allFilter0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "k:fop{L(<r>6l5";
      stringArray0[1] = "k:fop{L(<r>6l5";
      stringArray0[2] = "k:fop{L(<r>6l5";
      stringArray0[3] = "pH%$5Jq})X^f3";
      stringArray0[4] = "k:fop{L(<r>6l5";
      stringArray0[5] = "k:fop{L(<r>6l5";
      Filter.runFilter(allFilter0, stringArray0);
      Discretize discretize0 = new Discretize("k:fop{L(<r>6l5");
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      DenseInstance denseInstance0 = new DenseInstance(2);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      AbstractInstance.s_numericAfterDecimalPoint = 2;
      int int0 = (-2013265917);
      // Undeclared exception!
      try { 
        denseInstance0.stringValue((-2013265917));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      double[] doubleArray0 = new double[3];
      DenseInstance denseInstance0 = new DenseInstance(79);
      // Undeclared exception!
      try { 
        denseInstance0.stringValue((-2013265917));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "'AllX'";
      stringArray0[1] = "}tr9lbtCGI;Y24v,";
      stringArray0[2] = "*Uvq`^QTU/]0";
      discretize0.setOptions(stringArray0);
      DenseInstance denseInstance0 = new DenseInstance(2);
      AbstractInstance.s_numericAfterDecimalPoint = 2;
      int int0 = (-2013265917);
      // Undeclared exception!
      try { 
        denseInstance0.stringValue((-2013265917));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(18);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance3.dataset();
      Discretize discretize0 = new Discretize("@data");
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Discretize discretize0 = new Discretize("J];LJ-T-#QOnF#I");
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = 11;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(11);
      binarySparseInstance0.dataset();
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int int0 = 2;
      int int1 = (-985);
      Discretize discretize0 = new Discretize("YObx0~GS1Hkmzxr");
      discretize0.makeBinaryTipText();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-985));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Discretize discretize0 = new Discretize(" XFO|Z9w+YkXhRD:8?<");
      // Undeclared exception!
      try { 
        discretize0.findNumBins(184);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
