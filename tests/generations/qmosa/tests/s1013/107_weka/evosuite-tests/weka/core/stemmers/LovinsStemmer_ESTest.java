/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 02:01:28 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5916894689270413
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("CsRo:war,|G|0f-");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.stemString("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stem("lud");
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("D\"a-V");
      String string2 = lovinsStemmer2.stemString("KPJ,YAQfppA!`: G+");
      assertEquals("kpj,yaqfp!`: g+", string2);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string3 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6680323371723211
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "incollection";
      stringArray0[1] = "inity";
      stringArray0[2] = "lux";
      stringArray0[3] = "lisyt";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString("[N3i/2@z#");
      assertEquals("[n3/2@z#", string0);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stem(")|1\nlf/\"_ }cppa");
      assertEquals(")|1\nlf/\"_ }cp", string2);
      
      String string3 = lovinsStemmer2.stemString("lux");
      assertEquals("luc", string3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5709573452466596
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "68rLm)";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.64309817291399
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString(".|X");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("A chapter (or section or whatever) number.");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.stemString("");
      lovinsStemmer1.stemString("editix");
      lovinsStemmer1.stem("editic");
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("a chapter (or section or whatever) number.");
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6553104038225976
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[4];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("arial");
      lovinsStemmer0.stemString("Z4cp");
      lovinsStemmer0.stem("No input file defined!");
      lovinsStemmer0.stem("no input file defined!");
      lovinsStemmer0.stemString("%4ZrBfo[kXH");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("#>-Q_REUl=Cy|L");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("iev");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6134826823121446
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("pand");
      assertEquals("pans", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      assertEquals("invalis cv revis - not enough part separ by dot!", string1);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("invalid CVS revision - not enough parts separated by dots!");
      lovinsStemmer1.stemString("invalis cv revis - not enough part separ by dot!");
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6238958032879403
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("PN6{+*9\"e8:l8y\"q");
      lovinsStemmer0.stemString(".|X");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem(".|X");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("A chapter (or section or whatever) number.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stem("");
      lovinsStemmer0.stemString("oxgqf ,");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.stemString("");
      lovinsStemmer1.stemString("editix");
      lovinsStemmer1.stem("editic");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("A bok with an explicit publisher.");
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stem("optbex");
      assertEquals("optbic", string2);
      
      String string3 = lovinsStemmer0.stemString("a chapter (or section or whatever) number.");
      assertEquals("a chapter (or sect or whatever) number.", string3);
      
      String string4 = lovinsStemmer0.stem("A bok with an explicit publisher.");
      assertEquals("a bok with an explicit publisher.", string4);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5779368595788212
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("<TBJgVPdmm^T5}YS#k");
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      lovinsStemmer0.stemString("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("early");
      lovinsStemmer1.toString();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9659310118274413
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-h";
      stringArray0[1] = ":;gKxTluW,Vi[A?E";
      stringArray0[2] = "L";
      stringArray0[3] = "0h79k~";
      stringArray0[4] = "8wi-";
      stringArray0[5] = " .,;:!?'\"";
      String string0 = lovinsStemmer0.stemString("8C|TL\"Y3{eW:>_,>");
      assertEquals("8c|tl\"y3{ew:>_,>", string0);
      
      stringArray0[6] = "fNjn'}&*WW5Mj@I";
      stringArray0[7] = "hood";
      stringArray0[8] = ":";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6487579087747943
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string0 = lovinsStemmer0.stemString("<TBJgVPdmm^T5}YS#k");
      assertEquals("<tbjgvpdm^t5}ys#k", string0);
      
      String string1 = lovinsStemmer0.stem("aton");
      assertEquals("at", string1);
      
      String string2 = lovinsStemmer0.stemString("<tbjgvpdm^t5}ys#k");
      assertEquals("<tbjgvpdm^t5}ys#k", string2);
      
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmer");
      lovinsStemmer0.stem("?Z9sLI0iyB+FJ7");
      lovinsStemmer0.stem("kb&{A9eRyb*e,>ogOW*");
      lovinsStemmer0.stem("?Z9sLI0iyB+FJ7");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "yz";
      stringArray0[1] = "weka.core.stemmers.lovinsstemmer";
      stringArray0[2] = "weka.core.stemmers.lovinsstemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6175220985282466
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Sorted array (ints): ");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer3.stemString("sort arra (int): ");
      assertEquals("sort ar (int): ", string1);
      
      String string2 = lovinsStemmer3.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6299249380985263
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("<TBJgVPdmm^T5}YS#k");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("ation");
      lovinsStemmer0.stemString("cis");
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmer");
      lovinsStemmer0.stem("bex");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("<TBJgVPdmm^T5}YS#k");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("bic");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "<tbjgvpdm^t5}ys#k";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "<TBJgVPdmm^T5}YS#k";
      lovinsStemmer1.stem("lud");
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("cis");
      lovinsStemmer1.stemString(")RFVQRx[^R");
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7731053073264782
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("]!JQ");
      lovinsStemmer0.stemString("]!jq");
      lovinsStemmer0.stem("]!jq");
      lovinsStemmer0.stem("]!jq");
      lovinsStemmer0.stem("]!JQ");
      lovinsStemmer0.stemString("]!jq");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("&oo\"snn&nm&fsi2-yz");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("Hy,E2!u");
      lovinsStemmer0.stem("bex");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5956676539702825
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("booklet");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      lovinsStemmer0.stemString("#,");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("%`3g}n:#,cid");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stem("%`3g}n:#,cis");
      lovinsStemmer0.stem("TWbUkrZcus");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.627021559827808
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("%`3G}N:#,");
      lovinsStemmer0.stem("%`3g}n:#,");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("year");
      lovinsStemmer0.stemString("The volume of a journal or multi-volume book.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("%`3g}n:#,");
      lovinsStemmer2.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.stemString("icide");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer3.stemString("<D$y`&");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer1.stemString("metr");
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "%`3G}N:#,";
      stringArray0[1] = "%`3g}n:#,";
      stringArray0[2] = "th volum of a journ or mult-volum book.";
      stringArray0[3] = "year";
      stringArray0[4] = "icide";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[1] = "%`3G}N:#,";
      stringArray1[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6219113838299923
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("CsRo:war,|G|0f-");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("olv");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.stemString("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4180675724872436
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stem(";B_I95}7?<7:CadkkBb");
      lovinsStemmer0.stem("organization");
      lovinsStemmer0.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6374562195160767
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string0 = lovinsStemmer0.stemString("6~9X1xe9");
      assertEquals("6~9x1xe9", string0);
      
      lovinsStemmer0.stem("nmAp^v[={}e.z:-");
      lovinsStemmer0.stem("&1W$TDQ5@t");
      lovinsStemmer0.stem("\\");
      String string1 = lovinsStemmer0.stem("otide");
      assertEquals("ot", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main((String[]) null);
      String string3 = lovinsStemmer0.stemString("bex");
      assertEquals("bic", string3);
      
      lovinsStemmer0.stem("e5h");
      String string4 = lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmer");
      assertEquals("weka.core.stemmers.lovinsstemmer", string4);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6379414984501997
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      lovinsStemmer0.toString();
      String string0 = "eM6\\ue@A&[Y!";
      stringArray0[1] = string0;
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("How something strange hs een published. The first wordshould be capitalized.");
      assertEquals("how someth strang hs een publ. th first wordshould be capital.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stem("4E=Ab%3gYb<@Js");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stem(stringArray0[1]);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer2.toString();
      String string3 = lovinsStemmer1.stemString("rpt");
      assertEquals("rb", string3);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.586075700670905
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("th www univers resourc loc that point to th item being refer. th oft is us for techn report to point to th ftp sit whes th postscript sourc of th report is loc.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6515008762415415
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("a stemmerNbased on the lovins stemmer, describedphere:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computation%l linguistics. 11:22-31.rud");
      assertEquals("a stemmernbas on th lovin stemmer, describedpher:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput%l lingu. 11:22-31.rus", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      String string1 = lovinsStemmer1.stemString("wek.cor.stemmer.lovinsstemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getRevision();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6847759357319698
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("VT");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("VT");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("ex");
      lovinsStemmer1.stemString("-82=:`!42-ggI\"aE");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.globalInfo();
      TechnicalInformation technicalInformation1 = lovinsStemmer4.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5164816038469127
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[8] = "VT";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer1.stem("null");
      assertEquals("nl", string1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6347113465001861
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string0 = lovinsStemmer0.stemString("<TBJgVPdmm^T5}YS#k");
      assertEquals("<tbjgvpdm^t5}ys#k", string0);
      
      lovinsStemmer0.stem("a=on");
      lovinsStemmer0.stemString("<tbjgvpdm^t5}ys#k");
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmer");
      lovinsStemmer0.stem("?Z9sLI0iyB+FJ7");
      lovinsStemmer0.stem("K,*");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.stemString("<tbjgvpdm^t5}ys#k");
      String string2 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string3 = lovinsStemmer0.stem("vad");
      assertEquals("vas", string3);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.595561420008874
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmer");
      lovinsStemmer0.stem("aton");
      lovinsStemmer0.stemString("wek.cor.stemmer.lovinsstemmer");
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmer");
      lovinsStemmer0.stem("?Z9sLI0iyB+FJ7");
      lovinsStemmer0.stem("K,*");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.stemString("wek.cor.stemmer.lovinsstemmer");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmer");
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmerend");
      assertEquals("wek.cor.stemmer.lovinsstemmerens", string1);
      
      lovinsStemmer0.stem("wek.cor.stemmer.lovinsstemmer");
      String string2 = lovinsStemmer0.stem("cPC@'J~&2hy$G");
      assertEquals("cpc@'j~&2hy$g", string2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6498067782781884
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("68rLm)");
      lovinsStemmer0.stemString("68rLm)");
      lovinsStemmer0.stem("68rLm)");
      String string0 = lovinsStemmer0.stemString("location");
      assertEquals("loc", string0);
      
      lovinsStemmer0.stem("68rlm)");
      lovinsStemmer0.stem("ants");
      lovinsStemmer0.stem("ants");
      lovinsStemmer0.stemString("PROCEEDINGS");
      lovinsStemmer0.stem("loc");
      lovinsStemmer0.stemString("#.x&9S63kO2");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "68rlm)";
      stringArray0[1] = "68rlm)";
      stringArray0[2] = "68rLm)";
      stringArray0[3] = "ant";
      stringArray0[4] = "proceed";
      stringArray0[5] = "68rlm)";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("Array-Dimensions of 'new String[3][4][]': ");
      assertEquals("arra-dimens of 'new string[3][4][]': ", string1);
      
      String string2 = lovinsStemmer0.stemString("cid");
      assertEquals("cis", string2);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("arize");
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.stem("");
      String string4 = lovinsStemmer0.stemString("2*~H");
      assertEquals("2*~h", string4);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5737356613267277
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("68rLm)");
      lovinsStemmer0.stemString("68rLm)");
      lovinsStemmer0.stem("68rLm)");
      lovinsStemmer0.stemString("location");
      lovinsStemmer0.stem("68rlm)");
      lovinsStemmer0.stem("ants");
      lovinsStemmer0.stem("ants");
      lovinsStemmer0.stemString("PROCEEDINGS");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("68rLm)");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("ement");
      lovinsStemmer1.stemString("PROCEEDINGS");
      lovinsStemmer2.stem("MONTH");
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer3.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7790761018545416
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[8] = "VT";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.toString();
      lovinsStemmer2.globalInfo();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "VT";
      stringArray1[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[4] = "VT";
      stringArray1[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[6] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray1);
      String string0 = lovinsStemmer1.stemString("SA%eS");
      lovinsStemmer1.stemString("luxex");
      String string1 = lovinsStemmer3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4358880492723458
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "inity";
      stringArray0[2] = "1984mit";
      stringArray0[3] = "lisyt";
      stringArray0[4] = "%-T)Qiua";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("1984mit");
      assertEquals("1984mis", string1);
      
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stem("%-T)Qiua");
      assertEquals("%-t)qiu", string2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5771365003912563
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("end");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stemString("dex");
      assertEquals("dic", string2);
      
      lovinsStemmer1.globalInfo();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4702118046823571
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "inity";
      stringArray0[2] = "1984mit";
      stringArray0[3] = "lisyt";
      stringArray0[4] = "%-T)Qiua";
      stringArray0[5] = "weka.core.TechnicalInformation$Type";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("lisend");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6245019747320453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Any additional information that can help the reader. The first word should be capitalized.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("Z/lY");
      lovinsStemmer0.stemString("any addit inform that can help th reader. th first word should be capital.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5501640147824893
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("eous");
      lovinsStemmer0.stemString("eous");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5006032200040982
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("booklet");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      stringArray0[3] = "a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.";
      stringArray0[4] = "bookles";
      stringArray0[5] = "bookles";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer1.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6414947724237383
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("invalid CVS revision - not enough parts separated by dots!");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.stemString("Induction of decision trees");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getTechnicalInformation();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "invalid CVS revision - not enough parts separated by dots!";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "pand";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer4.toString();
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7853990048983475
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "urLlud";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("&K:VLdteb5pR`cuK");
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer2.stemString("tex");
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer2.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6731957246277742
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("0aaB7J\"y(");
      lovinsStemmer0.stem("bex");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("A book with an explicit publisher.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stem("0aaB7J\"y(");
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("5[TFov5nxgoMi$rCa3");
      lovinsStemmer0.stemString("=R)c?Pq#V}X'^48g");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string0 = lovinsStemmer4.stem("nwl\"6e0cid");
      assertEquals("nwl\"6e0cis", string0);
      
      LovinsStemmer.main((String[]) null);
      lovinsStemmer4.stem("0aab7j\"y(");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string1 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("nwl\"6e0cis");
      String string2 = lovinsStemmer5.stemString("The type of a technical report---for example, ``Research Note''.");
      assertEquals("th typ of a techn report---for exampl, ``research note''.", string2);
      
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.stemString("mastersthesis");
      String string3 = lovinsStemmer1.stem("ical");
      assertEquals("ical", string3);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.4906173606702149
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stem("68rlmher");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4395855324946543
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.erid");
      assertEquals("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.eris", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6447282626992974
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer1.stem("weka.core.stemmers.lovinsstemmerax");
      lovinsStemmer1.stemString("weka.core.stemmers.lovinsstemmer");
      lovinsStemmer1.stem("wek.cor.stemmer.lovinsstemmer");
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmerax");
      lovinsStemmer1.stem("end");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer1.toString();
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer1.stemString("cid");
      assertEquals("cis", string1);
      
      lovinsStemmer0.stemString("-h");
      String string2 = lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmerax");
      assertEquals("wek.cor.stemmer.lovinsstemmerac", string2);
      
      lovinsStemmer1.stem("weka.core.stemmers.lovinsstemmeruad");
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmeruad");
      lovinsStemmer0.stemString("ancial");
      lovinsStemmer0.stem("~b");
      String string3 = lovinsStemmer0.stem("R4LOMMzY8(");
      assertEquals("r4lommzy8(", string3);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6072981510575208
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      String string0 = "eM6\\ue@A&[Y!";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("<I");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString(string0);
      lovinsStemmer0.stem("[X");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("oxgqfpex");
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("e:Yd{m\"Eh] K");
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer1.stemString("encies");
      String string3 = lovinsStemmer1.stemString("0I3n.(<`(/s/}{mHw");
      assertEquals("0i3n.(<`(/s/}{mhw", string3);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5128149145849197
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string0 = lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("ishbex");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer3.toString();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      String string1 = lovinsStemmer4.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6204971947650533
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      lovinsStemmer0.stem("The organization that sponsors a conference or that publishes a manual.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("the organization that sponsors a conference or that publishes a manual.");
      lovinsStemmer0.stemString("+o>('3wAwnS`U");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("a part of a book, which may be a chapter (or section or whatever) and/or a range of pages.pand");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("th organ that sponsor a confer or that publish a manu.");
      lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      lovinsStemmer1.stem("$xr)@p>~FY/NXD;$:");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer2.getRevision();
      lovinsStemmer1.toString();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4405582652664501
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("EDITOR");
      assertEquals("edit", string0);
      
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stem("edit");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.688608594306703
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("XHUm>kF{[");
      assertEquals("xhum>kf{[", string0);
      
      lovinsStemmer0.stemString("xhum>kf{[");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("ert");
      assertEquals("ers", string2);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.655393871221362
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("FO@pvYjgBCk}");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("weka.core.stemmers.lovinsstemmerrud");
      lovinsStemmer0.stemString("-hd");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4241183994335929
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("Julie Beth Lovins");
      lovinsStemmer0.stem("Julie Beth Lovins");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("pex");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.toString();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer3.globalInfo();
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5882123584088907
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("CsRo:war,|G|0f-");
      assertEquals("csr:war,|g|0f-", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.stemString("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer2.stemString("ADDRESS");
      String string3 = lovinsStemmer2.stemString("vad");
      assertEquals("vas", string3);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6400438369521844
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stem("aruaduad");
      lovinsStemmer0.stemString("aruasyt");
      lovinsStemmer0.stem("aruaduad");
      lovinsStemmer0.stem("aruadex");
      lovinsStemmer0.stem("K,*");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("!:pF<m");
      lovinsStemmer0.stemString("edition");
      String string1 = lovinsStemmer0.stemString("aruadic");
      assertEquals("aruas", string1);
      
      lovinsStemmer0.stem("n)");
      lovinsStemmer0.stem("ISBN-13");
      String string2 = lovinsStemmer0.stemString("k,*");
      assertEquals("k,*", string2);
      
      String string3 = lovinsStemmer0.stem("aruasys");
      assertEquals("aruasy", string3);
      
      String string4 = lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      assertEquals("weka.core.stemmers.lovinsstemmer", string4);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6272698343200866
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      stringArray0[0] = "how someth strang ha been publ. th first word should be capital.";
      String string0 = "eM6\\ue@A&[Y!";
      stringArray0[1] = string0;
      lovinsStemmer0.stemString("Median (ints): ");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("$VALUES");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("ex");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("mastersthesix");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.toString();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.toString();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer1.toString();
      assertFalse(string2.equals((Object)string1));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6688587582344123
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("=gmJ&'uR");
      lovinsStemmer0.stemString(".|X");
      lovinsStemmer0.stemString("=gmJ&'uR");
      lovinsStemmer0.stem("&UK0j/lF'[V");
      String[] stringArray0 = new String[2];
      stringArray0[1] = "=gmJ&'uR";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string0);
      
      String string1 = lovinsStemmer0.stemString("cid");
      assertEquals("cis", string1);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("Array-Dimensions of 'new int[][]': ");
      assertEquals("arra-dimens of 'new int[][]': ", string2);
      
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("TITLE");
      lovinsStemmer0.stemString("D|CRWuV%FI`+");
      String string4 = lovinsStemmer0.stemString("probtologod: prob must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string4);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5801801020790507
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("lisyt");
      String string0 = lovinsStemmer0.stemString("5sI?(u2AEEfuU<wOj}");
      lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Array-Dimensions of 'new int[][]': ");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("cid");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6456860251872127
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[2];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Sorted array (ints): ");
      assertEquals("sort arra (int): ", string0);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stemString("lud");
      assertEquals("lus", string1);
      
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.globalInfo();
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      String string2 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7907546178350993
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[8] = "VT";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("VT");
      String string0 = lovinsStemmer0.stemString("cv'end");
      assertEquals("cv'ens", string0);
      
      String string1 = lovinsStemmer0.stemString("{");
      assertEquals("{", string1);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "cv'ert";
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6362079380685426
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("ating");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "ating";
      stringArray0[2] = "ances";
      stringArray0[3] = "ances";
      stringArray0[4] = "a part of a book, which may be a chapter (or section or whatever) and/or a range of pages.ond";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[7] = "ating";
      stringArray0[8] = "a part of a book, which may be a chapter (or section or whatever) and/or a range of pages.ond";
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string0 = lovinsStemmer3.stemString("a part of a book, which may be a chapter (or section or whatever) and/or a range of pages.ond");
      assertEquals("a part of a book, which may be a chapter (or sect or whatever) and/or a rang of pag.ons", string0);
      
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer4.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer4.globalInfo();
      lovinsStemmer5.toString();
      String string1 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6605779688174873
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Get position oW flag -f: ");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("pans");
      lovinsStemmer0.stemString("pans");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.4361737898371776
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("6~9X1xe9");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "t~3m^Hik(L|";
      LovinsStemmer.main(stringArray0);
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.533749818574346
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stem("lux");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String string0 = lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "luc";
      stringArray0[4] = "EDITOR";
      stringArray0[5] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer7.toString();
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer9 = new LovinsStemmer();
      String string1 = lovinsStemmer3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.6099351249864864
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer1.stemString("ional");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.stemString("FA{Io2z|}?1Lx:");
      lovinsStemmer1.stemString(";-");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer3.globalInfo();
      TechnicalInformation technicalInformation1 = lovinsStemmer2.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.2195343156722709
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("author");
      assertEquals("author", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5753245151229178
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("1h.=J^'KNlD|aa");
      assertEquals("1h.=j^'knld|aa", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.235014306489817
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("$revision: 8080 $yz");
      assertEquals("$revision: 8080 $ys", string0);
  }
}
