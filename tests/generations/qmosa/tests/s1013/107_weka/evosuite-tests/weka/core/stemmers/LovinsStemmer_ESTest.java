/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 03:04:12 GMT 2020
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1084859899712578
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      String string0 = lovinsStemmer0.stemString("w something strange hasbeen published. The first word should be capitalized.");
      assertEquals("w someth strang hasbeen publ. th first word should be capital.", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer3.stemString("w someth strang hasbeen publ. th first word should be capital.");
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer4.stem("w something strange hasbeen published. The first word should be capitalized.");
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.058707384441504
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer3.stem("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertTrue(string1.equals((Object)string0));
      
      lovinsStemmer3.toString();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer1.stemString("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer3.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string3 = lovinsStemmer4.stemString("lid");
      assertEquals("lis", string3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3478029709893307
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-h";
      stringArray0[1] = "ious";
      stringArray0[2] = "PS";
      stringArray0[3] = "ious";
      stringArray0[4] = "9=K.ToQ";
      stringArray0[5] = "-GsFoW.#)L)Ej";
      stringArray0[6] = "rud";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("$oaFOC^GX5T3;HI`pE");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("PS");
      lovinsStemmer0.toString();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[1] = "-h";
      stringArray1[2] = "kNBlh;</iwr*Cph7E";
      stringArray1[3] = "#04/&JbywI4";
      stringArray1[4] = "PS";
      stringArray1[5] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[6] = "$oaFOC^GX5T3;HI`pE";
      LovinsStemmer.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1494151271363733
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("<TBJgVPdmm^T5}YS#k");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("aton");
      lovinsStemmer0.stem("at");
      lovinsStemmer0.stem(".oJMR[`&vw5");
      lovinsStemmer0.stem("ants");
      lovinsStemmer0.stemString("lux");
      lovinsStemmer0.stemString("RAMXR8zU;5F:K(");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("DW+W");
      lovinsStemmer0.stemString("HTTP");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("ss");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("VPfM:");
      lovinsStemmer1.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.2092254706455021
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Sorted array (ints): ");
      assertEquals("sort arra (int): ", string0);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("C=g47");
      assertEquals("c=g47", string1);
      
      String string2 = lovinsStemmer0.stemString("sort arra (int): ");
      assertEquals("sort ar (int): ", string2);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String string4 = lovinsStemmer2.getRevision();
      assertEquals("8034", string4);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1877148190117006
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("PHUm>kF{[");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[0] = "Pyjp8zg";
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1314373752685094
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("<TBJgVPdmm^T5}YS#k");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("ation");
      lovinsStemmer0.stemString("cis");
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmer");
      lovinsStemmer0.stem("bex");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("<TBJgVPdmm^T5}YS#k");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("bic");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "<tbjgvpdm^t5}ys#k";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "<TBJgVPdmm^T5}YS#k";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("cis");
      lovinsStemmer1.stemString("icalize");
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2040515278924688
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.stem("pand");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("pans");
      assertEquals("pan", string0);
      
      lovinsStemmer1.stem("pan");
      lovinsStemmer0.stemString("RiU,");
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("pan");
      String string2 = lovinsStemmer1.stemString("&OO\"snn&nM&fSI2-");
      assertEquals("&oo\"sn&nm&fsi2-", string2);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer0.stem("4r;kOt\"");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer3.toString();
      lovinsStemmer1.getRevision();
      String string3 = lovinsStemmer1.stem("&OO\"snn&nM&fSI2-");
      assertEquals("&oo\"snn&nm&fsi2-", string3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0973398947729582
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("booklet");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      lovinsStemmer0.stemString("#,");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("%`3g}n:#,cid");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stem("%`3g}n:#,cis");
      lovinsStemmer0.stem("TWbUkrZcus");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0445146598156645
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "incollection";
      stringArray0[1] = "inity";
      stringArray0[2] = "lux";
      stringArray0[3] = "lisyt";
      stringArray0[4] = "%-T)Qiua";
      stringArray0[5] = "weka.core.TechnicalInformation$Type";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("lisend");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1306711948643042
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("%`3G}N:#,");
      lovinsStemmer0.stem("%`3g}n:#,");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("year");
      lovinsStemmer0.stemString("The volume of a journal or multi-volume book.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("%`3g}n:#,");
      lovinsStemmer2.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.stemString("icide");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer3.stemString("<D$y`&");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer1.stemString("metr");
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "%`3G}N:#,";
      stringArray0[1] = "%`3g}n:#,";
      stringArray0[2] = "th volum of a journ or mult-volum book.";
      stringArray0[3] = "year";
      stringArray0[4] = "icide";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[1] = "%`3G}N:#,";
      stringArray1[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1987261782111347
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("CsRo:war,|G|0f-");
      assertEquals("csr:war,|g|0f-", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer3.stem("]Ec");
      String string1 = lovinsStemmer3.stem("less");
      assertEquals("les", string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "les";
      stringArray0[1] = "les";
      stringArray0[2] = "]ec";
      stringArray0[3] = "]ec";
      stringArray0[4] = "]ec";
      stringArray0[5] = "*@l#Yvm0iADfHa/Zc!";
      stringArray0[6] = "keyex";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer3.stemString("ex");
      assertEquals("ex", string2);
      
      lovinsStemmer1.getTechnicalInformation();
      String string3 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer3.stemString("olv");
      assertEquals("olut", string4);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.193947530406638
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("]!JQ");
      lovinsStemmer0.stemString("]!jq");
      lovinsStemmer0.stem("]!jq");
      lovinsStemmer0.stem("]!jq");
      lovinsStemmer0.stem("]!JQ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("!zbby{\"[CxUB");
      lovinsStemmer1.stemString("]!jq");
      lovinsStemmer0.stemString("8u.ond");
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("Hy,E2!u");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("]!jq");
      lovinsStemmer1.stem("bex");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.globalInfo();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!zbby{\"[CxUB";
      LovinsStemmer.main(stringArray0);
      // Undeclared exception!
      try { 
        lovinsStemmer2.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1412540391692838
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("%`3G}N:#,");
      lovinsStemmer0.stem("%`3G}N:#,");
      lovinsStemmer0.stem("%`3g}n:#,");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("%`3g}n:#,");
      lovinsStemmer0.stemString("The volume oj a journal'or multi-volume book.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("%`3g}n:#,");
      lovinsStemmer2.toString();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.stemString("icide");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer3.stemString("<D$y`&");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer2.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1421431791224685
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      lovinsStemmer0.toString();
      String string0 = "eM6\\ue@A&[Y!";
      stringArray0[1] = string0;
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("How something strange hs een published. The first wordshould be capitalized.");
      assertEquals("how someth strang hs een publ. th first wordshould be capital.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stem("4E=Ab%3gYb<@Js");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stem(stringArray0[1]);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer2.toString();
      String string3 = lovinsStemmer1.stemString("rpt");
      assertEquals("rb", string3);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1532552622064538
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("a stemmerNbased on the lovins stemmer, describedphere:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computation%l linguistics. 11:22-31.rud");
      assertEquals("a stemmernbas on th lovin stemmer, describedpher:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput%l lingu. 11:22-31.rus", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      String string1 = lovinsStemmer1.stemString("wek.cor.stemmer.lovinsstemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getRevision();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1607702153073836
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("Julie Beth Lovins");
      lovinsStemmer0.stemString("Cja`w-bV");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "julie beth lovin";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stemString("H3GG$))b#E_P5ZeFm6");
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("ond");
      lovinsStemmer1.stemString(" and ");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1022509565633845
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("a part of a book, which may be a chapter (or section or whatever) and/or a range of pages.ond");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("a part of a book, which may be a chapter (or section or whatever) and/or a range of pages.pand");
      lovinsStemmer0.stemString("a part of a book, which may be a chapter (or sect or whatever) and/or a rang of pag.pans");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("a part of a book, which may be a chapter (or section or whatever) and/or a range of pages.ons");
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stem("a part of a book, which may be a chapter (or sect or whatever) and/or a rang of pag.on");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.toString();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0778678927316863
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("68rLm)");
      lovinsStemmer0.stemString("68rLm)");
      lovinsStemmer0.stem("68rLm)");
      lovinsStemmer0.stemString("location");
      lovinsStemmer0.stem("68rlm)");
      lovinsStemmer0.stem("ants");
      lovinsStemmer0.stem("ants");
      lovinsStemmer0.stemString("PROCEEDINGS");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("68rLm)");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("ement");
      lovinsStemmer1.stemString("PROCEEDINGS");
      lovinsStemmer2.stem("MONTH");
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer3.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1080811090461171
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      String string0 = "eM6\\ue@A&[Y!";
      stringArray0[1] = string0;
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString(string0);
      lovinsStemmer0.stem(string1);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("how someth strang ha been publ. th first word should be capital.");
      lovinsStemmer0.stemString("encex");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("5 * log(5): ");
      lovinsStemmer0.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.2660053052537872
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("]!JQ");
      lovinsStemmer0.stemString("]!JQ");
      String string0 = lovinsStemmer0.stem("]!jq");
      String string1 = lovinsStemmer0.stemString("]!JQ");
      assertTrue(string1.equals((Object)string0));
      
      lovinsStemmer0.stem("nwl\"6e0ex");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("IS'j_P(N");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("cid");
      String string2 = lovinsStemmer0.stem("bex");
      assertEquals("bic", string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "nwl\"6e0ec";
      stringArray0[1] = "cid";
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.stemString("]!jq");
      assertEquals("]!jq", string3);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.120593826313721
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("68rLm)");
      String string0 = lovinsStemmer0.stemString("68rLm)");
      assertEquals("68rlm)", string0);
      
      lovinsStemmer0.stem("68rLm)");
      String string1 = lovinsStemmer0.stemString("location");
      assertEquals("loc", string1);
      
      lovinsStemmer0.stem("68rlm)");
      lovinsStemmer0.stem("ants");
      lovinsStemmer0.stem("ants");
      String string2 = lovinsStemmer0.stemString("PROCEEDINGS");
      assertEquals("proceed", string2);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string3 = lovinsStemmer0.stem("istend");
      assertEquals("istens", string3);
      
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      LovinsStemmer.main((String[]) null);
      String string4 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
      
      String string5 = lovinsStemmer1.stemString("");
      assertFalse(string5.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1432647026528957
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[5] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[6] = "(gu&_A68OURV#";
      stringArray0[7] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer1.stemString("pn6{+*9\"e8:l8y\"qmit");
      assertEquals("pn6{+*9\"e8:l8y\"qmis", string1);
      
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getTechnicalInformation();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.globalInfo();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer5.toString();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1137852048942336
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("68rLm)");
      lovinsStemmer0.stemString("68rLm)");
      lovinsStemmer0.stem("68rLm)");
      String string0 = lovinsStemmer0.stemString("location");
      assertEquals("loc", string0);
      
      lovinsStemmer0.stem("68rlm)");
      lovinsStemmer0.stem("ants");
      lovinsStemmer0.stemString("end");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("ated");
      assertEquals("at", string2);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string3 = lovinsStemmer3.stemString("end");
      assertEquals("ens", string3);
      
      lovinsStemmer3.stem("weka.core.stemmers.LovinsStemmer");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("68rLm)");
      String string4 = lovinsStemmer1.stemString("68rlm)");
      assertEquals("68rlm)", string4);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0815941046661246
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pm9U@mfI*YJS^|d";
      stringArray0[1] = "propertpand";
      stringArray0[2] = "LPn<^";
      stringArray0[3] = "tkbo;]a&qZJ(3uiK[*h";
      stringArray0[4] = " [JuOc7H,3\"+";
      stringArray0[5] = "<P.^.N>m+m7";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("bookleGt");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
      
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stem("end");
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer3.stemString(",\n   ");
      lovinsStemmer3.stemString("WWTA1");
      lovinsStemmer0.stemString("The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.");
      lovinsStemmer2.stem(",\n   ");
      String string3 = lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1458835589482765
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer3.stem("]Ec");
      lovinsStemmer3.stem("less");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "les";
      stringArray0[2] = "]ec";
      stringArray0[3] = "]ec";
      stringArray0[4] = "]ec";
      stringArray0[5] = "*@l#Yvm0iADfHa/Zc!";
      stringArray0[6] = "keyex";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.stemString("ex");
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer3.globalInfo();
      lovinsStemmer3.stemString("less");
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0906855373164497
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("bookleGt");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stem("/9@Y+PxqW5D[WDfvhuQ");
      String[] stringArray0 = new String[2];
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.stemString("lessly");
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.104651911742589
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer3.stemString("how someth strang ha been publ. th first word should be capital.");
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.globalInfo();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.067285493028481
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("et");
      String string0 = "PN6{+*\"e8:l8y\"q";
      lovinsStemmer0.stemString("ious");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("ZzSqi?3g,\"");
      lovinsStemmer0.stemString("]!JQ");
      lovinsStemmer0.stemString("]!JQ");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ious";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmer");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.145198476127442
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("invalid CVS revision - not enough parts separated by dots!");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.stemString("Induction of decision trees");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getTechnicalInformation();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "invalid CVS revision - not enough parts separated by dots!";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "pand";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer4.toString();
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1527256367148502
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ioal");
      lovinsStemmer0.stemString("article");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("");
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer1.stemString("pex");
      assertEquals("pic", string0);
      
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer1.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "INPROCEEDINGS";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.144887240065754
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("LbwVhYP'UnJGmBK%l");
      assertEquals("lbwvhyp'unjgmbk%l", string2);
      
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.toString();
      lovinsStemmer3.stemString("alher");
      lovinsStemmer3.toString();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0728286917314924
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("bookleGt");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      lovinsStemmer1.stemString("booklegt");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
      
      String string4 = lovinsStemmer0.stemString("A report published by a school or other institution, usually numbered within a series.");
      assertEquals("a report publ by a school or other institut, usu number within a ser.", string4);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1645657820380708
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("PN6{+*\"e8:l8y\"q");
      lovinsStemmer0.stem("");
      lovinsStemmer0.stem("jdusgvzond");
      String string0 = lovinsStemmer0.stemString("jdusgvzons");
      assertEquals("jdusgvzon", string0);
      
      lovinsStemmer0.stemString("R. Quinlan");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string1 = "r\\uocd?_|ZT)w|4nY<z";
      lovinsStemmer0.stemString(string1);
      lovinsStemmer0.stemString("r. quinlan");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("PN6{+*\"e8:l8y\"q");
      assertEquals("pn6{+*\"e8:l8y\"q", string2);
      
      lovinsStemmer0.stemString("itl");
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.toString();
      String string4 = lovinsStemmer0.stemString("lyz0tcterid");
      assertEquals("lyz0tcteris", string4);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.2875812789330918
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[5] = "";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.stemString("F?t4kv?fTb_<eyT M%");
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.getTechnicalInformation();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.globalInfo();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1643179658612617
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("68rLm)");
      lovinsStemmer0.stemString("68rLm)");
      lovinsStemmer0.stem("68rLm)");
      lovinsStemmer0.stemString("location");
      lovinsStemmer0.stem("68rlm)");
      lovinsStemmer0.stem("ants");
      lovinsStemmer0.stem("ants");
      lovinsStemmer0.stemString("PROCEEDINGS");
      lovinsStemmer0.stemString("#.x&9S63kO2");
      String[] stringArray0 = new String[21];
      stringArray0[0] = "68rlm)";
      stringArray0[1] = "68rlm)";
      stringArray0[2] = "68rLm)";
      stringArray0[3] = "ant";
      stringArray0[4] = "proceed";
      stringArray0[5] = "68rlm)";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("Array-Dimensions of 'new String[3][4][]': ");
      assertEquals("arra-dimens of 'new string[3][4][]': ", string0);
      
      lovinsStemmer0.stemString("cid");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("booklegtyt");
      assertEquals("booklegtys", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9476284988229963
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("Julie Beth Lovins");
      lovinsStemmer0.stem("Julie Beth Lovins");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("EDITOR");
      lovinsStemmer0.stem("Julie Beth Lovins");
      lovinsStemmer0.stemString("dotax");
      lovinsStemmer0.stem("9r`J&(t~elAie_YM=5t");
      lovinsStemmer1.toString();
      lovinsStemmer0.stem("Julie Beth Lovins");
      // Undeclared exception!
      try { 
        lovinsStemmer1.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.181250286779155
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "wek.cor.stemmer.lovinsstemmer";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "wek.cor.stemmer.lovinsstemmer";
      lovinsStemmer0.globalInfo();
      String[] stringArray1 = new String[9];
      stringArray1[0] = "8034";
      stringArray1[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[3] = "wek.cor.stemmer.lovinsstemmer";
      stringArray1[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[5] = "wek.cor.stemmer.lovinsstemmer";
      stringArray1[6] = "wek.cor.stemmer.lovinsstemmer";
      stringArray1[7] = "wek.cor.stemmer.lovinsstemmer";
      stringArray1[8] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("log2(4.6): ");
      lovinsStemmer0.stem("AU)E(&NjA=j9<`:");
      String string2 = lovinsStemmer0.stem("encies");
      assertEquals("enci", string2);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1459894915787072
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      String string0 = "eM6\\ue@A&[Y!";
      stringArray0[1] = string0;
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("wardex");
      lovinsStemmer0.stemString("EL&RxU");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1531237188098566
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("68rLm)");
      lovinsStemmer0.stem("68rLm)");
      String string0 = lovinsStemmer0.stemString("location");
      assertEquals("loc", string0);
      
      lovinsStemmer0.stem("68rlm)");
      lovinsStemmer0.stem("ants");
      lovinsStemmer0.stem("ants");
      lovinsStemmer0.stemString("PROCEEDINGS");
      lovinsStemmer0.stemString("#.x&9S63kO2");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "68rlm)";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "68rLm)";
      stringArray0[3] = "ant";
      stringArray0[4] = "proceed";
      stringArray0[5] = "68rlm)";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("Array-Dimensions of 'new String[3][4][]': ");
      assertEquals("arra-dimens of 'new string[3][4][]': ", string1);
      
      lovinsStemmer0.stemString("cid");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("bex");
      lovinsStemmer0.stemString("ant");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ialize");
      String string2 = lovinsStemmer0.stem("bex");
      assertEquals("bic", string2);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1219721210187406
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      lovinsStemmer0.stem("The organization that sponsors a conference or that publishes a manual.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("the organization that sponsors a conference or that publishes a manual.");
      lovinsStemmer0.stemString("+o>('3wAwnS`U");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("a part of a book, which may be a chapter (or section or whatever) and/or a range of pages.pand");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("th organ that sponsor a confer or that publish a manu.");
      lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      String string0 = lovinsStemmer1.stem("$xr)@p>~FY/NXD;$:");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer1.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      String string1 = lovinsStemmer0.getRevision();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9440087775170304
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "elity";
      stringArray0[1] = ",";
      stringArray0[2] = "u,2N!]l8";
      stringArray0[3] = "flagtex";
      stringArray0[4] = "ious";
      stringArray0[5] = "40Hc?;zygSf~S6vdcS";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("bookleGt");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("EDITOR");
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer5.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer4.globalInfo();
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1355303596639312
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Warning, unable to load properties file(s) from system resource (Utils.java): ");
      lovinsStemmer0.stem("q8s*6V0^_R*sDx^Y^");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "q8s*6V0^_R*sDx^Y^";
      stringArray0[1] = "q8s*6V0^_R*sDx^Y^";
      stringArray0[2] = "q8s*6v0^_r*sdx^y^";
      stringArray0[3] = "Warning, unable to load properties file(s) from system resource (Utils.java): ";
      stringArray0[4] = "Warning, unable to load properties file(s) from system resource (Utils.java): ";
      stringArray0[5] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1246717941202742
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string1 = lovinsStemmer0.stem("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("!K|j-e.<8dY*WXEk");
      lovinsStemmer0.stemString("(D^<utOfMGsAPItS3X1");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("rud");
      lovinsStemmer0.stem("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.toString();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[2] = "rus";
      stringArray1[3] = "!K|j-e.<8dY*WXEk";
      stringArray1[4] = "rud";
      stringArray1[5] = "rud";
      stringArray1[6] = "jdusgvzond";
      stringArray1[7] = "!k|j-e.<8dy*wxek";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("!K|j-e.<8dY*WXEk");
      lovinsStemmer0.stemString("(D^<utOfMGsAPItS3X1");
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1303005157968697
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("elvad");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("J(Ubx>=F?b)/|h]");
      lovinsStemmer1.stemString("elvas");
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1525787760874628
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("invalid CVS revision - not enough parts separated by dots!");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("t1qc;xynZ82}");
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.stemString("invalid CVS revision - not enough parts separated by dots!");
      lovinsStemmer2.stemString("%`3g}n:#,uad");
      lovinsStemmer3.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer4.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1306711948643042
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      stringArray0[0] = "how someth strang ha been publ. th first word should be capital.";
      String string0 = "eM6\\ue@A&[Y!";
      stringArray0[1] = string0;
      lovinsStemmer0.stemString("Median (ints): ");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("$VALUES");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("ex");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("mastersthesix");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.toString();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.toString();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.2842651133912573
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "urlud";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("&K:VLdteb5pR`cuK");
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer2.stemString("tex");
      lovinsStemmer2.stemString("urlud");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer2.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1393926514443387
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("ating");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "ating";
      stringArray0[2] = "ances";
      stringArray0[3] = "ances";
      stringArray0[4] = "a part of a book, which may be a chapter (or section or whatever) and/or a range of pages.ond";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[7] = "ating";
      stringArray0[8] = "a part of a book, which may be a chapter (or section or whatever) and/or a range of pages.ond";
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string0 = lovinsStemmer3.stemString("a part of a book, which may be a chapter (or section or whatever) and/or a range of pages.ond");
      assertEquals("a part of a book, which may be a chapter (or sect or whatever) and/or a rang of pag.ons", string0);
      
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer4.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer4.globalInfo();
      lovinsStemmer5.toString();
      String string1 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1605784430112558
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("Quote parse error.");
      lovinsStemmer0.stemString(")vCyPEWL3<p]S'N");
      String string1 = lovinsStemmer0.stemString("lingulux");
      assertEquals("linguluc", string1);
      
      lovinsStemmer0.stemString("yEk@lc:>E\"sXSRT|JI");
      lovinsStemmer0.stem("lingulux");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Y#0*2/yP} qZ>jky ";
      stringArray0[1] = "yek@lc:>e\"sxsrt|ji";
      stringArray0[2] = "yek@lc:>e\"sxsrt|ji";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("Y#0*2/yP} qZ>jky ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("probToLogOdds: probability must be in [0,1] ");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("B/g2~IBf3$Sq=5oDO");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("b/g2~ibf3$sq=5od");
      lovinsStemmer2.stem("probtologod: prob must be in [0,1] ");
      lovinsStemmer0.stemString(".|X");
      lovinsStemmer2.stem("hX");
      String string2 = lovinsStemmer2.stemString("probToLogOdds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string2);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1121779287159803
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stem("booklet");
      assertEquals("bookles", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stem("booklet");
      lovinsStemmer0.stem("ional");
      lovinsStemmer0.stem("lovinsstemmerpanticvad");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("allically");
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer0.stemString("@{1BdRQZUJnjUBa41=");
      assertEquals("@{1bdrqzujnjuba41=", string2);
      
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer0.stemString("ion");
      assertEquals("ion", string4);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1764123375667503
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("PN6{+*9\"e8:l8y\"q");
      lovinsStemmer0.stemString("inate");
      lovinsStemmer0.stemString("iB\"xM8'");
      lovinsStemmer0.stem("XUK0j/lF'[V");
      String[] stringArray0 = new String[2];
      stringArray0[1] = "PN6{+*9\"e8:l8y\"q";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      lovinsStemmer0.stemString("cid");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Array-Dimensions of 'new int[][]': ");
      lovinsStemmer0.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1740248012004804
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "incollection";
      stringArray0[1] = "inity";
      stringArray0[2] = "lux";
      stringArray0[3] = "lisyt";
      stringArray0[4] = "%-T)Qiua";
      stringArray0[5] = "weka.core.TechnicalInformation$Type";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("");
      lovinsStemmer0.stemString(":*VGCx?Q$*c|90");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.7750898712278264
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("author");
      assertEquals("author", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.166325095254269
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Get position oW flag -f: ");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("pans");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.7905698620453724
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("$revision: 8080 $yz");
      assertEquals("$revision: 8080 $ys", string0);
  }
}
