/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 02:39:31 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URI;
import java.util.ArrayList;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CheckOptionHandler;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.FindWithCapabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Option;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.stemmers.IteratedLovinsStemmer;
import weka.core.stemmers.NullStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.unsupervised.attribute.ReplaceMissingValues;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8238300296427967
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.getOtherCapabilities();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      Capabilities capabilities1 = new Capabilities(inputMappedClassifier0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate(".bsi");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      capabilities0.enableDependency(capabilities_Capability0);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      inputMappedClassifier2.getModelHeader(instances1);
      Option option0 = new Option("iFiG(R", "", (-2), "TlsHGC>ec7");
      capabilities1.getAttributeCapabilities();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      instances0.lastIndexOf(inputMappedClassifier0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.10893980259848
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15.0, doubleArray0);
      TestInstances testInstances0 = new TestInstances();
      binarySparseInstance0.isMissing((-1));
      Instances instances0 = testInstances0.generate("");
      instances0.add((Instance) binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      naiveBayesMultinomialText0.m_t = (-2164.11127303833);
      naiveBayesMultinomialText0.setPeriodicPruning((-210));
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.m_stopwordsFile = file0;
      doubleArray0[0] = (-435.4653743118381);
      doubleArray0[1] = 1771.642648;
      doubleArray0[2] = (-3731.0);
      doubleArray0[3] = (-2611.0);
      doubleArray0[4] = (-1.0);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.normTipText();
      Random.setNextRandom(10000);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1822449554140912
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.getOtherCapabilities();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      Capabilities capabilities1 = new Capabilities(inputMappedClassifier0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate(".bsi");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      capabilities1.disableDependency(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      capabilities0.enableDependency(capabilities_Capability1);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      inputMappedClassifier0.getModelHeader(instances1);
      MockRandom mockRandom0 = new MockRandom((-2));
      testInstances1.getRelationalClassFormat();
      Option option0 = new Option("", "^3<{au C7k6bTL", (-2), "TlsHGC>ec7");
      instances0.lastIndexOf(capabilities1);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setPeriodicPruning(1);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.toString();
      assertEquals(1, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0548947705970715
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      Environment environment0 = new Environment();
      testInstances0.generate((String) null);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      instances0.listIterator();
      Integer integer0 = new Integer((-1));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Instances instances1 = new Instances(".bsi", arrayList1, 1858);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.316344336598403
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.createNewFile();
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.getCapabilities();
      BallTree ballTree0 = new BallTree();
      int[] intArray0 = new int[2];
      intArray0[0] = 19;
      intArray0[1] = 14;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, intArray0, 91);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      DenseInstance denseInstance0 = new DenseInstance(19);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0485406074646844
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate(".bsi");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      capabilities0.enableDependency(capabilities_Capability0);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      inputMappedClassifier0.getModelHeader(instances1);
      MockRandom mockRandom0 = new MockRandom((-2));
      instances0.lastIndexOf(capabilities1);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setPeriodicPruning(1);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 2429.710924253;
      doubleArray0[2] = (double) 1;
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      instances1.lastIndexOf(checkOptionHandler0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      instances1.add((Instance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.368373327680306
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MockFile mockFile0 = new MockFile("eous");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MockFile mockFile1 = new MockFile("sCREI`x)A%]=]1-UBi");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "It");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "It";
      stringArray0[1] = "";
      stringArray0[2] = "eous";
      stringArray0[3] = "It";
      stringArray0[4] = "sCREI`x)A%]=]1-UBi";
      stringArray0[5] = "-stemmer";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -stemmer option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1451006561062114
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.getOtherCapabilities();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      Environment environment0 = new Environment();
      Capabilities capabilities1 = new Capabilities(inputMappedClassifier0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate(".bsi");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      capabilities0.enableDependency(capabilities_Capability0);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      inputMappedClassifier0.getModelHeader(instances1);
      Option option0 = new Option("", "[3<{ae ]7k6bTL", 6, "TlsHGC>ec7");
      instances0.lastIndexOf(capabilities1);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      double[] doubleArray0 = naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
      assertArrayEquals(new double[] {0.3750000000000001, 0.16666666666666669, 0.29166666666666663, 0.16666666666666669}, doubleArray0, 0.01);
      
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t9.0\nclass2\t4.0\nclass3\t7.0\nclass4\t4.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\tclass3\tclass4\t\nover\t2.718281828459045\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\nthe\t7.38905609893065\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nThe\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\nquick\t7.38905609893065\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\nlazy\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\njumps\t20.085536923187668\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nbrown\t7.38905609893065\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\ndog\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\nfox\t2.718281828459045\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\n", string0);
      
      naiveBayesMultinomialText0.pruneDictionary();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.220670845574892
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      Environment environment0 = new Environment();
      naiveBayesMultinomialText0.m_leplace = 15.0;
      Instances instances1 = testInstances0.generate("stoplist");
      Integer integer0 = new Integer(70);
      naiveBayesMultinomialText0.buildClassifier(instances1);
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t11.0\nclass2\t11.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\t\n", string0);
      
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]c?WX)as");
      MockFile mockFile1 = new MockFile("]c?WX)as");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MockFile mockFile2 = new MockFile("weka.core.matrix.Matrix");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_t = (-2620.7106398);
      naiveBayesMultinomialText0.setPeriodicPruning(10000);
      naiveBayesMultinomialText0.toString();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9877986754532038
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      NullStemmer nullStemmer0 = new NullStemmer();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) nullStemmer0;
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.getRevision();
      nullStemmer0.stem("");
      naiveBayesMultinomialText0.m_lnorm = (-1.0);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getMinWordFrequency();
      Random.setNextRandom(1879);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.setStopwords(file0);
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.getOtherCapabilities();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":0LbK$)X4B&N8,");
      Instances instances0 = testInstances0.generate("");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle numeric class!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      boolean boolean0 = true;
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Capabilities capabilities0 = principalComponents0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.getOtherCapabilities();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText1.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eous");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockFile mockFile0 = new MockFile("-stemmer");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C9Pf4'NP'H.|QqY");
      MockFile mockFile1 = new MockFile("C9Pf4'NP'H.|QqY");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "C9Pf4'NP'H.|QqY";
      stringArray0[3] = "eous";
      stringArray0[4] = "Default options: ";
      stringArray0[5] = "";
      stringArray0[6] = "-stemmer";
      stringArray0[7] = "eous";
      stringArray0[8] = "eous";
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.095069366900895
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MockFile mockFile0 = new MockFile("");
      mockFile0.delete();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MockFile mockFile1 = new MockFile("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      mockFile0.toPath();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.m_wordFrequencies = false;
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("This will normalize the attributes. This could help improve performance of the network. This is not reliant on the class being numeric. This will also normalize nominal attributes as well (after they have been run through the nominal to binary filter if that is in use) so that the nominal values are between -1 and 1");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9140556944170766
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      capabilities0.getOtherCapabilities();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.getMinWordFrequency();
      naiveBayesMultinomialText1.getCapabilities();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setNorm(1279);
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("C'NhHJW)QhFpyU");
      Instances instances1 = new Instances(instances0);
      naiveBayesMultinomialText0.buildClassifier(instances1);
      assertEquals(1279.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.288838640445089
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      Instances instances1 = testInstances0.generate("stoplist");
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      instances1.listIterator();
      naiveBayesMultinomialText0.buildClassifier(instances1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(694);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      naiveBayesMultinomialText0.setPeriodicPruning(2013265920);
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals(2013265920, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0501753201985347
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = MockFile.createTempFile("az,iN }eL/x2!m$:", "az,iN }eL/x2!m$:");
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.setNorm(0.0);
      naiveBayesMultinomialText0.getLNorm();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      naiveBayesMultinomialText0.setStopwords(file0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = (NaiveBayesMultinomialText)AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText1.listOptions();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getUseStopList();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = 2.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      naiveBayesMultinomialText0.getOptions();
      try { 
        principalComponents0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // convertInstance: Principal components not built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.setNorm(0.0);
      naiveBayesMultinomialText0.getLNorm();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getUseStopList();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = 2.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      try { 
        principalComponents0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // convertInstance: Principal components not built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.230386047717229
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_norm = (-2714.456685);
      naiveBayesMultinomialText0.m_t = (-2714.456685);
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.setPeriodicPruning((-1518));
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.listOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "z,`");
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getTokenizer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      System.setCurrentTimeMillis(0L);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals((-1518), naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      String string0 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2567576795645348
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eous");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockFile mockFile0 = new MockFile("-stemmer");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C9Pf4'NP'H.|QqY");
      MockFile mockFile1 = new MockFile("C9Pf4'NP'H.|QqY");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "C9Pf4'NP'H.|QqY";
      stringArray0[3] = "eous";
      stringArray0[4] = "Default options: ";
      stringArray0[5] = "";
      stringArray0[6] = "-stemmer";
      stringArray0[7] = "eous";
      stringArray0[8] = "eous";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1402560812485656
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLNorm(0.0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = (NaiveBayesMultinomialText)AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.setPeriodicPruning((-71));
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      double[] doubleArray0 = new double[0];
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      String[] stringArray0 = new String[0];
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText1.toString();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, false);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-52.0);
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 2.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-P";
      stringArray0[1] = "t17ID";
      stringArray0[2] = "";
      stringArray0[3] = "IL5w^8 aPR8ih";
      stringArray0[4] = "IL5w^8 aPR8ih";
      stringArray0[5] = "";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"t17ID\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3742207798740282
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning(1279);
      naiveBayesMultinomialText0.setNorm(1279);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("y|V(Ji_39ODy");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      assertFalse(file0.canRead());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0304401794831066
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.m_stemmer = null;
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.390418448097223
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MockFile mockFile0 = new MockFile("lnorm");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      mockFile0.toPath();
      mockFile0.toURI();
      mockFile0.mkdirs();
      mockFile0.delete();
      MockFile mockFile1 = new MockFile("lnorm");
      mockFile0.setWritable(false);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(1.0E-12);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("1981");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      Random.setNextRandom((-2812));
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals(1.0E-12, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.9005822944550714
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.tartarus.snowball";
      stringArray0[1] = "org.tartarus.snowball";
      SnowballStemmer.main(stringArray0);
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      String string0 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string0);
      
      String string1 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 756;
      intArray0[1] = (-1);
      intArray0[2] = 31;
      intArray0[3] = 1235;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 384;
      intArray0[7] = 0;
      intArray0[8] = 89;
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(12, stringArray1.length);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.1613371021644316
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning((-1443));
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "The tokenizing algorithm to use on the strings.";
      stringArray0[1] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      assertEquals((-1443), naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2861940974386643
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(0.0);
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      naiveBayesMultinomialText0.m_inputVector = null;
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.setNorm(1467.0);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.m_lowercaseTokens = false;
      naiveBayesMultinomialText0.m_leplace = (-1286.0);
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.setMinWordFrequency(1467.0);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals(1467.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.844441092953585
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string0);
      
      naiveBayesMultinomialText0.stopwordsTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText1.setStopwords(file0);
      String string1 = naiveBayesMultinomialText1.tokenizerTipText();
      assertFalse(naiveBayesMultinomialText1.getUseStopList());
      assertEquals("The tokenizing algorithm to use on the strings.", string1);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      String string2 = naiveBayesMultinomialText2.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string2);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      String string3 = naiveBayesMultinomialText3.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string3);
      
      String[] stringArray0 = new String[0];
      naiveBayesMultinomialText0.setOptions(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.setDebug(false);
      NaiveBayesMultinomialText naiveBayesMultinomialText5 = new NaiveBayesMultinomialText();
      String string4 = naiveBayesMultinomialText5.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string4);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText6 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText4.setOptions(stringArray0);
      assertEquals(1.0, naiveBayesMultinomialText4.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText4.getLowercaseTokens());
      assertEquals(2.0, naiveBayesMultinomialText4.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText4.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText4.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText4.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText4.getUseWordFrequencies());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.001;
      doubleArray0[1] = 0.001;
      doubleArray0[2] = 0.001;
      doubleArray0[3] = 0.001;
      int[] intArray0 = new int[9];
      intArray0[0] = 8;
      intArray0[1] = 1;
      intArray0[2] = 2751;
      intArray0[3] = 994;
      intArray0[4] = 27;
      intArray0[5] = 2028179000;
      intArray0[6] = 191;
      intArray0[7] = 472;
      intArray0[8] = 0;
      SparseInstance sparseInstance0 = new SparseInstance(0.001, doubleArray0, intArray0, 0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      MockFile mockFile0 = new MockFile("`):&,qt5MFx5>05", "");
      naiveBayesMultinomialText0.m_stopwordsFile = (File) mockFile0;
      String string0 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string0);
      
      Random.setNextRandom(1102);
      String string1 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals("Use word frequencies rather than binary bag of words representation", string1);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.963736205192481
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.useStopListTipText();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "If true, ignores all words that are on the stoplist.";
      stringArray0[1] = "If true, ignores all words that are on the stoplist.";
      stringArray0[2] = "If true, ignores all words that are on the stoplist.";
      stringArray0[3] = "If true, ignores all words that are on the stoplist.";
      stringArray0[4] = "If true, ignores all words that are on the stoplist.";
      stringArray0[5] = "If true, ignores all words that are on the stoplist.";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      
      naiveBayesMultinomialText0.m_minWordP = (-1457.0);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.normTipText();
      String string0 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.getTokenizer();
      KDTree kDTree0 = new KDTree();
      BallNode ballNode0 = new BallNode(68, 0, 0);
      ReplaceMissingValues replaceMissingValues0 = new ReplaceMissingValues();
      // Undeclared exception!
      try { 
        replaceMissingValues0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.59037912687189
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normTipText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      double double0 = naiveBayesMultinomialText0.m_minWordP;
      naiveBayesMultinomialText0.stemmerTipText();
      int int0 = (-3512);
      naiveBayesMultinomialText0.m_periodicP = (-3512);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText1.tokenizerTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText1.stopwordsTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      Instances instances0 = null;
      try {
        instances0 = new Instances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2399.5596;
      doubleArray0[1] = 2604.0;
      doubleArray0[2] = (-149.15687360015926);
      doubleArray0[3] = 2399.5596;
      doubleArray0[4] = 2399.5596;
      doubleArray0[5] = 2399.5596;
      doubleArray0[7] = 2399.5596;
      DenseInstance denseInstance0 = new DenseInstance(2399.5596, doubleArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eous");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("b56f8");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MockFile mockFile1 = new MockFile("b56f8");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A`ND&_\"Qb");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      naiveBayesMultinomialText0.setPeriodicPruning(1073741824);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-988.56143);
      SparseInstance sparseInstance0 = new SparseInstance((-802.9091), doubleArray0);
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      Instances instances0 = null;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = null;
      try {
        instances1 = new Instances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.568929253051676
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e-Vtn6Kaa");
      MockFile mockFile0 = new MockFile("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MockFile mockFile1 = new MockFile("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e-Vtn6Kaa");
      mockFile1.toPath();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "e-Vtn6Kaa";
      stringArray0[1] = "\tA file containing stopwords to override the default ones.\n\tUsing this option automatically sets the flag ('-stoplist') to use the\n\tstoplist if the file exists.\n\tFormat: one stopword per line, lines starting with '#'\n\tare interpreted as comments and ignored.";
      Stemmer stemmer0 = naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "";
      stringArray1[1] = " `Jjo|+_/A3XY ";
      stringArray1[2] = "";
      stringArray1[3] = "e-Vtn6Kaa";
      stringArray1[4] = "";
      stringArray1[5] = "\tA file containing stopwords to override the default ones.\n\tUsing this option automatically sets the flag ('-stoplist') to use the\n\tstoplist if the file exists.\n\tFormat: one stopword per line, lines starting with '#'\n\tare interpreted as comments and ignored.";
      stringArray1[6] = "";
      stringArray1[7] = "\tA file containing stopwords to override the default ones.\n\tUsing this option automatically sets the flag ('-stoplist') to use the\n\tstoplist if the file exists.\n\tFormat: one stopword per line, lines starting with '#'\n\tare interpreted as comments and ignored.";
      naiveBayesMultinomialText0.setOptions(stringArray1);
      naiveBayesMultinomialText0.setOptions(stringArray1);
      System.setCurrentTimeMillis(233L);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4267173502315558
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "-1? ";
      stringArray0[2] = "eity";
      stringArray0[3] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.5564275758420565
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normTipText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      double double0 = naiveBayesMultinomialText0.m_t;
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.m_periodicP = (-3512);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.getRevision();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.LNormTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText1.stopwordsTipText();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-3512);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-3512);
      SparseInstance sparseInstance0 = new SparseInstance(3.0, doubleArray0);
      naiveBayesMultinomialText1.setNorm(0.5);
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.getOptions();
      Random.setNextRandom(0);
      naiveBayesMultinomialText0.stemmerTipText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6382439711076704
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      naiveBayesMultinomialText0.setNorm(0.0);
      stringArray0[0] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setLNorm(0.0);
      assertEquals(0.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.4744103244830757
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.tokenizerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText2.stopwordsTipText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The file containing the stopwords (if this is a directory then the default ones are used).";
      naiveBayesMultinomialText2.setOptions(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.normalizeDocLengthTipText();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 7.0;
      doubleArray0[1] = (-2024.764);
      doubleArray0[2] = 3.0;
      SparseInstance sparseInstance0 = new SparseInstance((-2024.764), doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText5 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText5.getOptions();
      Random.setNextRandom(10000);
      naiveBayesMultinomialText4.setMinWordFrequency((-2024.764));
      naiveBayesMultinomialText4.LNormTipText();
      naiveBayesMultinomialText4.globalInfo();
      assertEquals((-2024.764), naiveBayesMultinomialText4.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.48462116244288
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_t = 0.0;
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The stemming algorithm to use on the words.";
      NaiveBayesMultinomialText.main(stringArray0);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      naiveBayesMultinomialText0.setPeriodicPruning(1072);
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.getNorm();
      Stemmer stemmer0 = naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.normTipText();
      assertEquals(1072, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      boolean boolean0 = naiveBayesMultinomialText0.m_useStopList;
      MockFile mockFile0 = new MockFile("t[RM$=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      naiveBayesMultinomialText0.getUseWordFrequencies();
      MockFile mockFile1 = new MockFile(":Gy\"tcI'!DCs[");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F^F9");
      MockFile mockFile2 = new MockFile(":Gy\"tcI'!DCs[");
      mockFile0.toPath();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.generate(":Gy\"tcI'!DCs[");
      Random.setNextRandom((-1));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8090292921348017
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      Capabilities capabilities2 = new Capabilities(inputMappedClassifier0);
      TestInstances.forCapabilities(capabilities0);
      testInstances0.getRelationalClassFormat();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate("@relation");
      Capabilities capabilities3 = inputMappedClassifier2.getCapabilities();
      capabilities3.and(capabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      capabilities1.enableDependency(capabilities_Capability0);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Option option0 = new Option("<!-- globalinfo-end -->", "The file containing the stopwords (if this is a directory then the default ones are used).", (-2), "s5'=m`!I2RO!%");
      capabilities3.getAttributeCapabilities();
      instances0.lastIndexOf(option0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2500);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      Attribute attribute0 = new Attribute("<!-- globalinfo-end -->", vector0, (-1));
      // Undeclared exception!
      try { 
        instances1.numDistinctValues(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.4394157629299684
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.m_useStopList = true;
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "The independent probability of a class\n";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "Use error on the probabilties as error measure when determining the best number of LogitBoost iterations. If set, the number of LogitBoost iterations is chosen that minimizes the root mean squared error (either on the training set or in the cross-validation, depending on useCrossValidation).";
      stringArray1[1] = "The independent probability of a class\n";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "x+F)T}E)bEA_1Nh0*5";
      stringArray1[5] = "";
      stringArray1[6] = "The file containing the stopwords (if this is a directory then the default ones are used).";
      stringArray1[7] = "Additive Logistic Regression: a Statistical View of Boosting";
      stringArray1[8] = "";
      naiveBayesMultinomialText0.setOptions(stringArray1);
      naiveBayesMultinomialText1.setOptions(stringArray1);
      try { 
        naiveBayesMultinomialText1.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      naiveBayesMultinomialText0.m_useStopList = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t[RM$=");
      MockFile mockFile0 = new MockFile("t[RM$=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      mockFile0.setExecutable(true);
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile(":Gy\"tcI'!DCs[");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F^F9");
      MockFile mockFile2 = new MockFile(":Gy\"tcI'!DCs[");
      mockFile0.toPath();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e-Vtn6Kaa");
      MockFile mockFile0 = new MockFile("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MockFile mockFile1 = new MockFile("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e-Vtn6Kaa");
      mockFile1.toPath();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "e-Vtn6Kaa";
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("");
      naiveBayesMultinomialText0.setStopwords(mockFile1);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.397152728124591
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = MockFile.createTempFile("tX.:", "");
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.setStopwords(file0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "tX.:";
      stringArray0[1] = "tX.:";
      stringArray0[2] = "tX.:";
      stringArray0[3] = "";
      stringArray0[4] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setStopwords(file0);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-2263));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.19859258977593
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      assertEquals(12, stringArray1.length);
      
      naiveBayesMultinomialText0.getTokenizer();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.964079258365723
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "I^H4t({j");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string0);
      
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.reset();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "The tokenizing algorithm to use on the strings.";
      stringArray0[1] = "";
      NaiveBayesMultinomialText.main(stringArray0);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.normTipText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, (String[]) null);
      MockFile mockFile0 = new MockFile("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText2.toString();
      assertFalse(naiveBayesMultinomialText2.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText2.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText2.getNorm(), 0.01);
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      assertEquals(0, naiveBayesMultinomialText2.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText2.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText2.getNormalizeDocLength());
  }
}
