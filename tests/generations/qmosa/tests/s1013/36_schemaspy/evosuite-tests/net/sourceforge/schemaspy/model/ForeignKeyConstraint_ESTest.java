/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 03:31:13 GMT 2019
 */

package net.sourceforge.schemaspy.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.sql.DatabaseMetaData;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Pattern;
import net.sourceforge.schemaspy.Config;
import net.sourceforge.schemaspy.model.ForeignKeyConstraint;
import net.sourceforge.schemaspy.model.Table;
import net.sourceforge.schemaspy.model.TableColumn;
import net.sourceforge.schemaspy.model.xml.SchemaMeta;
import net.sourceforge.schemaspy.model.xml.TableColumnMeta;
import net.sourceforge.schemaspy.view.DefaultSqlFormatter;
import net.sourceforge.schemaspy.view.SqlFormatter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ForeignKeyConstraint_ESTest extends ForeignKeyConstraint_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.2407560846182575
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "c&[^~C{0Z(ft(){?*9", 0, 0);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)84;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("UTF-8/UTF-8");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Cascade on delete:\n Deletion of parent deletes child", string0);
      
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals(0, foreignKeyConstraint0.getUpdateRule());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1112820690032863
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "c&[^~C{0Z(ft(){?*9", 0, 0);
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) linkedList0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) "c&[^~C{0Z(ft(){?*9";
      linkedList0.toArray(objectArray0);
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)84;
      byteArray0[3] = (byte)84;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Cascade on delete:\n Deletion of parent deletes child", string0);
      
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      foreignKeyConstraint0.getDeleteRuleName();
      int int0 = foreignKeyConstraint0.getUpdateRule();
      assertEquals(0, int0);
      
      foreignKeyConstraint0.getChildColumns();
      String string1 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Cascade on delete", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.147514311455309
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "c&[^~C{0Z(ft(){?*9", 0, 0);
      Config config0 = new Config();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      config0.getCatalog();
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Cascade on delete:\n Deletion of parent deletes child", string0);
      
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(databaseMetaData0).getNumericFunctions();
      doReturn((String) null).when(databaseMetaData0).getSQLKeywords();
      doReturn((String) null).when(databaseMetaData0).getStringFunctions();
      doReturn((String) null).when(databaseMetaData0).getSystemFunctions();
      doReturn((String) null).when(databaseMetaData0).getTimeDateFunctions();
      defaultSqlFormatter0.getKeywords(databaseMetaData0);
      config0.setSqlFormatter((SqlFormatter) defaultSqlFormatter0);
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getChildTable();
      String string1 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Cascade on delete", string1);
      
      String string2 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("C", string2);
      assertEquals(0, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6849407901424325
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "(w", (-3593), 2860);
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getChildTable();
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentTable();
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertFalse(foreignKeyConstraint0.isCascadeOnDelete());
      
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "", 2860, (-1));
      foreignKeyConstraint1.getDeleteRuleAlias();
      boolean boolean1 = foreignKeyConstraint1.isCascadeOnDelete();
      assertTrue(boolean1 == boolean0);
      
      int int0 = new Integer((-3593));
      foreignKeyConstraint1.getName();
      assertEquals(2860, foreignKeyConstraint1.getUpdateRule());
      assertFalse(foreignKeyConstraint1.isRestrictDelete());
      assertEquals((-1), foreignKeyConstraint1.getDeleteRule());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "W\\i6{qu;'!bK@Qp";
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Wi6{qu;'!bK@Qp", 96, 2818);
      foreignKeyConstraint0.getChildColumns();
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.pollFirst();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.getParentTable();
      LinkedList<TableColumn> linkedList1 = new LinkedList<TableColumn>();
      linkedList1.add((TableColumn) null);
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      linkedList1.pollFirst();
      linkedList1.poll();
      tableColumn0.setShortType("Wi6{qu;'!bK@Qp");
      linkedList1.add(tableColumn0);
      linkedList0.add(tableColumn0);
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList1);
      tableColumn1.unlinkChildren();
      TableColumn tableColumn2 = linkedList1.pollFirst();
      tableColumn2.removeParent((TableColumn) null);
      tableColumn1.removeChild((TableColumn) null);
      ForeignKeyConstraint foreignKeyConstraint1 = null;
      try {
        foreignKeyConstraint1 = new ForeignKeyConstraint(tableColumn2, tableColumn1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6027649630532266
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "(w", 96, 2860);
      List<TableColumn> list0 = foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getChildTable();
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.addAll((Collection<? extends TableColumn>) list0);
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getParentTable();
      LinkedList<TableColumn> linkedList1 = new LinkedList<TableColumn>();
      linkedList1.poll();
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentTable();
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "", (-2012), 0);
      foreignKeyConstraint0.getDeleteRuleAlias();
      boolean boolean1 = foreignKeyConstraint1.isCascadeOnDelete();
      assertFalse(boolean1 == boolean0);
      assertFalse(foreignKeyConstraint1.isRestrictDelete());
      
      System.setCurrentTimeMillis(0);
      int int0 = new Integer(2860);
      foreignKeyConstraint0.getParentTable();
      assertFalse(foreignKeyConstraint0.isCascadeOnDelete());
      assertEquals(96, foreignKeyConstraint0.getUpdateRule());
      assertEquals(2860, foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1603165874154797
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "029Cs\"W[Ck", 3, 3);
      foreignKeyConstraint0.getParentColumns();
      List<TableColumn> list0 = new LinkedList<TableColumn>();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getDeleteRuleDescription();
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertTrue(boolean0);
      
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getDeleteRuleName();
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      foreignKeyConstraint0.getDeleteRuleAlias();
      String string1 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Restrict delete", string1);
      
      String string2 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("R", string2);
      assertEquals(3, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "c&[^~C{0Z(ft(){?*9", (-432), (-1));
      Config config0 = Config.getInstance();
      config0.getSchema();
      MockFile mockFile0 = new MockFile("UTF-8", "UTF-8");
      mockFile0.mkdirs();
      MockFile mockFile1 = new MockFile("UTF-8");
      config0.setOutputDir((File) mockFile1);
      config0.setGraphvizDir("}b=9'wX~l;~9M^z0C");
      config0.isLogoEnabled();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "c&[^~C{0Z(ft(){?*9");
      FileSystemHandling.shouldAllThrowIOExceptions();
      config0.setEncodeCommentsEnabled(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      config0.getIndirectColumnExclusions();
      Integer integer0 = new Integer(394);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      config0.setRenderer("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}b=9'wX~l;~9M^z0C");
      foreignKeyConstraint0.getUpdateRule();
      foreignKeyConstraint0.getDeleteRule();
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta("}b=9'wX~l;~9M^z0C", "vzg%m&#k8C'5", "UTF-8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Specified meta file \"}b=9'wX~l;~9M^z0C\" does not exist
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "T", 12, (-411));
      Integer integer0 = new Integer(12);
      Integer integer1 = new Integer(940);
      Integer integer2 = new Integer(86);
      Integer.getInteger("GLOBAL");
      Integer integer3 = new Integer(989);
      Integer integer4 = new Integer(1287);
      Integer integer5 = new Integer(989);
      Integer integer6 = new Integer(33);
      Integer.getInteger("T", 993);
      Integer integer7 = new Integer(178);
      Integer.toUnsignedLong(12);
      Integer.getInteger("GLOBAL", integer3);
      Integer.getInteger("o\"G x:1:*hvDX ", integer7);
      Integer integer8 = new Integer(86);
      Integer integer9 = new Integer((-78));
      Integer integer10 = new Integer((-411));
      Integer integer11 = new Integer(1287);
      Integer integer12 = new Integer((-14));
      Integer.min(178, (-14));
      Integer.getInteger("T", integer12);
      Integer integer13 = new Integer((-1696));
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "GLOBAL", 139, 196);
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
      assertEquals(13, int0);
      assertEquals(196, foreignKeyConstraint1.getDeleteRule());
      assertEquals(139, foreignKeyConstraint1.getUpdateRule());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 2, 2);
      Config.getInstance();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      foreignKeyConstraint0.isNullOnDelete();
      System.setCurrentTimeMillis(1404L);
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta((String) null, "", "k84ZnZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "T", 12, (-4));
      Integer integer0 = new Integer((-4));
      Integer integer1 = new Integer(981);
      Integer integer2 = new Integer(12);
      Integer integer3 = new Integer(981);
      Integer integer4 = new Integer(981);
      Integer integer5 = new Integer((-4));
      Integer.divideUnsigned(12, 1742);
      Integer integer6 = new Integer(12);
      Integer.divideUnsigned(0, 71);
      Integer integer7 = new Integer(86);
      Integer integer8 = new Integer((-4));
      Integer integer9 = Integer.getInteger("T", integer4);
      Integer integer10 = Integer.getInteger("T", integer9);
      Integer integer11 = new Integer(12);
      Integer integer12 = new Integer(0);
      Integer integer13 = new Integer((-78));
      Integer.compareUnsigned(86, 2860);
      Integer integer14 = new Integer((-4));
      Integer integer15 = new Integer((-4));
      Integer integer16 = new Integer((-4));
      Integer integer17 = new Integer(12);
      Integer.toUnsignedString(981);
      Integer integer18 = new Integer(0);
      Integer.remainderUnsigned(86, (int) integer10);
      Integer.getInteger("T", integer16);
      Integer integer19 = new Integer((-4));
      boolean boolean0 = foreignKeyConstraint0.isImplied();
      assertEquals((-4), foreignKeyConstraint0.getDeleteRule());
      assertFalse(boolean0);
      assertEquals(12, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "T", 12, (-411));
      Integer integer0 = new Integer(12);
      Integer integer1 = new Integer(940);
      Integer integer2 = new Integer(86);
      Integer.getInteger("GLOBAL");
      Integer integer3 = new Integer(989);
      Integer integer4 = new Integer(1287);
      Integer integer5 = new Integer(989);
      Integer integer6 = new Integer(33);
      Integer.getInteger("T", 993);
      Integer integer7 = new Integer(178);
      Integer.toUnsignedLong(12);
      Integer.getInteger("GLOBAL", integer3);
      Integer.getInteger("o\"G x:1:*hvDX ", integer7);
      Integer integer8 = new Integer(86);
      Integer integer9 = new Integer((-78));
      Integer integer10 = new Integer((-411));
      Integer integer11 = new Integer(1287);
      Integer integer12 = new Integer((-14));
      Integer.min(178, (-14));
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, ");T", (-14), (-1126));
      int int0 = foreignKeyConstraint1.compareTo(foreignKeyConstraint0);
      assertEquals((-1126), foreignKeyConstraint1.getDeleteRule());
      assertEquals((-14), foreignKeyConstraint1.getUpdateRule());
      assertEquals((-75), int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "X<uxK{mX5-JVf.I//V", (-407), (-407));
      Config config0 = new Config();
      Integer integer0 = new Integer((-407));
      config0.setGraphvizDir("UTF-8");
      config0.setRenderer("*`%7xo");
      config0.setRenderer("UTF-8");
      config0.setSingleSignOn(false);
      config0.setSchemaSpec("UTF-8");
      config0.isLogoEnabled();
      config0.setRenderer("UTF-8");
      Config config1 = new Config();
      config0.isLogoEnabled();
      config0.setDbType("UTF-8");
      config0.setOutputDir("UTF-8");
      config1.isHtmlGenerationEnabled();
      config1.setNumRowsEnabled(true);
      config1.getPort();
      Integer.getInteger("UTF-8", (-407));
      config0.getFontSize();
      Integer.toUnsignedString(1);
      config1.setMaxDetailedTabled(31);
      Integer.getInteger("UTF-8", 1);
      config0.getRenderer();
      config1.isViewsEnabled();
      config1.getParam("UTF-8");
      SqlFormatter sqlFormatter0 = config0.getSqlFormatter();
      config0.getDescription();
      config0.isHtmlGenerationEnabled();
      config0.setRailsEnabled(true);
      config0.setSqlFormatter(sqlFormatter0);
      config0.setSchema("UTF-8");
      config1.setCatalog("UTF-8");
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint0);
      assertEquals((-407), foreignKeyConstraint0.getDeleteRule());
      assertEquals(0, int0);
      assertEquals((-407), foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "X<uxK{mX5-JVf.I//V", (-407), (-407));
      Config config0 = new Config();
      Integer integer0 = new Integer((-407));
      config0.setGraphvizDir("UTF-8");
      config0.setRenderer("*`%7xo");
      config0.setRenderer("UTF-8");
      config0.setSingleSignOn(false);
      config0.setSchemaSpec("UTF-8");
      config0.isLogoEnabled();
      Config config1 = new Config();
      config0.isLogoEnabled();
      config0.setDbType("UTF-8");
      config0.setOutputDir("UTF-8");
      config1.isHtmlGenerationEnabled();
      config1.setNumRowsEnabled(true);
      config1.getPort();
      Integer.getInteger("UTF-8", (-407));
      config0.getFontSize();
      Integer.toUnsignedString(1);
      config1.setMaxDetailedTabled(31);
      Integer.getInteger("UTF-8", 1);
      config0.getRenderer();
      config1.isViewsEnabled();
      config1.getParam("UTF-8");
      SqlFormatter sqlFormatter0 = config0.getSqlFormatter();
      config0.getDescription();
      config0.isHtmlGenerationEnabled();
      config0.setRailsEnabled(true);
      config0.setSqlFormatter(sqlFormatter0);
      config0.setSchema("UTF-8");
      config1.setCatalog("UTF-8");
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint0);
      assertEquals((-407), foreignKeyConstraint0.getUpdateRule());
      assertEquals(0, int0);
      assertEquals((-407), foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3177988005346264
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 2, 2);
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getDeleteRuleDescription();
      Config.getInstance();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentColumns();
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Null on delete:\n Foreign key to parent set to NULL when parent deleted", string0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Null on delete", string1);
      
      foreignKeyConstraint0.getParentColumns();
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertFalse(boolean0);
      
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "~-\"a`w&KC0F", 3, 1821);
      assertEquals(3, foreignKeyConstraint1.getUpdateRule());
      assertFalse(foreignKeyConstraint1.isRestrictDelete());
      
      foreignKeyConstraint0.getDeleteRuleAlias();
      String string2 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("N", string2);
      
      foreignKeyConstraint0.getName();
      assertEquals("Null on delete", foreignKeyConstraint0.getDeleteRuleName());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4208811205337155
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 2, 2);
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getDeleteRuleDescription();
      Config.getInstance();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getDeleteRuleDescription();
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Null on delete", string0);
      
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentTable();
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertFalse(boolean0);
      
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "Null on delete:\n Foreign key to parent set to NULL when parent deleted", 2, 2);
      String string1 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("N", string1);
      
      foreignKeyConstraint1.getName();
      String string2 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Null on delete:\n Foreign key to parent set to NULL when parent deleted", string2);
      
      foreignKeyConstraint1.getParentColumns();
      assertEquals(2, foreignKeyConstraint1.getUpdateRule());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "=[DY;{TsDzGI,`g>", (-436), 42);
      Config config0 = new Config();
      MockFile mockFile0 = new MockFile("UTF-8", "=[DY;{TsDzGI,`g>");
      config0.getMaxDbThreads();
      MockFile mockFile1 = new MockFile("UTF-8", "UTF-8");
      config0.setGraphvizDir("UTF-8");
      config0.setRenderer("UTF-8");
      config0.setSingleSignOn(true);
      MockFile mockFile2 = new MockFile("UTF-8", "UTF-8");
      config0.setSchemaSpec("UTF-8");
      config0.isLogoEnabled();
      config0.setRenderer("UTF-8");
      Config config1 = new Config();
      config0.isLogoEnabled();
      config0.setDbType("UTF-8");
      config0.setOutputDir("UTF-8");
      config0.isHtmlGenerationEnabled();
      config1.setNumRowsEnabled(true);
      Integer integer0 = new Integer(42);
      config0.getRenderer();
      config1.isViewsEnabled();
      config1.setPort(integer0);
      config1.getParam("UTF-8");
      SqlFormatter sqlFormatter0 = config0.getSqlFormatter();
      config0.getDescription();
      config0.setSqlFormatter(sqlFormatter0);
      config0.setSchema("UTF-8");
      config1.setCatalog("UTF-8");
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, (String) null, (-352), (-904));
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "X<uxK{mX5-JVf.I//V", (-407), (-407));
      Config config0 = new Config();
      config0.getMaxDbThreads();
      config0.setGraphvizDir("UTF-8");
      config0.setRenderer("UTF-8");
      config0.setSingleSignOn(false);
      config0.setSchemaSpec("UTF-8");
      config0.isLogoEnabled();
      config0.setRenderer("UTF-8");
      Config config1 = new Config();
      config0.isLogoEnabled();
      config0.setDbType("UTF-8");
      config0.setOutputDir("UTF-8");
      config1.isHtmlGenerationEnabled();
      config1.setNumRowsEnabled(true);
      config1.getPort();
      Integer integer0 = new Integer((-325));
      Integer.valueOf((-325));
      Integer.toUnsignedString((-325));
      Integer.getInteger("UTF-8", (-325));
      config0.getRenderer();
      Integer.toUnsignedLong((-31));
      config1.isViewsEnabled();
      config1.setPort(integer0);
      config1.getParam("UTF-8");
      config0.getSqlFormatter();
      config0.getDescription();
      config0.isHtmlGenerationEnabled();
      config0.setRailsEnabled(true);
      config0.setSchema("UTF-8");
      config1.setCatalog("UTF-8");
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "X<uxK{mX5-JVf.I//V", 1, (-407));
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "T", 12, (-411));
      Integer integer0 = new Integer(12);
      Integer integer1 = new Integer(940);
      Integer integer2 = new Integer(86);
      Integer.getInteger("GLOBAL");
      Integer integer3 = new Integer(989);
      Integer integer4 = new Integer(1287);
      Integer integer5 = new Integer(989);
      Integer integer6 = new Integer(33);
      Integer.getInteger("~kJ)", 989);
      Integer integer7 = new Integer(178);
      Integer.getInteger("T");
      Integer.getInteger("", integer4);
      int int0 = Integer.divideUnsigned(1146, 989);
      Integer.getInteger("o\"G x:1:*hvDX ", integer7);
      foreignKeyConstraint0.isReal();
      Integer integer8 = new Integer(86);
      Integer integer9 = new Integer((-78));
      Integer integer10 = new Integer((-411));
      Integer integer11 = new Integer(1287);
      Integer integer12 = new Integer((-14));
      Integer.getInteger("T", integer12);
      Integer integer13 = new Integer((-1696));
      assertFalse(integer13.equals((Object)int0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "n<uxd{mXm-JV6.+//V", (-407), 67);
      Config config0 = Config.getInstance();
      config0.getMaxDbThreads();
      config0.setGraphvizDir("UTF-8");
      config0.setRenderer("UTF-8");
      config0.setSingleSignOn(false);
      config0.setSchemaSpec("UTF-8");
      config0.isLogoEnabled();
      config0.setRenderer("UTF-8");
      Config config1 = new Config();
      foreignKeyConstraint0.isRestrictDelete();
      config0.setDbType("UTF-8");
      config0.setOutputDir("UTF-8");
      config0.isHtmlGenerationEnabled();
      config1.setNumRowsEnabled(true);
      Pattern.compile("UTF-8");
      config1.getCharset();
      Integer integer0 = new Integer(1);
      System.setCurrentTimeMillis((-1633));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      LinkedList<TableColumn> linkedList1 = new LinkedList<TableColumn>();
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      linkedList1.offerLast(tableColumn0);
      linkedList1.add(tableColumn0);
      linkedList1.add(tableColumn0);
      tableColumn0.unlinkParents();
      linkedList1.add(tableColumn0);
      linkedList1.add((TableColumn) null);
      linkedList1.add((TableColumn) null);
      TableColumn tableColumn1 = linkedList1.poll();
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      linkedList1.add((TableColumn) null);
      TableColumn tableColumn2 = new TableColumn((Table) null, tableColumnMeta1);
      tableColumn2.unlinkChildren();
      linkedList1.add(tableColumn1);
      tableColumn2.removeChild(tableColumn1);
      tableColumn1.unlinkParents();
      tableColumn1.unlinkChildren();
      tableColumn2.removeParent(tableColumn1);
      tableColumn2.removeParent((TableColumn) null);
      tableColumn2.unlinkParents();
      tableColumn2.unlinkChildren();
      tableColumn2.unlinkChildren();
      linkedList1.add(tableColumn0);
      tableColumn1.removeParent(tableColumn0);
      tableColumn1.removeParent(tableColumn2);
      tableColumn0.removeParent((TableColumn) null);
      TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta2).getComments();
      doReturn((String) null).when(tableColumnMeta2).getDefaultValue();
      doReturn(0).when(tableColumnMeta2).getDigits();
      doReturn((String) null).when(tableColumnMeta2).getId();
      doReturn((String) null).when(tableColumnMeta2).getName();
      doReturn(0).when(tableColumnMeta2).getSize();
      doReturn((String) null).when(tableColumnMeta2).getType();
      doReturn(false).when(tableColumnMeta2).isAutoUpdated();
      doReturn(false).when(tableColumnMeta2).isNullable();
      TableColumn tableColumn3 = new TableColumn((Table) null, tableColumnMeta2);
      tableColumn2.removeChild(tableColumn0);
      tableColumn2.removeChild(tableColumn3);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint((TableColumn) null, tableColumn1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "T", 1, 1);
      Config config0 = Config.getInstance();
      config0.getMaxDbThreads();
      config0.setGraphvizDir("T");
      config0.getPassword();
      config0.isEvaluateAllEnabled();
      config0.setImpliedConstraintsEnabled(false);
      config0.setRenderer("");
      config0.setNumRowsEnabled(true);
      Config config1 = Config.getInstance();
      config0.setSchemaSpec("67B!aqDf4i47/");
      config1.setRenderer("cgst>Q");
      Config config2 = new Config();
      config2.setDbType("U4MCr/,qYr -5d vH");
      config2.setRenderer("");
      Config config3 = new Config();
      config0.setDbType("cgst>Q");
      Config config4 = new Config();
      config0.setDbType("");
      config1.setPromptForPasswordEnabled(true);
      Config config5 = Config.getInstance();
      config5.setHasOrphans(false);
      config4.setNumRowsEnabled(false);
      String[] stringArray0 = new String[0];
      Config config6 = new Config(stringArray0);
      Config.getInstance();
      config5.getSqlFormatter();
      System.setCurrentTimeMillis(1);
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals(1, foreignKeyConstraint0.getUpdateRule());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "D[T", 12, 195);
      Integer integer0 = new Integer(195);
      Integer integer1 = new Integer(981);
      Integer integer2 = new Integer(12);
      Integer integer3 = new Integer(12);
      Integer integer4 = new Integer(981);
      Integer integer5 = new Integer(981);
      Integer integer6 = new Integer(195);
      Integer integer7 = new Integer(195);
      Integer.divideUnsigned(195, 981);
      Integer integer8 = new Integer(12);
      Integer.divideUnsigned(0, 71);
      Integer integer9 = new Integer(195);
      Integer integer10 = new Integer(981);
      Integer integer11 = Integer.getInteger("", integer5);
      Integer integer12 = Integer.getInteger("", integer11);
      Integer integer13 = new Integer(12);
      foreignKeyConstraint0.isCascadeOnDelete();
      Integer integer14 = new Integer(195);
      Integer integer15 = new Integer((-2303));
      Integer integer16 = new Integer(195);
      Integer integer17 = new Integer(12);
      Integer.getInteger("mV1--]ob@Y", integer15);
      Integer integer18 = new Integer(0);
      Integer integer19 = new Integer(195);
      Integer integer20 = new Integer(12);
      Integer.toUnsignedString(71);
      Integer integer21 = new Integer(0);
      Integer.remainderUnsigned(195, (int) integer12);
      Integer.getInteger("D[T", integer6);
      Integer integer22 = new Integer(195);
      assertFalse(integer22.equals((Object)integer12));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "' toP", (-407), (-407));
      Integer integer0 = new Integer((-407));
      Integer.toUnsignedLong((-407));
      Integer.getInteger("`A");
      Integer.getInteger("", (Integer) null);
      Integer integer1 = new Integer((-16));
      Integer.valueOf(11);
      foreignKeyConstraint0.addChildColumn((TableColumn) null);
      Integer.toUnsignedString(83);
      Integer.getInteger("", (-407));
      Config config0 = Config.getInstance();
      config0.getRenderer();
      Integer.toUnsignedLong((-16));
      config0.isViewsEnabled();
      Integer integer2 = new Integer((-31));
      config0.setPort(integer2);
      config0.getParam("cYGLx#9Qx");
      config0.getSqlFormatter();
      config0.getDescription();
      config0.isHtmlGenerationEnabled();
      config0.setRailsEnabled(true);
      System.setCurrentTimeMillis((-407));
      List<TableColumn> list0 = foreignKeyConstraint0.getChildColumns();
      assertTrue(list0.isEmpty());
      assertEquals((-407), foreignKeyConstraint0.getDeleteRule());
      assertEquals((-407), foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.31910599007711
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "GM=GmA3@UhTj", 1, 1);
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getDeleteRuleDescription();
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertTrue(boolean0);
      
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getDeleteRuleAlias();
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Restrict delete", string0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string1);
      
      String string2 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("R", string2);
      
      int int0 = foreignKeyConstraint0.getUpdateRule();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "D[T", 12, 164);
      Integer integer0 = new Integer(164);
      Integer integer1 = new Integer(981);
      Integer integer2 = new Integer(12);
      Integer integer3 = new Integer(12);
      Integer integer4 = new Integer(981);
      Integer integer5 = new Integer(981);
      Integer integer6 = new Integer(164);
      Integer integer7 = new Integer(164);
      Integer.divideUnsigned(12, 981);
      Integer integer8 = new Integer(12);
      Integer.divideUnsigned(0, 71);
      Integer integer9 = new Integer(164);
      Integer integer10 = new Integer(981);
      Integer integer11 = Integer.getInteger("", integer5);
      Integer integer12 = Integer.getInteger("", integer11);
      Integer integer13 = new Integer(12);
      foreignKeyConstraint0.isNullOnDelete();
      Integer integer14 = new Integer(164);
      Integer integer15 = new Integer((-2303));
      Integer integer16 = new Integer(164);
      Integer integer17 = new Integer(12);
      Integer.getInteger("mV1--]ob@Y", integer15);
      Integer integer18 = new Integer(0);
      Integer integer19 = new Integer(164);
      Integer integer20 = new Integer(12);
      Integer.toUnsignedString(71);
      Integer integer21 = new Integer(0);
      Integer.remainderUnsigned(164, (int) integer12);
      Integer.getInteger("D[T", integer6);
      Integer integer22 = new Integer(164);
      assertTrue(integer22.equals((Object)integer16));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "T", 9, (-411));
      Integer integer0 = new Integer(940);
      Integer.getInteger("GLOBAL");
      Integer integer1 = new Integer(989);
      Integer integer2 = new Integer(1287);
      Integer integer3 = new Integer(989);
      Integer integer4 = new Integer(33);
      Integer.getInteger("T", 993);
      Integer integer5 = new Integer(178);
      Integer.divideUnsigned(108, (-411));
      Integer.toUnsignedLong(9);
      Integer.getInteger("GLOBAL", integer1);
      Integer.getInteger("o\"G x:1:*hvDX ", integer5);
      Integer integer6 = new Integer(86);
      Integer integer7 = new Integer((-78));
      Integer integer8 = new Integer((-411));
      Integer integer9 = new Integer(1287);
      Integer integer10 = new Integer((-30));
      Integer.min(178, (-30));
      Integer.getInteger("T", integer10);
      Integer integer11 = new Integer((-1696));
      foreignKeyConstraint0.getDeleteRuleName();
      assertEquals(9, foreignKeyConstraint0.getUpdateRule());
      assertEquals((-411), foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "c&[^~C{0Z(ft(){?*9");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "c&[^~C{0Z(ft(){?*9", (-432), (-432));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c&[^~C{0Z(ft(){?*9");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "c&[^~C{0Z(ft(){?*9");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c&[^~C{0Z(ft(){?*9");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/c&[^~C{0Z(ft(){?*90Assuming ");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile.createTempFile("c&[^~C{0Z(ft(){?*9", "Assuming ");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Integer integer0 = new Integer(16);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      assertEquals((-432), foreignKeyConstraint0.getUpdateRule());
      assertEquals((-432), foreignKeyConstraint0.getDeleteRule());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "T", 12, (-411));
      Integer integer0 = new Integer((-411));
      Integer integer1 = new Integer(981);
      Integer integer2 = new Integer(86);
      Integer integer3 = new Integer(12);
      Integer integer4 = new Integer(981);
      Integer integer5 = new Integer(981);
      Integer integer6 = new Integer(86);
      Integer integer7 = new Integer((-411));
      Integer.divideUnsigned((-2732), 1742);
      Integer integer8 = new Integer(12);
      Integer.divideUnsigned(2465536, 86);
      Integer integer9 = new Integer((-2732));
      Integer integer10 = new Integer((-411));
      Integer integer11 = Integer.getInteger("V3(F7)Bz^b&EvJcqm", integer5);
      Integer integer12 = Integer.getInteger("V3(F7)Bz^b&EvJcqm", integer11);
      Integer integer13 = new Integer(12);
      Integer.getInteger("V3(F7)Bz^b&EvJcqm", (-411));
      Integer integer14 = new Integer((-78));
      Integer integer15 = new Integer((-411));
      Integer integer16 = new Integer((-411));
      Integer integer17 = new Integer((-411));
      Integer integer18 = new Integer(12);
      Integer.toUnsignedString(86);
      Integer.compareUnsigned((-2004), 3792);
      Integer.remainderUnsigned(86, (int) integer12);
      foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals((-411), foreignKeyConstraint0.getDeleteRule());
      assertEquals(12, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.add((TableColumn) null);
      // Undeclared exception!
      try { 
        ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "0hGC^\"=[Mk", (-427), 5);
      foreignKeyConstraint0.addParentColumn((TableColumn) null);
      assertEquals((-427), foreignKeyConstraint0.getUpdateRule());
      assertEquals(5, foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Config config0 = new Config();
      config0.getMaxDbThreads();
      config0.setGraphvizDir("UTF-8");
      config0.setRenderer("UTF-8");
      config0.setSingleSignOn(false);
      config0.setSchemaSpec("UTF-8");
      config0.isLogoEnabled();
      config0.setRenderer("UTF-8");
      Config config1 = new Config();
      config0.isLogoEnabled();
      config0.setDbType("UTF-8");
      config0.setOutputDir("UTF-8");
      config0.isHtmlGenerationEnabled();
      config1.setNumRowsEnabled(true);
      Pattern.compile("UTF-8");
      config1.getCharset();
      config0.getRenderer();
      Integer.toUnsignedLong((-31));
      config1.getParam("UTF-8");
      SqlFormatter sqlFormatter0 = config0.getSqlFormatter();
      config1.getDescription();
      config0.isHtmlGenerationEnabled();
      config0.setRailsEnabled(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "UTF-8";
      config0.setSqlFormatter(sqlFormatter0);
      config1.setSchema("n<uxd{mXm-JV6.+//V");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 1, 3792);
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      linkedList0.offerLast(tableColumn0);
      linkedList0.add(tableColumn0);
      linkedList0.add(tableColumn0);
      tableColumn0.unlinkParents();
      TableColumn tableColumn1 = null;
      linkedList0.add(tableColumn0);
      linkedList0.add((TableColumn) null);
      linkedList0.add((TableColumn) null);
      TableColumn tableColumn2 = linkedList0.poll();
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      linkedList0.add((TableColumn) null);
      TableColumn tableColumn3 = new TableColumn((Table) null, tableColumnMeta1);
      tableColumn3.unlinkChildren();
      linkedList0.add(tableColumn2);
      tableColumn3.removeChild(tableColumn2);
      tableColumn2.unlinkParents();
      tableColumn2.unlinkChildren();
      tableColumn3.removeParent(tableColumn2);
      tableColumn3.removeParent((TableColumn) null);
      tableColumn3.unlinkParents();
      tableColumn3.unlinkChildren();
      tableColumn3.unlinkChildren();
      linkedList0.add((TableColumn) null);
      linkedList0.add(tableColumn0);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint((TableColumn) null, tableColumn0, (-481), 3120);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }
}
