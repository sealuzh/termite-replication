/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 01:33:20 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.File;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("cm.l;s?io.PisEcoySBaneO");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "cm.l;s?io.PisEcoySBaneO";
      stringArray0[1] = "cm.l;s?io.PisEcoySBaneO";
      stringArray0[2] = "cm.l;s?io.PisEcoySBaneO";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("cm.l;s?io.PisEcoySBaneO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7653327875937666
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".ZIP");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ImprovedFile improvedFile1 = ImprovedFile.createTempImprovedFile(".ZIP", ".ZIP", (File) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".ZIP";
      stringArray0[1] = ".ZIP";
      stringArray0[2] = ".ZIP";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector1;
      vector1.addAll((Collection<?>) archiveScanner0.dirsNotIncluded);
      archiveScanner0.processFile(".ZIP");
      archiveScanner0.toFileType(improvedFile0);
      String string0 = null;
      archiveScanner0.toFileType(improvedFile1);
      File file0 = null;
      // Undeclared exception!
      try { 
        archiveScanner0.isArchive(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("PkL$Eq>");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector0 = new Vector<Integer>(1);
      vector0.add((Integer) 1);
      archiveScanner0.dirsNotIncluded = vector0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "PkL$Eq>";
      stringArray0[1] = "PkL$Eq>";
      stringArray0[2] = "PkL$Eq>";
      stringArray0[3] = "PkL$Eq>";
      stringArray0[4] = "PkL$Eq>";
      stringArray0[5] = "PkL$Eq>";
      DirectoryScanner.match("PkL$Eq>", "PkL$Eq>");
      stringArray0[6] = "PkL$Eq>";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      vector0.retainAll(archiveScanner0.dirsNotIncluded);
      ImprovedFile improvedFile1 = improvedFile0.createTempDir(" .wr", "PkL$Eq>");
      archiveScanner0.processDirectory(improvedFile1, "", true);
      Vector<Object> vector1 = new Vector<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      unaryOperator0.compose((Function<? super FilterInputStream, ?>) unaryOperator1);
      Function.identity();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      vector0.parallelStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      try { 
        pipedOutputStream0.connect(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("cgv.l+sio.PiretoryScanner");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "cgv.l+sio.PiretoryScanner";
      stringArray0[1] = "cgv.l+sio.PiretoryScanner";
      stringArray0[2] = "cgv.l+sio.PiretoryScanner";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function<Object, Object> function0 = unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesExcluded = vector0;
      Function<Object, Locale.LanguageRange> function1 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function1);
      function0.apply("cgv.l+sio.PiretoryScanner");
      Function<Object, Object> function2 = unaryOperator1.compose((Function<? super Object, ?>) function0);
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator1);
      Function<Object, Object> function3 = unaryOperator1.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      Function.identity();
      Function<Object, Object> function4 = unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      function4.compose((Function<? super Object, ?>) function0);
      UnaryOperator.identity();
      Function.identity();
      Function<InputStream, String> function5 = (Function<InputStream, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function6 = function4.andThen((Function<? super Object, ?>) unaryOperator0);
      unaryOperator1.compose((Function<? super FilterInputStream, ?>) function5);
      Function.identity();
      function6.apply(function2);
      Function.identity();
      function4.compose((Function<? super Object, ?>) function6);
      function4.compose((Function<? super Integer, ?>) function3);
      unaryOperator1.compose((Function<? super Integer, ?>) function4);
      UnaryOperator.identity();
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function7);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("cgv.l+sio.PiretoryScanner");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".ZIP");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".ZIP";
      stringArray0[1] = ".ZIP";
      stringArray0[2] = ".ZIP";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(".ZIP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("com.lts.io.DirectoryScanner");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.lts.io.DirectoryScanner";
      stringArray0[1] = "com.lts.io.DirectoryScanner";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesNotIncluded = vector0;
      stringArray0[2] = "com.lts.io.DirectoryScanner";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.excludes = stringArray0;
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector1;
      vector1.stream();
      Vector<Object> vector2 = new Vector<Object>();
      archiveScanner0.dirsExcluded = vector2;
      System.setCurrentTimeMillis((-2657L));
      vector2.add((Object) archiveScanner0.dirsIncluded);
      vector1.containsAll(archiveScanner0.dirsIncluded);
      archiveScanner0.processDirectory(improvedFile0, "com.lts.io.DirectoryScanner", true);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("com.lts.io.DirectoryScanner");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.895277974646454
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("PBG<kL$Eq>");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.add((Integer) 1);
      archiveScanner0.dirsNotIncluded = vector0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "PBG<kL$Eq>";
      stringArray0[1] = "PBG<kL$Eq>";
      stringArray0[2] = "PBG<kL$Eq>";
      stringArray0[3] = "PBG<kL$Eq>";
      stringArray0[4] = "PBG<kL$Eq>";
      stringArray0[5] = "PBG<kL$Eq>";
      vector0.retainAll(archiveScanner0.dirsNotIncluded);
      stringArray0[6] = "PBG<kL$Eq>";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      ImprovedFile improvedFile1 = improvedFile0.createTempDir(" .wr", "PBG<kL$Eq>");
      archiveScanner0.scandir(improvedFile0, " .wr", true);
      int int0 = ArchiveScanner.FILE;
      archiveScanner0.processDirectory(improvedFile1, "com.lts.io.ArchiveScanner", true);
      improvedFile1.toURL();
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      vector1.add(object0);
      Integer integer0 = new Integer(1);
      ImprovedFile.createTempImprovedFile("s&lET8<q}y\"", "PBG<kL$Eq>", improvedFile0);
      vector0.add(integer0);
      vector1.stream();
      archiveScanner0.processDirectory(improvedFile1, ":0cDLnB{HD", false);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "?N.jar", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("cm.lts.io.DirectoyScanner");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "cm.lts.io.DirectoyScanner";
      stringArray0[1] = "cm.lts.io.DirectoyScanner";
      stringArray0[2] = "cm.lts.io.DirectoyScanner";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      Object object0 = new Object();
      archiveScanner0.setIncludes(stringArray0);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "cm.lts.io.DirectoyScanner");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.and(predicate0);
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate<Object> predicate8 = predicate7.or(predicate1);
      Predicate<Object> predicate9 = predicate2.and(predicate0);
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate10 = predicate8.and(predicate6);
      Integer integer0 = new Integer(0);
      predicate1.and(predicate3);
      Predicate<Object> predicate11 = Predicate.isEqual((Object) integer0);
      predicate11.and(predicate4);
      predicate0.and(predicate6);
      Predicate<Object> predicate12 = predicate6.negate();
      Predicate<Object> predicate13 = predicate11.or(predicate2);
      Predicate<Object> predicate14 = predicate11.and(predicate12);
      predicate14.negate();
      predicate10.or(predicate13);
      Predicate.isEqual((Object) "cm.lts.io.DirectoyScanner");
      predicate6.and(predicate9);
      predicate10.negate();
      Vector<Integer> vector1 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "cm.lts.io.DirectoyScanner");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("com.lts.io.DiretoryScanner");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.lts.io.DiretoryScanner";
      stringArray0[1] = "com.lts.io.DiretoryScanner";
      stringArray0[2] = "com.lts.io.DiretoryScanner";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      archiveScanner0.dirsIncluded = vector0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) unaryOperator0);
      Function<Object, Object> function0 = unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      function0.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      unaryOperator1.compose((Function<? super FilterInputStream, ?>) function0);
      unaryOperator1.compose((Function<? super Integer, ?>) unaryOperator1);
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.filesNotIncluded = vector1;
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      vector0.replaceAll(unaryOperator0);
      vector0.stream();
      Predicate.isEqual(object0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "com.lts.io.DiretoryScanner");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, Object> function0 = unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator1.apply((Object) null);
      UnaryOperator.identity();
      Function<Object, Object> function1 = unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super Object, ? extends String>) function2);
      function1.apply("");
      Function<Object, Object> function3 = function0.compose((Function<? super Object, ?>) function1);
      function0.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      Function<Object, Object> function4 = unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      function4.andThen((Function<? super Object, ?>) function0);
      Function.identity();
      function4.compose((Function<? super Integer, ?>) function3);
      archiveScanner0.couldHoldIncluded("");
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) function4);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      archiveScanner0.processDirectory(improvedFile0, "", true);
      assertTrue(improvedFile0.canWrite());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, Object> function0 = unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator1.apply((Object) null);
      UnaryOperator.identity();
      Function<Object, Object> function1 = unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super Object, ? extends String>) function2);
      function1.apply("");
      Function<Object, Object> function3 = function0.compose((Function<? super Object, ?>) function1);
      function0.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      Function<Object, Object> function4 = unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      Function<InputStream, String> function5 = (Function<InputStream, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.andThen((Function<? super Object, ?>) function0);
      Function<FilterInputStream, Object> function6 = unaryOperator1.compose((Function<? super FilterInputStream, ?>) function5);
      Function.identity();
      function4.compose((Function<? super Integer, ?>) function3);
      vector0.add((Object) function6);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) function4);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function7);
      archiveScanner0.processDirectory(improvedFile0, "", false);
      assertEquals(0L, improvedFile0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("%aGVTv.z&VA");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%aGVTv.z&VA";
      stringArray0[1] = "%aGVTv.z&VA";
      stringArray0[2] = "%aGVTv.z&VA";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.excludes = stringArray0;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "%aGVTv.z&VA");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate1.or(predicate2);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate5.and(predicate0);
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate9 = predicate8.or(predicate1);
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate12 = predicate9.and(predicate7);
      predicate12.test("%aGVTv.z&VA");
      Predicate<Object> predicate13 = predicate6.and(predicate1);
      predicate2.test(predicate0);
      Predicate<Object> predicate14 = predicate7.and(predicate13);
      predicate7.negate();
      Predicate<Object> predicate15 = predicate2.and(predicate7);
      predicate10.test(predicate15);
      predicate11.negate();
      Predicate<Object> predicate16 = predicate8.negate();
      predicate16.and(predicate9);
      Predicate<Object> predicate17 = predicate11.or(predicate14);
      predicate17.negate();
      predicate1.negate();
      Predicate.isEqual((Object) predicate1);
      predicate17.and(predicate11);
      predicate4.negate();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "%aGVTv.z&VA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("?gS", "?gS");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?gS";
      stringArray0[1] = "?gS";
      stringArray0[2] = "?gS";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector0;
      String[] stringArray1 = new String[5];
      stringArray1[0] = "?gS";
      stringArray1[1] = "?gS";
      stringArray1[2] = "?gS";
      stringArray1[3] = "w\u0006Mw9]030DjR z6";
      stringArray1[4] = "?gS";
      archiveScanner0.setExcludes(stringArray1);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, Object> function0 = unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator1.apply((Object) null);
      UnaryOperator.identity();
      Function<Object, Object> function1 = unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = function1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, Object> function4 = function0.compose((Function<? super Object, ?>) function1);
      function0.compose((Function<? super String, ?>) unaryOperator1);
      Function<Object, Object> function5 = unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      Function<InputStream, String> function6 = (Function<InputStream, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function7 = function5.andThen((Function<? super Object, ?>) function0);
      function1.compose((Function<? super Integer, ?>) function7);
      Function<FilterInputStream, Object> function8 = unaryOperator1.compose((Function<? super FilterInputStream, ?>) function6);
      Function.identity();
      Function<Integer, Object> function9 = function5.compose((Function<? super Integer, ?>) function4);
      vector0.add((Object) function8);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) function9);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "?gS", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("cm.lts.io.DirectoyScanner");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "cm.lts.io.DirectoyScanner";
      stringArray0[1] = "cm.lts.io.DirectoyScanner";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesNotIncluded = vector0;
      stringArray0[2] = "cm.lts.io.DirectoyScanner";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.excludes = stringArray0;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate0.or(predicate5);
      predicate2.or(predicate6);
      Predicate<Object> predicate7 = predicate2.negate();
      predicate7.and(predicate3);
      Predicate<Object> predicate8 = predicate3.or(predicate7);
      predicate4.and(predicate8);
      predicate2.and(predicate4);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "zqL xI(L", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("?gS");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?gS";
      stringArray0[1] = "?gS";
      stringArray0[2] = "?gS";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      unaryOperator1.compose((Function<? super InputStream, ?>) unaryOperator0);
      UnaryOperator.identity();
      Function<Object, Object> function0 = unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator0);
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      UnaryOperator<FilterInputStream> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator1);
      Function<Object, Object> function3 = unaryOperator1.compose((Function<? super Object, ?>) unaryOperator1);
      unaryOperator0.compose((Function<? super Locale.LanguageRange, ?>) function3);
      unaryOperator1.compose((Function<? super String, ?>) function0);
      Function<Object, Object> function4 = unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super FilterInputStream, ?>) unaryOperator2);
      Function.identity();
      Function.identity();
      Function.identity();
      function4.compose((Function<? super Integer, ?>) unaryOperator3);
      Function.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) unaryOperator3);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Object, ? extends String>) function2);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("?gS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("?gS");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?gS";
      stringArray0[1] = "?gS";
      stringArray0[2] = "?gS";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, Object> function0 = unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator1.apply("?gS");
      UnaryOperator.identity();
      Function<Object, Object> function1 = unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = function1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, Object> function4 = unaryOperator1.compose((Function<? super Object, ?>) function1);
      function1.compose((Function<? super String, ?>) unaryOperator1);
      Function<Object, Object> function5 = unaryOperator1.compose((Function<? super Object, ?>) function0);
      unaryOperator0.andThen((Function<? super Object, ?>) function4);
      function1.compose((Function<? super Integer, ?>) function0);
      unaryOperator1.compose((Function<? super FilterInputStream, ?>) function0);
      Function.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) function5);
      vector0.add((Object) function5);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function3);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "BP}_AKh?kpAzpy(iP ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("com.lts.io.DiretoryScanner");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.lts.io.DiretoryScanner";
      stringArray0[1] = "com.lts.io.DiretoryScanner";
      stringArray0[2] = "com.lts.io.DiretoryScanner";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, Object> function0 = unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator1.apply((Object) null);
      UnaryOperator.identity();
      Function<Object, Object> function1 = unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = function1.andThen((Function<? super Object, ? extends String>) function2);
      function1.apply("com.lts.io.DiretoryScanner");
      Function<Object, Object> function4 = function0.compose((Function<? super Object, ?>) function1);
      function0.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      Function<Object, Object> function5 = unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      Function<InputStream, String> function6 = (Function<InputStream, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.andThen((Function<? super Object, ?>) function0);
      Function<FilterInputStream, Object> function7 = unaryOperator1.compose((Function<? super FilterInputStream, ?>) function6);
      Function.identity();
      Function.identity();
      function5.compose((Function<? super Integer, ?>) function4);
      vector0.add((Object) function7);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) function5);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      try { 
        archiveScanner0.processDirectory(improvedFile0, "com.lts.io.DiretoryScanner", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/com.lts.io.DiretoryScanner
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("M~]XsuWqYx!jM<FDg", "hH0J");
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer0 = new Integer((-2080));
      Object object0 = vector1.clone();
      Object object1 = new Object();
      vector1.ensureCapacity((-1216));
      vector0.ensureCapacity(3);
      Object object2 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) vector1;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "hH0J";
      objectArray0[4] = (Object) improvedFile0;
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "hH0J";
      objectArray0[7] = object0;
      objectArray0[8] = object0;
      vector0.toArray(objectArray0);
      Vector<Integer> vector2 = new Vector<Integer>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.filesNotIncluded = (Vector) object0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "M~]XsuWqYx!jM<FDg";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("M~]XsuWqYx!jM<FDg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("com.lts.io.DiretoryScanner");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.lts.io.DiretoryScanner";
      stringArray0[1] = "com.lts.io.DiretoryScanner";
      stringArray0[2] = "com.lts.io.DiretoryScanner";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, Object> function0 = unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.apply(unaryOperator2);
      UnaryOperator.identity();
      Function<Object, Object> function1 = unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = function1.andThen((Function<? super Object, ? extends String>) function2);
      function1.apply("com.lts.io.DiretoryScanner");
      Function<Object, Object> function4 = function0.compose((Function<? super Object, ?>) function1);
      function0.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      Function<Object, Object> function5 = function4.compose((Function<? super Object, ?>) unaryOperator0);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      unaryOperator1.compose((Function<? super FilterInputStream, ?>) function4);
      Function.identity();
      Function.identity();
      function5.compose((Function<? super Object, ?>) function1);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) unaryOperator3);
      unaryOperator1.compose((Function<? super Integer, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("IO error scanning directory ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("M~]XsuWqYx!jM<FDg", "M~]XsuWqYx!jM<FDg");
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      Object[] objectArray0 = new Object[16];
      objectArray0[0] = (Object) "M~]XsuWqYx!jM<FDg";
      Object object0 = vector1.clone();
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) improvedFile0;
      vector1.ensureCapacity((-2080));
      objectArray0[4] = (Object) vector0;
      objectArray0[5] = (Object) vector1;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) vector0;
      vector0.toArray(objectArray0);
      Integer integer0 = new Integer(791);
      Integer integer1 = new Integer(791);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      archiveScanner0.filesNotIncluded = (Vector) object0;
      stringArray0[0] = "2S`oYH5RU";
      stringArray0[1] = "M~]XsuWqYx!jM<FDg";
      stringArray0[2] = "M~]XsuWqYx!jM<FDg";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processFile("!YN_wl8.P! ;}");
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("com.lts.io.DiretoryScanner");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.lts.io.DiretoryScanner";
      stringArray0[1] = "com.lts.io.DiretoryScanner";
      stringArray0[2] = "com.lts.io.DiretoryScanner";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, Object> function0 = unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<InputStream> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Object> function1 = unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      Object object0 = new Object();
      unaryOperator0.apply(object0);
      Function<Object, Object> function2 = unaryOperator0.compose((Function<? super Object, ?>) function1);
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator2);
      Function<Object, Object> function3 = function0.compose((Function<? super Object, ?>) function1);
      function1.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator<InputStream> unaryOperator4 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ?>) function2);
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.compose((Function<? super Object, ?>) function3);
      unaryOperator4.compose((Function<? super FilterInputStream, ? extends InputStream>) unaryOperator3);
      unaryOperator1.compose((Function<? super FilterInputStream, ?>) unaryOperator5);
      unaryOperator1.compose((Function<? super Integer, ?>) unaryOperator0);
      UnaryOperator.identity();
      vector0.stream();
      Object object1 = new Object();
      Predicate.isEqual(object0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("cm.lts.io.DirectoyScanner");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "cm.lts.io.DirectoyScanner";
      stringArray0[1] = "cm.lts.io.DirectoyScanner";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesNotIncluded = vector0;
      stringArray0[2] = "cm.lts.io.DirectoyScanner";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.excludes = stringArray0;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate5.and(predicate3);
      Predicate<Object> predicate7 = predicate3.or(predicate5);
      predicate4.and(predicate7);
      Predicate<Object> predicate8 = predicate7.or(predicate4);
      predicate6.and(predicate3);
      predicate7.negate();
      predicate8.negate();
      Vector<Integer> vector1 = new Vector<Integer>();
      vector1.removeIf(predicate2);
      Vector<Object> vector2 = new Vector<Object>();
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      archiveScanner0.processArchive(improvedFile0, "YuMq");
      assertEquals(0, ArchiveScanner.FILE);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("%aGVTv.z&VA");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%aGVTv.z&VA";
      stringArray0[1] = "%aGVTv.z&VA";
      stringArray0[2] = "%aGVTv.z&VA";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.excludes = stringArray0;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "%aGVTv.z&VA");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate1.or(predicate2);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate5.and(predicate0);
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate9 = predicate8.or(predicate1);
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate8.negate();
      Predicate<Object> predicate12 = predicate11.and(predicate7);
      predicate12.test("%aGVTv.z&VA");
      Predicate<Object> predicate13 = predicate6.and(predicate1);
      predicate2.test(predicate0);
      Predicate<Object> predicate14 = predicate7.and(predicate13);
      Predicate<Object> predicate15 = predicate7.negate();
      predicate10.test(predicate9);
      predicate11.negate();
      Predicate<Object> predicate16 = predicate8.negate();
      predicate16.and(predicate9);
      Vector<FilterInputStream> vector0 = new Vector<FilterInputStream>();
      archiveScanner0.filesExcluded = vector0;
      Predicate<Object> predicate17 = predicate11.or(predicate14);
      predicate17.negate();
      Predicate<Object> predicate18 = predicate15.negate();
      Predicate.isEqual((Object) predicate1);
      predicate18.negate();
      predicate4.negate();
      archiveScanner0.processArchive(improvedFile0, "%aGVTv.z&VA");
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("com.lts.io.DiretoryScanner");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.lts.io.DiretoryScanner";
      stringArray0[1] = "com.lts.io.DiretoryScanner";
      stringArray0[2] = "com.lts.io.DiretoryScanner";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, Object> function0 = unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, Object> function1 = unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super Object, ? extends String>) function2);
      function1.apply("com.lts.io.DiretoryScanner");
      function0.compose((Function<? super Object, ?>) function1);
      function0.compose((Function<? super String, ?>) unaryOperator1);
      Function<Object, Object> function3 = function0.compose((Function<? super Object, ?>) unaryOperator1);
      Function.identity();
      Function<Object, Object> function4 = unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      Function<InputStream, String> function5 = (Function<InputStream, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.andThen((Function<? super Object, ?>) function0);
      Function<FilterInputStream, Object> function6 = unaryOperator1.compose((Function<? super FilterInputStream, ?>) function5);
      function4.compose((Function<? super Integer, ?>) function3);
      vector0.add((Object) function6);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) function4);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function7);
      vector0.replaceAll(unaryOperator0);
      vector0.stream();
      try { 
        archiveScanner0.processDirectory(improvedFile0, "com.lts.io.DiretoryScanner", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/com.lts.io.DiretoryScanner
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "miE");
      ImprovedFile improvedFile0 = new ImprovedFile(".war");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(2, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("cm.l;s?io.PisEcjoySBaneO");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "cm.l;s?io.PisEcjoySBaneO";
      stringArray0[1] = "cm.l;s?io.PisEcjoySBaneO";
      stringArray0[2] = "cm.l;s?io.PisEcjoySBaneO";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "cm.l;s?io.PisEcjoySBaneO");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      predicate5.or(predicate3);
      Predicate<Object> predicate7 = predicate5.and(predicate0);
      Predicate<Object> predicate8 = predicate3.or(predicate1);
      Predicate<Object> predicate9 = predicate6.negate();
      Predicate<Object> predicate10 = predicate9.or(predicate1);
      Predicate<Object> predicate11 = predicate2.and(predicate0);
      Predicate<Object> predicate12 = predicate2.negate();
      Predicate<Object> predicate13 = predicate4.negate();
      predicate2.test("cm.l;s?io.PisEcjoySBaneO");
      predicate12.negate();
      Predicate<Object> predicate14 = predicate12.negate();
      predicate14.negate();
      predicate10.and(predicate8);
      predicate9.test("cm.l;s?io.PisEcjoySBaneO");
      Predicate<Object> predicate15 = predicate11.negate();
      Predicate<Object> predicate16 = predicate7.or(predicate2);
      Predicate<Object> predicate17 = predicate7.and(predicate15);
      predicate0.or(predicate10);
      predicate0.and(predicate5);
      predicate13.negate();
      Predicate.isEqual((Object) predicate17);
      predicate3.and(predicate11);
      predicate16.negate();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "cm.l;s?io.PisEcjoySBaneO", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8548720307766426
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("4A0N4");
      MockFile.createTempFile("?-;0", "4A0N4", (File) improvedFile0);
      Integer integer0 = new Integer((-4320));
      Integer integer1 = new Integer((-4320));
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer2 = new Integer((-355));
      Integer integer3 = new Integer((-261514624));
      Integer integer4 = new Integer((-1466));
      vector0.add(integer4);
      Vector<Integer> vector2 = new Vector<Integer>();
      int int0 = 4;
      vector2.addAll((Collection<? extends Integer>) vector1);
      Integer integer5 = new Integer(4);
      vector2.add(integer5);
      Vector<Integer> vector3 = new Vector<Integer>();
      Vector<Integer> vector4 = new Vector<Integer>();
      ImprovedFile improvedFile1 = improvedFile0.createTempDir();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "?-;0", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("6dd!bNI5n3PF.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.isArchive(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.getExcludedDirectories();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("A0N4.jar", "A0N4.jar");
      Integer integer0 = new Integer(7);
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer1 = new Integer(926);
      Integer integer2 = new Integer((-1052));
      Integer integer3 = new Integer(1024);
      Vector<Integer> vector1 = new Vector<Integer>();
      Vector<Integer> vector2 = new Vector<Integer>();
      int int0 = 872;
      Integer integer4 = new Integer(872);
      Vector<Integer> vector3 = new Vector<Integer>();
      Vector<Integer> vector4 = new Vector<Integer>();
      vector4.add(integer1);
      Vector<Integer> vector5 = new Vector<Integer>();
      Vector<Integer> vector6 = new Vector<Integer>();
      Integer integer5 = new Integer(926);
      Integer integer6 = new Integer((-26587893));
      vector5.add(integer6);
      Vector<Integer> vector7 = new Vector<Integer>();
      Vector<Integer> vector8 = new Vector<Integer>();
      ImprovedFile improvedFile1 = improvedFile0.createTempDir();
      ImprovedFile improvedFile2 = improvedFile1.createTempDir();
      ImprovedFile.rmdir(improvedFile1, true);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile2);
      String string0 = null;
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "A0N4.jar", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("PG<k*DEq5");
      ImprovedFile improvedFile1 = improvedFile0.createTempDir(".'%war", "PG<k*DEq5");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 5;
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      archiveScanner0.toFileType(improvedFile1);
      PipedInputStream pipedInputStream1 = new PipedInputStream(5);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      Enumeration<InputStream> enumeration0 = null;
      int int1 = (-274072840);
      PipedInputStream pipedInputStream3 = null;
      try {
        pipedInputStream3 = new PipedInputStream((-274072840));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("com.lts.io.DirectoryScanner");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.lts.io.DirectoryScanner";
      stringArray0[1] = "com.lts.io.DirectoryScanner";
      stringArray0[2] = "com.lts.io.DirectoryScanner";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.isArchive(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.getExcludedDirectories();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "dd!bNI5n3Pe";
      ImprovedFile improvedFile0 = new ImprovedFile("dd!bNI5n3Pe");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner2 = new ArchiveScanner(improvedFile0);
      archiveScanner2.isArchive(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner2.getExcludedDirectories();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("d?.", "d?.");
      MockFile.createTempFile("dd!bNI5n3Pe", "d?.", (File) improvedFile0);
      MockFile mockFile0 = new MockFile("dd!bNI5n3Pe");
      ImprovedFile improvedFile1 = new ImprovedFile("Gx/(>(GN2q{p7");
      File file0 = mockFile0.getAbsoluteFile();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      mockFile0.createNewFile();
      MockFile mockFile1 = new MockFile(mockFile0, "nner");
      MockFile mockFile2 = new MockFile(file0, "G=tPK%a>");
      System.setCurrentTimeMillis(1L);
      int int0 = archiveScanner0.toFileType(file0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("cm.lts.io.DirectoyScanner");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "cm.lts.io.DirectoyScanner";
      stringArray0[1] = "cm.lts.io.DirectoyScanner";
      stringArray0[2] = "cm.lts.io.DirectoyScanner";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "cm.lts.io.DirectoyScanner");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      predicate5.or(predicate3);
      Predicate<Object> predicate7 = predicate5.and(predicate0);
      predicate3.or(predicate1);
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate8.or(predicate1);
      predicate2.and(predicate0);
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate10 = predicate4.negate();
      Predicate<Object> predicate11 = predicate9.and(predicate1);
      predicate2.test("cm.lts.io.DirectoyScanner");
      Predicate<Object> predicate12 = predicate1.and(predicate3);
      predicate12.negate();
      predicate0.and(predicate1);
      predicate8.test("cm.lts.io.DirectoyScanner");
      Predicate<Object> predicate13 = predicate5.negate();
      predicate11.or(predicate2);
      Predicate<Object> predicate14 = predicate7.and(predicate13);
      predicate0.or(predicate9);
      predicate0.and(predicate5);
      predicate10.negate();
      Predicate.isEqual((Object) predicate14);
      try { 
        archiveScanner0.scandir(improvedFile0, " ='", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/cm.lts.io.DirectoyScanner
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("cm.l;s?i.PisEcjoySBaneO");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "cm.l;s?i.PisEcjoySBaneO";
      stringArray0[1] = "cm.l;s?i.PisEcjoySBaneO";
      stringArray0[2] = "cm.l;s?i.PisEcjoySBaneO";
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "cm.l;s?i.PisEcjoySBaneO");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate5.or(predicate3);
      Predicate<Object> predicate8 = predicate5.and(predicate0);
      Predicate<Object> predicate9 = predicate3.or(predicate1);
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate<Object> predicate11 = predicate10.or(predicate1);
      Predicate<Object> predicate12 = predicate2.and(predicate0);
      Predicate<Object> predicate13 = predicate2.negate();
      Predicate<Object> predicate14 = predicate4.negate();
      Predicate<Object> predicate15 = predicate7.negate();
      predicate2.test("cm.l;s?i.PisEcjoySBaneO");
      Predicate<Object> predicate16 = predicate13.negate();
      Predicate<Object> predicate17 = predicate16.negate();
      predicate11.and(predicate9);
      predicate1.and(predicate13);
      predicate10.test("cm.l;s?i.PisEcjoySBaneO");
      Predicate<Object> predicate18 = predicate17.negate();
      Predicate<Object> predicate19 = predicate15.or(predicate2);
      Predicate<Object> predicate20 = predicate8.and(predicate18);
      predicate0.or(predicate11);
      predicate0.and(predicate5);
      predicate14.negate();
      Predicate.isEqual((Object) predicate20);
      predicate3.and(predicate12);
      predicate19.negate();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "OJ[|e!eQS.-mVPe");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, cm.l;s?i.PisEcjoySBaneO
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("cm.l;s?i.PsEcjoySBaneO");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "cm.l;s?i.PsEcjoySBaneO";
      stringArray0[1] = "cm.l;s?i.PsEcjoySBaneO";
      stringArray0[2] = "cm.l;s?i.PsEcjoySBaneO";
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "cm.l;s?i.PsEcjoySBaneO");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate4.or(predicate3);
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate3.or(predicate1);
      Predicate<Object> predicate9 = predicate5.negate();
      Predicate<Object> predicate10 = predicate9.or(predicate1);
      Predicate<Object> predicate11 = predicate2.and(predicate0);
      Predicate<Object> predicate12 = predicate2.negate();
      Predicate<Object> predicate13 = predicate0.negate();
      Predicate<Object> predicate14 = predicate6.negate();
      predicate2.test("cm.l;s?i.PsEcjoySBaneO");
      predicate12.negate();
      Predicate<Object> predicate15 = predicate12.negate();
      predicate10.and(predicate8);
      predicate9.test("cm.l;s?i.PsEcjoySBaneO");
      Predicate<Object> predicate16 = predicate15.negate();
      Predicate<Object> predicate17 = predicate14.or(predicate2);
      predicate6.or(predicate8);
      Predicate<Object> predicate18 = predicate7.and(predicate16);
      predicate17.and(predicate0);
      predicate0.or(predicate10);
      predicate0.and(predicate4);
      predicate13.negate();
      Predicate.isEqual((Object) predicate18);
      predicate3.and(predicate11);
      predicate17.negate();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "cm.l;s?i.PsEcjoySBaneO");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, cm.l;s?i.PsEcjoySBaneO
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(",T4GwcV}ss9bF-.%");
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",T4GwcV}ss9bF-.%";
      stringArray0[1] = ",T4GwcV}ss9bF-.%";
      stringArray0[2] = ",T4GwcV}ss9bF-.%";
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ",T4GwcV}ss9bF-.%");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate4.or(predicate3);
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate3.or(predicate1);
      Predicate<Object> predicate9 = predicate5.negate();
      Predicate<Object> predicate10 = predicate9.or(predicate1);
      Predicate<Object> predicate11 = predicate2.and(predicate0);
      Predicate<Object> predicate12 = predicate2.negate();
      Predicate<Object> predicate13 = predicate0.negate();
      predicate7.test(predicate6);
      Predicate<Object> predicate14 = predicate6.negate();
      predicate13.and(predicate2);
      predicate2.test(",T4GwcV}ss9bF-.%");
      predicate12.negate();
      predicate10.and(predicate8);
      predicate9.test(",T4GwcV}ss9bF-.%");
      Predicate<Object> predicate15 = predicate5.negate();
      Predicate<Object> predicate16 = predicate14.or(predicate2);
      predicate6.or(predicate8);
      Predicate<Object> predicate17 = predicate7.and(predicate15);
      predicate16.and(predicate0);
      predicate0.or(predicate10);
      predicate0.and(predicate4);
      predicate14.negate();
      Predicate.isEqual((Object) predicate17);
      predicate3.and(predicate11);
      predicate16.negate();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, ",T4GwcV}ss9bF-.%");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, ,T4GwcV}ss9bF-.%
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(1110);
      Integer integer1 = new Integer(1110);
      Integer integer2 = new Integer(1110);
      vector0.add((Integer) null);
      Vector<Integer> vector1 = new Vector<Integer>();
      Vector<Integer> vector2 = new Vector<Integer>();
      vector2.add((Integer) null);
      Integer integer3 = new Integer((-187168594));
      vector2.add(integer3);
      Integer integer4 = new Integer((-352));
      vector2.addElement(integer4);
      vector0.add(integer1);
      Vector<Integer> vector3 = new Vector<Integer>();
      vector2.add((Integer) null);
      Vector<Integer> vector4 = new Vector<Integer>();
      Integer integer5 = new Integer(1110);
      Integer integer6 = new Integer(1110);
      Vector<Integer> vector5 = new Vector<Integer>();
      vector2.add(integer3);
      Integer integer7 = new Integer((-187168594));
      Vector<Integer> vector6 = new Vector<Integer>();
      Vector<Integer> vector7 = new Vector<Integer>();
      Integer integer8 = new Integer(1110);
      Vector<Integer> vector8 = new Vector<Integer>();
      vector7.add(integer1);
      Integer integer9 = new Integer((-187168594));
      vector7.add(integer9);
      Integer integer10 = new Integer(1110);
      vector6.add(integer9);
      Integer integer11 = new Integer(1110);
      vector0.add(integer5);
      Vector<Integer> vector9 = new Vector<Integer>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, "<exKp7.i`vH;j0g5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }
}
