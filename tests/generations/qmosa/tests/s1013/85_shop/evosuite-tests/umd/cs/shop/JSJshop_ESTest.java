/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 00:49:04 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.HeadlessException;
import java.awt.Scrollbar;
import java.awt.datatransfer.DataFlavor;
import java.awt.event.ComponentListener;
import java.awt.event.ContainerListener;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.WindowListener;
import java.io.BufferedReader;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StreamTokenizer;
import java.net.Proxy;
import java.text.AttributedCharacterIterator;
import java.util.Collection;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import javax.swing.ImageIcon;
import javax.swing.JApplet;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshop;
import umd.cs.shop.JSJshopNode;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSListLogicalAtoms;
import umd.cs.shop.JSOperator;
import umd.cs.shop.JSPlan;
import umd.cs.shop.JSPlanningDomain;
import umd.cs.shop.JSState;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTState;
import umd.cs.shop.JSTaskAtom;
import umd.cs.shop.JSTasks;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSJshop_ESTest extends JSJshop_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.7910724503111042
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("farp.shp");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "8G*d7,@,(?&iJ72");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      JSJshop jSJshop0 = new JSJshop();
      JSJshopVars.greaterT = (int) (byte)13;
      jSJshop0.testParser();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "09;'z=#)(,N");
      MockThread mockThread0 = new MockThread(threadGroup0, "/");
      MockThread mockThread1 = new MockThread(mockThread0, "/");
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[8];
      stringArray0[0] = "y15s:2cw+/` d,j=";
      stringArray0[1] = "y15s:2cw+/` d,j=";
      stringArray0[2] = "8G*d7,@,(?&iJ72";
      stringArray0[3] = "y15s:2cw+/` d,j=";
      stringArray0[4] = "y15s:2cw+/` d,j=";
      stringArray0[5] = "y15s:2cw+/` d,j=";
      stringArray0[6] = "/";
      stringArray0[7] = "y15s:2cw+/` d,j=";
      JSJshop.main(stringArray0);
      System.setCurrentTimeMillis((byte)58);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("X");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      JSJshop jSJshop0 = new JSJshop();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("[ /d`kZpU#cy9&m?>Y");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)30;
      JSJshop.corbaToHicap = true;
      JSJshopVars.backquote = 266;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      JSJshop jSJshop1 = new JSJshop();
      jSJshop0.getBufferedReader("X", "", (JApplet) null);
      ClassLoader.getSystemClassLoader();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      int int0 = 504;
      defaultTableModel0.fireTableRowsInserted(504, (-311));
      StreamTokenizer streamTokenizer0 = null;
      JSTasks jSTasks0 = null;
      try {
        jSTasks0 = new JSTasks((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.563023629494366
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("farp.shp");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)58;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      JSJshop jSJshop0 = new JSJshop();
      JSJshopVars.backquote = (int) (byte)13;
      jSJshop0.testParser();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "/");
      MockThread mockThread1 = new MockThread(mockThread0, "/");
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread0, "y15s:2cw+/` d,j=", (byte)58);
      ThreadGroup threadGroup2 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread3 = new MockThread(threadGroup2, "NJr1");
      mockThread1.getUncaughtExceptionHandler();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread1.getUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      MockThread mockThread4 = new MockThread(mockThread1);
      mockThread1.getContextClassLoader();
      ThreadGroup threadGroup3 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread5 = new MockThread(threadGroup3, "Reading file ");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.getParent();
      mockThread2.getContextClassLoader();
      DataFlavor dataFlavor0 = null;
      try {
        dataFlavor0 = new DataFlavor("+I", "-#[;M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // failed to parse:+I
         //
         verifyException("java.awt.datatransfer.DataFlavor", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.7273294867607687
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("farp.shp");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "vN@");
      byte byte0 = (byte)13;
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)58;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      JSJshop jSJshop0 = new JSJshop();
      JSJshopVars.rightBrac = (int) (byte)58;
      jSJshop0.testParser();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "/");
      MockThread mockThread1 = new MockThread(mockThread0, "/");
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      mockThread0.run();
      String string0 = "y15s:2cw+/` d,j=";
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread0, "y15s:2cw+/` d,j=", (byte)58);
      DataFlavor dataFlavor0 = DataFlavor.fragmentHtmlFlavor;
      DataFlavor.getTextPlainUnicodeFlavor();
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.117456111453701
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("X");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      JSJshop jSJshop0 = new JSJshop("X", "X");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread("O$.BjX5");
      MockThread mockThread1 = new MockThread();
      Thread[] threadArray0 = new Thread[8];
      threadArray0[0] = (Thread) mockThread1;
      threadArray0[1] = (Thread) mockThread0;
      threadArray0[2] = (Thread) mockThread1;
      threadArray0[3] = (Thread) mockThread1;
      threadArray0[4] = (Thread) mockThread1;
      threadArray0[6] = (Thread) mockThread1;
      threadArray0[7] = (Thread) mockThread0;
      MockThread.enumerate(threadArray0);
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      mockThread2.getStackTrace();
      MockThread.dumpStack();
      MockThread mockThread3 = new MockThread(mockThread2);
      Thread[] threadArray1 = new Thread[7];
      MockThread mockThread4 = new MockThread(mockThread1);
      threadArray1[0] = (Thread) mockThread4;
      threadArray1[2] = (Thread) mockThread2;
      threadArray1[3] = (Thread) mockThread1;
      threadArray1[4] = (Thread) mockThread1;
      MockThread mockThread5 = new MockThread("X");
      Thread thread0 = MockThread.currentThread();
      threadArray1[6] = thread0;
      MockThread.enumerate(threadArray1);
      MockThread mockThread6 = new MockThread(mockThread3);
      boolean boolean1 = jSJshop0.parserFile("X");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.5732052067491771
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("farp.shp");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)33;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      JSJshop jSJshop0 = new JSJshop();
      jSJshop0.testParser();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "/");
      MockThread mockThread1 = new MockThread(mockThread0, "/");
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread0, "y15s:2cw+/` d,j=", (byte)33);
      ThreadGroup threadGroup2 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread3 = new MockThread(threadGroup2, "NJr1");
      mockThread1.getUncaughtExceptionHandler();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread1.getUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      MockThread mockThread4 = new MockThread(mockThread1);
      mockThread1.getContextClassLoader();
      ThreadGroup threadGroup3 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread5 = new MockThread(threadGroup3, "Reading file ");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.getParent();
      mockThread2.getContextClassLoader();
      DataFlavor dataFlavor0 = null;
      try {
        dataFlavor0 = new DataFlavor("+I", "-#[;M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // failed to parse:+I
         //
         verifyException("java.awt.datatransfer.DataFlavor", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5732052067491771
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("farp.shp");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)58;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      JSJshop jSJshop0 = new JSJshop();
      JSJshopVars.lessT = (int) (byte)58;
      JSJshopVars.verticalL = (int) (byte)58;
      jSJshop0.testParser();
      MockThread.getDefaultUncaughtExceptionHandler();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      DataFlavor dataFlavor0 = DataFlavor.allHtmlFlavor;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Searching satisfiers for");
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("X");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("X");
      String string0 = "95j85p";
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "95j85p");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ") ");
      JSJshop jSJshop0 = null;
      try {
        jSJshop0 = new JSJshop("X", "X");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5540761036710294
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("farp.shp");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "P3bt7c~Q&APLk(N,|M");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      JSJshop jSJshop0 = new JSJshop();
      jSJshop0.testParser();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "/");
      MockThread mockThread1 = new MockThread(mockThread0, "/");
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread0, "y15s:2cw+/` d,j=", (byte)58);
      MockThread.interrupted();
      MockThread.reset();
      ThreadGroup threadGroup2 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread3 = new MockThread(threadGroup2, "P3bt7c~Q&APLk(N,|M");
      ThreadGroup threadGroup3 = (ThreadGroup)mockThread1.getUncaughtExceptionHandler();
      ThreadGroup threadGroup4 = (ThreadGroup)mockThread1.getUncaughtExceptionHandler();
      MockThread mockThread4 = new MockThread(mockThread1);
      MockThread mockThread5 = new MockThread("P3bt7c~Q&APLk(N,|M");
      mockThread4.getContextClassLoader();
      MockThread mockThread6 = new MockThread(threadGroup4, "y15s:2cw+/` d,j=");
      MockThread.reset();
      mockThread6.getContextClassLoader();
      Thread[] threadArray0 = new Thread[8];
      threadArray0[0] = (Thread) mockThread5;
      threadArray0[0] = (Thread) mockThread2;
      threadArray0[2] = (Thread) mockThread3;
      threadArray0[3] = (Thread) mockThread2;
      threadArray0[4] = (Thread) mockThread1;
      threadArray0[5] = (Thread) mockThread5;
      MockThread mockThread7 = new MockThread();
      threadArray0[6] = (Thread) mockThread7;
      threadArray0[7] = (Thread) mockThread1;
      MockThread.enumerate(threadArray0);
      classLoader0.getParent();
      mockThread4.getContextClassLoader();
      MockThread mockThread8 = new MockThread(threadGroup3, mockThread3);
      MockThread.currentThread();
      // Undeclared exception!
      try { 
        MockThread.enumerate((Thread[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(1460);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.quoteChar(1460);
      streamTokenizer2.ordinaryChar((-45));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.commentChar((-45));
      streamTokenizer3.resetSyntax();
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer3.ordinaryChars((-45), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer3.ordinaryChar(43);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer2.ttype = 2386;
      JSJshop jSJshop0 = new JSJshop();
      System.setCurrentTimeMillis((-4));
      // Undeclared exception!
      try { 
        jSJshop0.processToken(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSJshop", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("X");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ") ");
      String string0 = "X";
      JSJshop jSJshop0 = null;
      try {
        jSJshop0 = new JSJshop("X", "X");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("X");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("X");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "95j85p");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ") ");
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/termite/projects/85_shop");
      FileSystemHandling.setPermissions(evoSuiteFile2, true, true, false);
      JSJshop jSJshop0 = null;
      try {
        jSJshop0 = new JSJshop("X", "X");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSState jSState0 = new JSState();
      JSState jSState1 = new JSState();
      JSListLogicalAtoms jSListLogicalAtoms0 = jSState1.Cdr();
      Object[][] objectArray0 = new Object[0][4];
      Object[] objectArray1 = new Object[5];
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      jSListLogicalAtoms0.add((Object) proxy_Type0);
      objectArray1[0] = (Object) jSPlanningDomain0;
      objectArray1[1] = (Object) jSState0;
      jSPlanningDomain0.print();
      objectArray1[2] = (Object) jSState1;
      objectArray1[3] = (Object) jSTaskAtom0;
      Object object0 = new Object();
      objectArray1[4] = object0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super JSJshopNode, ?>) unaryOperator1);
      jSState0.replaceAll(unaryOperator0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      defaultTableModel0.fireTableRowsInserted(514, 514);
      jSListLogicalAtoms0.add((Object) defaultTableModel0);
      jSState0.standarizerListLogicalAtoms();
      jSListLogicalAtoms0.add(objectArray1[1]);
      JSTState jSTState0 = new JSTState(jSState1, jSState0, jSState1);
      JSTState jSTState1 = new JSTState();
      JSJshop jSJshop0 = new JSJshop();
      // Undeclared exception!
      try { 
        jSJshop0.getAppletURL(")\"8ZV5/}K{s", (JApplet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSJshop", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSState jSState0 = new JSState();
      JSState jSState1 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      Object[][] objectArray0 = new Object[0][4];
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) jSPlanningDomain0;
      objectArray1[1] = (Object) jSState0;
      jSPlanningDomain0.print();
      objectArray1[2] = (Object) jSState1;
      Object object0 = new Object();
      objectArray1[4] = object0;
      UnaryOperator.identity();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      defaultTableModel0.fireTableRowsInserted(514, 514);
      jSPlan0.add((Object) defaultTableModel0);
      JSListLogicalAtoms jSListLogicalAtoms0 = jSState0.standarizerListLogicalAtoms();
      Object object1 = new Object();
      jSListLogicalAtoms0.add(object1);
      JSTState jSTState0 = new JSTState(jSState1, jSPlan0, jSPlan0);
      JSTState jSTState1 = new JSTState();
      // Undeclared exception!
      try { 
        JSJshop.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSJshop", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.117456111453701
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("X");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      JSJshop jSJshop0 = new JSJshop("X", "X");
      SystemInUtil.addInputLine("X");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread("O$.BjX5");
      MockThread mockThread1 = new MockThread();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      mockThread2.getStackTrace();
      MockThread.dumpStack();
      MockThread mockThread3 = new MockThread(mockThread2);
      Thread[] threadArray0 = new Thread[7];
      MockThread mockThread4 = new MockThread(mockThread1);
      threadArray0[0] = (Thread) mockThread4;
      threadArray0[1] = (Thread) mockThread0;
      threadArray0[2] = (Thread) mockThread2;
      threadArray0[3] = (Thread) mockThread1;
      threadArray0[4] = (Thread) mockThread1;
      MockThread mockThread5 = new MockThread(threadArray0[3]);
      MockThread mockThread6 = new MockThread(mockThread5);
      MockThread mockThread7 = new MockThread("X");
      Thread thread0 = MockThread.currentThread();
      MockThread.enumerate(threadArray0);
      MockThread mockThread8 = new MockThread(thread0);
      mockThread2.getContextClassLoader();
      // Undeclared exception!
      try { 
        jSJshop0.parserFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSJshop jSJshop0 = new JSJshop();
      jSJshop0.prob();
      JSState jSState0 = new JSState();
      JSTState jSTState0 = new JSTState(jSState0, jSState0, jSState0);
      jSTState0.deleteList = (JSListLogicalAtoms) jSState0;
      assertTrue(jSTState0.deleteList.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataFlavor dataFlavor0 = DataFlavor.allHtmlFlavor;
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Error in parsing fife";
      stringArray0[1] = "Error in parsing fife";
      stringArray0[2] = "hT1";
      JSJshop.main(stringArray0);
      MockThread mockThread0 = new MockThread();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowListener) aWTEventMulticaster2, (WindowListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster1);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster2, (ComponentListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((MouseMotionListener) aWTEventMulticaster3, (MouseMotionListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster2, (HierarchyListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster2, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((KeyListener) aWTEventMulticaster1, (KeyListener) null);
      AWTEventMulticaster.remove((ComponentListener) aWTEventMulticaster0, (ComponentListener) null);
      AWTEventMulticaster.add((ContainerListener) aWTEventMulticaster5, (ContainerListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster0, (ComponentListener) aWTEventMulticaster5);
      ImageIcon imageIcon0 = new ImageIcon("hT1");
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem(imageIcon0, true);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jRadioButtonMenuItem0, 38, 38, 38, (-1442594453), (-23), 129, 93, (-1442594453), false, 38, 91, 3244, (-1442594453));
      // Undeclared exception!
      try { 
        aWTEventMulticaster6.mouseClicked(mouseWheelEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.awt.event.ComponentListener$MockitoMock$1234984019 cannot be cast to java.awt.event.MouseListener
         //
         verifyException("java.awt.AWTEventMulticaster", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      JSState jSState0 = new JSState();
      jSState0.clone();
      JSState jSState1 = new JSState();
      jSState1.Cdr();
      jSTaskAtom0.addAll((Collection) jSState1);
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      Object object0 = new Object();
      jSState1.standarizerListLogicalAtoms();
      jSState0.add(object0);
      JSState jSState2 = new JSState();
      JSTState jSTState0 = new JSTState(jSState1, jSState0, jSState2);
      JSTState jSTState1 = new JSTState();
      JSJshop jSJshop0 = new JSJshop();
      BufferedReader bufferedReader0 = jSJshop0.getBufferedReader(")\"8ZV5/}K{s", ")\"8ZV5/}K{s", (JApplet) null);
      assertNull(bufferedReader0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSState jSState0 = new JSState();
      JSState jSState1 = new JSState();
      JSListLogicalAtoms jSListLogicalAtoms0 = jSState1.Cdr();
      jSTaskAtom0.addAll((Collection) jSState1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.READING;
      jSSubstitution0.add((Object) jSState1);
      jSTaskAtom0.makeCompound();
      jSState1.add((Object) jSState0);
      jSState0.satisfiesTAm(jSTaskAtom0, jSSubstitution0);
      JSState jSState2 = new JSState();
      JSTState jSTState0 = new JSTState(jSState0, jSListLogicalAtoms0, jSState0);
      JSTState jSTState1 = new JSTState();
      jSTState1.addList = jSListLogicalAtoms0;
      jSTaskAtom0.seekSimplePlan(jSPlanningDomain0, jSTState1);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      System.setCurrentTimeMillis(0L);
      JSJshop jSJshop0 = new JSJshop();
      boolean boolean0 = jSJshop0.parserFile("vu/t'");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(1460);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.quoteChar(1460);
      streamTokenizer2.ordinaryChar((-45));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(pipedReader0);
      streamTokenizer3.resetSyntax();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(pipedReader0);
      streamTokenizer4.whitespaceChars((-4), (-4));
      streamTokenizer4.wordChars(2258, 43);
      streamTokenizer3.ordinaryChar(43);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.slashStarComments(true);
      JSJshop jSJshop0 = new JSJshop();
      System.setCurrentTimeMillis((-4));
      // Undeclared exception!
      try { 
        jSJshop0.processToken(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSJshop", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(1460);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer2.wordChars(1460, (-4));
      streamTokenizer2.resetSyntax();
      streamTokenizer2.quoteChar(1460);
      streamTokenizer2.ordinaryChar((-45));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(pipedReader0);
      streamTokenizer3.resetSyntax();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(pipedReader0);
      streamTokenizer4.whitespaceChars((-4), (-4));
      streamTokenizer4.wordChars((-4), 71);
      streamTokenizer0.commentChar((-4));
      streamTokenizer3.quoteChar((-4));
      streamTokenizer4.ordinaryChar(71);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.slashStarComments(true);
      JSJshop jSJshop0 = new JSJshop();
      // Undeclared exception!
      try { 
        jSJshop0.processToken(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSJshop", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "y15sr2cw+/` d,j=";
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener1 = AWTEventMulticaster.add(keyListener0, keyListener0);
      AWTEventMulticaster.remove(keyListener1, keyListener1);
      AWTEventMulticaster.remove((KeyListener) null, keyListener1);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener2 = AWTEventMulticaster.add(componentListener0, componentListener1);
      AWTEventMulticaster.remove(componentListener2, componentListener2);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener2);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      JSJshop jSJshop0 = new JSJshop();
      JSPlan jSPlan0 = jSJshop0.sol();
      assertNull(jSPlan0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(1460);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.quoteChar(1460);
      streamTokenizer2.ordinaryChar((-45));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.commentChar((-45));
      streamTokenizer3.resetSyntax();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(pipedReader0);
      streamTokenizer4.whitespaceChars((-4), (-4));
      streamTokenizer2.slashStarComments(true);
      streamTokenizer0.commentChar((-4));
      streamTokenizer3.quoteChar((-4));
      streamTokenizer4.ordinaryChar(43);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.slashStarComments(true);
      JSJshop jSJshop0 = new JSJshop();
      jSJshop0.dom();
      JSJshop jSJshop1 = null;
      try {
        jSJshop1 = new JSJshop((String) null, (JSTaskAtom) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "d`kZpU#cy9&m?>Y";
      JSJshop.main(stringArray0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(4674L);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      JSState jSState0 = new JSState();
      JSState jSState1 = new JSState();
      JSListLogicalAtoms jSListLogicalAtoms0 = jSState1.Cdr();
      jSListLogicalAtoms0.print();
      Object[][] objectArray0 = new Object[0][4];
      Object[] objectArray1 = new Object[5];
      objectArray1[1] = (Object) jSState0;
      objectArray1[2] = (Object) jSState1;
      objectArray1[3] = (Object) jSTaskAtom0;
      Object object0 = new Object();
      objectArray1[4] = object0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSState0.replaceAll(unaryOperator0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      defaultTableModel0.isCellEditable((-1952854980), 64);
      defaultTableModel0.fireTableRowsInserted(514, 514);
      jSState0.iterator();
      jSListLogicalAtoms0.add((Object) defaultTableModel0);
      jSState0.standarizerListLogicalAtoms();
      Object object1 = new Object();
      jSState1.add((Object) jSState0);
      JSJshop jSJshop0 = null;
      try {
        jSJshop0 = new JSJshop((String) null, "; ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSJshop jSJshop0 = new JSJshop();
      JSOperator jSOperator0 = new JSOperator();
      jSOperator0.head();
      // Undeclared exception!
      try { 
        jSJshop0.setFile("lOf/`=m[?O", (JSTaskAtom) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSJshop", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte) (-39);
      JSJshop jSJshop0 = new JSJshop();
      jSJshop0.tree();
      DataFlavor dataFlavor0 = DataFlavor.allHtmlFlavor;
      DataFlavor[] dataFlavorArray0 = new DataFlavor[6];
      dataFlavorArray0[0] = null;
      dataFlavorArray0[1] = null;
      dataFlavorArray0[2] = null;
      dataFlavorArray0[3] = null;
      dataFlavorArray0[4] = null;
      dataFlavorArray0[5] = null;
      // Undeclared exception!
      try { 
        DataFlavor.selectBestTextFlavor(dataFlavorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.datatransfer.DataFlavor$TextFlavorComparator", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSJshop jSJshop0 = new JSJshop();
      jSJshop0.getAddList();
      jSJshop0.getDeleteList();
      int int0 = 19;
      Integer integer0 = new Integer(19);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      ComponentListener componentListener2 = AWTEventMulticaster.add((ComponentListener) null, componentListener1);
      ComponentListener componentListener3 = AWTEventMulticaster.add(componentListener1, componentListener1);
      ComponentListener componentListener4 = AWTEventMulticaster.add(componentListener3, componentListener3);
      ComponentListener componentListener5 = null;
      AWTEventMulticaster.add(componentListener4, componentListener4);
      AWTEventMulticaster.add(componentListener1, componentListener1);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster.add((ComponentListener) null, componentListener3);
      ComponentListener componentListener6 = AWTEventMulticaster.add(componentListener2, (ComponentListener) null);
      AWTEventMulticaster.add(componentListener2, componentListener6);
      Scrollbar scrollbar0 = null;
      try {
        scrollbar0 = new Scrollbar();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "h1";
      String string1 = "Fu.)Qo/qYg>|W:8wwUHI";
      JSJshop jSJshop0 = null;
      try {
        jSJshop0 = new JSJshop("h1", "Fu.)Qo/qYg>|W:8wwUHI");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(1460);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.quoteChar(1460);
      streamTokenizer2.ordinaryChar((-45));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(pipedReader0);
      streamTokenizer3.resetSyntax();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(pipedReader0);
      streamTokenizer4.whitespaceChars((-4), (-4));
      streamTokenizer4.wordChars((-4), 43);
      streamTokenizer0.commentChar((-4));
      streamTokenizer4.eolIsSignificant(true);
      streamTokenizer3.quoteChar((-4));
      streamTokenizer4.ordinaryChar(43);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(pipedReader0);
      JSJshop jSJshop0 = null;
      try {
        jSJshop0 = new JSJshop("zy3Zu*w&cv @*qH", (JSTaskAtom) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSJshop", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSState jSState0 = new JSState();
      JSState jSState1 = new JSState();
      JSListLogicalAtoms jSListLogicalAtoms0 = jSState1.Cdr();
      Object[][] objectArray0 = new Object[0][4];
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) jSPlanningDomain0;
      objectArray1[1] = (Object) jSState0;
      jSPlanningDomain0.print();
      objectArray1[2] = (Object) jSState1;
      objectArray1[4] = objectArray1[3];
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSState0.replaceAll(unaryOperator0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      defaultTableModel0.fireTableRowsInserted(514, 514);
      jSState0.standarizerListLogicalAtoms();
      jSListLogicalAtoms0.add(objectArray1[1]);
      JSState jSState2 = new JSState();
      jSState2.add(objectArray1[1]);
      JSTState jSTState0 = new JSTState(jSState2, jSState0, jSState1);
      JSTState jSTState1 = new JSTState();
      JSJshop jSJshop0 = new JSJshop();
      // Undeclared exception!
      try { 
        jSJshop0.testParser();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "y15s:2cw+/` d,j=";
      // Undeclared exception!
      try { 
        JSJshop.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
