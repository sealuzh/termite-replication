/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 02:56:23 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "(A7YXU*M";
      StringReader stringReader0 = new StringReader("(A7YXU*M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1660930735128656
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[11];
      objectArray0[1] = (Object) consumer0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[4] = (Object) comparator0;
      objectArray0[5] = (Object) consumer0;
      objectArray0[2] = (Object) consumer0;
      JSJshopVars.astherisk = (-29);
      jSTerm0.toArray();
      Predicate<Object> predicate0 = Predicate.isEqual(objectArray0[5]);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate.isEqual((Object) predicate2);
      predicate3.test(objectArray0[1]);
      predicate3.or(predicate1);
      predicate3.and(predicate2);
      jSTerm0.toArray(objectArray0);
      Object object0 = new Object();
      jSTerm0.addElement((Object) null);
      jSTerm0.toStr();
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0011929089785596
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tmow>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      StringReader stringReader1 = new StringReader("CC=>UyqowpCz~'E@JZ");
      StringReader stringReader2 = new StringReader("CC=>UyqowpCz~'E@JZ");
      jSTerm0.print();
      StringReader stringReader3 = new StringReader("");
      StringReader stringReader4 = new StringReader("CC=>UyqowpCz~'E@JZ");
      stringReader0.reset();
      stringReader0.ready();
      StringReader stringReader5 = new StringReader("tmow>");
      jSTerm0.addElement("+vqbpk+E\"\"laqZyx");
      System.setCurrentTimeMillis((-4));
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4558487091517962
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[11];
      objectArray0[1] = (Object) consumer0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) comparator0;
      objectArray0[5] = (Object) consumer0;
      objectArray0[6] = (Object) consumer0;
      JSJshopVars.astherisk = (-3);
      jSTerm0.toArray(objectArray0);
      jSTerm0.addElement((Object) null);
      jSTerm0.toStr();
      System.setCurrentTimeMillis(0L);
      jSTerm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7669493950851738
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" A27{X)U*M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      int int0 = (-1755);
      streamTokenizer0.ordinaryChar((-1755));
      jSTerm0.ensureCapacity(41);
      int int1 = 109;
      streamTokenizer0.whitespaceChars((-1755), 109);
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(false);
      StringReader stringReader1 = new StringReader(" A27{X)U*M");
      jSTerm0.addElement((Object) null);
      long long0 = (-1L);
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2017964561056056
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tmow>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      StringReader stringReader1 = new StringReader("CC=>qowpCi~'E@JZ");
      StringReader stringReader2 = new StringReader("CC=>qowpCi~'E@JZ");
      jSTerm0.print();
      streamTokenizer0.ordinaryChars(1561, 1561);
      StringReader stringReader3 = new StringReader("");
      StringReader stringReader4 = new StringReader("CC=>qowpCi~'E@JZ");
      StringReader stringReader5 = new StringReader("tmow>");
      jSTerm0.addElement("$g]CH)s{+@T[,oC(!");
      System.setCurrentTimeMillis((-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.307102025739417
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader(" Ex~Dpeted (");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) comparator0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      predicate3.or(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      predicate1.or(predicate4);
      JSTerm jSTerm0 = new JSTerm();
      predicate0.negate();
      predicate1.and(predicate0);
      Predicate<Object> predicate5 = predicate0.and(predicate2);
      predicate5.negate();
      predicate0.and(predicate1);
      predicate0.and(predicate2);
      predicate4.negate();
      jSTerm0.clone();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8742144929556104
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fDW04TKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer0.ordinaryChars((-2333), (-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.matches(jSTerm0, jSSubstitution1);
      jSTerm1.add((Object) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm1.print();
      jSTerm0.equals(jSTerm2);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm0, jSSubstitution3);
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution4);
      jSTerm4.matches(jSTerm2, jSSubstitution1);
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm1.standardizerTerm();
      jSTerm3.equals(jSTerm2);
      jSTerm4.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7722587699178027
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" A27{XU*M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.addAll((Collection) jSSubstitution0);
      jSTerm2.add((Object) jSSubstitution0);
      JSTerm jSTerm5 = jSTerm3.cloneT();
      jSTerm5.clonePF();
      jSTerm5.equals(jSTerm1);
      jSTerm3.standardizerTerm();
      jSTerm3.remove((Object) jSTerm1);
      JSTerm jSTerm6 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm5.call();
      JSTerm jSTerm7 = null;
      try {
        jSTerm7 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4648231071394098
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader(" Ex~Dpeted (");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) comparator0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      predicate2.and(predicate1);
      predicate0.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate1.and(predicate0);
      Predicate<Object> predicate7 = predicate0.and(predicate2);
      predicate7.negate();
      Predicate<Object> predicate8 = predicate0.and(predicate2);
      Predicate<Object> predicate9 = predicate3.negate();
      Predicate<Object> predicate10 = predicate9.or(predicate0);
      Predicate<Object> predicate11 = predicate6.negate();
      Predicate<Object> predicate12 = predicate11.or(predicate1);
      predicate2.and(predicate11);
      Predicate<Object> predicate13 = predicate5.negate();
      Predicate<Object> predicate14 = predicate12.negate();
      Predicate<Object> predicate15 = predicate4.or(predicate13);
      Predicate<Object> predicate16 = predicate8.negate();
      predicate11.or(predicate7);
      predicate5.negate();
      predicate0.or(predicate16);
      predicate10.negate();
      predicate15.negate();
      Predicate<Object> predicate17 = predicate7.and(predicate11);
      predicate5.negate();
      Predicate<Object> predicate18 = predicate17.negate();
      predicate10.and(predicate18);
      predicate0.or(predicate7);
      predicate14.negate();
      predicate13.negate();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.964864730003903
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fDW0`ThpKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(71, (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.makeFunction();
      streamTokenizer0.ordinaryChars((-2333), (-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.print();
      streamTokenizer0.ttype = 289;
      jSTerm0.equals(jSTerm0);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      JSJshopVars.exclamation = 71;
      jSTerm1.clone();
      jSSubstitution1.add((Object) streamTokenizer0);
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution2.replaceAll(unaryOperator0);
      jSTerm1.matches(jSTerm1, jSSubstitution1);
      jSTerm1.isEval();
      jSTerm0.applySubstitutionT(jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm3.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.669081080155037
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AfDW0`ThpKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.addAll((Collection) jSTerm1);
      jSTerm1.add((Object) jSTerm0);
      JSTerm jSTerm4 = jSTerm0.cloneT();
      jSTerm0.clonePF();
      jSTerm1.equals(jSTerm4);
      jSTerm3.equals(jSTerm4);
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm6.applySubstitutionPF(jSSubstitution0);
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSTerm6.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8602694272780225
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("~?}-!H)*aD&&#Q6;23");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.read();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals("[., [?-!], [nil]]", jSTerm1.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) "?");
      jSSubstitution0.removeElements(jSSubstitution1);
      System.setCurrentTimeMillis((-4));
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3605945173035012
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0W*cG<N2*2OP4x&5T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.clone();
      jSTerm0.firstElement();
      jSTerm0.add((Object) "0.0");
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7386223664319584
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fDW04TKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      int int0 = (-2333);
      streamTokenizer0.ordinaryChars((-2333), (-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.matches(jSTerm0, jSSubstitution1);
      jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.addAll((Collection) jSSubstitution1);
      jSTerm0.isVariable();
      jSTerm1.cloneT();
      JSJshopVars.backquote = 1830;
      jSSubstitution0.addElements(jSSubstitution1);
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution2);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6754623901845855
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PAl7{XU*M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = (-1);
      streamTokenizer0.lowerCaseMode(false);
      jSTerm0.makeFunction();
      jSTerm0.print();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.cloneT();
      JSSubstitution jSSubstitution0 = null;
      jSTerm2.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.trimToSize();
      jSTerm2.print();
      JSTerm jSTerm4 = jSTerm0.cloneT();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm4.equals(jSTerm5);
      streamTokenizer0.sval = "PAl7{XU*M";
      // Undeclared exception!
      try { 
        jSTerm5.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader(">vOtUaXSXe,SXN");
      StringReader stringReader1 = new StringReader(">vOtUaXSXe,SXN");
      StringReader stringReader2 = new StringReader("9Dod-]j|KN?");
      char[] charArray0 = new char[1];
      stringReader2.skip((-3430L));
      charArray0[0] = 'i';
      stringReader2.read(charArray0);
      StringReader stringReader3 = new StringReader("KcoP[smy|C+e6=yfS");
      StringReader stringReader4 = new StringReader("KcoP[smy|C+e6=yfS");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("KcoP[smy|C+e6=yfS");
      jSTerm0.addElement(stringReader2);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7982289752873264
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">=");
      StringReader stringReader1 = new StringReader(">=");
      StringReader stringReader2 = new StringReader(">=");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) ">=");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.removeAll(jSTerm0);
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT((JSSubstitution) null);
      jSTerm3.parallelStream();
      JSJshopVars.whiteSpace = 1160;
      JSTerm jSTerm4 = new JSTerm();
      StreamTokenizer streamTokenizer0 = null;
      JSTerm jSTerm5 = jSTerm2.cloneT();
      jSTerm1.equals(jSTerm5);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm4.matches(jSTerm6);
      // Undeclared exception!
      try { 
        jSTerm6.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5711768350684765
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" A27{XU*M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm3.equals(jSTerm0);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      jSTerm4.applySubstitutionT((JSSubstitution) null);
      jSTerm2.standardizerTerm();
      JSTerm jSTerm5 = (JSTerm)jSTerm4.lastElement();
      jSTerm0.remove((Object) jSTerm5);
      JSTerm jSTerm6 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm7 = null;
      try {
        jSTerm7 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9565577925361763
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" A27{X)U*M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      streamTokenizer0.ordinaryChar((-1755));
      jSTerm0.ensureCapacity(41);
      int int0 = 109;
      streamTokenizer0.whitespaceChars((-1755), 109);
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar((-1755));
      streamTokenizer0.quoteChar(109);
      streamTokenizer0.lowerCaseMode(true);
      int int1 = (-516);
      System.setCurrentTimeMillis((-516));
      jSTerm0.cloneT();
      stringReader0.close();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer1.quoteChar((-1755));
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2786522062521293
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) consumer0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[3] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.addElement(objectArray0[1]);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4340656170129304
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" A27{X)U*M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      jSTerm1.standardizerTerm();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(2204);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2264163268128936
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      StringReader stringReader0 = new StringReader("");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) comparator0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.util.Comparator$MockitoMock$1049756956 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2825231739940643
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(consumer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      String string0 = " ";
      StringReader stringReader0 = new StringReader(" ");
      Predicate.isEqual((Object) comparator0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) stringReader0;
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3385002264339345
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" A27{XU*M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = (-1);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.add((Object) jSTerm1);
      streamTokenizer0.ordinaryChars((-1), (-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.matches(jSTerm1);
      stringReader0.skip(482L);
      jSTerm2.clone();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.518092871565745
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PAl7{XU*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = (-1);
      JSJshopVars.leftPar = 40;
      streamTokenizer0.parseNumbers();
      jSTerm0.makeFunction();
      JSJshopVars.whiteSpace = 1241;
      char[] charArray0 = new char[7];
      streamTokenizer0.commentChar(554);
      charArray0[0] = '3';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "PAl7{XU*");
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSJshopVars.dot = 0;
      JSJshopVars.rightPar = 1241;
      JSJshopVars.leftPar = (-1);
      jSTerm2.clonePF();
      jSTerm2.equals(jSTerm0);
      jSTerm0.standardizerTerm();
      JSJshopVars.equalT = 1241;
      JSJshopVars.dot = 1241;
      JSJshopVars.coma = 1241;
      JSJshopVars.rightBrac = 0;
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, 1241, 1241);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.497717101998263
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PAl7{XU*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = (-1);
      JSJshopVars.leftPar = 40;
      streamTokenizer0.parseNumbers();
      jSTerm0.makeFunction();
      JSJshopVars.whiteSpace = 1241;
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addAll((Collection) jSSubstitution0);
      jSTerm1.add((Object) "PAl7{XU*");
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSJshopVars.dot = 0;
      JSJshopVars.rightPar = 1241;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2089450386236487
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+Sx2si8[");
      StringReader stringReader1 = new StringReader(">vOtUaXSXe,SXN");
      StringReader stringReader2 = new StringReader("sKKm/f>S");
      StringReader stringReader3 = new StringReader("pal7{xuq*");
      StringReader stringReader4 = new StringReader("%%%");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(stringReader3);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.286306589149214
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "fDW04TKG5}kV`];";
      StringReader stringReader0 = new StringReader("fDW04TKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeVariable();
      int int0 = (-2333);
      streamTokenizer0.ordinaryChars((-2333), (-2333));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PAl7{XU*");
      JSJshopVars.leftPar = 40;
      int int0 = 1241;
      JSJshopVars.whiteSpace = 1241;
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addAll((Collection) jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addAll((Collection) jSSubstitution0);
      jSTerm0.add((Object) "PAl7{XU*");
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5179872908529675
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'A';
      charArray0[2] = 'w';
      charArray0[3] = 'H';
      charArray0[4] = 'N';
      charArray0[5] = '%';
      charArray0[6] = 'G';
      charArray0[7] = 'X';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 2, 2);
      stringReader0.read(charBuffer0);
      streamTokenizer0.parseNumbers();
      jSTerm0.removeAllElements();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0426322117102855
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.coma = (-1);
      jSTerm0.makeFunction();
      JSJshopVars.whiteSpace = (-1);
      JSJshopVars.verticalL = (-1);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7490906203903507
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PAl7{XU@O");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(71, 93);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.skip(0L);
      JSSubstitution jSSubstitution1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.483956189232597
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5>cn1!]6!Mxa|\"J\"^%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2332));
      jSTerm0.makeVariable();
      streamTokenizer0.ordinaryChars(1865, (-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      jSTerm1.add((Object) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(true);
      jSSubstitution0.spliterator();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-2), 1865);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.whitespaceChars(1865, (-3642));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars((-4), (-2));
      jSTerm2.toStr();
      // Undeclared exception!
      try { 
        jSSubstitution0.insertElementAt(stringReader0, 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51 > 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.4729000330912068
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9UlG?]fn om&^ ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.parseNumbers();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
      jSSubstitution1.add((Object) jSTerm2);
      jSTerm2.clone();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution2.fail());
      assertTrue(jSTerm1.isConstant());
      
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis(32);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution5);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer3);
      JSTerm jSTerm6 = jSTerm4.cloneT();
      assertFalse(jSTerm6.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm6, jSTerm0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.021661390662468
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      int int0 = (-2795);
      streamTokenizer0.ordinaryChars((-2795), (-2795));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.clone();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.add((Object) "E");
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm1.print();
      jSTerm1.equals(jSTerm2);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution2);
      jSTerm3.applySubstitutionT(jSSubstitution4);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.matches(jSTerm4, jSSubstitution2);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm4.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.857595464324214
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AfDW0`ThpKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.removeAll(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSSubstitution1.cloneS();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.addAll((Collection) jSTerm1);
      jSTerm1.add((Object) jSTerm0);
      JSTerm jSTerm4 = jSTerm0.cloneT();
      jSTerm0.clonePF();
      jSTerm1.equals(jSTerm4);
      jSTerm3.equals(jSTerm4);
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm6.applySubstitutionPF(jSSubstitution0);
      jSTerm2.parallelStream();
      JSJshopVars.colon = (-2);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution1.replaceAll(unaryOperator0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSEvaluate.numericValue(jSTerm3);
      jSSubstitution0.forEach(consumer0);
      jSTerm6.print();
      jSTerm6.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(A7YX)U*M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.test(predicate2);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate2.and(predicate5);
      Predicate<Object> predicate7 = predicate2.and(predicate6);
      predicate2.negate();
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate0.negate();
      predicate4.negate();
      Predicate<Object> predicate10 = Predicate.isEqual((Object) "pal7{xuq*");
      predicate10.and(predicate1);
      predicate1.or(predicate3);
      predicate8.negate();
      Predicate<Object> predicate11 = predicate1.negate();
      predicate2.negate();
      predicate11.negate();
      Predicate<Object> predicate12 = predicate1.and(predicate9);
      predicate7.negate();
      predicate12.negate();
      Predicate.isEqual((Object) predicate11);
      System.setCurrentTimeMillis((-4));
      streamTokenizer0.eolIsSignificant(false);
      StringReader stringReader1 = new StringReader("O[uo>~FAVTH");
      stringReader1.read();
      System.setCurrentTimeMillis((-2438L));
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AfDW0`ThpKG5}kV`];");
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) "AfDW0`ThpKG5}kV`];";
      jSTerm0.toArray(objectArray0);
      Object object0 = new Object();
      System.setCurrentTimeMillis(0L);
      jSTerm0.ensureCapacity((-2891));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9582682878165105
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PAl7{XU*M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = (-1);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.lowerCaseMode(false);
      jSTerm0.makeFunction();
      JSJshopVars.whiteSpace = 107;
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = '@';
      charArray0[2] = '_';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      stringReader0.skip('3');
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.print();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm3.equals(jSTerm0);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      System.setCurrentTimeMillis(107);
      jSTerm0.call();
      jSTerm4.print();
      jSTerm1.addElement((Object) null);
      jSTerm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9597921855213585
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" A27{X)U*M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      streamTokenizer0.ordinaryChar((-1755));
      jSTerm0.ensureCapacity(41);
      streamTokenizer0.whitespaceChars((-1755), 109);
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar((-1755));
      streamTokenizer0.quoteChar(109);
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.ordinaryChars(41, (-516));
      streamTokenizer0.ordinaryChars(1376, (-4));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.quoteChar(41);
      streamTokenizer1.pushBack();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.parseList(streamTokenizer0);
      assertEquals("[nil]", jSTerm3.toString());
      assertFalse(jSTerm3.isVariable());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSSubstitution1.fail());
      
      streamTokenizer0.quoteChar((-2453));
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm4.isEval());
      assertTrue(jSTerm4.isFunction());
      
      JSTerm jSTerm5 = jSTerm1.cloneT();
      JSTerm jSTerm6 = jSTerm5.call();
      assertTrue(jSTerm5.isFunction());
      assertEquals(10, jSTerm5.capacity());
      assertNotSame(jSTerm6, jSTerm5);
      assertTrue(jSTerm6.isFunction());
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("(A27X (A27X ))", stringBuffer0.toString());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("9Dod-]j|KN?");
      StringReader stringReader3 = new StringReader("");
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      jSTerm0.addElement("");
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%gcaCQ");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-3), (-1914));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = null;
      char[] charArray0 = new char[5];
      charArray0[0] = '\'';
      charArray0[1] = '#';
      charArray0[2] = '~';
      charArray0[3] = ')';
      charArray0[4] = '';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, (-2), (-3));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0846916436258858
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fDW04TKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer0.ordinaryChars((-2333), (-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm0, jSSubstitution1);
      jSTerm1.add((Object) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm1.print();
      jSTerm0.equals(jSTerm2);
      jSTerm2.standardizerTerm();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm0, jSSubstitution2);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution4);
      jSTerm3.matches(jSTerm1, jSSubstitution3);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.call();
      jSTerm3.standardizerTerm();
      jSTerm1.equals(jSTerm2);
      jSTerm3.isGround();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm4.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.08618168924287
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fDW04TKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(71, 71);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer0.ordinaryChars((-2333), (-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0);
      stringReader0.skip(71);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm0, jSSubstitution1);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.addAll((Collection) jSSubstitution1);
      jSTerm0.isGround();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSSubstitution0.addElements(jSSubstitution1);
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      jSTerm2.firstElement();
      jSTerm4.matches(jSTerm2, jSSubstitution2);
      jSTerm0.remove((Object) jSSubstitution0);
      JSTerm jSTerm5 = new JSTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.call();
      JSTerm jSTerm6 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.63923288551851
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PAl7{XU*");
      JSJshopVars.leftPar = 40;
      JSJshopVars.whiteSpace = 1241;
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addAll((Collection) jSSubstitution0);
      jSTerm0.add((Object) "PAl7{XU*");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSJshopVars.dot = 0;
      JSJshopVars.rightPar = 1241;
      jSTerm1.clonePF();
      JSJshopVars.equalT = 1241;
      JSJshopVars.dot = 1241;
      jSTerm0.clonePF();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm1.isVariable());
      
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm3, jSTerm2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.4726221781314957
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9UlG?]fn om&^ ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.parseNumbers();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      streamTokenizer2.quoteChar((-4397));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) streamTokenizer3);
      jSSubstitution0.add((Object) stringReader0);
      jSTerm0.clone();
      assertEquals((-2), streamTokenizer0.ttype);
      
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.firstElement();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) streamTokenizer1);
      jSTerm1.applySubstitutionT(jSSubstitution3);
      System.setCurrentTimeMillis((-4));
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      assertFalse(jSTerm3.isFunction());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7500181519104905
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader(">v7tUaXSXVe,SXN");
      StringReader stringReader1 = new StringReader(">v7tUaXSXVe,SXN");
      StringReader stringReader2 = new StringReader("9Dod-]j|KN?");
      StringReader stringReader3 = new StringReader("0r)\"");
      StringReader stringReader4 = new StringReader("");
      JSTerm jSTerm0 = new JSTerm();
      stringReader3.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      jSTerm0.parseList(streamTokenizer0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.1506719848487332
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5>cn1!]6!Mxa|\"J\"^%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChar((-2332));
      jSTerm0.makeVariable();
      int int0 = 1865;
      streamTokenizer0.ordinaryChars(1865, (-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.8545607627328535
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fDW04TKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(71, 71);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.quoteChar((-1));
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.495100515745279
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PAl7{XU@O");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3032310122718718
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" A27{X)U*M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-1755));
      streamTokenizer0.whitespaceChars((-1755), 109);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar((-1121068579));
      streamTokenizer0.quoteChar(109);
      streamTokenizer0.ordinaryChars((-1121068579), (-516));
      streamTokenizer0.ordinaryChars(1376, (-4));
      streamTokenizer1.eolIsSignificant(false);
      stringReader0.read();
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.pushBack();
      JSJshopVars.VarCounter = 109;
      System.setCurrentTimeMillis(1L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      assertEquals("[%%%]", jSTerm1.toString());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.919842981576858
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("'.m>_~\"#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.addAll((Collection) jSPredicateForm0);
      jSTerm0.add((Object) "9.0");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) "9.0");
      jSTerm0.print();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.clone();
      jSSubstitution1.add((Object) jSTerm2);
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution1.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.matches(jSTerm2, jSSubstitution1);
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm4.matches(jSTerm5, jSSubstitution1);
      JSTerm jSTerm6 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.314668266035052
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(A7YX)U*M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.test(predicate2);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate0);
      Predicate<Object> predicate6 = predicate2.and(predicate5);
      predicate2.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate3.or(predicate0);
      predicate4.negate();
      Predicate.isEqual((Object) "pal7{xuq*");
      predicate1.or(predicate3);
      predicate7.negate();
      Predicate<Object> predicate9 = predicate1.negate();
      predicate2.negate();
      predicate9.negate();
      Predicate<Object> predicate10 = predicate1.and(predicate8);
      predicate4.negate();
      predicate10.negate();
      Predicate.isEqual((Object) predicate9);
      System.setCurrentTimeMillis(41);
      stringReader0.read();
      streamTokenizer0.quoteChar(85);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSTerm2.isFunction());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm2.isEval());
      
      JSTerm jSTerm3 = jSTerm0.cloneT();
      assertFalse(jSTerm3.isConstant());
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm3.isFunction());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.190297794824726
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" A27{X)U*M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      jSTerm1.standardizerTerm();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.5161278102797113
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">=");
      StringReader stringReader1 = new StringReader(">=");
      StringReader stringReader2 = new StringReader(">=");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) ">=");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.removeAll(jSTerm0);
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm3.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm4 = new JSTerm();
      StreamTokenizer streamTokenizer0 = null;
      JSTerm jSTerm5 = jSTerm3.cloneT();
      jSTerm1.equals(jSTerm5);
      JSTerm jSTerm6 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm6.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.622388318519258
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">=");
      StringReader stringReader1 = new StringReader(">=");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) ">=");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = null;
      jSTerm3.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.trimToSize();
      StreamTokenizer streamTokenizer0 = null;
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5174813970648213
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("JSUtil>>stringTokenizer is returning %%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer1.slashStarComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(false);
      StringReader stringReader1 = new StringReader("Expecting constant symbol as term");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      int int0 = 96;
      streamTokenizer3.ordinaryChars((-4), 96);
      streamTokenizer0.ordinaryChars((-4), (-4));
      stringReader1.read();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer4.quoteChar(69);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.isGround();
      jSTerm0.call();
      jSTerm0.call();
      System.setCurrentTimeMillis((-1942L));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.9436505840236555
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AfDW0`ThpKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(71, (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.addAll((Collection) jSTerm1);
      jSTerm1.add((Object) jSTerm0);
      JSTerm jSTerm4 = jSTerm0.cloneT();
      jSTerm0.clonePF();
      jSTerm1.equals(jSTerm4);
      jSTerm4.standardizerTerm();
      jSTerm1.remove((Object) jSSubstitution1);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm6 = jSTerm1.call();
      jSTerm0.standardizerTerm();
      JSJshopVars.rightPar = 71;
      jSTerm6.add((Object) jSTerm3);
      jSTerm6.listIterator();
      JSTerm jSTerm7 = new JSTerm();
      jSTerm4.isGround();
      jSTerm4.clone();
      JSTerm jSTerm8 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.6423494043194946
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AfDW0`ThpKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.removeAll(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSSubstitution1.cloneS();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.addAll((Collection) jSTerm1);
      jSTerm1.add((Object) jSTerm0);
      JSTerm jSTerm4 = jSTerm0.cloneT();
      jSTerm0.clonePF();
      jSTerm1.equals(jSTerm4);
      jSTerm3.equals(jSTerm4);
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm6.applySubstitutionPF(jSSubstitution0);
      jSTerm2.parallelStream();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution1.replaceAll(unaryOperator0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSEvaluate.numericValue(jSTerm3);
      jSSubstitution0.forEach(consumer0);
      jSTerm6.standardizerTerm();
      jSTerm1.call();
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm1.isEval());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.9954526651493456
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fDW04TKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer0.ordinaryChars((-2333), (-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.matches(jSTerm0, jSSubstitution1);
      jSTerm1.add((Object) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm1.print();
      jSTerm0.equals(jSTerm2);
      jSTerm2.standardizerTerm();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm0, jSSubstitution3);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution4);
      jSTerm3.matches(jSTerm2, jSSubstitution1);
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.2772569862978458
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = Predicate.isEqual((Object) comparator0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate5);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate1.and(predicate0);
      Predicate<Object> predicate9 = predicate0.and(predicate2);
      predicate9.negate();
      Predicate<Object> predicate10 = predicate0.and(predicate1);
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate<Object> predicate12 = predicate11.or(predicate0);
      Predicate<Object> predicate13 = predicate8.negate();
      predicate13.or(predicate1);
      Predicate<Object> predicate14 = predicate2.and(predicate13);
      Predicate<Object> predicate15 = predicate7.negate();
      predicate14.test(predicate6);
      Predicate<Object> predicate16 = predicate7.negate();
      predicate10.and(predicate15);
      predicate6.or(predicate16);
      Predicate<Object> predicate17 = predicate14.negate();
      predicate13.or(predicate9);
      Predicate.isEqual((Object) predicate4);
      predicate10.or(predicate17);
      predicate12.negate();
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader(" Ex~Dpected (");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Object object1 = jSTerm1.clone();
      jSTerm0.addElement(object1);
      jSTerm1.toStr();
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("[/Ud=>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("equal");
      StringReader stringReader2 = new StringReader("equal");
      StringReader stringReader3 = new StringReader("Fbi3^)JR!7");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.3809682098476954
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 63;
      JSJshopVars.semicolon = 63;
      jSTerm0.listIterator();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeConstant();
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.546611205649969
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(consumer0).toString();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) consumer0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) comparator0;
      objectArray0[3] = (Object) consumer0;
      objectArray0[6] = (Object) consumer0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.addElement(consumer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.makeEval(false);
      boolean boolean0 = jSTerm2.isGround();
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      assertTrue(jSTerm3.isFunction());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm2.isFunction());
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5688603433446962
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("'.m>_~\"#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChar((-1755));
      jSTerm0.ensureCapacity((-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-1755));
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer1.nval = 0.0;
      streamTokenizer1.sval = null;
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), (-1755));
      streamTokenizer0.eolIsSignificant(true);
      stringReader0.read();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.pushBack();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.4648231071394098
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader(" Ex~Dpeted (");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) comparator0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate5);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate1.and(predicate0);
      Predicate<Object> predicate9 = predicate0.and(predicate2);
      predicate9.negate();
      Predicate<Object> predicate10 = predicate0.and(predicate1);
      predicate0.and(predicate2);
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate<Object> predicate12 = predicate11.or(predicate0);
      Predicate<Object> predicate13 = predicate8.negate();
      Predicate<Object> predicate14 = predicate13.or(predicate1);
      Predicate<Object> predicate15 = predicate2.negate();
      Predicate<Object> predicate16 = predicate7.negate();
      Predicate<Object> predicate17 = predicate14.negate();
      predicate6.or(predicate16);
      Predicate<Object> predicate18 = predicate15.negate();
      predicate13.or(predicate9);
      Predicate.isEqual((Object) predicate4);
      predicate10.or(predicate18);
      predicate12.negate();
      predicate6.negate();
      Predicate<Object> predicate19 = predicate9.and(predicate13);
      predicate7.negate();
      Predicate<Object> predicate20 = predicate19.negate();
      predicate12.and(predicate20);
      predicate0.or(predicate9);
      predicate17.and(predicate10);
      predicate16.negate();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("'.m>_~\"#");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChar((-1755));
      jSTerm0.ensureCapacity((-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-1755));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer1.nval = 0.0;
      streamTokenizer1.sval = null;
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), (-1755));
      streamTokenizer0.eolIsSignificant(true);
      stringReader0.read();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.pushBack();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.6288922115877589
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("9.0");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) comparator0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate5);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate1.and(predicate0);
      Predicate<Object> predicate9 = predicate0.and(predicate2);
      predicate9.negate();
      Predicate<Object> predicate10 = predicate0.and(predicate1);
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate<Object> predicate12 = predicate11.or(predicate0);
      Predicate<Object> predicate13 = predicate8.negate();
      predicate13.or(predicate1);
      Predicate<Object> predicate14 = predicate2.and(predicate13);
      Predicate<Object> predicate15 = predicate7.negate();
      Predicate<Object> predicate16 = predicate7.negate();
      Predicate<Object> predicate17 = predicate10.and(predicate15);
      Predicate<Object> predicate18 = predicate6.or(predicate16);
      predicate14.negate();
      predicate13.or(predicate9);
      Predicate.isEqual((Object) predicate4);
      predicate3.negate();
      predicate12.negate();
      predicate18.negate();
      Predicate<Object> predicate19 = predicate9.and(predicate13);
      predicate7.negate();
      Predicate<Object> predicate20 = predicate19.negate();
      predicate15.and(predicate20);
      predicate0.or(predicate9);
      predicate17.and(predicate10);
      predicate16.negate();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.9024533308450557
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader(" Ex~Dpected (");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) comparator0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate5);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate1.and(predicate0);
      Predicate<Object> predicate9 = predicate0.and(predicate2);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate0.and(predicate1);
      Predicate<Object> predicate12 = predicate5.negate();
      predicate4.negate();
      predicate12.or(predicate0);
      Predicate<Object> predicate13 = predicate8.negate();
      predicate13.or(predicate1);
      predicate10.negate();
      Predicate<Object> predicate14 = predicate7.negate();
      predicate14.negate();
      Predicate<Object> predicate15 = predicate7.negate();
      predicate8.and(predicate3);
      predicate11.and(predicate14);
      predicate6.or(predicate15);
      predicate15.or(predicate8);
      predicate13.or(predicate9);
      Predicate.isEqual((Object) predicate4);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      System.setCurrentTimeMillis((-1480L));
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fDW04TKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      streamTokenizer0.slashSlashComments(true);
      StringReader stringReader1 = new StringReader("pal7{xuq*");
      StringReader stringReader2 = new StringReader("pal7{xuq*");
      StringReader stringReader3 = new StringReader("pal7{xuq*");
      StringReader stringReader4 = new StringReader("pal7{xuq*");
      StringReader stringReader5 = new StringReader("9.0");
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.semicolon = (-1);
      jSTerm1.addElement(stringReader1);
      JSTerm jSTerm2 = jSTerm0.call();
      assertTrue(jSTerm2.isConstant());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.2931300021708616
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader(" Ex~Dpected (");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) comparator0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      Predicate<Object> predicate5 = predicate1.negate();
      predicate1.or(predicate5);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate0);
      Predicate<Object> predicate8 = predicate0.and(predicate2);
      predicate8.negate();
      predicate0.and(predicate1);
      Predicate<Object> predicate9 = predicate5.negate();
      Predicate<Object> predicate10 = predicate9.or(predicate0);
      Predicate<Object> predicate11 = predicate7.negate();
      predicate11.or(predicate1);
      predicate4.negate();
      predicate4.negate();
      Predicate<Object> predicate12 = predicate11.negate();
      Predicate<Object> predicate13 = predicate10.and(predicate12);
      predicate10.or(predicate1);
      predicate6.or(predicate4);
      Predicate<Object> predicate14 = predicate11.negate();
      predicate14.or(predicate13);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(predicate4);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.print();
      assertFalse(jSTerm2.isVariable());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("Line : ");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "9TOOw> -");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      StringReader stringReader2 = new StringReader("9TOOw> -");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate.isEqual((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate3.negate();
      jSSubstitution0.add((Object) predicate2);
      Predicate.isEqual((Object) jSSubstitution0);
      predicate1.and(predicate3);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      predicate6.negate();
      predicate5.or(predicate4);
      predicate0.negate();
      predicate5.and(predicate3);
      predicate5.and(predicate1);
      boolean boolean0 = jSTerm0.isGround();
      assertEquals((-2), streamTokenizer0.ttype);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.0417466235818824
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tmow>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer0.ordinaryChars((-2333), (-2333));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm2, jSSubstitution1);
      jSTerm2.add((Object) streamTokenizer0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution4);
      jSTerm0.equals(jSTerm2);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution2.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = jSTerm3.matches(jSTerm1, jSSubstitution4);
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution6);
      JSSubstitution jSSubstitution7 = jSTerm1.matches(jSTerm2, jSSubstitution6);
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = jSTerm1.call();
      jSTerm2.standardizerTerm();
      JSTerm jSTerm7 = new JSTerm();
      jSTerm7.equals(jSTerm2);
      jSTerm7.isGround();
      JSTerm jSTerm8 = jSTerm4.applySubstitutionT(jSSubstitution7);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm6.applySubstitutionT(jSSubstitution2);
      System.setCurrentTimeMillis(945L);
      jSTerm1.call();
      jSTerm8.cloneT();
      assertTrue(jSTerm0.isVariable());
      assertNotSame(jSTerm4, jSTerm8);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.6145591551764051
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(A7YX)U*M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      predicate2.test(predicate3);
      Predicate<Object> predicate4 = predicate3.or(predicate0);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.or(predicate1);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate3.and(predicate7);
      predicate3.negate();
      predicate7.negate();
      Predicate<Object> predicate9 = predicate4.or(predicate0);
      predicate5.negate();
      Predicate<Object> predicate10 = Predicate.isEqual((Object) "pal7{xuq*");
      predicate10.and(predicate2);
      predicate2.or(predicate4);
      predicate10.negate();
      Predicate<Object> predicate11 = predicate2.negate();
      predicate3.negate();
      predicate11.negate();
      Predicate<Object> predicate12 = predicate2.and(predicate9);
      predicate8.negate();
      predicate12.negate();
      Predicate.isEqual((Object) predicate11);
      System.setCurrentTimeMillis(41);
      streamTokenizer0.eolIsSignificant(true);
      StringReader stringReader1 = new StringReader("(A7YX)U*M");
      stringReader1.read();
      streamTokenizer0.quoteChar(40);
      System.setCurrentTimeMillis(41);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isFunction();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PAl7{XU@O");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      JSJshopVars.coma = (-1);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.lowerCaseMode(false);
      jSTerm0.makeFunction();
      JSJshopVars.whiteSpace = 62;
      jSTerm0.isFunction();
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = '@';
      charArray0[2] = '_';
      charArray0[3] = '=';
      charArray0[4] = '.';
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("'.m>_~\"#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChar((-1755));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-2));
      streamTokenizer0.commentChar((-1755));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer1.nval = 0.0;
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.sval = "'.m>_~\"#";
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), (-1755));
      streamTokenizer0.eolIsSignificant(true);
      stringReader0.read();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer1.pushBack();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.spliterator();
      jSTerm0.isConstant();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) consumer0;
      objectArray0[1] = (Object) consumer0;
      jSTerm0.toArray(objectArray0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.1172249767129787
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int int0 = 1241;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("F8gqCOQ`#pH,o5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.isConstant();
      jSTerm0.add((Object) streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.1293992054976025
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(A7YX)U*M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      predicate1.test(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate0);
      predicate3.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate4);
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      predicate1.negate();
      predicate2.or(predicate1);
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate2.or(predicate0);
      predicate3.negate();
      Predicate<Object> predicate9 = Predicate.isEqual((Object) "pal7{xu*");
      predicate9.and(predicate1);
      predicate1.or(predicate2);
      predicate7.negate();
      Predicate<Object> predicate10 = predicate1.negate();
      predicate0.negate();
      Predicate<Object> predicate11 = predicate1.and(predicate8);
      predicate6.negate();
      predicate11.negate();
      Predicate.isEqual((Object) predicate10);
      System.setCurrentTimeMillis(41);
      StringReader stringReader1 = new StringReader("O[uo>~FAVTH");
      streamTokenizer0.pushBack();
      jSTerm0.parseList(streamTokenizer0);
      System.setCurrentTimeMillis(41);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.0446324302033596
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader(" Expected (");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) comparator0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate0.or(predicate0);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate5.or(predicate0);
      predicate6.negate();
      predicate6.and(predicate5);
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate<Object> predicate8 = predicate1.and(predicate2);
      Predicate<Object> predicate9 = predicate7.or(predicate1);
      predicate9.or(predicate3);
      predicate9.negate();
      Predicate<Object> predicate10 = predicate6.or(predicate0);
      predicate8.negate();
      predicate5.and(predicate10);
      predicate2.or(predicate0);
      predicate3.or(predicate1);
      Predicate<Object> predicate11 = predicate0.or(predicate4);
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate2);
      predicate11.negate();
      Predicate<Object> predicate13 = predicate6.or(predicate12);
      predicate13.and(predicate11);
      predicate10.negate();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("'.m>_~\"#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChar((-226));
      streamTokenizer0.whitespaceChars((-226), (-226));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-226));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar((-226));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.ordinaryChars((-1342), 54);
      streamTokenizer1.ordinaryChars((-1104), (-226));
      streamTokenizer2.ordinaryChars((-4), 47);
      streamTokenizer0.eolIsSignificant(false);
      stringReader0.read();
      streamTokenizer2.quoteChar((-2));
      streamTokenizer1.pushBack();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.3423901693012241
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("'.m>_~\"#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChar((-1755));
      streamTokenizer0.whitespaceChars(2985, 2985);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.ttype = 54;
      streamTokenizer1.sval = "xpalm{xu*";
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), (-1194));
      streamTokenizer0.eolIsSignificant(true);
      stringReader0.read();
      streamTokenizer0.quoteChar(54);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
