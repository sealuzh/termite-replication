/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 01:38:03 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.2145591551764051
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7(diP/Vj");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      JSJshopVars.interrogation = (-798);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.removeAllElements();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.167944147734173
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7(diP/Vj");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      JSJshopVars.interrogation = (-798);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.removeAllElements();
      JSJshopVars.whiteSpace = (-798);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.plus = (-2);
      JSTerm jSTerm2 = new JSTerm();
      JSJshopVars.colon = (-798);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9981382497708349
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7(iP/Vj");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.spliterator();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.add((Object) null);
      JSJshopVars.exclamation = 59;
      // Undeclared exception!
      try { 
        jSTerm3.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.19144408195771734
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7(dic/qV");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.greaterT = (-4);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.63509159281281
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7(iP/Vj");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.addElement("7(iP/Vj");
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6904565313848348
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7(diP/Vj");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.289479451683123
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Wl]fn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      int int0 = (-52);
      jSTerm0.makeFunction();
      int int1 = (-3625);
      JSJshopVars.verticalL = (-3625);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.isGround();
      jSTerm1.add((Object) "Wl]fn");
      jSTerm0.matches(jSTerm0);
      jSTerm0.cloneT();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      jSTerm2.trimToSize();
      jSSubstitution0.listIterator();
      // Undeclared exception!
      try { 
        jSTerm1.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8019511397932635
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("xLa");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.spliterator();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      StringReader stringReader1 = new StringReader("xLa");
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.addElement((Object) null);
      jSTerm2.toStr();
      stringReader1.close();
      String string0 = "?";
      StringReader stringReader2 = new StringReader("");
      StringReader stringReader3 = new StringReader("-Nqt4Z=sX}o6<");
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.83341678405105
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JSUtil>>stringTokenizer is returning %%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.add((Object) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.227401213090987
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("xLa");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = (-1);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.equals(jSTerm0);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate2.negate();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm4);
      JSTerm jSTerm5 = jSTerm2.cloneT();
      jSTerm5.equals(jSTerm0);
      jSTerm4.clone();
      jSSubstitution2.listIterator();
      jSTerm2.isGround();
      // Undeclared exception!
      try { 
        jSTerm4.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.284242744155885
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StringReader stringReader1 = new StringReader(".");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.firstElement();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate3.or(predicate2);
      Predicate<Object> predicate6 = predicate0.negate();
      predicate4.negate();
      Predicate<Object> predicate7 = predicate3.or(predicate5);
      Predicate<Object> predicate8 = predicate0.or(predicate1);
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate7.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate11 = predicate9.negate();
      Predicate<Object> predicate12 = predicate9.and(predicate4);
      predicate11.or(predicate12);
      predicate6.or(predicate1);
      Predicate<Object> predicate13 = predicate8.negate();
      Predicate<Object> predicate14 = predicate9.and(predicate10);
      predicate14.and(predicate4);
      predicate13.and(predicate7);
      Predicate<Integer> predicate15 = Predicate.isEqual((Object) predicate10);
      Predicate.isEqual((Object) "");
      predicate9.and(predicate5);
      predicate15.negate();
      predicate7.and(predicate11);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.standardizerTerm();
      jSTerm2.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0764314311861276
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7(iP/Vj");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.spliterator();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate0.or(predicate1);
      Predicate<Object> predicate9 = predicate2.negate();
      predicate9.negate();
      jSSubstitution0.listIterator();
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate<Object> predicate11 = predicate7.and(predicate3);
      Predicate<Integer> predicate12 = Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate13 = predicate11.and(predicate2);
      Predicate<Object> predicate14 = predicate8.negate();
      predicate1.and(predicate3);
      Predicate<Object> predicate15 = predicate10.and(predicate3);
      predicate15.or(predicate3);
      Predicate.isEqual((Object) predicate12);
      Predicate.isEqual((Object) predicate7);
      predicate14.test((Object) null);
      predicate13.negate();
      predicate14.negate();
      predicate1.negate();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.matches(jSTerm3, jSSubstitution0);
      assertEquals("[7.0, [7.0]]", jSTerm0.toString());
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1846608955502482
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7(iP/Vj");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.spliterator();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      predicate3.or(predicate4);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate0.or(predicate1);
      predicate1.negate();
      Predicate<Object> predicate7 = predicate2.negate();
      jSSubstitution0.listIterator();
      Predicate<Object> predicate8 = predicate5.and(predicate1);
      Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate9 = predicate6.and(predicate7);
      predicate5.negate();
      predicate7.and(predicate1);
      Predicate<Object> predicate10 = predicate5.and(predicate6);
      Predicate<Object> predicate11 = predicate8.or(predicate2);
      Predicate.isEqual((Object) "7(iP/Vj");
      predicate10.test(predicate11);
      predicate0.negate();
      predicate3.negate();
      predicate9.negate();
      jSTerm1.isGround();
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm3.print();
      assertEquals("[7.0, [7.0]]", jSTerm0.toString());
      assertTrue(jSTerm0.equals((Object)jSTerm4));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.349792396172401
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?=");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("?=");
      jSTerm0.toString();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.negate();
      predicate2.negate();
      predicate1.negate();
      JSTerm jSTerm1 = new JSTerm();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      JSTerm jSTerm2 = jSTerm0.call();
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      
      jSTerm0.clone();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1332952279024906
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ulg?]fn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = (-52);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.isGround();
      jSTerm1.add((Object) "ulg?]fn");
      JSJshopVars.equalT = (-4822);
      jSTerm0.equals(jSTerm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate2.or(predicate0);
      predicate1.or(predicate4);
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      predicate6.or(predicate3);
      predicate2.negate();
      jSSubstitution0.listIterator();
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate7.or(predicate0);
      Predicate<Object> predicate9 = predicate4.negate();
      predicate8.and(predicate9);
      Predicate<Object> predicate10 = predicate4.and(predicate6);
      predicate5.and(predicate0);
      predicate4.and(predicate8);
      predicate10.negate();
      predicate10.or(predicate0);
      predicate3.or(predicate7);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = ">=";
      StringReader stringReader0 = new StringReader(">=");
      StringReader stringReader1 = new StringReader(">=");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(">=");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.224300499627058
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">=");
      StringReader stringReader1 = new StringReader(">=");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(">=");
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isGround();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm3.equals(jSTerm1);
      Object object0 = jSTerm3.clone();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      Predicate<Object> predicate5 = predicate0.or(predicate3);
      Predicate<Object> predicate6 = predicate5.or(predicate2);
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate1.or(predicate3);
      Predicate<Object> predicate10 = predicate4.negate();
      jSSubstitution0.listIterator();
      predicate9.negate();
      predicate6.or(predicate0);
      predicate9.and(predicate5);
      predicate2.and(predicate5);
      Predicate<Object> predicate11 = predicate8.and(predicate4);
      predicate2.negate();
      predicate7.or(predicate8);
      predicate11.or(predicate10);
      jSTerm2.isGround();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.323834317823924
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?=");
      StringReader stringReader1 = new StringReader("?=");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("?=");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.firstElement();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      predicate0.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      Predicate<Object> predicate5 = predicate0.or(predicate1);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate4.and(predicate1);
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate6.and(predicate1);
      predicate8.or(predicate9);
      predicate3.or(predicate1);
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate6.and(predicate7);
      predicate11.and(predicate1);
      predicate10.and(predicate4);
      Predicate<Integer> predicate12 = Predicate.isEqual((Object) predicate7);
      Predicate.isEqual((Object) "");
      predicate6.and(predicate2);
      predicate12.negate();
      Predicate<Object> predicate13 = predicate4.and(predicate8);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm2);
      jSSubstitution0.add((Object) predicate13);
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$48/1175044550 cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.35768668665144
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fDW0`ThpKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(71, (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer0.ordinaryChars((-2333), (-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeElement(stringReader0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm0.cloneT();
      jSTerm1.equals(jSTerm2);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm3.matches(jSTerm2, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm4.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("G64K^B=pp:0F");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("equal");
      StringReader stringReader2 = new StringReader("equal");
      StringReader stringReader3 = new StringReader("Fbi3^)JR!7");
      stringReader3.skip((-4));
      jSTerm0.makeVariable();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      jSTerm0.isVariable();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2036527492816247
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("xLa");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = (-1);
      jSTerm0.makeFunction();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate0.or(predicate1);
      Predicate<Object> predicate8 = predicate5.negate();
      jSSubstitution0.listIterator();
      Predicate<Object> predicate9 = predicate6.negate();
      predicate0.and(predicate3);
      Predicate<Integer> predicate10 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate11 = predicate7.negate();
      predicate7.negate();
      Predicate<Object> predicate12 = predicate9.and(predicate3);
      Predicate<JSSubstitution> predicate13 = Predicate.isEqual((Object) predicate10);
      predicate11.negate();
      predicate12.test(predicate13);
      predicate9.or(predicate8);
      predicate12.negate();
      jSTerm0.removeIf(predicate4);
      jSTerm1.isGround();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.012322946321909
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("[/Ud=>");
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0084';
      charArray0[1] = '+';
      charArray0[2] = 'j';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("equal");
      StringReader stringReader2 = new StringReader("equal");
      StringReader stringReader3 = new StringReader("Fbi3^)JR!7");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      streamTokenizer0.eolIsSignificant(true);
      char[] charArray1 = new char[4];
      charArray0[2] = '\u0084';
      charArray1[1] = '\u0084';
      charArray1[2] = '+';
      charArray1[3] = '\u0084';
      stringReader0.read(charArray1);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      jSTerm1.standardizerTerm();
      jSTerm1.cloneT();
      StringReader stringReader4 = new StringReader("O>4oMycc2qLro");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader4);
      stringReader4.close();
      streamTokenizer2.quoteChar((-1846));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2036527492816247
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = (-1);
      jSTerm0.makeFunction();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      predicate3.or(predicate5);
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate0.or(predicate1);
      Predicate<Object> predicate8 = predicate5.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.listIterator();
      Predicate<Object> predicate9 = predicate5.negate();
      Predicate<Object> predicate10 = predicate6.and(predicate3);
      Predicate<Integer> predicate11 = Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate12 = predicate10.and(predicate2);
      predicate7.negate();
      Predicate<Object> predicate13 = predicate9.and(predicate3);
      Predicate.isEqual((Object) predicate11);
      predicate12.negate();
      predicate9.or(predicate8);
      predicate13.negate();
      predicate1.negate();
      jSTerm0.removeIf(predicate4);
      jSTerm1.isGround();
      System.setCurrentTimeMillis((-1));
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm0.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7481554572476763
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      StringReader stringReader0 = new StringReader("");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      jSTerm0.add((Object) comparator0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.util.Comparator$MockitoMock$237800422 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1060030727171832
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("[/Ud=>");
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0084';
      charArray0[1] = '+';
      charArray0[2] = 'j';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("equal");
      StringReader stringReader2 = new StringReader("equal");
      StringReader stringReader3 = new StringReader("Fbi3^)JR!7");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      streamTokenizer0.eolIsSignificant(true);
      char[] charArray1 = new char[4];
      charArray0[2] = '\u0084';
      charArray1[1] = '\u0084';
      charArray1[2] = '+';
      charArray1[3] = '\u0084';
      stringReader0.read(charArray1);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1632791009687864
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7(iP/Vj");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.spliterator();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate0.or(predicate1);
      Predicate<Object> predicate9 = predicate2.negate();
      predicate9.negate();
      jSSubstitution0.listIterator();
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate<Object> predicate11 = predicate7.and(predicate3);
      Predicate<Integer> predicate12 = Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate13 = predicate11.and(predicate2);
      Predicate<Object> predicate14 = predicate8.negate();
      predicate1.and(predicate3);
      Predicate<Object> predicate15 = predicate10.and(predicate3);
      predicate15.or(predicate3);
      Predicate.isEqual((Object) predicate12);
      predicate14.test((Object) null);
      predicate13.negate();
      predicate14.negate();
      predicate1.negate();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      assertEquals("[7.0, [7.0]]", jSTerm0.toString());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.47015266781158
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PAl7{XU*M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = (-52);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.isGround();
      jSTerm2.add((Object) "PAl7{XU*M");
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSJshopVars.equalT = (-4822);
      jSTerm3.equals(jSTerm0);
      JSTerm jSTerm4 = (JSTerm)jSTerm2.clone();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm4);
      predicate0.negate();
      JSTerm jSTerm5 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm6 = jSTerm5.cloneT();
      jSTerm1.equals(jSTerm4);
      jSTerm4.standardizerTerm();
      JSTerm jSTerm7 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm6.matches(jSTerm0, jSSubstitution0);
      jSTerm6.applySubstitutionT(jSSubstitution0);
      jSTerm5.containsAll(jSSubstitution1);
      JSTerm jSTerm8 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm8.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.2124273887035923
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7(iP/Vj");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.spliterator();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate0.or(predicate1);
      Predicate<Object> predicate9 = predicate2.negate();
      predicate9.negate();
      jSSubstitution0.listIterator();
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate<Object> predicate11 = predicate7.and(predicate3);
      Predicate<Integer> predicate12 = Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate13 = predicate11.and(predicate2);
      Predicate<Object> predicate14 = predicate8.negate();
      predicate1.and(predicate3);
      Predicate<Object> predicate15 = predicate10.and(predicate3);
      predicate15.or(predicate3);
      Predicate.isEqual((Object) predicate12);
      predicate14.test((Object) null);
      predicate13.negate();
      predicate14.negate();
      predicate1.negate();
      jSTerm2.isGround();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm3, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pal7{xu*m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6357434952314973
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StringReader stringReader1 = new StringReader(".");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.firstElement();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      predicate2.negate();
      predicate3.or(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      jSTerm0.add((Object) predicate4);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5977295736436044
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?=");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("?=");
      jSTerm0.toString();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate0.negate();
      predicate4.negate();
      Predicate<Object> predicate7 = predicate3.or(predicate5);
      predicate7.and(predicate6);
      predicate0.or(predicate1);
      Predicate.isEqual((Object) predicate6);
      predicate5.negate();
      predicate7.and(predicate1);
      StringReader stringReader1 = new StringReader("dip");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      System.setCurrentTimeMillis((-1));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1474L));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.771623955677366
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">=");
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.makeVariable();
      jSTerm0.call();
      jSTerm0.makeConstant();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.coma = (-1);
      jSTerm0.makeFunction();
      JSJshopVars.whiteSpace = (-1);
      JSJshopVars.verticalL = (-1);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(58, 58);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-2));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1210L);
      System.setCurrentTimeMillis((-3445L));
      System.setCurrentTimeMillis(1395L);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(5, stringBuffer0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.374867533938294
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?=");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("?=");
      jSTerm0.toString();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate3);
      Predicate<Object> predicate7 = predicate0.or(predicate0);
      Predicate<Object> predicate8 = predicate3.negate();
      Predicate<Object> predicate9 = predicate6.and(predicate0);
      Predicate<Object> predicate10 = predicate8.negate();
      Predicate<Object> predicate11 = predicate2.or(predicate6);
      Predicate<Object> predicate12 = predicate10.and(predicate4);
      predicate1.and(predicate12);
      Predicate<Object> predicate13 = predicate10.or(predicate2);
      Predicate.isEqual((Object) predicate6);
      predicate1.or(predicate13);
      predicate0.or(predicate5);
      Predicate<Object> predicate14 = predicate2.negate();
      predicate6.and(predicate9);
      Predicate<Object> predicate15 = predicate11.and(predicate5);
      Predicate.isEqual((Object) predicate7);
      predicate15.negate();
      predicate12.and(predicate14);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      assertTrue(jSTerm1.isFunction());
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm2, (JSSubstitution) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm3 = jSTerm2.cloneT();
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm3.isConstant());
      assertEquals("[?%%%]", jSTerm2.toString());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm2.isFunction());
      assertNotSame(jSTerm2, jSTerm3);
      
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm4.isConstant());
      assertTrue(jSTerm4.isFunction());
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm4.isVariable());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.981096754402682
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9UlG?]fn om&^ ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.parseNumbers();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertEquals("[9.0]", jSTerm1.toString());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
      jSSubstitution1.add((Object) jSTerm2);
      jSTerm2.clone();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution2.fail());
      
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis(2659L);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution5);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer3);
      JSTerm jSTerm6 = jSTerm4.cloneT();
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm6.isVariable());
      assertFalse(jSTerm4.isFunction());
      assertNotSame(jSTerm6, jSTerm3);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      System.setCurrentTimeMillis(479L);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.110572676095652
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?>_w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeElement(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.0679759122939765
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSJshopVars.coma = (-52);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Wl]fn");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate2.and(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      predicate6.and(predicate4);
      Predicate<Object> predicate8 = predicate6.or(predicate7);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution2);
      predicate4.test(predicate0);
      predicate3.negate();
      predicate0.negate();
      predicate8.negate();
      jSTerm1.isGround();
      jSTerm0.applySubstitutionT(jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5535743487903986
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("[/Ud=>");
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0084';
      charArray0[1] = '+';
      charArray0[2] = 'j';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("equal");
      StringReader stringReader2 = new StringReader("equal");
      StringReader stringReader3 = new StringReader("Fbi3^)JR!7");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      streamTokenizer0.eolIsSignificant(true);
      char[] charArray1 = new char[4];
      charArray0[2] = '\u0084';
      charArray1[1] = '\u0084';
      streamTokenizer1.ttype = (-155);
      charArray1[2] = '+';
      charArray1[3] = '\u0084';
      stringReader0.read(charArray1);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      streamTokenizer1.parseNumbers();
      boolean boolean0 = jSTerm1.isGround();
      assertEquals("[., [Fbi3], [nil]]", jSTerm1.toString());
      assertTrue(boolean0);
      
      jSTerm1.print();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution0);
      boolean boolean1 = jSTerm0.equals(jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.equals((Object)jSTerm4));
      assertTrue(jSTerm2.isFunction());
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.350775770542846
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?=");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("?=");
      jSTerm0.call();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isGround();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add((Object) "?=");
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.equals(jSTerm0);
      jSTerm0.clone();
      jSTerm1.trimToSize();
      jSSubstitution0.listIterator();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.isGround();
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      jSTerm5.call();
      // Undeclared exception!
      try { 
        jSTerm3.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4651176028850035
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PAl7{XU*M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = (-1);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.lowerCaseMode(false);
      jSTerm0.makeFunction();
      JSJshopVars.whiteSpace = 107;
      char[] charArray0 = new char[7];
      charArray0[1] = '@';
      charArray0[2] = '_';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      stringReader0.skip('\u0000');
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.print();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm3.equals(jSTerm0);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      System.setCurrentTimeMillis(107);
      jSTerm0.call();
      jSTerm4.print();
      jSTerm1.addElement((Object) null);
      jSTerm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2967889811108386
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7(iP/Vj");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.spliterator();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate4.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate0.or(predicate1);
      predicate1.negate();
      jSSubstitution0.listIterator();
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate5.and(predicate3);
      Predicate<Integer> predicate9 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate10 = predicate8.and(predicate2);
      Predicate<Object> predicate11 = predicate6.negate();
      predicate1.and(predicate3);
      Predicate<Object> predicate12 = predicate7.and(predicate3);
      predicate12.or(predicate3);
      Predicate.isEqual((Object) predicate9);
      predicate11.test((Object) null);
      predicate10.negate();
      predicate11.negate();
      predicate1.negate();
      jSTerm2.isGround();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm1.print();
      jSTerm0.toStr();
      assertEquals("[7.0, [7.0]]", jSTerm0.toString());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.0");
      char[] charArray0 = new char[6];
      charArray0[1] = 'p';
      stringReader0.markSupported();
      charArray0[2] = 'd';
      charArray0[3] = 'D';
      charArray0[4] = '_';
      charArray0[5] = 'd';
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader("PKa#p`a< ]Nn");
      StringReader stringReader2 = new StringReader("PKa#p`a< ]Nn");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Z3X0S");
      JSJshopVars.percent = 3;
      jSTerm0.addElement(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.2153881010836147
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("%tmXX5>p0l");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(1246, (-1244));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.dot = (-3);
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("");
      StringReader stringReader3 = new StringReader("");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.446599135291597
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fDW0`ThpKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(71, (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer0.ordinaryChars((-2333), (-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeElement(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm3.equals(jSTerm0);
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      JSJshopVars.exclamation = 71;
      JSJshopVars.semicolon = 71;
      JSJshopVars.flagLevel = 71;
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm3, jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution4);
      JSTerm jSTerm5 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm5.containsAll(jSSubstitution3);
      jSTerm4.call();
      jSTerm5.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm4.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.3579778549873245
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.VarCounter = 1333;
      StringReader stringReader0 = new StringReader("vp)RzVhJ}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("d>'#/yZed");
      StringReader stringReader2 = new StringReader("");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSTerm0.parseList(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.3942470948184624
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?>_w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.0;
      streamTokenizer1.quoteChar(2237);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isGround();
      jSTerm1.add((Object) stringReader0);
      jSTerm1.matches(jSTerm2);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm3.forEach(consumer0);
      jSTerm0.equals(jSTerm1);
      jSTerm1.clone();
      jSSubstitution0.listIterator();
      jSTerm0.isGround();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.159731616075493
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?>_w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.0;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm2.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.805917722294338
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?=");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("?=");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.firstElement();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(58, 58);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-2));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1210L);
      System.setCurrentTimeMillis((-3445L));
      System.setCurrentTimeMillis(1395L);
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertEquals("[?%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8065071652616695
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fDW0`ThpKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(71, 1300);
      streamTokenizer0.ttype = (-2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer0.ordinaryChars((-2333), (-2));
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.get(1709);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1709
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.4978661367769954
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PAl7{XU@O");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.coma = (-4);
      streamTokenizer0.lowerCaseMode(true);
      jSTerm0.makeFunction();
      int int0 = 62;
      streamTokenizer0.nval = (double) 62;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.clone();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.981096754402682
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9UlG?]fn om&^ ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.parseNumbers();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) streamTokenizer3);
      jSSubstitution0.add((Object) streamTokenizer0);
      jSTerm1.clone();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.firstElement();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution2);
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.33993636078058
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?=");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("?=");
      jSTerm0.toString();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate0.negate();
      predicate4.negate();
      Predicate<Object> predicate7 = predicate3.or(predicate5);
      Predicate<Object> predicate8 = predicate0.or(predicate1);
      Predicate<Object> predicate9 = predicate5.negate();
      Predicate<Object> predicate10 = predicate7.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate11 = predicate9.negate();
      predicate3.or(predicate7);
      Predicate<Object> predicate12 = predicate9.and(predicate4);
      predicate11.or(predicate12);
      predicate6.or(predicate1);
      predicate8.negate();
      Predicate<Object> predicate13 = predicate9.and(predicate10);
      predicate13.and(predicate4);
      Predicate<Integer> predicate14 = Predicate.isEqual((Object) predicate10);
      Predicate.isEqual((Object) null);
      predicate14.and(predicate12);
      predicate9.and(predicate5);
      predicate14.negate();
      predicate7.and(predicate11);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm2.isConstant());
      
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      
      JSTerm jSTerm3 = jSTerm1.cloneT();
      assertNotSame(jSTerm1, jSTerm3);
      assertTrue(jSTerm3.isFunction());
      assertTrue(jSTerm1.isFunction());
      
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm4.isConstant());
      assertTrue(jSTerm4.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm4.isFunction());
      assertEquals("[?%%%0]", jSTerm4.toString());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0335620542068176
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PAl7{XU@O");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.0989972655448166
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?=");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("?=");
      jSTerm0.toString();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      predicate4.negate();
      Predicate<Object> predicate7 = predicate3.or(predicate5);
      Predicate<Object> predicate8 = predicate0.or(predicate1);
      Predicate<Object> predicate9 = predicate5.negate();
      Predicate<Object> predicate10 = predicate7.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate11 = predicate9.negate();
      predicate3.or(predicate7);
      Predicate<Object> predicate12 = predicate9.and(predicate4);
      predicate11.or(predicate12);
      predicate6.or(predicate1);
      predicate8.negate();
      Predicate<Object> predicate13 = predicate9.and(predicate10);
      predicate13.and(predicate4);
      Predicate<Integer> predicate14 = Predicate.isEqual((Object) predicate10);
      Predicate.isEqual((Object) "");
      predicate9.and(predicate5);
      predicate14.negate();
      predicate5.negate();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm1, jSTerm3);
      
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm4.isEval());
      assertTrue(jSTerm4.isFunction());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.022456924203762
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?=");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("?=");
      jSTerm0.toString();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      predicate0.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate3);
      Predicate<Object> predicate6 = predicate0.or(predicate1);
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate5.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate9 = predicate7.negate();
      predicate2.or(predicate5);
      Predicate<Object> predicate10 = predicate7.and(predicate1);
      predicate9.or(predicate10);
      predicate4.or(predicate1);
      predicate6.negate();
      Predicate<Object> predicate11 = predicate7.and(predicate8);
      predicate11.and(predicate0);
      Predicate<Integer> predicate12 = Predicate.isEqual((Object) predicate8);
      Predicate.isEqual((Object) "");
      predicate7.and(predicate3);
      predicate12.negate();
      predicate5.and(predicate9);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertTrue(jSTerm2.isFunction());
      assertNotSame(jSTerm1, jSTerm2);
      
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.9652370493802307
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9UlG?]fn om&^ ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.parseNumbers();
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      assertTrue(boolean0);
      
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.firstElement();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis(632L);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertNotSame(jSTerm3, jSTerm0);
      assertTrue(jSTerm2.isConstant());
      assertEquals(1, jSTerm0.size());
      assertNotSame(jSTerm0, jSTerm1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">=");
      StringReader stringReader1 = new StringReader(">=");
      StringReader stringReader2 = new StringReader("");
      StringReader stringReader3 = new StringReader(">=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      stringReader3.reset();
      stringReader3.ready();
      stringReader2.markSupported();
      StringReader stringReader4 = new StringReader("");
      stringReader4.reset();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?>_w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.0;
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.quoteChar(2237);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.sval = streamTokenizer1.sval;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.lowerCaseMode(true);
      StringReader stringReader1 = new StringReader("%%%");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(58, 58);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-2));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = '7';
      charArray0[2] = 'H';
      charArray0[3] = 'w';
      stringReader0.read(charArray0);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1210L);
      System.setCurrentTimeMillis((-3445L));
      System.setCurrentTimeMillis(1395L);
      jSTerm0.print();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.177604496545693
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fDW0`ThpKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(71, 1300);
      streamTokenizer0.ttype = 1300;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      streamTokenizer0.ordinaryChars(71, (-823));
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.standardizerTerm();
      jSTerm1.call();
      jSTerm0.standardizerTerm();
      jSTerm0.standardizerTerm();
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5171515848932913
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fDW0`ThpKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(71, 1300);
      streamTokenizer0.ttype = (-2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      int int0 = (-2333);
      streamTokenizer0.ordinaryChars((-2333), (-2));
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.3280770026657804
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fDW0`ThpKG5}kV`];");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(71, (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.makeFunction();
      streamTokenizer0.ordinaryChars((-1), (-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.print();
      streamTokenizer0.ttype = 289;
      jSTerm0.equals(jSTerm0);
      jSTerm1.standardizerTerm();
      JSJshopVars.exclamation = 71;
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution2.replaceAll(unaryOperator0);
      jSTerm1.matches(jSTerm1, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("[/Ud=>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("equal");
      StringReader stringReader2 = new StringReader("equal");
      StringReader stringReader3 = new StringReader("Fbi3^)JR!7");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?=");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate0.negate();
      predicate4.negate();
      Predicate<Object> predicate7 = predicate3.or(predicate5);
      Predicate<Object> predicate8 = predicate0.or(predicate1);
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate7.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate11 = predicate9.negate();
      Predicate<Object> predicate12 = predicate8.negate();
      predicate11.or(predicate12);
      predicate6.or(predicate1);
      Predicate<Object> predicate13 = predicate8.negate();
      Predicate<Object> predicate14 = predicate9.and(predicate10);
      Predicate.isEqual((Object) "uom");
      predicate14.and(predicate4);
      predicate13.and(predicate7);
      Predicate<Integer> predicate15 = Predicate.isEqual((Object) predicate4);
      Predicate.isEqual((Object) predicate13);
      Predicate.isEqual((Object) "");
      predicate9.and(predicate5);
      predicate15.negate();
      predicate7.and(predicate11);
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.0005073917883625
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7(iP/Vj");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.spliterator();
      jSTerm0.isConstant();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate0.or(predicate1);
      Predicate<Object> predicate9 = predicate2.negate();
      predicate9.negate();
      jSSubstitution0.listIterator();
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate<Integer> predicate11 = Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate12 = predicate3.and(predicate2);
      Predicate<Object> predicate13 = predicate8.negate();
      predicate1.and(predicate3);
      Predicate<Object> predicate14 = predicate10.and(predicate3);
      predicate14.or(predicate3);
      Predicate.isEqual((Object) predicate11);
      Predicate.isEqual((Object) predicate7);
      predicate13.test((Object) null);
      predicate12.negate();
      predicate13.negate();
      predicate1.negate();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm0.isConstant());
      assertNotSame(jSTerm3, jSTerm2);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.513069037175742
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Wl]fn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = (-1);
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      JSJshopVars.verticalL = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.isGround();
      jSTerm2.removeAllElements();
      jSTerm2.add((Object) "Wl]fn");
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm3 = (JSTerm)jSTerm1.clone();
      jSTerm3.trimToSize();
      jSSubstitution0.listIterator();
      jSTerm1.isGround();
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      JSTerm jSTerm5 = jSTerm1.call();
      JSEvaluate.numericValue(jSTerm2);
      JSJshopVars.rightPar = 10;
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm4.toStr();
      JSTerm jSTerm6 = jSTerm2.standardizerTerm();
      jSTerm5.forEach(consumer0);
      jSTerm5.toStr();
      jSTerm6.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1269287948006759
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PKaip`a< ]Nn");
      StringReader stringReader1 = new StringReader(">=");
      StringReader stringReader2 = new StringReader("PAl7{XU*M");
      StringReader stringReader3 = new StringReader("9.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      stringReader2.reset();
      stringReader0.ready();
      streamTokenizer0.lowerCaseMode(true);
      stringReader2.markSupported();
      StringReader stringReader4 = new StringReader(" 3ie$a!W6pj&PfCL");
      stringReader4.ready();
      stringReader4.reset();
      StringReader stringReader5 = new StringReader("1\"W.Gy");
      stringReader2.reset();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(58, 58);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.leftPar = (-2);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-2));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1210L);
      System.setCurrentTimeMillis((-3445L));
      System.setCurrentTimeMillis(1395L);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5746794417481091
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?=");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("?=");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.firstElement();
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate<Object> predicate8 = predicate3.or(predicate5);
      Predicate<Object> predicate9 = predicate0.or(predicate1);
      Predicate<Object> predicate10 = predicate9.negate();
      predicate10.and(predicate7);
      Predicate<Object> predicate11 = predicate8.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate12 = predicate10.negate();
      Predicate<Object> predicate13 = predicate10.and(predicate4);
      predicate12.or(predicate13);
      predicate6.test(jSTerm0);
      Predicate.isEqual((Object) predicate9);
      predicate6.or(predicate1);
      predicate9.negate();
      predicate10.and(predicate11);
      Predicate.isEqual((Object) "uom");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-1848918707), (-1848918707));
      jSTerm0.spliterator();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm2.call();
      assertFalse(jSTerm2.isConstant());
      assertEquals("[?%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm3.isVariable());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.796311640173813
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.0");
      StringReader stringReader1 = new StringReader("PKa#p`a< ]Nn");
      StringReader stringReader2 = new StringReader("PKa#p`a< ]Nn");
      System.setCurrentTimeMillis(0L);
      stringReader0.ready();
      System.setCurrentTimeMillis(3439L);
      System.setCurrentTimeMillis(311L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.5297061990576545
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7(diP/Vj");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      assertEquals((-2), streamTokenizer0.ttype);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate3.or(predicate0);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      Predicate<Object> predicate7 = predicate6.and(predicate2);
      Predicate<Object> predicate8 = predicate1.negate();
      predicate1.or(predicate4);
      Predicate<Object> predicate9 = predicate8.and(predicate2);
      Predicate<Object> predicate10 = predicate7.and(predicate4);
      Predicate<Object> predicate11 = predicate8.or(predicate9);
      Predicate.isEqual((Object) "7(diP/Vj");
      Predicate<Object> predicate12 = predicate8.or(predicate7);
      Predicate<Object> predicate13 = predicate1.or(predicate5);
      Predicate<Object> predicate14 = predicate1.negate();
      Predicate<Object> predicate15 = predicate10.negate();
      predicate15.and(predicate4);
      predicate15.and(predicate11);
      Predicate<Integer> predicate16 = Predicate.isEqual((Object) null);
      predicate7.negate();
      Predicate<Integer> predicate17 = Predicate.isEqual((Object) predicate8);
      Predicate.isEqual((Object) predicate4);
      Predicate<Integer> predicate18 = predicate16.and(predicate17);
      predicate0.and(predicate12);
      predicate18.negate();
      predicate13.and(predicate14);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.print();
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1269287948006759
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = "+EZo=K\"1";
      StringReader stringReader0 = new StringReader("+EZo=K\"1");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.796311640173813
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSJshopVars.coma = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate0.or(predicate1);
      Predicate<Object> predicate9 = predicate5.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.listIterator();
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate<Object> predicate11 = predicate7.and(predicate3);
      Predicate<Integer> predicate12 = Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate13 = predicate11.and(predicate2);
      predicate8.negate();
      Predicate<Object> predicate14 = predicate10.and(predicate3);
      Predicate.isEqual((Object) predicate12);
      predicate13.negate();
      predicate14.negate();
      predicate1.negate();
      System.setCurrentTimeMillis((-1));
      StringReader stringReader0 = new StringReader("5>s$'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertEquals((-2), streamTokenizer0.ttype);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.remove((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      int int0 = (-2);
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      stringReader0.read(charBuffer0);
      streamTokenizer0.whitespaceChars((-2), (-2));
      stringReader0.close();
      streamTokenizer1.slashStarComments(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.remove((Object) "|oa3dxs@nTGpMK5");
      boolean boolean0 = jSTerm0.isFunction();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PAl7{XU@O");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      JSJshopVars.coma = (-1);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.lowerCaseMode(false);
      jSTerm0.makeFunction();
      JSJshopVars.whiteSpace = 62;
      jSTerm0.isFunction();
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = '@';
      charArray0[2] = '_';
      charArray0[3] = '=';
      charArray0[4] = '.';
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.796311640173813
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7(dic/qV");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addElement(jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.greaterT = (-2);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChars((-4), 44);
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.pushBack();
      streamTokenizer1.wordChars((-2), 44);
      streamTokenizer3.wordChars(10, (-2125));
      streamTokenizer0.ordinaryChars(10, (-2125));
      jSTerm0.isConstant();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      System.setCurrentTimeMillis((-1943L));
      System.setCurrentTimeMillis((-1943L));
      System.setCurrentTimeMillis((-2));
      System.setCurrentTimeMillis((-1943L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1943L));
      System.setCurrentTimeMillis((-2490L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.4287691203187398
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PAl7{XU@O");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.remove((Object) "PAl7{XU@O");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      assertTrue(jSSubstitution2.fail());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KN5:ri/ .I.C");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7(iP/Vj");
      System.setCurrentTimeMillis((-2));
      System.setCurrentTimeMillis((-1943L));
      System.setCurrentTimeMillis((-2));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-2490L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isEval();
      assertEquals((-2), streamTokenizer0.ttype);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PKaip`a< ]Nn");
      StringReader stringReader1 = new StringReader(">=");
      StringReader stringReader2 = new StringReader("PAl7{XU*M");
      StringReader stringReader3 = new StringReader("9.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      stringReader2.reset();
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement("9.0");
      jSTerm0.toStr();
      stringReader1.close();
      StringReader stringReader4 = new StringReader("PAl7{XU*M");
      StringReader stringReader5 = new StringReader("nmiBc,`6i^O");
      StringReader stringReader6 = new StringReader("9.0");
      stringReader3.ready();
      StringReader stringReader7 = null;
      try {
        stringReader7 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+EZo=K\"1");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      predicate4.or(predicate0);
      predicate1.or(predicate2);
      Predicate<Object> predicate5 = predicate1.negate();
      predicate4.and(predicate5);
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate3);
      predicate2.and(predicate3);
      Predicate<Object> predicate8 = predicate0.and(predicate2);
      Predicate<Object> predicate9 = predicate5.and(predicate8);
      predicate4.or(predicate6);
      Predicate.isEqual((Object) streamTokenizer0);
      predicate6.or(predicate5);
      Predicate<Object> predicate10 = predicate7.or(predicate5);
      predicate3.negate();
      predicate8.and(predicate6);
      predicate8.and(predicate10);
      Predicate.isEqual((Object) predicate9);
      predicate2.negate();
      Predicate.isEqual((Object) null);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
