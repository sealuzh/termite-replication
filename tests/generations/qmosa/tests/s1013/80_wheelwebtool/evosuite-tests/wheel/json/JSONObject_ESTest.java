/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 02:00:34 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.2995530335744938
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer integer0 = new Integer(2843);
      JSONObject jSONObject1 = jSONObject0.put("isdehexchar", (Object) integer0);
      jSONObject1.accumulate("isdehexchar", jSONObject0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("kaLuT!z|JIA#Lx61G");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of kaLuT!z|JIA#Lx61G
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9736489231972635
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("wheel.json.JSONTokener", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("X+7%`b", (Collection) linkedList0);
      String string0 = jSONObject0.optString("X+7%`b");
      assertNotNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optLong("' and instead saw '", 0L);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      long long0 = jSONObject0.optLong("wheel.json.JSONException", (long) (short)1143);
      assertEquals(1143L, long0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("", (-1973));
      assertEquals((-1973), int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("&g%|;?:");
      JSONObject jSONObject0 = new JSONObject((Object) jSONTokener0);
      double double0 = jSONObject0.optDouble("n", (double) (byte)0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      double double0 = jSONObject0.optDouble("' and instead saw '", (-286.0366084453));
      assertEquals(3, jSONObject0.length());
      assertEquals((-286.0366084453), double0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6423651354584372
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3734685941026814
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("&g%|;?:");
      JSONObject jSONObject0 = new JSONObject((Object) jSONTokener0);
      JSONObject jSONObject1 = jSONObject0.accumulate("isreplaceFirst", "&g%|;?:");
      jSONObject1.opt("isreplaceFirst");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("'", (Collection) linkedList0);
      boolean boolean0 = jSONObject0.has("'");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5600040073151407
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Float float0 = new Float((float) 39);
      JSONObject jSONObject0 = new JSONObject(float0);
      Double double0 = new Double((-143.30951503));
      JSONObject jSONObject1 = jSONObject0.accumulate("A JSONArray text must start with '['", double0);
      jSONObject1.getString("A JSONArray text must start with '['");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("JSONArray[", 0L);
      double double0 = jSONObject0.getDouble("JSONArray[");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("44!5", (double) 55);
      double double0 = jSONObject1.getDouble("44!5");
      assertEquals(55.0, double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate(",", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5197910456591317
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      Float float0 = new Float(Double.NaN);
      hashMap0.put(double0, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.toString(4, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(55);
      hashMap0.put((String) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-726), 1687);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.979700056867586
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.accumulate("gettoJSONArray", "isdehexchar");
      // Undeclared exception!
      jSONObject1.toString(2843);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.2446725381717776
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.add((Boolean) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.347306186914454
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("&g%|;?:");
      JSONObject jSONObject0 = new JSONObject((Object) jSONTokener0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1428074196753928
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-695L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-1209));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.2092536248090335
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("&g%|;?:");
      JSONObject jSONObject0 = new JSONObject((Object) jSONTokener0);
      try { 
        jSONObject0.put((String) null, (double) 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{v~3p@8uAxss{Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 13 of {v~3p@8uAxss{Y
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.712227691559177
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString(63, 63);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = jSONObject0.toString(125, 125);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = JSONObject.quote("{H=?/yKmO3wpTzw_");
      assertEquals("\"{H=?/yKmO3wpTzw_\"", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "] is not a JSONArray.");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.2367930007966412
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("&g%|;?:");
      JSONObject jSONObject0 = new JSONObject((Object) jSONTokener0);
      JSONObject jSONObject1 = jSONObject0.putOpt("fo", (Object) null);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>(28, 28);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("] nEt foY@und.", "Null key.");
      assertEquals("Null key.", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble((String) null, 6890.277);
      assertEquals(6890.277, double0, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("B;<IBsaREZ!SdWp<");
      assertNull(object0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "isreplaceFirst");
      jSONObject0.opt((String) null);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("X+7%`b", (Collection) linkedList0);
      try { 
        jSONObject1.getLong("X+7%`b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"X+7%`b\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5311386121723252
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("gettoJSONArray", "}b%|Ox\":");
      try { 
        jSONObject1.getInt("gettoJSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoJSONArray\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.4190795978373458
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((float) 120);
      JSONObject jSONObject1 = jSONObject0.append("getnextClean", float0);
      try { 
        jSONObject1.getDouble("getnextClean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getnextClean\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(2843);
      jSONObject0.put("isdehexchar", (Object) integer0);
      Object object0 = jSONObject0.get("isdehexchar");
      assertEquals(2843, object0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3396091171567721
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.get("H3U'^98e:4h/N%)B2=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"H3U'^98e:4h/N%)B2=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                                                                                              \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                              \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                              \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                       }");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertFalse(jSONTokener0.more());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("}^9", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Long long0 = new Long((-501L));
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("*2eCAT9^m#aDxdp", stringArray0);
      Object object0 = jSONObject0.remove("*2eCAT9^m#aDxdp");
      assertNull(object0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8576539971834682
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("X+7%`b", (Collection) linkedList0);
      jSONObject1.put("getnextValue", 1049L);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8884699676219987
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{\n                                                                                                                                                   \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                   \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                   \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                       }");
      // Undeclared exception!
      jSONObject0.toString(819, 55);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, 4445, 758);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 9, 635);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Short, JSONObject> hashMap0 = new HashMap<Short, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 462, (short)4701);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (short)4, 1675);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (short)55, (short)55);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6867831479680375
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.2677946372884996
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.valueToString(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.7870020467612302
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float float0 = new Float((float) 55);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(55, 55);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.788191435362226
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString((-1328), 9);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1521701395927608
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("null", "istoString");
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.2367930007966412
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("&g%|;?:");
      JSONObject jSONObject0 = new JSONObject((Object) jSONTokener0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONObject0.length());
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.2105367626153136
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("&g%|;?:");
      JSONObject jSONObject0 = new JSONObject((Object) jSONTokener0);
      Double double0 = Double.valueOf(Double.NaN);
      try { 
        jSONObject0.accumulate(">;`kbj[", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean(")/$c/u5mt@NmF!^;3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")/$c/u5mt@NmF!^;3\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = JSONObject.quote("}b%|Ox\":");
      assertEquals("\"}b%|Ox\\\":\"", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt(",\n");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = JSONObject.quote("\t");
      assertEquals("\"\\t\"", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5571130980576458
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer integer0 = new Integer(7);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "0";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("X+7%`b", (Collection) linkedList0);
      String string0 = jSONObject1.optString("X+7%`b", "istrim");
      assertFalse(linkedList0.contains(string0));
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("'");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("ac");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getnextValue", 1049L);
      double double0 = jSONObject1.optDouble("getnextValue");
      assertEquals(1049.0, double0, 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.4311119194329758
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("r0f", (Collection) linkedList0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.6569749571794006
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float(0.0F);
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      Double double0 = new Double(0.0F);
      hashMap0.putIfAbsent(double0, float0);
      String string0 = JSONObject.valueToString(hashMap0, (short)4, (short)55);
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.5399099197018635
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      Double double0 = new Double(1.0);
      Float float0 = new Float(Double.NaN);
      hashMap0.put(double0, float0);
      try { 
        JSONObject.valueToString(hashMap0, (short)4, (short)4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.8065071652616695
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("+xCXsK0hFK", object0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = JSONObject.getNames((Object) biFunction0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",\n");
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.9867316488081912
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = Float.valueOf((float) (short)1143);
      jSONObject0.accumulate("Q`gc*~Sb`Dyk'=\"", float0);
      long long0 = jSONObject0.optLong("Q`gc*~Sb`Dyk'=\"");
      assertEquals(1, jSONObject0.length());
      assertEquals(1143L, long0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.580649125069464
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("X+7%`b", (Collection) linkedList0);
      long long0 = jSONObject1.optLong("X+7%`b", (-1L));
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("&b%|O?:");
      JSONObject jSONObject0 = new JSONObject((Object) jSONTokener0);
      Byte byte0 = new Byte((byte)0);
      JSONObject jSONObject1 = jSONObject0.append("null", byte0);
      jSONObject1.getJSONArray("null");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long((-1345L));
      jSONObject0.accumulate("isaccumulate", long0);
      try { 
        jSONObject0.getJSONArray("isaccumulate");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isaccumulate\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)1143);
      jSONObject0.putOpt("gettoJSONArray", short0);
      int int0 = jSONObject0.getInt("gettoJSONArray");
      assertEquals(1143, int0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (-256L));
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject0.getDouble("");
      assertEquals((-256.0), double0, 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gettoJSONArray", (Object) "' and instead saw '");
      int int0 = jSONObject0.optInt("gettoJSONArray", 120);
      assertEquals(1, jSONObject0.length());
      assertEquals(120, int0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.8389828441260387
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.accumulate("gettoJSONArray", "gettoJSONArray");
      boolean boolean0 = jSONObject1.optBoolean("gettoJSONArray");
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.9338099989206319
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (-256L));
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.0947290475276494
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("DV]IW%A:/iq9(:}zi", false);
      boolean boolean0 = jSONObject0.optBoolean("DV]IW%A:/iq9(:}zi");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1204.94227045182));
      assertEquals("-1204.94227045182", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.4780929304994466
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.accumulate("gettoJSONArray", "isdehexchar");
      Integer integer0 = new Integer(2843);
      try { 
        jSONObject1.append("gettoJSONArray", integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[gettoJSONArray] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double double0 = new Double((-814.0));
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("Nxc|", (Collection) linkedList0);
      jSONObject0.append("Nxc|", double0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.499509409674557
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("&g%|;?:");
      JSONObject jSONObject0 = new JSONObject((Object) jSONTokener0);
      Byte byte0 = new Byte((byte)0);
      jSONObject0.append(" at character ", byte0);
      jSONObject0.accumulate(" at character ", "&g%|;?:");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.2995530335744938
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "}b%|Ox\":");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("getput", jSONArray0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{5.sO7PulO8Q)D(");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 15 of {5.sO7PulO8Q)D(
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("}b%|Ox\":");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }b%|Ox\":
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.664556478966277
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("&g%|;?:");
      JSONObject jSONObject0 = new JSONObject((Object) jSONTokener0);
      JSONObject jSONObject1 = jSONObject0.accumulate("&g%|;?:", jSONTokener0);
      boolean boolean0 = jSONObject1.isNull("&g%|;?:");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(1687);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(";`yxNn }JG->%=Mbg", (-24632774));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("val");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean("FqKYVwu'd%Mx>#");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("getintern", stringArray0);
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("Unterminated string");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("*2eCAT9^m#aDxdp", stringArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject0.put("*2eCAT9^m#aDxdp", (Map) hashMap0);
      Object object0 = jSONObject0.remove("*2eCAT9^m#aDxdp");
      assertNotSame(jSONObject0, object0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.4921530032950385
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("ma");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("]$RYE7&Ew~J=S]", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Byte byte0 = new Byte((byte)121);
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      try { 
        jSONObject0.getString("cop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"cop\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("X+7%`b", (Collection) linkedList0);
      try { 
        jSONObject0.getJSONObject("X+7%`b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"X+7%`b\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("'");
      assertFalse(boolean0);
  }
}
