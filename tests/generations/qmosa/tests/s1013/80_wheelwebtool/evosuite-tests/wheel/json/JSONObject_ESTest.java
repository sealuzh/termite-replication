/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 01:20:24 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      Float.min(427.78845F, (-0.23543672F));
      Float float0 = new Float((double) (-0.23543672F));
      hashMap1.getOrDefault(hashMap0, float0);
      Float float1 = new Float(427.78845F);
      Float.min(45.95F, (-59.9262F));
      Float float2 = new Float((-0.23543672F));
      Float float3 = new Float(1.0F);
      Collection<Float> collection0 = hashMap1.values();
      Float.sum((-1.0F), (-2227.2625F));
      HashMap<Float, Float> hashMap3 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap4 = new HashMap<Float, Float>();
      Double double0 = new Double(0.0);
      JSONArray jSONArray0 = new JSONArray(collection0);
      String string0 = "{`w%g/W";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{`w%g/W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {`w%g/W
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9079430039259564
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.sum((-2096.1401F), (-3484.5342F));
      JSONObject jSONObject1 = jSONObject0.put("'5d`hUJAA*75=?`-", false);
      jSONObject0.optBoolean("", true);
      jSONObject0.toString();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000008\":java.lang.Boolean@0000000009,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      JSONObject jSONObject3 = jSONObject1.put("{\"java.lang.String@0000000008\":java.lang.Boolean@0000000009,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}", 1L);
      Integer integer0 = new Integer((-1286));
      Integer integer1 = new Integer(10);
      Integer integer2 = new Integer((-1286));
      Float float1 = new Float(485.42F);
      JSONObject.doubleToString((-1286));
      jSONObject3.optInt("{\"java.lang.String@0000000008\":java.lang.Boolean@0000000009,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      assertEquals(5, jSONObject1.length());
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.046490493801627
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Float float0 = new Float(2823.5F);
      JSONObject jSONObject0 = new JSONObject((Object) "Expected a ',' or ']'");
      Integer.toUnsignedString((-1497));
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (Object) double0);
      Integer integer0 = new Integer(40);
      Double.isFinite(40);
      Integer.remainderUnsigned((-489), (-105355879));
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.accumulate("Expected a ':' after a key", jSONArray0);
      boolean boolean0 = new Boolean(true);
      jSONObject1.optString("null");
      assertEquals(5, jSONObject1.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.077855993389582
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer integer0 = new Integer(59);
      Integer integer1 = new Integer(59);
      Integer integer2 = new Integer((-12));
      Integer integer3 = new Integer((-64089270));
      Integer integer4 = new Integer((-64089270));
      Short short0 = new Short((short)16);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short1 = new Short((short)16);
      Short short2 = new Short((short)16);
      linkedList0.add(short2);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Integer integer5 = new Integer((short)16);
      Integer.compareUnsigned((-1574), (short)34);
      JSONObject jSONObject0 = new JSONObject(integer1);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      Long long0 = Long.valueOf((long) (-1574));
      Long.toUnsignedString((-267L));
      Long.getLong("va");
      JSONObject.getNames((Object) long0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.381818103817425
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(7);
      Integer integer2 = new Integer((-64089270));
      Integer integer3 = new Integer((-64089270));
      Float float0 = new Float((float) (-64089270));
      JSONObject.doubleToString(4413.386332316191);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      jSONObject0.putOpt("4413.386332316191", integer0);
      double double0 = jSONObject0.getDouble("4413.386332316191");
      assertEquals(7.0, double0, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.900520126959257
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(7);
      Integer integer2 = new Integer((-64089270));
      Integer integer3 = new Integer((-64089270));
      Float float0 = new Float((float) (-64089270));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Ao9nm", (-64089270));
      jSONObject1.optLong("Ao9nm");
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      Integer integer4 = new Integer(12);
      Integer integer5 = new Integer(120);
      HashMap<Double, Integer> hashMap2 = new HashMap<Double, Integer>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap2);
      JSONObject jSONObject3 = jSONObject0.putOpt(")o", jSONObject2);
      jSONObject3.isNull(")o");
      try { 
        jSONObject2.put("] is not a nurber.", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6490933182031533
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Integer integer0 = new Integer((-4092));
      JSONObject jSONObject1 = jSONObject0.accumulate("pL>Q)6.4NOp7", integer0);
      linkedList0.toArray();
      JSONObject jSONObject2 = jSONObject1.put(" of ", (Collection) linkedList0);
      jSONObject2.putOpt(" of ", jSONObject0);
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      Double double0 = new Double((-4092));
      JSONObject jSONObject3 = jSONObject2.append("AYiet6", double0);
      jSONObject3.getDouble("pL>Q)6.4NOp7");
      JSONObject jSONObject4 = jSONObject2.put("KEu(Xo_z)z)o.", (-653.96310688));
      assertSame(jSONObject2, jSONObject4);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.370530460855949
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", 38.0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      JSONObject jSONObject3 = new JSONObject(jSONObject0);
      jSONObject3.putOpt("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONObject jSONObject4 = jSONObject2.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList1);
      Float.max(133.899F, 1.0F);
      Float.sum(145.40648F, (-185.062F));
      Float float0 = new Float((double) 133.899F);
      Float.min(0.0F, 133.899F);
      JSONObject.numberToString(float0);
      jSONObject4.optJSONArray("java.lang.Float@000000001");
      jSONObject2.toJSONArray((JSONArray) null);
      assertEquals(1, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(1185);
      Integer integer2 = new Integer(7);
      Integer integer3 = new Integer(7);
      Float float0 = new Float((float) 1185);
      String string0 = JSONObject.doubleToString((-64089270));
      assertEquals("-6.408927E7", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.239252575701591
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Integer integer0 = new Integer(39);
      Integer integer1 = new Integer(62);
      Integer integer2 = new Integer(1261);
      Integer integer3 = new Integer(3261);
      Float float0 = new Float(2823.5F);
      JSONObject jSONObject0 = new JSONObject(integer2);
      Integer.toUnsignedString(1185);
      Double double0 = new Double(39);
      String string0 = "lU\"@";
      JSONObject jSONObject1 = jSONObject0.put("lU\"@", (Object) double0);
      Integer integer4 = new Integer(1430);
      Double.isFinite((-1.0));
      Integer.remainderUnsigned((-64089270), 4095);
      JSONObject jSONObject2 = jSONObject1.accumulate("co", "1185");
      try { 
        jSONObject2.getBoolean("co");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"co\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.396453291498555
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Long long0 = new Long(4576L);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      BiFunction<Object, Object, Integer> biFunction1 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      hashMap1.compute((String) null, biFunction1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wtt#&Q7E%[-S";
      JSONObject jSONObject0 = new JSONObject(hashMap2, stringArray0);
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.names();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      hashMap2.values();
      jSONObject0.put("] is not a number.", (Collection) linkedList0);
      try { 
        jSONObject0.getBoolean("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6886325270833304
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.accumulate("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      linkedList0.toArray();
      JSONObject jSONObject2 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      jSONObject2.putOpt("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      jSONObject1.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject2.names();
      jSONObject0.optJSONArray("W~CY78w3u8E{@`Pu0~g");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3855167361843743
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(7);
      Integer integer2 = new Integer((-64089270));
      Integer integer3 = new Integer((-64089270));
      Float float0 = new Float((float) (-64089270));
      JSONObject jSONObject0 = new JSONObject(integer3);
      Integer.divideUnsigned((-2227), 1560);
      JSONObject jSONObject1 = jSONObject0.append("isjoin", integer0);
      jSONObject1.optString("HU");
      JSONObject jSONObject2 = jSONObject1.put("HU", 64);
      jSONObject0.optDouble("HU", (-2318.7379381581));
      jSONObject2.optString("va", (String) null);
      jSONObject1.optString((String) null);
      try { 
        jSONObject1.getLong("getspliterator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getspliterator\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4942802941831586
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.accumulate("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      JSONObject jSONObject2 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      jSONObject2.putOpt("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      jSONObject1.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      JSONObject jSONObject3 = new JSONObject(jSONObject0);
      jSONObject3.append("getdoubleToString", "getdoubleToString");
      Float float0 = new Float((-1261.3599F));
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Float.max(51.4F, 51.4F);
      Float float0 = new Float((double) 2.7339938F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float1 = new Float((double) 51.4F);
      jSONObject0.opt((String) null);
      jSONObject0.optInt((String) null, (-385));
      String string0 = jSONObject0.optString("jdhTc7TRX-jXTU", "jdhTc7TRX-jXTU");
      assertEquals("jdhTc7TRX-jXTU", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.849194389067676
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(7);
      Integer integer2 = new Integer((-64089270));
      Integer integer3 = new Integer((-64089270));
      Float float0 = new Float((float) (-64089270));
      JSONObject jSONObject0 = new JSONObject(integer3);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put("'", (-64089270));
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject();
      Float.sum((-1722.0F), (byte)1);
      Long long0 = new Long((-2852));
      try { 
        jSONObject0.put((String) null, 556L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9380603991870027
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject2 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      JSONObject jSONObject3 = jSONObject2.putOpt((String) null, jSONObject1);
      jSONObject3.put("W~CY78w3u8E{@`Pu0~g", 3582L);
      jSONObject3.getInt("W~CY78w3u8E{@`Pu0~g");
      jSONObject2.getInt("W~CY78w3u8E{@`Pu0~g");
      String string0 = "W}fJJ#9h/!";
      JSONObject jSONObject4 = jSONObject0.put("W}fJJ#9h/!", (Collection) linkedList0);
      jSONObject1.optString("W}fJJ#9h/!");
      String string1 = null;
      try { 
        jSONObject4.put((String) null, 522);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4567025289115367
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "isdoubleToString";
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("isdoubleToString", (Collection) linkedList0);
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      linkedList1.removeFirstOccurrence("isdoubleToString");
      jSONObject0.optString("APE-S2i>s$M{?");
      JSONObject jSONObject2 = jSONObject0.put("isdoubleToString", 705);
      jSONObject0.optDouble("80b;#8");
      jSONObject1.opt("isdoubleToString");
      jSONObject1.getLong("isdoubleToString");
      JSONTokener jSONTokener0 = new JSONTokener("'");
      try { 
        jSONObject2.getDouble("opt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"opt\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.195879251296923
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("vP4iEyt1rxyL_F&3", (-2151));
      jSONObject1.toString();
      jSONObject0.toString((-448), 1897);
      Long long0 = new Long(0L);
      JSONObject.numberToString(long0);
      Long.compare(1897, (-2151));
      JSONObject.valueToString(long0, 46, (-448));
      Long long1 = new Long(0L);
      JSONObject jSONObject2 = jSONObject0.accumulate("4t&", long1);
      JSONObject jSONObject3 = jSONObject2.put("java.lang.Long@0000000004", true);
      jSONObject3.optString("getcompare");
      JSONObject jSONObject4 = jSONObject1.append("0dB6b'etgx", "{\"java.lang.String@0000000002\":java.lang.Integer@0000000003}");
      jSONObject3.length();
      JSONObject.getNames(jSONObject3);
      jSONObject4.optInt("vP4iEyt1rxyL_F&3");
      jSONObject4.toString();
      try { 
        jSONObject4.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6669720072813226
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.sum((-2096.1401F), (-3484.5342F));
      jSONObject0.put("'5d`hUJAA*75=?`-", true);
      jSONObject0.optBoolean("'5d`hUJAA*75=?`-", true);
      jSONObject0.toString();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000008\":java.lang.Boolean@0000000009,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3778722346154972
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(7);
      Integer integer2 = new Integer((-64089270));
      Integer integer3 = new Integer((-64089270));
      Float float0 = new Float((float) (-64089270));
      Integer integer4 = new Integer((-64089270));
      Integer integer5 = new Integer(120);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, hashMap1);
      jSONObject1.isNull(")o");
      jSONObject0.put("] is not a nurber.", (double) 7);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2830533764421914
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("W~CY78w3u8E{@`Pu0~g", (Object) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      jSONObject1.putOpt(">Dme ", (Object) null);
      String string0 = "isaddFirst";
      try { 
        jSONObject0.getInt("isaddFirst");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isaddFirst\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9627336194695197
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      jSONObject1.optString((String) null);
      JSONObject jSONObject2 = jSONObject1.put("&01|3(\"", 0);
      jSONObject0.optDouble("W~CY78w3u8E{@`Pu0~g");
      jSONObject1.opt("&01|3(\"");
      int int0 = jSONObject2.optInt("&01|3(\"", (-1049));
      assertEquals(2, jSONObject1.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2943974934684848
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "W~CY78w3u8E{@`Pu0~g";
      stringArray0[1] = "W~CY78w3u8E{@`Pu0~g";
      JSONObject jSONObject0 = new JSONObject(linkedList1, stringArray0);
      jSONObject0.optString("min");
      JSONTokener jSONTokener0 = new JSONTokener("5>$~,P");
      jSONTokener0.back();
      String string0 = "true";
      JSONObject jSONObject1 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", 2398);
      linkedList1.offerLast(jSONObject1);
      jSONObject0.optDouble("G:`-Y/JA=F@e[P}1", 0.0);
      jSONObject1.optString("5>$~,P", "");
      jSONObject0.optString("getparseLong");
      try { 
        jSONObject0.getLong("=^D0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=^D0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3592757349143887
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.accumulate(":%/&()o\"M{cT*<G", linkedList0);
      jSONObject0.optDouble("toH");
      jSONObject1.putOpt(":%/&()o\"M{cT*<G", linkedList0);
      jSONObject0.optBoolean("toH", false);
      try { 
        jSONObject1.getInt(":%/&()o\"M{cT*<G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":%/&()o\\\"M{cT*<G\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6673223188492536
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(7);
      Integer integer2 = new Integer(1240);
      Integer integer3 = new Integer(120);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Double double0 = new Double(916.0);
      Integer integer4 = new Integer(120);
      hashMap1.put(double0, integer4);
      Integer integer5 = new Integer((-64089270));
      Integer.compare(97, 34);
      JSONObject jSONObject1 = jSONObject0.putOpt(")o", integer5);
      jSONObject1.isNull(")o");
      jSONObject0.getInt(")o");
      try { 
        jSONObject0.put((String) null, 275.67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8855188417936706
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 2029);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(2029, 2029);
      JSONObject.quote("\t");
      JSONObject jSONObject1 = new JSONObject((Object) "$Z\"*+!XMa6oFK9[");
      jSONObject1.toString((-571), 101);
      jSONObject1.optDouble("). q&");
      jSONObject1.optBoolean("\t", false);
      jSONObject0.toString();
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      jSONObject2.optDouble("Missing value");
      JSONObject jSONObject3 = jSONObject1.append("\"\\t\"", "{}");
      String string0 = JSONObject.valueToString(jSONObject1, 101, 101);
      jSONObject1.optLong("gettoLowerCase");
      jSONObject3.put("). q&", 0);
      JSONObject.quote(string0);
      // Undeclared exception!
      jSONObject3.getString(string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8682838175053171
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer integer0 = new Integer(39);
      Integer integer1 = new Integer((-3981));
      Integer integer2 = new Integer((-28746850));
      Integer integer3 = new Integer((-64089270));
      JSONObject jSONObject0 = new JSONObject(integer1);
      jSONObject0.putOpt((String) null, integer1);
      Integer.toUnsignedString((-3981));
      Integer.getInteger("'", integer1);
      Double.isFinite((-863.9929644));
      Integer.remainderUnsigned(39, 1185);
      Object object0 = JSONObject.NULL;
      jSONObject0.optJSONObject("getvalueOf");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2720799119716943
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.accumulate("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      JSONObject jSONObject2 = jSONObject1.put("W~CY78w3u8E{@`Pu0~g", 1242.9027745060268);
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONObject jSONObject3 = new JSONObject(linkedList1);
      linkedList1.add(jSONObject0);
      jSONObject2.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject4 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((-613.842F));
      boolean boolean0 = jSONObject0.has("W~CY78w3u8E{@`Pu0~g");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.9610640338441674
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      jSONObject0.toString(55, 55);
      JSONObject.quote("f[l=;#`");
      jSONObject0.toString(55, 55);
      jSONObject1.optDouble("");
      jSONObject0.optBoolean("{\"java.lang.String@0000000003\": []}", true);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      jSONObject1.put("] is not a Boolean.", (Map) hashMap0);
      Float.min(55, (-826.0F));
      jSONObject1.toString();
      HashMap<JSONObject, String> hashMap1 = new HashMap<JSONObject, String>();
      JSONObject jSONObject2 = jSONObject0.put("{\"java.lang.String@0000000006\":wheel.json.JSONObject@0000000005,\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}", (Map) hashMap1);
      jSONObject0.optJSONObject("W~CY78w3u8E{@`Pu0~g");
      JSONObject jSONObject3 = jSONObject1.accumulate("~", jSONObject2);
      // Undeclared exception!
      jSONObject3.toString(115, 115);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.1086373285206754
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 7;
      Integer integer0 = new Integer(7);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.toArray();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("pL>Q)6.4NOp7", (Collection) linkedList1);
      jSONObject0.putOpt("Expected '", (Object) null);
      JSONObject jSONObject2 = jSONObject1.append("pL>Q)6.4NOp7", (Object) null);
      String string0 = "!c!Uj}T2])ml-+\"v";
      try { 
        jSONObject2.getDouble("!c!Uj}T2])ml-+\"v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!c!Uj}T2])ml-+\\\"v\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4134522857650715
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Long long0 = new Long(875L);
      String[] stringArray0 = new String[2];
      Long.getLong("5Yc3qY\"#/n;!k", 875L);
      Long.sum(2307L, 107L);
      Long.min(875L, 875L);
      stringArray0[1] = "";
      stringArray0[1] = " of ";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      Long.getLong("get", 0L);
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      stringWriter0.write(charArray0);
      jSONObject0.put("5R$; Kuyo!}xg>", false);
      JSONObject.quote("");
      StringWriter stringWriter1 = stringWriter0.append('m');
      stringWriter1.flush();
      Long.toUnsignedString((-2022L));
      stringWriter1.write((String) null);
      stringWriter1.flush();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) " of ");
      stringWriter2.append((CharSequence) null);
      stringWriter2.write(charArray0);
      jSONObject0.write(stringWriter2);
      try { 
        jSONObject0.getDouble("!FU`9!|oc:A.xn#)w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!FU`9!|oc:A.xn#)w\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9991331025818653
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Long long0 = new Long(0L);
      Long long1 = new Long((-1524L));
      Long.min(0L, (-497L));
      Long.compareUnsigned(1305L, (-1524L));
      Integer integer0 = new Integer((-2957));
      Integer integer1 = new Integer((-1902));
      Float float1 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.put("toH", (Object) float1);
      Integer.remainderUnsigned((-2957), 54);
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("?[}[}Xu\")u", "W~CY78w3u8E{@`P[u0~g");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3350026060706126
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Integer.compareUnsigned(1121, 59);
      Float float0 = new Float(0.0F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("q`k8Q\"pl),", (-135));
      assertEquals((-135), int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.700634329806315
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float float0 = (-3484.5342F);
      Float float1 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float1);
      jSONObject0.put("", false);
      jSONObject0.optBoolean("", true);
      jSONObject0.toString();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000008\":java.lang.Boolean@0000000009,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      try { 
        jSONObject0.getString("n'=TVGp-n$4l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"n'=TVGp-n$4l\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.20407351126807
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      jSONObject0.optDouble("va", (double) 0);
      jSONObject0.optString("", "");
      jSONObject1.optString("/B6R[");
      try { 
        jSONObject0.getLong("va");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"va\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.238232092443106
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(7);
      Integer integer2 = new Integer((-64089270));
      Integer integer3 = new Integer((-64089270));
      Integer.toUnsignedString(102);
      Float float0 = new Float((float) (-64089270));
      JSONObject jSONObject0 = new JSONObject(integer3);
      assertEquals(1, jSONObject0.length());
      
      Short.toUnsignedInt((short)3963);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Qd/dF/;L5U_1";
      stringArray0[1] = "Qd/dF/;L5U_1";
      stringArray0[2] = "FWF}~";
      stringArray0[3] = "Qd/dF/;L5U_1";
      stringArray0[4] = "FWF}~";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      Byte byte0 = new Byte((byte)3);
      jSONObject1.put("Qd/dF/;L5U_1", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.500588897955916
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("W~CY78w3u8E{@`Pu0~g", 38.0);
      JSONObject jSONObject1 = jSONObject0.accumulate("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      JSONObject jSONObject2 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      jSONObject2.putOpt("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONObject jSONObject3 = jSONObject1.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList1);
      Float.max(133.899F, 1.0F);
      Float.sum(145.40648F, (-185.062F));
      Float float0 = new Float((double) 133.899F);
      Float.min(0.0F, 133.899F);
      JSONObject.numberToString(float0);
      JSONObject.valueToString((Object) null, 917, (-253));
      jSONObject3.optJSONArray("java.lang.Float@0000000007");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.1387746039933004
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "W~CY78w3u8E{@`Pu0~g";
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      int int0 = 55;
      jSONObject0.toString(55, 55);
      String string1 = "f[l=;#`";
      JSONObject.quote(string1);
      String string2 = "";
      String string3 = jSONObject0.toString(int0, int0);
      jSONObject1.optDouble(string2);
      boolean boolean0 = true;
      jSONObject0.optBoolean(string3, boolean0);
      String string4 = "] is not a Boolean.";
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject2 = jSONObject1.put(string4, (Map) hashMap0);
      float float0 = (-826.0F);
      Float.min(int0, float0);
      String string5 = jSONObject1.toString();
      HashMap<JSONObject, String> hashMap1 = new HashMap<JSONObject, String>();
      JSONObject jSONObject3 = jSONObject0.put(string5, (Map) hashMap1);
      JSONObject jSONObject4 = jSONObject0.optJSONObject(string0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject4.write(stringWriter0);
      String string6 = "~";
      jSONObject1.accumulate(string6, jSONObject3);
      jSONObject0.append(string5, linkedList0);
      String string7 = "toU";
      jSONObject2.has(string7);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.041062637741359
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((double) 1076L);
      jSONObject0.opt("ne)g_=<mFoi9");
      int int0 = jSONObject0.optInt("ne)g_=<mFoi9", 198);
      assertEquals(198, int0);
      
      jSONObject0.optString("ne)g_=<mFoi9", "ne)g_=<mFoi9");
      String string0 = JSONObject.valueToString(hashMap0, 198, 9);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.361660116869237
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      Float.min(427.78845F, (-0.23543672F));
      Float float0 = new Float((double) (-0.23543672F));
      hashMap1.getOrDefault(hashMap0, float0);
      Float float1 = new Float(427.78845F);
      Float float2 = new Float((-0.23543672F));
      JSONObject.valueToString(hashMap2, (-105355879), (-105355879));
      Object object0 = new Object();
      Long long0 = new Long((-105355879));
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.remainderUnsigned((-105355879), (-105355879));
      try { 
        jSONObject0.getJSONObject("toO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toO\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Integer integer0 = new Integer(12);
      JSONObject.testValidity(integer0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.9350841397548408
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Integer integer0 = new Integer(59);
      Integer.max(1121, (-2326));
      Integer.compareUnsigned(1121, 59);
      hashMap0.getOrDefault(integer0, integer0);
      Float float0 = new Float(0.0F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Float float1 = new Float(1.0F);
      JSONObject jSONObject1 = jSONObject0.putOpt("java.lang.Long@0000000004.", float0);
      try { 
        jSONObject1.getJSONArray("java.lang.Long@0000000004.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@0000000004.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.251860535477306
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "W~CY78w3u8E{@`Pu0~g";
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.accumulate("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      JSONObject jSONObject3 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      jSONObject3.putOpt("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      JSONObject jSONObject4 = jSONObject2.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      jSONObject4.getJSONArray("W~CY78w3u8E{@`Pu0~g");
      try { 
        jSONObject4.getJSONObject("W~CY78w3u8E{@`Pu0~g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"W~CY78w3u8E{@`Pu0~g\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6737574785495872
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Float.sum(667.62067F, 0.0F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Long long0 = new Long(806L);
      jSONObject0.putOpt("?", long0);
      jSONObject0.optLong("?");
      JSONObject.getNames(jSONObject0);
      boolean boolean0 = jSONObject0.optBoolean("null");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Float float0 = new Float(0.0F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Long.sum(210L, 1519L);
      Long.min((-1062L), (-1658L));
      Boolean.compare(true, false);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.getNames((Object) null);
      JSONTokener jSONTokener0 = new JSONTokener(" of ");
      jSONTokener0.back();
      jSONTokener0.nextTo(" of ");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 2 of  of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.552137472868172
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.accumulate("pL>Q)6.4NOp7", linkedList0);
      linkedList0.toArray();
      jSONObject0.put("pL>Q)6.4NOp7", (Collection) linkedList0);
      jSONObject1.optBoolean("pL>Q)6.4NOp7", false);
      jSONObject0.putOpt("gc3`qg", jSONObject1);
      jSONObject1.append("getdoubleToString", jSONObject0);
      jSONObject1.put("l$D", (-2189));
      try { 
        jSONObject1.getDouble("getdoubleToString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getdoubleToString\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.768730378113511
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Long long0 = new Long(875L);
      String[] stringArray0 = new String[2];
      Long.sum(2307L, 107L);
      Long.min(875L, 875L);
      stringArray0[0] = "";
      stringArray0[1] = " of ";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      stringWriter0.write(charArray0);
      Float float0 = new Float((double) 107L);
      JSONObject jSONObject1 = jSONObject0.accumulate("|Nj)eX\"<3*>ihA2a{", "|Nj)eX\"<3*>ihA2a{");
      stringWriter0.append('7');
      stringWriter0.append((CharSequence) "`^>QU;$Edi&:NvS");
      jSONObject1.names();
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short)119);
      JSONObject jSONObject2 = jSONObject1.append(" of ", short0);
      JSONObject jSONObject3 = jSONObject2.put("val", (-507L));
      jSONObject0.optLong("B=~D1L~b&oD`00iok", 875L);
      jSONObject3.optString("iscompare");
      jSONObject1.getLong("val");
      try { 
        jSONObject0.getDouble("iscompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iscompare\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.3530802153695416
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      linkedList0.removeFirstOccurrence("W~CY78w3u8E{@`Pu0~g");
      jSONObject1.optString((String) null);
      jSONObject1.put("W~CY78w3u8E{@`Pu0~g", 0);
      jSONObject0.optDouble("W~CY78w3u8E{@`Pu0~g");
      jSONObject1.opt("W~CY78w3u8E{@`Pu0~g");
      jSONObject1.getLong("W~CY78w3u8E{@`Pu0~g");
      String string0 = "ZkPQic/+_AD>Re";
      JSONTokener jSONTokener0 = new JSONTokener("ZkPQic/+_AD>Re");
      try { 
        jSONObject0.getDouble("}P4/0~i\"Jp@V!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}P4/0~i\\\"Jp@V!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.5913574249387406
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.accumulate("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      Object object0 = new Object();
      Predicate<JSONObject> predicate0 = Predicate.isEqual(object0);
      predicate0.test(jSONObject0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<JSONObject> predicate2 = predicate0.or(predicate1);
      Predicate<JSONObject> predicate3 = predicate2.negate();
      Predicate<JSONObject> predicate4 = predicate3.and(predicate2);
      linkedList0.removeIf(predicate4);
      JSONObject jSONObject2 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      JSONObject jSONObject3 = jSONObject2.putOpt("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      jSONObject1.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList1);
      jSONObject3.opt("2al\"sMLyn@/");
      jSONObject1.optInt("W&&who<G(", 182);
      String string0 = jSONObject2.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("asiE");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.5067551956729326
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Long long0 = new Long(875L);
      String[] stringArray0 = new String[2];
      Long.getLong("5Yc3qY\"#/n;!k", 875L);
      Long.sum(2307L, 107L);
      Long.min(875L, 875L);
      stringArray0[1] = "";
      stringArray0[1] = " of ";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("", (Collection) linkedList0);
      Long.getLong("get", 0L);
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      stringWriter0.write(charArray0);
      jSONObject0.put("5R$; Kuyo!}xg>", false);
      StringWriter stringWriter1 = stringWriter0.append('m');
      stringWriter1.flush();
      stringWriter1.write((String) null);
      stringWriter1.flush();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) " of ");
      stringWriter2.append((CharSequence) null);
      stringWriter2.write(charArray0);
      jSONObject0.write(stringWriter2);
      try { 
        jSONObject0.getDouble("!FU`9!|oc:A.xn#)w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!FU`9!|oc:A.xn#)w\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.551125021614511
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject.getNames(jSONObject0);
      String string0 = "wheel.json.JSONTokener";
      StringWriter stringWriter0 = new StringWriter();
      String string1 = ",:]}/\\\"[{;=#";
      Integer.getInteger("");
      stringWriter0.close();
      jSONObject0.write(stringWriter0);
      String string2 = "`Ug\\|hpeM{6";
      try { 
        jSONObject0.getString(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.451662921507566
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "W~CY78w3u8E{@`Pu0~g";
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.accumulate("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      String string1 = null;
      JSONObject jSONObject2 = jSONObject1.putOpt("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      jSONObject0.get("W~CY78w3u8E{@`Pu0~g");
      try { 
        jSONObject2.put((String) null, 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.4275676224967535
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "W~CY78w3u8E{@`Pu0~g";
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.accumulate("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      String string1 = "tosS";
      jSONObject0.optDouble("tosS");
      jSONObject1.putOpt("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      jSONObject0.optBoolean("W~CY78w3u8E{@`Pu0~g", false);
      try { 
        jSONObject1.getInt("vpWmbGZfRs`</=i2.>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vpWmbGZfRs`<\\/=i2.>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.079375644430732
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      linkedList0.add(jSONObject0);
      linkedList0.removeFirst();
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.1621828741054787
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Float float0 = new Float((-1722.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject1 = new JSONObject(byte0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optLong(4445);
      Float.sum((-1722.0F), (-234.0354F));
      JSONObject.valueToString(linkedList0);
      Long long0 = new Long((-2852));
      String string0 = "istrim";
      try { 
        jSONObject1.getString("istrim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istrim\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.288072552382965
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = new Float((-1722.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject1 = new JSONObject(byte0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optLong(4445);
      linkedList0.add("#qTQ)Gfh+h_u");
      Float.sum((-1722.0F), (-234.0354F));
      JSONObject.valueToString(linkedList0);
      Long long0 = new Long((-2852));
      jSONObject0.optDouble("#qTQ)Gfh+h_u");
      String string0 = "istrim";
      try { 
        jSONObject1.getString("istrim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istrim\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.3987533764434708
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.accumulate("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      JSONObject jSONObject2 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      jSONObject2.putOpt("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      String string0 = "H!#r]DBkJ[5)q-Pt";
      String string1 = "Qd/dF/;L5U_1";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "H!#r]DBkJ[5)q-Pt";
      stringArray0[1] = "i!kRPY,glb-n/:";
      stringArray0[2] = "Qd/dF/;L5U_1";
      stringArray0[3] = "H!#r]DBkJ[5)q-Pt";
      stringArray0[4] = "Qd/dF/;L5U_1";
      stringArray0[5] = "Bad value from toJSONString: ";
      stringArray0[6] = "W~CY78w3u8E{@`Pu0~g";
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = new JSONObject(jSONObject1, stringArray0);
      try { 
        jSONObject2.getLong("W~CY78w3u8E{@`Pu0~g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"W~CY78w3u8E{@`Pu0~g\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer(59);
      Integer integer1 = new Integer(59);
      Integer integer2 = new Integer((-12));
      Integer integer3 = new Integer((-64089270));
      Integer integer4 = new Integer((-64089270));
      JSONTokener jSONTokener0 = new JSONTokener("}%l*hs`b!sKoPc");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }%l*hs`b!sKoPc
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.193261951586368
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>(1185, 413.43F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      HashMap<String, Integer> hashMap3 = new HashMap<String, Integer>();
      BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Short short0 = new Short((short) (-3598));
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.optDouble(stringArray0[0]);
      JSONObject jSONObject1 = jSONObject0.append("get", "{}");
      jSONObject1.optString("isjoin");
      JSONObject jSONObject2 = jSONObject0.put("FPQ)MvUvR%jM'H~8", 50);
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      jSONObject3.optString("{}", stringArray0[0]);
      jSONObject1.optString("^;5yJ{");
      try { 
        jSONObject3.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.7102051162656458
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float float0 = (-3484.5342F);
      Float float1 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float1);
      String string0 = "";
      Float.sum((-2096.1401F), (-3484.5342F));
      JSONObject jSONObject1 = jSONObject0.put("'5d`hUJAA*75=?`-", false);
      jSONObject0.optBoolean("", true);
      jSONObject0.toString();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000008\":java.lang.Boolean@0000000009,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      jSONObject1.put("{\"java.lang.String@0000000008\":java.lang.Boolean@0000000009,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}", 1L);
      try { 
        jSONObject0.getString("n'*=TVGp-n$4l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"n'*=TVGp-n$4l\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>(1185, 412.9968F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      String string0 = null;
      String string1 = "{C($VXX .A";
      JSONTokener jSONTokener0 = new JSONTokener("{C($VXX .A");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of {C($VXX .A
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer(59);
      Integer integer1 = new Integer(59);
      Integer integer2 = new Integer(59);
      Integer integer3 = new Integer((-52617862));
      Integer integer4 = new Integer(57);
      Integer integer5 = new Integer(13);
      Short short0 = new Short((short)16);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short1 = new Short((short)34);
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      linkedList1.containsAll(linkedList0);
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Long long0 = new Long(4584L);
      Long long1 = new Long(4584L);
      Long.min((-3613L), (-3613L));
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONTokener jSONTokener0 = new JSONTokener("Rb'JbP[A12!c\"Zmf");
      jSONTokener0.nextValue();
      JSONTokener jSONTokener1 = new JSONTokener("O");
      try { 
        jSONTokener1.next(1483);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Substring bounds error at character 0 of O
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.95571359982777
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[2] = 'Q';
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.9679534321552914
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = new Integer(39);
      Integer integer1 = new Integer((-3981));
      Integer integer2 = new Integer((-28746850));
      Integer integer3 = new Integer((-64089270));
      Float float0 = new Float((float) 7);
      JSONObject jSONObject0 = new JSONObject(integer1);
      Integer.toUnsignedString((-3981));
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.put("'", (Object) double0);
      Integer.getInteger("'", integer1);
      Integer.getInteger("'");
      Double.isFinite((-863.9929644));
      Integer.remainderUnsigned(39, 1185);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.accumulate("'", integer3);
      jSONObject2.put(" at character ", true);
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>(1185, 413.43F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      HashMap<String, Integer> hashMap3 = new HashMap<String, Integer>();
      BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap3.replaceAll(biFunction0);
      Short short0 = new Short((short) (-3598));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "bZz^M[}E)ncr-c[\"^ .";
      hashMap1.values();
      Float float0 = new Float(1.0F);
      Float.sum(1185, 1.0F);
      HashMap<Float, Float> hashMap4 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap5 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.315963760820888
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      linkedList0.removeFirstOccurrence("W~CY78w3u8E{@`Pu0~g");
      jSONObject1.optString("W~CY78w3u8E{@`Pu0~g");
      jSONObject1.put("W~CY78w3u8E{@`Pu0~g", 0);
      jSONObject0.optDouble("W~CY78w3u8E{@`Pu0~g");
      jSONObject1.opt("W~CY78w3u8E{@`Pu0~g");
      jSONObject1.getLong("W~CY78w3u8E{@`Pu0~g");
      JSONTokener jSONTokener0 = new JSONTokener("ZkPQic/+_AD>Re");
      try { 
        jSONObject0.getDouble("}P4/0~i\"Jp@V!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}P4/0~i\\\"Jp@V!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.9658372138213545
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.9588790219919523
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      linkedList1.containsAll(linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      Integer integer0 = new Integer(48);
      Integer integer1 = new Integer(1282);
      Float float0 = new Float(960.03046F);
      String string0 = JSONObject.valueToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      hashMap0.entrySet();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>(1185, 413.43F);
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap3 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap3);
      jSONObject0.put("' and instead saw '", (Object) hashMap3);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.5294956116290943
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "W~CY78w3u8E{@`Pu0~g";
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.accumulate("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      String string1 = null;
      JSONObject jSONObject2 = jSONObject1.putOpt("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      jSONObject1.names();
      jSONObject0.optBoolean("W~CY78w3u8E{@`Pu0~g", false);
      jSONObject0.get("W~CY78w3u8E{@`Pu0~g");
      jSONObject2.length();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("W~CY78w3u8E{@`Pu0~g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of W~CY78w3u8E{@`Pu0~g
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>(1185, 413.43F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      HashMap<String, Integer> hashMap3 = new HashMap<String, Integer>();
      BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap3.replaceAll(biFunction0);
      Short short0 = new Short((short) (-3598));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "bZz^M[}E)ncr-c[\"^ .";
      stringArray0[1] = "n-L!7qg";
      stringArray0[2] = "n}4|=~rLsTk'FcG8\"X";
      BiFunction<String, Integer, Integer> biFunction1 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(anyString() , anyInt());
      hashMap3.compute("n-L!7qg", biFunction1);
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      jSONObject0.toString(1185, (int) (short) (-3598));
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1343203047935835
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 1185;
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>(1185, 413.43F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      Byte byte0 = new Byte((byte) (-12));
      JSONObject jSONObject0 = new JSONObject(byte0);
      String string0 = ",O";
      jSONObject0.optBoolean(",O", false);
      try { 
        jSONObject0.getInt(",O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",O\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.019726163288044
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Long long0 = new Long(4576L);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      BiFunction<String, Object, Integer> biFunction1 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction1);
      BiFunction<Object, Object, Integer> biFunction2 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction2).apply(any() , any());
      hashMap1.compute((String) null, biFunction2);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wtt#&Q7E%[-S";
      JSONObject jSONObject0 = new JSONObject(hashMap2, stringArray0);
      jSONObject0.toString(59);
      String string0 = jSONObject0.toString(6, 6);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = new JSONObject((Object) "Unterminated string");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.8263911662602834
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = 55;
      jSONObject0.toString(123, 55);
      JSONObject.quote("{\n                                                                                                                                                                                  \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                                                  \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                                                  \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                       }");
      jSONObject0.toString(55, 55);
      jSONObject0.optDouble("{\n                                                                                                                                                                                  \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                                                  \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                                                  \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                       }");
      jSONObject0.optBoolean("", true);
      Float.min(55, 123);
      jSONObject0.toString();
      jSONObject0.append("{\n                                                                                                                                                                                  \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                                                  \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                                                  \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                       }", "{\n                                                                                                                                                                                  \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                                                  \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                                                  \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                       }");
      try { 
        jSONObject0.getString("n'=TVGp-n$4l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"n'=TVGp-n$4l\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.2677359312028278
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>(1185, 412.9968F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      Float.valueOf(412.9968F);
      Float.min(1185, 1185);
      Float.sum(412.9968F, 412.9968F);
      Float.min(412.9968F, 1386.1666F);
      JSONTokener jSONTokener0 = new JSONTokener(",\n");
      String string0 = "gettoString";
      jSONTokener0.skipPast("gettoString");
      jSONTokener0.back();
      JSONTokener jSONTokener1 = new JSONTokener("gettoString");
      jSONTokener1.nextTo("Unclosed comment");
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",\n";
      JSONObject jSONObject0 = new JSONObject(jSONTokener1, stringArray0);
      try { 
        jSONObject0.get(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.7651334011390136
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put("W~CY78w3u8E{@`Pu0~g", false);
      jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (-1.0));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.252294751716993
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Long long0 = new Long(875L);
      String[] stringArray0 = new String[2];
      Long.sum(2307L, 107L);
      Long.min(875L, 875L);
      stringArray0[1] = "";
      stringArray0[1] = " of ";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      jSONObject0.optString("issum");
      jSONObject0.optLong("A JSONObject text must end with '}'", (-4295L));
      String string0 = ":@1)=zm[^.$\"2j\"uuU8";
      jSONObject0.optString("");
      String string1 = "Missing value";
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      try { 
        jSONObject2.getLong("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.6414082084762107
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      Float.min(427.78845F, (-0.23543672F));
      Float float0 = new Float((double) (-0.23543672F));
      hashMap1.getOrDefault(hashMap0, float0);
      Float float1 = new Float(427.78845F);
      Float.min(45.95F, (-59.9262F));
      float float2 = new Float((-0.23543672F));
      Float float3 = new Float(1.0F);
      Collection<Float> collection0 = hashMap1.values();
      Float.max((-0.23543672F), 0.0F);
      Float.sum((-1.0F), (-2227.2625F));
      HashMap<Float, Float> hashMap3 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap4 = new HashMap<Float, Float>();
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONArray jSONArray0 = new JSONArray(collection0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[4];
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      stringArray0[0] = "wtt#&Q7E%[-S";
      BiFunction<Object, Integer, Integer> biFunction1 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , anyInt());
      hashMap0.compute("", biFunction1);
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Unterminated string";
      jSONObject0.optString("Unterminated string");
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.156433649803423
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer integer0 = new Integer(59);
      Integer integer1 = new Integer(59);
      Integer integer2 = new Integer((-12));
      Integer integer3 = new Integer((-64089270));
      Integer integer4 = new Integer((-64089270));
      Integer integer5 = new Integer((-64089270));
      Integer integer6 = Integer.valueOf((-64089270));
      JSONObject jSONObject0 = new JSONObject(integer6);
      String string0 = "";
      jSONObject0.optLong("", 0L);
      JSONTokener jSONTokener0 = new JSONTokener("");
      jSONTokener0.back();
      try { 
        jSONTokener0.nextString(' ');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.935045984155126
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>(1185, 413.43F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      HashMap<String, Integer> hashMap3 = new HashMap<String, Integer>();
      BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap3.replaceAll(biFunction0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "bZz^M[}E)ncr-c[\"^ .";
      stringArray0[1] = "n-L!7qg";
      stringArray0[2] = "n}4|=~rLsTk'FcG8\"X";
      stringArray0[3] = "toL";
      stringArray0[4] = "H!#r]DBkJ[5)q-Pt";
      Short.toUnsignedInt((short) (-3598));
      stringArray0[5] = "5";
      stringArray0[6] = "Qd/dF/;L5U_1";
      stringArray0[7] = "bZz^M[}E)ncr-c[\"^ .";
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("wheel.json.JSONException", (long) 1185);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      Float.min(427.78845F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      hashMap1.getOrDefault(hashMap0, float0);
      Float.sum(0.0F, 0.0F);
      Float.min(45.95F, (-59.9262F));
      Float.sum(0.0F, (-524.5086F));
      Float float1 = new Float(1.0F);
      hashMap1.values();
      Float.max(0.0F, 0.0F);
      Float.sum((-1.0F), (-2227.2625F));
      HashMap<Float, Float> hashMap3 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap4 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>(1185, 413.43F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      HashMap<String, Integer> hashMap3 = new HashMap<String, Integer>();
      BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap3.replaceAll(biFunction0);
      Short short0 = new Short((short) (-3598));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "bZz^M[}E)ncr-c[\"^ .";
      stringArray0[1] = "n-L!7qg";
      stringArray0[2] = "n}4|=~rLsTk'FcG8\"X";
      BiFunction<String, Integer, Integer> biFunction1 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(anyString() , anyInt());
      hashMap3.compute("n-L!7qg", biFunction1);
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      try { 
        jSONObject0.getLong("45-9#y5_&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"45-9#y5_&\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.562874473445916
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Long long0 = new Long(875L);
      String[] stringArray0 = new String[2];
      String string0 = "5Yc3qY\"#/n;!k";
      Long.getLong("5Yc3qY\"#/n;!k", 875L);
      Long.sum(2307L, 107L);
      Long.min(875L, 875L);
      stringArray0[1] = "";
      stringArray0[1] = " of ";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      Long.getLong("get", 0L);
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      stringWriter0.write(charArray0);
      jSONObject0.put("5R$; Kuyo!}xg>", false);
      StringWriter stringWriter1 = stringWriter0.append('m');
      stringWriter1.flush();
      jSONObject0.put("5R$; Kuyo!}xg>", 107L);
      Short short0 = new Short((short)2111);
      JSONObject.valueToString(short0, (short)2111, 32);
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.482639511108492
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer integer0 = new Integer(59);
      Integer integer1 = new Integer(59);
      int int0 = (-12);
      Integer integer2 = new Integer((-12));
      Integer integer3 = new Integer((-12));
      Integer integer4 = new Integer(59);
      Integer integer5 = new Integer(59);
      Float float0 = new Float((float) 59);
      JSONObject jSONObject0 = new JSONObject(integer1);
      Double double0 = new Double((-12));
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Object) integer2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.349635354443524
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      linkedList0.add(jSONObject0);
      jSONObject0.put(" at character ", (Map) null);
      JSONObject.valueToString(linkedList0, (-572), 1814);
      jSONObject0.names();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.6796691473414684
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Long long0 = new Long(0L);
      Long long1 = new Long((-1438L));
      Long.min(616L, 0L);
      Long.compareUnsigned(0L, (-132L));
      Boolean.compare(false, true);
      Long.compareUnsigned(123, 3628L);
      Boolean boolean0 = Boolean.TRUE;
      Double double0 = new Double(0L);
      Float.sum((-463L), (-1172.1F));
      Float.min((-463L), (-3071.423F));
      JSONObject.quote("j:GO? 1N(XUTp");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.148168759528343
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "W~CY78w3u8E{@`Pu0~g";
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.accumulate("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      jSONObject0.optDouble("toH");
      jSONObject1.putOpt("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      jSONObject1.optDouble("W~CY78w3u8E{@`Pu0~g", (-265.5));
      String string1 = "{";
      try { 
        jSONObject1.getInt("vpWmbGZfRs`</=i2.>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vpWmbGZfRs`<\\/=i2.>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "getsum";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.getJSONObject("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.9253539308675658
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Long long0 = new Long(4576L);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      BiFunction<String, Object, Integer> biFunction1 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, Integer> biFunction2 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.computeIfPresent("{", biFunction2);
      hashMap1.replaceAll(biFunction1);
      Integer integer0 = new Integer(87);
      hashMap2.put("/", integer0);
      BiFunction<Object, Object, Integer> biFunction3 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction3).apply(any() , any());
      hashMap1.compute((String) null, biFunction3);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wtt#&Q7E%[-S";
      JSONObject jSONObject0 = new JSONObject(hashMap2, stringArray0);
      jSONObject0.put("is", 1542.53913612068);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>(49, 1185);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      Float.valueOf(0.0F);
      Float.min(412.9968F, 1185);
      Float.sum(2380.6F, (-2227.2625F));
      Float.min((-1346.449F), (-2227.2625F));
      Float.isFinite((-3377.659F));
      Float.max((-363.0F), 4886.0F);
      Float.min(614.0F, 0.0F);
      Float.max(2380.6F, 0.0F);
      Float.min(0.0F, (-2825.8691F));
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.604129406758335
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Integer integer0 = new Integer(25);
      Integer integer1 = new Integer(1232);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(25);
      Integer integer2 = new Integer(8158);
      Integer.compareUnsigned(1326, 8158);
      Double double1 = new Double((-1828.8));
      Integer integer3 = new Integer(1326);
      hashMap0.put(double1, integer3);
      Integer integer4 = new Integer(3713);
      Integer.divideUnsigned(1232, 40);
      Integer.compare(91, 1232);
      jSONObject0.putOpt("W~CY78w3u8E{@`P[u0~g", integer0);
      jSONObject0.isNull("W~CY78w3u8E{@`P[u0~g");
      JSONTokener jSONTokener0 = new JSONTokener(")o");
      jSONTokener0.skipPast("pIA}{K`5");
      jSONTokener0.back();
      JSONTokener jSONTokener1 = new JSONTokener(")o");
      JSONObject jSONObject1 = jSONObject0.accumulate(")o", integer2);
      try { 
        jSONObject1.append((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.235889886894886
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = 123;
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject1.accumulate("-J#BvAf8ZK", float0);
      linkedList0.toArray();
      JSONObject jSONObject3 = jSONObject1.put("pL>Q)6.4NOp7", (Collection) linkedList0);
      Float.max((short)44, (-3484.5342F));
      Short short0 = new Short((short)44);
      jSONObject2.putOpt("-J#BvAf8ZK", short0);
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      String string0 = "getdoubleToString";
      Short short1 = new Short((short)10);
      try { 
        jSONObject3.append("-J#BvAf8ZK", short1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[-J#BvAf8ZK] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.29153193750047
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float float0 = new Float((-1287.866F));
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.accumulate("pL>Q)6.4NOp7", linkedList0);
      linkedList0.toArray();
      JSONObject jSONObject2 = jSONObject0.put("Substring bounds error", (Collection) linkedList0);
      Byte byte0 = new Byte((byte)42);
      JSONObject jSONObject3 = jSONObject1.putOpt("getclear", byte0);
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONObject jSONObject4 = jSONObject3.append("Substring bounds error", jSONObject2);
      try { 
        jSONObject4.getDouble("gc3`qg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gc3`qg\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Long long0 = new Long(875L);
      String[] stringArray0 = new String[2];
      Long.sum(2307L, 875L);
      Long.min(875L, 875L);
      stringArray0[1] = "";
      stringArray0[1] = " of ";
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Float float0 = new Float((float) 875L);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = jSONObject0.optInt(" of ");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.9736301061362362
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "W~CY78w3u8E{@`Pu0~g";
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.accumulate("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      jSONObject1.putOpt("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      jSONObject1.optBoolean("W~CY78w3u8E{@`Pu0~g", false);
      jSONObject0.get("W~CY78w3u8E{@`Pu0~g");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string1 = "{";
      jSONObject0.isNull("W~CY78w3u8E{@`Pu0~g");
      jSONObject1.getString("W~CY78w3u8E{@`Pu0~g");
      jSONObject0.putOpt("W~CY78w3u8E{@`Pu0~g", linkedList0);
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      jSONObject1.put("java.lang.String@0000000002", (Collection) linkedList1);
      JSONObject.valueToString(jSONObject1, (-2434), (-2434));
      Object object0 = new Object();
      JSONObject jSONObject2 = new JSONObject(object0);
      try { 
        jSONObject1.getJSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.8872385926133708
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer integer0 = new Integer(3638);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Float float0 = new Float((float) 3638);
      String string0 = JSONObject.valueToString(jSONObject1, 3638, 3638);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0115053753997263
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer integer0 = new Integer(59);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ga{_;(U;aZOa)aH";
      stringArray0[1] = "x";
      stringArray0[2] = "x";
      stringArray0[3] = "x";
      linkedList0.toArray(stringArray0);
      Float float0 = new Float(Double.NaN);
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      linkedList1.containsAll(linkedList0);
      linkedList1.add(jSONObject0);
      linkedList1.add(jSONObject0);
      JSONObject.quote("$v c=NAXUJr>a`H");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of x
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.769933139454229
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(2029, 2029);
      JSONObject.quote("\t");
      JSONObject jSONObject1 = new JSONObject((Object) "");
      jSONObject1.toString((-571), 101);
      String string0 = "). q&";
      jSONObject1.optDouble("). q&");
      jSONObject1.optBoolean("\t", false);
      jSONObject0.toString();
      String string1 = "Missing value";
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      jSONObject2.optDouble("Missing value");
      JSONObject jSONObject3 = jSONObject1.append("\"\\t\"", "{}");
      jSONObject2.optString("\t");
      try { 
        jSONObject3.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.759786702369974
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 2029);
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 55;
      jSONObject0.toString(2029, 2029);
      String string0 = "\\t";
      JSONObject.quote("\t");
      JSONObject jSONObject1 = new JSONObject((Object) "");
      jSONObject1.toString(34, 2029);
      jSONObject0.optDouble("{}");
      jSONObject0.optBoolean("\t", false);
      Float.min((-2123.686F), 1.0F);
      jSONObject1.toString();
      try { 
        jSONObject0.getBoolean("Missing value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Missing value\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Float float0 = new Float(0.0F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(7);
      Integer integer2 = new Integer((-64089270));
      Integer integer3 = new Integer((-64089270));
      Integer.sum((-195), 7);
      Byte byte0 = new Byte((byte)34);
      Integer integer4 = new Integer(7);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Integer integer5 = new Integer(46);
      hashMap1.getOrDefault(integer4, integer5);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Integer integer0 = new Integer(39);
      Integer integer1 = new Integer(62);
      Integer integer2 = new Integer(1261);
      Integer integer3 = new Integer(3262);
      Integer integer4 = new Integer((-2969));
      Integer integer5 = new Integer((-2559));
      Float float0 = new Float(1394.6626F);
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      Float.min(427.78845F, (-0.23543672F));
      Float float0 = new Float((double) (-0.23543672F));
      hashMap1.getOrDefault(hashMap0, float0);
      Float float1 = new Float(427.78845F);
      Float.min(45.95F, (-59.9262F));
      Float float2 = new Float((-0.23543672F));
      Float float3 = new Float(1.0F);
      hashMap1.values();
      Float.max((-0.23543672F), 0.0F);
      Float.sum((-1.0F), (-2227.2625F));
      Double double0 = new Double((-1693.2980780959));
      Double.min(3081.333, (-2228.2625F));
      Double.sum(1456.39940865, 5646.0);
      Double.max((-59.9262F), (-59.9262F));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "W~CY78w3u8E{@`P[u0~g";
      Float float0 = new Float(0.0F);
      Long long0 = new Long(0L);
      Long long1 = new Long((-1533L));
      Long long2 = new Long(2028L);
      Long.compareUnsigned(1295L, (-1533L));
      Boolean boolean0 = Boolean.TRUE;
      Double double0 = new Double(177L);
      JSONObject.getNames((Object) "W~CY78w3u8E{@`P[u0~g");
      JSONTokener jSONTokener0 = new JSONTokener("W~CY78w3u8E{@`P[u0~g");
      jSONTokener0.nextTo('@');
      jSONTokener0.skipTo('@');
      try { 
        jSONTokener0.next(38);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Substring bounds error at character 12 of W~CY78w3u8E{@`P[u0~g
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      HashMap<String, Integer> hashMap3 = new HashMap<String, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap3.replaceAll(biFunction0);
      Short.toUnsignedInt((short) (-3598));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject0.getInt("vdFXf= M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vdFXf= M\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.5197387829465234
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Long long0 = new Long((-974L));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ervhWJa]g!AM*tJ9|";
      stringArray0[1] = "gettoLowerCase";
      stringArray0[2] = ">rU~eDERAW/$'qJ=QO";
      stringArray0[3] = "getintern";
      stringArray0[4] = ":Kv K@U{~DViqS~";
      stringArray0[5] = "?r8";
      stringArray0[6] = "Oav; 3E/";
      stringArray0[7] = "getvalueOf";
      stringArray0[8] = "A JSONArray text must start with '['";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      int int0 = jSONObject0.optInt("$I+.%w\"-*jBY7!d", 1290);
      assertEquals(1290, int0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Integer integer0 = new Integer(59);
      Integer.max(1121, (-2326));
      Integer.compareUnsigned(1121, 59);
      hashMap0.getOrDefault(integer0, integer0);
      Float float0 = new Float((float) 1);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("$&HYvEZu_?4]Er6p", (long) 59);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject.quote("U//CHC(XcIVB>/p");
      Object object0 = JSONObject.NULL;
      JSONTokener jSONTokener0 = new JSONTokener("\"U//CHC(XcIVB>/p\"");
      jSONTokener0.nextClean();
      String string0 = "-";
      JSONTokener jSONTokener1 = new JSONTokener("-");
      try { 
        jSONTokener1.nextString('K');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 1 of -
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.8133224558281076
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>(1185, 413.43F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      HashMap<String, Integer> hashMap3 = new HashMap<String, Integer>();
      BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap3.replaceAll(biFunction0);
      Short short0 = new Short((short) (-3598));
      String[] stringArray0 = new String[8];
      stringArray0[1] = "n-L!7qg";
      stringArray0[2] = "n}4|=~rLsTk'FcG8\"X";
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 2029);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.7612118325115627
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Integer integer0 = new Integer(59);
      Integer.getInteger("ishashCode");
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer((-64089270));
      Integer integer3 = new Integer(45);
      Float float0 = new Float((-1194.0F));
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      jSONObject0.put("pu", (Collection) linkedList1);
      jSONObject0.put("ishashCode", 2197.671621);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.1110942732940394
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "W~CY78w3u8E{@`Pu0~g";
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.putOpt("W~CY78w3u8E{@`Pu0~g", "W~CY78w3u8E{@`Pu0~g");
      JSONObject jSONObject1 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      jSONObject1.put("W~CY78w3u8E{@`Pu0~g", 6);
      try { 
        jSONObject1.getJSONObject("W~CY78w3u8E{@`Pu0~g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"W~CY78w3u8E{@`Pu0~g\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.9802701015896562
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Long long0 = new Long(4576L);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      BiFunction<String, Object, Integer> biFunction1 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "wtt#&Q7E%[-S";
      stringArray0[1] = "wtt#&Q7E%[-S";
      JSONObject jSONObject0 = new JSONObject(hashMap2, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.remove("wtt#&Q7E%[-S");
      try { 
        jSONObject1.getLong("^do(KoyIc6UEBa5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^do(KoyIc6UEBa5\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.198800171085
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      assertEquals(2, jSONObject0.length());
      
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((-613.842F));
      boolean boolean0 = jSONObject1.optBoolean("o31tGE");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      Float.min(427.78845F, (-0.23543672F));
      Float float0 = new Float((double) (-0.23543672F));
      hashMap1.getOrDefault(hashMap0, float0);
      Float float1 = new Float(427.78845F);
      Float float2 = new Float((-0.23543672F));
      Float.sum(0.0F, (-524.5086F));
      Float float3 = new Float(1.0F);
      hashMap1.values();
      Float float4 = new Float(0.0F);
      Float.sum((-1.0F), (-2227.2625F));
      HashMap<Float, Float> hashMap3 = new HashMap<Float, Float>();
      Float float5 = new Float((double) (-2228.2625F));
      hashMap1.putIfAbsent(float2, float5);
      HashMap<Float, Float> hashMap4 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Float float0 = new Float((-1810.9944F));
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Double, Boolean> hashMap2 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float1 = new Float((-1810.9944F));
      boolean boolean0 = jSONObject0.has("Rf%!@jznh &w>Ia'");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.8218875867684052
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>(1185, 412.9968F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      Float.valueOf(412.9968F);
      Float.min(1185, 1185);
      Float.sum((-2227.2625F), (-2227.2625F));
      Float.min((-2910.4512F), 1386.1666F);
      Float.max(329.99F, (-2825.8691F));
      Float.min((-2825.8691F), (-1281.1896F));
      Float.max(412.9968F, 1185.0F);
      HashMap<Float, Double> hashMap3 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap3);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "do";
      stringArray0[1] = "Unclosed comment";
      stringArray0[2] = "TEo1P[f\"Xv%duQ";
      stringArray0[3] = "";
      stringArray0[4] = "`K`*#bpx";
      stringArray0[5] = "e,c(zKKF,H%~Unc_8]|";
      stringArray0[6] = "T'IP[*WO.pQ+[DQ.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getJSONArray("pus");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pus\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.0181006985992793
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>(1185, 412.9968F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      Float float0 = Float.valueOf(412.9968F);
      Float.min(1185, 1185);
      Float.sum((-2227.2625F), (-2227.2625F));
      Float.max(329.99F, (-2027.0F));
      Float.min((-2027.0F), (-2027.0F));
      Float.max(412.9968F, 1185.0F);
      HashMap<Float, Double> hashMap3 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap3);
      String[] stringArray0 = new String[24];
      stringArray0[0] = "do";
      Float float1 = new Float(0.0);
      Double double0 = new Double(1185);
      hashMap3.put(float1, double0);
      stringArray0[1] = "Unclosed comment";
      stringArray0[2] = "TEo1P[f\"Xv%duQ";
      Double double1 = Double.valueOf(0.0);
      Double double2 = new Double(Double.NaN);
      hashMap3.replace(float0, double1, double2);
      stringArray0[3] = "Ksll";
      stringArray0[4] = "`K`*#bpx";
      stringArray0[5] = "e,c(zKKF,H%~Unc_8]|";
      stringArray0[6] = "T'IP[*WO.pQ+[DQ.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer integer0 = new Integer(59);
      Integer integer1 = new Integer(59);
      Integer integer2 = new Integer((-12));
      Integer integer3 = new Integer((-64089270));
      Integer integer4 = new Integer((-64089270));
      Integer integer5 = new Integer((-64089270));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "set";
      stringArray0[1] = "|XicU}3<`|qJ[k";
      stringArray0[2] = "T'IP[*WO.pQ+[DQ.";
      stringArray0[3] = "e,c(zKKF,H%~Unc_8]|";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.2391997573006275
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      hashMap0.entrySet();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>(1185, 413.43F);
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap3 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap3);
      Float float0 = new Float((double) 413.43F);
      hashMap3.getOrDefault(hashMap1, float0);
      jSONObject0.optJSONObject("get");
      try { 
        jSONObject0.get("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      double double0 = jSONObject0.optDouble("isvalueOf", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.3628722294375422
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Integer integer0 = new Integer(59);
      Float float0 = Float.valueOf(0.0F);
      Float.min(1284.047F, 1284.047F);
      Float.sum((-1944.99F), 1284.047F);
      Float.min((-660.943F), 1284.047F);
      Float.sum(1284.047F, (-660.943F));
      Float.sum((-1035.33F), 1284.047F);
      Float float1 = new Float(0.0F);
      Float.max(0.0F, 0.0F);
      Float.isFinite(0.0F);
      Float.max(1.0F, 0.0F);
      Float.sum((-2227.2625F), 623.104F);
      Double double0 = new Double((-1693.2980780959));
      Double.min(0.0F, 0.0F);
      Double.sum(5646.0, 223.915827724);
      Double.max(2235.51, 0.0F);
      JSONObject.numberToString(float0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.7824268046877836
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(101);
      JSONObject.valueToString(jSONArray0, 101, (-16519105));
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.2698901782845646
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Long long0 = new Long(870L);
      Float.sum((-1819.0F), (-1819.0F));
      Long.max(870L, 0L);
      Float float0 = new Float((double) (-3638.0F));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.divideUnsigned(1309L, (-551));
      Long.compareUnsigned(1995L, 870L);
      String string0 = jSONObject0.toString((-551));
      String string1 = jSONObject0.toString(28, 34);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.7322201838634412
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      HashMap<Long, Integer> hashMap1 = new HashMap<Long, Integer>(855, 855);
      hashMap0.putAll(hashMap1);
      hashMap0.entrySet();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>(0, 53.28553F);
      Boolean boolean0 = new Boolean("U<K!sat3*'h2zRf6r");
      Integer integer0 = new Integer(10);
      JSONObject jSONObject0 = new JSONObject(integer0);
      double double0 = jSONObject0.optDouble("\r", (double) 1185);
      assertEquals(1, jSONObject0.length());
      assertEquals(1185.0, double0, 0.01);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Long long0 = new Long(4576L);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      BiFunction<Object, Object, Integer> biFunction1 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      hashMap1.compute((String) null, biFunction1);
      String[] stringArray0 = new String[1];
      hashMap1.replace(".", (Integer) null, (Integer) null);
      stringArray0[0] = "wtt#&Q7E%[-S";
      JSONObject jSONObject0 = new JSONObject(hashMap2, stringArray0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Integer integer0 = new Integer(102);
      Integer.sum(16, 34);
      hashMap2.getOrDefault((Object) null, integer0);
      double double0 = jSONObject0.optDouble("wtt#&Q7E%[-S");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Integer integer0 = new Integer(39);
      Integer integer1 = new Integer(62);
      Integer integer2 = new Integer(1261);
      Integer integer3 = new Integer(3261);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.3987405541121611
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      hashMap0.entrySet();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>(1185, 413.43F);
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap3 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap3);
      jSONObject0.optJSONArray("par");
      try { 
        jSONObject0.getBoolean(")pa+MxAC0x*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")pa+MxAC0x*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.9651948114656361
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Integer integer0 = new Integer(39);
      Integer integer1 = new Integer((-3981));
      Integer integer2 = new Integer((-28746850));
      Integer integer3 = new Integer((-64089270));
      Float float0 = new Float((float) 7);
      JSONObject jSONObject0 = new JSONObject(integer1);
      Integer.toUnsignedString((-3981));
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.put("'", (Object) double0);
      Integer.getInteger("'", integer1);
      jSONObject0.remove("'");
      Double.isFinite((-863.9929644));
      Integer.remainderUnsigned(39, 1185);
      Object object0 = JSONObject.NULL;
      jSONObject1.accumulate("'", integer3);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.9877235137023384
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Integer integer0 = new Integer(39);
      Integer integer1 = new Integer((-3981));
      Integer integer2 = new Integer((-28746850));
      Integer integer3 = new Integer((-64089270));
      Float float0 = new Float((float) 7);
      JSONObject jSONObject0 = new JSONObject(integer1);
      Integer.toUnsignedString(1038);
      Double double0 = new Double(0.0);
      jSONObject0.put("1038", (Object) integer1);
      Integer integer4 = new Integer(102);
      Integer.getInteger("!", integer4);
      Double.isFinite((-194.0401567692));
      Integer.remainderUnsigned((-3981), (-471));
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("", (Object) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.4808710634842734
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>(1185, 413.43F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      HashMap<String, Integer> hashMap3 = new HashMap<String, Integer>();
      BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap3.replaceAll(biFunction0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "bZz^M[}E)ncr-c[\"^ .";
      stringArray0[1] = "n-L!7qg";
      stringArray0[2] = "n}4|=~rLsTk'FcG8\"X";
      stringArray0[3] = "toL";
      stringArray0[4] = "H!#r]DBkJ[5)q-Pt";
      Short.toUnsignedInt((short) (-3598));
      stringArray0[5] = "5";
      stringArray0[6] = "Qd/dF/;L5U_1";
      stringArray0[7] = "bZz^M[}E)ncr-c[\"^ .";
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.put("gettoBinaryString", (Map) hashMap1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.95571359982777
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>(1185, 412.9968F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      Float.valueOf(412.9968F);
      Float.min(1185, 1185);
      Float.sum((-2227.2625F), (-2227.2625F));
      Float.min((-2910.4512F), 1386.1666F);
      Float.max(329.99F, (-2825.8691F));
      Float.min((-2825.8691F), (-1281.1896F));
      Float.max(412.9968F, 1185.0F);
      HashMap<Float, Double> hashMap3 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap3);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "do";
      stringArray0[1] = "Unclosed comment";
      stringArray0[2] = "TEo1P[f\"Xv%duQ";
      stringArray0[3] = "";
      stringArray0[4] = "`K`*#bpx";
      Byte byte0 = new Byte((byte)33);
      jSONObject0.append("getset", hashMap1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.3085781000463086
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Integer integer0 = new Integer(59);
      Integer.max(1121, (-2326));
      Integer.compareUnsigned(1121, 59);
      hashMap0.getOrDefault(integer0, integer0);
      Float float0 = new Float(0.0F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean("+/Ot&S)BBD{'E&", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      hashMap0.entrySet();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>(1185, 413.43F);
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap3 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap3);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      Float.min(427.78845F, (-0.23543672F));
      Float float0 = new Float((double) (-0.23543672F));
      hashMap1.getOrDefault(hashMap0, float0);
      Float float1 = new Float(427.78845F);
      Float.min(45.95F, (-59.9262F));
      Float float2 = new Float((-0.23543672F));
      Float float3 = new Float(1.0F);
      hashMap1.values();
      Float.max((-0.23543672F), 0.0F);
      Float.sum((-1.0F), (-2227.2625F));
      HashMap<Float, Float> hashMap3 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap4 = new HashMap<Float, Float>();
      Double double0 = new Double(0.0);
      Double double1 = new Double((-925.86122720861));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(double1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Long long0 = new Long(875L);
      String[] stringArray0 = new String[2];
      Long.sum(2307L, 107L);
      Long.min(875L, 875L);
      stringArray0[0] = "";
      stringArray0[1] = " of ";
      Boolean.compare(true, true);
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONTokener jSONTokener1 = new JSONTokener("sum");
      jSONTokener1.back();
      jSONTokener1.nextTo('\\');
      JSONTokener jSONTokener2 = new JSONTokener("}iR xUh");
      jSONTokener2.nextTo("");
      JSONTokener jSONTokener3 = new JSONTokener("*rIQV0vT,Fc<NuW`");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of *rIQV0vT,Fc<NuW`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>(1185, 412.9968F);
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      Float.valueOf(412.9968F);
      Float.min(1185, 1185);
      Float.sum((-2227.2625F), (-2227.2625F));
      Float.max(329.99F, (-2027.0F));
      Float.min((-2027.0F), (-2027.0F));
      Float.max(412.9968F, 1185.0F);
      HashMap<Float, Double> hashMap3 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap3);
      String[] stringArray0 = new String[24];
      stringArray0[0] = "do";
      Float float0 = new Float(0.0);
      Double double0 = new Double(1185);
      hashMap3.put(float0, double0);
      stringArray0[1] = "Unclosed comment";
      stringArray0[2] = "TEo1P[f\"Xv%duQ";
      Double.valueOf(0.0);
      Double.isFinite(1918.5);
      Integer.remainderUnsigned(1185, 1185);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
