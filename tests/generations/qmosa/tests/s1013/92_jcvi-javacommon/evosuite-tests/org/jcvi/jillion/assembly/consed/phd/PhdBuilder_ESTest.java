/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 01:15:27 GMT 2019
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jcvi.jillion.assembly.consed.phd.ArtificialPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.assembly.consed.phd.PhdBuilder;
import org.jcvi.jillion.assembly.consed.phd.PhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.PhdWholeReadItem;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannel;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhdBuilder_ESTest extends PhdBuilder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0421918905228877
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PositionSequence positionSequence0 = null;
      DefaultPhd defaultPhd0 = new DefaultPhd("org.jcvi.jillion.internal.core.EncodedSequence", (NucleotideSequence) null, qualitySequence0, (PositionSequence) null);
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      int int0 = 804;
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks(804, 804);
      phdBuilder1.fakePeaks();
      PhdBuilder phdBuilder2 = phdBuilder1.fakePeaks();
      phdBuilder2.fakePeaks();
      phdBuilder1.copy();
      phdBuilder0.fakePeaks();
      // Undeclared exception!
      try { 
        phdBuilder2.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.ArtificialPhd", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("f/AqmTyL}x@K2", nucleotideSequence0, qualitySequence0);
      phdBuilder0.peaks((PositionSequence) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("peak spacing must be >0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=peak spacing must be >0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9448468679826323
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence1).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("3\"%rv:sf:Uj(", nucleotideSequence0, qualitySequence1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("%skpA", "9!qu.%jgKM[C{Y");
      phdBuilder0.comments(hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      phdBuilder0.comments(hashMap1);
      // Undeclared exception!
      try { 
        phdBuilder0.comments((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks();
      phdBuilder1.build();
      System.setCurrentTimeMillis((-128L));
      byte[] byteArray0 = new byte[7];
      short[] shortArray0 = null;
      DefaultChannel defaultChannel0 = null;
      try {
        defaultChannel0 = new DefaultChannel(byteArray0, (short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4187591973137939
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence1).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("3\"%rv:sf:Uj(", nucleotideSequence0, qualitySequence1);
      System.setCurrentTimeMillis(1428L);
      phdBuilder0.fakePeaks();
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(78, (-1358));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // peak spacing must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis(829L);
      System.setCurrentTimeMillis(829L);
      long long0 = 10L;
      System.setCurrentTimeMillis(10L);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("org.jcvi.jillion.core.pos.Position", "org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange");
      hashMap0.put("org.jcvi.jillion.core.pos.Position", "org.jcvi.jillion.core.pos.Position");
      hashMap0.put("", "org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange");
      hashMap0.put((String) null, (String) null);
      hashMap0.put("org.jcvi.jillion.core.pos.Position", "org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange");
      System.setCurrentTimeMillis(10L);
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((String) null, (NucleotideSequence) null, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("-qJ s", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.wholeReadItems((List<PhdWholeReadItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis(829L);
      System.setCurrentTimeMillis(829L);
      long long0 = 10L;
      System.setCurrentTimeMillis(10L);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("org.jcvi.jillion.core.pos.Position", "org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange");
      hashMap0.put("org.jcvi.jillion.core.pos.Position", "org.jcvi.jillion.core.pos.Position");
      hashMap0.put("", "org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange");
      hashMap0.put((String) null, (String) null);
      hashMap0.put("org.jcvi.jillion.core.pos.Position", "confidences must all have the same length");
      System.setCurrentTimeMillis(10L);
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("", (NucleotideSequence) null, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sequence can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 829L;
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("RkBQ", nucleotideSequence0, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualities can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("f/AqmTyL}x@K2", nucleotideSequence0, qualitySequence0);
      phdBuilder0.build();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("peak spacing must be >0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=peak spacing must be >0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.copy();
      assertNotSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      phdBuilder0.fakePeaks(3233, 3233);
      System.setCurrentTimeMillis((-128L));
      byte[] byteArray0 = new byte[7];
      short[] shortArray0 = null;
      DefaultChannel defaultChannel0 = null;
      try {
        defaultChannel0 = new DefaultChannel(byteArray0, (short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("?6N>@Yh|]6~wTp;", nucleotideSequence0, qualitySequence0);
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence1).getLength();
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = ArtificialPhd.createNewbler454Phd("KT,20k", nucleotideSequence1, qualitySequence1, (Map<String, String>) null);
      artificialPhd0.getComments();
      List<PhdWholeReadItem> list0 = artificialPhd0.getWholeReadItems();
      NucleotideSequence nucleotideSequence2 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence2 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      DefaultPhd defaultPhd0 = new DefaultPhd("bitLength must be >=0", nucleotideSequence2, qualitySequence2, (PositionSequence) null, (Map<String, String>) null);
      List<PhdReadTag> list1 = defaultPhd0.getReadTags();
      ArtificialPhd artificialPhd1 = new ArtificialPhd("bitLength must be >=0", nucleotideSequence1, qualitySequence1, (Map<String, String>) null, list0, list1, (-425));
      List<PhdWholeReadItem> list2 = artificialPhd1.getWholeReadItems();
      PhdBuilder phdBuilder1 = phdBuilder0.wholeReadItems(list2);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      System.setCurrentTimeMillis((-128L));
      LinkedList<PhdReadTag> linkedList0 = new LinkedList<PhdReadTag>();
      phdBuilder0.readTags(linkedList0);
      byte[] byteArray0 = new byte[7];
      short[] shortArray0 = null;
      DefaultChannel defaultChannel0 = null;
      try {
        defaultChannel0 = new DefaultChannel(byteArray0, (short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence1).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("5\"%rv:sf:Uj(", nucleotideSequence0, qualitySequence1);
      // Undeclared exception!
      try { 
        phdBuilder0.readTags((List<PhdReadTag>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks((-3976), (-3976));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = new ArtificialPhd("", nucleotideSequence0, qualitySequence0, (-180));
      List<PhdReadTag> list0 = artificialPhd0.getReadTags();
      ArtificialPhd artificialPhd1 = new ArtificialPhd("", nucleotideSequence0, qualitySequence0, (Map<String, String>) null, (List<PhdWholeReadItem>) null, list0, (-180));
      artificialPhd1.getComments();
      ArtificialPhd artificialPhd2 = new ArtificialPhd("", nucleotideSequence0, qualitySequence0, (Map<String, String>) null, (List<PhdWholeReadItem>) null, list0, (-4413), (-180));
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList1 = new LinkedList<PhdReadTag>();
      ArtificialPhd artificialPhd0 = new ArtificialPhd(" t YI/Z\"[lD!G)wj", nucleotideSequence0, qualitySequence0, (Map<String, String>) null, linkedList0, linkedList1, 88, 88);
      DefaultPhdReadTag[] defaultPhdReadTagArray0 = new DefaultPhdReadTag[7];
      Range range0 = Range.ofLength(4107L);
      MockDate mockDate0 = new MockDate(88, 6, 87);
      DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag(" t YI/Z\"[lD!G)wj", " t YI/Z\"[lD!G)wj", range0, mockDate0, ",Gr)je@!o@_v6d9qZ[", "'*~H_O9eu");
      defaultPhdReadTagArray0[0] = defaultPhdReadTag0;
      MockDate mockDate1 = new MockDate(0L);
      DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag("unknown encoded value : ", "", range0, mockDate1, ",Gr)je@!o@_v6d9qZ[", "");
      defaultPhdReadTagArray0[1] = defaultPhdReadTag1;
      DefaultPhdReadTag defaultPhdReadTag2 = new DefaultPhdReadTag("Ql@,-hQcc", "NONE", range0, mockDate1, "", " t YI/Z\"[lD!G)wj");
      defaultPhdReadTagArray0[2] = defaultPhdReadTag2;
      DefaultPhdReadTag defaultPhdReadTag3 = new DefaultPhdReadTag("Ql@,-hQcc", "NONE", range0, mockDate1, "unknown encoded value : ", "I42kESQQlBW.");
      defaultPhdReadTagArray0[3] = defaultPhdReadTag3;
      Instant instant0 = MockInstant.now();
      Instant instant1 = MockInstant.plusMillis(instant0, 0L);
      Instant instant2 = MockInstant.minusMillis(instant1, 0L);
      Date date0 = Date.from(instant2);
      DefaultPhdReadTag defaultPhdReadTag4 = new DefaultPhdReadTag("/^*<Ble", "l:kNz08,/e", range0, date0, " t YI/Z\"[lD!G)wj", "I42kESQQlBW.");
      defaultPhdReadTagArray0[4] = defaultPhdReadTag4;
      MockDate mockDate2 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag5 = new DefaultPhdReadTag(" t YI/Z\"[lD!G)wj", "org.jcvi.jillion.internal.core.io.ValueSizeStrategy", range0, mockDate2, ",Gr)je@!o@_v6d9qZ[", ",Gr)je@!o@_v6d9qZ[");
      defaultPhdReadTagArray0[5] = defaultPhdReadTag5;
      Date date1 = Date.from(instant0);
      DefaultPhdReadTag defaultPhdReadTag6 = new DefaultPhdReadTag(",Gr)je@!o@_v6d9qZ[", "I42kESQQlBW.", range0, date1, "", "7K'z|hG;Z|dAE,iW9}");
      defaultPhdReadTagArray0[6] = defaultPhdReadTag6;
      linkedList1.toArray(defaultPhdReadTagArray0);
      List<PhdWholeReadItem> list0 = artificialPhd0.getWholeReadItems();
      DefaultPhd defaultPhd0 = new DefaultPhd(",Gr)je@!o@_v6d9qZ[", nucleotideSequence0, qualitySequence0, (PositionSequence) null, (Map<String, String>) null, list0, linkedList1);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(defaultPhd0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List<PhdReadTag> list0 = null;
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Phd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // phd to copy can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }
}
