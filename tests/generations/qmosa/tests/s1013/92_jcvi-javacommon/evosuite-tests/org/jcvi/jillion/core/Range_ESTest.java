/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 02:52:22 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.658840006076393
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1L));
      Object object1 = new Object();
      Object object2 = new Object();
      Range range1 = Range.of((-1L));
      range1.equals(range0);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range0.equals(object6);
      Object object7 = new Object();
      Range range2 = Range.of(127L);
      Object object8 = new Object();
      range0.complement(range2);
      range2.intersection(range1);
      Object object9 = new Object();
      assertFalse(object9.equals((Object)object1));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.9468945214824034
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(214L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(9223372036854775807L);
      range_Builder0.shift(214L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range1 = Range.of(214L);
      Range range2 = Range.of((-305L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range3 = Range.of(255L);
      boolean boolean0 = range1.equals(range3);
      assertFalse(boolean0);
      
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range range4 = range0.intersection(range2);
      long long0 = range4.getLength();
      assertEquals(0L, long0);
      
      Object object7 = new Object();
      range4.asRange();
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6198855975616056
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.ofLength(2207L);
      Range range0 = Range.of(2207L);
      long long0 = 318L;
      Range.ofLength(318L);
      Range range1 = Range.of(1648L);
      range0.equals(range1);
      Range.of(318L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.of(65535L, 318L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.6742091086091144
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-9223372036854775808L));
      Range range0 = Range.of((-9223372036854775808L));
      Object object2 = new Object();
      Range range1 = Range.of((-9223372036854775808L));
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      long long1 = range1.getEnd();
      //  // Unstable assertion: assertEquals((-9223372036854775808L), long1);
      
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.shift((-128L));
      Range.Builder range_Builder2 = new Range.Builder(3189L);
      range_Builder1.shift(9223372036854773586L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.5748951941555456
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 439L;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 439L);
      range0.intersection(range1);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 1227L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1227L, 248L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=4.049918781769597
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder();
      long long1 = 32775L;
      Range.Builder range_Builder1 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(range_CoordinateSystem0, 32775L, 32775L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of((-2523L));
      range1.equals(range0);
      Range.of(range_CoordinateSystem0, (-2523L), 0L);
      Long long2 = new Long(32775L);
      Range range4 = Range.ofLength(32775L);
      range4.complement(range3);
      Range range5 = range0.intersection(range2);
      Range.of((-2523L), 0L);
      range0.equals(range4);
      // Undeclared exception!
      try { 
        range5.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.702982534903243
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 1L);
      range1.spliterator();
      Range range2 = range0.intersection(range1);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 4294967293L;
      long long1 = 170L;
      long long2 = 412L;
      Range.of(range_CoordinateSystem1, 170L, 412L);
      range1.intersection(range2);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_Builder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.79981974404512
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      long long0 = (-9223372036854775808L);
      Long long1 = new Long((-9223372036854775808L));
      Range range0 = Range.of((-9223372036854775808L));
      Object object2 = new Object();
      Range.of((-9223372036854775808L));
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range0.equals(object5);
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      long long2 = 9223372036854775807L;
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range2 = range1.asRange();
      // Undeclared exception!
      try { 
        range0.complement(range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.125551804660487
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 9223372032559808512L;
      Range range2 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372032559808512L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range3 = Range.ofLength(9223372032559808512L);
      range3.complementFrom(list0);
      String string0 = "";
      range2.equals("");
      Range range4 = range1.intersection(range0);
      long long1 = 2079L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = 1L;
      Range.of(range_CoordinateSystem1, 0L, 1L);
      range4.intersection(range1);
      long long3 = (-29759L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-29759L), (-32715L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=4.029248780679144
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(214L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(9223372036854775807L);
      range_Builder0.shift(214L);
      Range.Builder range_Builder2 = range_Builder1.contractBegin(9223372032559808514L);
      range_Builder1.expandBegin(214L);
      Range range1 = Range.of(214L);
      range_Builder0.contractBegin(1950L);
      range0.complement(range1);
      Range range2 = Range.of((-2147483647L), 255L);
      Long long0 = new Long(1950L);
      range0.equals(range_Builder0);
      range0.intersection(range2);
      range_Builder0.expandEnd(9223372032559808514L);
      range_Builder2.build();
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(1950L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=4.028905685286739
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = 2207L;
      Range range0 = Range.ofLength(2207L);
      Range range1 = Range.of(2207L);
      long long1 = (-1174L);
      Long long2 = new Long((-1174L));
      Range range2 = Range.of((-9223372036854775808L));
      Object object0 = new Object();
      Range range3 = Range.of((-9223372036854775808L));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range3.equals(range2);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range2);
      range_Builder1.build();
      Range range4 = range_Builder2.build();
      range0.complement(range4);
      // Undeclared exception!
      try { 
        Range.ofLength((-1174L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.232104564818845
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(9223372032559808512L);
      Range range0 = Range.of(9223372032559808512L);
      Object object2 = new Object();
      Range range1 = Range.of(9223372036854710274L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range0.split(255L);
      range0.getLength();
      Object object7 = new Object();
      range1.equals(range0);
      Object object8 = new Object();
      Object object9 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.8952023638586635
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2301L), (-824L));
      Range range1 = Range.of((-824L));
      Object object0 = new Object();
      range0.equals(range1);
      range1.complement(range0);
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, (-1173L));
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4008L, (-824L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.594597420866077
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = 726L;
      Range.Builder range_Builder0 = new Range.Builder(726L);
      long long1 = 4294967286L;
      Range range0 = Range.of(726L, 4294967286L);
      long long2 = (-1L);
      range_Builder0.contractEnd((-1L));
      Range range1 = Range.ofLength(9223372036854775796L);
      Range range2 = range0.intersection(range1);
      range0.equals(range2);
      range0.equals(range2);
      long long3 = 0L;
      long long4 = 450L;
      long long5 = 0L;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(450L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.8060316958667815
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      long long0 = 2147483647L;
      Long long1 = new Long(2147483647L);
      long long2 = 335L;
      Range range0 = Range.ofLength(335L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 335L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range1.spliterator();
      Range range2 = range0.intersection(range1);
      range2.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 1638L, 1638L);
      Range.of(255L, 1638L);
      long long3 = (-9223372036854775808L);
      Range.of(255L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-28L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.9562432640642387
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
      
      Object object0 = new Object();
      Range range2 = Range.of(9223372032559808512L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range3 = Range.of(9223372032559808512L);
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range2.equals(range3);
      assertSame(range3, range2);
      assertTrue(boolean0);
      
      Range range4 = Range.of(3676L, 9223372036854773895L);
      Range range5 = Range.of((-127L));
      Range range6 = range5.intersection(range4);
      assertTrue(range6.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.67479806597151
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(9223372032559808512L);
      Range range0 = Range.of(9223372032559808512L);
      Object object2 = new Object();
      Range range1 = Range.of(9223372036854710274L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      long long1 = range0.getLength();
      //  // Unstable assertion: assertEquals(1L, long1);
      
      Object object7 = new Object();
      boolean boolean0 = range1.equals((Object) null);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Object object8 = new Object();
      Object object9 = new Object();
      Range range2 = Range.ofLength(9223372036854710274L);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range1));
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=4.006622097995304
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(255L, 1939L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 127L, 4294967295L);
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals("|j.tRO^&p");
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(65535L, 4294967295L);
      range_Builder0.shift(1507L);
      List<Range> list0 = range1.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 65535L, 4294967295L);
      range2.complementFrom(list0);
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("value can not be <0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse value can not be <0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.676752893650998
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = 726L;
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      long long1 = 4294967295L;
      Range range0 = Range.ofLength(4294967295L);
      long long2 = 0L;
      range_Builder0.contractEnd(0L);
      Range range1 = Range.ofLength(9223372036854775806L);
      Range range2 = range0.intersection(range1);
      Range.of(4294967295L);
      range0.equals(range2);
      Object object0 = new Object();
      range0.equals(range2);
      long long3 = 0L;
      long long4 = 450L;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(450L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4958473310920835
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-9223372036854775808L));
      Range.of((-9223372036854775808L));
      Object object2 = new Object();
      Range range0 = Range.of((-9223372036854775808L));
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range.of(1L);
      Object object6 = new Object();
      Range range1 = Range.of(0L);
      range1.getEnd();
      Object object7 = new Object();
      range0.equals((Object) null);
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0911779261527537
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-9223372036854775808L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range range0 = Range.of(1L);
      Object object6 = new Object();
      Range range1 = Range.of(0L);
      range1.getEnd();
      Object object7 = new Object();
      range0.equals(range1);
      Object object8 = new Object();
      Object object9 = new Object();
      assertFalse(object9.equals((Object)object7));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.7332875300953696
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 1L, 32767L);
      range1.spliterator();
      range0.intersection(range1);
      range1.equals(range0);
      long long0 = 0L;
      Range.of(range_CoordinateSystem1, 0L, 248L);
      Range.of(1L, 1L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-2527L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1786334995603744
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of(65535L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.79149909809189
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = (-2523L);
      Range.Builder range_Builder0 = new Range.Builder();
      long long1 = 32775L;
      Range.Builder range_Builder1 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(range_CoordinateSystem0, 32775L, 32775L);
      range0.intersection(range1);
      Range.of((-2523L));
      range1.equals(range0);
      Long long2 = new Long(32775L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-2523L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.821977599903004
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2524L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      range_Builder0.shift(2524L);
      range0.complement(range0);
      long long0 = (-18L);
      long long1 = 2845L;
      Range.CoordinateSystem.values();
      Range.of(2845L);
      range0.equals((Object) null);
      long long2 = (-1383L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967293L, (-1383L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.7475571944545836
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      long long0 = 1L;
      long long1 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range2 = range0.intersection(range1);
      range2.equals(range1);
      Range.of((-2523L));
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(0L, (-2523L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.7567012757110922
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Object object0 = new Object();
      Range range0 = Range.of(2147483647L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(range_CoordinateSystem0);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Long long0 = new Long((-3302L));
      range0.equals((Object) null);
      Range range1 = Range.of((-3423L), 627L);
      Range range2 = Range.of(627L);
      Range range3 = range2.intersection(range1);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.Comparators.values();
      long long0 = (-434L);
      Range.Builder range_Builder0 = new Range.Builder((-434L), (-434L));
      Range range0 = null;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.82176736309182
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(32775L);
      Range range1 = Range.ofLength(255L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-1L), (-1L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long0 = new Long((-2339L));
      Long long1 = Long.getLong("", long0);
      range0.equals(long1);
      range2.intersection(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(3310L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.8413570637795216
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1939L, 1939L);
      range_Builder0.build();
      Object object0 = new Object();
      Long long0 = new Long(1939L);
      Range.of((-32768L));
      Object object1 = new Object();
      Range.of((-2300L));
      Object object2 = new Object();
      Object object3 = new Object();
      Range.of((-32768L));
      Range.Builder range_Builder1 = new Range.Builder(1939L);
      range_Builder0.shift(1939L);
      Range.of((-128L), 135L);
      range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder2 = new Range.Builder();
      Range.of(range_CoordinateSystem0, (-2187L), 2147483647L);
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854773869L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.5916309475033636
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1L));
      Object object1 = new Object();
      Range range1 = Range.of(770L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range0.equals(object5);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      range0.intersection(range1);
      Object object9 = new Object();
      assertFalse(object9.equals((Object)object1));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.844696473549485
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-6L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-6L), 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(range_CoordinateSystem1, (-6L), (-6L));
      range1.spliterator();
      range0.intersection(range1);
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 0L, 248L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(1139L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.900844613993411
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      range0.intersection(range1);
      Range range2 = Range.of((-2523L));
      range1.equals(range0);
      Range range3 = Range.of((-2523L), 32767L);
      Long long0 = new Long(32767L);
      range0.equals(range2);
      range3.intersection(range2);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(9L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=4.03489036556697
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.ofLength(2207L);
      Range range1 = Range.of(2207L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(318L);
      Range range4 = Range.of(1648L);
      range2.equals(range4);
      Range.of((-1184L), 1648L);
      range3.complement(range4);
      Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1451333427096113
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.of(9223372036854710274L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Range range0 = Range.of(9223372036854710274L);
      range0.equals("}y\"NkuK[}<I3~]0&X");
      Object object10 = new Object();
      assertFalse(object10.equals((Object)object9));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=4.090853739807998
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(240L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      range_Builder0.shift(9223372036854775807L);
      Range range1 = Range.of(240L);
      range_Builder0.contractBegin(1950L);
      range0.complement(range1);
      range1.equals(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-1819L), 255L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range2.equals(range_CoordinateSystem0);
      range2.intersection(range0);
      Range.Builder range_Builder1 = new Range.Builder(1950L, 9223372036854775807L);
      Range.Builder range_Builder2 = new Range.Builder(65535L);
      Range.Builder range_Builder3 = range_Builder2.shift(3310L);
      range_Builder3.build();
      // Undeclared exception!
      try { 
        Range.of(846L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.7441305160698435
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = (-2523L);
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 34L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.expandEnd(0L);
      long long1 = 2222L;
      long long2 = 9223372036854775807L;
      Range range0 = Range.of(range_CoordinateSystem0, 2222L, 9223372036854775807L);
      range_Builder0.build();
      range0.equals("");
      range_Builder0.expandEnd(16L);
      range0.intersection(range0);
      long long3 = 0L;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(908L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.860197202072642
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1939L, 1939L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(1939L);
      Range range1 = Range.of((-32768L));
      Object object2 = new Object();
      Range range2 = Range.of((-2300L));
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range range3 = range0.intersection(range1);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertTrue(range3.isEmpty());
      
      Object object7 = new Object();
      List<Range> list0 = range2.split(1L);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.664419514899537
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = 214L;
      long long1 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder(214L, 9223372036854775807L);
      Range range0 = Range.ofLength(214L);
      Range.Builder range_Builder1 = new Range.Builder(9223372036854775807L);
      range_Builder0.shift(214L);
      long long2 = 2222L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2222L, 4294967295L);
      range1.equals("");
      Range.Builder range_Builder2 = range_Builder0.expandEnd(2222L);
      range0.intersection(range0);
      Range.Builder range_Builder3 = new Range.Builder(2222L);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(range_Builder2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.7552602741080494
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = 0L;
      long long1 = (-824L);
      Range range0 = Range.of((-824L));
      long long2 = (-1173L);
      Range range1 = Range.of((-824L));
      Object object0 = new Object();
      range0.equals(range1);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.of(0L, (-1173L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.7460283746210434
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-824L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2301L), (-824L));
      Range range1 = Range.of(range_CoordinateSystem0, (-2301L), (-2301L));
      range0.equals(range1);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.of(0L, (-1173L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.877003570768733
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = 240L;
      Range.Builder range_Builder0 = new Range.Builder(240L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      range_Builder0.shift(240L);
      range0.complement(range0);
      Range.of(240L);
      long long1 = 2826L;
      Range.of(2826L);
      range0.equals((Object) null);
      long long2 = (-1383L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967293L, (-1383L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.948841166777542
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 1L);
      range1.spliterator();
      Range range2 = range0.intersection(range1);
      range0.equals(range2);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 0L, 248L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      range_Builder1.shift((-5528L));
      Range.of(0L, 1205L);
      Range.of((-195L), 2085L);
      range0.complement(range2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 3525L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.715383892064438
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-9223372036854775808L));
      Range range0 = Range.of((-2088L));
      Object object2 = new Object();
      Range range1 = Range.of(419L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range0.intersects(range1);
      range0.equals(object2);
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Long long1 = new Long(65535L);
      range1.equals((Object) null);
      long long2 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-977L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -977 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.904925492974476
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1L, 30L);
      Range range0 = Range.of((-2523L), 30L);
      range0.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-32768L), 0L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals((Object) null);
      range0.intersection(range1);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(9223372036854773618L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.5490446445795474
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object3);
      Object object5 = new Object();
      Range range1 = Range.of(4294967295L);
      Object object6 = new Object();
      range1.complement(range0);
      range1.intersection(range0);
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.6472377421854025
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(240L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      range_Builder0.shift(240L);
      range0.complement(range0);
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.6273412093399657
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1939L, 1939L);
      range_Builder0.build();
      Object object0 = new Object();
      Long long0 = new Long(1939L);
      Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-32768L), (-32768L));
      long long1 = 9223372036854775807L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = 126L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, 126L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.435226987083789
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 2222L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 406L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.649868541702149
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 1L, 1L);
      range0.spliterator();
      Range.of((-2147483648L));
      Range.of((-2147483648L));
      long long0 = 65535L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, 30466L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.7883190148542316
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = (-319L);
      Range range0 = Range.of((-319L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3141L), (-319L));
      range0.intersection(range1);
      Range range2 = Range.of((-3141L));
      Range.of(4294967169L);
      range2.equals(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2152L, 318L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.652456361487554
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range range1 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder1 = new Range.Builder((-1L), (-1L));
      Range.Builder range_Builder2 = new Range.Builder(895L);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = range_Builder1.shift(4294967295L);
      Range.Builder range_Builder5 = new Range.Builder(range0);
      range_Builder4.build();
      Range.Builder range_Builder6 = new Range.Builder(range_Builder5);
      Range.Builder range_Builder7 = range_Builder1.shift(4294965357L);
      Range range2 = range_Builder7.build();
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.8937126495075773
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 65535L);
      Range range1 = Range.of(65535L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(255L, 255L);
      Range.Builder range_Builder1 = new Range.Builder(65535L);
      Range.of(range_CoordinateSystem0, (-3271L), 1L);
      range0.intersection(range1);
      Range.Builder range_Builder2 = new Range.Builder((-451L), 32775L);
      range_Builder2.shift(65535L);
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775808L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.764750896280259
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-2301L);
      long long1 = (-1826L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2301L), (-1826L));
      Range range1 = Range.of((-1826L));
      Range.of((-2301L), (-1826L));
      long long2 = 282L;
      long long3 = 2147483647L;
      Range.Builder range_Builder0 = new Range.Builder((-1L), 0L);
      Object object0 = new Object();
      range1.equals(object0);
      Range.Builder range_Builder1 = new Range.Builder(282L, 2147483647L);
      Range range2 = range_Builder1.build();
      range2.equals(range_Builder1);
      range0.intersects(range2);
      long long4 = 9223372036854775594L;
      // Undeclared exception!
      try { 
        Range.of((-2301L), 9223372036854775594L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.8055570033395303
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.ofLength(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 3310L, 4294967295L);
      Object object2 = new Object();
      Object object3 = new Object();
      range_Builder0.expandBegin(0L);
      Object object4 = new Object();
      boolean boolean0 = range1.isEmpty();
      assertTrue(boolean0);
      
      range1.intersection(range0);
      assertFalse(range0.isEmpty());
      
      range_Builder0.build();
      List<Range> list0 = range2.complement(range1);
      assertTrue(list0.contains(range2));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.625655199467116
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      long long0 = 9223372032559808512L;
      Long long1 = new Long(9223372032559808512L);
      Range.of(9223372032559808512L);
      Object object2 = new Object();
      long long2 = 9223372036854710274L;
      Range.of(9223372036854710274L);
      Object object3 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854710274L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.942594938656881
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(32767L);
      range0.intersection(range1);
      Range range2 = Range.of((-2523L));
      range1.equals(range0);
      Range range3 = Range.of((-2523L), 32767L);
      Long long0 = new Long(32767L);
      range0.equals(range2);
      range3.intersection(range2);
      Range.Builder range_Builder2 = new Range.Builder(0L, 319L);
      Range.Builder range_Builder3 = range_Builder0.shift(319L);
      range_Builder2.shift(0L);
      range_Builder0.build();
      Range.Builder range_Builder4 = new Range.Builder(range1);
      Range range4 = range_Builder3.build();
      assertFalse(range4.equals((Object)range1));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.8859984712571594
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-2523L), (-2523L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder0.expandEnd(0L);
      Range range0 = Range.of(range_CoordinateSystem1, 2222L, 9223372036854775807L);
      Object object0 = new Object();
      Range range1 = range_Builder0.build();
      range0.endsBefore(range1);
      Range range2 = range0.intersection(range0);
      Range.Builder range_Builder2 = new Range.Builder((-9223372036854775808L), 9223372036854775807L);
      range1.complement(range2);
      range_Builder0.shift(0L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-2523L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2523 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.2675871151461036
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      long long0 = range0.getBegin();
      assertEquals(9223372036854775807L, long0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.7052887053815926
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.ofLength(0L);
      Object object0 = new Object();
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
      
      Range range2 = Range.ofLength(0L);
      Range.Builder range_Builder1 = new Range.Builder(241L, 726L);
      Range range3 = range2.intersection(range1);
      assertSame(range3, range1);
      
      range_Builder0.build();
      range_Builder1.shift(0L);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.431319419064208
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.of((-128L));
      Range.Builder range_Builder1 = new Range.Builder(0L, 0L);
      Object object0 = new Object();
      Range.Builder range_Builder2 = new Range.Builder((-128L), 3013L);
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      range_Builder3.shift(3021L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder4.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.3203691289568624
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.of(255L, 1939L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("|j.tRO^&p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.|j.tRO^&p
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.4113311983685257
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 30L);
      Long.compareUnsigned(3309L, (-32768L));
      Range.Builder range_Builder1 = new Range.Builder((-1), 3309L);
      Range.of((-32768L), 0L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-1159L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.178008108691081
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.799530496550533
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 692L, 1792L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-32768L), 1939L);
      long long0 = (-1L);
      Range.of((-406L), 1792L);
      Object object0 = new Object();
      range1.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, (-1L), 4294967295L);
      range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder((-774L), 1939L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1L), (-3244L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.8245554403571744
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 1L);
      range1.spliterator();
      range0.complement(range1);
      Range range2 = Range.of((-2147483648L));
      Range.of((-2147483648L));
      range2.equals(range0);
      long long0 = 65535L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, 30466L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.9219987400318383
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-9223372036854775808L));
      Range.of((-9223372036854775808L));
      Object object2 = new Object();
      Range.of((-9223372036854775808L));
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2147483648L), 1L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(1L);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder1.build();
      Range.Builder range_Builder4 = range_Builder3.shift(0L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      Range range0 = range_Builder3.build();
      range_Builder2.contractEnd(2662L);
      Range.Builder range_Builder6 = new Range.Builder(range0);
      range_Builder3.build();
      range_Builder6.shift(42L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 42L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.594663693260137
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 726L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      Range range1 = Range.of(4294967295L);
      range0.isSubRangeOf(range1);
      range1.isSubRangeOf(range0);
      range0.startsBefore(range0);
      Long.compareUnsigned(4294967295L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder((-1L), 0L);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.5990499041718294
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(4294967295L);
      range0.isSubRangeOf(range1);
      range1.isSubRangeOf(range0);
      range0.startsBefore(range1);
      range0.split(4294967295L);
      Long.compareUnsigned(1939L, 4294967295L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2822L, (-325L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.5596561716491
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = 0L;
      Range.of(0L, 726L);
      long long1 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.552824406041531
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.of((-128L));
      Range.Builder range_Builder1 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder2 = new Range.Builder(3013L);
      range_Builder1.expandBegin(79L);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder1.shift((-465L));
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.8927753991875216
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(1931L);
      Object object2 = new Object();
      Range range0 = Range.of((-1811L));
      Range range1 = Range.of((-3913L), (-3913L));
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder((-3913L), 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(2663L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 82L, 82L);
      range0.intersects(range1);
      range2.intersection(range0);
      Range.Builder range_Builder2 = new Range.Builder(3013L, 4294967295L);
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 82L, 469L);
      range_Builder3.shift((-1811L));
      Range.Builder range_Builder4 = new Range.Builder(4294967295L);
      Range range3 = range_Builder2.build();
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.1517986823729784
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = 9223372036854775594L;
      Range range0 = Range.ofLength(9223372036854775594L);
      String string0 = "/";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.8284152996174914
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.ofLength(2207L);
      Range range1 = Range.of(2207L);
      Range range2 = Range.ofLength(318L);
      range1.equals(range1);
      Range.of(318L, 2147483647L);
      Range range3 = Range.ofLength(318L);
      Range.Comparators.values();
      Range range4 = range1.intersection(range2);
      assertTrue(range4.isEmpty());
      assertSame(range2, range3);
      assertFalse(range1.isEmpty());
      assertNotSame(range2, range0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.729077666572319
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.ofLength(2207L);
      Range range1 = Range.of(2207L);
      range0.intersection(range1);
      Object object0 = new Object();
      Range range2 = Range.of(2207L, 32767L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(range0);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      range0.equals(object5);
      range2.intersection(range1);
      Object object9 = new Object();
      assertFalse(object9.equals((Object)object1));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=4.04392271815872
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2301L), (-2301L));
      long long0 = (-1173L);
      Range range1 = Range.of((-2301L));
      Object object0 = new Object();
      Range range2 = Range.of((-2301L), (-1173L));
      Range.Builder range_Builder0 = new Range.Builder(282L, 2147483647L);
      range2.equals("");
      range_Builder0.build();
      range1.intersects(range2);
      range0.equals(range_Builder0);
      range2.intersects(range1);
      Range range3 = Range.of((-324L), 4294967169L);
      range2.intersection(range3);
      range_Builder0.shift((-1173L));
      long long1 = (-9223372036854775808L);
      long long2 = (-2147483648L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-2301L), (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.437917523955248
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of((-9223372036854775808L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      Object object5 = new Object();
      Object object6 = new Object();
      boolean boolean0 = range0.equals(object3);
      assertFalse(boolean0);
      
      Object object7 = new Object();
      Object object8 = new Object();
      Range range1 = Range.of((-1L));
      assertFalse(range1.isEmpty());
      
      Range range2 = range0.intersection(range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.8068463273082442
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 28L, 1052L);
      Range range0 = Range.of(28L, 1616L);
      Range range1 = Range.of(1616L);
      range0.complement(range1);
      range0.intersection(range1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(1616L);
      Range.Builder range_Builder3 = new Range.Builder(292L, 2142L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      // Undeclared exception!
      try { 
        Range.of(3223L, 1630L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.7093246368473682
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 1L);
      range1.spliterator();
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 0L, 248L);
      Range.of(0L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.564976610180694
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.isSubRangeOf(range1);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      range1.startsBefore(range0);
      Long.compareUnsigned((-2147483648L), 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder((-2147483648L), 1);
      Range.Builder range_Builder1 = new Range.Builder(1L);
      boolean boolean1 = range0.endsBefore(range1);
      assertFalse(boolean1);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.7164256309573984
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = (-2523L);
      Range.Builder range_Builder0 = new Range.Builder((-2523L), (-2523L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-2523L), 0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of((-2523L));
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-3578L), (-365L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854775082L, (-32768L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775082 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.6904127110085025
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.of(65535L);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Long.compareUnsigned(1509L, 3309L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.of((long) (-1), 1509L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.748703555035874
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 2222L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range range1 = Range.of(2222L);
      Range range2 = range0.intersection(range1);
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=4.118269371540058
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = Range.ofLength(0L);
      Range range3 = range0.intersection(range2);
      Range.Builder range_Builder1 = new Range.Builder(1297L);
      Range range4 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range3.complementFrom(list0);
      range2.complement(range4);
      Range range5 = Range.of((-9223372036854775808L), (-79L));
      assertFalse(range5.equals((Object)range2));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.4270984354320904
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-9223372036854775808L));
      Range.of((-9223372036854775808L));
      Object object2 = new Object();
      Range range0 = Range.of((-9223372036854775808L));
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range0.getEnd();
      Range.Builder range_Builder0 = new Range.Builder(672L);
      range_Builder0.shift(672L);
      range_Builder0.build();
      Object object7 = new Object();
      Object object8 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.658380056993
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(65535L);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Long.compareUnsigned(1509L, 3291L);
      Range.Builder range_Builder1 = new Range.Builder((-1), (-1));
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      range_Builder2.build();
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.7505370230881243
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range.of(range_CoordinateSystem0, 2222L, 9223372036854775807L);
      Range.of((-2523L), 0L);
      Range.of(1L);
      Range.Builder range_Builder2 = new Range.Builder(0L);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(799L, 3345L);
      Range.Builder range_Builder5 = new Range.Builder(2650L);
      range_Builder5.shift(1530L);
      Range.Builder range_Builder6 = null;
      try {
        range_Builder6 = new Range.Builder((-2523L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.5684031720810836
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.of(65535L);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Long.compareUnsigned(1509L, 3309L);
      Range.Builder range_Builder1 = new Range.Builder((-1), (-1));
      Range.of(65535L, 4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.6584955075137082
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.of(318L);
      Range.Builder range_Builder0 = new Range.Builder(1622L, 1622L);
      Range.of((-1184L), 2147483658L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.7887207874270206
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = 240L;
      Range.of(240L);
      Range.of((-2147483647L), 255L);
      long long1 = 319L;
      Long long2 = new Long(319L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(4452L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.8247967464711468
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 1L);
      range1.getLength();
      range1.spliterator();
      long long0 = (-2147483648L);
      range0.complement(range1);
      Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854775807L, 32767L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.5697251495566262
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(726L, 726L);
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      boolean boolean1 = range1.isSubRangeOf(range0);
      boolean boolean2 = range0.startsBefore(range0);
      assertTrue(boolean2 == boolean0);
      
      Long.compareUnsigned(4294967295L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder((-1L), 726L);
      Range.Builder range_Builder1 = new Range.Builder(726L);
      boolean boolean3 = range1.startsBefore(range0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.4216662547035908
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Comparators.values();
      Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.238307843307844
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object2 = new Object();
      Object object3 = new Object();
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-32768L));
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.721487523723482
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long(4294965130L);
      Object object4 = new Object();
      Range range0 = Range.of((-682L));
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Range range1 = Range.ofLength(4294965130L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
      
      Object object8 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals((-681L), long1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.507395480632556
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 30L);
      Range range0 = Range.of((-145L));
      range0.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(30L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.6014089308243094
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(214L, 9223372036854775807L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(9223372036854775807L);
      range_Builder0.shift(214L);
      long long0 = 9223372032559808514L;
      range_Builder1.contractBegin(9223372032559808514L);
      Range.of(214L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(9223372036854775807L);
      range0.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(9223372036854773644L, 2371L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.7066797933775586
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.of(0L);
      range0.isSubRangeOf(range0);
      range0.isSubRangeOf(range0);
      range0.startsBefore(range0);
      Long.compareUnsigned(0L, 2615L);
      Range.Builder range_Builder1 = new Range.Builder(0L, (-1L));
      Range.of((-1L), 0L);
      Range.Builder range_Builder2 = new Range.Builder(2147483371L);
      assertFalse(range_Builder2.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.802827918698058
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.ofLength(2207L);
      Range range1 = Range.of((-9223372036854775808L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals((Object) null);
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals((Object) null);
      Object object5 = new Object();
      Object object6 = new Object();
      Range range2 = Range.of((-1L));
      assertFalse(range2.isEmpty());
      
      Range range3 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.812292861013121
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of((-1623L));
      Range range1 = Range.of((-1623L), 1L);
      range1.iterator();
      range0.intersection(range1);
      range0.endsBefore(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.8320838191380995
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(1L, 1L);
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 1L);
      range1.spliterator();
      range0.intersection(range1);
      range1.equals(range0);
      Range.of(1L);
      Range.Builder range_Builder1 = new Range.Builder(range1);
      range_Builder1.shift((-5525L));
      Range.of(0L, 1205L);
      // Undeclared exception!
      try { 
        Range.of((-195L), (-596L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.8148301437828858
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-2523L), 79L);
      range0.complement(range0);
      range0.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 1L);
      Long.compareUnsigned(1L, 348L);
      Range.Builder range_Builder1 = new Range.Builder((-2523L), 3229L);
      Range.of((long) (-1), 79L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.614923181539494
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(726L, 726L);
      Range range1 = Range.of(4294967295L);
      range0.isSubRangeOf(range1);
      boolean boolean0 = range1.isSubRangeOf(range0);
      range0.startsBefore(range0);
      Long.compareUnsigned(4294967295L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder((-1L), 726L);
      Range.Builder range_Builder1 = new Range.Builder(726L);
      boolean boolean1 = range0.endsBefore(range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.6729767744547743
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(726L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range2 = Range.of(1830L);
      range2.getLength();
      Range.Builder range_Builder1 = new Range.Builder(0L, 1939L);
      Long.compareUnsigned((-1674L), 32767L);
      Range.Builder range_Builder2 = new Range.Builder(726L, 1179L);
      Range.Builder range_Builder3 = new Range.Builder(1830L);
      assertFalse(range_Builder3.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.546638800383656
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.of(757L, 757L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(757L);
      range_Builder0.build();
      Object object7 = new Object();
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object7));
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.418157577023134
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      Range range1 = Range.of(1L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range1.equals(object3);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range0.intersection(range0);
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object6));
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.895811711611
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.ofLength(2207L);
      Range range1 = Range.of(2207L);
      Range range2 = range0.intersection(range1);
      Range range3 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder((-2044L), (-2044L));
      Long.compareUnsigned(356L, 1L);
      Range.Builder range_Builder1 = new Range.Builder((-1425L), 1323L);
      Range.of((long) 1, 9995L);
      Range.Builder range_Builder2 = new Range.Builder(1L);
      range2.asRange();
      Range range4 = range_Builder1.build();
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.854009216682726
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1939L, 1939L);
      range_Builder0.build();
      Object object0 = new Object();
      Long long0 = new Long(1939L);
      Range.of((-32768L));
      Object object1 = new Object();
      Range.of(1939L, 1939L);
      Object object2 = new Object();
      Object object3 = new Object();
      Range.of((-32768L));
      Range.Builder range_Builder1 = new Range.Builder(1939L);
      Range.Builder range_Builder2 = range_Builder0.shift(1939L);
      range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder3.copy();
      range_Builder3.build();
      Range.Builder range_Builder4 = range_Builder0.shift(0L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      range_Builder2.shift(0L);
      range_Builder2.build();
      Range.Builder range_Builder6 = range_Builder2.contractEnd((-2300L));
      Range.Builder range_Builder7 = range_Builder0.shift((-2591L));
      range_Builder6.build();
      Range.Builder range_Builder8 = new Range.Builder(range_Builder4);
      range_Builder6.shift(611L);
      Range.Builder range_Builder9 = new Range.Builder(611L);
      Range.Builder range_Builder10 = range_Builder7.shift(0L);
      assertNotSame(range_Builder10, range_Builder5);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.4805835649660186
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range.of(4294967295L);
      Range.of(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(0L, 0L);
      range_Builder1.build();
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.4936065232892712
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of((-956L), (-491L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.toString();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("vx7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.vx7
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.7579541880124228
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(2147483647L);
      Range range0 = Range.of(2147483647L, 2147483647L);
      Object object2 = new Object();
      Range range1 = Range.of(32767L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range0.equals(object0);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      range1.equals(object9);
      range0.intersection(range1);
      Object object10 = new Object();
      assertFalse(object10.equals((Object)object1));
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.2438848869708714
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long(4294965130L);
      Object object4 = new Object();
      Object object5 = new Object();
      Range range0 = Range.of((-682L));
      Object object6 = new Object();
      Range.of((-682L));
      long long1 = new Long(4294965130L);
      Object object7 = new Object();
      range0.equals(object7);
      Object object8 = new Object();
      Object object9 = new Object();
      assertFalse(object9.equals((Object)object7));
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.5618355979700724
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(9223372032559808512L);
      Range.of(9223372032559808512L);
      Object object2 = new Object();
      Range.of(9223372036854710274L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range.of((-824L));
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range.Builder range_Builder0 = new Range.Builder((-824L), 726L);
      range_Builder0.shift(9223372036854710274L);
      range_Builder0.build();
      Object object9 = new Object();
      Object object10 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("|j.tRO^&p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.|j.tRO^&p
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.9549776987985346
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-2523L), (-2523L));
      Range range1 = Range.of((-151L));
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(0L, 1L);
      Range range3 = Range.of((-9223372036854771272L), 0L);
      Range range4 = Range.of(0L);
      assertFalse(range4.isEmpty());
      
      Range range5 = range3.intersection(range1);
      assertSame(range5, range1);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.876836828975194
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-2504L), 86L);
      Range range1 = Range.of(86L);
      range0.complement(range1);
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 1L);
      Long.compareUnsigned(1L, 356L);
      Range.Builder range_Builder1 = new Range.Builder((-2504L), (-2504L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.build();
      Range.Builder range_Builder3 = range_Builder0.contractEnd((-2465L));
      Range.Builder range_Builder4 = range_Builder3.shift(127L);
      range_Builder2.build();
      Range.Builder range_Builder5 = range_Builder4.shift(127L);
      range_Builder1.build();
      range_Builder5.build();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.9340315674536037
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 79L);
      Range range0 = Range.of((-2523L), 79L);
      Range range1 = Range.of((-128L));
      range0.complement(range1);
      Range range2 = range1.intersection(range0);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
      assertSame(range1, range2);
      
      Range.Builder range_Builder1 = new Range.Builder((-128L), 1L);
      Range.Builder range_Builder2 = new Range.Builder(3013L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-451L), 3013L);
      Range range4 = range3.intersection(range0);
      Range.Builder range_Builder3 = range_Builder2.shift(1942L);
      Range.Builder range_Builder4 = new Range.Builder(9223372036854771286L);
      range_Builder3.build();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range5 = Range.of(range_CoordinateSystem2, 1490L, 1490L);
      range5.complement(range4);
      assertTrue(range5.isEmpty());
      assertNotSame(range4, range3);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.5638237944251454
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2301L), (-835L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-4005L), 2296L);
      Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder((-2627L), (-2627L));
      Long.compareUnsigned(0L, (-1309L));
      Range.Builder range_Builder1 = new Range.Builder((-4005L), 2296L);
      // Undeclared exception!
      try { 
        Range.of(0L, (-1312L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.684902229999265
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.ofLength(4294967295L);
      range0.toString();
      Range range1 = Range.parseRange("[ 0 .. 4294967294 ]/0B");
      range0.intersects(range1);
      range1.iterator();
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. 4294967294 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. 4294967294 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.733555903057639
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1L;
      long long1 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(1L);
      range0.complement(range1);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("5NO !BI~t~3m^HikL|", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 5NO !BI~t~3m^HikL| into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.953844365200036
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-2523L), 79L);
      Range range1 = Range.of((-134L));
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
      
      Range range2 = range1.intersection(range0);
      assertSame(range2, range1);
      
      Range.Builder range_Builder0 = new Range.Builder((-2523L), (-2208L));
      Range.Builder range_Builder1 = new Range.Builder(4294967295L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder0.shift(79L);
      Range range3 = Range.ofLength(65535L);
      Range.Builder range_Builder3 = new Range.Builder(range3);
      range_Builder0.build();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      assertFalse(range3.isEmpty());
      
      Range range4 = range_Builder1.build();
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.5580549371910513
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      long long0 = 0L;
      Range range0 = Range.of(4294967295L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long1 = 3552L;
      long long2 = 65535L;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(65535L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=4.075586740911823
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(range_CoordinateSystem0, 32775L, 32775L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of((-2523L));
      range1.equals(range0);
      Range range4 = Range.of(range_CoordinateSystem0, (-2523L), 0L);
      assertFalse(range4.isEmpty());
      
      Long long0 = new Long(32775L);
      Range range5 = Range.ofLength(32775L);
      List<Range> list0 = range5.complement(range3);
      assertTrue(list0.contains(range5));
      
      range0.intersection(range2);
      assertTrue(range1.isEmpty());
      
      Range.of((-2523L), 0L);
      boolean boolean0 = range0.equals(range5);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range6 = Range.parseRange("QCN88o3[qm4-6", range_CoordinateSystem1);
      assertNotSame(range6, range5);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.9104145194678477
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(1L);
      range0.complement(range1);
      range0.toString(range_CoordinateSystem0);
      range0.iterator();
      Long long0 = new Long(1L);
      Long.compareUnsigned(3309L, 0L);
      range1.isSubRangeOf(range1);
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range3 = range1.intersection(range2);
      range_Builder1.shift((-2523L));
      range3.asRange();
      Range.parseRange("[ 0 .. 0 ]/SB", range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 255L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.828428355215735
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 1L);
      range1.spliterator();
      range0.intersection(range1);
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 0L, 248L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      range_Builder1.shift((-5525L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = Range.of(0L, 1205L);
      range2.getBegin(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        Range.of((-195L), (-596L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.6582590484944872
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(214L, 9223372036854775807L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder2 = range_Builder0.shift(214L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range.of((-2035L));
      range_Builder2.copy();
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(214L, (-5280L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.6531256989000918
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.of(65535L);
      Range.of((-2116L));
      Range.Builder range_Builder0 = new Range.Builder(0L, 127L);
      Range.Builder range_Builder1 = new Range.Builder(65535L);
      range_Builder1.expandBegin(0L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = range_Builder1.shift(2272L);
      Range.Builder range_Builder4 = new Range.Builder(2147483647L);
      Range.Builder range_Builder5 = range_Builder3.shift(0L);
      assertSame(range_Builder3, range_Builder5);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.5564301253656594
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(214L, 9223372036854775807L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder2 = range_Builder0.shift(214L);
      Range.Builder range_Builder3 = new Range.Builder(214L, 9223372036854775807L);
      Long.compareUnsigned(1509L, 1509L);
      Range.Builder range_Builder4 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range.of(214L, 1509L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder2);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.780912776203405
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(1L);
      range0.complement(range1);
      range0.toString(range_CoordinateSystem0);
      Long.getLong("[ 0 .. 0 ]/SB", 0L);
      Long.compareUnsigned(65281L, 3309L);
      range1.isSubRangeOf(range0);
      Range range2 = Range.of(0L, 1L);
      Range range3 = range2.intersection(range0);
      range3.toString(range_CoordinateSystem0);
      Range.Builder range_Builder1 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf(",^}aa'.okTgxd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.,^}aa'.okTgxd
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.6526898731399626
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = (-2597L);
      Range.Builder range_Builder0 = new Range.Builder((-2597L), 1L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(1L);
      Range.Builder range_Builder2 = range_Builder0.shift(9223372036854775807L);
      long long1 = 9223372032559808514L;
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range.of(9223372036854773586L);
      Range.of(9223372032559808514L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder4 = new Range.Builder((-32768L), (-787L));
      Range.Builder range_Builder5 = new Range.Builder(1L);
      Range.Builder range_Builder6 = new Range.Builder();
      range_Builder2.shift((-2597L));
      Range.Builder range_Builder7 = new Range.Builder(range_Builder4);
      // Undeclared exception!
      try { 
        range_Builder3.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854773210 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.791795737165585
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 135L, 2868L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-665L), 135L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder1 = new Range.Builder(127L);
      Range.of(range_CoordinateSystem1, (-338L), (-338L));
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder0.build();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.7936877345791777
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 1L);
      range1.spliterator();
      long long0 = (-2147483648L);
      Range range2 = Range.of((-2147483648L));
      Range.of((-2147483648L));
      range0.intersects(range2);
      Range.Builder range_Builder1 = new Range.Builder((-2933L), 65535L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, 30436L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.429577901756605
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      boolean boolean0 = range0.intersects(range1);
      assertSame(range1, range0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.1183598316855963
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(1939L);
      Object object2 = new Object();
      Range.of(1939L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-658L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.7028759535016977
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(1L);
      range0.complement(range1);
      range0.toString(range_CoordinateSystem0);
      Long.getLong("[ 0 .. 0 ]/SB", 0L);
      range1.toString();
      Long.compareUnsigned(65281L, 3309L);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.of(3309L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.5765211410560624
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(2147483647L);
      Object object2 = new Object();
      Range range1 = Range.of(1757L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      range0.intersection(range1);
      Object object10 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 1757L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.3941391236149676
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 248L);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.shift((-5525L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 2457L);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.652632956556639
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.ofLength(58L);
      Range range0 = Range.of(58L);
      Range.ofLength(318L);
      Range.of(1648L);
      Range.of(318L, 2147483647L);
      Range range1 = Range.ofLength(1374L);
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        Range.of(65535L, 318L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.2474621865397753
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long(4294965130L);
      Object object4 = new Object();
      Range range0 = Range.of((-682L));
      Object object5 = new Object();
      range0.getBegin();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-681L), long1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.7846652469173803
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(726L, 726L);
      Range range1 = Range.of(4294967295L);
      range0.isSubRangeOf(range1);
      boolean boolean0 = range1.isSubRangeOf(range0);
      boolean boolean1 = range0.startsBefore(range0);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      Long.compareUnsigned(4294967295L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 4294967295L);
      Range range2 = range0.intersection(range1);
      long long0 = range2.getBegin();
      //  // Unstable assertion: assertEquals(0L, long0);
      
      Range.Builder range_Builder1 = new Range.Builder((-1768L), 255L);
      range_Builder1.shift(9223372036854775807L);
      Range range3 = Range.ofLength(0L);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.115053675356123
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(1939L);
      Object object2 = new Object();
      Range range0 = Range.of(1939L);
      Object object3 = new Object();
      range0.getEnd();
      Object object4 = new Object();
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.1470823338168756
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(9223372036854710274L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(9223372036854710275L, long0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.5405673531351414
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long(4294965130L);
      Object object4 = new Object();
      Range range0 = Range.of((-682L));
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.411853734928079
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-610L), (-610L));
      List<Range> list0 = range0.split(4294967295L);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.446290125546827
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-2147483647L), (-2147483647L));
      // Undeclared exception!
      try { 
        range0.split((-2147483647L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.824491593589417
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(966L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 65535L);
      Long.compareUnsigned(65535L, 3309L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      range1.endsBefore(range0);
      range0.spliterator();
      Range.Builder range_Builder1 = new Range.Builder(1, 1);
      Range range2 = Range.of((long) 1, 0L);
      boolean boolean1 = range0.intersects(range2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.6939099627212193
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of((-2523L), 79L);
      Range range1 = Range.of((-151L));
      range0.complement(range1);
      Range range2 = range1.intersection(range0);
      long long0 = (-377L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      range_Builder0.expandBegin(0L);
      Range.Builder range_Builder1 = new Range.Builder(1L, 0L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(3250L, 79L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.7265935391490688
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.of(65535L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(65535L);
      Long.compareUnsigned(1509L, 3309L);
      Range.Builder range_Builder1 = new Range.Builder((-1), (-1));
      Range.of((long) (-1), 1509L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.601357907812931
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(214L, 9223372036854775807L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      long long0 = 9223372032559808514L;
      range_Builder1.contractBegin(9223372032559808514L);
      Range.of(214L);
      Range.of(9223372036854775807L);
      long long1 = new Long(9223372036854775807L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(9223372036854773644L, 2371L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.47685899007067
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = 214L;
      Range.Builder range_Builder0 = new Range.Builder(214L, 214L);
      Range.Builder range_Builder1 = new Range.Builder(214L);
      range_Builder0.shift(214L);
      long long1 = 9223372032559808514L;
      Range.of(214L);
      long long2 = 1950L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1950L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.4093355952267155
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long(4294965130L);
      Object object4 = new Object();
      Range range0 = Range.of((-682L));
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.ofLength(959L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.714398404946756
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long(4294965130L);
      Object object4 = new Object();
      Range range0 = Range.of((-682L));
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.of(1257L);
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -682 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.7166663314015156
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-9223372036854775808L));
      Range.of((-9223372036854775808L));
      Object object2 = new Object();
      Range.of((-9223372036854775808L));
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range range0 = Range.of(0L, 4294965356L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.08332035538405
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Range.ofLength(2147483647L);
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object6));
  }
}
