/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 02:19:52 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.7106159949569375
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 30L);
      Range range0 = Range.of((-2523L), 30L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 30L);
      range0.complement(range1);
      Range range2 = Range.of(0L, 0L);
      range0.endsBefore(range1);
      range0.isSubRangeOf(range1);
      range2.endsBefore(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range3 = Range.of(range_CoordinateSystem0, 0L, (-1L));
      Object object2 = new Object();
      range3.equals(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range range4 = Range.of((-2147483649L));
      range4.equals(range0);
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      range3.equals(object10);
      range4.intersection(range3);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.150383583192074
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372032559808513L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.equals(range_CoordinateSystem0);
      Object object0 = new Object();
      Range range1 = Range.of(range_CoordinateSystem1, 1699L, 9223372036854775082L);
      range1.equals(range0);
      Object object1 = new Object();
      range1.equals(object1);
      Object object2 = new Object();
      range0.equals(range_CoordinateSystem1);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range0.equals(object6);
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      range0.equals(object9);
      range1.intersection(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2145970709167035
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(405L, 4294967307L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2119L), 2821L);
      range1.equals(range_CoordinateSystem0);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range0.equals(object5);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9462719597590445
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775082L, 9223372036854775082L);
      Range range1 = Range.of(9223372036854775082L, 9223372036854775082L);
      range0.equals(range1);
      Object object1 = new Object();
      range0.equals(range1);
      Object object2 = new Object();
      range0.equals(range1);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 613L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.42264936545509
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L));
      Range.of(1707L, 1707L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.375081550345209
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = (-32768L);
      Range range0 = Range.of(2557L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.getEnd(range_CoordinateSystem0);
      range0.toString();
      Range.of(range_CoordinateSystem0, 1590L, 1590L);
      Object object2 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(4294967304L, 9223372036854775807L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.967867468534036
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.of((-32768L));
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        Range.of((-1L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3607293905936317
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(4294967295L);
      Range range1 = range0.intersection(range0);
      Range.of(1327L, 9223372036854772866L);
      range1.equals(range0);
      Range.of((-1641L), 726L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-9223372036854775808L));
      range0.equals(long0);
      range0.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.995125331854541
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4965L, 9223372032559808513L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.equals(range_CoordinateSystem0);
      Object object0 = new Object();
      Range range1 = Range.of(range_CoordinateSystem1, 1699L, 9223372036854775082L);
      range1.equals(range0);
      Object object1 = new Object();
      range1.equals(object1);
      Object object2 = new Object();
      range0.equals(range_CoordinateSystem1);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range0.equals(object6);
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      range0.equals(object9);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.123841515493994
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4965L, 9223372032559808513L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range0.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem2);
      Range range1 = range0.intersection(range0);
      range1.equals(range0);
      Range range2 = range1.intersection(range0);
      range2.getLength();
      String string0 = "org.jcvi.jillion.core.Range$ByteRange";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range$ByteRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range$ByteRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.863483394290849
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(1285L, 1285L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      range0.getEnd(range_CoordinateSystem0);
      range0.toString();
      Range range1 = Range.parseRange("[ 1285 .. 1285 ]/0B");
      range0.intersects(range1);
      String string0 = range0.toString();
      assertEquals("[ 1285 .. 1285 ]/0B", string0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      linkedList0.add(range0);
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range2 = Range.of(1286L, 1285L);
      Long long0 = new Long(1285L);
      List<Range> list0 = range0.split(1L);
      range2.isSubRangeOf(range0);
      Range range3 = Range.of(1285L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.isEmpty());
      
      boolean boolean0 = range3.endsBefore(range2);
      Range range4 = Range.of((-131L));
      range4.intersects(range0);
      linkedList0.add(range4);
      Object object0 = new Object();
      Range range5 = Range.of(1286L, 1285L);
      Object object1 = new Object();
      boolean boolean1 = range5.equals(object1);
      assertFalse(boolean1 == boolean0);
      
      List<Range> list2 = range0.complementFrom(linkedList0);
      assertTrue(list2.contains(range4));
      
      range3.intersection(range0);
      assertFalse(range3.isEmpty());
      assertSame(range3, range1);
      
      Range range6 = Range.ofLength(1L);
      assertFalse(range6.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3213034472953655
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4965L, 9223372032559808513L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range0.getBegin(range_CoordinateSystem1);
      range0.equals(range_CoordinateSystem1);
      Object object0 = new Object();
      Long long0 = new Long(9223372032559808513L);
      range0.equals(long0);
      Range range1 = Range.ofLength(32767L);
      range0.equals((Object) null);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("(!cS:B?)]zrZ}`{7<oL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.(!cS:B?)]zrZ}`{7<oL
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.031514648030985
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = 726L;
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      long long1 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.817119658154861
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.ofLength(2943L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-750L), 9223372032559808520L);
      Range range2 = Range.of((-750L));
      range0.equals("0;SIR");
      Object object1 = new Object();
      range1.equals(object1);
      Object object2 = new Object();
      range0.equals(object2);
      Range range3 = range1.intersection(range2);
      Range range4 = Range.of(9223372032559808520L);
      Range range5 = Range.of(753L, 753L);
      range1.complement(range4);
      range5.split(753L);
      Range range6 = range3.asRange();
      range5.intersects(range1);
      range4.complement(range5);
      Range range7 = Range.of(2943L);
      range3.intersection(range7);
      range1.complement(range6);
      Range.of(9223372032559808520L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-750L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.305321109936933
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854775807L);
      Object object1 = new Object();
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.complement(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Object object2 = new Object();
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 2040L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.599089795670504
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854775807L);
      range0.equals("0");
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      Object object4 = new Object();
      Object object5 = new Object();
      range0.equals(object5);
      range0.equals(object0);
      range0.split(4294967295L);
      Range range1 = Range.of(1L, 4294967295L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(9223372036854775807L);
      range0.endsBefore(range2);
      Range range3 = Range.of((-131L));
      Object object6 = new Object();
      Range.of(1788L, 9223372036854775807L);
      Object object7 = new Object();
      Object object8 = new Object();
      range1.equals(object8);
      Range.of(4294967295L);
      // Undeclared exception!
      try { 
        range0.complement(range3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -131 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.397996309111886
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854775807L);
      Object object1 = new Object();
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.complement(range1);
      Object object2 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range0.equals("5F:K(Z]y}Nl");
      Object object6 = new Object();
      Range range2 = Range.of((-2433L));
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        range2.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.5804488737749294
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = (-2523L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 30L);
      Range range0 = Range.of((-2523L), 30L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      Range range1 = Range.of(1L);
      linkedList0.add(range1);
      range1.complementFrom(linkedList0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.of(127L, 127L);
      Long long1 = new Long(255L);
      long long2 = 1L;
      range0.isSubRangeOf(range1);
      long long3 = 9223372036854774964L;
      Range.of(9223372036854774964L);
      String string0 = "PzjOw uAh@?";
      // Undeclared exception!
      try { 
        Range.parseRange("PzjOw uAh@?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse PzjOw uAh@? into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.461364440206409
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(561L, 561L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object1);
      Object object3 = new Object();
      Range range1 = Range.of(0L, 9223372036854773574L);
      range1.equals((Object) null);
      Range.ofLength(9223372036854773574L);
      Range range2 = Range.of(561L);
      Range range3 = range0.intersection(range2);
      Range range4 = Range.of(9223372036854773574L);
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3934857664015055
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L);
      Range range0 = Range.of(726L);
      Range range1 = Range.ofLength(726L);
      Range range2 = range1.intersection(range0);
      Range.ofLength(1327L);
      Long long0 = new Long(9223372036854772866L);
      range2.equals(long0);
      range0.intersection(range2);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.shift(9223372036854772866L);
      range_Builder2.build();
      // Undeclared exception!
      try { 
        range2.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.435221354704378
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L);
      Range range0 = Range.of(726L);
      Range range1 = Range.ofLength(726L);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 9223372036854775082L, 9223372036854775082L);
      range1.equals(range2);
      Object object0 = new Object();
      range2.equals((Object) null);
      Object object1 = new Object();
      range0.equals(range1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range2.equals(object2);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range1.intersection(range2);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.545105290840683
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(726L);
      Range range1 = Range.ofLength(726L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(1327L, 9223372036854772866L);
      Long long0 = new Long(32817L);
      range2.equals(long0);
      range0.intersection(range2);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.shift(9223372036854772866L);
      range_Builder1.copy();
      Range.Builder range_Builder3 = new Range.Builder();
      Range range4 = range_Builder2.build();
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.5464688789255527
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854775807L);
      Object object1 = new Object();
      Range range1 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range1.equals(range0);
      Range range2 = Range.of((-1641L), (-1641L));
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range2.equals(object5);
      Range range3 = Range.of(9223372036854775082L);
      // Undeclared exception!
      try { 
        range2.intersection(range3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1641 would make range [9223372036854775082 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.4168518981173843
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      long long0 = (-18L);
      long long1 = 0L;
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.of((-894L), 0L);
      Long long2 = new Long(0L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.600070956783084
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.of(3L, 127L);
      Range range2 = Range.of(800L, 800L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals((Object) null);
      Object object4 = new Object();
      range2.equals(range0);
      Object object5 = new Object();
      range1.equals(object1);
      Range range3 = Range.of(127L, 9223372036854771564L);
      range3.intersection(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf(",9eSci_AyzjSf+rD*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.,9eSci_AyzjSf+rD*
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.587665053027296
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(0L, 1L);
      List<Range> list0 = range0.split(1L);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range1.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      range0.endsBefore(range1);
      range1.equals(range2);
      Range range3 = range1.intersection(range2);
      assertSame(range3, range1);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.of((-2523L));
      List<Range> list1 = range2.complement(range4);
      assertFalse(range2.isEmpty());
      assertTrue(list1.contains(range2));
      assertFalse(list1.equals((Object)list0));
      
      range0.asRange();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.345784431420443
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      range0.equals(range1);
      Spliterator<Long> spliterator0 = range1.spliterator();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(spliterator0);
      assertFalse(boolean0);
      
      Range range2 = Range.of((-9223372036854775808L));
      Object object1 = new Object();
      range0.equals(range0);
      assertFalse(range0.isEmpty());
      
      Range range3 = Range.of((-9223372036854775808L));
      assertSame(range3, range2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.002697432380181
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.of((-2147483648L));
      long long0 = 613L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2382L, 613L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.014635675651483
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range range0 = Range.of(1L, 4294967295L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object6 = new Object();
      range0.equals((Object) null);
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4583L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4971318274580003
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(25L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.split(1L);
      range1.isSubRangeOf(range1);
      range0.endsBefore(range1);
      range1.equals(range0);
      Range range2 = range1.intersection(range1);
      Range range3 = Range.of(0L);
      range1.complement(range3);
      range1.intersection(range2);
      Range.of(683L);
      range1.complement(range2);
      range3.equals(range2);
      Range range4 = range1.asRange();
      range4.complement(range3);
      // Undeclared exception!
      try { 
        Range.of(25L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.574380141289671
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range0.getLength();
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long0 = (-1L);
      Range.of((-1L), (-1L));
      long long1 = 550L;
      Long long2 = new Long(550L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long3 = (-9223372036854775808L);
      Range range4 = Range.of(range_CoordinateSystem0, 1736L, (-9223372036854775808L));
      range4.split(long1);
      range0.isSubRangeOf(range2);
      String string0 = "bitset can not be null";
      Range range5 = Range.parseRange(string0);
      range1.endsBefore(range5);
      range1.equals(range4);
      Range range6 = Range.of(long0);
      range0.intersection(range6);
      long long4 = (-51L);
      Range.of(long4);
      Range range7 = Range.of(long0, long3);
      range0.complement(range7);
      range3.asRange();
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2832270261822467
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range range0 = Range.ofLength(0L);
      Range.of(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(0L, 0L);
      Range range2 = Range.ofLength(0L);
      Object object0 = new Object();
      range0.equals(range2);
      range2.intersection(range1);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3384193870348065
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.of(726L, 726L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals(object3);
      Object object4 = new Object();
      Range range2 = Range.of(726L);
      range2.equals((Object) null);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range$ByteRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range$ByteRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.6530808217619826
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(2147483644L);
      Range range1 = Range.ofLength(2147483644L);
      range0.getLength();
      Range range2 = range0.intersection(range1);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Long long0 = new Long((-1058L));
      range2.equals(long0);
      Object object2 = new Object();
      Range range3 = Range.of(2040L, 2040L);
      Range range4 = Range.of((-61L), 2400L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range3.equals(object6);
      range4.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.5895674638159853
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range0.getLength();
      Range range2 = range0.intersection(range1);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Long long0 = new Long((-1058L));
      range2.equals(long0);
      Object object2 = new Object();
      Range.of(2040L, 2040L);
      Range.of((-32768L), (-1080L));
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1058L), 801L);
      Object object6 = new Object();
      range2.equals(object6);
      Object object7 = new Object();
      range0.equals((Object) null);
      range0.intersection(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("cluster distance can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.cluster distance can not be negative
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.7441225887732443
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.of(4294967287L);
      range0.complement(range1);
      Range range2 = Range.ofLength(0L);
      Range range3 = range2.intersection(range1);
      Spliterator<Long> spliterator0 = range1.spliterator();
      Range.ofLength(726L);
      Object object0 = new Object();
      range1.equals(range3);
      range3.intersection(range2);
      Range range4 = Range.of((-1831L), 4208L);
      range4.equals(range0);
      range3.equals(spliterator0);
      Range.of((-1831L));
      Range range5 = Range.ofLength(4294967287L);
      range5.intersection(range1);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(4208L, (-2863L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.405103260076433
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range.of(1L, 4294967306L);
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(127L, 4294967306L);
      Range.Builder range_Builder3 = range_Builder2.shift(127L);
      range_Builder3.copy();
      Range.Builder range_Builder4 = new Range.Builder();
      Range range1 = range_Builder3.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.5884870376078313
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.ofLength(2943L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-750L), 9223372032559808520L);
      Range range2 = Range.of((-750L));
      range0.equals("0;SIR");
      Object object1 = new Object();
      range1.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals((Object) null);
      Object object4 = new Object();
      Range range3 = Range.of((-1081L));
      range2.equals(object1);
      range3.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.410886892352197
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(1097L, 65535L);
      long long0 = 613L;
      Range range1 = Range.of((-2147483648L), (-2361L));
      Object object0 = new Object();
      range1.equals((Object) null);
      range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder((-2361L), 613L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-2361L), 9223372036854774666L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.5848998479150143
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of(1707L, 1707L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      Object object3 = new Object();
      Long long0 = new Long(2147483647L);
      range1.equals(long0);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range0.equals(object1);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.361869845329973
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2504L), 0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(0L, 0L);
      Long long0 = new Long(1L);
      range0.split(1L);
      range1.isSubRangeOf(range1);
      range0.endsBefore(range1);
      range1.equals(range2);
      range1.intersection(range2);
      Range.of(0L);
      // Undeclared exception!
      try { 
        Range.of(2533L, (-2705L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9110093374869215
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.of((-862L), (-862L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854775081L, (-862L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -862 would make range [9223372036854775081 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.5641106977266106
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(726L);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, (-18L), 0L);
      boolean boolean0 = range2.equals((Object) null);
      assertFalse(boolean0);
      
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, 0L, 2147484482L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range4.toString(range_CoordinateSystem2);
      assertEquals("[ 0 .. 2147484482 ]/SB", string0);
      
      Range range5 = range3.intersection(range1);
      assertTrue(range5.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder((-1200L), 4294967295L);
      range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder0.shift(4294967295L);
      range_Builder2.copy();
      range_Builder2.build();
      range0.isEmpty();
      Range range6 = range0.intersection(range1);
      assertSame(range6, range5);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.3499901477640797
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.of(0L);
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder((-129L), 0L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.5834367285554163
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(9223372036854774523L);
      Range range1 = Range.of((-1L), 726L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals(range0);
      Object object3 = new Object();
      Range range2 = Range.of(3792L);
      range1.equals((Object) null);
      range2.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.5862440606558397
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range0.getLength();
      Range range2 = range0.intersection(range1);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Long long0 = new Long((-1058L));
      range2.equals(long0);
      Object object2 = new Object();
      Range range3 = Range.of(2040L, 2040L);
      Range.of((-32768L), (-1080L));
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      range3.equals(object8);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.5364087067889294
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854775807L);
      range0.equals("0");
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      Object object4 = new Object();
      Object object5 = new Object();
      range0.equals(object5);
      range0.equals(object0);
      range0.split(4294967295L);
      Range range1 = Range.of(1L, 4294967295L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.of(9223372036854775807L);
      range0.endsBefore(range2);
      Range.of((-131L));
      Object object6 = new Object();
      Range.of(1788L, 9223372036854775807L);
      Object object7 = new Object();
      Object object8 = new Object();
      range1.equals(object8);
      Range range3 = range2.intersection(range0);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.of((-1824L));
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.513432975460271
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 255L);
      Range range0 = Range.of(127L, 9223372036854774849L);
      Range range1 = Range.ofLength(127L);
      range0.complement(range1);
      Range.ofLength(4294967295L);
      range1.spliterator();
      range0.intersection(range1);
      range0.spliterator();
      Range.Builder range_Builder1 = new Range.Builder(1L);
      Range.Builder range_Builder2 = range_Builder1.shift(255L);
      range_Builder2.build();
      Range.ofLength(432L);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-362L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.4231706501740096
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854775800L);
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(5685L);
      Range range1 = Range.ofLength(9223372036854775800L);
      Long long0 = new Long(116L);
      range1.equals(long0);
      range1.intersection(range0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder1.copy();
      range_Builder1.expandEnd(5685L);
      range_Builder3.build();
      range_Builder2.copy();
      Range.Builder range_Builder4 = new Range.Builder();
      Range range2 = range_Builder1.build();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.148495275060338
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.of(0L);
      range1.equals(range0);
      long long0 = 9223372034707292161L;
      Range.of(9223372036854775807L, 9223372036854775807L);
      Object object0 = new Object();
      Long long1 = new Long(726L);
      Long long2 = Long.getLong("", long1);
      range0.equals(long2);
      long long3 = 487L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long4 = 255L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.333292374117687
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.ofLength(2943L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Object object1 = new Object();
      range0.equals(range_CoordinateSystem0);
      Object object2 = new Object();
      range0.equals(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-750L), 9223372032559808520L);
      range0.equals(range_CoordinateSystem0);
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Range range2 = Range.of(255L);
      range0.equals(range2);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.299215373036039
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(516L, 9223372036854775758L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(516L, 516L);
      Range range2 = range1.intersection(range0);
      Object object0 = new Object();
      range1.equals(range2);
      Object object1 = new Object();
      range1.equals("CoordinateSystem can not be null");
      Range.Builder range_Builder0 = new Range.Builder(5684L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.135252933942105
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = 726L;
      Range.Builder range_Builder0 = new Range.Builder(726L);
      Range range0 = Range.of(726L);
      Range range1 = Range.ofLength(726L);
      Range range2 = range1.intersection(range0);
      Range.ofLength(1327L);
      // Undeclared exception!
      try { 
        range2.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.334307266830105
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(1919L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.2594332375176136
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854775082L);
      Range range1 = Range.of(9223372036854775082L, 9223372036854775082L);
      range0.equals(range1);
      Object object1 = new Object();
      range0.equals(range1);
      Object object2 = new Object();
      range0.equals(range1);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object6 = new Object();
      Object object7 = new Object();
      range0.intersects(range1);
      Object object8 = new Object();
      Object object9 = new Object();
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.6278471228142495
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range range0 = Range.of(9223372036854774849L);
      Range range1 = Range.ofLength(9223372036854774849L);
      range1.complement(range0);
      Range range2 = Range.of(9223372036854774849L, 9223372036854774849L);
      range2.spliterator();
      range0.intersection(range2);
      range2.spliterator();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.build();
      Range.ofLength(4507L);
      // Undeclared exception!
      try { 
        Range.of(0L, (-2523L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.16284620445779
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-1058L));
      Object object2 = new Object();
      Range range0 = Range.of(2040L, 2040L);
      Range.of((-32768L), (-1080L));
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      range0.equals(object8);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.3222419860173313
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range range1 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Object object6 = new Object();
      Object object7 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range range2 = Range.of(4294967295L);
      Range range3 = range2.intersection(range0);
      assertSame(range3, range0);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.1849167395122406
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of((-862L), (-862L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 2147483646L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-1268L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.382657734717449
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(4294967295L);
      Range range1 = range0.intersection(range0);
      Range range2 = Range.of(4294967295L, 9223372036854772866L);
      Long long0 = new Long(4294967295L);
      Range range3 = range0.intersection(range1);
      assertFalse(range3.isEmpty());
      assertFalse(range3.equals((Object)range2));
      assertSame(range1, range0);
      
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.shift(9223372036854772866L);
      range_Builder1.copy();
      Range.Builder range_Builder3 = new Range.Builder();
      Range range4 = range_Builder2.build();
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.1919646750286312
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.ofLength(32767L);
      Range.of((-9223372036854775808L));
      Range range0 = Range.of(9223372036854775553L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.2741056198849163
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.CoordinateSystem.values();
      Range range0 = Range.of(255L, 9223372036854774666L);
      Object object0 = new Object();
      Range range1 = Range.of(279L);
      range0.intersection(range1);
      Range.Builder range_Builder1 = new Range.Builder(0L, 279L);
      range_Builder1.build();
      // Undeclared exception!
      try { 
        Range.of(9223372036854774666L, 861L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.6203916392252133
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.of(0L);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      range1.spliterator();
      Range range3 = Range.of(0L, 4294967295L);
      range1.complementFrom(list0);
      Range range4 = range3.intersection(range1);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      //  // Unstable assertion: assertNotSame(range4, range1);
      //  // Unstable assertion: assertFalse(range4.equals((Object)range1));
      
      Range range5 = range3.asRange();
      Range range6 = Range.ofLength(2147483647L);
      //  // Unstable assertion: assertNotSame(range6, range5);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.45775205763829
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.of(4294967287L);
      range0.complement(range1);
      Range range2 = Range.ofLength(0L);
      Range range3 = range2.intersection(range1);
      range1.spliterator();
      Range.ofLength(726L);
      Object object0 = new Object();
      range1.equals(range3);
      range3.intersection(range2);
      Range.Builder range_Builder1 = new Range.Builder(0L, 1283L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin((-2531L));
      range_Builder2.shift((-2531L));
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.4322855024513332
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-32768L), 2037L);
      Range range1 = Range.ofLength(4294967295L);
      range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      Range.Builder range_Builder1 = new Range.Builder();
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.5668784010789536
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range range0 = Range.ofLength(0L);
      Range.of(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(0L, 0L);
      Long long0 = new Long(1L);
      Long long1 = new Long((-2523L));
      Object object0 = new Object();
      range0.equals((Object) null);
      Range range2 = Range.ofLength(4294967294L);
      range0.equals(range2);
      range1.intersection(range2);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractBegin(0L);
      Range.Builder range_Builder2 = range_Builder1.shift(0L);
      Range range3 = range_Builder2.build();
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.285827539338745
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 9223372036854775082L);
      Object object1 = new Object();
      range0.equals("");
      Object object2 = new Object();
      Range range1 = Range.ofLength(1L);
      range0.equals(range1);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range range2 = Range.of(0L);
      range2.equals(range1);
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      range2.equals(object10);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.5318966040529944
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      range1.complement(range0);
      Range range2 = Range.ofLength(65535L);
      range2.spliterator();
      Range range3 = range1.intersection(range0);
      range3.spliterator();
      range_Builder0.shift(1L);
      range_Builder0.build();
      Range.ofLength(1L);
      // Undeclared exception!
      try { 
        Range.of((-1224L), (-3607L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.4790475785177177
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(0L, 309L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerLast(range0);
      range0.complementFrom(linkedList0);
      Range range1 = Range.of(0L, 27L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object6 = new Object();
      Long long0 = new Long((-1L));
      Object object7 = new Object();
      range1.equals(object7);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("cluster distance can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.cluster distance can not be negative
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.491109706103018
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of((-3969L), 726L);
      range0.getBegin();
      Range range1 = Range.of((-3969L));
      Range range2 = Range.ofLength(0L);
      Range range3 = range0.intersection(range2);
      assertTrue(range3.isEmpty());
      
      range1.spliterator();
      assertNotSame(range1, range0);
      
      Range range4 = Range.of((-894L), (-894L));
      long long0 = range4.getBegin();
      assertEquals((-894L), long0);
      
      Range.Builder range_Builder1 = new Range.Builder(1496L, 1496L);
      Range range5 = range_Builder0.build();
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.5890456130565087
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.of(4294967295L);
      range0.complement(range1);
      range0.intersection(range1);
      range1.spliterator();
      Range.Builder range_Builder1 = new Range.Builder((-1L), 2147483647L);
      Range range2 = range_Builder1.build();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.092662461239163
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.of(4294967295L);
      Range.of(1614L, 4294967295L);
      Long long0 = new Long(1614L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(0L, 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.395679163579726
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range range0 = Range.of(1L, 4294967295L);
      Range range1 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Object object6 = new Object();
      Object object7 = new Object();
      range0.equals(object0);
      range1.equals(object3);
      Range range2 = Range.of(4294967295L);
      Range range3 = range2.intersection(range0);
      assertFalse(range3.isEmpty());
      assertSame(range3, range2);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.477627509850915
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.ofLength(2943L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-750L), 9223372032559808520L);
      Range range2 = Range.of((-750L));
      String string0 = "0;SIR";
      range0.equals("0;SIR");
      Object object1 = new Object();
      range1.equals(object1);
      Object object2 = new Object();
      range2.equals(object2);
      // Undeclared exception!
      try { 
        Range.of(2943L, 2040L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.643303300203953
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 30L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 30L);
      Range range0 = Range.of((-2523L), 30L);
      Range range1 = Range.of((-128L));
      range0.complement(range1);
      Range range2 = Range.of(0L, 0L);
      range2.isSubRangeOf(range0);
      range1.intersection(range2);
      range2.spliterator();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 30L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.4801291639714984
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = 726L;
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.of(4294967295L);
      range1.split(1519L);
      range1.isSubRangeOf(range0);
      range1.endsBefore(range0);
      range1.equals(range_Builder0);
      range0.intersection(range1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandBegin(726L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(2216L, 1981L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.6966294946383247
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 30L);
      Range range0 = Range.of((-2523L), 30L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 30L);
      range0.complement(range1);
      Range range2 = Range.of(0L, 0L);
      range0.endsBefore(range1);
      range0.isSubRangeOf(range1);
      range2.endsBefore(range0);
      Object object0 = new Object();
      range1.equals(object0);
      Range range3 = Range.of((-2147483649L));
      range0.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 30L, (-815L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.3504079784032808
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = 0L;
      Range.of(0L);
      Range range0 = Range.of((-750L), 2943L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 9223372032559808513L;
      Range.of(range_CoordinateSystem0, 2943L, 9223372032559808513L);
      Range.of((-4929L));
      range0.equals("0;SIR");
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854774398L, (-32768L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854774398 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.376820827169591
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(0L, 0L);
      Long long0 = new Long(1L);
      List<Range> list0 = new LinkedList<Range>();
      range1.isSubRangeOf(range1);
      range0.endsBefore(range1);
      range0.intersection(range2);
      range0.spliterator();
      // Undeclared exception!
      try { 
        Range.of(1L, (-1478L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.8997571011430585
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.ofLength(9223372036854774849L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2745L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.6875814343024143
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1642L), (-1642L));
      range1.isSubRangeOf(range0);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range1.startsBefore(range0);
      range0.intersection(range1);
      long long1 = 1930L;
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(727L, (-1642L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.0196946438142005
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Object object2 = new Object();
      Range.of((-128L), (-128L));
      Range range0 = Range.of((-128L), 32767L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.5365297098292654
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(959L, 4463L);
      Range range1 = Range.ofLength(959L);
      long long0 = range0.getLength();
      assertEquals(3505L, long0);
      
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of((-1763L), 3505L);
      range2.complement(range0);
      assertTrue(range2.isEmpty());
      
      Range.CoordinateSystem.values();
      Range range4 = Range.ofLength(4463L);
      assertNotSame(range4, range1);
      
      List<Range> list0 = range3.split(959L);
      assertEquals(6, list0.size());
      assertFalse(list0.contains(range3));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.3288772833852036
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(0L);
      long long0 = (-750L);
      Range.of((-750L), 2943L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.4249008955834404
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range range0 = Range.of(1L, 4294967295L);
      Range range1 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Object object6 = new Object();
      Object object7 = new Object();
      range0.equals(object0);
      range1.equals(object3);
      Range range2 = range1.intersection(range0);
      range2.getEnd();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("gjL`G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.gjL`G
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.505811038624709
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = (-1L);
      Range.of((-1L));
      Range.of(3L, 127L);
      Range range0 = Range.of(800L, 800L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(141L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder(800L, 800L);
      Range.Builder range_Builder5 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(800L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.195085608204764
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(613L, 3307L);
      Range.Builder range_Builder1 = new Range.Builder((-9L), 2523L);
      range_Builder0.build();
      range_Builder1.build();
      Range range0 = Range.of(2523L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.0129943437011137
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-2523L), 9223372032559808519L);
      Range.Builder range_Builder0 = new Range.Builder(0L, 9223372036854772390L);
      Range.Builder range_Builder1 = new Range.Builder(9223372032559808519L, 9223372032559808519L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.187409269795786
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range0.intersection(range1);
      range2.getLength();
      Object object0 = new Object();
      range1.intersection(range0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1285L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.4527944286391965
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(959L, 4463L);
      Range range1 = Range.ofLength(959L);
      long long0 = new Long(959L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(959L, 4463L);
      List<Range> list0 = range3.complement(range0);
      assertTrue(list0.isEmpty());
      
      Range.CoordinateSystem.values();
      Range range4 = Range.ofLength(4294967295L);
      assertFalse(range4.isEmpty());
      
      range2.split(4463L);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.352115437699039
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.of(0L);
      Range.of(0L, 0L);
      Range range0 = Range.of((-834L), (-834L));
      Range range1 = Range.of(0L);
      range1.startsBefore(range0);
      String string0 = ",Cw({TaeC~>$";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(",Cw({TaeC~>$", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ,Cw({TaeC~>$ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.3808309066519335
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range0.complement(range1);
      Range range2 = Range.of(2147483647L, 2147483647L);
      range1.intersection(range2);
      range0.spliterator();
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 1284L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.262690487588802
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(4294967295L);
      range0.spliterator();
      Range range1 = Range.of(0L, 4294967295L);
      assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder1.build();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.6849838386897984
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1642L), (-1642L));
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483648L), 881L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range2.getEnd(range_CoordinateSystem2);
      range1.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem3);
      assertFalse(range0.isEmpty());
      
      Range range3 = range2.intersection(range1);
      assertFalse(range3.isEmpty());
      
      Range.ofLength(880L);
      Range range4 = Range.of((-1642L));
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.997756703271982
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range range0 = Range.of(1L, 4294967295L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      range0.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.540526871385096
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(147L);
      Range range1 = Range.of(1125L, 1858L);
      range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals((Object) null);
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        Range.of((-1L), (-1424L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.4955581807368223
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(726L);
      Range range2 = range1.intersection(range0);
      long long0 = 9223372036854772866L;
      Range.of(1327L, 9223372036854772866L);
      Long long1 = new Long(32817L);
      range2.equals(long1);
      range0.intersection(range2);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.5689199941809027
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(726L);
      Range range2 = range1.intersection(range0);
      Range.of(1327L, 4294967295L);
      Long long0 = new Long(32817L);
      range2.equals(long0);
      Range range3 = range0.intersection(range2);
      assertTrue(range3.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(4294967295L, 4294967295L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range range4 = range_Builder0.build();
      range_Builder3.copy();
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder(range4);
      Range range5 = range_Builder5.build();
      assertSame(range5, range4);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.3831712716788336
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(4294967267L);
      Range range1 = Range.ofLength(726L);
      Range range2 = range1.intersection(range0);
      Range.of(1327L, 9223372036854772866L);
      Long long0 = new Long(32817L);
      range0.intersection(range2);
      Range.Builder range_Builder0 = new Range.Builder();
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.2862320617962295
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.of(0L);
      Range range0 = Range.of(0L, 0L);
      Range.of((-834L), (-834L));
      Range.of(1L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1L, 610L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-834L), (-2153L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.5503759629687393
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      range0.intersection(range0);
      range0.spliterator();
      Range range1 = Range.of(0L, 4294967295L);
      assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder(0L, 2147483647L);
      range_Builder1.build();
      Range range2 = range_Builder1.build();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.0003565662588274
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967273L, 4294967273L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(4294967273L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.6131675920191535
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L));
      range0.isSubRangeOf(range0);
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.startsBefore(range0);
      range0.intersection(range0);
      long long1 = 1930L;
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(727L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.8337387456310323
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Object object0 = new Object();
      Range.of(range_CoordinateSystem0, 1699L, 9223372036854775082L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object0));
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.8337387456310323
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range range0 = range_Builder0.build();
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.4953990830103585
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.of((-2523L), 1L);
      Range range1 = Range.of(1L);
      range0.complement(range1);
      Range range2 = Range.of(0L, 0L);
      range1.intersection(range2);
      range2.spliterator();
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 1L, (-2523L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.306297458020691
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 234L, 234L);
      range0.equals(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.equals(consumer0);
      Object object1 = new Object();
      range0.equals(object0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      range0.equals(object5);
      Range range1 = Range.of(405L, 32767L);
      range0.intersection(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.696802615120231
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      List<Range> list0 = range0.complement(range0);
      Range range1 = range0.intersection(range0);
      range0.spliterator();
      Range range2 = Range.of(0L, 9223372036854774666L);
      Range.Builder range_Builder1 = new Range.Builder((-1L), 2147483647L);
      range_Builder1.expandBegin(726L);
      range_Builder1.build();
      List<Range> list1 = range2.complementFrom(list0);
      assertFalse(range2.isEmpty());
      assertTrue(list1.isEmpty());
      
      Range range3 = range0.asRange();
      assertSame(range3, range1);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2905L);
      range_Builder0.shift(2905L);
      range_Builder0.shift(9223372036854775807L);
      range_Builder0.expandBegin(4294967295L);
      range_Builder0.contractEnd(3453L);
      range_Builder0.expandBegin(2905L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854773453 would make range [9223372032559808512 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.2950652257969133
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(4458L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.getLength();
      Object object2 = new Object();
      Range.Builder range_Builder0 = new Range.Builder((-5038L), (-5038L));
      Range.Builder range_Builder1 = range_Builder0.shift((-128L));
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(4458L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      assertSame(range_CoordinateSystem1, range_CoordinateSystem0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.0026974323801805
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range0 = Range.of((-1641L), (-1641L));
      Object object5 = new Object();
      range0.equals(object5);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("4*o6f3@/iz V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.4*o6f3@/iz V
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.202850919381675
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.intersection(range0);
      Range.of(range_CoordinateSystem0, 1L, 65534L);
      // Undeclared exception!
      try { 
        Range.of((-1L), (-934L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.2588289867522566
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range range0 = Range.of(1L, 4294967295L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object6 = new Object();
      Object object7 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(4294967295L);
      Range range2 = range1.intersection(range0);
      range2.iterator();
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range2, range0);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.519446474502344
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(5L, 726L);
      Range range1 = Range.of(4294967295L);
      range0.complement(range1);
      Range range2 = Range.ofLength(0L);
      Range range3 = range0.intersection(range2);
      range1.spliterator();
      Range range4 = Range.of(0L, 9223372036854774666L);
      Range range5 = range0.asRange();
      range1.intersects(range4);
      range5.complement(range1);
      range4.intersection(range3);
      List<Range> list0 = new LinkedList<Range>();
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.6045189085540823
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(0L, 309L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerLast(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 127L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.intersects(range1);
      Object object3 = new Object();
      Object object4 = new Object();
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.3392721461134682
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = 4294967307L;
      Range range0 = Range.of(4294967307L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(4294967307L, 4294967307L);
      Range range2 = Range.parseRange("[ 4294967308 .. 4294967308 ]/RB", range_CoordinateSystem0);
      List<Range> list0 = range2.complement(range1);
      range1.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-1967L), (-2119L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.401892640850784
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range range0 = Range.of(1L, 4294967295L);
      Range.of(9223372036854775807L);
      Range.of((-131L));
      Object object6 = new Object();
      Range.of((-2147483648L), (-2344L));
      Object object7 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(1L, 0L);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.936427216825098
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(726L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.1220184985197488
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.of(1097L, 65535L);
      Range.Builder range_Builder0 = new Range.Builder(613L, 3319L);
      range_Builder0.shift(65535L);
      Range.Builder range_Builder1 = range_Builder0.shift(65535L);
      range_Builder1.copy();
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.364521124042167
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.of(726L);
      range0.intersection(range1);
      range1.spliterator();
      Range.of(0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder((-1L), 2147483647L);
      range_Builder1.expandBegin((-1846L));
      Range range2 = range_Builder1.build();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.9669434861893547
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4965L, 9223372036854775807L);
      Range range0 = Range.of(4965L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.2865350928757886
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = 4294967307L;
      Range range0 = Range.of((-3702L), (-3702L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      long long1 = 405L;
      Range.of(405L, 4294967307L);
      // Undeclared exception!
      try { 
        Range.parseRange("[ -3701 .. -3701 ]/RB", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ -3701 .. -3701 ]/RB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.664694742405697
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1L));
      range1.isSubRangeOf(range0);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range2 = Range.of((-2852L));
      range2.complement(range1);
      Range range3 = range2.intersection(range1);
      assertTrue(range3.isEmpty());
      
      range1.spliterator();
      Range range4 = Range.of((-137L), (-137L));
      range4.complementFrom(list0);
      assertEquals(0, list0.size());
      
      Range.Builder range_Builder0 = new Range.Builder(32767L, 4294967295L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range5 = Range.of(range_CoordinateSystem0, (-2852L), (-1607L));
      assertNotSame(range5, range2);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.886165178199426
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 158L, 158L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.886165178199426
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range range0 = Range.of(range_CoordinateSystem0, 3L, 3L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.8337387456310323
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-1058L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("-$h/e&xzs8j&J?RVy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.-$h/e&xzs8j&J?RVy
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.0140772805713656
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4976L, 9223372036854775807L);
      Range.of(4976L);
      // Undeclared exception!
      try { 
        Range.of((-132L), (-641L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.410585433477618
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      range0.toString();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.of(726L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.9668267598925535
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range.of(65535L, 65535L);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4696L, (-1641L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.9877714524221313
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder((-1049L), 1955L);
      range_Builder0.shift(0L);
      Range.Builder range_Builder3 = new Range.Builder(0L);
      Range range0 = range_Builder3.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2112L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.744772507675061
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-1L));
      long long0 = (-1642L);
      Range range1 = Range.of((-1642L), (-1642L));
      range1.isSubRangeOf(range0);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range1.startsBefore(range0);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      long long1 = (-2736L);
      Range range3 = Range.of((-1L), 9223372036854774321L);
      range3.complement(range2);
      range0.asRange();
      range1.intersects(range3);
      range2.complement(range3);
      // Undeclared exception!
      try { 
        Range.of(255L, (-2482L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.8804781568334294
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 4965L, 9223372032559808513L);
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.equals(range_CoordinateSystem1);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 9223372032559808513L, 4965L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.5405185498303924
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      range0.complement(range1);
      Range range2 = Range.ofLength(0L);
      Range range3 = range0.intersection(range2);
      range1.spliterator();
      Range.of(0L, 9223372036854774666L);
      Range.Builder range_Builder1 = new Range.Builder(2937L, 2147483647L);
      range_Builder1.build();
      Range range4 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range4.isEmpty());
      assertSame(range4, range3);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.5873229415904313
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      range0.getBegin();
      Range range1 = Range.of(4294967295L);
      range0.complement(range1);
      Range range2 = Range.ofLength(0L);
      range0.intersection(range2);
      range1.spliterator();
      Range.of((-894L), (-894L));
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(1496L, (-1958L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.3764725403795444
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range range1 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range2 = Range.of((-2524L));
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.9381824546861237
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(613L, 3319L);
      Range.Builder range_Builder1 = new Range.Builder(1L, 2523L);
      Range range0 = range_Builder1.build();
      range0.getEnd();
      Range range1 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2524L, long0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.9765445167027456
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 4965L, 9223372032559808513L);
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem3);
      range0.getBegin(range_CoordinateSystem3);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 255L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.9190235060608334
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3728L), (-437L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.445226910174995
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      long long0 = 0L;
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.of(4294967295L);
      range0.complement(range1);
      range0.intersection(range1);
      range1.spliterator();
      long long1 = 2374L;
      Range.Builder range_Builder1 = new Range.Builder(2374L, 9223372032559808519L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(1344L, (-1393L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.389534337691925
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      long long1 = 0L;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(10L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(0L, 0L);
      Long long2 = new Long(10L);
      range0.split(1L);
      range1.isSubRangeOf(range1);
      range0.endsBefore(range1);
      range1.intersection(range2);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(0L, (-2523L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.0431376047494725
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(4294967295L);
      List<Range> list0 = range0.split(4294967295L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(2718L);
      // Undeclared exception!
      try { 
        range0.split((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.504082184155683
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(726L);
      Range range1 = Range.ofLength(726L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(1327L, 9223372036854772866L);
      Long long0 = new Long(32817L);
      range2.equals(long0);
      Range range4 = range0.intersection(range2);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Object object0 = new Object();
      Object object1 = new Object();
      range3.intersects(range2);
      range0.equals("");
      range3.intersection(range4);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.472925969398232
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.of(4294967295L);
      range0.complement(range1);
      Range range2 = range0.intersection(range1);
      range1.spliterator();
      range2.intersects(range1);
      range_Builder0.expandEnd(255L);
      String string0 = "O_.?e\"";
      try { 
        Long.valueOf("O_.?e\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"O_.?e\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.6168539684510734
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 16L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 16L);
      Range range0 = Range.of((-2523L), 16L);
      Range range1 = Range.of((-128L));
      range0.complement(range1);
      Range range2 = Range.of(0L, 0L);
      range1.intersection(range2);
      range2.spliterator();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 16L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.9667901831191803
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(127L);
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of(1486L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(481L, 481L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.143279202293795
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.CoordinateSystem.values();
      Range.ofLength(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.expandEnd(4294967295L);
      Range.Builder range_Builder2 = range_Builder1.shift(4294967295L);
      range_Builder2.copy();
      Range range0 = range_Builder2.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.987771452422131
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin(0L);
      Range.Builder range_Builder1 = new Range.Builder((-1049L), 1955L);
      range_Builder0.shift(0L);
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.8152049266199466
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.ofLength(959L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.03251891494976
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(613L, 613L);
      Range.Builder range_Builder1 = new Range.Builder(1L, 2523L);
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder1.build();
      Object object0 = new Object();
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.7284075400342904
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.ofLength(1089L);
      Range range1 = Range.ofLength(1089L);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 0L;
      // Undeclared exception!
      try { 
        Range.ofLength((-20L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.0026974323801805
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of((-1209L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("KEel*rq(I{ihId}#N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.KEel*rq(I{ihId}#N
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem.values();
      range_Builder0.shift(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.shift(249L);
      // Undeclared exception!
      try { 
        Range.parseRange("inputstream can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse inputstream can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
