/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 00:37:16 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.apache.xerces.jaxp.SAXParserImpl;
import org.dom4j.Attribute;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.dom.DOMProcessingInstruction;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultAttribute;
import org.dom4j.tree.DefaultProcessingInstruction;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.41845750766649
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
          SAXReader sAXReader0 = new SAXReader((XMLReader) null);
          PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
          XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
          XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
          sAXReader0.setXMLFilter(xMLFilterImpl1);
          DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
          DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
          defaultDocumentFactory0.createText("#com&ent");
          DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
          SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
          URI uRI0 = MockURI.aFTPURI;
          URI uRI1 = MockURI.parseServerAuthority(uRI0);
          URL uRL0 = MockURI.toURL(uRI1);
          MockURI.toURL(uRI1);
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLFilterImpl.parse(XMLFilterImpl.java:357)
             // org.xml.sax.helpers.XMLFilterImpl.parse(XMLFilterImpl.java:357)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor319.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLFilterImpl.parse(XMLFilterImpl.java:357)
             // org.xml.sax.helpers.XMLFilterImpl.parse(XMLFilterImpl.java:357)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor319.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.578147389135067
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.getXMLReader();
      try { 
        sAXReader0.read("rF#<LU`4R)");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl1 = (XMLFilterImpl)sAXReader0.installXMLFilter(xMLFilterImpl0);
      xMLFilterImpl0.resolveEntity("&dn", "&dn");
      xMLFilterImpl1.processingInstruction("&dn", "VAru'8YG");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("&dn");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1439);
      pipedInputStream0.mark(65);
      SAXReader sAXReader1 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty("1]EjPHL6lb# Q", "%}=w4rtJS");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl1 = (XMLFilterImpl)sAXReader0.installXMLFilter(xMLFilterImpl0);
      InputSource inputSource0 = new InputSource("&dn");
      xMLFilterImpl1.processingInstruction("&dn", "VAru'8YG");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("&dn");
      // Undeclared exception!
      sAXReader0.installXMLFilter(xMLFilterImpl0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2141218257485757
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      xMLFilterImpl0.setDocumentLocator(locator2Impl1);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      MockFile mockFile0 = new MockFile("the size: ", "{FhF'vC%");
      MockFile mockFile1 = new MockFile(mockFile0, "{FhF'vC%");
      mockFile0.renameTo(mockFile1);
      File file0 = MockFile.createTempFile("http://xml.org/sax/features/validation", "[-XGZ", (File) mockFile0);
      // Undeclared exception!
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2990696902149015
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      String string0 = "&dn";
      InputSource inputSource0 = new InputSource("&dn");
      String string1 = "VAru'8YG";
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4102453456579889
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("\" ");
      sAXReader_SAXEntityResolver0.resolveEntity("\" ", "\" ");
      sAXReader_SAXEntityResolver0.resolveEntity("\" ", ".`+%E6|F5IiM");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "::");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/W\"Zp`k\"%JL\"{C|[0/tmp/F>WMz6NElgv!}j^7CJm0Ln", "::");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      xMLReaderAdapter0.endDocument();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      Object object0 = new Object();
      parserAdapter0.setContentHandler(xMLReaderAdapter0);
      xMLReaderAdapter0.endPrefixMapping("//tmp/w{+0w{+");
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2365151017800016
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      InputSource inputSource0 = new InputSource("&dn");
      xMLFilterImpl0.processingInstruction("&dn", "VAru'8YG");
      // Undeclared exception!
      try { 
        sAXReader0.read("VAru'8YG");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3080502943468506
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.setValidation(false);
      String string0 = "&dn";
      InputSource inputSource0 = new InputSource("&dn");
      String string1 = "VAru'8YG";
      StringReader stringReader0 = new StringReader("http://xml.org/sax/properties/declaration-handler");
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) stringReader0, "VAru'8YG");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3507323743022455
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      Namespace namespace0 = new Namespace(".i", ".i");
      namespace0.getName();
      defaultDocumentFactory0.createQName(".i", namespace0);
      defaultDocumentFactory0.createQName("//tmp/xmlns0(^:8AralI'D", (Namespace) null);
      Object object0 = new Object();
      namespaceStack0.pop("7\"-~\":fpwI(^s0MP");
      defaultDocumentFactory0.createQName("RGSs3qwR)", (Namespace) null);
      Object object1 = new Object();
      Object object2 = new Object();
      namespaceStack0.getQName("g3cqVfDT<;1", "NWp{=V", "[(DefaultPathExpr): ");
      QName.get(".i", (String) null, "7\"-~\":fpwI(^s0MP");
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      BeanElement beanElement0 = new BeanElement("g3cqVfDT<;1", object5);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.setEncoding("RGSs3qwR)");
      File file0 = MockFile.createTempFile("w{+", "y");
      sAXReader0.createXMLReader();
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"RGSS3QWR)\". Nested exception: Invalid encoding name \"RGSS3QWR)\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2473399979120656
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      String string0 = "&dn";
      InputSource inputSource0 = new InputSource("&dn");
      xMLFilterImpl0.processingInstruction("&dn", "VAru'8YG");
      // Undeclared exception!
      try { 
        sAXReader0.read("VAru'8YG");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.4204777096866916
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.getDocumentFactory();
      sAXReader0.installXMLFilter(parserAdapter0);
      sAXReader0.setEncoding("RaC4d_?=Tf");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RaC4d_?=Tf");
      sAXReader0.createDefaultEntityResolver("");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 961, (byte)5);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"RAC4D_?=TF\". Nested exception: Invalid encoding name \"RAC4D_?=TF\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.292735745117031
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Gs{2S8M!]DT?$#");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("\" ");
      sAXReader_SAXEntityResolver0.resolveEntity("\" ", "\" ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.dom4j.bean.BeanAttribute");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)96;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read((Reader) null, "/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:/// : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2473399979120656
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3326774197215174
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/w{+0Non-string namespace binding");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("m^N7N", "m^N7N");
      DOMDocument dOMDocument0 = new DOMDocument();
      ElementStack elementStack0 = new ElementStack();
      elementStack0.peekElement();
      QName qName0 = QName.get("m^N7N", (Namespace) dOMNamespace0);
      DOMElement dOMElement0 = new DOMElement("m^N7N", dOMNamespace0);
      dOMElement0.setNamespace(dOMNamespace0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      IndexedElement indexedElement0 = new IndexedElement("m^N7N");
      IndexedElement indexedElement1 = new IndexedElement(qName0);
      indexedElement0.add((Node) dOMNamespace0);
      NonLazyElement nonLazyElement0 = new NonLazyElement("#twext");
      UserDataElement userDataElement0 = new UserDataElement(qName0);
      userDataElement0.elementIterator(qName0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      NonLazyElement nonLazyElement1 = new NonLazyElement("m^N7N", dOMNamespace0);
      nonLazyElement1.getNamespacesForURI("#twext");
      nonLazyElement1.getUniquePath((Element) null);
      nonLazyElement1.content();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction((Element) null, "#twext", "#twext");
      HandlerBase handlerBase0 = new HandlerBase();
      SAXReader sAXReader0 = new SAXReader();
      URI uRI0 = MockURI.aFileURI;
      StringReader stringReader0 = new StringReader("/m^N7N:m^N7N");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory1, true);
      StringReader stringReader1 = new StringReader("&0s!^08");
      InputSource inputSource0 = new InputSource(stringReader1);
      try { 
        sAXReader1.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Reference is not allowed in prolog. Nested exception: Reference is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.393596836612291
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sAXReader0.setEncoding("<!--");
      sAXReader0.isStripWhitespaceText();
      sAXReader0.isIncludeInternalDTDDeclarations();
      sAXReader0.createXMLReader();
      StringReader stringReader0 = new StringReader("<!--");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : XML document structures must start and end within the same entity. Nested exception: XML document structures must start and end within the same entity.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      sAXReader0.setIgnoreComments(true);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      xMLFilterImpl0.setDocumentLocator(locator2Impl1);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, "org.jaxen.pattern.PatternParser");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      Namespace namespace0 = new Namespace("A]i", "A]i");
      namespace0.getName();
      QName qName0 = defaultDocumentFactory0.createQName("A]i", namespace0);
      namespace0.clone();
      QName qName1 = defaultDocumentFactory0.createQName("//tmp/xmlns0(^:8AralI'D", (Namespace) null);
      Object object0 = new Object();
      namespaceStack0.pop("7\"-~\":fpwI(^s0MP");
      QName qName2 = new QName("RGSs3qwR)", (Namespace) null, (String) null);
      Object object1 = new Object();
      namespaceStack0.getQName("g3cqVfDT<;1", "NWp{=V", "A]i");
      QName qName3 = QName.get("A]i", (String) null, "7\"-~\":fpwI(^s0MP");
      qName1.getQualifiedName();
      qName3.getQualifiedName();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      QName qName4 = defaultDocumentFactory1.createQName(" uri: ", namespace0);
      qName4.toString();
      BeanElement beanElement0 = new BeanElement(qName4, qName0);
      SAXReader sAXReader0 = new SAXReader(false);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      Namespace namespace0 = new Namespace("A]i", "A]i");
      namespace0.getName();
      QName qName0 = defaultDocumentFactory0.createQName("A]i", namespace0);
      namespace0.clone();
      QName qName1 = defaultDocumentFactory0.createQName("//tmp/xmlns0(^:8AralI'D", (Namespace) null);
      Object object0 = new Object();
      String string0 = "7\"-~\":fpwI(^s0MP";
      namespaceStack0.pop("7\"-~\":fpwI(^s0MP");
      QName qName2 = new QName("RGSs3qwR)", (Namespace) null, (String) null);
      Object object1 = new Object();
      namespaceStack0.getQName("g3cqVfDT<;1", "NWp{=V", "A]i");
      QName qName3 = new QName("7\"-~\":fpwI(^s0MP");
      qName1.getQualifiedName();
      qName3.getQualifiedName();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createDocument((Element) null);
      QName qName4 = defaultDocumentFactory1.createQName(" uri: ", namespace0);
      qName4.toString();
      BeanElement beanElement0 = new BeanElement(qName4, qName0);
      SAXReader sAXReader0 = new SAXReader(false);
      MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2975883560528287
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setEncoding("Error on line ");
      MockFile.createTempFile("Error on line ", "A:;h9");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        sAXReader0.read("org.jaxen.JaxenException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@653c2895 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@653c2895 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.365397793850337
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      InputSource inputSource0 = new InputSource("d$");
      sAXReader0.setDefaultHandler(pruningDispatchHandler0);
      sAXReader0.getErrorHandler();
      inputSource0.setPublicId("HqwgQe0kD&dk");
      xMLFilterImpl0.processingInstruction("d$", "VAru'8YG");
      // Undeclared exception!
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("http://xml.org/sax/properties/declaration-handler");
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("org.jaxen.saxpath.base.Token", "floor() requires one argument.");
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction("//tmp/m^N7N0T*d4|x'cTGK{J", "floor() requires one argument.");
      DOMProcessingInstruction dOMProcessingInstruction1 = new DOMProcessingInstruction(nonLazyElement0, "//tmp/g3cqVfDT<;10/tmp/w{+0/tmp/*Y?h90/tmp/Error on line 0*Y?h9", "http://xml.org/sax/properties/declaration-handler");
      dOMProcessingInstruction1.getValues();
      URI uRI0 = MockURI.aFileURI;
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      Object object0 = new Object();
      try { 
        sAXReader1.setProperty("http://xml.org/sax/properties/declaration-handler", object0);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/declaration-handler' cannot be casted to org.xml.sax.ext.DeclHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("\" ");
      NonLazyElement nonLazyElement0 = new NonLazyElement("//tmp/oD1'sH+0 RV(hP(gv%s(kG.++");
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("82[r9TK8:*`MoJ0Y3", "//home/ubuntu/termite/projects/62_dom4j/f[f>/org.jaxen.function.NotFunction1L${|1>w`oWR!bQ'(!");
      DOMProcessingInstruction dOMProcessingInstruction1 = new DOMProcessingInstruction(nonLazyElement0, "file://", ">JfU!^=V]{|Z<");
      dOMProcessingInstruction0.detach();
      dOMProcessingInstruction1.setTarget("\" ");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction(nonLazyElement0, "//tmp/tmp/`9z=.[oRMY|@2j0/tmp/tmp/http:/xml.org/sax/features/validation0*Y?h90w{+07\"-~\":fpwI(^s0MP", "//tmp/tmp/g3cqVfDT<;10/tmp/w{+0/tmp/*Y?h90/tmp/Error on line 0*Y?h90http:/xml.org/sax/features/use-locator2");
      nonLazyElement0.content();
      SAXReader sAXReader0 = new SAXReader();
      MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("\" ");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.installXMLFilter((XMLReader) null);
      Element[] elementArray0 = new Element[7];
      QName qName0 = QName.get("\" ", (Namespace) null);
      IndexedElement indexedElement0 = new IndexedElement(qName0, (-3157));
      // Undeclared exception!
      try { 
        indexedElement0.element(qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.util.IndexedElement", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setValidation(true);
      try { 
        sAXReader0.setXMLReaderClassName("//home/ubuntu/termite/projects/62_dom4j/kXh1|X>W!np/Comment0L");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //home/ubuntu/termite/projects/62_dom4j/kXh1|X>W!np/Comment0L not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.490922603994677
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader(true);
          sAXReader0.isIgnoreComments();
          sAXReader0.setIncludeExternalDTDDeclarations(true);
          Namespace namespace0 = new Namespace("/", "/");
          QName qName0 = QName.get("org.jaxen.dom.NamespaceNode", namespace0, "/");
          BeanElement beanElement0 = new BeanElement(qName0, sAXReader0);
          Class<String> class0 = String.class;
          BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
          BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0, beanMetaData0);
          beanAttributeList0.getQName(0);
          qName0.getDocumentFactory();
          QName.get("/", "ygD", "PGDJ5C8m");
          SAXReader sAXReader1 = new SAXReader((DocumentFactory) null, false);
          sAXReader1.isStripWhitespaceText();
          sAXReader0.getEncoding();
          sAXReader0.isIncludeExternalDTDDeclarations();
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader1.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor319.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor319.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("\" ");
      sAXReader_SAXEntityResolver0.uriPrefix = null;
      sAXReader_SAXEntityResolver0.resolveEntity("\" ", "\" ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 1;
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      try { 
        pipedOutputStream0.connect(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.getXMLReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultDocumentFactory.getInstance();
      defaultHandler2_0.resolveEntity("K+", "Z8xQLs_+", "", "K+");
      StringReader stringReader0 = new StringReader("9t<^.");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/A:;h90Error on line ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "//tmp/Error on line 0*Y?h9");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace0 = new Namespace(".i", ".i");
      QName qName0 = defaultDocumentFactory0.createQName(".i", namespace0);
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement(qName0, ".i");
      Class<Integer> class0 = Integer.class;
      Namespace.get("org.jaxen.expr.iter.IterablePrecedingSiblingAxis");
      BeanMetaData.get(class0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      BeanElement beanElement1 = new BeanElement(qName0, object3);
      beanElement0.processingInstruction((String) null);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DOMElement dOMElement0 = new DOMElement(".i");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDocumentFactory1.createAttribute((Element) beanElement0, (String) null, (String) null);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      BeanElement beanElement2 = new BeanElement(".i", namespace0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      SAXReader sAXReader0 = new SAXReader((String) null);
      File file0 = MockFile.createTempFile("//tmp/brror on ine 0*Y?h9", (String) null);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.439208409093167
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(false);
      SAXParserImpl.JAXPSAXParser sAXParserImpl_JAXPSAXParser0 = (SAXParserImpl.JAXPSAXParser)sAXReader0.getXMLReader();
      sAXReader0.setMergeAdjacentText(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9L)f");
      Object object0 = new Object();
      ParserAdapter parserAdapter0 = new ParserAdapter(sAXParserImpl_JAXPSAXParser0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.startEntity("9L)f");
      sAXReader0.createXMLReader();
      InputSource inputSource0 = new InputSource("I}vf");
      sAXReader0.setErrorHandler(defaultHandler2_0);
      try { 
        sAXReader0.read((Reader) null, "I}vf");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: I}vf Nested exception: no protocol: I}vf
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getEncoding();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Ia\"q0v131EVa&V ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("Ia\"q0v131EVa&V ", (String) null);
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setMergeAdjacentText(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)1;
      sAXReader0.setXMLFilter((XMLFilter) null);
      sAXReader0.isValidating();
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      sAXReader0.isMergeAdjacentText();
      try { 
        sAXReader0.setProperty(".%H}", "2[");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '.%H}' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLReader();
      sAXReader0.setMergeAdjacentText(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)34;
      sAXReader0.setXMLFilter((XMLFilter) null);
      sAXReader0.isValidating();
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      sAXReader0.isMergeAdjacentText();
      try { 
        sAXReader0.setProperty(".%H}", "2k[");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '.%H}' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.238281776565859
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      NamespaceStack namespaceStack1 = new NamespaceStack();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      StringWriter stringWriter0 = new StringWriter(4);
      char[] charArray0 = new char[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      parserAdapter0.ignorableWhitespace(charArray0, 4, 47);
      charArray0[0] = 'O';
      charArray0[3] = 'O';
      charArray0[3] = 'O';
      charArray0[3] = 'O';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.order();
      CharBuffer.wrap((CharSequence) charBuffer0);
      StringReader stringReader0 = new StringReader("");
      CharBuffer.allocate(4);
      CharBuffer charBuffer1 = CharBuffer.allocate(58);
      charBuffer1.duplicate();
      CharBuffer charBuffer2 = CharBuffer.allocate('*');
      charBuffer1.clear();
      CharBuffer.allocate('O');
      charBuffer2.put('D');
      charBuffer2.codePoints();
      charBuffer1.clear();
      stringReader0.read(charBuffer2);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace0 = new Namespace(".i", ".i");
      Object object0 = new Object();
      Class<Integer> class0 = Integer.class;
      BeanMetaData.get(class0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      Object object4 = new Object();
      BeanElement beanElement0 = new BeanElement("8Q\"pl),H$?'Gf5", object4);
      beanElement0.ensureAttributesCapacity((-1495));
      QName qName0 = new QName((String) null, namespace0, "G]S>K7MD`609nTJ#");
      DOMNamespace dOMNamespace0 = new DOMNamespace((String) null, "//tmp/F.3yr#-.*^R2dbT/0Invalid node type. Cannot add node: ");
      QName qName1 = new QName("", dOMNamespace0, "http://xml.org/sax/features/namespace-prefixes");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      sAXReader0.setFeature("http://xml.org/sax/features/namespace-prefixes", false);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMNamespace dOMNamespace0 = new DOMNamespace("m^N7N", "m^N7N");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DOMDocument dOMDocument0 = new DOMDocument();
      ElementStack elementStack0 = new ElementStack();
      String string0 = "";
      String string1 = "";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Invalid node type. Cannot add node: ");
      sAXReader_SAXEntityResolver0.resolveEntity("", "[(DefaultAbsoluteLocationPath): ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = null;
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("\" ");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "W7;~;lXDCk#");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      xMLFilterImpl1.setParent(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      ElementStack elementStack0 = new ElementStack();
      ElementStack elementStack1 = new ElementStack();
      elementStack1.getPath();
      elementStack1.getDispatchHandler();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      dispatchHandler0.removeHandler("axcx/,<&ifIh2'df");
      pruningDispatchHandler0.addHandler("", (ElementHandler) null);
      sAXReader0.addHandler("axcx/,<&ifIh2'df", dispatchHandler0);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      String string0 = "n>^K[T";
      pruningDispatchHandler0.removeHandler("n>^K[T");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ElementStack elementStack2 = new ElementStack(0);
      elementStack1.getDispatchHandler();
      String[] stringArray0 = new String[0];
      PruningElementStack pruningElementStack0 = null;
      try {
        pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid path of length: 0 it must be greater than 2
         //
         verifyException("org.dom4j.io.PruningElementStack", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.514491472225595
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.resetHandlers();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      String string0 = "P$P";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("//tmp/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC0/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC", "//tmp/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC0/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC", 3776, "P$P", uRLStreamHandler0);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      Namespace namespace0 = new Namespace(".i", ".i");
      defaultDocumentFactory0.createQName(".i", namespace0);
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      assertFalse(sAXReader1.isIgnoreComments());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isStripWhitespaceText());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.setStripWhitespaceText(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      XMLFilter xMLFilter0 = sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilter0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      xMLFilterImpl3.resolveEntity("`]", "`]");
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = ':';
      charArray0[2] = '6';
      xMLFilterImpl2.ignorableWhitespace(charArray0, 63, 63);
      xMLFilterImpl2.setEntityResolver(xMLFilterImpl3);
      try { 
        sAXReader0.setProperty("yV9v6\"", xMLFilterImpl2);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'yV9v6\"' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("\" ");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "W7;~;XDCk#");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("&`# sORM3A\"h%R$\"/");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class &`# sORM3A\"h%R$\"/ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.3660231847196305
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "//tmp/oA{n(JQAPKn)Q0NWp{=V", uRLStreamHandler0);
      try { 
        sAXReader0.read(uRL1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      Namespace namespace0 = new Namespace("A]i", "A]i");
      namespace0.getName();
      defaultDocumentFactory0.createQName("A]i", namespace0);
      QName qName0 = defaultDocumentFactory0.createQName("//tmp/xmlns0(^:8AralI'D", (Namespace) null);
      Object object0 = new Object();
      namespaceStack0.pop("7\"-~\":fpwI(^s0MP");
      QName qName1 = new QName("RGSs3qwR)", (Namespace) null, (String) null);
      Object object1 = new Object();
      Object object2 = new Object();
      namespaceStack0.getQName("g3cqVfDT<;1", "NWp{=V", "A]i");
      QName.get("A]i", (String) null, "7\"-~\":fpwI(^s0MP");
      qName0.getQualifiedName();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      BeanElement beanElement0 = new BeanElement(qName0, object2);
      SAXReader sAXReader0 = new SAXReader(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1933, 17);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      Namespace namespace0 = new Namespace(".i", ".i");
      QName qName0 = defaultDocumentFactory0.createQName(".i", namespace0);
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement(qName0, ".i");
      Class<Integer> class0 = Integer.class;
      BeanMetaData.get(class0);
      Attribute attribute0 = defaultDocumentFactory0.createAttribute((Element) beanElement0, "//tmp/Error on line 0*Y?h9", "");
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      beanMetaData0.createAttributeList(beanElement0);
      beanElement0.add((Node) attribute0);
      BeanElement beanElement1 = new BeanElement(".i", qName0);
      BeanElement beanElement2 = new BeanElement(qName0, beanElement1);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      QName qName1 = new QName("//tmp/*Y?h90.tmp", namespace0, (String) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader0.setFeature("U)j<p]c~R~fME&X/GKe", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'U)j<p]c~R~fME&X/GKe' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName qName0 = defaultDocumentFactory0.createQName("//tmp/w{+0/tmp/*Y?h90/tmp/Error on line 0*Y?h9", namespace0);
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      DocumentFactory documentFactory1 = sAXReader0.getDocumentFactory();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertSame(documentFactory1, defaultDocumentFactory0);
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Object object0 = new Object();
      Class<Integer> class0 = Integer.class;
      BeanMetaData.get(class0);
      Object object1 = new Object();
      Object object2 = new Object();
      defaultDocumentFactory0.createText("kK <4OjDF,");
      Object object3 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object4 = new Object();
      Object object5 = new Object();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      Namespace namespace0 = new Namespace(".i", ".i");
      QName qName0 = defaultDocumentFactory0.createQName(".i", namespace0);
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement(qName0, ".i");
      Class<Integer> class0 = Integer.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      Attribute attribute0 = defaultDocumentFactory0.createAttribute((Element) beanElement0, "//tmp/Error on line 0*Y?h9", "");
      beanMetaData0.createAttributeList(beanElement0);
      beanElement0.add((Node) attribute0);
      BeanElement beanElement1 = new BeanElement("U)j<p]c~R~fME&X/GKe", beanMetaData0);
      BeanElement beanElement2 = new BeanElement(qName0, "//tmp/Ero on line 0A:;h9");
      beanElement2.removeProcessingInstruction("//tmp/Error on line 0*Y?h9");
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement2);
      QName qName1 = new QName("//tmp/*Y?h90.tmp", (Namespace) null, (String) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("m^N7N", "m^N7N");
      DOMDocument dOMDocument0 = new DOMDocument();
      ElementStack elementStack0 = new ElementStack();
      elementStack0.peekElement();
      QName qName0 = QName.get("m^N7N", (Namespace) dOMNamespace0);
      DOMElement dOMElement0 = new DOMElement("m^N7N", dOMNamespace0);
      dOMElement0.setNamespace(dOMNamespace0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      IndexedElement indexedElement0 = new IndexedElement("m^N7N");
      IndexedElement indexedElement1 = new IndexedElement(qName0);
      indexedElement0.add((Node) dOMNamespace0);
      NonLazyElement nonLazyElement0 = new NonLazyElement("#twext");
      UserDataElement userDataElement0 = new UserDataElement("m^N7N");
      userDataElement0.elementIterator(qName0);
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction(userDataElement0, "NnQ[U@DKv~1B2=*yr*!", "m^N7N");
      dOMProcessingInstruction0.setTarget("#twext");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      NonLazyElement nonLazyElement1 = new NonLazyElement("v]E~&-D}J|!5", dOMNamespace0);
      nonLazyElement1.getUniquePath((Element) null);
      nonLazyElement1.content();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction((Element) null, "#twext", "v]E~&-D}J|!5");
      HandlerBase handlerBase0 = new HandlerBase();
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("&0s!^08");
      defaultDocumentFactory0.createDocument("#twext");
      sAXReader0.createDefaultEntityResolver("&0s!^08");
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.3122935330266907
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      String string0 = "Error on line ";
      File file0 = MockFile.createTempFile("Error on line ", "Error on line ");
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Error on line 0*Y?h9");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      file0.setWritable(true);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@22341be Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@22341be Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Error on line 0Error on line ");
      FileSystemHandling.createFolder(evoSuiteFile0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      String string0 = "Error on line ";
      MockFile.createTempFile("Error on line ", "Error on line ");
      boolean boolean0 = true;
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/Error on line 0*Y?h9");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      try { 
        sAXReader0.configureReader(xMLFilterImpl1, defaultHandler2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@f988e15 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.5612764411674016
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.resetHandlers();
      sAXReader0.resetHandlers();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      String string0 = "//tmp/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC0/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("//tmp/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC0/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC", "//tmp/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC0/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC", 3776, "P$P", uRLStreamHandler0);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("//tmp/w{+0A]i");
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Namespace namespace0 = new Namespace("//tmp/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC0/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC", "//home/ubuntu/termite/projects/62_dom4j/f[f>/org.jaxen.function.NotFunction1L${|1>w`oWR!bQ'(!");
      DefaultAttribute defaultAttribute0 = new DefaultAttribute("//home/ubuntu/termite/projects/62_dom4j/f[f>/org.jaxen.function.NotFunction1L${|1>w`oWR!bQ'(!", "//tmp/w{+0A]i", namespace0);
      nonLazyElement0.add((Attribute) defaultAttribute0);
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("//tmp/w{+0A]i", "oyRt");
      DOMProcessingInstruction dOMProcessingInstruction1 = new DOMProcessingInstruction("//tmp/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC0/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC", "Cwmment");
      DOMProcessingInstruction dOMProcessingInstruction2 = new DOMProcessingInstruction(nonLazyElement0, "//tmp/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC0/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC", "//home/ubuntu/termite/projects/62_dom4j/f[f>/org.jaxen.function.NotFunction1L${|1>w`oWR!bQ'(!");
      dOMProcessingInstruction2.detach();
      dOMProcessingInstruction2.setTarget("/m4Y2A#@");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      NonLazyElement nonLazyElement1 = new NonLazyElement("ATTRIBUTE_NODE", namespace0);
      nonLazyElement1.getUniquePath((Element) nonLazyElement0);
      nonLazyElement1.content();
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction(nonLazyElement0, "//tmp/w{+0A]i", "//tmp/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC0/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC");
      nonLazyElement0.content();
      HandlerBase handlerBase0 = new HandlerBase();
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "//tmp/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC0/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.2251550429852736
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      String string0 = "Error on line ";
      File file0 = MockFile.createTempFile("Error on line ", "*Y?h9");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Error on line 0*Y?h9");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      file0.setWritable(true);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@1fe02a0e Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@1fe02a0e Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.521452740110338
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      String string0 = "wXzN3|'A^#f";
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultDocumentFactory.getInstance();
      byte[] byteArray0 = new byte[6];
      SAXReader sAXReader1 = new SAXReader(xMLReader0, false);
      sAXReader1.getXMLFilter();
      sAXReader0.setXMLReader((XMLReader) null);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-86);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte)0);
      byteArrayInputStream0.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      bufferedInputStream0.markSupported();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 23);
      pushbackInputStream0.unread(byteArray0);
      try { 
        sAXReader0.setProperty("q9`8yU", pushbackInputStream0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'q9`8yU' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      NamespaceStack namespaceStack1 = new NamespaceStack();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[5];
      parserAdapter0.ignorableWhitespace(charArray0, 4, 47);
      charArray0[0] = 'O';
      charArray0[3] = 'O';
      charArray0[3] = 'O';
      charArray0[4] = 'O';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.order();
      CharBuffer.wrap((CharSequence) charBuffer0);
      StringReader stringReader0 = new StringReader("");
      CharBuffer.allocate(4);
      CharBuffer charBuffer1 = CharBuffer.allocate(58);
      charBuffer1.duplicate();
      CharBuffer charBuffer2 = CharBuffer.allocate(58);
      CharBuffer charBuffer3 = CharBuffer.allocate('*');
      charBuffer1.clear();
      CharBuffer.allocate('O');
      charBuffer3.put('D');
      charBuffer3.codePoints();
      charBuffer2.clear();
      stringReader0.read(charBuffer3);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.3886459900319466
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          StringReader stringReader0 = new StringReader("#");
          DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
          QName qName0 = defaultDocumentFactory0.createQName("#");
          qName0.getDocumentFactory();
          String string0 = "org.dom4j.bean.BeanAttributeList";
          String string1 = "Core";
          QName.get("org.dom4j.bean.BeanAttributeList", "Core", "Core");
          SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
          sAXReader0.getEncoding();
          sAXReader0.isIncludeExternalDTDDeclarations();
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor319.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor319.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setStringInternEnabled(true);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIgnoreComments(false);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.removeHandler(" (I");
      dispatchHandler0.addHandler(" (I", (ElementHandler) null);
      dispatchHandler0.removeHandler("*d+AOHXxT");
      dispatchHandler0.removeHandler(" (I");
      sAXReader0.setDispatchHandler(dispatchHandler0);
      sAXReader0.isStripWhitespaceText();
      sAXReader0.getErrorHandler();
      sAXReader0.getDispatchHandler();
      sAXReader0.getXMLFilter();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMNamespace dOMNamespace0 = new DOMNamespace("m^N7N", "m^N7N");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DOMDocument dOMDocument0 = new DOMDocument();
      ElementStack elementStack0 = new ElementStack();
      elementStack0.peekElement();
      QName qName0 = QName.get("m^N7N", (Namespace) dOMNamespace0);
      defaultDocumentFactory0.createAttribute((Element) null, qName0, "Invalid node type. Cannot add node: ");
      DOMElement dOMElement0 = new DOMElement(qName0);
      dOMElement0.setNamespace(dOMNamespace0);
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      IndexedElement indexedElement0 = new IndexedElement("Invalid node type. Cannot add node: ");
      indexedElement0.asXPathResult(dOMElement0);
      defaultDocumentFactory1.createAttribute((Element) indexedElement0, "", (String) null);
      NonLazyElement nonLazyElement0 = new NonLazyElement("#text");
      UserDataElement userDataElement0 = new UserDataElement("m^N7N");
      userDataElement0.elementIterator(qName0);
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction(userDataElement0, "[#eTh7Qt\"ADe>NXJ", "m^N7N");
      dOMProcessingInstruction0.setTarget("#text");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      NonLazyElement nonLazyElement1 = new NonLazyElement("v]EX+&-D}J|!`", dOMNamespace0);
      nonLazyElement1.getUniquePath((Element) null);
      nonLazyElement1.content();
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction("#text", "[#eTh7Qt\"ADe>NXJ");
      defaultDocumentFactory0.setXPathNamespaceURIs(hashMap0);
      HandlerBase handlerBase0 = new HandlerBase();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.removeHandler("//tmp/g3cqVfDT<;10/tmp/w{+0/tmp/*Y?h90/tmp/Error on line 0*Y?h9");
      InputSource inputSource0 = new InputSource("m^N7N");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: m^N7N Nested exception: no protocol: m^N7N
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.startPrefixMapping("[WA/owD\"W6:KER", "[WA/owD\"W6:KER");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("`9z=.[oRMY|@2j");
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      NamespaceStack namespaceStack1 = new NamespaceStack();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      StringWriter stringWriter0 = new StringWriter(4);
      char[] charArray0 = new char[5];
      parserAdapter0.ignorableWhitespace(charArray0, 4, 51);
      charArray0[0] = 'O';
      charArray0[3] = 'O';
      charArray0[3] = 'O';
      charArray0[4] = '*';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer0.order();
      StringReader stringReader0 = new StringReader("");
      charBuffer0.append('*');
      CharBuffer charBuffer1 = CharBuffer.allocate(58);
      CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) charBuffer0);
      CharBuffer charBuffer3 = CharBuffer.wrap((CharSequence) charBuffer0);
      CharBuffer.wrap(charArray0);
      charBuffer3.duplicate();
      charBuffer1.clear();
      stringReader0.reset();
      stringReader0.read(charBuffer2);
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read((Reader) stringReader0, "-!");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("//tmp/w{+0A]i");
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Namespace namespace0 = new Namespace("//tmp/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC0/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC", "//home/ubuntu/termite/projects/62_dom4j/f[f>/org.jaxen.function.NotFunction1L${|1>w`oWR!bQ'(!");
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("//tmp/w{+0A]i", "U1]=+6A{p@v");
      DOMProcessingInstruction dOMProcessingInstruction1 = new DOMProcessingInstruction("//tmp/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC0/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC", "Cwmment");
      DOMProcessingInstruction dOMProcessingInstruction2 = new DOMProcessingInstruction(nonLazyElement0, "//tmp/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC0/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC", "//home/ubuntu/termite/projects/62_dom4j/f[f>/org.jaxen.function.NotFunction1L${|1>w`oWR!bQ'(!");
      dOMProcessingInstruction2.detach();
      dOMProcessingInstruction2.setTarget("/m4Y2A#@");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      NonLazyElement nonLazyElement1 = new NonLazyElement("ATTRIBUTE_NODE", namespace0);
      nonLazyElement1.getUniquePath((Element) nonLazyElement0);
      nonLazyElement1.content();
      NonLazyElement nonLazyElement2 = new NonLazyElement((String) null, namespace0);
      nonLazyElement2.getUniquePath((Element) nonLazyElement1);
      nonLazyElement2.content();
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction(nonLazyElement2, ".c~7VXTk[Y", "//home/ubuntu/termite/projects/62_dom4j/f[f>/org.jaxen.function.NotFunction1L${|1>w`oWR!bQ'(!");
      HandlerBase handlerBase0 = new HandlerBase();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "//tmp/HgDUMdJO%<5{ka7Y'=#0YJS^|dxR=f&v2&LPn<");
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.3497427651978415
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      QName.get("w{+");
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      BeanElement beanElement0 = new BeanElement("g3cqVfDT<;1", object5);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      File file0 = MockFile.createTempFile("w{+", "I:Z");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.1445934548935424
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      StringReader stringReader0 = new StringReader("");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/Error on line 0Error on line ");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/Error on line 0Error on line ", "`9z=.[oRMY|@2j");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/Error on line 0Error on line ", "");
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.resolveEntity("IM7diDT", "`9z=.[oRMY|@2j");
      xMLFilterImpl0.skippedEntity("");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.setStripWhitespaceText(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 40);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("yCs\"8O'iYBrL<");
      sAXReader0.getXMLReader();
      sAXReader_SAXEntityResolver1.resolveEntity("org.jaxen.SimpleVariableContext", "//tmp/Error on line 0Error on line ");
      sAXReader0.getDocumentFactory();
      try { 
        sAXReader0.setXMLReaderClassName("a`lWL:E|V:/|_jV;(~");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class a`lWL:E|V:/|_jV;(~ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      URI uRI0 = MockURI.aFTPURI;
      MockURI.toURL(uRI0);
      MockFile mockFile0 = new MockFile("d^6tjs.4a6$;gbigP8v");
      MockFile mockFile1 = new MockFile((String) null, "f[f>");
      mockFile0.renameTo(mockFile1);
      MockFile.createTempFile("//tmp/Error Uon line 0/tmp/W++0alN", "PF~wCOdF", (File) mockFile0);
      try { 
        sAXReader0.read((File) mockFile1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      File file0 = MockFile.createTempFile("w{+", "");
      File file1 = file0.getCanonicalFile();
      MockFile mockFile0 = new MockFile("f[f>");
      MockFile mockFile1 = new MockFile("z*P;Q-r\u0000 bg", "the size: ");
      mockFile0.renameTo(mockFile1);
      MockFile.createTempFile("org.jaxen.function.NotFunction", "L${|1>w`oWR!bQ'(!", (File) mockFile0);
      try { 
        sAXReader0.read(file1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      Namespace namespace0 = new Namespace("A]i", "A]i");
      namespace0.getName();
      defaultDocumentFactory0.createQName("A]i", namespace0);
      namespace0.clone();
      QName qName0 = defaultDocumentFactory0.createQName("//tmp/xmlns0(^:8AralI'D", (Namespace) null);
      Object object0 = new Object();
      namespaceStack0.pop("7\"-~\":fpwI(^s0MP");
      QName qName1 = new QName("RGSs3qwR)", (Namespace) null, (String) null);
      Object object1 = new Object();
      namespaceStack0.getQName("g3cqVfDT<;1", "NWp{=V", "A]i");
      QName qName2 = QName.get("A]i", (String) null, "7\"-~\":fpwI(^s0MP");
      qName0.getQualifiedName();
      qName2.getQualifiedName();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      QName qName3 = defaultDocumentFactory1.createQName(" uri: ", namespace0);
      qName3.toString();
      SAXReader sAXReader0 = new SAXReader(false);
      Object object5 = new Object();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, object5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5$6?CX/x");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.configureReader(xMLFilterImpl0, (DefaultHandler) null);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      Namespace namespace0 = new Namespace("A]i", "A]i");
      namespace0.getName();
      QName qName0 = defaultDocumentFactory0.createQName("A]i", namespace0);
      namespaceStack0.addNamespace("//tmp/xmlns0(^:8AralI'D", "//tmp/xmlns0(^:8AralI'D");
      QName qName1 = defaultDocumentFactory0.createQName("//tmp/xmlns0(^:8AralI'D", (Namespace) null);
      qName1.equals("//tmp/xmlns0(^:8AralI'D");
      namespaceStack0.push("A]i", "Ec6:Kn)7c&0^hBHta");
      namespaceStack0.pop("7\"-~\":fpwI(^s0MP");
      QName qName2 = new QName("RGSs3qwR)", (Namespace) null, (String) null);
      Object object0 = new Object();
      namespaceStack0.getQName("7\"-~\":fpwI(^s0MP", ".M<J0$3nIY9b(1^;!", "A]i");
      QName qName3 = QName.get("A]i", (String) null, "7\"-~\":fpwI(^s0MP");
      qName1.getQualifiedName();
      qName3.getQualifiedName();
      Object object1 = new Object();
      Object object2 = new Object();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      QName qName4 = defaultDocumentFactory1.createQName(" ukri: ", namespace0);
      qName4.toString();
      BeanElement beanElement0 = new BeanElement(qName4, qName0);
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("7\"-~\":fpwI(^s0MP", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class 7\"-~\":fpwI(^s0MP not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      NamespaceStack namespaceStack1 = new NamespaceStack();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      StringWriter stringWriter0 = new StringWriter(4);
      char[] charArray0 = new char[5];
      parserAdapter0.ignorableWhitespace(charArray0, 4, 47);
      charArray0[0] = 'O';
      charArray0[3] = 'O';
      charArray0[3] = 'O';
      charArray0[4] = 'O';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.order();
      CharBuffer.wrap((CharSequence) charBuffer0);
      StringReader stringReader0 = new StringReader("");
      CharBuffer.allocate(4);
      CharBuffer charBuffer1 = CharBuffer.allocate(58);
      charBuffer1.duplicate();
      CharBuffer charBuffer2 = CharBuffer.allocate(58);
      CharBuffer charBuffer3 = CharBuffer.allocate('*');
      charBuffer1.clear();
      CharBuffer.allocate('O');
      charBuffer3.put('D');
      charBuffer3.codePoints();
      charBuffer2.clear();
      stringReader0.read(charBuffer3);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.2567063126495794
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Class<SAXParseException> class0 = SAXParseException.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      QName qName0 = QName.get((String) null, (Namespace) null);
      BeanElement beanElement0 = new BeanElement(qName0, qName0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      beanAttributeList0.getQName(0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.setContentHandler(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.setEncoding("#QC$.n@T");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0, "//tmp/A:;h90Error on line ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"#QC$.N@T\". Nested exception: Invalid encoding name \"#QC$.N@T\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("\" ");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXReader sAXReader0 = new SAXReader(false);
      InputSource inputSource0 = new InputSource((String) null);
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.endElement("//tmp/last0g3cqVfDT<;1");
      sAXReader0.setErrorHandler(handlerBase0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createNamespace(".i", ".i");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createNamespace((String) null, "Invalid node type. Cannot add node: ");
      Element element0 = defaultDocumentFactory0.createElement("//tmp/Error on line 0*Y?h9", "//tmp/Error on line 0*Y?h9");
      defaultDocumentFactory1.createAttribute(element0, "Invalid node type. Cannot add node: ", ".i");
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction(element0, ".i", "Invalid node type. Cannot add node: ");
      Map<String, String> map0 = dOMProcessingInstruction0.getValues();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createProcessingInstruction("//tmp/#!z&B_c4dha[`Q0^D(50", ".i");
      defaultDocumentFactory2.setXPathNamespaceURIs(map0);
      defaultDocumentFactory2.createText("//tmp/#!z&B_c4dha[`Q0^D(50");
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory2);
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      URL uRL0 = MockURI.toURL(uRI1);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /tmp/foo.bar (No such file or directory) Nested exception: /tmp/foo.bar (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          LinkedList<Node> linkedList0 = new LinkedList<Node>();
          DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("//tmp/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC0/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC", "Cwmment");
          FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
          HashMap<String, String> hashMap0 = new HashMap<String, String>();
          LinkedList<Node> linkedList1 = new LinkedList<Node>();
          String string0 = "//tmp/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC0/home/ubuntu/termite/projects/62_dom4j/Lv@<K6]8DMC/Lv@<K6]8DMC/Lv@<K6]8DMC0Lv@<K6]8DMC";
          SAXReader sAXReader0 = new SAXReader();
          URL uRL0 = MockURL.getFtpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor319.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor319.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
