/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 00:52:18 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.155885523301666
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "-trimText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.27208890545726
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat0.getIndent());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isNewlines());
      
      OutputFormat outputFormat2 = new OutputFormat("@~{dhnd");
      assertEquals("@~{dhnd", outputFormat2.getIndent());
      
      String[] stringArray0 = new String[6];
      stringArray0[1] = "-indent";
      stringArray0[2] = "";
      stringArray0[3] = "@~{dhnd";
      outputFormat0.parseOptions(stringArray0, 1);
      stringArray0[4] = "_KXJ4GzdgV6VHx/vFw";
      int int0 = outputFormat2.parseOptions(stringArray0, 1);
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertFalse(outputFormat2.isXHTML());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertFalse(outputFormat2.isPadText());
      assertFalse(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isOmitEncoding());
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertEquals(3, int0);
      
      String[] stringArray1 = new String[8];
      stringArray1[0] = "_KXJ4GzdgV6VHx/vFw";
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat3.isPadText());
      assertTrue(outputFormat3.isTrimText());
      assertTrue(outputFormat3.isNewlines());
      assertFalse(outputFormat3.isXHTML());
      assertEquals('\"', outputFormat3.getAttributeQuoteCharacter());
      assertFalse(outputFormat3.isExpandEmptyElements());
      assertEquals("\n", outputFormat3.getLineSeparator());
      assertEquals("UTF-8", outputFormat3.getEncoding());
      assertFalse(outputFormat3.isOmitEncoding());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1049922791552107
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, true, "NW#vdPbGq");
      outputFormat0.setNewLineAfterDeclaration(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat1.isNewlines());
      assertEquals("  ", outputFormat1.getIndent());
      assertTrue(outputFormat1.isPadText());
      assertTrue(outputFormat1.isTrimText());
      
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = new OutputFormat("NW#vdPbGq", true, (String) null);
      outputFormat2.isNewLineAfterDeclaration();
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals(0, int0);
      
      OutputFormat outputFormat3 = new OutputFormat((String) null, true);
      assertTrue(outputFormat3.isNewlines());
      assertFalse(outputFormat3.isSuppressDeclaration());
      assertFalse(outputFormat3.isTrimText());
      assertFalse(outputFormat3.isExpandEmptyElements());
      assertFalse(outputFormat3.isXHTML());
      assertEquals("\n", outputFormat3.getLineSeparator());
      assertEquals('\"', outputFormat3.getAttributeQuoteCharacter());
      assertFalse(outputFormat3.isOmitEncoding());
      assertFalse(outputFormat3.isPadText());
      assertEquals("UTF-8", outputFormat3.getEncoding());
      
      String string0 = outputFormat2.getEncoding();
      assertEquals("NW#vdPbGq", outputFormat2.getIndent());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertFalse(outputFormat2.isOmitEncoding());
      assertFalse(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertFalse(outputFormat2.isXHTML());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertTrue(outputFormat2.isNewlines());
      assertNull(string0);
      assertFalse(outputFormat2.isPadText());
      
      OutputFormat outputFormat4 = OutputFormat.createCompactFormat();
      assertEquals("UTF-8", outputFormat4.getEncoding());
      assertTrue(outputFormat4.isTrimText());
      assertTrue(outputFormat4.isNewLineAfterDeclaration());
      assertFalse(outputFormat4.isExpandEmptyElements());
      assertFalse(outputFormat4.isPadText());
      assertEquals("\n", outputFormat4.getLineSeparator());
      assertEquals(0, outputFormat4.getNewLineAfterNTags());
      assertFalse(outputFormat4.isNewlines());
      assertFalse(outputFormat4.isOmitEncoding());
      assertFalse(outputFormat4.isSuppressDeclaration());
      assertEquals('\"', outputFormat4.getAttributeQuoteCharacter());
      assertFalse(outputFormat4.isXHTML());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.getNewLineAfterNTags();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "HyTer<0Z9";
      stringArray0[1] = "-indentSize";
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setIndent(false);
      outputFormat0.getLineSeparator();
      outputFormat0.getLineSeparator();
      outputFormat0.setEncoding("HyTer<0Z9");
      OutputFormat outputFormat1 = new OutputFormat("kf$/D{1(**_R", false);
      outputFormat1.setOmitEncoding(false);
      outputFormat0.getLineSeparator();
      OutputFormat outputFormat2 = new OutputFormat("-indentSize");
      outputFormat2.setOmitEncoding(false);
      outputFormat2.setOmitEncoding(false);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.isNewLineAfterDeclaration();
      assertEquals("HyTer<0Z9", outputFormat0.getEncoding());
      
      int int0 = outputFormat2.getNewLineAfterNTags();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setNewLineAfterNTags(34);
      outputFormat0.setNewLineAfterNTags(34);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setLineSeparator("kf$D{1(**_Rg");
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setNewLineAfterNTags(34);
      outputFormat0.getLineSeparator();
      outputFormat0.isNewLineAfterDeclaration();
      assertEquals("kf$D{1(**_Rg", outputFormat0.getLineSeparator());
      
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isPadText());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1223219093141488
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[15];
      stringArray0[0] = "-suppressDeclaration";
      stringArray0[1] = "-'ndntSize";
      stringArray0[4] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isSuppressDeclaration());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat1.isSuppressDeclaration());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0750943299222677
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat2.isPadText());
      assertTrue(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isNewlines());
      
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat3 = new OutputFormat("@~{dhnd");
      String[] stringArray0 = new String[6];
      stringArray0[1] = "@~{dhnd";
      stringArray0[2] = "";
      stringArray0[3] = "@~{dhnd";
      outputFormat1.parseOptions(stringArray0, 1);
      outputFormat3.parseOptions(stringArray0, 1);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "_KXJ4GzdgV6VHx/vFw";
      stringArray1[1] = "@~{dhnd";
      stringArray1[2] = "-indent";
      stringArray1[3] = "-indent";
      stringArray1[4] = "_KXJ4GzdgV6VHx/vFw";
      stringArray1[5] = "_KXJ4GzdgV6VHx/vFw";
      stringArray1[6] = "";
      stringArray1[7] = "@~{dhnd";
      outputFormat3.parseOptions(stringArray1, 1);
      OutputFormat outputFormat4 = new OutputFormat("-padText");
      assertEquals("UTF-8", outputFormat4.getEncoding());
      assertFalse(outputFormat4.isExpandEmptyElements());
      assertFalse(outputFormat4.isXHTML());
      assertEquals('\"', outputFormat4.getAttributeQuoteCharacter());
      assertFalse(outputFormat4.isSuppressDeclaration());
      assertFalse(outputFormat4.isTrimText());
      assertFalse(outputFormat4.isOmitEncoding());
      assertEquals(0, outputFormat4.getNewLineAfterNTags());
      assertEquals("\n", outputFormat4.getLineSeparator());
      assertFalse(outputFormat4.isPadText());
      assertEquals("-padText", outputFormat4.getIndent());
      assertTrue(outputFormat4.isNewLineAfterDeclaration());
      
      outputFormat0.parseOptions(stringArray1, 1);
      OutputFormat.createPrettyPrint();
      String[] stringArray2 = new String[2];
      stringArray2[0] = "@~{dhnd";
      stringArray2[1] = "-padText";
      int int0 = outputFormat0.parseOptions(stringArray2, 1);
      assertEquals("  ", outputFormat0.getIndent());
      assertEquals(2, int0);
      
      OutputFormat outputFormat5 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat5.isSuppressDeclaration());
      assertTrue(outputFormat5.isTrimText());
      assertEquals("UTF-8", outputFormat5.getEncoding());
      assertFalse(outputFormat5.isOmitEncoding());
      assertTrue(outputFormat5.isPadText());
      assertTrue(outputFormat5.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat5.getAttributeQuoteCharacter());
      assertEquals("\n", outputFormat5.getLineSeparator());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3079585498083524
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setIndent(true);
      outputFormat1.setSuppressDeclaration(true);
      outputFormat1.setIndent(true);
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat0.setIndentSize((-610));
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat1.setLineSeparator("eKK2Tv");
      outputFormat1.setOmitEncoding(true);
      outputFormat2.setExpandEmptyElements(true);
      outputFormat0.setIndent("");
      outputFormat1.setExpandEmptyElements(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.isSuppressDeclaration();
      String[] stringArray0 = new String[0];
      outputFormat0.setNewlines(true);
      outputFormat2.getNewLineAfterNTags();
      outputFormat1.isSuppressDeclaration();
      outputFormat1.setIndent("");
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat1.getLineSeparator();
      outputFormat1.getEncoding();
      outputFormat1.getNewLineAfterNTags();
      outputFormat1.isSuppressDeclaration();
      assertEquals("eKK2Tv", outputFormat1.getLineSeparator());
      
      outputFormat2.setIndentSize(3637);
      outputFormat2.setIndent("{YwF@H}");
      assertFalse(outputFormat2.isNewlines());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7440536680327248
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      String string1 = "_KXJ4GzdgV6VHx/vFw";
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      String string2 = "@~{dhnd";
      OutputFormat outputFormat0 = new OutputFormat("@~{dhnd");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter(' ');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ( )
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.371588645474688
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator("");
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.getNewLineAfterNTags();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "lwi;|y";
      stringArray0[1] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.getLineSeparator();
      outputFormat0.getLineSeparator();
      OutputFormat outputFormat1 = new OutputFormat("-indentSize", false);
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat1.parseOptions(stringArray0, 15);
      outputFormat0.isNewLineAfterDeclaration();
      assertEquals("", outputFormat0.getLineSeparator());
      
      int int0 = outputFormat1.getNewLineAfterNTags();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.048702951016823
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndentSize((-248131859));
      outputFormat0.setLineSeparator("k}");
      outputFormat0.setNewLineAfterNTags((-428));
      outputFormat0.setIndent("-xhtmlUTF-8");
      outputFormat0.getNewLineAfterNTags();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-xhtmlUTF-8";
      stringArray0[1] = "k}";
      stringArray0[2] = "k}";
      stringArray0[3] = "-xhtmlUTF-8";
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setNewLineAfterNTags(3376);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndent(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.getNewLineAfterNTags();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewlines(true);
      outputFormat0.setIndent((String) null);
      assertEquals("k}", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.11285303678132
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setXHTML(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setIndent("");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setNewLineAfterNTags((-1646));
      outputFormat0.isExpandEmptyElements();
      outputFormat0.setIndent("j\")w");
      OutputFormat.createCompactFormat();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('5');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (5)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3763386509335085
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      String string0 = ")e}l9ne";
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('%');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (%)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.619814540989509
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indentSize", true);
      outputFormat0.setIndentSize((-104));
      outputFormat0.setIndentSize((-174));
      outputFormat0.setIndent("LLfKcBuSXVR$zVR");
      outputFormat0.setTrimText(false);
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.setIndent("LLfKcBuSXVR$zVR");
      assertEquals("LLfKcBuSXVR$zVR", outputFormat0.getIndent());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat1.isPadText());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.658208530445275
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setAttributeQuoteCharacter('\'');
      assertEquals('\'', outputFormat0.getAttributeQuoteCharacter());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setTrimText(true);
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[6];
      stringArray0[2] = "-newlif@s";
      stringArray0[3] = "-newlif@s";
      stringArray0[4] = "-newlif@s";
      stringArray0[5] = "-newlif@s";
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.212010875395347
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertTrue(outputFormat1.isTrimText());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "-newlines";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals(2, int0);
      assertTrue(outputFormat0.isNewlines());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertTrue(outputFormat2.isPadText());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertEquals("  ", outputFormat2.getIndent());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertTrue(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertFalse(outputFormat2.isXHTML());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3036548834525026
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1;
      OutputFormat outputFormat0 = new OutputFormat("-encoding", false, (String) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "<\\ w@G8:+Rc";
      stringArray0[1] = "-omitEncoding";
      stringArray0[2] = "-encoding";
      stringArray0[3] = "-encoding";
      stringArray0[4] = "-encoding";
      stringArray0[5] = "<\\ w@G8:+Rc";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1946);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1480));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1480
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.619598459191748
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setIndent("");
      outputFormat0.setEncoding("");
      outputFormat0.setIndentSize(2);
      outputFormat0.setIndent("UTF-8");
      outputFormat0.setIndent("UTF-8");
      outputFormat0.setTrimText(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setTrimText(true);
      outputFormat0.setTrimText(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      outputFormat1.parseOptions(stringArray0, 2);
      outputFormat1.setIndent("");
      outputFormat0.isOmitEncoding();
      char char0 = '7';
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('7');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (7)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7137811415110975
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      outputFormat0.setXHTML(true);
      outputFormat0.setLineSeparator("");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setNewlines(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setTrimText(true);
      outputFormat0.setIndent(true);
      outputFormat0.setNewlines(true);
      outputFormat0.getIndent();
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.isPadText();
      outputFormat0.getEncoding();
      outputFormat0.setIndentSize((-1));
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setIndent(";7PbtVF");
      assertEquals(";7PbtVF", outputFormat0.getIndent());
      
      outputFormat0.setIndent(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.isNewlines();
      outputFormat0.setIndent("");
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4714661670061098
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setEncoding((String) null);
      outputFormat0.setTrimText(false);
      outputFormat0.setIndentSize(0);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setEncoding((String) null);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setLineSeparator("/^GqLcP");
      outputFormat0.isPadText();
      outputFormat1.setTrimText(false);
      outputFormat1.setIndent((String) null);
      outputFormat1.getLineSeparator();
      outputFormat0.isXHTML();
      outputFormat1.isSuppressDeclaration();
      outputFormat0.setNewlines(false);
      outputFormat0.setXHTML(true);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.isXHTML();
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat1.setNewLineAfterNTags(0);
      outputFormat0.isPadText();
      outputFormat1.setLineSeparator("-expandEmpty-newli@s");
      outputFormat1.setNewLineAfterNTags(0);
      assertEquals("-expandEmpty-newli@s", outputFormat1.getLineSeparator());
      
      outputFormat0.setXHTML(true);
      outputFormat0.setNewlines(false);
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2897413271187324
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndentSize(1163);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setXHTML(false);
      String[] stringArray0 = new String[8];
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setSuppressDeclaration(false);
      stringArray0[0] = "";
      stringArray0[1] = "h(tn!%jCX!D#u~p";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "QbmG+cJ@:I DvsB";
      stringArray0[5] = "";
      outputFormat0.setPadText(false);
      stringArray0[6] = " ^>qVAPYyO#";
      outputFormat0.setIndent("");
      outputFormat0.isNewLineAfterDeclaration();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setOmitEncoding(true);
      outputFormat0.setIndent(false);
      outputFormat1.isXHTML();
      outputFormat1.getNewLineAfterNTags();
      outputFormat1.setXHTML(true);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat1.isSuppressDeclaration();
      assertTrue(outputFormat1.isOmitEncoding());
      
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat2.isOmitEncoding());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.7417776083359617
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("@J{dhnn");
      String[] stringArray0 = new String[12];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "-expafdEmRtypnewli@s";
      stringArray0[2] = "@J{dhnn";
      stringArray0[3] = "-omitEncoding";
      stringArray0[4] = "-encoding";
      stringArray0[5] = "@J{dhnn";
      stringArray0[6] = "-expafdEmRtypnewli@s";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals(1, int0);
      
      String[] stringArray1 = new String[2];
      stringArray1[0] = "9i 0y8odZ,T. :";
      stringArray1[1] = "";
      int int1 = outputFormat0.parseOptions(stringArray1, 1);
      assertEquals(1, int1);
      
      outputFormat0.parseOptions(stringArray0, 1);
      int int2 = outputFormat0.parseOptions(stringArray1, 0);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("@J{dhnn", outputFormat0.getIndent());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, int2);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.24319204066033
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.getLineSeparator();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setLineSeparator((String) null);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat0.setLineSeparator("O0y|UH687GW^)");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat1.setNewlines(false);
      String[] stringArray0 = new String[0];
      outputFormat1.parseOptions(stringArray0, 618);
      outputFormat1.parseOptions(stringArray0, 618);
      outputFormat1.setNewLineAfterNTags(0);
      outputFormat2.isPadText();
      assertTrue(outputFormat2.isNewlines());
      
      outputFormat2.setNewlines(false);
      outputFormat1.isNewlines();
      outputFormat1.setIndent((String) null);
      assertFalse(outputFormat1.isNewlines());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("org.dom4j.io.OutputFormat", true, "org.dom4j.io.OutputFormat");
      OutputFormat outputFormat1 = new OutputFormat();
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat1.setEncoding((String) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.dom4j.io.OutputFormat";
      stringArray0[1] = "-lineSeparator";
      outputFormat1.getNewLineAfterNTags();
      boolean boolean0 = outputFormat1.isNewLineAfterDeclaration();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0834763040946214
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 1;
      OutputFormat outputFormat0 = new OutputFormat("-omitEncoding");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-encoding";
      stringArray0[1] = null;
      int int1 = 0;
      outputFormat0.parseOptions(stringArray0, 0);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText", true);
      outputFormat0.setNewLineAfterNTags((-645));
      String string0 = OutputFormat.STANDARD_INDENT;
      assertEquals("  ", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("lU:H&Yv9VwG^k7kTs!c", true);
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      outputFormat0.setSuppressDeclaration(true);
      assertTrue(outputFormat0.isSuppressDeclaration());
      
      OutputFormat outputFormat1 = new OutputFormat("UTF-8");
      OutputFormat outputFormat2 = new OutputFormat();
      boolean boolean0 = outputFormat1.isSuppressDeclaration();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0483598978435813
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indentSize", true);
      outputFormat0.setIndentSize((-104));
      OutputFormat outputFormat1 = new OutputFormat("K<~@#i3T.d@=s\"p", true, "w4 ?WlAQgD\"");
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setIndent((String) null);
      outputFormat0.getIndent();
      outputFormat0.isNewlines();
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      outputFormat3.setIndent("  ");
      outputFormat0.getIndent();
      outputFormat3.isSuppressDeclaration();
      outputFormat0.setIndent("w4 ?WlAQgD\"");
      assertEquals("w4 ?WlAQgD\"", outputFormat0.getIndent());
      
      OutputFormat outputFormat4 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat4.getIndent());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.649669942596342
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat1.getIndent());
      assertTrue(outputFormat1.isPadText());
      assertTrue(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isTrimText());
      
      boolean boolean0 = outputFormat0.isTrimText();
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6930121983106288
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indentSize", true);
      outputFormat0.setIndentSize((-104));
      outputFormat0.setIndentSize((-174));
      outputFormat0.setIndent("");
      outputFormat0.setIndent("LLfKcBuSXVR$zVR");
      OutputFormat outputFormat1 = new OutputFormat("xftr4o", false, "-indentSize");
      outputFormat1.setIndent(false);
      outputFormat1.setIndent("xftr4o");
      outputFormat0.setTrimText(true);
      OutputFormat outputFormat2 = new OutputFormat((String) null);
      outputFormat2.setOmitEncoding(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "xftr4oz 9*)D";
      stringArray0[2] = "GgXk_YE";
      outputFormat2.parseOptions(stringArray0, 34);
      outputFormat0.setIndent("GgXk_YE");
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertEquals("GgXk_YE", outputFormat0.getIndent());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9587783018285274
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtmlGgXk_Y");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-xhtmlGgXk_Y";
      stringArray0[1] = "-xhtmlGgXk_Y";
      stringArray0[2] = "-xhtmlGgXk_Y";
      stringArray0[3] = "-xhtmlGgXk_Y";
      stringArray0[4] = "-xhtmlGgXk_Y";
      stringArray0[5] = "-xhtmlGgXk_Y";
      stringArray0[6] = "-xhtmlGgXk_Y";
      outputFormat0.parseOptions(stringArray0, 1);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1618786321));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1618786321
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.54063445370043
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("[[`utrZi7K^O", false);
      outputFormat0.setIndent(false);
      outputFormat0.setIndent(true);
      outputFormat0.setIndent("Y?\"gbK&n");
      outputFormat0.setIndent(">dUGO -2vW");
      outputFormat0.setIndent("Y?\"gbK&n");
      outputFormat0.setIndent("Y?\"gbK&n");
      outputFormat0.setIndent("-na");
      outputFormat0.setIndent("-na");
      outputFormat0.setIndent("-Nnden");
      outputFormat0.setIndent("A`q}");
      outputFormat0.setIndent("-na");
      outputFormat0.setIndent("-xhtml@~{dhnd");
      outputFormat0.setIndent("+J8z>z}hYo");
      outputFormat0.setIndent("-trimText");
      outputFormat0.setIndent("-lineSeparator");
      outputFormat0.setIndent("~:a~S");
      assertEquals("~:a~S", outputFormat0.getIndent());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6997608016132726
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = null;
      int int0 = 1;
      String string1 = "@~{dhnd";
      OutputFormat outputFormat0 = new OutputFormat("-omitEncoding");
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "@~{dhnd";
      String string2 = "-encoding";
      stringArray0[2] = "-encoding";
      stringArray0[3] = "-omitEncoding";
      stringArray0[6] = "-omitEncoding";
      outputFormat0.parseOptions(stringArray0, 1);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1191));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1191
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9487605215810104
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-xhtmlGgXk_YE", false, "");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-expandEmpty-xhtmlGgXk_YE";
      stringArray0[1] = "";
      outputFormat0.setIndent("");
      outputFormat0.setIndent(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndent("\"qSi!TC\"lxrv<9kP[");
      outputFormat0.setIndentSize((-1369));
      outputFormat0.setIndent("-exandEmptykJN+mKppSL>S,ac6b*c");
      outputFormat0.setIndent("-TTOC]DN");
      assertEquals("-TTOC]DN", outputFormat0.getIndent());
      
      outputFormat0.setIndent("");
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.662305491865555
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setLineSeparator("-xhtml-xhtmlGgXk_YE");
      assertEquals("-xhtml-xhtmlGgXk_YE", outputFormat0.getLineSeparator());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = new OutputFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat2.isSuppressDeclaration());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[17];
      OutputFormat outputFormat0 = new OutputFormat("-xhtml", true);
      outputFormat0.getAttributeQuoteCharacter();
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("-xhtml", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals('\"', char0);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-xhtmlGgXk_YE", false, "");
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-expandEmpty-xhtmlGgXk_YE";
      stringArray0[1] = "-expandEmpty-xhtmlGgXk_YE";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.755739480438498
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("}%FEU708");
      outputFormat0.setOmitEncoding(true);
      OutputFormat outputFormat1 = new OutputFormat("}%FEU708", false, "-omitEncoding");
      outputFormat1.setNewlines(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndent("}%FEU708");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "}%FEU708";
      stringArray0[1] = "-omitEncoding";
      stringArray0[2] = "l#W /7Zt)` .:";
      stringArray0[3] = "}%FEU708";
      stringArray0[4] = "";
      outputFormat1.setSuppressDeclaration(false);
      stringArray0[6] = "}%FEU708";
      outputFormat1.getIndent();
      outputFormat0.isNewlines();
      OutputFormat outputFormat2 = new OutputFormat("");
      outputFormat2.setIndent("}%FEU708");
      outputFormat2.setOmitEncoding(false);
      outputFormat2.setSuppressDeclaration(false);
      outputFormat2.getIndent();
      boolean boolean0 = outputFormat2.isSuppressDeclaration();
      assertEquals("}%FEU708", outputFormat2.getIndent());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.2482755097038791
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("r/_SZ0q 5G0? Ix$wL", true, "r/_SZ0q 5G0? Ix$wL");
      outputFormat0.setNewLineAfterDeclaration(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-lineSeparator";
      outputFormat0.setNewLineAfterDeclaration(false);
      stringArray0[2] = "-indentSize";
      stringArray0[3] = "-indentSire";
      stringArray0[4] = "r/_SZ0q 5G0? Ix$wL";
      stringArray0[5] = "-indentSize";
      stringArray0[6] = "-indentSire";
      stringArray0[7] = "-lineSeparator";
      stringArray0[8] = "r/_SZ0q 5G0? Ix$wL";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-indentSire\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-xhtmlGgXk_YE";
      stringArray0[2] = "ei";
      stringArray0[3] = "-expandEmpty-expandEmpty-newlines";
      stringArray0[4] = "";
      stringArray0[5] = "X31XDpggGVv";
      int int0 = outputFormat0.parseOptions(stringArray0, 222);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(222, int0);
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7471909229346854
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.getIndent();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "  ";
      stringArray0[1] = "  ";
      stringArray0[2] = "  ";
      stringArray0[3] = "  ";
      stringArray0[4] = "  ";
      stringArray0[5] = "  ";
      outputFormat1.parseOptions(stringArray0, 1461);
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-504759346));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -504759346
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null);
      outputFormat0.getIndent();
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[2] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[5] = null;
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.353277514195747
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("Tm");
      outputFormat0.setIndent(true);
      outputFormat0.setIndent(true);
      outputFormat0.setIndent("Y?\"gbK&n");
      outputFormat0.setIndent((String) null);
      outputFormat0.setIndent("+J8z>z}hYo");
      outputFormat0.setIndent("3Sm:e:=EyzD]cGtL");
      outputFormat0.setIndent("Sh{");
      outputFormat0.setIndent("-indent");
      outputFormat0.setIndent("F2l4[");
      outputFormat0.setIndent("Y?\"gbK&n");
      outputFormat0.setIndent("Y?\"gbK&n");
      outputFormat0.setIndent("-xhtml");
      outputFormat0.setIndent("f");
      outputFormat0.setIndent("");
      outputFormat0.setIndent("Sh{");
      assertEquals("Sh{", outputFormat0.getIndent());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('k');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (k)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.353277514195747
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("Tm");
      outputFormat0.setIndent(true);
      outputFormat0.setIndent(true);
      outputFormat0.setIndent("Y?\"gbK&n");
      outputFormat0.setIndent((String) null);
      outputFormat0.setIndent("+J8z>z}hYo");
      outputFormat0.setIndent("3Sm:e:=EyzD]cGtL");
      outputFormat0.setIndent("Sh{");
      outputFormat0.setIndent("-indent");
      outputFormat0.setIndent("F2l4[");
      outputFormat0.setIndent("Y?\"gbK&n");
      outputFormat0.setIndent("Y?\"gbK&n");
      outputFormat0.setIndent("-xhtml");
      outputFormat0.setIndent("Xe*>D R7mA+7v=y");
      outputFormat0.setIndent("");
      outputFormat0.setIndent("Sh{");
      assertEquals("Sh{", outputFormat0.getIndent());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-ind%nentSize", true);
      assertEquals("-ind%nentSize", outputFormat0.getIndent());
      
      outputFormat0.setIndentSize(1038);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.5419387377130405
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setTrimText(true);
      assertTrue(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isNewlines());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = new OutputFormat();
      assertFalse(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isPadText());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat2.isNewlines());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertFalse(outputFormat2.isXHTML());
      assertEquals("  ", outputFormat2.getIndent());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertFalse(outputFormat2.isOmitEncoding());
      assertTrue(outputFormat2.isPadText());
      assertTrue(outputFormat2.isTrimText());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setXHTML(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndent(false);
      outputFormat0.setEncoding("");
      outputFormat0.setTrimText(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.isTrimText();
      outputFormat0.isPadText();
      outputFormat0.setIndentSize(1038);
      assertTrue(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat0.isTrimText());
      
      outputFormat0.setTrimText(false);
      boolean boolean0 = outputFormat0.isTrimText();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-lineSeparator", true);
      outputFormat0.setLineSeparator("-lineSeparator");
      outputFormat0.setIndentSize((-3626));
      outputFormat0.setIndent("-lineSeparator");
      outputFormat0.setIndent(true);
      outputFormat0.isExpandEmptyElements();
      outputFormat0.setPadText(true);
      outputFormat0.setIndent("9c");
      outputFormat0.setXHTML(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "9c";
      stringArray0[1] = "_[#nVe9GyV:r.";
      outputFormat0.setNewlines(true);
      stringArray0[2] = "";
      stringArray0[3] = "-lineSeparator";
      outputFormat0.setTrimText(true);
      stringArray0[4] = "9c";
      stringArray0[5] = "-lineSeparator";
      stringArray0[6] = "-lineSeparator";
      stringArray0[7] = "9c";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-3626));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3626
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1265386804514934
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 1;
      OutputFormat outputFormat0 = new OutputFormat("@J{dhnn");
      String[] stringArray0 = new String[12];
      stringArray0[3] = "-encoding";
      stringArray0[1] = "-encoding";
      stringArray0[2] = "@J{dhnn";
      stringArray0[3] = "-omitEncoding";
      stringArray0[4] = "-encoding";
      stringArray0[5] = "@J{dhnn";
      stringArray0[6] = "-expafdEmRtypnewli@s";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 6);
      int int1 = (-614);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-614));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -614
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText", true);
      String string0 = outputFormat0.getEncoding();
      assertEquals("-trimText", outputFormat0.getIndent());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewlines());
      assertEquals("UTF-8", string0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }
}
