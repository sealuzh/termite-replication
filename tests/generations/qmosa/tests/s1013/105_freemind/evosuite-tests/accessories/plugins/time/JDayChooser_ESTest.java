/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 02:56:21 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import freemind.main.FreeMindApplet;
import freemind.modes.Mode;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.filemode.FileMode;
import freemind.modes.schememode.SchemeMode;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.ContainerOrderFocusTraversalPolicy;
import java.awt.Cursor;
import java.awt.DefaultFocusTraversalPolicy;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.ImageCapabilities;
import java.awt.Point;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.beans.PropertyChangeListener;
import java.sql.SQLException;
import java.sql.Time;
import java.time.Instant;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.Date;
import java.util.Locale;
import javax.help.ForwardAction;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JMenuBar;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTree;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.metal.MetalDesktopIconUI;
import javax.swing.plaf.metal.MetalRootPaneUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GapContent;
import javax.swing.text.LabelView;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import javax.swing.tree.TreePath;
import org.apache.batik.bridge.SVGTextElementBridge;
import org.apache.batik.css.parser.Parser;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.TemplateList;
import org.apache.xml.dtm.DTM;
import org.apache.xml.utils.QName;
import org.apache.xpath.XPathContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.rowio.RowInputBinary;
import org.hsqldb.rowio.RowOutputBinary;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import plugins.collaboration.database.DatabaseConnectionHook;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2330051196779763
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(10540800000L);
      System.setCurrentTimeMillis((-546L));
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)13;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1, 0L, 0, 1149, '`');
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser2.setMonth((-2105));
      assertEquals(31, jDayChooser2.getDay());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2415623867827166
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-96);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.ORANGE;
      Color color1 = Color.orange;
      jDayChooser0.setForeground(color1);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 8905, (byte) (-96), (byte) (-96), 35, 'r');
      keyEvent0.consume();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser2.getDay());
      
      jDayChooser0.setMonth((byte) (-96));
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1601111386929506
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      containerOrderFocusTraversalPolicy0.getLastComponent(jDayChooser0);
      jDayChooser0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)47;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      RowInputBinary rowInputBinary0 = new RowInputBinary(rowOutputBinary0);
      ActionEvent actionEvent0 = new ActionEvent(rowInputBinary0, (byte)90, "28", 4737);
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      containerOrderFocusTraversalPolicy0.getLastComponent(jDayChooser0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser jDayChooser2 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser2.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2111574333994177
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.addAncestorListener(ancestorListener0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setMaxDayCharacters(2);
      SchemeMode schemeMode0 = new SchemeMode();
      jDayChooser0.getAccessibleContext();
      // Undeclared exception!
      try { 
        schemeMode0.getFrame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.schememode.SchemeMode", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.133789948455545
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      containerOrderFocusTraversalPolicy0.getLastComponent(jDayChooser0);
      jDayChooser0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      jDayChooser0.addContainerListener((ContainerListener) null);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)47;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      RowInputBinary rowInputBinary0 = new RowInputBinary(rowOutputBinary0);
      ActionEvent actionEvent0 = new ActionEvent(rowInputBinary0, (byte)90, "28", 4737);
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      containerOrderFocusTraversalPolicy0.getLastComponent(jDayChooser0);
      containerOrderFocusTraversalPolicy0.getLastComponent(jDayChooser0);
      jDayChooser0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      actionEvent0.paramString();
      jDayChooser0.updateUI();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.096641232508321
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(0, 0);
      jDayChooser_DecoratorButton0.getConditionForKeyStroke(keyStroke0);
      jDayChooser_DecoratorButton0.setBounds(1424, 1424, 1424, 2139095040);
      SystemColor systemColor0 = SystemColor.textHighlightText;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2139095040;
      Color.RGBtoHSB(0, 2139095040, 28, floatArray0);
      floatArray0[1] = (float) 1424;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 2139095040;
      floatArray0[5] = (float) 1424;
      systemColor0.getColorComponents(floatArray0);
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.setWeekdayForeground(systemColor0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.097465961594406
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawWeeks();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.invalidate();
      jDayChooser0.initDecorations();
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      jDayChooser0.addPropertyChangeListener("MapControllerPopupDialog.place", (PropertyChangeListener) metalRootPaneUI0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.096591278091726
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.textHighlight;
      Boolean boolean0 = GVTAttributedCharacterIterator.TextAttribute.OVERLINE_ON;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_SPACING;
      int int0 = ImageObserver.SOMEBITS;
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StringContent stringContent0 = new StringContent((-438));
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(styleContext0);
      defaultStyledDocument0.getDefaultRootElement();
      Element element0 = defaultStyledDocument0.getDefaultRootElement();
      LabelView labelView0 = new LabelView(element0);
      Font font0 = labelView0.getFont();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.contains(4372, 48);
      jDayChooser0.setFont(font0);
      jDayChooser0.drawDays();
      jDayChooser0.initDecorations();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      stringArray0[1] = "OP";
      stringArray0[2] = "OP";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.218338480439743
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBordersVisible();
      SystemColor systemColor0 = SystemColor.textHighlight;
      Color.getColor("day", 0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke((-2), (-2));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getConditionForKeyStroke(keyStroke0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.setBounds(2139095040, (-1), 37, (-2));
      SystemColor systemColor1 = SystemColor.textHighlightText;
      jDayChooser0.setForeground(systemColor0);
      Parser parser0 = new Parser();
      parser0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.054151057440243
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = new Boolean(false);
      boolean boolean1 = new Boolean("day");
      jDayChooser0.setDay(8831);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.drawDays();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2412765001241644
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = new Locale("1", "D72p,UX>,{P7b#");
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)SVGTextElementBridge.PAINT_INFO;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (byte) (-96), (String) null);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute1 = GVTAttributedCharacterIterator.TextAttribute.TEXT_COMPOUND_DELIMITER;
      JDayChooser jDayChooser1 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 680, (long) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_NONE, (int) gVTAttributedCharacterIterator_TextAttribute1.ARABIC_ISOLATED, '*');
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser1.setMonth((byte) (-96));
      jDayChooser1.drawWeeks();
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.4536999434163
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize(0, 0);
      jDayChooser0.getColorModel();
      JViewport jViewport0 = new JViewport();
      jViewport0.setFocusable(true);
      Dimension dimension0 = jViewport0.getExtentSize();
      jDayChooser0.getSize(dimension0);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.createVolatileImage(1427, 0);
      jDayChooser0.setEnabled(true);
      Date date0 = jDayChooser0.getMinSelectableDate();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      imageCapabilities0.clone();
      jDayChooser0.createVolatileImage(0, 1794, imageCapabilities0);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setSundayForeground((Color) null);
      jDayChooser0.setFocus();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getSundayForeground();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setAlignmentX(10.0F);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GridBagLayout gridBagLayout1 = new GridBagLayout();
      Point point0 = gridBagLayout1.getLayoutOrigin();
      point0.translate(1, 49);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_SPACING;
      int int0 = ImageObserver.SOMEBITS;
      JMenuBar jMenuBar0 = new JMenuBar();
      MenuSelectionManager.defaultManager();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 164, 61443, 1452, 8, 1);
      SystemColor systemColor0 = SystemColor.textHighlightText;
      assertEquals(255, systemColor0.getBlue());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.setAlignmentX(10.0F);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GridBagLayout gridBagLayout1 = new GridBagLayout();
      gridBagLayout1.getLayoutOrigin();
      int int0 = 1;
      gridBagLayout0.minimumLayoutSize(jDayChooser0);
      int int1 = 49;
      int int2 = 1252;
      int int3 = 1;
      int int4 = 28;
      double double0 = (-1702.43765316);
      int int5 = (-111);
      MetalDesktopIconUI metalDesktopIconUI0 = new MetalDesktopIconUI();
      // Undeclared exception!
      try { 
        metalDesktopIconUI0.getInsets(jDayChooser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicDesktopIconUI", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.159815398030626
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.removeAll();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      MapDialog mapDialog0 = new MapDialog();
      MapDialog mapDialog1 = new MapDialog();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.isDayBordersVisible();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1867270210280028
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Center");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.setMaxDayCharacters((-1));
      SchemeMode schemeMode0 = new SchemeMode();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)99;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      defaultFocusTraversalPolicy0.setImplicitDownCycleTraversal(false);
      JScrollPane jScrollPane0 = new JScrollPane();
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "28");
      int int0 = SwingConstants.LEADING;
      jDayChooser0.getSelectedDay();
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getRegistration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.HookAdapter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2412733785871195
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = new Locale("1", "D72p,UX>,{P7b#");
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)SVGTextElementBridge.PAINT_INFO;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (byte) (-96), (String) null);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute1 = GVTAttributedCharacterIterator.TextAttribute.TEXT_COMPOUND_DELIMITER;
      JDayChooser jDayChooser1 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 892, (long) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_SPACING, (int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_SPACING, (int) gVTAttributedCharacterIterator_TextAttribute0.SMALL_CAPS, '0');
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.setMonth(11);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.254481910740823
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener2 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener1);
      AWTEventMulticaster.remove(hierarchyListener2, hierarchyListener2);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setFocus();
      jDayChooser0.setAlwaysFireDayProperty(false);
      GapContent gapContent0 = new GapContent(2013);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Date date1 = jDayChooser0.minSelectableDate;
      jDayChooser1.setSelectableDateRange(date0, date0);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1201904832585976
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JViewport jViewport0 = new JViewport();
      jViewport0.setFocusable(true);
      jDayChooser0.setDay((-2135));
      JButton jButton0 = new JButton();
      jDayChooser0.setMaxDayCharacters(1745);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2750419463185105
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(0, 0);
      jDayChooser_DecoratorButton0.getConditionForKeyStroke(keyStroke0);
      jDayChooser0.drawDays();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getSundayForeground();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      color0.getColorSpace();
      jDayChooser_DecoratorButton0.setBounds((-1), (-1), 0, 244);
      jDayChooser_DecoratorButton0.isFocusable();
      SystemColor systemColor0 = SystemColor.textHighlightText;
      jDayChooser0.setForeground(color0);
      JDayChooser jDayChooser1 = new JDayChooser();
      boolean boolean1 = jDayChooser1.isDecorationBackgroundVisible();
      assertFalse(boolean1 == boolean0);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.235874619579527
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBordersVisible();
      SystemColor systemColor0 = SystemColor.textHighlight;
      Color.getColor("day", 0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      Boolean boolean0 = new Boolean(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.isDayBordersVisible();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_SPACING;
      int int0 = ImageObserver.SOMEBITS;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 2, (-3937), (-3937), 48);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3937,HOUR_OF_DAY=-3937,MINUTE=-3937,SECOND=48,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2643488736265525
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis((-654L));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-16);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.ORANGE;
      Color color1 = jDayChooser0.sundayForeground;
      Color.getColor("day", 1766);
      jDayChooser0.setForeground(color1);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2293), 0L, (byte) (-16), 8905, '_');
      keyEvent0.consume();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(31, jDayChooser0.getDay());
      
      jDayChooser1.setMonth((byte) (-16));
      Color color2 = jDayChooser2.getDecorationBackgroundColor();
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertEquals(210, color2.getRed());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.170005734881401
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      jDayChooser0.setMonth((-857));
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0586049119161527
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(0, 0);
      jDayChooser_DecoratorButton0.getConditionForKeyStroke(keyStroke0);
      ForwardAction forwardAction0 = new ForwardAction(jDayChooser_DecoratorButton0);
      MenuElement[] menuElementArray0 = new MenuElement[2];
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem0;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jDayChooser_DecoratorButton0, 2139095040, (-423L), (-1), 1424, 2139095040, (-1), 2139095040, 2139095040, true, menuElementArray0, menuSelectionManager0);
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      // Undeclared exception!
      try { 
        Time.valueOf((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1700179605675673
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.validate();
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.focusGained((FocusEvent) null);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setDayBordersVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileMode fileMode0 = new FileMode();
      fileMode0.getController();
      ActionEvent actionEvent0 = new ActionEvent("Windows", 228, "Windows", 45);
      Object object0 = new Object();
      jDayChooser0.getClientProperty(object0);
      actionEvent0.setSource((Object) null);
      actionEvent0.paramString();
      actionEvent0.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.359671176988895
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(0);
      jDayChooser0.addListeners(0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 61441, 61441, '!');
      keyEvent0.consume();
      KeyEvent.getExtendedKeyCodeForChar(338);
      InputEvent.getModifiersExText(0);
      jDayChooser0.keyTyped(keyEvent0);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      Component component0 = jCheckBoxMenuItem0.getComponent();
      Component component1 = jDayChooser0.add(component0);
      jDayChooser0.remove(component1);
      jDayChooser0.getContainerListeners();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      JDayChooser jDayChooser1 = new JDayChooser();
      Color color0 = jDayChooser1.getWeekdayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      TemplateList templateList0 = new TemplateList();
      XPathContext xPathContext0 = new XPathContext(component1, false);
      QName qName0 = new QName("day");
      jDayChooser0.setEnabled(false);
      // Undeclared exception!
      try { 
        templateList0.getTemplateFast(xPathContext0, 0, 0, qName0, (-1480), false, (DTM) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xalan.templates.TemplateList", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1962674566168174
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ITALY;
      jDayChooser0.setLocale(locale0);
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1608966978625985
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.UK;
      Locale locale1 = Locale.ITALY;
      jDayChooser0.setCursor((Cursor) null);
      PDFInfo pDFInfo0 = new PDFInfo();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser0.update(pDFDocumentGraphics2D0);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1126336585317285
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      System.setCurrentTimeMillis(18489600025L);
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.US;
      jDayChooser0.setLocale(locale0);
      PDFInfo pDFInfo0 = new PDFInfo();
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2794929401901167
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getColorModel();
      JViewport jViewport0 = new JViewport();
      jViewport0.setFocusable(true);
      Dimension dimension0 = jViewport0.getExtentSize();
      jDayChooser0.repaint(0, 2506, 2506, 0);
      dimension0.setSize(0, 34);
      Dimension dimension1 = new Dimension(0, 0);
      jDayChooser0.setWeekOfYearVisible(true);
      Color.getColor("day");
      Color.getColor("Dialog Plain 11");
      JDayChooser jDayChooser2 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser2.setYearChooser(jYearChooser0);
      jDayChooser1.setForeground((Color) null);
      KeyEvent keyEvent0 = new KeyEvent(jViewport0, 6, 765L, (-686), 43, 'l');
      JDayChooser jDayChooser3 = new JDayChooser(true);
      jDayChooser3.keyPressed(keyEvent0);
      System.setCurrentTimeMillis((-686));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      int int0 = 181;
      DefaultTableModel defaultTableModel0 = null;
      try {
        defaultTableModel0 = new DefaultTableModel(181, (-346));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -346
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-657), (-989L), (-2775), (-2775), '#', menuElementArray0, menuSelectionManager0);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_RTL;
      menuKeyEvent0.setSource(integer0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1016510389035683
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.textHighlight;
      Boolean boolean0 = GVTAttributedCharacterIterator.TextAttribute.OVERLINE_ON;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_SPACING;
      int int0 = ImageObserver.SOMEBITS;
      StyleContext.getDefaultStyleContext();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(48, 224, 48, 144, 2, 420);
      System.setCurrentTimeMillis(1814L);
      JDayChooser jDayChooser0 = new JDayChooser();
      int int1 = jDayChooser0.getDaysInMonth();
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(31, int1);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-17), "", (-17));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getToolkit();
      jDayChooser_DecoratorButton0.setAutoscrolls(false);
      actionEvent0.paramString();
      actionEvent0.setSource(jDayChooser_DecoratorButton0);
      actionEvent0.paramString();
      actionEvent0.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = new Locale("1", "D72p,UX>,{P7b#");
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)SVGTextElementBridge.PAINT_INFO;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (byte) (-96), (String) null);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute1 = GVTAttributedCharacterIterator.TextAttribute.TEXT_COMPOUND_DELIMITER;
      ActionEvent actionEvent1 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute1, 892, "Dialog Plain 11", (byte) (-96), 944);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.2021264500326914
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#\"IE)et{]");
      stringArray0[0] = "Center";
      stringArray0[0] = "14";
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2736.9F;
      floatArray0[2] = 0.0F;
      systemColor0.getColorComponents(floatArray0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(19, 159, 159, 19, 46, 19);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor1 = SystemColor.textText;
      jDayChooser0.setDecorationBackgroundColor(systemColor1);
      System.setCurrentTimeMillis(9L);
      System.setCurrentTimeMillis(19);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      boolean boolean1 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean1 == boolean0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.170005734881401
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.validate();
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.focusGained((FocusEvent) null);
      jDayChooser0.setDayBordersVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int int0 = 540;
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      JTabbedPane jTabbedPane0 = null;
      try {
        jTabbedPane0 = new JTabbedPane(540, 540);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal tab placement: must be TOP, BOTTOM, LEFT, or RIGHT
         //
         verifyException("javax.swing.JTabbedPane", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.09747264597468
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Instant instant0 = MockInstant.ofEpochSecond((-1078L), (-1404L));
      Instant instant1 = MockInstant.plusMillis(instant0, (-1078L));
      Date date0 = Date.from(instant1);
      jDayChooser0.setMaxSelectableDate(date0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMaxSelectableDate(date0);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke((-222), 0, false);
      AWTKeyStroke.getAWTKeyStroke('Y');
      jDayChooser_DecoratorButton0.getConditionForKeyStroke(keyStroke0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.240235895383868
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ITALY;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.isWeekOfYearVisible();
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.getMinSelectableDate();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      int int0 = 8929;
      try { 
        jdbcConnection0.prepareStatement("Windows", 727, 727, 727);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // java.lang.String@0000000059
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1677452551206233
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#\"IE)et{]");
      stringArray0[0] = "Center";
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.createVolatileImage(1184, 90);
      jDayChooser0.setEnabled(false);
      jDayChooser0.getMinSelectableDate();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      JTree jTree0 = new JTree();
      int int0 = 27;
      jTree0.getClosestPathForLocation((-1283), (-260));
      Instant instant0 = MockInstant.ofEpochSecond((long) (-260));
      Instant instant1 = MockInstant.minusMillis(instant0, (-1364));
      ChronoField chronoField0 = ChronoField.ERA;
      TemporalUnit temporalUnit0 = chronoField0.getRangeUnit();
      // Undeclared exception!
      try { 
        MockInstant.plus(instant1, (long) 1184, temporalUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported unit: Forever
         //
         verifyException("java.time.Instant", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0927040812664064
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay(35);
      assertEquals(28, jDayChooser1.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1287280798819306
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-857));
      jDayChooser0.setDay((-857));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.128715854195764
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      jDayChooser0.getMouseWheelListeners();
      jDayChooser0.setDay((-2411));
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.removeContainerListener((ContainerListener) null);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "day";
      stringArray0[1] = "month";
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      UnmarshallingContext unmarshallingContext0 = null;
      try {
        unmarshallingContext0 = new UnmarshallingContext((-2411), stringArray0, stringArray0, stringArray0, stringArray0, iBindingFactory0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Center";
      stringArray0[0] = "14";
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      containerOrderFocusTraversalPolicy0.getLastComponent(jDayChooser_DecoratorButton0);
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      ActionEvent actionEvent0 = new ActionEvent("v{jCAHijx?w]", (-3459), "1", (-3459));
      actionEvent0.paramString();
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setYear(3);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.167784642256785
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.textHighlight;
      Boolean boolean0 = GVTAttributedCharacterIterator.TextAttribute.OVERLINE_ON;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_SPACING;
      int int0 = ImageObserver.SOMEBITS;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 48;
      floatArray0[2] = (float) 8;
      floatArray0[3] = (float) 48;
      floatArray0[5] = (float) 2;
      floatArray0[7] = (float) 8;
      systemColor0.getColorComponents(floatArray0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 2, (-3937), (-3937), 48);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      System.setCurrentTimeMillis(8);
      System.setCurrentTimeMillis((-3937));
      jDayChooser0.setForeground(systemColor0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(90, color0.getGreen());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.205435033889684
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.focusLost((FocusEvent) null);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(90, color0.getGreen());
      
      jDayChooser0.isDayBordersVisible();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1708393105332373
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-17), "Wi", (-17));
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      containerOrderFocusTraversalPolicy0.getLastComponent(jDayChooser0);
      containerOrderFocusTraversalPolicy0.getLastComponent(jDayChooser0);
      jDayChooser0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      actionEvent0.paramString();
      actionEvent0.paramString();
      actionEvent0.paramString();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.getDay();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getSelectedDay();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(153, 5, 5, 61443, 1, 48);
      SystemColor systemColor0 = SystemColor.textHighlightText;
      assertEquals(255, systemColor0.getAlpha());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      containerOrderFocusTraversalPolicy0.getLastComponent(jDayChooser0);
      jDayChooser0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      jDayChooser0.addContainerListener((ContainerListener) null);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)47;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      rowOutputBinary0.write(byteArray0);
      rowOutputBinary0.writeChar((byte)122);
      RowInputBinary rowInputBinary0 = new RowInputBinary(rowOutputBinary0);
      Instant instant0 = MockInstant.ofEpochSecond(1924L);
      Instant instant1 = MockInstant.minusMillis(instant0, 0L);
      ChronoField chronoField0 = ChronoField.SECOND_OF_MINUTE;
      TemporalUnit temporalUnit0 = chronoField0.getRangeUnit();
      Instant instant2 = MockInstant.plus(instant1, 1834L, temporalUnit0);
      MockInstant.plusMillis(instant0, (byte)106);
      MockInstant.truncatedTo(instant2, temporalUnit0);
      TreePath treePath0 = new TreePath(temporalUnit0);
      treePath0.pathByAddingChild(containerOrderFocusTraversalPolicy0);
      jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }
}
