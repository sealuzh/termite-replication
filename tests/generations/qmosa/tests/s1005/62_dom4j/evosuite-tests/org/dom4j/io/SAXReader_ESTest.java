/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 17:23:33 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sun.msv.datatype.xsd.XSDatatype;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttribute;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.datatype.DatatypeAttribute;
import org.dom4j.dom.DOMAttribute;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jaxen.SimpleVariableContext;
import org.jaxen.VariableContext;
import org.junit.runner.RunWith;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getQName("http://xml.org/sax/features/namespace-prefixes", "http://xml.org/sax/features/namespace-prefixes", "http://xml.org/sax/features/namespace-prefixes");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL("file://", "file://", 8116, "//Error on line 0org.dom4j.tree.FlyweightProcessingInstruction", uRLStreamHandler0);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setFeature("http://xml.org/sax/features/namespace-prefixes", false);
      try { 
        sAXReader0.setFeature("8>kLfX/#WUlX8", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '8>kLfX/#WUlX8' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("H^tyKr+poI:Vo':?;p/H^tyKr+poI:Vo':?;p0H^tyKr+poI:Vo':?;p");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)26;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "H^tyKr+poI:Vo':?;p");
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      MockFile mockFile0 = new MockFile((File) null, "H^tyKr+poI:Vo':?;p");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("H^tyKr+poI:Vo':?;p/H^tyKr+poI:Vo':?;p0H^tyKr+poI:Vo':?;p");
      mockFile0.toPath();
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      MockFile.createTempFile("//tmp/;Dh^20;Dh^2", "]FD-uGuMcRT", (File) mockFile0);
      mockFile0.setReadable(true);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4076136936807786
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "<n,>F]1yIiez";
      sAXReader0.setEncoding("<n,>F]1yIiez");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.configureReader(parserAdapter0, defaultHandler0);
      try { 
        sAXReader0.read("<n,>F]1yIiez");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: <n,>F]1yIiez Nested exception: no protocol: <n,>F]1yIiez
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3456445680718905
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)55;
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.Namespace");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.Namespace", "");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("N4#:7-ZE_&l");
      sAXReader_SAXEntityResolver1.resolveEntity("", "not() requires one argument.");
      DefaultDocument defaultDocument0 = new DefaultDocument("l^iu=z\"R[iFgXgx@iqZ");
      StringReader stringReader0 = new StringReader("//tmp/}zU*t0L,[3ruV378zH!");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.352703518963392
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("//Error on line 0org.dom4j.tree.FlyweightProcessingInstruction");
      sAXReader_SAXEntityResolver0.resolveEntity("8V.VxZ|tI7fvu", "8V.VxZ|tI7fvu");
      DefaultDocumentFactory.getInstance();
      Namespace namespace0 = Namespace.get("//tmp/$Rw^oT[f:D;IH69 0FromIndex: {0}, ToIndex: {1}, Size: {2}");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      Namespace namespace1 = defaultDocumentFactory1.createNamespace((String) null, "\" could not be added to the element \"");
      QName qName0 = defaultDocumentFactory1.createQName("//Error on line 0org.dom4j.tree.FlyweightProcessingInstruction", namespace0);
      String string0 = "AqR(*C.'.*+";
      QName.get("", namespace1, "AqR(*C.'.*+");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory3.createElement(qName0);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory1);
      sAXReader0.setEncoding("//tmp/{:f}PUW%Os0W7@30=IuvJsJ-Of[e.r4");
      StringReader stringReader0 = new StringReader("tHbV");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Namespace namespace0 = new Namespace(" 3ID]@7!z'6b$", ".Oz^ZNz");
      Namespace namespace1 = Namespace.XML_NAMESPACE;
      QName qName0 = new QName("4H=3PmCz~}zn", namespace0, " 3ID]@7!z'6b$");
      DOMNamespace dOMNamespace0 = new DOMNamespace(".Oz^ZNz", " 3ID]@7!z'6b$");
      QName qName1 = QName.get("4H=3PmCz~}zn", (Namespace) dOMNamespace0, ".Oz^ZNz");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype0).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute0 = new DatatypeAttribute(qName1, xSDatatype0, "4H=3PmCz~}zn");
      XSDatatype xSDatatype1 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype1).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      String string0 = null;
      DatatypeAttribute datatypeAttribute1 = new DatatypeAttribute(qName1, xSDatatype1, (String) null);
      XSDatatype xSDatatype2 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xSDatatype2).convertToLexicalValue(any() , any(com.sun.msv.datatype.SerializationContext.class));
      DatatypeAttribute datatypeAttribute2 = new DatatypeAttribute(qName0, xSDatatype2);
      datatypeAttribute2.getParent();
      namespace0.getName();
      datatypeAttribute2.setData(qName0);
      DOMDocument dOMDocument0 = new DOMDocument();
      datatypeAttribute1.getParent();
      DOMAttribute dOMAttribute0 = new DOMAttribute((Element) null, qName1, "");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.391772851204174
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)55;
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)55;
      sAXReader0.setEncoding("//tmp/WglRd0http:/xml.org/sax/prperties/lexical-handler");
      byteArray1[1] = (byte)55;
      byteArray1[2] = (byte)55;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"//TMP/WGLRD0HTTP:/XML.ORG/SAX/PRPERTIES/LEXICAL-HANDLER\". Nested exception: Invalid encoding name \"//TMP/WGLRD0HTTP:/XML.ORG/SAX/PRPERTIES/LEXICAL-HANDLER\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.278600407264681
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 92;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "/&mp/}zU*1tEa");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity(":moj8Nz?w+ptZvC", ":moj8Nz?w+ptZvC");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      DataInputStream dataInputStream2 = new DataInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(dataInputStream0);
      PushbackInputStream pushbackInputStream2 = null;
      try {
        pushbackInputStream2 = new PushbackInputStream(dataInputStream1, (-657));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      String string0 = "Validation not supported for XMLReader: ";
      sAXReader0.createDefaultEntityResolver("Validation not supported for XMLReader: ");
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Namespace namespace0 = new Namespace("//Error on line 0org.dom4j.ree.FlyweightPrecessingInstruction", " 3ID]@7!z'6b$");
      Namespace namespace1 = Namespace.get("//Error on line 0org.dom4j.ree.FlyweightPrecessingInstruction");
      QName qName0 = new QName(" 3ID]@7!z'6b$", namespace1, "http://xml.org/sax/features/use-locator2");
      QName.get("http://xml.org/sax/features/use-locator2", namespace0);
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      stringArray0[1] = "http://xml.org/sax/features/use-locator2";
      stringArray0[2] = ",(;f}7k";
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      ElementStack elementStack0 = new ElementStack(13);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      sAXReader0.getXMLReader();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Namespace namespace0 = new Namespace("Xl5", ".Oz^ZNz");
      Namespace namespace1 = Namespace.XML_NAMESPACE;
      QName qName0 = new QName("4H=3PmCz~}zn", namespace0, "Xl5");
      DOMNamespace dOMNamespace0 = new DOMNamespace(".Oz^ZNz", "Xl5");
      QName qName1 = QName.get(".Oz^ZNz", "4H=3PmCz~}zn");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      qName0.getQualifiedName();
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype0).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute0 = new DatatypeAttribute(qName1, xSDatatype0, "4H=3PmCz~}zn");
      XSDatatype xSDatatype1 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype1).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute1 = new DatatypeAttribute(qName1, xSDatatype1, (String) null);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getErrorHandler();
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.214734015212756
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile.createTempFile("{:f}PUW%Os0W7@3", "F=:ITuvJ@sJ-Of[e.r4");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("add(int,Object) unsupported");
      sAXReader_SAXEntityResolver0.resolveEntity("KrqZ9|,kd6?", "http://xml.org/sax/features/use-locator2");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      Namespace namespace0 = Namespace.get("0n");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace1 = defaultDocumentFactory0.createNamespace("{:f}PUW%Os0W7@3", "ZjBG_^D");
      defaultDocumentFactory0.createQName("org.dom4j.factory", namespace1);
      QName.get("http://xml.org/sax/features/use-locator2", namespace0, (String) null);
      QName qName0 = defaultDocumentFactory0.createQName("QK;.");
      defaultDocumentFactory0.createElement(qName0);
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      try { 
        sAXReader0.setFeature("http://xml.org/sax/features/use-locator2", true);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // Feature 'http://xml.org/sax/features/use-locator2' is read only.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = null;
      String string1 = ".ebS>8C[+Q ";
      SAXReader sAXReader0 = new SAXReader((String) null);
      DefaultDocument defaultDocument0 = new DefaultDocument();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      InputSource inputSource0 = new InputSource();
      inputSource0.setSystemId("=\"");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      sAXReader0.installXMLFilter((XMLReader) null);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("GOz^ZNz", "/");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte) (-72);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(dataInputStream0);
      pushbackInputStream1.read();
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(dataInputStream1, (-1226));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.420295386033961
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "H^tyKr+poI:Vo':?;p");
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.setEncoding("H^tyKr+poI:Vo':?;p");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte)30;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(" of document ", "H^tyKr+poI:Vo':?;p", 8, "w}", uRLStreamHandler0);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Namespace namespace0 = new Namespace(" 3ID]@7!z'6b$", "S9W5CvxY$u{");
      QName qName0 = QName.get(" 3ID]@7!z'6b$", namespace0, " : ");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeAttribute datatypeAttribute0 = new DatatypeAttribute(qName0, xSDatatype0);
      DOMDocument dOMDocument0 = new DOMDocument();
      XSDatatype xSDatatype1 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeAttribute datatypeAttribute1 = new DatatypeAttribute(qName0, xSDatatype1);
      XSDatatype xSDatatype2 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype2).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute2 = new DatatypeAttribute(qName0, xSDatatype2, "Bk@]ag/b");
      datatypeAttribute2.getParent();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        sAXReader1.setProperty((String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.239095456210609
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Namespace namespace0 = new Namespace(".Oz^ZNz", ".Oz^ZNz");
      Namespace namespace1 = Namespace.XML_NAMESPACE;
      QName qName0 = new QName(".Oz^ZNz", namespace0, ".Oz^ZNz");
      DOMNamespace dOMNamespace0 = new DOMNamespace(".Oz^ZNz", ".Oz^ZNz");
      QName qName1 = QName.get(".Oz^ZNz", (Namespace) dOMNamespace0, ".Oz^ZNz");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype0).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute0 = new DatatypeAttribute(qName1, xSDatatype0, ".Oz^ZNz");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      try { 
        sAXReader0.read("0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@28fa6924 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@28fa6924 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      sAXReader0.setXMLReader(xMLFilterImpl2);
      xMLFilterImpl0.unparsedEntityDecl("http://xml.org/sax/features/namespace-prefixes", "http://xml.org/sax/features/namespace-prefixes", "http://xml.org/sax/features/namespace-prefixes", "+]}FfRVE");
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      try { 
        sAXReader0.setProperty("http://xml.org/sax/features/namespace-prefixes", xMLFilterImpl3);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: http://xml.org/sax/features/namespace-prefixes
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.7636585731599053
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader0.setEncoding("");
      sAXReader0.setDocumentFactory(documentFactory0);
      sAXReader0.setStringInternEnabled(true);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.setDocumentFactory(documentFactory0);
      DocumentFactory documentFactory1 = sAXReader0.getDocumentFactory();
      sAXReader0.setStripWhitespaceText(true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.resetHandlers();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.configureReader(xMLReader0, sAXContentHandler0);
      sAXReader0.setMergeAdjacentText(true);
      sAXReader0.setDocumentFactory(documentFactory1);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("j,Cm4Ax,zQ4");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "Error on line ");
      MockFile mockFile0 = new MockFile("", "");
      String string0 = "org.dom4j.tree.FlyweightProcessingInstruction";
      File file0 = MockFile.createTempFile("Error on line ", "org.dom4j.tree.FlyweightProcessingInstruction", (File) mockFile0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"\". Nested exception: Invalid encoding name \"\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler((ElementModifier) null);
      String[] stringArray0 = new String[19];
      stringArray0[2] = "?#u<{FF^EN`";
      stringArray0[3] = "//Error on line 0org.dom4j.tree.FlyweightPrecessingInstruction";
      stringArray0[5] = "";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0, 2269);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler1 = new SAXModifyElementHandler(elementModifier0);
      sAXModifyElementHandler1.onStart(pruningElementStack0);
      ElementStack elementStack0 = new ElementStack(13);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, sAXModifyElementHandler1);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultHandler0.resolveEntity(stringArray0[0], "");
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, true);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertNotNull(documentFactory0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.136920820622443
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.Namespace");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/string-interning", "http://xml.org/sax/features/string-interning");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/{:f}PUW%Os0W7@30F=:ITuvJ@sJ-Of[$e.r4", (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "http://xml.org/sax/features/string-interning");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SAXReader sAXReader0 = new SAXReader(false);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler((ElementModifier) null);
      ElementStack elementStack0 = new ElementStack();
      elementStack0.lastElementIndex = (-101);
      elementStack0.getPath();
      sAXModifyElementHandler0.onStart(elementStack0);
      sAXModifyElementHandler0.onStart(elementStack0);
      String[] stringArray0 = new String[15];
      stringArray0[2] = "~uF{FEN`";
      stringArray0[3] = "";
      stringArray0[5] = "";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0, 2269);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler1 = new SAXModifyElementHandler(elementModifier0);
      sAXModifyElementHandler1.onStart(pruningElementStack0);
      ElementStack elementStack1 = new ElementStack(2269);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, sAXModifyElementHandler1);
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DocumentFactory documentFactory1 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory1, false);
      String string0 = "org.dom4j.io.SAXReader";
      documentFactory0.createProcessingInstruction("org.dom4j.io.SAXReader", "org.dom4j.io.SAXReader");
      sAXReader0.isIncludeInternalDTDDeclarations();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.278600407264681
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Namespace namespace0 = new Namespace(" 3ID]@7!z'6b$", "S9W5CvxY$u{");
      QName qName0 = QName.get(" 3ID]@7!z'6b$", namespace0, " : ");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype0).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute0 = new DatatypeAttribute(qName0, xSDatatype0, "xM,Hx)XM|.0>iG(rfuN");
      XSDatatype xSDatatype1 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeAttribute datatypeAttribute1 = new DatatypeAttribute(qName0, xSDatatype1);
      datatypeAttribute0.getParent();
      DOMDocument dOMDocument0 = new DOMDocument();
      XSDatatype xSDatatype2 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeAttribute datatypeAttribute2 = new DatatypeAttribute(qName0, xSDatatype2);
      XSDatatype xSDatatype3 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      InputSource inputSource0 = new InputSource(sequenceInputStream0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-72);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(dataInputStream0);
      pushbackInputStream0.read();
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream0);
      DataInputStream dataInputStream4 = new DataInputStream(dataInputStream3);
      dataInputStream3.readByte();
      pushbackInputStream1.read(byteArray0);
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.read((InputStream) dataInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setValidation(false);
      sAXReader0.setValidation(false);
      documentFactory0.createProcessingInstruction("", "org.dom4j.io.SAXReader");
      sAXReader0.isIncludeInternalDTDDeclarations();
      XMLReader xMLReader0 = null;
      DefaultHandler defaultHandler0 = new DefaultHandler();
      documentFactory0.createCDATA("org.dom4j.io.SAXReader");
      boolean boolean0 = true;
      boolean boolean1 = false;
      try { 
        sAXReader0.setFeature("Oe7()sb>%V09\"7w//W", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'Oe7()sb>%V09\"7w//W' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.3895530195104047
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("//Error on line 0org.dom4j.tree.FlyweightPrecessingInstruction");
      sAXReader_SAXEntityResolver0.resolveEntity(" 3ID]@7!z'6b$", "");
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler((ElementModifier) null);
      String[] stringArray0 = new String[19];
      ElementStack elementStack0 = new ElementStack();
      sAXModifyElementHandler0.onStart(elementStack0);
      stringArray0[0] = "";
      stringArray0[1] = "?#u<{FF^EN`";
      stringArray0[3] = "//Error on line 0org.dom4j.tree.FlyweightPrecessingInstruction";
      stringArray0[4] = "//Error on line 0org.dom4j.tree.FlyweightPrecessingInstruction";
      stringArray0[5] = "";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0, 2305);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      ElementModifier elementModifier1 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler1 = new SAXModifyElementHandler(elementModifier1);
      sAXModifyElementHandler1.onStart(pruningElementStack0);
      ElementStack elementStack1 = new ElementStack(13);
      sAXModifyElementHandler0.onStart(pruningElementStack1);
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, sAXModifyElementHandler1);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      QName qName0 = defaultDocumentFactory0.createQName("", (Namespace) null);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createAttribute((Element) null, qName0, "//Error on line 0org.dom4j.tree.FlyweightPrecessingInstruction");
      BeanElement beanElement0 = new BeanElement(qName0);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      StringReader stringReader0 = new StringReader("//tmp/WglRd0http:/xml.org/sax/prperties/lexical-handler");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createDocument(">x-h}KI.A=}ma~");
      try { 
        sAXReader0.read("/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:/// : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.4401405002515815
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      String string0 = "K.\\I gm)e\\V)Wz";
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.removeHandler("K.I gm)eV)Wz");
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      sAXReader0.getDispatchHandler();
      StringReader stringReader0 = new StringReader("K.I gm)eV)Wz");
      PipedInputStream pipedInputStream0 = new PipedInputStream(55);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "K.I gm)eV)Wz");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("org.dom4j.dom.DOMlement", "org.dom4j.dom.DOMlement");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      DocumentFactory documentFactory1 = sAXReader0.getDocumentFactory();
      assertSame(documentFactory1, documentFactory0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3872942996011255
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      try { 
        sAXReader0.read("//tmp/{v:f}PUW%Os0W7@30{v:f}PUW%Os0W7@3");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //tmp/{v:f}PUW%Os0W7@30{v:f}PUW%Os0W7@3 Nested exception: no protocol: //tmp/{v:f}PUW%Os0W7@30{v:f}PUW%Os0W7@3
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.031298644335524
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("//Error on line 0org.dom4j.tree.FlyweightProcessingInstruction");
      sAXReader_SAXEntityResolver0.resolveEntity(" 3ID]@7!z'6b$", "");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver2 = new SAXReader.SAXEntityResolver(" 3ID]@7!z'6b$");
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "?#u<{FF^EN`";
      stringArray0[2] = "";
      stringArray0[3] = "//Error on line 0org.dom4j.tree.FlyweightProcessingInstruction";
      stringArray0[4] = "//Error on line 0org.dom4j.tree.FlyweightProcessingInstruction";
      stringArray0[5] = "";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0, 2305);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      ElementModifier elementModifier1 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler1 = new SAXModifyElementHandler(elementModifier1);
      sAXModifyElementHandler1.onStart(pruningElementStack0);
      ElementStack elementStack0 = new ElementStack(13);
      sAXModifyElementHandler0.onStart(pruningElementStack1);
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, sAXModifyElementHandler1);
      elementStack0.getDispatchHandler();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.resetHandlers();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(" 3ID]@7!z'6b$");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Namespace namespace0 = new Namespace(" 3ID]@7!z'6b$", ".Oz^ZNz");
      Namespace namespace1 = Namespace.XML_NAMESPACE;
      String string0 = "4H=3PmCz~}zn";
      QName qName0 = new QName("4H=3PmCz~}zn", namespace0, " 3ID]@7!z'6b$");
      DOMNamespace dOMNamespace0 = new DOMNamespace(".Oz^ZNz", " 3ID]@7!z'6b$");
      QName qName1 = QName.get("4H=3PmCz~}zn", (Namespace) dOMNamespace0, ".Oz^ZNz");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype0).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute0 = new DatatypeAttribute(qName1, xSDatatype0, "4H=3PmCz~}zn");
      XSDatatype xSDatatype1 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype1).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute1 = new DatatypeAttribute(qName1, xSDatatype1, (String) null);
      XSDatatype xSDatatype2 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xSDatatype2).convertToLexicalValue(any() , any(com.sun.msv.datatype.SerializationContext.class));
      DatatypeAttribute datatypeAttribute2 = new DatatypeAttribute(qName0, xSDatatype2);
      datatypeAttribute2.getParent();
      datatypeAttribute2.setData(qName0);
      DOMDocument dOMDocument0 = new DOMDocument();
      datatypeAttribute2.getParent();
      DOMAttribute dOMAttribute0 = new DOMAttribute((Element) null, qName1, " 3ID]@7!z'6b$");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader0.setXMLReaderClassName("66u*uQ7]OnQXnl%");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class 66u*uQ7]OnQXnl% not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.createXMLReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endDocument();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "//tmp/Error on line 0namespace::*[name()='']";
      sAXReader0.setXMLReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.getEntityResolver();
      SAXReader sAXReader1 = new SAXReader();
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      String string1 = "]5E";
      xMLFilterImpl0.endElement("This Entity is read-only. It cannot be modified", "//tmp/Error on line 0namespace::*[name()='']", "Ld*)Yopwiq3");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      xMLFilterImpl0.setDocumentLocator(locator2Impl0);
      try { 
        sAXReader0.setXMLReaderClassName("]5E");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class ]5E not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.044280346594219
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader0.setEncoding("");
      sAXReader0.setDocumentFactory(documentFactory0);
      sAXReader0.setStringInternEnabled(true);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.setDocumentFactory(documentFactory0);
      sAXReader0.getDocumentFactory();
      sAXReader0.setStripWhitespaceText(true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(xMLReader0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.configureReader(xMLReader0, sAXContentHandler0);
      documentFactory0.createCDATA("");
      boolean boolean0 = false;
      try { 
        sAXReader0.setFeature(">S", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '>S' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.376939527184209
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      String string0 = "";
      sAXReader0.setDocumentFactory(documentFactory0);
      sAXReader0.setStringInternEnabled(true);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.setDocumentFactory(documentFactory0);
      DocumentFactory documentFactory1 = sAXReader0.getDocumentFactory();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      sAXReader0.resetHandlers();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.configureReader(xMLReader0, sAXContentHandler0);
      sAXReader0.setMergeAdjacentText(true);
      SAXReader sAXReader1 = new SAXReader(xMLReader0, true);
      sAXReader1.isIncludeInternalDTDDeclarations();
      sAXReader1.isValidating();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      // Undeclared exception!
      try { 
        documentFactory1.createXPathFilter("U!Y:;TPO^GZ:b^>-9'", (VariableContext) simpleVariableContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid XPath expression: U!Y:;TPO^GZ:b^>-9' Unexpected '!Y:;TPO^GZ:b^>-9''
         //
         verifyException("org.dom4j.xpath.DefaultXPath", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Namespace namespace0 = new Namespace(" 3ID]@7!z'6b$", ".Oz^ZNz");
      Namespace namespace1 = Namespace.XML_NAMESPACE;
      QName qName0 = new QName("4H=3PmCz~}zn", namespace0, " 3ID]@7!z'6b$");
      DOMNamespace dOMNamespace0 = new DOMNamespace(".Oz^ZNz", " 3ID]@7!z'6b$");
      QName qName1 = QName.get("4H=3PmCz~}zn", (Namespace) dOMNamespace0, ".Oz^ZNz");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype0).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute0 = new DatatypeAttribute(qName1, xSDatatype0, "4H=3PmCz~}zn");
      XSDatatype xSDatatype1 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype1).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute1 = new DatatypeAttribute(qName1, xSDatatype1, (String) null);
      XSDatatype xSDatatype2 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xSDatatype2).convertToLexicalValue(any() , any(com.sun.msv.datatype.SerializationContext.class));
      DatatypeAttribute datatypeAttribute2 = new DatatypeAttribute(qName0, xSDatatype2);
      datatypeAttribute2.getParent();
      namespace0.getName();
      datatypeAttribute2.setData(qName0);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      MockFile.createTempFile("oOc}?K:", (String) null);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getEncoding();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5010693989799213
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      defaultDocumentFactory0.createProcessingInstruction("org.dom4j.io.SAXReader", "org.dom4j.io.SAXReader");
      sAXReader0.isIncludeInternalDTDDeclarations();
      String string0 = "Oe7()sb>%V09\"7w//W";
      XMLReader xMLReader0 = null;
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.processingInstruction("a", "a");
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      defaultDocumentFactory0.createCDATA("Oe7()sb>%V09\"7w//W");
      sAXReader0.setMergeAdjacentText(false);
      try { 
        sAXReader0.setFeature(">S", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '>S' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("H^tyKr+poI:Vo':?;p/H^tyKr+poI:Vo':?;p0H^tyKr+poI:Vo':?;p");
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)50;
      byteArray0[4] = (byte)26;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "H^tyKr+poI:Vo':?;p");
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      MockFile mockFile0 = new MockFile((File) null, "H^tyKr+poI:Vo':?;p");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("H^tyKr+poI:Vo':?;p/H^tyKr+poI:Vo':?;p0H^tyKr+poI:Vo':?;p");
      byte[] byteArray1 = new byte[10];
      byteArray1[0] = (byte)41;
      byteArray0[0] = (byte)77;
      byteArray1[2] = (byte)0;
      byteArray0[5] = (byte)50;
      byteArray1[6] = (byte) (-46);
      mockFile0.toPath();
      byteArray1[7] = (byte)30;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      File file0 = MockFile.createTempFile("H^tyKr+poI:Vo':?;p", "H^tyKr+poI:Vo':?;p", (File) mockFile0);
      file0.setWritable(true);
      file0.setWritable(false);
      MockFile mockFile1 = new MockFile(file0, "H^tyKr+poI:Vo':?;p");
      file0.setReadable(true);
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.2487663399462696
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler((ElementModifier) null);
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getPath();
      sAXModifyElementHandler0.onStart(elementStack0);
      sAXModifyElementHandler0.onStart(elementStack0);
      String[] stringArray0 = new String[19];
      stringArray0[2] = "~uF{F^EN`";
      stringArray0[3] = "";
      stringArray0[5] = "";
      sAXReader_SAXEntityResolver0.resolveEntity("The argument to the name function must be a node-set", "M.I).oZb,W26");
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0, 2269);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler1 = new SAXModifyElementHandler(elementModifier0);
      sAXModifyElementHandler1.onStart(pruningElementStack0);
      ElementStack elementStack1 = new ElementStack(2269);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, sAXModifyElementHandler1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.resetHandlers();
      sAXReader0.getDispatchHandler();
      String string0 = "Mxd_A*VgbF-BCsm6";
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler((ElementModifier) null);
      int int0 = 62;
      PruningElementStack pruningElementStack0 = null;
      try {
        pruningElementStack0 = new PruningElementStack((String[]) null, sAXModifyElementHandler0, 2063);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.PruningElementStack", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[7] = (byte)48;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader(false);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      ElementStack elementStack0 = new ElementStack(0);
      dispatchHandler0.removeHandler("~");
      elementStack0.getDispatchHandler();
      dispatchHandler0.addHandler("~", (ElementHandler) null);
      dispatchHandler0.removeHandler("yED~vl_=Q+Gdv");
      sAXReader0.setDefaultHandler((ElementHandler) null);
      sAXReader0.getEncoding();
      sAXReader0.getDispatchHandler();
      sAXReader0.createXMLReader();
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      String string0 = "BvJ{;/@p&:7";
      sAXReader0.removeHandler("o#Xi6Y@Zg}Sm/H7");
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      int int0 = (-580);
      // Undeclared exception!
      try { 
        namespaceStack0.getNamespace((-580));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.349742765197841
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("H^tyKr+poI:Vo':?;p/H^tyKr+poI:Vo':?;p0H^tyKr+poI:Vo':?;p");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)26;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "H^tyKr+poI:Vo':?;p");
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      MockFile mockFile0 = new MockFile((File) null, "H^tyKr+poI:Vo':?;p");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("H^tyKr+poI:Vo':?;p/H^tyKr+poI:Vo':?;p0H^tyKr+poI:Vo':?;p");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte)77;
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader0.setDocumentFactory(documentFactory0);
      byteArray1[2] = (byte)0;
      byteArray1[4] = (byte)19;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-46);
      mockFile0.toPath();
      byteArray1[7] = (byte)30;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      File file0 = MockFile.createTempFile("H^tyKr+poI:Vo':?;p", "H^tyKr+poI:Vo':?;p", (File) mockFile0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/H^tyKr+poI:Vo':?;p/H^tyKr+poI:Vo':?;p0H^tyKr+poI:Vo':?;p : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("7i%g#_A)");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("7i%g#_A)", " : ");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.unparsedEntityDecl("=?. @r]sQ_S,2<y\u0006", "=?. @r]sQ_S,2<y\u0006", "=?. @r]sQ_S,2<y\u0006", "org.dom4j.InvalidXPathException");
      xMLFilterImpl0.setDTDHandler(handlerBase0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.setIgnoreComments(false);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("H^tyKr+poI:Vo':?;p/H^tyKr+poI:Vo':?;p0H^tyKr+poI:Vo':?;p");
      byte[] byteArray0 = new byte[16];
      byteArray0[1] = (byte)50;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "H^tyKr+poI:Vo':?;p");
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("H^tyKr+poI:Vo':?;p/H^tyKr+poI:Vo':?;p0H^tyKr+poI:Vo':?;p");
      byte[] byteArray1 = new byte[10];
      byteArray1[0] = (byte)41;
      byteArray1[2] = (byte)0;
      byteArray1[4] = (byte)50;
      byteArray1[6] = (byte) (-46);
      byteArray1[7] = (byte)30;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertNotNull(xMLReader0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.345240704852448
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      xMLReaderAdapter0.startDocument();
      parserAdapter0.setContentHandler(xMLReaderAdapter0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.configureReader(parserAdapter0, sAXContentHandler0);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.setEncoding("B~h9Qk8_;.");
      sAXReader0.isValidating();
      StringReader stringReader0 = new StringReader("VtR7Lq/j@R");
      sAXReader0.createContentHandler(xMLReader0);
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = '3';
      stringReader0.read(charArray0);
      try { 
        sAXReader0.read((Reader) stringReader0, "VtR7Lq/j@R");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/VtR7Lq/j@R : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.418521658670515
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 92;
      SAXReader sAXReader0 = new SAXReader();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.addHandler("x>K|1ubR{:e|", pruningDispatchHandler0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "/&mp/}zU*1tEa");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Namespace namespace0 = new Namespace(" 3ID]@7!z'6b$", ".Oz^ZNz");
      Namespace namespace1 = Namespace.XML_NAMESPACE;
      QName qName0 = new QName("4H=3PmCz~}zn", namespace0, " 3ID]@7!z'6b$");
      DOMNamespace dOMNamespace0 = new DOMNamespace(".Oz^ZNz", " 3ID]@7!z'6b$");
      QName qName1 = QName.get("4H=3PmCz~}zn", (Namespace) dOMNamespace0, ".Oz^ZNz");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype0).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute0 = new DatatypeAttribute(qName1, xSDatatype0, "4H=3PmCz~}zn");
      XSDatatype xSDatatype1 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype1).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute1 = new DatatypeAttribute(qName1, xSDatatype1, (String) null);
      XSDatatype xSDatatype2 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(xSDatatype2).convertToLexicalValue(any() , any(com.sun.msv.datatype.SerializationContext.class));
      DatatypeAttribute datatypeAttribute2 = new DatatypeAttribute(qName0, xSDatatype2);
      datatypeAttribute2.getParent();
      namespace0.getName();
      datatypeAttribute2.setData(qName0);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      MockFile.createTempFile("oOc}?K:", (String) null);
      SAXReader sAXReader1 = new SAXReader();
      Object object0 = new Object();
      try { 
        sAXReader1.setProperty("u#Qa]y]%k&,", object0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'u#Qa]y]%k&,' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "OgrmJp/rdz}";
      stringArray0[1] = ".Oz^ZNz";
      stringArray0[2] = ".Oz^ZNz";
      stringArray0[3] = ".Oz^ZNz";
      stringArray0[4] = ".Oz^ZNz";
      stringArray0[5] = ".Oz^ZNz";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, 3801);
      pruningElementStack0.getPath();
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, sAXModifyElementHandler0, 5851);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ElementModifier elementModifier1 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler1 = new SAXModifyElementHandler(elementModifier1);
      ElementStack elementStack0 = new ElementStack(3801);
      sAXModifyElementHandler0.onStart(elementStack0);
      ElementStack elementStack1 = new ElementStack(13);
      sAXModifyElementHandler0.onStart(elementStack1);
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, sAXModifyElementHandler1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader(".Oz^ZNz", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class .Oz^ZNz not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte) (-79);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream0);
      bufferedInputStream0.markSupported();
      bufferedInputStream1.mark((byte) (-79));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, pushbackInputStream0);
      sequenceInputStream0.skip(0L);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      dataInputStream0.readChar();
      dataInputStream0.readBoolean();
      DataInputStream dataInputStream1 = new DataInputStream(pushbackInputStream1);
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultDocument defaultDocument0 = new DefaultDocument();
      StringReader stringReader0 = new StringReader("org.dom4j.tree.DefaultNamespace");
      try { 
        sAXReader0.read((Reader) stringReader0, "org.dom4j.tree.DefaultNamespace");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/org.dom4j.tree.DefaultNamespace : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      QName qName0 = QName.get("http://xml.org/sax/features/use-locator2", "//tmp/Error on line 0namespace::*[name()='']");
      BeanElement beanElement0 = new BeanElement(qName0, sAXReader0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      BeanAttribute beanAttribute0 = beanAttributeList0.attribute(0);
      QName qName1 = beanAttribute0.getQName();
      defaultDocumentFactory0.createElement(qName1);
      DefaultDocument defaultDocument0 = new DefaultDocument("ac ~_uQ*s|(z./jVZ|");
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertNotNull(dispatchHandler0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Namespace namespace0 = new Namespace(" 3ID]@7!z'6b$", ".Oz^ZNz");
      Namespace namespace1 = Namespace.XML_NAMESPACE;
      QName qName0 = new QName("4H=3PmCz~}zn", namespace0, " 3ID]@7!z'6b$");
      DOMNamespace dOMNamespace0 = new DOMNamespace(".Oz^ZNz", " 3ID]@7!z'6b$");
      QName qName1 = QName.get(".Oz^ZNz", "4H=3PmCz~}zn");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      qName0.getQualifiedName();
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype0).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute0 = new DatatypeAttribute(qName1, xSDatatype0, "4H=3PmCz~}zn");
      XSDatatype xSDatatype1 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype1).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute1 = new DatatypeAttribute(qName1, xSDatatype1, (String) null);
      XSDatatype xSDatatype2 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeAttribute datatypeAttribute2 = new DatatypeAttribute(qName0, xSDatatype2);
      datatypeAttribute2.getParent();
      DOMDocument dOMDocument0 = new DOMDocument();
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.resolveEntity("`E~< !USmn/z+8!", " 3ID]@7!z'6b$");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Namespace namespace0 = new Namespace(".Oz^ZNz", ".Oz^ZNz");
          DOMElement dOMElement0 = new DOMElement(".Oz^ZNz", namespace0);
          DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
          DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
          namespace0.setDocument(dOMDocument0);
          Namespace namespace1 = Namespace.XML_NAMESPACE;
          QName qName0 = new QName(".Oz^ZNz", namespace0, ".Oz^ZNz");
          DOMNamespace dOMNamespace0 = new DOMNamespace(".Oz^ZNz", ".Oz^ZNz");
          Namespace namespace2 = new Namespace("org.dom4j.jaxb.JAXBReader$PruningElementHandler", "org.dom4j.jaxb.JAXBReader$PruningElementHandler");
          LocatorImpl locatorImpl0 = new LocatorImpl();
          Locator2Impl locator2Impl0 = new Locator2Impl();
          Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
          Locator2Impl locator2Impl2 = new Locator2Impl();
          LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl2);
          SAXParseException sAXParseException0 = new SAXParseException(".Oz^ZNz", locatorImpl0);
          SAXReader sAXReader0 = new SAXReader(true);
          XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
          DefaultDocumentFactory.getInstance();
          DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
          SAXReader sAXReader1 = new SAXReader(documentFactory0);
          Object object0 = new Object();
          Object object1 = new Object();
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor359.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor359.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("H^tyKr+poI:Vo':?;p/H^tyKr+poI:Vo':?;p0H^tyKr+poI:Vo':?;p");
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)26;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "H^tyKr+poI:Vo':?;p");
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      MockFile mockFile0 = new MockFile((File) null, "H^tyKr+poI:Vo':?;p");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("H^tyKr+poI:Vo':?;p/H^tyKr+poI:Vo':?;p0H^tyKr+poI:Vo':?;p");
      byte[] byteArray1 = new byte[10];
      byteArray1[0] = (byte)41;
      byteArray0[0] = (byte)77;
      byteArray1[2] = (byte)0;
      byteArray1[4] = (byte)50;
      mockFile0.createNewFile();
      byteArray1[6] = (byte) (-46);
      mockFile0.toPath();
      byteArray1[7] = (byte)30;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      File file0 = MockFile.createTempFile("H^tyKr+poI:Vo':?;p", "H^tyKr+poI:Vo':?;p", (File) mockFile0);
      MockFile.createTempFile("H^tyKr+poI:Vo':?;p", "H^tyKr+poI:Vo':?;p", (File) null);
      file0.setReadable(true);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/H^tyKr+poI:Vo':?;p/H^tyKr+poI:Vo':?;p0H^tyKr+poI:Vo':?;p : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.366660627207849
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      String string0 = "WglRd";
      String string1 = "http://xml.org/sax/properties/lexical-handler";
      File file0 = MockFile.createTempFile("WglRd", "http://xml.org/sax/properties/lexical-handler");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      String string0 = "WglRd";
      sAXReader0.createXMLReader();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      try { 
        sAXReader0.setProperty("WglRd", sequenceInputStream1);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'WglRd' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = " 3ID]@7!z'6b$";
      Namespace namespace0 = new Namespace(" 3ID]@7!z'6b$", ".Oz^ZNz");
      DOMNamespace dOMNamespace0 = new DOMNamespace(" 3ID]@7!z'6b$", (String) null);
      QName qName0 = new QName("//tmp/~uF{F^EN`0/tmp/{:f}PUW%Os0W7@30F=:ITuvJ@sJ-Of[e.r4", dOMNamespace0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype0).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute0 = new DatatypeAttribute(qName0, xSDatatype0, "");
      XSDatatype xSDatatype1 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype1).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute1 = new DatatypeAttribute(qName0, xSDatatype1, ".Oz^ZNz");
      XSDatatype xSDatatype2 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeAttribute datatypeAttribute2 = new DatatypeAttribute(qName0, xSDatatype2);
      XSDatatype xSDatatype3 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype3).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute3 = new DatatypeAttribute(qName0, xSDatatype3, "any\"LZ[|GoBF_dbh");
      datatypeAttribute3.getParent();
      namespace0.getName();
      XSDatatype xSDatatype4 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype4).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      doReturn((String) null).when(xSDatatype4).convertToLexicalValue(any() , any(com.sun.msv.datatype.SerializationContext.class));
      DatatypeAttribute datatypeAttribute4 = new DatatypeAttribute(qName0, xSDatatype4, "");
      Object object0 = new Object();
      datatypeAttribute4.setData(object0);
      DOMDocument dOMDocument0 = new DOMDocument();
      datatypeAttribute0.getParent();
      DOMAttribute dOMAttribute0 = new DOMAttribute((Element) null, qName0, " of document ");
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader(" 3ID]@7!z'6b$");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  3ID]@7!z'6b$ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.4419512874706975
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      xMLReaderAdapter0.startDocument();
      parserAdapter0.setContentHandler(xMLReaderAdapter0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.configureReader(parserAdapter0, sAXContentHandler0);
      sAXReader0.setEncoding("B~h9Qk8_;.");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.removeHandler("VtR7Lq/j@R");
      dispatchHandler0.addHandler("B~h9Qk8_;.", (ElementHandler) null);
      sAXReader0.addHandler("B~h9Qk8_;.", dispatchHandler0);
      StringReader stringReader0 = new StringReader("#-S");
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      stringReader0.read(charArray0);
      try { 
        sAXReader0.read((Reader) stringReader0, "#-S");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@34862f98 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("H^tyKr+poI:Vo':?;p/H^tyKr+poI:Vo':?;p0H^tyKr+poI:Vo':?;p");
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)50;
      byteArray0[4] = (byte)51;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "H^tyKr+poI:Vo':?;p");
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      MockFile mockFile0 = new MockFile((File) null, "H^tyKr+poI:Vo':?;p");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("H^tyKr+poI:Vo':?;p/H^tyKr+poI:Vo':?;p0H^tyKr+poI:Vo':?;p");
      byte[] byteArray1 = new byte[10];
      byteArray1[0] = (byte)41;
      byteArray0[12] = (byte)77;
      byteArray1[2] = (byte)0;
      byteArray1[4] = (byte)50;
      mockFile0.createNewFile();
      byteArray1[6] = (byte) (-46);
      mockFile0.toPath();
      byteArray1[7] = (byte)30;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      File file0 = MockFile.createTempFile("H^tyKr+poI:Vo':?;p", "H^tyKr+poI:Vo':?;p", (File) mockFile0);
      file0.setWritable(false);
      MockFile.createTempFile("H^tyKr+poI:Vo':?;p", "H^tyKr+poI:Vo':?;p", (File) null);
      file0.setReadable(true);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/H^tyKr+poI:Vo':?;p/H^tyKr+poI:Vo':?;p0H^tyKr+poI:Vo':?;p : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("H^tyKr+poI:Vo':?;p/H^tyKr+poI:Vo':?;p0H^tyKr+poI:Vo':?;p");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)26;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "H^tyKr+poI:Vo':?;p");
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      MockFile mockFile0 = new MockFile((File) null, "H^tyKr+poI:Vo':?;p");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("H^tyKr+poI:Vo':?;p/H^tyKr+poI:Vo':?;p0H^tyKr+poI:Vo':?;p");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)29;
      byteArray0[0] = (byte)77;
      byteArray1[2] = (byte)0;
      byteArray1[4] = (byte)19;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-46);
      mockFile0.toPath();
      byteArray1[7] = (byte)30;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      File file0 = MockFile.createTempFile("H^tyKr+poI:Vo':?;p", "H^tyKr+poI:Vo':?;p", (File) mockFile0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/H^tyKr+poI:Vo':?;p/H^tyKr+poI:Vo':?;p0H^tyKr+poI:Vo':?;p : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.239095456210609
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getContentHandler();
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Namespace namespace0 = new Namespace(" 3ID]@7!z'6b$", ".Oz^ZNz");
      Namespace namespace1 = Namespace.XML_NAMESPACE;
      QName qName0 = new QName("4H=3PmCz~}zn", namespace0, " 3ID]@7!z'6b$");
      DOMNamespace dOMNamespace0 = new DOMNamespace(".Oz^ZNz", " 3ID]@7!z'6b$");
      QName qName1 = QName.get("4H=3PmCz~}zn", (Namespace) dOMNamespace0, ".Oz^ZNz");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype0).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute0 = new DatatypeAttribute((QName) null, xSDatatype0, " 3ID]@7!z'6b$");
      XSDatatype xSDatatype1 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype1).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute1 = new DatatypeAttribute(qName1, xSDatatype1, (String) null);
      XSDatatype xSDatatype2 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeAttribute datatypeAttribute2 = new DatatypeAttribute(qName0, xSDatatype2);
      datatypeAttribute2.getParent();
      XSDatatype xSDatatype3 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(xSDatatype3).createJavaObject(anyString() , any(org.relaxng.datatype.ValidationContext.class));
      DatatypeAttribute datatypeAttribute3 = new DatatypeAttribute(qName0, xSDatatype3, " 3ID]@7!z'6b$");
      datatypeAttribute3.getParent();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      File file0 = MockFile.createTempFile(" 3ID]@7!z'6b$", ".BdvCTw*yxS9l+&");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SAXReader sAXReader0 = new SAXReader(true);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      try { 
        sAXReader0.setFeature("org.dom4j.QName.singleton.strategy", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'org.dom4j.QName.singleton.strategy' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)25;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)85;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFile mockFile0 = new MockFile(".Oz^ZNz", "%7lB");
      MockFile mockFile1 = new MockFile("%7lB", "%7lB");
      MockFile.createTempFile("SjsGM!@3j", "%7lB", (File) mockFile0);
      mockFile0.setReadable(true);
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read((File) mockFile1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler((ElementModifier) null);
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getPath();
      sAXModifyElementHandler0.onStart(elementStack0);
      String[] stringArray0 = new String[19];
      stringArray0[2] = "?#u<{FF^EN`";
      stringArray0[3] = "";
      stringArray0[5] = "";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0, 2269);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler1 = new SAXModifyElementHandler(elementModifier0);
      sAXModifyElementHandler1.onStart(pruningElementStack0);
      pruningElementStack0.reallocate(2269);
      ElementStack elementStack1 = new ElementStack(2269);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, sAXModifyElementHandler1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      DefaultDocument defaultDocument0 = new DefaultDocument("The result of the XPath expression is not a Node. It was: ");
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5280883009539779
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler((ElementModifier) null);
      String[] stringArray0 = new String[19];
      stringArray0[2] = "?#u<{FF^EN`";
      stringArray0[3] = "";
      stringArray0[5] = "";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0, 2269);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler1 = new SAXModifyElementHandler(elementModifier0);
      sAXModifyElementHandler1.onStart(pruningElementStack0);
      ElementStack elementStack0 = new ElementStack(13);
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      StringReader stringReader0 = new StringReader("");
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, sAXModifyElementHandler1);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      sAXReader_SAXEntityResolver0.resolveEntity("Mu/)+!`wmv?1q", "//tmp/{:ft}PUW%Os0J7@30F=:ITuvJ@sJ-Of[e.r4");
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      SAXParseException sAXParseException0 = new SAXParseException("B@aRcOhg;0R9fY<Mhe", locator2Impl0);
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setEncoding("B@aRcOhg;0R9fY<Mhe");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-79);
      byte byte0 = (byte)29;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)111;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      bufferedInputStream0.markSupported();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, bufferedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "org.dom4j.bean.Beanlement");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/org.dom4j.bean.Beanlement : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl(attributesImpl0);
      AttributesImpl attributesImpl1 = new AttributesImpl(attributes2Impl0);
      xMLFilterImpl0.startElement("http://xml.org/sax/features/string-interning", "http://xml.org/sax/features/string-interning", "http://xml.org/sax/features/string-interning", attributesImpl1);
      sAXReader0.createDefaultEntityResolver("ends-with() requires two arguments.");
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "/&p/}zU*1tEa");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
