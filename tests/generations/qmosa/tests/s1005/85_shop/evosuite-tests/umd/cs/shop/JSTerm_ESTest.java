/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 16:34:42 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "(<*N";
      StringReader stringReader0 = new StringReader("(<*N");
      String string1 = "\"C!f`|}7tN6cDv!h}SJ";
      StringReader stringReader1 = new StringReader("\"C!f`|}7tN6cDv!h}SJ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.49838798577742
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yt}8J");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      stringReader0.skip(1L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSSubstitution0.instance(jSTerm0);
      jSTerm0.makeVariable();
      jSSubstitution0.stream();
      streamTokenizer0.parseNumbers();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.containsAll(jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.standarizerSubs();
      jSSubstitution2.assignFailure();
      Integer integer0 = new Integer((-1));
      jSSubstitution3.add((Object) integer0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm1.add((Object) jSSubstitution5);
      jSTerm1.toStr();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.matches(jSTerm3, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm3.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add((Object) "qgON");
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.removeAll(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) jSSubstitution2);
      jSSubstitution2.removeAll(jSSubstitution0);
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution0.trimToSize();
      jSSubstitution0.assignFailure();
      jSSubstitution1.add((Object) null);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Integer integer0 = new Integer((-2549));
      jSSubstitution1.remove((Object) integer0);
      Integer integer1 = new Integer((-1783));
      jSTerm0.add((Object) integer1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5104605475108208
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(*)C");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.addAll((Collection) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      System.setCurrentTimeMillis(0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution3.add(object0);
      jSSubstitution0.removeAll(jSSubstitution2);
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution4 = jSSubstitution1.standarizerSubs();
      jSSubstitution2.assignFailure();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution4.add((Object) jSTerm1);
      jSTerm0.add((Object) "Operator name expected");
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7572446863790416
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wh<cG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      jSTerm0.clonePF();
      int int0 = 4140;
      int int1 = (-1);
      streamTokenizer0.whitespaceChars(4140, (-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      JSJshopVars.leftPar = 4140;
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.setSize(4140);
      jSSubstitution4.clone();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.650846694083571
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yt}8J");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSSubstitution0.instance(jSTerm0);
      jSTerm0.makeVariable();
      jSSubstitution0.stream();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.retainAll(jSTerm2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7959209196195016
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wh<cG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      jSTerm0.clonePF();
      streamTokenizer0.whitespaceChars(4140, (-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      JSJshopVars.leftPar = 4140;
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.setSize(4140);
      jSTerm0.firstElement();
      jSSubstitution1.add((Object) "%%%");
      jSTerm2.toStr();
      jSSubstitution4.clone();
      jSTerm1.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm1.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.ensureCapacity(2729);
      jSTerm0.makeFunction();
      jSTerm0.setSize(2729);
      JSJshopVars.rightBrac = 2729;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7599946197768372
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.clonePF();
      streamTokenizer0.whitespaceChars((-1), 4140);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "w VG");
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.toStr();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.add((Object) jSTerm1);
      jSTerm2.equals(jSTerm0);
      jSTerm0.cloneT();
      jSTerm1.cloneT();
      jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-976L));
      System.setCurrentTimeMillis(2161L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-432L));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5995622276282764
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      predicate1.and(predicate4);
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      predicate7.negate();
      predicate7.or(predicate2);
      Predicate<Object> predicate8 = predicate3.negate();
      Predicate<Object> predicate9 = predicate0.and(predicate8);
      predicate5.and(predicate7);
      Predicate<Object> predicate10 = predicate0.negate();
      predicate0.or(predicate0);
      predicate0.or(predicate1);
      predicate10.and(predicate1);
      predicate9.or(predicate3);
      predicate9.negate();
      Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate11 = predicate9.negate();
      Predicate<Object> predicate12 = predicate9.negate();
      predicate11.or(predicate12);
      jSTerm0.removeIf(predicate11);
      jSTerm1.standardizerTerm();
      jSTerm3.equals(jSTerm2);
      boolean boolean0 = jSTerm3.equals(jSTerm0);
      assertTrue(jSTerm0.isFunction());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 2729;
      jSTerm0.ensureCapacity(2729);
      jSTerm0.makeFunction();
      jSTerm0.setSize(2729);
      long long0 = (-1L);
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "(qN ";
      StringReader stringReader0 = new StringReader("(qN ");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("(qN ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.quoteChar(43);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate1);
      predicate4.and(predicate3);
      predicate2.and(predicate3);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(qN ");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("(qN ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.quoteChar(43);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.removeElement((Object) null);
      jSTerm0.addAll((Collection) jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add((Object) "qN");
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.removeAll(jSSubstitution0);
      jSSubstitution0.add((Object) "\"?NU2A4EEy/");
      jSSubstitution1.removeAll(jSSubstitution0);
      JSSubstitution jSSubstitution3 = jSSubstitution1.standarizerSubs();
      jSSubstitution3.add((Object) null);
      jSSubstitution1.assignFailure();
      jSSubstitution1.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution4);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add(object0);
      jSSubstitution0.add((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution0.add((Object) jSTerm0);
      Object object1 = jSTerm0.clone();
      jSSubstitution0.add(object1);
      jSSubstitution3.removeAll(jSTerm0);
      Object object2 = jSTerm0.lastElement();
      jSSubstitution0.add(object2);
      Integer integer0 = new Integer(96);
      jSSubstitution2.add((Object) integer0);
      jSSubstitution2.removeAll(jSTerm0);
      jSSubstitution2.add((Object) null);
      jSSubstitution2.trimToSize();
      jSSubstitution3.assignFailure();
      jSSubstitution2.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Integer integer1 = new Integer(96);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution1.remove((Object) jSSubstitution5);
      jSTerm0.add(object1);
      jSTerm0.print();
      assertFalse(jSTerm0.isVariable());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add((Object) "qgON");
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.removeAll(jSSubstitution0);
      jSSubstitution0.add((Object) "qgON");
      jSSubstitution0.add((Object) "\"?NU2A4EEy/");
      jSSubstitution0.removeAll(jSSubstitution0);
      jSSubstitution0.add((Object) null);
      jSSubstitution1.trimToSize();
      jSSubstitution0.assignFailure();
      jSSubstitution0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Integer integer0 = new Integer((-3312));
      jSSubstitution2.remove((Object) integer0);
      jSTerm0.add((Object) jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(DG*N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.sval = "Line : ";
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "(*N";
      StringReader stringReader0 = new StringReader("(*N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.844025603805063
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      Integer integer0 = new Integer((-3246));
      jSSubstitution0.add((Object) integer0);
      jSSubstitution0.addElement("w VG");
      jSSubstitution0.removeElement("w VG");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution4);
      jSSubstitution3.add((Object) jSSubstitution1);
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution2.removeAll(jSSubstitution0);
      jSSubstitution2.add((Object) "qgON");
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.makeVariable();
      jSTerm1.addAll((Collection) jSSubstitution4);
      jSTerm2.makeFunction();
      jSTerm1.isGround();
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm1.matches(jSTerm3, jSSubstitution2);
      JSTerm jSTerm4 = new JSTerm();
      streamTokenizer0.nextToken();
      // Undeclared exception!
      try { 
        jSTerm4.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3545770553218563
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";j%gh_Rcar)=!+pq^");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      jSTerm1.cloneT();
      jSTerm1.standardizerTerm();
      JSJshopVars.rightPar = 59;
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8021631906953117
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w vg0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = 260;
      streamTokenizer0.ordinaryChars((-791), (-791));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSJshopVars.apostrophe = (-791);
      stringReader0.reset();
      JSJshopVars.lessT = 32;
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      jSTerm0.equals(jSTerm1);
      jSTerm1.print();
      JSTerm jSTerm2 = jSTerm1.call();
      JSJshopVars.slash = (-984);
      jSTerm1.print();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm3.call();
      JSJshopVars.whiteSpace = 42;
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      jSSubstitution0.removeAll(jSTerm1);
      JSTerm jSTerm5 = jSTerm0.call();
      JSTerm jSTerm6 = jSTerm1.standardizerTerm();
      JSJshopVars.VarCounter = (-984);
      jSTerm6.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm7 = new JSTerm(streamTokenizer0);
      JSJshopVars.semicolon = 47;
      JSSubstitution jSSubstitution1 = jSTerm5.matches(jSTerm7);
      assertTrue(jSSubstitution1.fail());
      
      jSTerm1.equals(jSTerm5);
      jSTerm4.print();
      assertTrue(jSTerm4.isConstant());
      assertFalse(jSTerm4.isEval());
      
      jSTerm2.print();
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertNotSame(jSTerm1, jSTerm4);
      
      boolean boolean0 = jSTerm5.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1629970982806674
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = ".bSt";
      StringReader stringReader0 = new StringReader(".bSt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip((-1L));
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.trimToSize();
      jSPredicateForm0.add((Object) streamTokenizer0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(DG*N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.ready();
      stringReader0.read();
      stringReader0.skip((-4));
      streamTokenizer0.ordinaryChar(113);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElement((Object) null);
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add(object0);
      jSSubstitution2.add(object0);
      jSSubstitution2.removeAll(jSSubstitution0);
      Integer integer0 = new Integer((-589));
      jSSubstitution1.add((Object) integer0);
      jSSubstitution0.containsAll(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution0.clone();
      jSSubstitution3.removeAll(jSSubstitution1);
      jSSubstitution3.trimToSize();
      jSSubstitution4.assignFailure();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      int int0 = (-3312);
      Integer integer1 = new Integer((-589));
      jSSubstitution2.remove(object0);
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "(OGrN";
      StringReader stringReader0 = new StringReader("(OGrN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add((Object) "qgON");
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.removeAll(jSSubstitution0);
      jSSubstitution0.add((Object) "qgON");
      jSSubstitution0.add((Object) "\"?NU2A4EEy/");
      jSSubstitution0.removeAll(jSSubstitution0);
      jSSubstitution0.add((Object) null);
      jSSubstitution1.trimToSize();
      jSSubstitution0.assignFailure();
      jSSubstitution0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Integer integer0 = new Integer((-3312));
      jSSubstitution2.remove((Object) integer0);
      jSTerm0.add((Object) jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7689192975524
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Object object0 = new Object();
      jSTerm0.add((Object) "w VG");
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Object object1 = new Object();
      Predicate<Object> predicate3 = Predicate.isEqual(object1);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      predicate1.test(predicate4);
      predicate4.negate();
      Predicate<Integer> predicate5 = Predicate.isEqual((Object) predicate1);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate6 = predicate2.or(predicate3);
      predicate2.test(predicate5);
      Predicate<Object> predicate7 = predicate2.and(predicate1);
      Predicate<Object> predicate8 = predicate0.and(predicate7);
      predicate8.or(predicate6);
      predicate8.or(predicate2);
      predicate7.and(predicate0);
      predicate8.test((Object) null);
      predicate2.negate();
      predicate7.negate();
      predicate8.or(predicate7);
      streamTokenizer0.lowerCaseMode(true);
      jSTerm0.removeIf(predicate8);
      jSTerm0.addAll((Collection) jSTerm0);
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4118090007716961
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(")");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.782019572767355
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("C[_=)a@4>m27#'wk");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.parseList(streamTokenizer0);
      assertEquals(41, streamTokenizer0.ttype);
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9263548464292743
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      jSTerm0.add((Object) stringBuffer0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.StringBuffer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (-2121.245);
      jSTerm0.stream();
      StringReader stringReader1 = new StringReader("-");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.whitespaceChars(41, 2837);
      streamTokenizer0.quoteChar(41);
      streamTokenizer0.resetSyntax();
      stringReader1.close();
      stringReader0.read();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y))i-Fzk~gNV'!4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.284236195774473
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      Object object0 = new Object();
      jSPredicateForm0.add((Object) "w VG");
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = Predicate.isEqual(object0);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate1.and(predicate6);
      predicate4.negate();
      predicate4.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate.isEqual((Object) null);
      predicate2.or(predicate3);
      Predicate<Object> predicate7 = predicate2.and(predicate1);
      predicate0.or(predicate7);
      Predicate<Object> predicate8 = predicate0.and(predicate7);
      predicate8.or(predicate2);
      predicate7.and(predicate0);
      jSTerm0.equals(jSTerm0);
      predicate7.negate();
      predicate8.or(predicate7);
      streamTokenizer0.lowerCaseMode(true);
      jSPredicateForm0.removeIf(predicate8);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.and(predicate0);
      Predicate<String> predicate3 = predicate2.or(predicate0);
      jSTerm0.removeIf(predicate3);
      jSTerm0.setSize(2113);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("? ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = (-2);
      stringReader0.markSupported();
      int int1 = 59;
      int int2 = 41;
      streamTokenizer0.ordinaryChars(41, 1086);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSJshopVars.flagLevel = (-9);
      StringReader stringReader0 = new StringReader("+{bTqLB3qfQ8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.quoteChar((-9));
      stringReader0.read();
      stringReader0.markSupported();
      streamTokenizer0.ordinaryChar(1);
      jSSubstitution0.add((Object) consumer0);
      jSSubstitution0.removeAll(jSTerm0);
      jSSubstitution0.containsAll(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSSubstitution1.standarizerSubs();
      jSSubstitution2.assignFailure();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.add((Object) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5371922129422315
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yt}8J");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.instance(jSTerm0);
      jSTerm0.makeVariable();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.2786339548781145
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yt}8J");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 94;
      streamTokenizer0.commentChar(94);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = jSTerm0.call();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator0.compose((Function<? super JSSubstitution, ? extends String>) function1);
      jSTerm0.listIterator();
      unaryOperator0.apply("Yt}8J");
      jSTerm2.removeAllElements();
      jSTerm0.replaceAll(unaryOperator0);
      System.setCurrentTimeMillis(94);
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5223619021075714
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars((-1), 4140);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      jSTerm0.clone();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate1.and(predicate4);
      Predicate<Object> predicate6 = predicate2.and(predicate5);
      predicate4.or(predicate3);
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate9 = predicate4.and(predicate8);
      Predicate<Object> predicate10 = predicate4.negate();
      predicate0.and(predicate10);
      Predicate<Object> predicate11 = predicate7.and(predicate9);
      Predicate<Object> predicate12 = predicate0.negate();
      predicate12.negate();
      predicate1.or(predicate12);
      predicate9.or(predicate6);
      predicate11.negate();
      predicate10.negate();
      predicate8.negate();
      Predicate<Object> predicate13 = predicate3.and(predicate9);
      predicate13.or(predicate3);
      jSTerm0.removeIf(predicate0);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm3);
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L,Y@!II%qlS*ehM");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeAllElements();
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8183289521349684
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      JSJshopVars.interrogation = 32;
      jSTerm0.clonePF();
      streamTokenizer0.whitespaceChars(2328, (-5687));
      jSTerm1.makeEval(true);
      jSTerm1.equals(jSTerm0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSEvaluate.numericValue(jSTerm1);
      jSTerm1.isVariable();
      jSTerm1.makeVariable();
      jSTerm1.isVariable();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0008978692206196
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clear();
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.292993651748156
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.removeAllElements();
      JSJshopVars.greaterT = 32;
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm2, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.386106276515816
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars((-1), 4140);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate1.and(predicate4);
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate8 = predicate3.and(predicate7);
      predicate8.negate();
      predicate8.or(predicate2);
      Predicate<Object> predicate9 = predicate3.negate();
      Predicate<Object> predicate10 = predicate0.and(predicate9);
      predicate6.and(predicate8);
      stringReader0.markSupported();
      Predicate<Object> predicate11 = predicate0.negate();
      predicate9.or(predicate5);
      predicate0.or(predicate0);
      predicate11.and(predicate1);
      predicate10.or(predicate3);
      predicate10.negate();
      Predicate.isEqual((Object) predicate10);
      Predicate<Object> predicate12 = predicate10.negate();
      predicate12.or(predicate3);
      jSTerm0.removeIf(predicate12);
      assertFalse(jSTerm1.isEmpty());
      
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm4.isEval());
      assertNotSame(jSTerm1, jSTerm4);
      assertTrue(jSTerm4.isConstant());
      
      jSTerm3.equals(jSTerm2);
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.023472058017288
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      Object object0 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      jSTerm1.makeVariable();
      jSSubstitution1.stream();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm1.retainAll(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.isGround();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution3);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.matches(jSTerm4);
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm5.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZM*ju+x&MW144Mn$mZe");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.504490492560509
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("J1t`(fJ ?*G]27");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = '?';
      charArray0[3] = 'V';
      charArray0[4] = 't';
      charArray0[5] = 'i';
      charArray0[6] = 'O';
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.percent = 10;
      jSTerm1.listIterator();
      System.setCurrentTimeMillis(7);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertEquals("[?%%%0]", jSTerm2.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isVariable());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.8805707533410465
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSJshopVars.interrogation = 62;
      jSTerm1.retainAll(jSTerm0);
      stringReader0.mark(32);
      jSTerm1.makeEval(true);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) "w VG");
      jSSubstitution2.clone();
      jSSubstitution0.add((Object) stringReader0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.equals(jSTerm2);
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      Object object0 = new Object();
      jSPredicateForm0.add((Object) "w VG");
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Object object1 = new Object();
      Predicate<Object> predicate3 = Predicate.isEqual(object1);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      predicate4.or(predicate3);
      predicate4.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate.isEqual((Object) null);
      predicate2.or(predicate3);
      Predicate<Object> predicate5 = predicate2.and(predicate1);
      predicate0.or(predicate5);
      Predicate<Object> predicate6 = predicate0.and(predicate5);
      predicate6.or(predicate2);
      predicate5.and(predicate0);
      predicate6.test((Object) null);
      predicate5.negate();
      predicate6.or(predicate5);
      streamTokenizer0.lowerCaseMode(true);
      jSPredicateForm0.removeIf(predicate6);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      jSTerm0.makeFunction();
      boolean boolean0 = jSTerm0.isFunction();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.5729083779017716
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      predicate1.and(predicate4);
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      predicate7.negate();
      predicate7.or(predicate2);
      Predicate<Object> predicate8 = predicate3.negate();
      Predicate<Object> predicate9 = predicate0.and(predicate8);
      predicate5.and(predicate7);
      Predicate<Object> predicate10 = predicate0.negate();
      predicate0.or(predicate0);
      predicate10.and(predicate1);
      predicate9.or(predicate3);
      predicate2.and(predicate6);
      predicate9.negate();
      Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate11 = predicate9.negate();
      predicate11.or(predicate1);
      jSTerm0.removeIf(predicate11);
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm0, jSSubstitution2);
      assertTrue(jSTerm0.isFunction());
      assertNotSame(jSSubstitution2, jSSubstitution3);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.5745935476096795
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.addAll((Collection) jSTerm0);
      JSJshopVars.flagLevel = (-9);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.call();
      System.setCurrentTimeMillis((-9));
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.setSize(1717);
      jSSubstitution0.add((Object) consumer0);
      StringReader stringReader0 = new StringReader("boFKf.kSOA@+3Rhj");
      StringReader stringReader1 = new StringReader("5.0");
      jSTerm0.matches(jSTerm1);
      assertEquals(1, jSTerm0.size());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.957531103113917
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.call();
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.equals(jSTerm1);
      jSTerm2.cloneT();
      jSTerm2.isGround();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      jSTerm2.standardizerTerm();
      jSTerm4.matches(jSTerm2);
      System.setCurrentTimeMillis((-706L));
      System.setCurrentTimeMillis((-1L));
      jSTerm4.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm1.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm5.matches(jSTerm4, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.445213628363618
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yt}8J");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(94);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.instance(jSTerm0);
      jSTerm0.makeVariable();
      jSSubstitution0.stream();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator0.compose((Function<? super JSSubstitution, ? extends String>) function2);
      jSTerm0.listIterator();
      unaryOperator0.apply((String) null);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.040984065799581
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yt}8J");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSSubstitution0.instance(jSTerm0);
      jSSubstitution0.stream();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.retainAll(jSTerm2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm2, jSSubstitution1);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSSubstitution3.fail());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.0446324302033596
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZfgpW8;ksP");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip((-1));
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      Object object0 = new Object();
      jSPredicateForm0.add((Object) "w VG");
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Object object1 = new Object();
      Predicate<Object> predicate3 = Predicate.isEqual(object1);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate6 = predicate2.or(predicate3);
      Predicate<Object> predicate7 = predicate2.and(predicate1);
      Predicate<Object> predicate8 = predicate0.or(predicate7);
      Predicate<Object> predicate9 = predicate0.and(predicate7);
      Predicate<Object> predicate10 = Predicate.isEqual(object1);
      predicate8.or(predicate2);
      Predicate<Object> predicate11 = predicate2.negate();
      predicate2.and(predicate6);
      Predicate<Object> predicate12 = predicate8.and(predicate5);
      Predicate<Object> predicate13 = predicate8.negate();
      predicate11.or(predicate13);
      Predicate<Object> predicate14 = predicate12.or(predicate6);
      Predicate<Object> predicate15 = predicate9.or(predicate8);
      predicate9.and(predicate3);
      Predicate<Object> predicate16 = predicate4.negate();
      predicate1.or(predicate9);
      predicate16.and(predicate14);
      Predicate<Object> predicate17 = predicate1.or(predicate15);
      predicate17.test(jSPredicateForm0);
      predicate8.and(predicate0);
      predicate10.negate();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("w ", stringBuffer0.toString());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.pushBack();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.sval = "5.0";
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.6239343795441985
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.coma = 123;
      StringReader stringReader0 = new StringReader("J1t`(fJ ?*G]27");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = '?';
      charArray0[3] = 'V';
      charArray0[4] = 't';
      charArray0[6] = 't';
      stringReader0.read(charArray0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.sval = "J1t`(fJ ?*G]27";
      StringReader stringReader1 = new StringReader("J1t`(fJ ?*G]27");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader0.markSupported();
      jSTerm1.isGround();
      System.setCurrentTimeMillis((-4062L));
      jSTerm1.matches(jSTerm0);
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSJshopVars.flagLevel = (-9);
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[1];
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.7997945388261307
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSJshopVars.flagLevel = (-9);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.call();
      JSJshopVars.coma = (-9);
      System.setCurrentTimeMillis((-9));
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.colon = 2326;
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.6499627365137455
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      Stream stream0 = jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      JSJshopVars.interrogation = 62;
      jSTerm0.clonePF();
      streamTokenizer0.whitespaceChars(2328, (-5687));
      jSTerm1.equals(jSTerm0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.makeVariable();
      Object object0 = new Object();
      jSTerm0.standardizerTerm();
      jSTerm0.add((Object) stream0);
      jSTerm1.forEach(consumer0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.ordinaryChars(681, (-2675));
      jSTerm1.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.stream.ReferencePipeline$Head cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.9620098587092456
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yt}8J");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      jSTerm0.makeVariable();
      jSSubstitution0.stream();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.retainAll(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.add((Object) jSTerm4);
      jSTerm0.equals(jSTerm3);
      JSTerm jSTerm5 = jSTerm1.cloneT();
      jSTerm0.isGround();
      jSTerm5.cloneT();
      JSTerm jSTerm6 = jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis((-706L));
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm7 = jSTerm6.applySubstitutionT(jSSubstitution1);
      jSTerm5.isGround();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution4);
      JSTerm jSTerm8 = jSTerm7.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm8.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm6.equals((Object)jSTerm8));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.886135456176598
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      int int0 = 2328;
      streamTokenizer0.nval = (double) 62;
      jSTerm0.clonePF();
      streamTokenizer0.whitespaceChars(2328, (-5687));
      jSTerm0.equals(jSTerm1);
      stringReader0.mark(32);
      jSTerm1.makeEval(true);
      jSTerm1.equals(jSTerm0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.makeVariable();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.isGround();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.makeFunction();
      jSTerm1.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.686542448305925
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("J1t`(fJ ?*G]27");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = '?';
      charArray0[3] = 'V';
      charArray0[4] = 't';
      charArray0[5] = 'i';
      charArray0[6] = 'O';
      stringReader0.read(charArray0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.8918557452341687
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      int int0 = 2328;
      streamTokenizer0.nval = (double) 62;
      jSTerm0.clonePF();
      streamTokenizer0.whitespaceChars(2328, (-5687));
      jSTerm0.equals(jSTerm1);
      stringReader0.mark(32);
      jSTerm1.makeEval(true);
      jSTerm1.equals(jSTerm0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.isGround();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.makeFunction();
      jSTerm1.equals(jSTerm3);
      jSTerm2.cloneT();
      // Undeclared exception!
      try { 
        jSTerm3.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.7091199915606667
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElement((Object) null);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add((Object) "qgON");
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.removeAll(jSSubstitution0);
      jSSubstitution0.add((Object) "qgON");
      jSTerm0.isGround();
      jSSubstitution0.removeAll(jSSubstitution0);
      jSSubstitution0.add((Object) null);
      jSSubstitution1.trimToSize();
      jSSubstitution0.assignFailure();
      jSSubstitution0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add(object0);
      Integer integer0 = new Integer((-3312));
      jSSubstitution2.remove((Object) integer0);
      jSTerm0.add((Object) jSSubstitution2);
      System.setCurrentTimeMillis((-3312));
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElement((Object) null);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.listIterator(2);
      jSSubstitution0.add((Object) null);
      jSSubstitution1.remove((Object) null);
      jSSubstitution0.add((Object) "qgON");
      jSTerm0.isConstant();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution0.removeAll(jSSubstitution0);
      jSSubstitution0.add((Object) "qgON");
      jSSubstitution0.add((Object) "\"?NUMA4EEy/");
      jSSubstitution0.removeAll(jSSubstitution0);
      jSSubstitution0.add((Object) null);
      jSSubstitution1.trimToSize();
      jSSubstitution0.assignFailure();
      jSSubstitution0.add((Object) jSSubstitution0);
      System.setCurrentTimeMillis((-1348));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.7893475488349515
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      stringReader0.mark(62);
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.add((Object) stringReader0);
      jSSubstitution0.clone();
      jSSubstitution2.add((Object) "VVAx");
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = new JSTerm();
      Object[] objectArray0 = new Object[0];
      jSSubstitution0.toArray(objectArray0);
      jSTerm4.equals(jSTerm0);
      jSTerm2.call();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm1.applySubstitutionT(jSSubstitution4);
      JSTerm jSTerm6 = jSTerm1.applySubstitutionT((JSSubstitution) null);
      jSTerm6.isGround();
      jSTerm0.clone();
      jSTerm3.applySubstitutionT(jSSubstitution2);
      jSTerm3.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm3.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm7 = jSTerm5.standardizerTerm();
      assertEquals(32, streamTokenizer0.ttype);
      assertNotSame(jSTerm7, jSTerm5);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      jSTerm0.isConstant();
      StringReader stringReader1 = new StringReader("Undefined function to be evaluated  in Call statement");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.quoteChar((-4));
      stringReader1.read();
      stringReader0.markSupported();
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChars(85, (-2670));
      stringReader0.read();
      streamTokenizer2.pushBack();
      stringReader1.markSupported();
      streamTokenizer1.ordinaryChar(2);
      streamTokenizer1.lowerCaseMode(true);
      StringReader stringReader2 = new StringReader("Undefined function to be evaluated  in Call statement");
      stringReader1.skip(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(85);
      System.setCurrentTimeMillis((-3404L));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      char[] charArray0 = new char[5];
      int int0 = 1781;
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'a';
      charArray0[2] = 'Y';
      charArray0[3] = 'e';
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Spliterator spliterator0 = jSTerm0.spliterator();
      jSTerm0.remove((Object) spliterator0);
      JSJshopVars.greaterT = 0;
      jSTerm0.clone();
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Spliterator spliterator0 = jSTerm0.spliterator();
      jSTerm0.remove((Object) spliterator0);
      JSJshopVars.greaterT = 0;
      jSTerm0.clone();
      jSTerm0.makeEval(true);
      boolean boolean0 = jSTerm0.isEval();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.semicolon = 988;
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-936L));
      System.setCurrentTimeMillis((-5L));
      System.setCurrentTimeMillis((-5L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-936L));
      System.setCurrentTimeMillis(988);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.9401690517473154
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yt}8J");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(94);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.makeVariable();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator0.compose((Function<? super JSSubstitution, ? extends String>) function2);
      jSTerm0.listIterator();
      unaryOperator0.apply((String) null);
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.2243459334381526
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      Integer integer0 = new Integer((-3246));
      jSSubstitution0.add((Object) integer0);
      jSSubstitution0.addElement("w VG");
      jSSubstitution0.removeElement("w VG");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution4);
      jSSubstitution3.add((Object) jSSubstitution1);
      jSSubstitution2.removeAll(jSSubstitution0);
      jSSubstitution2.add((Object) "qgON");
      jSSubstitution3.containsAll(jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution0.removeAll(jSSubstitution6);
      jSSubstitution4.trimToSize();
      jSSubstitution4.assignFailure();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution8.ensureCapacity(460);
      jSSubstitution4.add((Object) jSSubstitution8);
      jSSubstitution5.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      Integer integer1 = new Integer((-3312));
      jSSubstitution3.remove((Object) integer0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution4);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w");
      Object[] objectArray0 = new Object[4];
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      predicate3.test(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate4.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      predicate4.and(predicate1);
      predicate3.and(predicate5);
      predicate1.negate();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6288922115877589
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      stringReader0.markSupported();
      streamTokenizer0.quoteChar((-2));
      streamTokenizer0.pushBack();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.sval = "5.0";
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.resetSyntax();
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Object object1 = new Object();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      predicate4.negate();
      Predicate<Integer> predicate5 = Predicate.isEqual((Object) predicate1);
      Predicate.isEqual((Object) null);
      predicate2.or(predicate3);
      Predicate<Object> predicate6 = predicate2.and(predicate1);
      Predicate<Object> predicate7 = predicate0.and(predicate6);
      predicate7.or(predicate2);
      predicate6.and(predicate0);
      predicate7.test(predicate5);
      predicate0.negate();
      predicate7.or(predicate6);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.3423901693012241
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChars((-1), (-1439582847));
      streamTokenizer0.pushBack();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.sval = "5.0";
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.wordChars(2380, 34);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.resetSyntax();
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String string0 = "%";
      StringReader stringReader0 = new StringReader("%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
