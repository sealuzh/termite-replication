/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 10:54:41 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.Buffer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "not";
      jSTerm0.add((Object) "not");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      UnaryOperator.identity();
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      function1.apply(unaryOperator0);
      Function<String, String> function2 = unaryOperator0.andThen((Function<? super String, ? extends String>) function1);
      UnaryOperator.identity();
      function2.compose((Function<? super String, ? extends String>) unaryOperator2);
      Function<Object, JSTerm> function3 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) null);
      function2.andThen((Function<? super String, ? extends JSTerm>) function3);
      Function<String, String> function4 = Function.identity();
      Function<String, String> function5 = function2.compose((Function<? super String, ? extends String>) function4);
      function1.apply(function5);
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ?>) function2);
      Function.identity();
      Function.identity();
      Function<String, JSTerm> function7 = (Function<String, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends JSTerm>) function7);
      Integer integer0 = new Integer((-1982694972));
      jSTerm0.add((Object) unaryOperator0);
      UnaryOperator.identity();
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vV0k8;jucxY");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.add((Object) stringReader0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      int int0 = 40;
      jSPredicateForm0.setSize(40);
      JSJshopVars.colon = (-1);
      jSTerm0.add((Object) stringReader0);
      jSTerm0.matches(jSPredicateForm0);
      jSTerm1.applySubstitutionPF(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm2.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function<String, String> function1 = unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function2).apply(any());
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      function1.compose((Function<? super Integer, ? extends String>) function4);
      Function<Object, String> function5 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      unaryOperator0.andThen((Function<? super String, ? extends String>) function5);
      Function<Object, String> function6 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function5);
      function6.apply(function5);
      function6.compose((Function<? super Object, ?>) function3);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function7 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      jSTerm0.lastElement();
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      function8.apply(function7);
      Function<Object, String> function9 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function5);
      function8.apply((Object) null);
      Function.identity();
      Function.identity();
      unaryOperator3.andThen((Function<? super String, ? extends String>) function1);
      UnaryOperator.identity();
      function9.apply("not");
      Function.identity();
      jSTerm0.add((Object) null);
      UnaryOperator.identity();
      int int0 = (-2173);
      Integer integer0 = new Integer((-2173));
      Integer integer1 = new Integer((-2173));
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.562663983084702
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vV0k8;jucxY");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clone();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm0.setSize(32);
      JSJshopVars.colon = (-1);
      jSTerm0.add((Object) stringReader0);
      jSTerm0.matches(jSPredicateForm0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.applySubstitutionPF(jSSubstitution1);
      jSTerm1.clonePF();
      jSPredicateForm4.iterator();
      jSTerm0.retainAll(jSPredicateForm2);
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSPredicateForm1, jSSubstitution1);
      jSPredicateForm2.standarizerPredicateForm();
      // Undeclared exception!
      try { 
        jSSubstitution3.subList(3996, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 32
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function<String, String> function1 = unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function2).apply(any());
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      function1.compose((Function<? super Integer, ? extends String>) function4);
      Function<String, String> function5 = unaryOperator0.andThen((Function<? super String, ? extends String>) function1);
      Function<Object, String> function6 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      function4.apply(function5);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function7 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function6);
      jSTerm0.lastElement();
      function7.apply("not");
      Function.identity();
      Function.identity();
      unaryOperator0.apply("iu");
      unaryOperator3.compose((Function<? super String, ? extends String>) function4);
      unaryOperator3.apply((String) null);
      UnaryOperator.identity();
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      function8.apply(function1);
      unaryOperator3.andThen((Function<? super String, ? extends String>) function1);
      UnaryOperator.identity();
      function8.apply(unaryOperator0);
      Function.identity();
      Integer integer0 = new Integer((-484));
      UnaryOperator.identity();
      Integer integer1 = new Integer(3475);
      Integer integer2 = new Integer(71);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Qiame");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.matches(jSTerm0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.firstElement();
      jSTerm1.add((Object) "Qiame");
      Object object1 = new Object();
      jSTerm0.makeEval(true);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.remove((Object) jSTerm0);
      jSTerm1.add((Object) jSTerm0);
      jSTerm2.add((Object) jSTerm2);
      jSTerm0.spliterator();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.2945451658448959
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      jSPredicateForm0.addAll((Collection) jSTerm0);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("(Predicateform.print(Predicateform.print( )", stringBuffer0.toString());
      
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.ordinaryChars((-807), 1964);
      Integer integer0 = new Integer(41);
      streamTokenizer0.commentChar((-807));
      streamTokenizer0.ordinaryChars(2867, 1964);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.wordChars((-62484357), 2867);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ttype = (-1905);
      streamTokenizer2.ordinaryChar(2867);
      streamTokenizer1.ordinaryChars(41, 44);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.commentChar((-1936075454));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1964);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      assertNotSame(jSPredicateForm2, jSPredicateForm1);
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
      assertEquals(2, jSPredicateForm2.size());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1595697967390537
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noU");
      UnaryOperator.identity();
      UnaryOperator.identity();
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(4L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(4L);
      System.setCurrentTimeMillis((-35L));
      System.setCurrentTimeMillis(828L);
      System.setCurrentTimeMillis((-35L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(291L);
      Object object1 = new Object();
      Object object2 = new Object();
      jSTerm0.toArray();
      Object object3 = new Object();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
      
      boolean boolean1 = jSTerm0.equals(jSPredicateForm0);
      assertTrue(boolean1);
      
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSPredicateForm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "0.0");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeElement("0.0");
      jSSubstitution0.containsAll(jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.clone();
      jSSubstitution0.add((Object) jSTerm1);
      jSSubstitution1.retainAll(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution2);
      jSSubstitution2.removeElements(jSSubstitution1);
      jSSubstitution1.add((Object) jSTerm0);
      jSTerm0.removeAll(jSSubstitution1);
      jSTerm0.remove((Object) jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSSubstitution1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm1);
      StringReader stringReader0 = new StringReader("0.0");
      jSSubstitution1.removeElement(jSTerm2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm3);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.0;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.markSupported();
      jSTerm0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      jSTerm0.sort(comparator0);
      jSTerm0.add((Object) null);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.quoteChar((-2028729089));
      streamTokenizer0.ttype = (-2028729089);
      streamTokenizer0.quoteChar((-2028729089));
      streamTokenizer0.resetSyntax();
      System.setCurrentTimeMillis((-2028729089));
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.7963116401738131
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("Qiame");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Qiame");
      jSTerm0.matches(jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.firstElement();
      stringReader0.reset();
      jSTerm0.add((Object) "Qiame");
      Object object1 = new Object();
      jSTerm0.makeEval(true);
      jSTerm0.add(object0);
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.remove((Object) jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add((Object) jSTerm0);
      jSTerm1.add((Object) jSTerm2);
      jSTerm2.spliterator();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "4";
      StringReader stringReader0 = new StringReader("4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.markSupported();
      jSTerm0.add((Object) "4");
      Integer integer0 = new Integer((-2));
      stringReader0.close();
      streamTokenizer0.slashSlashComments(false);
      long long0 = 442L;
      streamTokenizer0.quoteChar((-2));
      streamTokenizer0.quoteChar((-319352257));
      stringReader0.close();
      streamTokenizer0.resetSyntax();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.34883209584303193
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lz?kR$(Gh?");
      char[] charArray0 = new char[6];
      charArray0[1] = 'W';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer1.wordChars((-4), 'W');
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer1.sval = null;
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer1.sval = null;
      Integer integer0 = new Integer((-4));
      streamTokenizer0.sval = streamTokenizer0.sval;
      streamTokenizer3.commentChar((-4));
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer1.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.ordinaryChars((-3), 'W');
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer2.ordinaryChars((-4), (-4));
      streamTokenizer3.sval = "Lz?kR$(Gh?";
      streamTokenizer3.lowerCaseMode(true);
      streamTokenizer3.commentChar((-4));
      streamTokenizer2.whitespaceChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lz?kR$(\"Gh?");
      char[] charArray0 = new char[6];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer3.sval = null;
      streamTokenizer3.slashSlashComments(false);
      streamTokenizer4.whitespaceChars((-4), (-4));
      streamTokenizer4.slashStarComments(false);
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer5.eolIsSignificant(false);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.sval = null;
      streamTokenizer2.sval = null;
      streamTokenizer3.commentChar((-4));
      streamTokenizer0.slashStarComments(false);
      streamTokenizer3.wordChars('L', (-4));
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.sval = null;
      streamTokenizer1.whitespaceChars((-4), 42);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer5.sval = null;
      streamTokenizer6.ordinaryChar((-4));
      streamTokenizer5.lowerCaseMode(true);
      streamTokenizer5.commentChar((-4));
      streamTokenizer2.whitespaceChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer2);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "PUB");
      UnaryOperator.identity();
      Integer integer0 = new Integer((-121));
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("dkK$z4jJJ?5Onx");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer1);
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer2);
      assertNotSame(jSTerm0, jSTerm1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lz?kR$(\"Gh?");
      char[] charArray0 = new char[2];
      charArray0[1] = 'W';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer3.sval = null;
      streamTokenizer3.slashSlashComments(false);
      streamTokenizer4.whitespaceChars((-4), (-4));
      streamTokenizer4.slashStarComments(false);
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer5.eolIsSignificant(false);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.sval = null;
      streamTokenizer2.sval = null;
      streamTokenizer3.commentChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer5);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.matches((JSPredicateForm) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.elementAt((-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.equals(jSTerm0);
      Object object0 = null;
      jSTerm0.add((Object) null);
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSPredicateForm0.addAll((Collection) jSTerm0);
      jSPredicateForm0.toStr();
      System.setCurrentTimeMillis((-1643L));
      System.setCurrentTimeMillis(41);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar(41);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars(41, (-4));
      streamTokenizer1.ordinaryChars(811, 41);
      JSJshopVars.greaterT = 41;
      streamTokenizer2.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.ordinaryChar(41);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.wordChars(1717, (-1));
      streamTokenizer3.ordinaryChars(1717, (-3362));
      streamTokenizer5.lowerCaseMode(true);
      streamTokenizer1.commentChar(96);
      // Undeclared exception!
      try { 
        jSPredicateForm0.elementAt(96);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 96 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement((Object) null);
      jSPredicateForm0.listIterator();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.34883209584303193
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lz?2R$(\"Gh");
      char[] charArray0 = new char[6];
      charArray0[1] = 'I';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer0.commentChar((-4));
      streamTokenizer3.sval = null;
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer2.nval = (double) (-4);
      streamTokenizer0.sval = null;
      streamTokenizer3.ordinaryChars((-4), 41);
      streamTokenizer2.sval = null;
      streamTokenizer3.commentChar((-4));
      streamTokenizer1.sval = null;
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.ttype = (-4);
      streamTokenizer3.wordChars('L', (-4));
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.sval = null;
      streamTokenizer1.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer4.sval = null;
      streamTokenizer5.ordinaryChar((-4));
      streamTokenizer4.ordinaryChar((-4));
      streamTokenizer4.lowerCaseMode(false);
      streamTokenizer4.commentChar((-4));
      streamTokenizer2.whitespaceChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4735023850806486
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSTerm0.clear();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm((String) null);
      jSPredicateForm0.containsAll(jSPredicateForm3);
      jSPredicateForm1.print();
      jSPredicateForm2.print();
      assertNotSame(jSPredicateForm2, jSPredicateForm1);
      assertEquals(2, jSPredicateForm2.size());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.240684291953396
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "PUB";
      jSTerm0.add((Object) "PUB");
      UnaryOperator.identity();
      int int0 = (-1269);
      Integer integer0 = new Integer((-121));
      UnaryOperator.identity();
      Integer integer1 = new Integer((-1269));
      Integer integer2 = new Integer((-121));
      Integer integer3 = new Integer(2808);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.addAll((Collection) jSTerm0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSTerm0.equals(jSPredicateForm1);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6631355916141728
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "PUB");
      UnaryOperator.identity();
      Integer integer0 = new Integer((-1269));
      Integer integer1 = new Integer((-1269));
      Integer integer2 = new Integer(2808);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.equals(jSPredicateForm0);
      jSPredicateForm0.print();
      UnaryOperator.identity();
      jSTerm0.applySubstitutionPF((JSSubstitution) null);
      Predicate<JSPredicateForm> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<JSPredicateForm> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) integer1);
      Predicate<Object> predicate3 = predicate2.or(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      Predicate<Object> predicate5 = predicate2.negate();
      predicate5.or(predicate3);
      Predicate<Object> predicate6 = predicate5.or(predicate4);
      predicate6.negate();
      Predicate.isEqual((Object) "lo']$rpw~\"kg;y#l");
      Predicate<Object> predicate7 = predicate3.and(predicate2);
      predicate1.or(predicate6);
      predicate7.negate();
      Predicate<Object> predicate8 = predicate4.and(predicate3);
      predicate7.negate();
      predicate8.test("PUB");
      predicate0.and(predicate7);
      predicate4.or(predicate5);
      predicate0.test(jSPredicateForm0);
      Predicate<Object> predicate9 = predicate8.negate();
      predicate1.or(predicate9);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm1.print();
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      assertEquals(1, jSPredicateForm2.size());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[12];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.chars();
      charBuffer0.order();
      CharBuffer charBuffer1 = charBuffer0.put(charArray0);
      CharBuffer charBuffer2 = charBuffer1.compact();
      charBuffer2.chars();
      CharBuffer charBuffer3 = charBuffer2.put(charArray0);
      CharBuffer charBuffer4 = charBuffer0.asReadOnlyBuffer();
      Buffer buffer0 = charBuffer3.clear();
      charBuffer2.asReadOnlyBuffer();
      charBuffer4.codePoints();
      charBuffer3.clear();
      CharBuffer charBuffer5 = charBuffer3.put(0, '4');
      charBuffer4.mark();
      charBuffer5.chars();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) buffer0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.nio.HeapCharBuffer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function<String, String> function1 = unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function2).apply(any());
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      function1.compose((Function<? super Integer, ? extends String>) function4);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<String, String> function5 = unaryOperator0.andThen((Function<? super String, ? extends String>) function1);
      Function<Object, String> function6 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function3);
      function4.apply(function5);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function6);
      jSTerm0.lastElement();
      function6.apply("not");
      Function<Object, String> function7 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      function7.apply(function1);
      unaryOperator4.andThen((Function<? super String, ? extends String>) function1);
      UnaryOperator.identity();
      function7.apply(unaryOperator0);
      Function.identity();
      jSTerm0.firstElement();
      jSTerm0.add((Object) null);
      UnaryOperator.identity();
      Integer integer0 = new Integer((-2173));
      Integer integer1 = new Integer((-2173));
      Integer integer2 = new Integer((-440));
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "PU\"");
      StringReader stringReader0 = new StringReader("PU\"");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator1.compose((Function<? super Integer, ? extends Integer>) function2);
      System.setCurrentTimeMillis(1323);
      Integer integer0 = new Integer(1323);
      unaryOperator1.apply(integer0);
      Function.identity();
      Integer integer1 = new Integer((-1262));
      unaryOperator1.apply(integer1);
      System.setCurrentTimeMillis(1323);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "PU\"";
      objectArray0[1] = (Object) stringReader0;
      UnaryOperator.identity();
      objectArray0[2] = (Object) unaryOperator1;
      objectArray0[3] = (Object) jSTerm0;
      jSTerm0.matches((JSPredicateForm) jSTerm0);
      objectArray0[4] = (Object) unaryOperator0;
      jSTerm0.toArray(objectArray0);
      UnaryOperator.identity();
      jSTerm0.matches((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis(3619L);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.7963116401738131
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Qiame");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.matches(jSTerm0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.firstElement();
      jSTerm1.add((Object) "Qiame");
      Object object1 = new Object();
      jSTerm0.makeEval(true);
      jSTerm1.add(object0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.remove((Object) jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.add((Object) jSTerm0);
      jSTerm2.add((Object) jSTerm3);
      jSTerm3.spliterator();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "pPU");
      Integer integer0 = new Integer((-1269));
      Integer integer1 = new Integer((-1269));
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      function1.apply(unaryOperator1);
      unaryOperator1.andThen((Function<? super String, ?>) function2);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<String, String> function3 = unaryOperator1.compose((Function<? super String, ? extends String>) function2);
      unaryOperator2.andThen((Function<? super String, ? extends String>) function3);
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function<Object, JSTerm> function4 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, JSTerm> function5 = unaryOperator2.andThen((Function<? super String, ? extends JSTerm>) function4);
      Integer integer2 = new Integer(1);
      jSTerm0.add((Object) function5);
      UnaryOperator.identity();
      Integer integer3 = new Integer(2560);
      Integer integer4 = new Integer((-115979082));
      Integer integer5 = new Integer((-586));
      Integer integer6 = new Integer((-1590));
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$50/429291310 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "P[\"");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeElement("P[\"");
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution2);
      jSSubstitution1.add((Object) jSTerm0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      Integer integer0 = new Integer((-2985));
      jSSubstitution0.ensureCapacity((-2985));
      jSSubstitution2.add((Object) integer0);
      jSSubstitution2.add((Object) null);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.add((Object) jSSubstitution2);
      jSSubstitution1.removeElement("P[\"");
      jSSubstitution2.add((Object) "_1M?,F!Vbfg");
      jSTerm1.addElement(jSSubstitution2);
      jSTerm1.add((Object) "@k");
      StringReader stringReader0 = new StringReader("Q<YQ`B%{b=5xN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.quoteChar(0);
      System.setCurrentTimeMillis((-2985));
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.markSupported();
      int int0 = (-1099750011);
      Integer integer0 = new Integer((-1099750011));
      stringReader0.close();
      jSTerm0.add((Object) "4");
      streamTokenizer0.quoteChar((-1099750011));
      jSTerm0.add((Object) null);
      streamTokenizer0.resetSyntax();
      System.setCurrentTimeMillis(442L);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "%%%");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function<String, String> function1 = unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function2).apply(any());
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      function1.compose((Function<? super Integer, ? extends String>) function4);
      Function<Object, String> function5 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      unaryOperator0.andThen((Function<? super String, ? extends String>) function5);
      Function<Object, String> function6 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function5);
      function6.apply(function5);
      function6.compose((Function<? super Object, ?>) function3);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function7 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      jSTerm0.lastElement();
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      function8.apply(function7);
      Function<Object, String> function9 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function5);
      function8.apply((Object) null);
      Function.identity();
      Function.identity();
      unaryOperator3.andThen((Function<? super String, ? extends String>) function1);
      UnaryOperator.identity();
      function9.apply("%%%");
      Function.identity();
      jSTerm0.add((Object) null);
      UnaryOperator.identity();
      int int0 = (-2173);
      Integer integer0 = new Integer((-2173));
      Integer integer1 = new Integer((-2173));
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function<String, String> function1 = unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function2).apply(any());
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      function1.compose((Function<? super Integer, ? extends String>) function4);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<String, String> function5 = unaryOperator0.andThen((Function<? super String, ? extends String>) function1);
      Function<Object, String> function6 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function3);
      function4.apply(function5);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function6);
      jSTerm0.lastElement();
      function6.apply("not");
      Function<Object, String> function7 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      function7.apply(function1);
      Function.identity();
      unaryOperator4.andThen((Function<? super String, ? extends String>) function1);
      UnaryOperator.identity();
      function7.apply(unaryOperator0);
      Function.identity();
      jSTerm0.firstElement();
      jSTerm0.add((Object) null);
      UnaryOperator.identity();
      int int0 = (-2173);
      Integer integer0 = new Integer((-2173));
      Integer integer1 = new Integer((-2173));
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "0.0");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeElement("0.0");
      jSSubstitution0.containsAll(jSTerm0);
      jSSubstitution1.containsAll(jSSubstitution0);
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution1.retainAll(jSTerm0);
      jSSubstitution0.spliterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.removeAllElements();
      jSSubstitution3.add((Object) null);
      jSSubstitution0.removeElements(jSSubstitution3);
      jSSubstitution3.removeElements(jSSubstitution1);
      jSSubstitution1.add((Object) jSTerm0);
      jSTerm0.removeAll(jSSubstitution1);
      jSTerm0.remove((Object) jSTerm0);
      jSSubstitution1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      StringReader stringReader0 = new StringReader("0.0");
      jSSubstitution1.removeElement(jSTerm0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("5.0");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.read();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.containsAll(jSSubstitution2);
      jSTerm1.removeAll(jSSubstitution1);
      jSTerm1.makeFunction();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "0.0");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeElement("0.0");
      jSSubstitution0.containsAll(jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.removeAll(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution1.retainAll(jSTerm0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.add((Object) "0.0");
      jSSubstitution3.removeAllElements();
      jSSubstitution0.removeElements(jSSubstitution3);
      jSSubstitution3.removeElements(jSSubstitution1);
      jSSubstitution1.add((Object) jSTerm0);
      jSTerm0.removeAll(jSSubstitution1);
      jSTerm0.remove((Object) jSTerm0);
      jSSubstitution1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      StringReader stringReader0 = new StringReader("0.0");
      jSSubstitution1.removeElement(jSTerm0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("0.0");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.read();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.removeAll(jSSubstitution1);
      jSTerm1.makeFunction();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[12];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.chars();
      charBuffer0.order();
      CharBuffer charBuffer1 = charBuffer0.put(charArray0);
      CharBuffer charBuffer2 = charBuffer1.compact();
      charBuffer2.chars();
      CharBuffer charBuffer3 = charBuffer2.put(charArray0);
      CharBuffer charBuffer4 = charBuffer0.asReadOnlyBuffer();
      Buffer buffer0 = charBuffer3.clear();
      charBuffer2.asReadOnlyBuffer();
      charBuffer4.codePoints();
      charBuffer3.clear();
      CharBuffer charBuffer5 = charBuffer3.put(0, '4');
      charBuffer5.get(charArray0);
      charBuffer4.mark();
      charBuffer5.chars();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) buffer0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.nio.HeapCharBuffer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      jSTerm0.add((Object) "PUB");
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noU");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      System.setCurrentTimeMillis((-28L));
      System.setCurrentTimeMillis((-28L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis((-28L));
      System.setCurrentTimeMillis((-28L));
      System.setCurrentTimeMillis((-28L));
      System.setCurrentTimeMillis((-28L));
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = function1.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function3 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      function1.apply("noU");
      unaryOperator2.apply("[.k]Mfxb~vV~PX");
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      function4.apply(function1);
      function2.apply(function4);
      unaryOperator0.andThen((Function<? super String, ? extends String>) function4);
      UnaryOperator.identity();
      function1.apply(function3);
      Function.identity();
      Integer integer0 = new Integer((-1));
      jSTerm0.add((Object) function3);
      UnaryOperator.identity();
      Integer integer1 = new Integer(3475);
      Integer integer2 = new Integer((-1143529242));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$50/429291310 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "n?d:3B^ode-l");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Integer> consumer3 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer3);
      Consumer<String> consumer4 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer4);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "PUB");
      UnaryOperator.identity();
      System.setCurrentTimeMillis((-1269));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1760L);
      System.setCurrentTimeMillis((-1887L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1430L));
      System.setCurrentTimeMillis((-1269));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "n?d:3B^od-l");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Integer> consumer3 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer3);
      Consumer<String> consumer4 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer4);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "pPU");
      Integer integer0 = new Integer((-1269));
      Integer integer1 = new Integer((-1269));
      Integer integer2 = new Integer(1802);
      Integer integer3 = new Integer((-1570));
      Integer integer4 = new Integer(2461);
      Integer integer5 = new Integer(1802);
      Integer integer6 = new Integer((-1570));
      System.setCurrentTimeMillis((-1789));
      System.setCurrentTimeMillis((-1789));
      System.setCurrentTimeMillis((-1570));
      Integer integer7 = new Integer((-1789));
      jSTerm0.firstElement();
      jSTerm0.add((Object) "pPU");
      UnaryOperator.identity();
      Integer integer8 = new Integer((-1269));
      Integer integer9 = new Integer(116);
      Integer integer10 = new Integer(2461);
      Integer integer11 = new Integer(2909);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lz?kR$(!=Gh?");
      char[] charArray0 = new char[6];
      charArray0[1] = 'W';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer1.wordChars((-4), 0);
      streamTokenizer3.sval = null;
      streamTokenizer3.slashSlashComments(true);
      streamTokenizer4.whitespaceChars((-4), (-4));
      streamTokenizer4.slashStarComments(true);
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer0.sval = null;
      Integer integer0 = new Integer((-4));
      streamTokenizer2.sval = null;
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer3.wordChars('L', 6);
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer2.sval = streamTokenizer2.sval;
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer2.ordinaryChars((-4), 12);
      streamTokenizer5.sval = "Lz?kR$(!=Gh?";
      streamTokenizer5.lowerCaseMode(true);
      streamTokenizer5.commentChar((-4));
      streamTokenizer2.whitespaceChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lz?kR$(!Gh?");
      char[] charArray0 = new char[6];
      charArray0[1] = 'W';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      streamTokenizer3.sval = null;
      streamTokenizer4.slashStarComments(false);
      streamTokenizer3.ordinaryChars((-4), (-1102));
      streamTokenizer0.sval = null;
      stringReader1.read(charArray0);
      streamTokenizer2.sval = "4.0";
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer3.wordChars('L', (-2));
      streamTokenizer3.ordinaryChars(10, (-4));
      streamTokenizer1.sval = "4.0";
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      streamTokenizer7.ordinaryChar((-4));
      streamTokenizer7.commentChar((-4));
      streamTokenizer7.whitespaceChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function<String, String> function1 = unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function2).apply(any());
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      function1.compose((Function<? super Integer, ? extends String>) function4);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<String, String> function5 = unaryOperator0.andThen((Function<? super String, ? extends String>) function1);
      Function<Object, String> function6 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function3);
      function4.apply(function5);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function7 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function6);
      jSTerm0.lastElement();
      function7.apply("not");
      unaryOperator0.apply("iu");
      unaryOperator4.apply((String) null);
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      function8.apply(function1);
      unaryOperator4.andThen((Function<? super String, ? extends String>) function1);
      UnaryOperator.identity();
      function8.apply(unaryOperator0);
      Function.identity();
      Integer integer0 = new Integer((-484));
      jSTerm0.add((Object) integer0);
      UnaryOperator.identity();
      Integer integer1 = new Integer(3475);
      Integer integer2 = new Integer((-1143529242));
      Integer integer3 = new Integer(71);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "n?d:3B^ode-l");
      jSTerm0.add((Object) "n?d:3B^ode-l");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function<String, String> function1 = unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function2).apply(any());
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      function1.compose((Function<? super Integer, ? extends String>) function4);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<String, String> function5 = unaryOperator0.andThen((Function<? super String, ? extends String>) function1);
      Function<Object, String> function6 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function3);
      function4.apply(function5);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function6);
      jSTerm0.lastElement();
      function6.apply("not");
      Function<Object, String> function7 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      function7.apply(function1);
      Function.identity();
      unaryOperator4.andThen((Function<? super String, ? extends String>) function1);
      UnaryOperator.identity();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UnaryOperator.identity();
      Integer integer0 = new Integer((-1269));
      UnaryOperator.identity();
      Integer integer1 = new Integer((-1269));
      Integer integer2 = new Integer((-1269));
      Integer integer3 = new Integer(2808);
      JSJshopVars.minus = 2808;
      JSJshopVars.whiteSpace = 2808;
      System.setCurrentTimeMillis(2808);
      System.setCurrentTimeMillis((-2142L));
      System.setCurrentTimeMillis(2808);
      System.setCurrentTimeMillis(2808);
      System.setCurrentTimeMillis(1728L);
      System.setCurrentTimeMillis((-2142L));
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm1.ensureCapacity((-722));
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.chars();
      charBuffer0.order();
      CharBuffer charBuffer1 = charBuffer0.put(charArray0);
      CharBuffer charBuffer2 = charBuffer1.compact();
      charBuffer2.codePoints();
      CharBuffer charBuffer3 = charBuffer2.put(charArray0);
      CharBuffer charBuffer4 = charBuffer0.asReadOnlyBuffer();
      charBuffer3.clear();
      charBuffer1.clear();
      charBuffer2.asReadOnlyBuffer();
      charBuffer2.mark();
      charBuffer4.codePoints();
      charBuffer3.clear();
      charBuffer4.mark();
      CharBuffer.allocate('4');
      CharBuffer charBuffer5 = charBuffer3.put(0, '4');
      charBuffer5.mark();
      charBuffer4.mark();
      charBuffer5.chars();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lz?k1$(!Gvw");
      char[] charArray0 = new char[6];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars(6, (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer1.ordinaryChar(60);
      streamTokenizer1.ordinaryChars((-4), (-1326));
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.whitespaceChars((-4), 6);
      streamTokenizer0.pushBack();
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UnaryOperator.identity();
      Integer integer0 = new Integer((-1269));
      UnaryOperator.identity();
      Integer integer1 = new Integer((-1269));
      Integer integer2 = new Integer((-1269));
      Integer integer3 = new Integer(2808);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer1);
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) ">");
      predicate1.and(predicate0);
      predicate1.or(predicate0);
      Predicate<Integer> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate1);
      predicate0.and(predicate3);
      predicate2.and(predicate0);
      predicate2.negate();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader(">");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lz?k1$(!Gvw");
      char[] charArray0 = new char[6];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars(6, (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer1.ordinaryChar(60);
      streamTokenizer1.ordinaryChars((-4), (-1318));
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.whitespaceChars((-4), 6);
      streamTokenizer0.pushBack();
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6730116670092565
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[12];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.chars();
      CharBuffer charBuffer1 = charBuffer0.put(charArray0);
      CharBuffer charBuffer2 = charBuffer1.compact();
      CharBuffer charBuffer3 = charBuffer2.put(charArray0);
      CharBuffer charBuffer4 = charBuffer0.asReadOnlyBuffer();
      charBuffer3.clear();
      charBuffer4.codePoints();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-352L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1075L);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[12];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.chars();
      charBuffer0.order();
      CharBuffer charBuffer1 = charBuffer0.put(charArray0);
      CharBuffer charBuffer2 = charBuffer1.compact();
      charBuffer2.chars();
      CharBuffer charBuffer3 = charBuffer2.put(charArray0);
      CharBuffer charBuffer4 = charBuffer0.asReadOnlyBuffer();
      charBuffer3.clear();
      CharBuffer charBuffer5 = charBuffer1.slice();
      charBuffer3.rewind();
      charBuffer2.asReadOnlyBuffer();
      charBuffer2.chars();
      CharBuffer charBuffer6 = charBuffer1.put("GTiNJ");
      charBuffer5.codePoints();
      charBuffer3.clear();
      charBuffer4.mark();
      CharBuffer charBuffer7 = charBuffer6.append((CharSequence) charBuffer1);
      CharBuffer charBuffer8 = charBuffer7.duplicate();
      charBuffer8.mark();
      CharBuffer charBuffer9 = charBuffer4.get(charArray0, 0, 0);
      CharBuffer.wrap(charArray0);
      CharBuffer charBuffer10 = charBuffer8.compact();
      charBuffer10.flip();
      CharBuffer.allocate('&');
      CharBuffer charBuffer11 = charBuffer3.put(0, '&');
      charBuffer9.mark();
      charBuffer5.mark();
      charBuffer11.codePoints();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(0, stringBuffer0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[12];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.codePoints();
      CharBuffer charBuffer1 = charBuffer0.put(charArray0);
      CharBuffer charBuffer2 = charBuffer1.compact();
      charBuffer2.chars();
      CharBuffer charBuffer3 = charBuffer2.put(charArray0);
      CharBuffer charBuffer4 = charBuffer0.asReadOnlyBuffer();
      charBuffer1.flip();
      CharBuffer charBuffer5 = charBuffer1.slice();
      charBuffer3.rewind();
      charBuffer2.asReadOnlyBuffer();
      charBuffer5.put("epu");
      charBuffer0.codePoints();
      CharBuffer charBuffer6 = charBuffer1.put("=J)g");
      charBuffer5.codePoints();
      charBuffer3.clear();
      charBuffer6.rewind();
      charBuffer4.rewind();
      CharBuffer charBuffer7 = charBuffer6.append((CharSequence) charBuffer1);
      charBuffer7.codePoints();
      CharBuffer charBuffer8 = charBuffer7.duplicate();
      charBuffer8.mark();
      CharBuffer.allocate(17);
      CharBuffer.allocate(17);
      CharBuffer charBuffer9 = charBuffer8.compact();
      CharBuffer charBuffer10 = CharBuffer.allocate(17);
      charBuffer9.flip();
      CharBuffer charBuffer11 = CharBuffer.allocate('\"');
      CharBuffer charBuffer12 = CharBuffer.allocate(17);
      charBuffer10.flip();
      charBuffer11.mark();
      charBuffer12.codePoints();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[12];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.codePoints();
      charBuffer0.order();
      CharBuffer charBuffer1 = charBuffer0.put(charArray0);
      CharBuffer charBuffer2 = charBuffer1.compact();
      charBuffer2.chars();
      CharBuffer charBuffer3 = charBuffer2.put(charArray0);
      CharBuffer charBuffer4 = charBuffer0.asReadOnlyBuffer();
      charBuffer3.clear();
      charBuffer1.slice();
      charBuffer2.asReadOnlyBuffer();
      charBuffer2.chars();
      CharBuffer charBuffer5 = charBuffer1.put("GTiNJ");
      charBuffer4.codePoints();
      charBuffer3.clear();
      charBuffer4.mark();
      charBuffer5.append((CharSequence) charBuffer1);
      charBuffer0.duplicate();
      charBuffer4.get(charArray0, 0, 0);
      CharBuffer charBuffer6 = charBuffer5.compact();
      charBuffer6.rewind();
      charBuffer6.mark();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("GTiNJ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.2868359830561607
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lz?kR>(!Gh?");
      StringReader stringReader1 = new StringReader("Lz?kR>(!Gh?");
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      stringReader0.skip((-1273L));
      charArray0[2] = 'Z';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.mark();
      stringReader1.read(charBuffer0);
      stringReader0.reset();
      charBuffer0.get(3);
      stringReader0.skip(3333L);
      charArray0[2] = 'Z';
      stringReader1.markSupported();
      stringReader0.mark(9);
      charArray0[6] = 'Z';
      charArray0[7] = 'z';
      stringReader1.read(charArray0);
      stringReader1.mark(2);
      stringReader0.read(charBuffer0);
      stringReader0.read(charArray0);
      stringReader0.ready();
      stringReader1.close();
      StringReader stringReader2 = new StringReader("(G");
      CharBuffer charBuffer1 = CharBuffer.allocate(2);
      stringReader2.read(charBuffer0);
      charBuffer1.rewind();
      CharBuffer.allocate('z');
      stringReader0.read(charBuffer1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[12];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.codePoints();
      charBuffer0.order();
      CharBuffer charBuffer1 = charBuffer0.put(charArray0);
      CharBuffer charBuffer2 = charBuffer1.compact();
      charBuffer2.chars();
      CharBuffer charBuffer3 = charBuffer2.put(charArray0);
      CharBuffer charBuffer4 = charBuffer0.asReadOnlyBuffer();
      charBuffer1.flip();
      CharBuffer charBuffer5 = charBuffer1.slice();
      charBuffer2.asReadOnlyBuffer();
      charBuffer5.put("pau");
      charBuffer0.codePoints();
      CharBuffer charBuffer6 = charBuffer1.put("=J)g");
      charBuffer5.codePoints();
      charBuffer3.clear();
      charBuffer4.rewind();
      CharBuffer charBuffer7 = charBuffer6.append((CharSequence) charBuffer1);
      charBuffer7.codePoints();
      CharBuffer charBuffer8 = charBuffer7.duplicate();
      charBuffer8.mark();
      CharBuffer.allocate(0);
      CharBuffer.wrap(charArray0);
      CharBuffer charBuffer9 = charBuffer8.compact();
      CharBuffer charBuffer10 = CharBuffer.allocate(0);
      charBuffer9.flip();
      CharBuffer.allocate('\u001A');
      CharBuffer charBuffer11 = CharBuffer.allocate(0);
      charBuffer10.flip();
      charBuffer5.mark();
      charBuffer11.codePoints();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      Function<String, String> function0 = Function.identity();
      Function<String, String> function1 = unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function2).apply(any());
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      function1.compose((Function<? super Integer, ? extends String>) function4);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      function4.compose((Function<? super String, ?>) unaryOperator2);
      Function<String, String> function5 = unaryOperator0.andThen((Function<? super String, ? extends String>) function1);
      Function<Object, String> function6 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function3);
      function4.apply(function5);
      function6.compose((Function<? super Object, ?>) function3);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function7 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function6);
      function7.apply((Object) null);
      unaryOperator4.apply((String) null);
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      function8.apply(function1);
      unaryOperator4.andThen((Function<? super String, ? extends String>) function1);
      UnaryOperator.identity();
      function8.apply(unaryOperator0);
      Function.identity();
      Integer integer0 = new Integer((-484));
      jSTerm0.add((Object) integer0);
      UnaryOperator.identity();
      Integer integer1 = new Integer((-484));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function<String, String> function1 = unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function2).apply(any());
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      function1.compose((Function<? super Integer, ? extends String>) function4);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<String, String> function5 = unaryOperator0.andThen((Function<? super String, ? extends String>) function1);
      Function<Object, String> function6 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function3);
      function4.apply(function5);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function7 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function6);
      function7.apply((Object) null);
      unaryOperator4.apply((String) null);
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      function8.apply(function1);
      unaryOperator4.andThen((Function<? super String, ? extends String>) function1);
      UnaryOperator.identity();
      function8.apply(unaryOperator0);
      Function.identity();
      Integer integer0 = new Integer((-484));
      jSTerm0.add((Object) integer0);
      UnaryOperator.identity();
      Integer integer1 = new Integer(3475);
      Integer integer2 = new Integer((-1143529242));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[12];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.chars();
      charBuffer0.order();
      CharBuffer charBuffer1 = charBuffer0.put(charArray0);
      CharBuffer charBuffer2 = charBuffer1.compact();
      charBuffer2.chars();
      CharBuffer charBuffer3 = charBuffer2.put(charArray0);
      CharBuffer charBuffer4 = charBuffer0.asReadOnlyBuffer();
      charBuffer3.clear();
      CharBuffer charBuffer5 = charBuffer1.slice();
      charBuffer3.rewind();
      charBuffer2.asReadOnlyBuffer();
      charBuffer2.chars();
      CharBuffer charBuffer6 = charBuffer1.put("GTiNJ");
      charBuffer5.codePoints();
      charBuffer3.clear();
      charBuffer4.mark();
      charBuffer6.append((CharSequence) charBuffer1);
      CharBuffer charBuffer7 = charBuffer0.duplicate();
      charBuffer7.mark();
      CharBuffer charBuffer8 = charBuffer4.get(charArray0, 0, 0);
      CharBuffer.wrap(charArray0);
      CharBuffer charBuffer9 = charBuffer7.compact();
      charBuffer9.flip();
      CharBuffer.allocate('9');
      CharBuffer charBuffer10 = charBuffer3.put(0, '9');
      charBuffer8.mark();
      charBuffer5.mark();
      charBuffer10.codePoints();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      char[] charArray0 = new char[12];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.order();
      CharBuffer charBuffer1 = charBuffer0.put(charArray0);
      CharBuffer charBuffer2 = charBuffer1.compact();
      charBuffer2.chars();
      CharBuffer charBuffer3 = charBuffer2.put(charArray0);
      CharBuffer charBuffer4 = charBuffer0.asReadOnlyBuffer();
      charBuffer1.flip();
      CharBuffer charBuffer5 = charBuffer1.slice();
      charBuffer3.rewind();
      CharBuffer charBuffer6 = charBuffer2.asReadOnlyBuffer();
      CharBuffer charBuffer7 = charBuffer5.put("epu");
      charBuffer0.codePoints();
      CharBuffer charBuffer8 = charBuffer1.put("=J)g");
      charBuffer5.codePoints();
      charBuffer3.clear();
      charBuffer8.rewind();
      charBuffer4.rewind();
      CharBuffer charBuffer9 = charBuffer8.append((CharSequence) charBuffer1);
      charBuffer7.chars();
      CharBuffer charBuffer10 = charBuffer9.duplicate();
      charBuffer9.rewind();
      CharBuffer.allocate(17);
      CharBuffer.allocate(17);
      CharBuffer charBuffer11 = charBuffer10.compact();
      CharBuffer charBuffer12 = CharBuffer.allocate(17);
      charBuffer11.flip();
      CharBuffer.allocate('\"');
      CharBuffer charBuffer13 = CharBuffer.allocate(17);
      charBuffer12.flip();
      charBuffer6.clear();
      charBuffer13.codePoints();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(0, stringBuffer0.length());
  }
}
