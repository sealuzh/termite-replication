/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 16:50:46 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5610752965144479
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(Y)X*T");
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      System.setCurrentTimeMillis((-1011L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(4211L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(263L);
      System.setCurrentTimeMillis(263L);
      System.setCurrentTimeMillis(2554L);
      System.setCurrentTimeMillis(1698L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-183L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1698L);
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("(Y)X*T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSPredicateForm1.JSPredicateFormInit(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2642170798864445
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(Y)X*T");
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm1.spliterator();
      jSPredicateForm0.spliterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm3.clonePF();
      jSPredicateForm1.equals(jSPredicateForm0);
      JSPredicateForm jSPredicateForm6 = jSPredicateForm3.standarizerPredicateForm();
      jSPredicateForm5.isEmpty();
      JSPredicateForm jSPredicateForm7 = jSPredicateForm4.clonePF();
      jSPredicateForm2.print();
      Integer integer0 = new Integer((-885));
      jSSubstitution0.addElement(integer0);
      jSPredicateForm7.equals(jSPredicateForm7);
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      StringReader stringReader0 = new StringReader("(Y)X*T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm8 = new JSPredicateForm(streamTokenizer0);
      jSPredicateForm8.print();
      jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm6.print();
      boolean boolean0 = jSPredicateForm6.equals(jSPredicateForm3);
      assertNotSame(jSPredicateForm1, jSPredicateForm2);
      assertNotSame(jSPredicateForm6, jSPredicateForm4);
      assertTrue(boolean0);
      assertNotSame(jSPredicateForm3, jSPredicateForm1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8y3a<t8");
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2774L);
      System.setCurrentTimeMillis(1L);
      stringReader0.close();
      System.setCurrentTimeMillis((-546L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(783L);
      System.setCurrentTimeMillis((-2));
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5865676099738395
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pk");
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.reset();
      jSTerm0.add((Object) "not");
      jSTerm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSTerm0.toStr();
      jSTerm0.add((Object) jSPredicateForm1);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm0.standarizerPredicateForm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar(93);
      jSPredicateForm1.equals(jSPredicateForm0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.clonePF();
      jSPredicateForm1.print();
      jSPredicateForm0.equals(jSPredicateForm1);
      jSPredicateForm0.standarizerPredicateForm();
      JSJshopVars.lessT = 33;
      JSPredicateForm jSPredicateForm5 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm4.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm6 = jSPredicateForm4.standarizerPredicateForm();
      JSSubstitution jSSubstitution1 = jSPredicateForm6.matches(jSPredicateForm5, jSSubstitution0);
      jSPredicateForm1.trimToSize();
      jSPredicateForm2.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm7 = null;
      try {
        jSPredicateForm7 = new JSPredicateForm("I'x7!:tn9nx_Tm!h1");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8y3a<t8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.trimToSize();
      streamTokenizer1.ordinaryChars((-20605404), (-20605404));
      stringReader0.skip((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("T[)X");
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("()p;9s6o]wfI");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 49;
      Integer integer0 = new Integer(49);
      jSTerm0.add((Object) integer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(1L);
      StringReader stringReader0 = new StringReader("8y3a<t8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply((String) null);
      unaryOperator0.apply((String) null);
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.0;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1437544352759472
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Si?,zivn=^KS");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.quoteChar((-4));
      stringReader0.ready();
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.lowerCaseMode(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nextToken();
      jSTerm0.clonePF();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChar((-1));
      streamTokenizer0.ordinaryChar((-1));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-1), (-1));
      streamTokenizer0.commentChar((-1));
      streamTokenizer0.ordinaryChars((-1), (-1));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.slashStarComments(true);
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.quoteChar((-1));
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("(%%%%%% )", stringBuffer0.toString());
      
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      assertNotSame(jSPredicateForm0, jSPredicateForm2);
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm1));
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.082419860281196
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Si?,zivn=^KS");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.quoteChar((-4));
      stringReader0.ready();
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nextToken();
      jSTerm0.clonePF();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ordinaryChar((-1));
      streamTokenizer1.ordinaryChar((-1));
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ordinaryChars((-1), (-1));
      streamTokenizer1.commentChar((-1));
      streamTokenizer1.parseNumbers();
      streamTokenizer0.slashStarComments(true);
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.quoteChar((-1));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.quoteChar((-1));
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      assertEquals("[%%%, [%%%]]", jSPredicateForm1.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z 1~u4m]]2<oG7");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.lowerCaseMode(true);
      jSTerm1.add((Object) jSTerm0);
      streamTokenizer0.wordChars((-2), (-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.ensureCapacity((-2));
      jSTerm1.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.lessT = 61;
      jSPredicateForm0.setSize(62);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9009380667038056
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z w~u4m]]2<oG7");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-1159198978));
      streamTokenizer0.commentChar((-1434408947));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.clonePF();
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars((-4), (-1159198978));
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer1.quoteChar(32);
      streamTokenizer0.slashSlashComments(true);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
      
      jSPredicateForm0.print();
      assertEquals(2, jSPredicateForm0.size());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.coma = 2033;
      jSPredicateForm0.add((Object) "SKv$;9x(N}qch-");
      jSPredicateForm0.add((Object) "SKv$;9x(N}qch-");
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8y3zva<t8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.add((Object) stringReader0);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      stringReader0.reset();
      String string0 = "?uvs";
      StringReader stringReader1 = new StringReader("?uvs");
      int int0 = 1299;
      CharBuffer.allocate(1299);
      streamTokenizer0.ordinaryChars((-451), (-2));
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z w~u4m]]2<oG7");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.quoteChar((-4));
      stringReader0.ready();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.addElement(stringReader0);
      jSTerm0.isGround();
      jSTerm0.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Uvs");
      StringReader stringReader0 = new StringReader("Uvs");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-2184));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) null);
      jSTerm0.add((Object) jSTerm1);
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Uvs";
      objectArray0[1] = object1;
      objectArray0[4] = object1;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = object1;
      Object object2 = new Object();
      jSTerm0.add(object2);
      System.setCurrentTimeMillis(1536L);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Mot");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      System.setCurrentTimeMillis((-1031L));
      System.setCurrentTimeMillis((-1117L));
      System.setCurrentTimeMillis((-1117L));
      System.setCurrentTimeMillis(15L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1196L));
      Function<String, String> function0 = Function.identity();
      Function<Integer, String> function1 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(anyInt());
      Function<Integer, String> function2 = function0.compose((Function<? super Integer, ? extends String>) function1);
      Integer integer0 = new Integer((-316615619));
      function2.apply(integer0);
      Function<Object, Object> function3 = Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function6 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function6);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Object, String> function8 = function2.compose((Function<? super Object, ? extends Integer>) function7);
      function3.apply(jSTerm0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ? extends String>) function8);
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      unaryOperator1.apply("m");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null, jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(49);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("r{s|s`SB");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) null);
      stringReader0.reset();
      StringReader stringReader1 = new StringReader(">=");
      // Undeclared exception!
      try { 
        jSTerm1.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(613);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("not");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0238736061572697
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z 1~u4m]]2<oG7");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      stringReader0.mark(1666);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      streamTokenizer1.lowerCaseMode(true);
      jSTerm1.add((Object) jSTerm0);
      streamTokenizer1.wordChars(32, 32);
      streamTokenizer1.wordChars(32, 32);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.ensureCapacity((-2));
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SystemInUtil.addInputLine(";kPu7PksX~%El");
      SystemInUtil.addInputLine("m");
      SystemInUtil.addInputLine(";kPu7PksX~%El");
      SystemInUtil.addInputLine("m");
      SystemInUtil.addInputLine("kp");
      SystemInUtil.addInputLine("m");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(:kLK!a`6.f?");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "not";
      int int0 = 613;
      Integer integer0 = new Integer(613);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pcc:k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(1, 1);
      int int0 = 584;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("pcc:k");
      stringReader1.reset();
      stringReader1.read();
      stringReader1.ready();
      jSTerm0.add((Object) "pcc:k");
      stringReader1.reset();
      StringReader stringReader2 = new StringReader("43~lWqo{LP6");
      stringReader0.ready();
      stringReader0.reset();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Mot");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis((-1117L));
      System.setCurrentTimeMillis(15L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1196L));
      Function<String, String> function0 = Function.identity();
      Function<Integer, String> function1 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(anyInt());
      Function<Integer, String> function2 = function0.compose((Function<? super Integer, ? extends String>) function1);
      Integer integer0 = new Integer((-316615619));
      function2.apply(integer0);
      Function<Object, Object> function3 = Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super String, ?>) function0);
      Function.identity();
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function6 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function6);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      Function.identity();
      function2.compose((Function<? super Object, ? extends Integer>) function7);
      JSTerm jSTerm1 = (JSTerm)function3.apply(jSTerm0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      unaryOperator1.compose((Function<? super Integer, ? extends String>) function2);
      unaryOperator1.andThen((Function<? super String, ?>) function3);
      unaryOperator1.apply("nDlC$~U5f|%J_X}HpF%");
      jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(49);
      jSTerm0.add((Object) integer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8y3a<t8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      stringReader0.reset();
      String string0 = "?uvs";
      StringReader stringReader1 = new StringReader("?uvs");
      int int0 = 1274;
      CharBuffer charBuffer0 = CharBuffer.allocate(1274);
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      // Undeclared exception!
      try { 
        charBuffer0.put(charBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Uvs");
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(244L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(244L);
      System.setCurrentTimeMillis(1871L);
      System.setCurrentTimeMillis(1871L);
      System.setCurrentTimeMillis(1336L);
      System.setCurrentTimeMillis(1871L);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2346791997877273
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(Y)X*T");
      System.setCurrentTimeMillis((-1011L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(4211L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2949L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(263L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-29L));
      System.setCurrentTimeMillis(2538L);
      System.setCurrentTimeMillis(1698L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-183L));
      System.setCurrentTimeMillis((-183L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-183L));
      System.setCurrentTimeMillis((-183L));
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      boolean boolean0 = jSPredicateForm0.equals(jSPredicateForm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5094656225315988
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z w~u4m]]2<oG7");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-1159198978));
      streamTokenizer0.quoteChar((-1));
      streamTokenizer0.commentChar((-1434408947));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.clonePF();
      streamTokenizer1.whitespaceChars((-1434408947), (-30807500));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.parseNumbers();
      jSTerm0.add((Object) null);
      streamTokenizer1.quoteChar((-1434408947));
      streamTokenizer0.slashSlashComments(true);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Uvs");
      StringReader stringReader0 = new StringReader("Uvs");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Uvs";
      objectArray0[1] = object1;
      objectArray0[4] = object1;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = object1;
      Object object2 = new Object();
      jSTerm0.add(object2);
      System.setCurrentTimeMillis(1536L);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1064801542156266
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(Y)X*T");
      System.setCurrentTimeMillis((-1011L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(4211L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2949L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(263L);
      System.setCurrentTimeMillis(263L);
      System.setCurrentTimeMillis((-29L));
      System.setCurrentTimeMillis(2554L);
      System.setCurrentTimeMillis(1698L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-183L));
      System.setCurrentTimeMillis((-183L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1698L);
      System.setCurrentTimeMillis(0L);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("(Y)", stringBuffer0.toString());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("LzkR$(!Gh?");
      char[] charArray0 = new char[6];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.sval = "LzkR$(!Gh?";
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.commentChar(6);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChars('L', (-1807));
      streamTokenizer0.commentChar('$');
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChar((-1807));
      streamTokenizer0.ordinaryChar((-1807));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.wordChars((-1807), (-4));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.ordinaryChar('L');
      streamTokenizer1.commentChar('R');
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer0.commentChar(6);
      streamTokenizer2.sval = "LzkR$(!Gh?";
      streamTokenizer2.ordinaryChar(6);
      streamTokenizer1.resetSyntax();
      streamTokenizer2.nextToken();
      streamTokenizer2.commentChar((-1109655829));
      stringReader0.close();
      streamTokenizer2.pushBack();
      streamTokenizer0.whitespaceChars(40, (-1807));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer2);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long long0 = 1050L;
      System.setCurrentTimeMillis(1050L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Integer integer0 = new Integer((-3711));
      jSPredicateForm0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Uvs");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.add((Object) jSSubstitution0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) comparator0;
      jSTerm0.toArray(objectArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1064801542156266
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(Y)X*T");
      System.setCurrentTimeMillis((-1011L));
      System.setCurrentTimeMillis((-29L));
      System.setCurrentTimeMillis(4211L);
      JSJshopVars.equalT = 787;
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2949L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(263L);
      System.setCurrentTimeMillis(263L);
      System.setCurrentTimeMillis((-29L));
      System.setCurrentTimeMillis(2554L);
      System.setCurrentTimeMillis(1708L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2554L);
      jSPredicateForm0.setSize(1607);
      System.setCurrentTimeMillis((-1011L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-183L));
      System.setCurrentTimeMillis((-183L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(263L);
      System.setCurrentTimeMillis(1708L);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8y3a<t8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Integer, Object> function3 = unaryOperator1.compose((Function<? super Integer, ?>) function2);
      Function.identity();
      Function<String, String> function4 = Function.identity();
      unaryOperator2.andThen((Function<? super Integer, ?>) function3);
      Function<String, String> function5 = Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function4);
      unaryOperator0.andThen((Function<? super String, ?>) function0);
      Function.identity();
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      function2.andThen((Function<? super Integer, ?>) unaryOperator2);
      unaryOperator1.compose((Function<? super Integer, ?>) function3);
      Function.identity();
      Function<String, String> function6 = Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      function5.compose((Function<? super String, ? extends String>) function6);
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function7);
      unaryOperator3.compose((Function<? super Integer, ? extends String>) function8);
      Function.identity();
      Function<Integer, String> function9 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator3.compose((Function<? super Integer, ? extends String>) function9);
      unaryOperator3.andThen((Function<? super String, ?>) function5);
      unaryOperator3.apply("y/|kDB6Fi}b&@");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8[3aWI8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Integer, Object> function3 = unaryOperator1.compose((Function<? super Integer, ?>) function2);
      Function.identity();
      Function<String, String> function4 = Function.identity();
      Function<Integer, Object> function5 = unaryOperator2.andThen((Function<? super Integer, ?>) function3);
      function4.apply("Predicateform.print(): 0 elements");
      Function<String, String> function6 = Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function4);
      unaryOperator0.andThen((Function<? super String, ?>) function0);
      Function.identity();
      unaryOperator0.apply("8[3aWI8");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      function2.andThen((Function<? super Integer, ?>) unaryOperator2);
      unaryOperator1.compose((Function<? super Integer, ?>) function5);
      Function.identity();
      Function<String, String> function7 = Function.identity();
      Function.identity();
      function6.compose((Function<? super String, ? extends String>) function7);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function9 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function8);
      unaryOperator0.compose((Function<? super Integer, ? extends String>) function9);
      Function.identity();
      Function<Integer, String> function10 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ? extends String>) function10);
      unaryOperator0.andThen((Function<? super String, ?>) function6);
      unaryOperator0.apply("y/|kDBq6Fi}b&@");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4659497192528061
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Uvs");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) "Uvs";
      objectArray0[4] = (Object) "Uvs";
      objectArray0[8] = (Object) jSSubstitution0;
      jSSubstitution0.add(objectArray0[3]);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSPredicateForm0.clear();
      jSTerm0.firstElement();
      SystemInUtil.addInputLine("Uvs");
      jSSubstitution0.add((Object) "Uvs");
      Comparator<JSPredicateForm> comparator0 = (Comparator<JSPredicateForm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.add(objectArray0[2]);
      Object object0 = new Object();
      jSTerm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8y3a<t8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Integer, Object> function3 = unaryOperator1.compose((Function<? super Integer, ?>) function2);
      Function.identity();
      Function<String, String> function4 = Function.identity();
      unaryOperator2.andThen((Function<? super Integer, ?>) function3);
      Function<String, String> function5 = Function.identity();
      stringReader0.ready();
      unaryOperator0.compose((Function<? super String, ? extends String>) function4);
      unaryOperator0.andThen((Function<? super String, ?>) function0);
      Function.identity();
      unaryOperator0.apply("8y3a<t8");
      UnaryOperator.identity();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      function2.andThen((Function<? super Integer, ?>) unaryOperator2);
      unaryOperator1.compose((Function<? super Integer, ?>) function3);
      Function.identity();
      Function<String, String> function6 = Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      function5.compose((Function<? super String, ? extends String>) function6);
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function7);
      unaryOperator3.compose((Function<? super Integer, ? extends String>) function8);
      Function.identity();
      Function<Integer, String> function9 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator3.compose((Function<? super Integer, ? extends String>) function9);
      unaryOperator3.andThen((Function<? super String, ?>) function5);
      unaryOperator3.apply("y/|kDBq6Fi}b&@");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      assertEquals("[8.0]", jSPredicateForm0.toString());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SystemInUtil.addInputLine("J/:{6?WtC(,sN");
      SystemInUtil.addInputLine("!");
      SystemInUtil.addInputLine("<%E");
      SystemInUtil.addInputLine("call ");
      SystemInUtil.addInputLine("!");
      SystemInUtil.addInputLine("umd.cs.shop.JSTerm");
      SystemInUtil.addInputLine(".C\"`Zfmj;6sE}");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) "call ");
      JSJshopVars.slash = 3961;
      jSPredicateForm0.print();
      assertEquals("[call ]", jSPredicateForm0.toString());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(1, 1);
      streamTokenizer0.whitespaceChars(584, (-1103715386));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("1.0");
      stringReader1.reset();
      stringReader1.read();
      String string0 = "43~l\\Wqo{LP6";
      stringReader1.ready();
      jSTerm0.add((Object) "1.0");
      stringReader1.reset();
      StringReader stringReader2 = new StringReader("43~lWqo{LP6");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Mot");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      function2.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function5 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function4);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function5);
      Function<String, String> function6 = Function.identity();
      function6.compose((Function<? super String, ? extends String>) function5);
      Function.identity();
      Function<Object, Integer> function7 = unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function2);
      unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function7);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      function2.compose((Function<? super JSTerm, ?>) unaryOperator1);
      Function<Object, Integer> function8 = unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function7);
      Function.identity();
      Function<Object, Integer> function9 = unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function1);
      function7.apply(function3);
      Function<Object, Integer> function10 = unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function9);
      function8.andThen((Function<? super Integer, ?>) unaryOperator4);
      unaryOperator1.compose((Function<? super Integer, ?>) function10);
      Function.identity();
      jSTerm0.clonePF();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Uvs");
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Uvs";
      objectArray0[1] = object1;
      objectArray0[2] = object1;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "Uvs";
      objectArray0[6] = object1;
      objectArray0[7] = (Object) comparator0;
      objectArray0[8] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      System.setCurrentTimeMillis(1152L);
      System.setCurrentTimeMillis(1152L);
      System.setCurrentTimeMillis(1152L);
      System.setCurrentTimeMillis((-1408L));
      jSTerm0.standarizerPredicateForm();
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lz?kR$(!Gh?");
      char[] charArray0 = new char[6];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.sval = "Lz?kR$(!Gh?";
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.commentChar(6);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChars('L', (-1807));
      streamTokenizer0.commentChar('$');
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChar((-1807));
      streamTokenizer0.ordinaryChar((-1807));
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.wordChars((-1807), (-4));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.ordinaryChar('L');
      streamTokenizer1.commentChar('R');
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer0.commentChar(6);
      streamTokenizer2.sval = ")FEa_O>sx9kjb}Z^&";
      streamTokenizer2.ordinaryChar(6);
      streamTokenizer1.resetSyntax();
      streamTokenizer2.commentChar(3210);
      streamTokenizer2.pushBack();
      streamTokenizer0.whitespaceChars((-4), (-1807));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lz?kR$(!Gh?");
      char[] charArray0 = new char[6];
      charArray0[4] = 'F';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.sval = "Lz?kR$(!Gh?";
      streamTokenizer0.commentChar(701);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChars(1, (-1811));
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer0.commentChar('$');
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChar((-1937));
      streamTokenizer0.nval = 2561.8684889249516;
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.ordinaryChar(701);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar((-1937));
      streamTokenizer1.slashStarComments(false);
      streamTokenizer3.eolIsSignificant(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(49);
      Integer integer1 = new Integer(49);
      jSTerm0.add((Object) integer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.iterator();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<String, String> function3 = Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<String, String> function4 = Function.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) function4);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function.identity();
      unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function1);
      function2.compose((Function<? super Object, ?>) function1);
      unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function6 = Function.identity();
      unaryOperator4.andThen((Function<? super Object, ?>) function6);
      Function<Object, String> function7 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function5);
      Function.identity();
      Function<Object, String> function8 = unaryOperator5.andThen((Function<? super Object, ? extends String>) function7);
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function8);
      function2.apply(function3);
      Function<Object, Object> function9 = function1.andThen((Function<? super Integer, ?>) function7);
      unaryOperator4.compose((Function<? super Integer, ?>) function9);
      Function.identity();
      Function.identity();
      unaryOperator2.andThen((Function<? super String, ?>) unaryOperator3);
      Function.identity();
      unaryOperator0.apply(":J");
      UnaryOperator.identity();
      unaryOperator2.apply("8y3a<t8");
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader(":J");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      jSTerm0.add((Object) "Uvs");
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(244L);
      System.setCurrentTimeMillis((-5221L));
      System.setCurrentTimeMillis((-1706L));
      System.setCurrentTimeMillis((-5221L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-5221L));
      System.setCurrentTimeMillis((-183L));
      System.setCurrentTimeMillis((-5221L));
      System.setCurrentTimeMillis((-5221L));
      System.setCurrentTimeMillis(2719L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[9];
      jSPredicateForm0.ensureCapacity(590);
      objectArray0[2] = (Object) jSPredicateForm0;
      objectArray0[3] = (Object) jSPredicateForm0;
      objectArray0[4] = (Object) jSPredicateForm0;
      objectArray0[5] = (Object) jSPredicateForm0;
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) jSPredicateForm0;
      objectArray1[1] = (Object) jSPredicateForm0;
      objectArray1[2] = (Object) jSPredicateForm0;
      jSPredicateForm0.toArray(objectArray1);
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(49);
      Integer integer1 = new Integer(49);
      jSTerm0.add((Object) integer1);
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SystemInUtil.addInputLine("/:{6?WtC(,sN");
      SystemInUtil.addInputLine("Predicateform.print(): 0 elements");
      SystemInUtil.addInputLine("Dz");
      SystemInUtil.addInputLine("Predicateform.print(): 0 elements");
      SystemInUtil.addInputLine((String) null);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clear();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8y3a<t8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Integer, Object> function3 = unaryOperator1.compose((Function<? super Integer, ?>) function2);
      Function.identity();
      Function<String, String> function4 = Function.identity();
      unaryOperator2.andThen((Function<? super Integer, ?>) function3);
      Function<String, String> function5 = Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function4);
      unaryOperator0.andThen((Function<? super String, ?>) function0);
      Function.identity();
      unaryOperator0.apply("8y3a<t8");
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      function2.andThen((Function<? super Integer, ?>) unaryOperator2);
      unaryOperator1.compose((Function<? super Integer, ?>) function3);
      Function.identity();
      Function<String, String> function6 = Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      function5.compose((Function<? super String, ? extends String>) function6);
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function7);
      unaryOperator3.compose((Function<? super Integer, ? extends String>) function8);
      Function.identity();
      Function<Integer, String> function9 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator3.compose((Function<? super Integer, ? extends String>) function9);
      unaryOperator3.andThen((Function<? super String, ?>) function5);
      unaryOperator3.apply("nzm9o6vr.");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("'*");
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator0);
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator2.andThen((Function<? super String, ?>) unaryOperator1);
      unaryOperator0.apply("'*");
      SystemInUtil.addInputLine(".<fyS");
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.apply(":J");
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator4.apply("!");
      unaryOperator3.apply("!");
      UnaryOperator.identity();
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("kklk");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      System.setCurrentTimeMillis(1050L);
      System.setCurrentTimeMillis(1050L);
      System.setCurrentTimeMillis(1050L);
      System.setCurrentTimeMillis(1050L);
      System.setCurrentTimeMillis(1050L);
      System.setCurrentTimeMillis(1050L);
      System.setCurrentTimeMillis(1050L);
      System.setCurrentTimeMillis((-361L));
      System.setCurrentTimeMillis(1050L);
      System.setCurrentTimeMillis((-1117L));
      System.setCurrentTimeMillis((-690L));
      System.setCurrentTimeMillis(1050L);
      System.setCurrentTimeMillis(15L);
      System.setCurrentTimeMillis(15L);
      System.setCurrentTimeMillis(1050L);
      System.setCurrentTimeMillis(641L);
      System.setCurrentTimeMillis((-361L));
      System.setCurrentTimeMillis((-361L));
      System.setCurrentTimeMillis((-400L));
      System.setCurrentTimeMillis(641L);
      System.setCurrentTimeMillis((-1457L));
      System.setCurrentTimeMillis((-361L));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Integer, Object> function3 = unaryOperator1.compose((Function<? super Integer, ?>) function2);
      Function.identity();
      Function.identity();
      unaryOperator2.andThen((Function<? super Integer, ?>) function3);
      Function<String, String> function4 = Function.identity();
      unaryOperator0.andThen((Function<? super String, ?>) function0);
      Function.identity();
      UnaryOperator.identity();
      function2.andThen((Function<? super Integer, ?>) unaryOperator2);
      unaryOperator1.compose((Function<? super Integer, ?>) function3);
      Function.identity();
      Function<String, String> function5 = Function.identity();
      function5.apply("rkp");
      Function<Object, JSTerm> function6 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.andThen((Function<? super String, ? extends JSTerm>) function6);
      Function.identity();
      function4.compose((Function<? super String, ? extends String>) function5);
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function7);
      function4.compose((Function<? super Integer, ? extends String>) function8);
      Function.identity();
      Function<Integer, String> function9 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ? extends String>) function9);
      unaryOperator0.andThen((Function<? super String, ?>) function4);
      unaryOperator0.apply("m0t");
      StringReader stringReader0 = new StringReader("73.0");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SystemInUtil.addInputLine("/:{6?WtC(,sN");
      SystemInUtil.addInputLine("&LnfSC,m");
      SystemInUtil.addInputLine(";kPuKP8s|~%El");
      SystemInUtil.addInputLine("z");
      SystemInUtil.addInputLine(";kPuKP8s|~%El");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("kMp");
      SystemInUtil.addInputLine("z");
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lz?kR$(Gh?");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SystemInUtil.addInputLine("/:{6?WtC(,sN");
      SystemInUtil.addInputLine("/:{6?WtC(,sN");
      SystemInUtil.addInputLine(";kPuKP8s|~%El");
      SystemInUtil.addInputLine("/:{6?WtC(,sN");
      SystemInUtil.addInputLine(";kPuKP8s|~%El");
      SystemInUtil.addInputLine("/:{6?WtC(,sN");
      SystemInUtil.addInputLine(";kPuKP8s|~%El");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("umd.cs.shop.JSTerm");
      SystemInUtil.addInputLine((String) null);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.print();
      assertTrue(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "(KkpK!x`6w.f?";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(KkpK!x`6w.f?");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("'*");
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator2.andThen((Function<? super String, ?>) unaryOperator1);
      unaryOperator0.apply("'*");
      SystemInUtil.addInputLine(".<fyS");
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.apply(":J");
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.apply("!");
      unaryOperator3.apply("!");
      StringReader stringReader0 = new StringReader(" : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(2326);
      streamTokenizer0.pushBack();
      streamTokenizer0.whitespaceChars(71, 71);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator2.andThen((Function<? super String, ?>) unaryOperator1);
      unaryOperator2.apply(":J");
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.apply(":J");
      unaryOperator3.apply("r]j*EP(@cCDN7Rs~");
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("'*");
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator2.andThen((Function<? super String, ?>) unaryOperator1);
      unaryOperator0.apply("'*");
      SystemInUtil.addInputLine(".<fyS");
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.apply(":J");
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.apply("!");
      unaryOperator3.apply(":J");
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(0, stringBuffer0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("'*");
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator2.andThen((Function<? super String, ?>) unaryOperator1);
      unaryOperator0.apply("'*");
      SystemInUtil.addInputLine("?%%%");
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.apply(":J");
      UnaryOperator.identity();
      unaryOperator0.apply("7*!");
      unaryOperator3.apply(":J");
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(0, stringBuffer0.length());
  }
}
