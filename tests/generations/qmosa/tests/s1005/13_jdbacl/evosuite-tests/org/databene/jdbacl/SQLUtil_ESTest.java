/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 17:46:01 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.List;
import java.util.Vector;
import java.util.function.ToIntFunction;
import javax.management.remote.JMXPrincipal;
import javax.security.auth.Subject;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.Predicate;
import org.apache.derby.impl.store.raw.RawStore;
import org.apache.derby.impl.store.raw.xact.ConcurrentXactFactory;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4824218484577005
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("innee", "insert", stringArray0, "innee", "YOEo6N1RX@la@^", stringArray0);
      assertEquals("innee join innee as YOEo6N1RX@la@^ on insert.null = YOEo6N1RX@la@^.null", string0);
      
      ConcurrentXactFactory concurrentXactFactory0 = new ConcurrentXactFactory();
      ConcurrentXactFactory concurrentXactFactory1 = new ConcurrentXactFactory();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("elter tableunque");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-502), (-578));
      stringReader0.ready();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.nval = 0.0;
      streamTokenizer1.ttype = (-578);
      streamTokenizer4.nval = (double) (-4);
      streamTokenizer3.ordinaryChar((-578));
      streamTokenizer0.commentChar((-1625));
      streamTokenizer2.wordChars((-1807488119), (-70437604));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer4);
      assertEquals("- 4", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.198792648156933
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLUtil.isProcedureCall("createGmaterialized viewb4dx2t");
      File file0 = MockFile.createTempFile("createGmaterialized viewb4dx2t", "createGmaterialized viewb4dx2t");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      mockPrintWriter0.print("createGmaterialized viewb4dx2t");
      mockPrintWriter0.print(0.0);
      mockPrintWriter0.print(53.70242F);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "createGmaterialized viewb4dx2t", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("jM ^lC-74NU", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      StringReader stringReader0 = new StringReader("|pLt^,O%$]5aU=B");
      stringReader0.markSupported();
      Character character0 = new Character('j');
      StringReader stringReader1 = new StringReader("5-'Qu2Ee");
      stringReader0.reset();
      stringReader0.skip(9223372036825200000L);
      stringReader0.read();
      stringReader0.read();
      stringReader0.ready();
      StringReader stringReader2 = new StringReader("|pLt^,O%$]5aU=B");
      StringReader stringReader3 = new StringReader("&lz");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      stringReader3.ready();
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.ttype = 124;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer3.nextToken();
      streamTokenizer1.ordinaryChar(409);
      streamTokenizer1.ordinaryChar((-2));
      streamTokenizer3.wordChars((-1), (-1278));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.slashStarComments(false);
      String string0 = SQLUtil.renderNumber(streamTokenizer3);
      assertEquals("5", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-5998), "update");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.toUnsignedLong((-2021963838));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("inner", defaultDBTable0, dBDataType0, integer0);
      DBDataType.getInstance((-2021963838), "update");
      Integer integer1 = RawTransaction.COMMIT;
      Integer.toUnsignedString((-2021963838));
      dBDataType0.isNumber();
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBColumn0.setDefaultValue("2273003458");
      Integer.getInteger("%~!hxQEc@agg)", (Integer) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Integer.getInteger("update", integer2);
      dBDataType0.isAlpha();
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger("34K)RWcd", integer4);
      Integer.remainderUnsigned((-2021963838), (-2021963838));
      SQLUtil.renderColumn(defaultDBColumn0);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      Integer integer5 = RawTransaction.LOCK_ESCALATE;
      Object object0 = new Object();
      Boolean boolean0 = new Boolean(false);
      StringBuilder stringBuilder0 = new StringBuilder("}{>?L2siGdYY^F0kIG");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("}{>?L2siGdYY^F0kIGUPDATE(3)", stringBuilder0.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3169392047597572
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLUtil.mutatesStructure("o<jzC11/6Gn, D");
      ConcurrentXactFactory concurrentXactFactory0 = new ConcurrentXactFactory();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[2] = (byte)65;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("alter t", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)26;
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" <=BE ParameterStatus(", dBSchema0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "%NJahJ`pAyu{";
      stringArray0[1] = " <=BE ParameterStatus(";
      stringArray0[2] = "o<jzC11/6Gn, D";
      stringArray0[3] = " <=BE ParameterStatus(";
      stringArray0[4] = " <=BE ParameterStatus(";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "%NJahJ`pAyu{", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("o<jzC11/6Gn, D", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) defaultDBTable0;
      objectArray0[2] = (Object) dBSchema0;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(dBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.derby.impl.services.uuid.BasicUUID";
      stringArray0[1] = "&tE--?";
      stringArray0[2] = "timeout after ";
      stringArray0[3] = "org.apache.derby.impl.services.uuid.BasicUUID";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ISDEF");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "timeout after ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "truncate");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ISDEF");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&tE--?");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "timeout after ");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(B$y>+2[WO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (B$y>+2[WO
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-5994), "update");
      Integer integer0 = RawTransaction.ABORT;
      Integer.toUnsignedLong((-2021963838));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("inner", defaultDBTable0, dBDataType0, integer0);
      Integer integer1 = RawTransaction.COMMIT;
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "select into", false, "inner");
      defaultDBColumn0.setNotNullConstraint(dBNotNullConstraint0);
      Integer.toUnsignedString(1729);
      Integer.getInteger("update", integer1);
      Integer.remainderUnsigned((-77919589), (-5994));
      SQLUtil.renderColumn(defaultDBColumn0);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      assertEquals(0, rowOutputBinary0.size());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.8229691200188713
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("=($x$)cQZm%}wI4<x");
      tableContainer0.getTables();
      tableContainer0.isIdentical(defaultDBTable0);
      tableContainer0.getSchema();
      tableContainer0.getTables();
      tableContainer0.getTable("=($x$)cQZm%}wI4<x");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/*", defaultDBTable0, 5, "vfp%n!T{cSR#r8M{");
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      SQLUtil.normalize("/*", false);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("ALTER TABLEUN");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/*";
      stringArray0[1] = "=($x$)cQZm%}wI4<x";
      stringArray0[2] = "ALTER TABLEUN";
      stringArray0[3] = "/*";
      // Undeclared exception!
      try { 
        defaultDBTable1.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'ALTER TABLEUN' has no foreign key with the columns (/*, =($x$)cQZm%}wI4<x, ALTER TABLEUN, /*)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-685), "ZY9Z?ji,2n~g");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer2 = new Integer((-1925));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ZY9Z?ji,2n~g", defaultDBTable0, dBDataType0, integer2, integer0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("FOREIGN KEY ", 90);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      StringBuffer stringBuffer0 = new StringBuffer("drop tableconstraint v[j27wpgns>-+3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gh{~pZ");
      String[] stringArray0 = new String[22];
      stringArray0[0] = "gh{~pZ";
      stringArray0[1] = "drop tableconstraint v[j27wpgns>-+3";
      stringArray0[2] = "gh{~pZ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "4lb){[$&g2uCO}0", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7741057932992024
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[3] = ".gE";
      DBDataType.getInstance((-685), "ISDEF");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer2 = new Integer((-685));
      int int0 = 34;
      Integer.min(34, (-592535071));
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "*oola;c", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("create unique index", false, dBUniqueConstraint0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("s RsFJ8jLamZt", true, dBUniqueConstraint0);
      dBUniqueIndex1.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter table*oola;ct", true, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.renderValue(defaultDBTable0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".gE", defaultDBTable0, 34, "ISDEF");
      StringBuilder stringBuilder0 = new StringBuilder(34);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(32, (-592535071));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KV]O%S`l");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KV]O%S`l");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KV]O%S`l");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KV]O%S`l");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KV]O%S`l");
      String string0 = " /*ux-+)t`9Jd/m:y";
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      SQLUtil.mutatesStructure(" /*ux-+)t`9Jd/m:y");
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLUtil.normalize("org.firebirdsql.gds.impl.jni.isc_db_handle_impl", false);
      SQLUtil.normalize("*/", true);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(559);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.derby.impl.services.uuid.BasicUUID";
      stringArray0[1] = "&tE--?";
      stringArray0[2] = "timeout after ";
      stringArray0[3] = "org.apache.derby.impl.services.uuid.BasicUUID";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "timeout after ", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(2807);
      NameSpec nameSpec0 = NameSpec.NEVER;
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      StringBuffer stringBuffer0 = new StringBuffer(2807);
      stringBuilder1.append(stringBuffer0);
      // Undeclared exception!
      try { 
        stringBuilder1.replace(1551, (-11), "timeout after ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("382Ig_xZp>/VjE~}");
      VersionNumber versionNumber1 = VersionNumber.valueOf("alter '!dexunique");
      VersionNumber versionNumber2 = VersionNumber.valueOf(".GE");
      versionNumber2.toString();
      versionNumber2.compareTo(versionNumber0);
      versionNumber2.compareTo(versionNumber1);
      versionNumber0.compareTo(versionNumber2);
      versionNumber2.toString();
      versionNumber0.toString();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("alter '!dexunique");
      jMXPrincipal0.equals(".GE");
      versionNumber0.toString();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("call", "Pp", versionNumber0);
      defaultDatabase0.getTable("call", false);
      VersionNumber.valueOf("u\"#pdae");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/w(G4l-]U0ZxE";
      stringArray0[2] = "?|";
      stringArray0[3] = "select intoc";
      SQLUtil.renderColumnListWithTableName("select intoc", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4125328745724541
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-685), "ZY9Z?ji,2n~g");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ZY9Z?ji,2n~g", defaultDBTable0, dBDataType0, integer0, integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3gD~EZ");
      mockPrintWriter0.print("<{UrMF2g&pZhAB!");
      PrintWriter printWriter0 = mockPrintWriter0.append('\u008B');
      printWriter0.write((-685));
      char[] charArray0 = new char[4];
      charArray0[1] = '\u008B';
      charArray0[1] = '\u008B';
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("3gD~EZ");
      charArray0[2] = '\u008B';
      printWriter0.println((float) (-685));
      charArray0[3] = '\u008B';
      printWriter0.print(charArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.write("ZY9Z?ji,2n~g");
      mockPrintWriter2.write("<{UrMF2g&pZhAB!", (-2), (-2));
      printWriter0.print((double) (-685));
      mockPrintWriter2.append(')');
      mockPrintWriter2.println("ZY9Z?ji,2n~g");
      mockPrintWriter2.print("jM ^lC-74NU");
      mockPrintWriter0.print(0.0);
      mockPrintWriter0.print((float) (-685));
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter2);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1959));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1959
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalOr(true, false);
      Boolean.compare(true, false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sele$t", (DBTable) null, (-2672), "slectop_al");
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.isUnique();
      Boolean.compare(true, true);
      defaultDBColumn0.setVersionColumn(false);
      defaultDBColumn0.isIdentical(dBColumnArray0[0]);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.setVersionColumn(true);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.isIdentical(dBColumnArray0[3]);
      defaultDBColumn0.equals(dBColumnArray0[2]);
      Object object0 = new Object();
      Boolean boolean1 = new Boolean(true);
      StringBuilder stringBuilder0 = new StringBuilder("");
      stringBuilder0.chars();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("SLECTOP_AL", stringBuilder0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLUtil.isProcedureCall("execub");
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("drop materialized view");
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = 'R';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'o';
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader("update");
      stringReader0.reset();
      stringReader0.markSupported();
      StringReader stringReader2 = new StringReader("fN");
      stringReader2.reset();
      StringReader stringReader3 = new StringReader("t^31>C(J/]\"NLu9K");
      stringReader3.read();
      stringReader3.read(charArray0);
      StringReader stringReader4 = new StringReader("updatet/3dvbg(");
      stringReader1.ready();
      stringReader3.ready();
      StringReader stringReader5 = new StringReader("Q]5A");
      stringReader0.read(charArray0);
      String string0 = SQLUtil.normalize("t^31>C(J/]\"NLu9K", false);
      assertEquals("t ^ 31 > C (J / ] \"NLu9K\"", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9495745057165772
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(2807);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "timeout after ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuffer stringBuffer0 = new StringBuffer(2807);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "timeout after ";
      stringArray0[1] = "NCLOB";
      stringArray0[2] = "timeout after ";
      stringArray0[3] = "NCLOB";
      stringArray0[4] = "NCLOB";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "NCLOB", true, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBUniqueConstraint0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("timeout after ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte) (-4);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      PrintWriter printWriter0 = mockPrintWriter0.append('@');
      printWriter0.println((double) 2807);
      printWriter0.print((float) 2807);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4196295521575855
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      SQLUtil.isDDL("org.apache.derby.impl.services.uuid.BasicUUID");
      stringArray0[0] = "org.apache.derby.impl.services.uuid.BasicUUID";
      stringArray0[1] = "&tE--?";
      stringArray0[3] = "org.apache.derby.impl.services.uuid.BasicUUID";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "timeout after ", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(2807);
      SQLUtil.isProcedureCall("timeout after ");
      StringBuffer stringBuffer0 = new StringBuffer(2807);
      StringBuilder stringBuilder1 = stringBuilder0.append("org.apache.derby.impl.services.uuid.BasicUUID");
      SQLUtil.normalize("&tE--?", false);
      SQLUtil.mutatesStructure("org.apache.derby.impl.services.uuid.BasicUUID");
      stringBuilder0.append(2189L);
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) "&tE--?", 1551, 2807);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 1551, end 2807, s.length() 6
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Predicate predicate0 = new Predicate();
      SQLUtil.renderValue(predicate0);
      String[] stringArray0 = null;
      SQLUtil.renderColumnNames((String[]) null);
      Random.setNextRandom(2);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      TableContainer tableContainer0 = new TableContainer("(Q");
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 9, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4713464134109886
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[3] = ".gE";
      stringArray0[4] = ".gE";
      stringArray0[5] = "";
      String[] stringArray1 = new String[16];
      stringArray1[0] = "";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".gE", (DBTable) null, 90039, "");
      defaultDBColumn0.toString();
      defaultDBColumn0.setDefaultValue(".gE");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.setDoc("");
      SQLUtil.renderColumnNames(dBColumnArray0);
      TableContainer tableContainer0 = new TableContainer("/*");
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultDBColumn0.setNullable(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(" <=BE BackendKeyData(pid=", (DBTable) null, (-3488), " on ");
      SQLUtil.mutatesStructure("");
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "org.apache.derby.impl.services.uuid.BasicUUID";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = "Arop materialized v+0wtv";
      String string2 = "EUO/*8xMg$n<TZ)Qm1";
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("EUO/*8xMg$n<TZ)Qm1");
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.773822483775196
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c},c1H~jFOQeat+.>bu", defaultDBTable0, 10, "c},c1H~jFOQeat+.>bu");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "alter materialized view";
      stringArray0[1] = ",i";
      stringArray0[2] = "alter materialized view";
      stringArray0[3] = "c},c1H~jFOQeat+.>bu";
      stringArray0[4] = "alter materialized view";
      SQLUtil.removeComments("alter materialized view");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter materialized view", true, "L", "REAL");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec1);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (alter materialized view, ,i, alter materialized view, c},c1H~jFOQeat+.>bu, alter materialized view)", string0);
      
      System.setCurrentTimeMillis(0L);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"alter materialized view\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("S%G6gH@zXIK3l#=", (String[]) null, "S%G6gH@zXIK3l#=", "-_]XWqql7[%$nH", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[2];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)95;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      stringArray0[0] = ".g";
      stringArray0[1] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) ".g = '.g' AND  = ''");
      genericDescriptorList0.elements();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1432136814444385
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[5] = "";
      String[] stringArray1 = new String[16];
      stringArray1[0] = "";
      StringBuilder stringBuilder0 = new StringBuilder(90032);
      SQLUtil.removeComments("drop tableelter tableunique");
      jdbcClob jdbcClob0 = new jdbcClob("drop tableelter tableunique");
      DBSchema dBSchema0 = new DBSchema("");
      DBPackage dBPackage0 = new DBPackage("drop tableelter tableunique", dBSchema0);
      dBSchema0.addPackage(dBPackage0);
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("", string0);
      
      SQLUtil.removeComments("$(Q");
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalOr(true, false);
      Boolean.compare(false, false);
      SQLUtil.mutatesStructure("execcreate materialized viewb4dx2t");
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("ALTER TABLE ");
      tableContainer0.addTable(defaultDBTable0);
      List<DBTable> list0 = tableContainer0.getTables();
      tableContainer0.getComponents();
      tableContainer0.toString();
      tableContainer0.setDoc("drop index");
      tableContainer0.removeTable(defaultDBTable0);
      tableContainer0.getTables(false, list0);
      tableContainer0.isIdentical(defaultDBTable0);
      tableContainer0.setDoc("drop index");
      tableContainer0.getTables(false);
      tableContainer0.getSchema();
      tableContainer0.getTable("exit ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("left", defaultDBTable0, (-685), "selecttimeout 9fdter");
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("ALTER TABLE ", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("ALTER TABLE ");
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      rowOutputBinary0.writeChar((-2181));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)4;
      RowOutputBinary rowOutputBinary1 = new RowOutputBinary(byteArray0);
      jdbcClob jdbcClob0 = new jdbcClob(" CHECK");
      jdbcClob jdbcClob1 = new jdbcClob("ALTER TABLE ");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[0] = "mCtlE':CX!";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("execcreategmaterialized viewb4dx2t", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      StringBuilder stringBuilder0 = new StringBuilder(90013);
      Vector<DBColumn> vector0 = new Vector<DBColumn>(290, 2604);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      vector0.sort(comparator0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[3] = ".gE";
      String[] stringArray1 = new String[8];
      stringArray1[0] = ".gE";
      stringArray1[1] = ".gE";
      stringArray1[2] = ".gE";
      stringArray1[3] = ".gE";
      stringArray1[4] = ".gE";
      stringArray1[5] = ".gE";
      stringArray1[6] = ".gE";
      stringArray1[7] = ".gE";
      // Undeclared exception!
      try { 
        SQLUtil.join(".gE", ".gE", stringArray1, ".gE", ".gE", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "selectselectop_allocate_statement";
      SQLUtil.isQuery("selectselectop_allocate_statement");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      CharArrayWriter charArrayWriter3 = new CharArrayWriter();
      charArrayWriter1.flush();
      charArrayWriter2.append('C');
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      // Undeclared exception!
      try { 
        charArrayWriter1.write(charArray0, 96, (-1908874352));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6969987794394548
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("'CREATE'");
      dBSchema0.getSequences(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ic");
      SQLUtil.isDDL("{Zd=\":");
      SQLUtil.removeComments("K,nDXb2b?ln");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("REGEXP_REPLACE", 110);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.derby.impl.services.uuid.BasicUUID";
      stringArray0[1] = "org.apache.derby.impl.services.uuid.BasicUUID";
      stringArray0[2] = "timeout after ";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "timeout after ", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(2807);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      StringBuffer stringBuffer0 = new StringBuffer(2807);
      // Undeclared exception!
      try { 
        stringBuffer0.append((CharSequence) "org.apache.derby.impl.services.uuid.BasicUUID", 2807, 2807);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 2807, end 2807, s.length() 45
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      RawStore rawStore0 = new RawStore();
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      Integer.toUnsignedString(1759);
      Integer.getInteger("update", integer1);
      // Undeclared exception!
      try { 
        SQLUtil.join("inner", "V|gi]iX:<MPL", (String[]) null, "V|gi]iX:<MPL", "create materialized viewalter tajleunique", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("deletezit]mh^R&v8vs@\"");
      jdbcClob jdbcClob1 = new jdbcClob("deletezit]mh^R&v8vs@\"");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "deletezit]mh^R&v8vs@\"";
      Object[] objectArray0 = new Object[6];
      objectArray0[4] = (Object) jdbcClob1;
      objectArray0[1] = (Object) jdbcClob1;
      objectArray0[2] = (Object) jdbcClob1;
      objectArray0[3] = (Object) "deletezit]mh^R&v8vs@\"";
      objectArray0[4] = (Object) "deletezit]mh^R&v8vs@\"";
      objectArray0[5] = (Object) jdbcClob0;
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getSystemSchemaDescriptor();
      TableDescriptor tableDescriptor0 = new TableDescriptor(dataDictionaryImpl0, (String) null, (SchemaDescriptor) null, 23003, 'g');
      ColumnDescriptorList columnDescriptorList0 = tableDescriptor0.getColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "timeout after ";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "timeout after ";
      stringArray0[4] = null;
      stringArray0[5] = "timeout after ";
      stringArray0[6] = null;
      stringArray0[7] = "timeout after ";
      stringArray0[8] = "timeout after ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      int int0 = 2807;
      StringBuilder stringBuilder0 = new StringBuilder(2807);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      StringBuffer stringBuffer0 = new StringBuffer(2807);
      stringBuilder1.append(stringBuffer0);
      int int1 = 1551;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(2807, '7');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLUtil.normalize("JW*d!", true);
      jdbcClob jdbcClob0 = new jdbcClob("JW * d !");
      jdbcClob jdbcClob1 = new jdbcClob("JW * d !");
      assertEquals(8L, jdbcClob1.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      SQLUtil.normalize("TrzJ5+N-'h", true);
      jdbcClob jdbcClob0 = new jdbcClob("d T<1y18i");
      jdbcClob jdbcClob1 = new jdbcClob("d T<1y18i");
      Random.setNextRandom((-700));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[18];
      stringArray0[5] = "";
      Boolean.logicalOr(false, false);
      Boolean.compare(false, false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&2I=GfZgdp`aj", (DBTable) null, 0, "sele$t");
      defaultDBColumn0.isUnique();
      Boolean.compare(true, false);
      defaultDBColumn0.setVersionColumn(false);
      defaultDBColumn0.isIdentical((DBObject) null);
      defaultDBColumn0.setVersionColumn(false);
      defaultDBColumn0.isIdentical((DBObject) null);
      defaultDBColumn0.equals((Object) null);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchemas();
      SQLUtil.typeAndName((DBObject) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char char0 = 'q';
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        charArrayWriter1.write((String) null, 1704, 1704);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7988457068767891
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[3] = ".gE";
      stringArray0[4] = ".gE";
      stringArray0[5] = "";
      String[] stringArray1 = new String[16];
      stringArray1[0] = "";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" NOT", (DBTable) null, 90039, "");
      Integer.valueOf((-1846));
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = new Integer((-1846));
      DBDataType dBDataType0 = DBDataType.getInstance((-1846), "oN");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("T%jM<Pr1+n", (DBTable) null, dBDataType0, integer0, integer1);
      Integer integer3 = RawTransaction.ABORT;
      int int0 = 335544437;
      Integer.max(335544437, (-357));
      Integer.getInteger(".gE", integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      Random.setNextRandom(335544437);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = "VALUE = ";
      DBUniqueConstraint dBUniqueConstraint0 = null;
      try {
        dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) null, "VALUE = ", false, stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueConstraint", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('j');
      int int0 = (-605);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLUtil.normalize("YF((WcwEkY/Tbm$", true);
      jdbcClob jdbcClob0 = new jdbcClob("55000");
      jdbcClob jdbcClob1 = new jdbcClob("55000");
      assertEquals(5L, jdbcClob1.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3381514637755787
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "updatet/3dvbg(");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "update");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "update");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "update");
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((-5248));
      System.setCurrentTimeMillis(176L);
      System.setCurrentTimeMillis(176L);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("updatet/3dvbg(", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("PEFjW@^WH", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "update";
      stringArray0[1] = "update";
      stringArray0[2] = "PEFjW@^WH";
      stringArray0[3] = "PEFjW@^WH";
      stringArray0[4] = "PEFjW@^WH";
      stringArray0[5] = "PEFjW@^WH";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM PEFjW@^WH WHERE update = 'update' AND update = 'update' AND PEFjW@^WH = 'PEFjW@^WH' AND PEFjW@^WH = 'PEFjW@^WH' AND PEFjW@^WH = 'PEFjW@^WH' AND PEFjW@^WH = 'PEFjW@^WH'", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.128183350293198
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.databene.jdbacl.SQLUtil";
      stringArray0[1] = "org.databene.jdbacl.SQLUtil";
      stringArray0[2] = "org.databene.jdbacl.SQLUtil";
      stringArray0[3] = "org.databene.jdbacl.SQLUtil";
      stringArray0[4] = "org.databene.jdbacl.SQLUtil";
      stringArray0[5] = "org.databene.jdbacl.SQLUtil";
      stringArray0[6] = "org.databene.jdbacl.SQLUtil";
      stringArray0[7] = "org.databene.jdbacl.SQLUtil";
      SQLUtil.innerJoin("org.databene.jdbacl.SQLUtil", stringArray0, "Wn+ZD]Y8,&x", "b", stringArray0);
      DBSequence dBSequence0 = new DBSequence("org.databene.jdbacl.SQLUtil", "org.databene.jdbacl.SQLUtil", "|IXLl]o#%S\"rdU");
      String[] stringArray1 = new String[4];
      stringArray1[0] = "|IXLl]o#%S\"rdU";
      stringArray1[1] = "";
      stringArray1[2] = "b";
      stringArray1[3] = "Wn+ZD]Y8,&x as b on org.databene.jdbacl.SQLUtil.org.databene.jdbacl.SQLUtil = b.org.databene.jdbacl.SQLUtil and org.databene.jdbacl.SQLUtil.org.databene.jdbacl.SQLUtil = b.org.databene.jdbacl.SQLUtil and org.databene.jdbacl.SQLUtil.org.databene.jdbacl.SQLUtil = b.org.databene.jdbacl.SQLUtil and org.databene.jdbacl.SQLUtil.org.databene.jdbacl.SQLUtil = b.org.databene.jdbacl.SQLUtil and org.databene.jdbacl.SQLUtil.org.databene.jdbacl.SQLUtil = b.org.databene.jdbacl.SQLUtil and org.databene.jdbacl.SQLUtil.org.databene.jdbacl.SQLUtil = b.org.databene.jdbacl.SQLUtil and org.databene.jdbacl.SQLUtil.org.databene.jdbacl.SQLUtil = b.org.databene.jdbacl.SQLUtil and org.databene.jdbacl.SQLUtil.org.databene.jdbacl.SQLUtil = b.org.databene.jdbacl.SQLUtil";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("", stringArray0, "", "drop materialized viewreplace", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[18];
      stringArray0[5] = "";
      String[] stringArray1 = new String[28];
      stringArray1[0] = "";
      StringBuilder stringBuilder0 = new StringBuilder(90039);
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      stringBuilder0.append(charArray0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition(stringArray0[0], stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-126143692), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -126143692
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Character character0 = Character.valueOf('&');
      SQLUtil.renderValue(character0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.4711150027132236
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      Boolean.compare(false, true);
      Character character0 = Character.valueOf('B');
      String string0 = SQLUtil.substituteMarkers("&ZB=$%U(%;^{&u$'", "org.hsqldb.Library.abs", character0);
      assertEquals("&ZB=$%U(%;^{&u$'", string0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = SQLUtil.mutatesStructure("select");
      assertFalse(boolean2);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7389896102893403
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLUtil.isDDL("UNIQUE ");
      DBDataType dBDataType0 = DBDataType.getInstance(2097152, "SEQUENCE_CATALOG");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" to=", (DBTable) null, dBDataType0, integer1);
      defaultDBColumn0.getNotNullConstraint();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer1, integer0);
      Integer.sum(45, (-2022041347));
      defaultDBColumn1.toString();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "UNIQUE ";
      stringArray0[1] = "";
      stringArray0[2] = " : SEQUENCE_CATALOG(1,3)";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      TableContainer tableContainer0 = new TableContainer("");
      defaultDBTable0.getIndex("fSiTb![E8@,");
      tableContainer0.getTable("insertd");
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("SEQUENCE_CATALOG", defaultDBTable0, 90039, " : SEQUENCE_CATALOG(1,3)");
      DBSchema dBSchema0 = new DBSchema("alter index");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("SEQUENCE_CATALOG", dBSchema0);
      // Undeclared exception!
      try { 
        defaultDBTable1.getColumn("(vQOmb-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '(vQOmb-' not found in table 'SEQUENCE_CATALOG'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "insert");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getArray(String)");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o(v3? yU+i`b1");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b\"v3 @`x");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("getArray(String)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "updatet/3dvbg(");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "update");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "update");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "update");
      String string0 = "o(v9? yyU^#`b*1TO";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o(v9? yyU^#`b*1TO");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("o(v9? yyU^#`b*1TO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: o(v9? yyU^#`b*1TO
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLUtil.removeComments("");
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(20);
      rowOutputBinary0.writeLong(0L);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[3];
      stringArray1[0] = "derby.slave.boot-";
      stringArray1[1] = "exec<eof>";
      stringArray1[2] = "exec<eof>";
      String string0 = SQLUtil.leftJoin("exec<eof>", stringArray0, "exec<eof>", "MM", stringArray1);
      assertEquals("left join exec<eof> as MM on ", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("create unique index`ml$l-v?_)g");
      jdbcClob jdbcClob1 = new jdbcClob("create unique index`ml$l-v?_)g");
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.0608333657846836
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KVZ]O%S`l");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KVZ]O%S`l");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KVZ]O%S`l");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "KVZ]O%S`l";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("KVZ]O%S`l", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      String string0 = "*/";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("FOREIGN KEY (KVZ]O%S`l) REFERENCES null(KVZ]O%S`l)");
      DBDataType dBDataType0 = DBDataType.getInstance(9, "drop indextv");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*/", defaultDBTable1, dBDataType0);
      defaultDBColumn0.toString();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("callb4dx2t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "select");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V2=Bi7?-(");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V2=Bi7?-(");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "o(v3? yU+i`b1");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-685), "ZY9Z?ji,2n~g");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = new Integer((-685));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ZY9Z?ji,2n~g", defaultDBTable0, dBDataType0, integer0, integer0);
      StringBuffer stringBuffer0 = new StringBuffer("ZY9Z?ji,2n~g");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3ghD~EZ");
      mockPrintWriter0.print("<{UrMF2g&pZhAB!");
      PrintWriter printWriter0 = mockPrintWriter0.append('y');
      printWriter0.write((-685));
      char[] charArray0 = new char[4];
      charArray0[1] = 'y';
      charArray0[1] = 'y';
      mockPrintWriter0.append('');
      charArray0[2] = 'y';
      printWriter0.println((float) (-685));
      charArray0[3] = 'y';
      printWriter0.print(charArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.write("ZY9Z?ji,2n~g");
      mockPrintWriter1.write("<{UrMF2g&pZhAB!", (-2), (-2));
      printWriter0.print((double) (-685));
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("3ghD~EZ");
      Random.setNextRandom(93);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "wd>!6Bl";
      stringArray0[1] = "3ghD~EZ";
      stringArray0[2] = "selectalter tajleunique";
      stringArray0[3] = "selectalter tajleunique";
      stringArray0[4] = "<{UrMF2g&pZhAB!";
      stringArray0[5] = "selectalter tajleunique";
      stringArray0[6] = "ZY9Z?ji,2n~g";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "selectalter tajleunique", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (wd>!6Bl, 3ghD~EZ, selectalter tajleunique, selectalter tajleunique, <{UrMF2g&pZhAB!, selectalter tajleunique, ZY9Z?ji,2n~g)", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("0rCAMha<|");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0rCAMha<|", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("`Ml$L-V?_)G");
      jdbcClob jdbcClob1 = new jdbcClob("`Ml$L-V?_)G");
      File file0 = FileUtil.canonicalFile("renamedrop table");
      File file1 = MockFile.createTempFile("`Ml$L-V?_)G", "c!fwcIr", file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file1);
      mockPrintWriter0.println(90.89135540157179);
      mockPrintWriter0.print((-1.0F));
      file0.getAbsoluteFile();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("=($x$)cQZm%}wI4<x");
      tableContainer0.addTable(defaultDBTable0);
      tableContainer0.getTables();
      tableContainer0.setDoc("=($x$)cQZm%}wI4<x");
      tableContainer0.isIdentical(defaultDBTable0);
      tableContainer0.getSchema();
      tableContainer0.getTable("=($x$)cQZm%}wI4<x");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/*", defaultDBTable0, 5, "vfp%n!T{cSR#r8M{");
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.postgresql.copy.CopyManager", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(5);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT org.postgresql.copy.CopyManager ", stringBuilder0.toString());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "deletezit]mh^R&v8vs@\"";
      SQLUtil.isDML("deletezit]mh^R&v8vs@\"");
      int int0 = (-679);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "deletezit]mh^R&v8vs@\"");
      int int1 = (-489);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        charArrayWriter1.write("deletezit]mh^R&v8vs@\"", (-679), (-489));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.substituteMarkers("", "] mj-};fQTO#s", "");
      SQLUtil.isQuery("] mj-};fQTO#s");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String string1 = "NivB/IXq[i]0";
      boolean boolean0 = true;
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("", false, "qN=#LV}\"Sq@[.l/H]H", "!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      SQLUtil.typeAndName(dBSchema0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      CharArrayWriter charArrayWriter3 = charArrayWriter0.append('~');
      charArrayWriter0.flush();
      char[] charArray0 = new char[0];
      charArrayWriter0.write(charArray0);
      CharArrayWriter charArrayWriter4 = new CharArrayWriter(335544595);
      charArrayWriter3.write("7mNGtd_h");
      charArrayWriter1.append('~');
      CharArrayWriter charArrayWriter5 = new CharArrayWriter();
      CharArrayWriter charArrayWriter6 = new CharArrayWriter(9);
      CharArrayWriter charArrayWriter7 = new CharArrayWriter();
      CharArrayWriter charArrayWriter8 = new CharArrayWriter(335544595);
      CharArrayWriter charArrayWriter9 = new CharArrayWriter();
      CharArrayWriter charArrayWriter10 = null;
      try {
        charArrayWriter10 = new CharArrayWriter((-1717986916));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1717986916
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchemas();
      SQLUtil.typeAndName(dBCatalog0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      CharArrayWriter charArrayWriter3 = charArrayWriter1.append('q');
      charArrayWriter0.flush();
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArrayWriter3.write(charArray0);
      int int0 = 335544595;
      CharArrayWriter charArrayWriter4 = new CharArrayWriter(335544595);
      // Undeclared exception!
      try { 
        charArrayWriter3.write((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("XSTB5.M", (String) null, (VersionNumber) null);
      defaultDatabase0.getTable((String) null, false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "XSTB5.M";
      stringArray0[2] = "$F";
      stringArray0[3] = null;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) defaultDatabase0;
      objectArray0[1] = (Object) "XSTB5.M";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "XSTB5.M";
      objectArray0[4] = (Object) "XSTB5.M";
      objectArray0[5] = (Object) "XSTB5.M";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "$F";
      objectArray0[8] = (Object) "$F";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      StringBuilder stringBuilder0 = new StringBuilder("2LFk-?#ra+iaN9%-");
      StringBuilder stringBuilder1 = stringBuilder0.insert(8, (Object) "a*7x|");
      stringBuilder0.append((CharSequence) stringBuilder1);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("2LFk-?#ra+iaN9%-", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.insert(2, false);
      stringBuilder3.replace(44, 44, "2LFk-?#ra+iaN9%-");
      assertEquals("2LfalseFk-?#ra*7x|a+iaN9%-2LFk-?#ra*7x|a+iaN2LFk-?#ra+iaN9%-9%- and 2LFk-?#ra+iaN9%-", stringBuilder3.toString());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.510636044292396
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "alter indexunique";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Y_{", false, "alter indexunique", "SyscolumnsIdentifier");
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      dBCheckConstraint0.setOwner(compositeDBObject0);
      String string1 = "N";
      dBCheckConstraint0.setDoc("N");
      dBCheckConstraint0.setDoc("SyscolumnsIdentifier");
      SQLUtil.mutatesDataOrStructure("alter tableunique");
      System.setCurrentTimeMillis(0L);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      SQLUtil.mutatesStructure("alter indexunique");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      int int0 = (-1);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.4187591973137939
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[3] = ".gE";
      stringArray0[5] = "chbeAteB";
      DBDataType dBDataType0 = DBDataType.getInstance(90039, ".gE");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.min(90039, 90039);
      Integer.max(90039, 90039);
      Integer.compareUnsigned(90039, 90039);
      dBDataType0.isAlpha();
      DBDataType.getInstance(90039, "alter ses sion");
      Integer.getInteger((String) null, integer0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".gE", (DBTable) null, dBDataType0);
      Integer.remainderUnsigned(90039, 90039);
      Integer.min(335544817, 335544817);
      defaultDBColumn0.toString();
      GDSType.getType(";R\"x>PSF");
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      Integer integer1 = new Integer(90039);
      Integer integer2 = new Integer(335544817);
      Integer.min((-54552646), 335544817);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) ";R\"x>PSF";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("update");
      ConcurrentXactFactory concurrentXactFactory0 = new ConcurrentXactFactory();
      assertFalse(concurrentXactFactory0.inDatabaseCreation());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5345041031552282
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[3] = ".gE";
      stringArray0[5] = "chbeAteB";
      DBDataType dBDataType0 = DBDataType.getInstance(90039, ".gE");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.min(90039, 90039);
      Integer.max(90039, 90039);
      Integer.compareUnsigned(90039, 90039);
      Integer.compareUnsigned(0, 90039);
      dBDataType0.isAlpha();
      DBDataType.getInstance(90039, "alter ses sion");
      Integer integer1 = Integer.getInteger((String) null, integer0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter ses sion", (DBTable) null, dBDataType0, integer1, integer1);
      Integer.remainderUnsigned(1555, 90039);
      Integer.divideUnsigned((-20680772), (-20680772));
      Integer.min(335544817, 335544817);
      dBDataType0.isAlpha();
      defaultDBColumn0.toString();
      GDSType.getType("HfQ^EWP:+aWB:DW,M]");
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      Integer integer2 = new Integer(90039);
      Integer integer3 = new Integer(335544817);
      Integer.min(1555, 335544817);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "HfQ^EWP:+aWB:DW,M]";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5345041031552282
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[3] = ".gE";
      stringArray0[5] = "chbeAteB";
      DBDataType dBDataType0 = DBDataType.getInstance(90039, ".gE");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.max(90039, 90039);
      Integer.compareUnsigned(90039, 90039);
      dBDataType0.isAlpha();
      DBDataType.getInstance(90039, "alter session");
      Integer.getInteger((String) null, integer0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".gE", (DBTable) null, dBDataType0, integer0);
      Integer.remainderUnsigned(1555, 90039);
      Integer.min(335544817, 335544817);
      dBDataType0.isAlpha();
      defaultDBColumn0.toString();
      GDSType.getType(";R\"x>PSF");
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      Integer integer1 = new Integer(90039);
      Integer integer2 = new Integer(335544817);
      Integer.min((-54552646), 335544817);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) ";R\"x>PSF";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(2174, "drop materialized viewb");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.ABORT;
      Integer.getInteger("CLOB");
      Integer.valueOf(144);
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      Integer.sum(41, (-1876));
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      Integer integer5 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", (DBTable) null, dBDataType0, integer4, integer5);
      Integer integer6 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBColumn0.setSize(integer6);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      Random.setNextRandom(228);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.derby.impl.services.uuid.BasicUUID";
      stringArray0[1] = "&tE--?";
      stringArray0[2] = "timeout after ";
      stringArray0[3] = "org.apache.derby.impl.services.uuid.BasicUUID";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "timeout after ", false, stringArray0);
      int int0 = 2807;
      StringBuilder stringBuilder0 = new StringBuilder(2807);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      StringBuffer stringBuffer0 = new StringBuffer(2807);
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      int int1 = 1551;
      stringBuilder0.append(2189L);
      // Undeclared exception!
      try { 
        stringBuilder2.append((CharSequence) "&tE--?", 1551, 2807);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 1551, end 2807, s.length() 6
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("_pU");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("_pU");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBDataType.getInstance((-3590), "#\"f9F7#W");
      MockFile mockFile0 = new MockFile("_pU");
      FileUtil.canonicalFile((File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "_pU";
      objectArray0[1] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format("C@+9Kfe", objectArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_pU";
      stringArray0[1] = "C@+9Kfe";
      stringArray0[2] = "bYV7/mn}5/H";
      stringArray0[3] = "C@+9Kfe";
      stringArray0[4] = "C@+9Kfe";
      stringArray0[5] = "#\"f9F7#W";
      stringArray0[6] = "C@+9Kfe";
      stringArray0[7] = "*rXo>l|$R4";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("*rXo>l|$R4", false, defaultDBTable1, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      SQLUtil.renderColumnNames(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("#\"f9F7#W");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("'}IgL,HTdf&2L\"a", stringBuilder0);
      char char0 = '@';
      // Undeclared exception!
      try { 
        stringBuilder1.insert(1999, '@');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[17];
      stringArray0[0] = "J*#HO";
      // Undeclared exception!
      try { 
        SQLUtil.normalize(stringArray0[1], true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[5] = "";
      String[] stringArray1 = new String[16];
      stringArray1[0] = "";
      StringBuilder stringBuilder0 = new StringBuilder(90039);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition(stringArray0[0], stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-126143692), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -126143692
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[18];
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "VTI");
      stringArray0[5] = "";
      String[] stringArray1 = new String[28];
      stringArray1[0] = "";
      String[] stringArray2 = new String[7];
      stringArray2[0] = "";
      stringArray2[1] = "";
      stringArray2[2] = "hmi(q'|I^$8&s";
      stringArray2[3] = "VTI";
      stringArray2[4] = "43X69.U";
      stringArray2[5] = "VTI";
      stringArray2[6] = "bLML,y:J8EeI";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("", stringArray1, "43X69.U", "bLML,y:J8EeI", stringArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "alter s");
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("executenosettings", dBSchema0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "alter s";
      stringArray0[2] = "m_Tnh'W$)_[t*\"";
      stringArray0[3] = "executenosettings";
      stringArray0[4] = "6W";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("6W", true, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBNonUniqueIndex0);
      assertEquals("executenosettings.6W", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.395709426084936
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-685), "ZY9Z?ji,2n~g");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer2 = new Integer((-1925));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ZY9Z?ji,2n~g", defaultDBTable0, dBDataType0, integer2, integer0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("FOREIGN KEY ", 90);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      StringBuffer stringBuffer0 = new StringBuffer("drop tableconstraint v[j27wpgns>-+3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gh{~pZ");
      mockPrintWriter0.append('r');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.write(" ADD ", (-2), (-2));
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop tableconstraint v[j27wpgns>-+3", defaultDBTable0, (-1925), " ADD ");
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ZY9Z?ji,2n~g";
      stringArray0[1] = ", ";
      stringArray0[2] = "null";
      stringArray0[3] = "gh{~pZ";
      stringArray0[4] = "3FPl&DzIQnO,850?jIK";
      stringArray0[5] = "ZY9Z?ji,2n~g";
      stringArray0[6] = " ADD ";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "KV]O%S`l";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KV]O%S`l");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KV]O%S`l");
      defaultDBTable0.getIndex("KV]O%S`l");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KV]O%S`l");
      int int0 = 350;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("KV]O%S`l", defaultDBTable0, 350, "&unknownLength=");
      defaultDBColumn0.getForeignKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder("&unknownLength=");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ConcurrentXactFactory concurrentXactFactory0 = new ConcurrentXactFactory();
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^&\"u0+)6p5PU*^3$5cU");
      StringReader stringReader1 = new StringReader("^&\"u0+)6p5PU*^3$5cU");
      stringReader1.skip(610L);
      stringReader0.read();
      stringReader1.ready();
      StringReader stringReader2 = new StringReader("");
      stringReader0.reset();
      stringReader1.read();
      stringReader1.ready();
      StringReader stringReader3 = new StringReader("rC[");
      StringReader stringReader4 = new StringReader("rC[");
      ConcurrentXactFactory concurrentXactFactory0 = new ConcurrentXactFactory();
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("yQ2");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "yQ2";
      stringArray0[1] = "yQ2";
      stringArray0[2] = "yQ2";
      stringArray0[3] = "yQ2";
      stringArray0[4] = "yQ2";
      stringArray0[5] = "yQ2";
      stringArray0[6] = "yQ2";
      stringArray0[7] = "yQ2";
      stringArray0[8] = "UNIQUE ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "yQ2", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("yQ2", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  PRIMARY KEY (yQ2, yQ2, yQ2, yQ2, yQ2, yQ2, yQ2, yQ2, UNIQUE )", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("alter sessionte--?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!giUZ3O$45U^W", dBSchema0);
      dBSchema0.removeTable(defaultDBTable0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("!giUZ3O$45U^W", defaultDBTable0, (DBDataType) null, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[5] = "";
      String[] stringArray1 = new String[16];
      stringArray1[0] = "";
      StringBuilder stringBuilder0 = new StringBuilder(90039);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-126143692), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -126143692
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o>,J");
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("slectop_al");
      char[] charArray0 = new char[2];
      stringReader1.skip(1121L);
      charArray0[0] = 'W';
      charArray0[1] = 'j';
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader("o>,J");
      char[] charArray1 = new char[7];
      stringReader2.reset();
      StringReader stringReader3 = new StringReader("5B_/u]Mum");
      stringReader2.read();
      stringReader1.reset();
      stringReader0.read(charArray0);
      StringReader stringReader4 = new StringReader("5B_/u]Mum");
      stringReader1.skip(7L);
      StringReader stringReader5 = new StringReader("o>,J");
      stringReader5.read(charArray1);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("$]-DN>MGVN`rc", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("=($x$)cQZm%}wI4<x");
      tableContainer0.addTable(defaultDBTable0);
      tableContainer0.getTables();
      tableContainer0.setDoc("=($x$)cQZm%}wI4<x");
      tableContainer0.isIdentical(defaultDBTable0);
      tableContainer0.getSchema();
      tableContainer0.getTable("=($x$)cQZm%}wI4<x");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/*", defaultDBTable0, 5, "vfp%n!T{cSR#r8M{");
      StringBuilder stringBuilder0 = new StringBuilder(5);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("selectic", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Boolean boolean0 = new Boolean("G)?W,J9*Q#3");
      SQLUtil.normalize("]3uwHrME21O1TP=$)YD", (boolean) boolean0);
      String[] stringArray0 = new String[18];
      stringArray0[0] = "]3uwHrME21O1TP=$)YD";
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[17];
      stringArray0[0] = "J*#HO";
      // Undeclared exception!
      try { 
        SQLUtil.normalize(stringArray0[1], false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0869615765973233
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[3] = ".gE";
      stringArray0[5] = "chbeAteB";
      DBDataType dBDataType0 = DBDataType.getInstance(90039, ".gE");
      Integer integer0 = new Integer(90039);
      Integer.max(90039, 90039);
      Integer.compareUnsigned(90039, 90039);
      dBDataType0.isAlpha();
      DBDataType dBDataType1 = DBDataType.getInstance(90039, "alter session");
      Integer.getInteger((String) null, integer0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".gE", (DBTable) null, dBDataType0, integer0);
      Integer.remainderUnsigned(1555, 90039);
      Integer.min(335544817, 335544817);
      dBDataType0.isAlpha();
      defaultDBColumn0.toString();
      GDSType.getType(";R\"x>PSF");
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      Integer integer1 = new Integer(90039);
      Integer integer2 = new Integer(9);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(".gE : .GE(90039)", (DBTable) null, dBDataType1, integer2, integer2);
      dBDataType0.isAlpha();
      Integer.compareUnsigned((-1138805253), 615);
      defaultDBColumn0.getNotNullConstraint();
      Integer.toUnsignedLong(1555);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[2] = ".gE";
      stringArray0[3] = ".gE";
      stringArray0[4] = ".gE";
      stringArray0[5] = "";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = ",";
      stringArray1[3] = "";
      stringArray1[4] = ".gE";
      stringArray1[5] = ".gE";
      stringArray1[6] = "";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      DBTrigger dBTrigger0 = new DBTrigger((String) null, dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      String[] stringArray2 = new String[6];
      stringArray2[0] = null;
      stringArray2[1] = "";
      stringArray2[2] = "";
      stringArray2[3] = "";
      stringArray2[4] = ".gE";
      stringArray2[5] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray2);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , .gE, )", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("_&AIu)S3(3~OwU,");
      tableContainer0.addTable(defaultDBTable0);
      List<DBTable> list0 = tableContainer0.getTables();
      tableContainer0.getComponents();
      tableContainer0.toString();
      tableContainer0.setDoc("drop index");
      tableContainer0.removeTable(defaultDBTable0);
      List<DBTable> list1 = tableContainer0.getTables(false, list0);
      tableContainer0.getTables(false, list1);
      tableContainer0.isIdentical(defaultDBTable0);
      tableContainer0.setDoc("drop index");
      tableContainer0.getTables(false);
      tableContainer0.getSchema();
      tableContainer0.getTable("exit ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("left", defaultDBTable0, (-685), "selecttimeout 9fdter");
      defaultDBColumn0.getNotNullConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("+@BWzf", (String[]) null, "tKu`2", "tKu`2", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "aA{'BpKDi";
      stringArray0[1] = "aA{'BpKDi";
      stringArray0[2] = "aA{'BpKDi";
      stringArray0[3] = "aA{'BpKDi";
      String string0 = SQLUtil.leftJoin("aA{'BpKDi", stringArray0, "M_d<0&PTr&", "npCXB=Z!S#K", stringArray0);
      assertEquals("left join M_d<0&PTr& as npCXB=Z!S#K on aA{'BpKDi.aA{'BpKDi = npCXB=Z!S#K.aA{'BpKDi and aA{'BpKDi.aA{'BpKDi = npCXB=Z!S#K.aA{'BpKDi and aA{'BpKDi.aA{'BpKDi = npCXB=Z!S#K.aA{'BpKDi and aA{'BpKDi.aA{'BpKDi = npCXB=Z!S#K.aA{'BpKDi", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      Integer.toUnsignedString(1759);
      Integer integer2 = RawTransaction.ABORT;
      // Undeclared exception!
      try { 
        SQLUtil.join("update", "V|gi]iX:<MPL", (String[]) null, "V|gi]iX:<MPL", "create mmteriaized viewalter tajleunique", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalOr(true, false);
      Boolean.compare(false, false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.derby.impl.store.access.btree.WaitError";
      stringArray0[1] = "0w";
      stringArray0[2] = "org.apache.derby.impl.store.access.btree.WaitError";
      stringArray0[3] = "select";
      stringArray0[4] = null;
      stringArray0[5] = "org.apache.derby.impl.store.access.btree.WaitError";
      stringArray0[6] = "insert";
      stringArray0[7] = "insert";
      SQLUtil.join((String) null, "org.apache.derby.impl.store.access.btree.WaitError", stringArray0, "5TgwQb[%_Rmo_|", "/oB@5?3zD", stringArray0);
      System.setCurrentTimeMillis(154L);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "]3uwHrME21O1TP=$)YD";
      String string1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("]3uwHrME21O1TP=$)YD", (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-5994), "updateNString(int, String)");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.toUnsignedLong((-5994));
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      Integer.toUnsignedString((-758));
      Integer.getInteger((String) null, integer2);
      Integer.remainderUnsigned((-77919589), (-77919589));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "update";
      stringArray0[1] = "4294966538";
      stringArray0[2] = "updateNString(int, String)";
      stringArray0[3] = "|h|";
      stringArray0[4] = "updateNString(int, String)";
      stringArray0[5] = "updateNString(int, String)";
      stringArray0[6] = null;
      String[] stringArray1 = new String[3];
      stringArray1[0] = "execute";
      stringArray1[1] = "update";
      stringArray1[2] = "updateNString(int, String)";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("+1OR%ebEB\"#qb&V<W8", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (update, 4294966538, updateNString(int, String), |h|, updateNString(int, String), updateNString(int, String), ) REFERENCES null(execute, update, updateNString(int, String))", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLUtil.substituteMarkers("\n]", "HMIE?", "-Jen");
      StringBuffer stringBuffer0 = new StringBuffer(5);
      char[] charArray0 = new char[3];
      charArray0[0] = '=';
      charArray0[1] = 'M';
      charArray0[2] = 'E';
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      Boolean.compare(false, true);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("C|xQ.XLwPa");
      Boolean.compare(true, true);
      jMXPrincipal0.getName();
      jMXPrincipal0.implies((Subject) null);
      jMXPrincipal0.equals(boolean0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";rQduok hf9YH";
      stringArray0[1] = ";rQduok hf9YH";
      stringArray0[3] = ",";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "insertslectop_allocate_statement";
      stringArray1[1] = ";rQduok hf9YH";
      stringArray1[2] = "create materialized viewnn4*la:zo.";
      stringArray1[3] = ",";
      stringArray1[4] = ",";
      stringArray1[5] = "%2Z";
      String string0 = SQLUtil.join(",", ";rQduok hf9YH", stringArray0, "insertslectop_allocate_statement", "create materialized viewnn4*la:zo.", stringArray1);
      assertEquals(", join insertslectop_allocate_statement as create materialized viewnn4*la:zo. on ;rQduok hf9YH.;rQduok hf9YH = create materialized viewnn4*la:zo..insertslectop_allocate_statement and ;rQduok hf9YH.;rQduok hf9YH = create materialized viewnn4*la:zo..;rQduok hf9YH and ;rQduok hf9YH.null = create materialized viewnn4*la:zo..create materialized viewnn4*la:zo. and ;rQduok hf9YH., = create materialized viewnn4*la:zo..,", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("'#Qg2Z");
      tableContainer0.getTable("fqaGi54Kcc:,<e");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = new Integer(267);
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.substituteMarkers("derby.product.external.name", "derby.product.external.name", integer0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.201793123629589
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z]+%S`l");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = " (";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" (", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.renderValue(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT \" (\" FOREIGN KEY ( () REFERENCES  (( ()", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = "O7*ge`1),'17j9";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "O7*ge`1),'17j9", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT O7*ge`1),'17j9 ", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "org.apache.derby.impl.services.uuid.BasicUUID";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.derby.impl.services.uuid.BasicUUID";
      stringArray0[1] = "&tE--?";
      stringArray0[2] = "timeout after ";
      stringArray0[3] = "org.apache.derby.impl.services.uuid.BasicUUID";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "timeout after ", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(2807);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      StringBuffer stringBuffer0 = new StringBuffer(2807);
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      stringBuilder1.append(4151.821F);
      stringBuilder0.append(2189L);
      // Undeclared exception!
      try { 
        stringBuilder2.append((CharSequence) "&tE--?", 1551, 2807);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 1551, end 2807, s.length() 6
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("<38TIg_xZp>/VjE~c}", false, "alter '!dexunique", "SyscolumnsIdentifier");
      DBCheckConstraint dBCheckConstraint1 = new DBCheckConstraint("alter '!dexunique", false, "alter '!dexunique", "SyscolumnsIdentifier");
      dBCheckConstraint1.setName("SyscolumnsIdentifier");
      dBCheckConstraint1.isEquivalent(dBCheckConstraint0);
      dBCheckConstraint0.isEquivalent(dBCheckConstraint1);
      dBCheckConstraint0.setDoc("C");
      dBCheckConstraint0.setDoc("SyscolumnsIdentifier");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint1, nameSpec0);
      Object object0 = new Object();
      StringBuilder stringBuilder1 = stringBuilder0.append(object0);
      int int0 = 92;
      stringBuilder1.append(92);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(92, (double) 92);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 92
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      RawStore rawStore0 = new RawStore();
      boolean boolean0 = new Boolean((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter table");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer.compareUnsigned(32, (-431));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer.sum(335544537, 5);
      TableContainer tableContainer0 = new TableContainer("=($x$)cQZm%}wI4<x");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(335544537);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('H');
      charArrayWriter1.write("oKoV;)YqZVs.6RX");
      CharArrayWriter charArrayWriter2 = charArrayWriter0.append('K');
      charArrayWriter2.append('?');
      CharArrayWriter charArrayWriter3 = new CharArrayWriter();
      CharArrayWriter charArrayWriter4 = new CharArrayWriter(335544537);
      CharArrayWriter charArrayWriter5 = new CharArrayWriter();
      CharArrayWriter charArrayWriter6 = new CharArrayWriter();
      CharArrayWriter charArrayWriter7 = new CharArrayWriter(11);
      CharArrayWriter charArrayWriter8 = new CharArrayWriter(11);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLUtil.isDML("createGmaterialized viewb4dx2t");
      Random.setNextRandom((-11));
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("execute(", 103);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "NBm$[");
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "NBm$[";
      stringArray0[2] = "NBm$[";
      stringArray0[3] = "NBm$[";
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      String string0 = SQLUtil.join("NBm$[", "&U", stringArray0, "NBm$[", "NBm$[", stringArray0);
      assertEquals("NBm$[ join NBm$[ as NBm$[ on &U.NBm$[ = NBm$[.NBm$[ and &U.null = NBm$[.null and &U.NBm$[ = NBm$[.NBm$[ and &U.NBm$[ = NBm$[.NBm$[ and &U.null = NBm$[.null and &U.null = NBm$[.null and &U.null = NBm$[.null", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Random.setNextRandom((-1175));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "elter tableunque";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "elter tableunque";
      stringArray1[1] = "<='&ji]+z6%dkV";
      String string0 = SQLUtil.innerJoin("elter tableunque", stringArray0, "", "S_%_@3h1Je{U Ad:", stringArray1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLUtil.normalize("", true);
      jdbcClob jdbcClob0 = new jdbcClob("");
      jdbcClob jdbcClob1 = new jdbcClob("insertalter tajleunique");
      assertEquals(23L, jdbcClob1.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      rowOutputBinary0.writeChar((-146652554));
      RowOutputBinary rowOutputBinary1 = new RowOutputBinary(byteArray0);
      rowOutputBinary0.writeUTF("elter tableunque");
      rowOutputBinary0.writeChar(1);
      rowOutputBinary1.setBuffer(byteArray0);
      RowOutputBinary rowOutputBinary2 = new RowOutputBinary(0);
      rowOutputBinary1.writeInt(2774);
      rowOutputBinary2.writeEnd();
      rowOutputBinary0.writeInt(2774);
      rowOutputBinary0.reset();
      rowOutputBinary1.write(byteArray0);
      rowOutputBinary0.write(byteArray0);
      RowOutputBinary rowOutputBinary3 = new RowOutputBinary(2);
      rowOutputBinary0.write(720);
      RowOutputBinary rowOutputBinary4 = new RowOutputBinary(0);
      rowOutputBinary3.writeLong(0);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c},c1H~jFOQeat+.>bu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.pushBack();
      stringReader0.ready();
      streamTokenizer0.slashSlashComments(true);
      String string0 = SQLUtil.normalize("c},c1H~jFOQeat+.>bu", true);
      assertEquals("c }, c1H ~ jFOQeat +.> bu", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String[] stringArray1 = new String[7];
      stringArray1[0] = stringArray0[5];
      stringArray1[2] = ",";
      String string0 = SQLUtil.renderValue(",");
      assertEquals("','", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      ConcurrentXactFactory concurrentXactFactory0 = new ConcurrentXactFactory();
      boolean boolean0 = SQLUtil.isDDL("alter materialized viewalter tajleunique");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("382Ig_xZp>/VjE~}");
      VersionNumber versionNumber1 = VersionNumber.valueOf("alter '!dexunique");
      versionNumber1.toString();
      versionNumber1.compareTo(versionNumber0);
      versionNumber1.compareTo(versionNumber1);
      versionNumber0.compareTo(versionNumber0);
      versionNumber0.toString();
      versionNumber0.toString();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("alter '!dexunique");
      jMXPrincipal0.equals("alter");
      boolean boolean0 = jMXPrincipal0.equals(".GE");
      versionNumber0.toString();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("call", "Pp", versionNumber0);
      defaultDatabase0.getTable("call", false);
      VersionNumber.valueOf("updatec");
      SQLUtil.parseColumnTypeAndSize("cA");
      Boolean boolean1 = new Boolean("32768");
      assertTrue(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^&\"u0+)6p5PU*^3$5cU");
      StringReader stringReader1 = new StringReader("^&\"u0+)6p5PU*^3$5cU");
      stringReader1.skip(610L);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      rowOutputBinary0.writeChar(41);
      RowOutputBinary rowOutputBinary1 = new RowOutputBinary(1292);
      rowOutputBinary0.writeString("NryAGn");
      rowOutputBinary0.writeInt(1292);
      RowOutputBinary rowOutputBinary2 = new RowOutputBinary(1);
      rowOutputBinary2.writeEnd();
      rowOutputBinary2.writeInt(0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      rowOutputBinary1.write(byteArray0);
      rowOutputBinary2.write(byteArray0);
      RowOutputBinary rowOutputBinary3 = new RowOutputBinary((-2053));
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      rowOutputBinary0.write(1218);
      RowOutputBinary rowOutputBinary4 = new RowOutputBinary(305);
      rowOutputBinary2.writeLong(1292);
      System.setCurrentTimeMillis((-3923L));
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("^&\"u0+)6p5PU*^3$5cU");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLUtil.mutatesStructure("elter tableunque");
      byte[] byteArray0 = new byte[7];
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      rowOutputBinary0.writeChar((-146652554));
      RowOutputBinary rowOutputBinary1 = new RowOutputBinary(byteArray0);
      rowOutputBinary0.writeUTF("elter tableunque");
      rowOutputBinary0.writeChar(1);
      rowOutputBinary1.setBuffer(byteArray0);
      RowOutputBinary rowOutputBinary2 = new RowOutputBinary(0);
      RowOutputBinary rowOutputBinary3 = new RowOutputBinary((-1024));
      rowOutputBinary3.writeInt(2774);
      rowOutputBinary3.writeEnd();
      rowOutputBinary0.writeInt(2774);
      rowOutputBinary0.reset();
      rowOutputBinary1.write(byteArray0);
      rowOutputBinary0.write(byteArray0);
      RowOutputBinary rowOutputBinary4 = new RowOutputBinary(2);
      rowOutputBinary0.write(720);
      RowOutputBinary rowOutputBinary5 = new RowOutputBinary(0);
      rowOutputBinary4.writeLong(0);
      System.setCurrentTimeMillis(1);
  }
}
