/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 16:52:26 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.main.FreeMindApplet;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.filemode.FileMode;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseWheelListener;
import java.awt.geom.AffineTransform;
import java.awt.image.ImageObserver;
import java.sql.Timestamp;
import java.util.Date;
import java.util.Locale;
import java.util.Stack;
import java.util.Vector;
import javax.swing.ActionMap;
import javax.swing.DefaultCellEditor;
import javax.swing.DropMode;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTextPane;
import javax.swing.JTree;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.multi.MultiDesktopPaneUI;
import javax.swing.plaf.multi.MultiSpinnerUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.GapContent;
import javax.swing.text.Segment;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeNode;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.SVGUseElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.crimson.tree.XmlDocument;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.xalan.templates.ElemExtensionDecl;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcConnection;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3640731229615715
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(coreDocumentImpl0);
      sVGGraphics2D0.getTopLevelGroup(false);
      Graphics graphics0 = sVGGraphics2D0.create();
      jDayChooser_DecoratorButton0.paint(graphics0);
      System.setCurrentTimeMillis(695L);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      coreDocumentImpl0.getLastChild();
      System.setCurrentTimeMillis(3);
      Locale locale0 = jDayChooser0.locale;
      locale0.getDisplayLanguage();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getDayPanel();
      jDayChooser0.setDecorationBackgroundColor(color0);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      Font.getFont("ISO-8859-1");
      jDayChooser0.setFont((Font) null);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setLocale(locale0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1835697180862272
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-3183));
      jDayChooser0.setYear(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = ImageObserver.HEIGHT;
      jDayChooser0.setDecorationBackgroundVisible(true);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMaxDayCharacters(2);
      Vector<String> vector0 = new Vector<String>();
      Stack<String> stack0 = new Stack<String>();
      JTree jTree0 = new JTree(stack0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      DefaultCellEditor defaultCellEditor0 = new DefaultCellEditor(jComboBox0);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      MapDialog mapDialog0 = new MapDialog();
      FileMode fileMode0 = new FileMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.208313128881091
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "i/E4@+M2J+-u5D[H";
      stringArray0[1] = "i/E4@+M2J+-u5D[H";
      stringArray0[2] = "i/E4@+M2J+-u5D[H";
      stringArray0[3] = "i/E4@+M2J+-u5D[H";
      stringArray0[4] = "23";
      stringArray0[5] = "i/E4@+M2J+-u5D[H";
      stringArray0[6] = "^~U!";
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane();
      JTextPane jTextPane1 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getStyle("qSx%X");
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument();
      Font.getFont("i/E4@+M2J+-u5D[H");
      JMenu jMenu0 = new JMenu("i/E4@+M2J+-u5D[H");
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[7];
      menuElementArray0[0] = (MenuElement) jMenu0;
      menuElementArray0[1] = (MenuElement) jMenu0;
      menuElementArray0[2] = (MenuElement) jMenu0;
      menuElementArray0[3] = (MenuElement) jMenu0;
      menuElementArray0[4] = (MenuElement) jMenu0;
      menuElementArray0[5] = (MenuElement) jMenu0;
      menuElementArray0[6] = (MenuElement) jMenu0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jTextPane0, 40, 40, 40, 40, '2', menuElementArray0, menuSelectionManager0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(21, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2000588065999627
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawDays();
      Color color0 = Color.DARK_GRAY;
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDay(0);
      jDayChooser0.getSundayForeground();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2055218749828893
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawDays();
      Color color0 = Color.DARK_GRAY;
      jDayChooser0.setSundayForeground(color0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.focusLost(focusEvent0);
      ActionEvent actionEvent0 = new ActionEvent(focusEvent0, 0, (String) null, 0);
      focusEvent0.paramString();
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.256017089705082
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-3183));
      jDayChooser0.setYear(0);
      int int0 = JComponent.UNDEFINED_CONDITION;
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setFocus();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer1.getTextSelectionColor();
      SystemColor systemColor0 = SystemColor.controlHighlight;
      jDayChooser0.setForeground(systemColor0);
      MockDate mockDate0 = new MockDate(29, 29, 29, 8, 12297);
      jDayChooser0.setMinSelectableDate((Date) null);
      MockDate mockDate1 = new MockDate();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      // Undeclared exception!
      try { 
        unmarshallingContext0.attributeDate("day", "day", (Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.330617714702868
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-3183));
      jDayChooser0.setYear(0);
      int int0 = JComponent.UNDEFINED_CONDITION;
      JButton jButton0 = new JButton("P5)}9mkPgi3s,wq");
      jDayChooser0.selectedDay = jButton0;
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setFocus();
      Color color0 = MapView.standardNodeTextColor;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer1.getClosedIcon();
      defaultTreeCellRenderer1.getMouseWheelListeners();
      defaultTreeCellRenderer1.getTextSelectionColor();
      SystemColor systemColor0 = SystemColor.controlHighlight;
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.setEnabled(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("14", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultTreeCellRenderer defaultTreeCellRenderer2 = new DefaultTreeCellRenderer();
      jDayChooser0.setMaxDayCharacters((-1));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = 3268.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      AffineTransform affineTransform0 = new AffineTransform(doubleArray0);
      jDayChooser0.setMinSelectableDate(date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1912202525750986
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3[B|iLaGxpm");
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem((String) null, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      MockDate mockDate0 = new MockDate((-2352), 19, 802, 260, (-2809), (-2352));
      MockDate mockDate1 = new MockDate(260, 492, (-2157), (-2923), (-386));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.setMinSelectableDate(mockDate0);
      mockDate0.after(date0);
      MockDate mockDate2 = new MockDate();
      jDayChooser0.setSelectableDateRange((Date) null, date0);
      jDayChooser0.setMonth(260);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument();
      jDayChooser0.setDay(260);
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.133823734141676
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      Color color0 = Color.DARK_GRAY;
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.getAncestorListeners();
      JMonthChooser jMonthChooser1 = new JMonthChooser(false);
      jMonthChooser1.getAncestorListeners();
      Locale locale0 = new Locale("Windows", " icc-color(", "x");
      locale0.hasExtensions();
      JComponent.setDefaultLocale(locale0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.updateUI();
      Timestamp timestamp0 = new Timestamp(0L);
      jDayChooser0.setMaxSelectableDate(timestamp0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2256282269528636
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawDays();
      Color color0 = Color.DARK_GRAY;
      jDayChooser0.setDay((-950));
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.getAncestorListeners();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.drawDays();
      jdbcConnection jdbcConnection1 = new jdbcConnection(session0);
      Stack<String> stack0 = new Stack<String>();
      Vector<JButton> vector0 = new Vector<JButton>();
      jDayChooser0.setSelectableDateRange(date0, (Date) null);
      jDayChooser0.setMonth((-950));
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".`c239*PhTa";
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(false);
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(coreDocumentImpl0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, false);
      SVGGeneratorContext sVGGeneratorContext1 = SVGGeneratorContext.createDefault(coreDocumentImpl0);
      SVGGraphics2D sVGGraphics2D1 = new SVGGraphics2D(sVGGeneratorContext1, true);
      int int0 = 17;
      sVGGraphics2D0.clipRect(3, 1278, 17, 24);
      SVGGraphics2D sVGGraphics2D2 = new SVGGraphics2D(sVGGraphics2D0);
      sVGGraphics2D2.create(12334, 44, 3, 34);
      jDayChooser_DecoratorButton0.paint(sVGGraphics2D2);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jTextPane0.removeContainerListener((ContainerListener) null);
      jTextPane0.getStyle("23");
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument();
      StringContent stringContent0 = new StringContent(12334);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument2 = new DefaultStyledDocument(stringContent0, styleContext0);
      // Undeclared exception!
      try { 
        defaultStyledDocument2.getFont((AttributeSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.StyleConstants", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.181620236858563
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.getDayPanel();
      MultiSpinnerUI multiSpinnerUI0 = new MultiSpinnerUI();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jMonthChooser0.getAncestorListeners();
      JMonthChooser jMonthChooser1 = new JMonthChooser(false);
      jMonthChooser1.getAncestorListeners();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Locale locale0 = new Locale("", "ScrollUp", "day");
      JComponent.setDefaultLocale(locale0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.updateUI();
      jDayChooser0.setDay((-832));
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-1354L));
      JDayChooser jDayChooser0 = new JDayChooser();
      MultiDesktopPaneUI multiDesktopPaneUI0 = new MultiDesktopPaneUI();
      // Undeclared exception!
      try { 
        multiDesktopPaneUI0.getMinimumSize(jDayChooser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.225617685435096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".`c239*PhTa";
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      Color color0 = Color.DARK_GRAY;
      jDayChooser0.setDay((-950));
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.getAncestorListeners();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.drawDays();
      Session session1 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection1 = new jdbcConnection(session1);
      Stack<String> stack0 = new Stack<String>();
      Vector<JButton> vector0 = new Vector<JButton>();
      jDayChooser0.setSelectableDateRange((Date) null, date0);
      jDayChooser0.setMonth((-950));
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3060530620480315
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setYear(462);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      int int0 = JComponent.UNDEFINED_CONDITION;
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setFocus();
      Color color0 = MapView.standardNodeTextColor;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color1 = defaultTreeCellRenderer0.getTextSelectionColor();
      jDayChooser0.setForeground(color1);
      jDayChooser0.init();
      jDayChooser0.setEnabled(false);
      jDayChooser0.isDecorationBordersVisible();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("3YaLlmq:hQ)_cUU", false);
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor((JTree) null, defaultTreeCellRenderer0);
      DefaultTreeCellEditor defaultTreeCellEditor1 = new DefaultTreeCellEditor((JTree) null, defaultTreeCellRenderer1, defaultTreeCellEditor0);
      DefaultTreeCellEditor defaultTreeCellEditor2 = new DefaultTreeCellEditor((JTree) null, defaultTreeCellRenderer0, defaultTreeCellEditor1);
      defaultTreeCellEditor2.getFont();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.getDaysInMonth();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.15108628544884
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".`c239*PhTa";
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(true);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      Color color0 = Color.DARK_GRAY;
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jMonthChooser0.getAncestorListeners();
      JMonthChooser jMonthChooser1 = new JMonthChooser(false);
      jMonthChooser1.getAncestorListeners();
      Locale locale0 = new Locale(".`c239*PhTa", "3Q~'Wee6]o,,@J}ZAG", "^@y{BA/8=CHpVZ_=I");
      locale0.hasExtensions();
      Locale locale1 = Locale.FRENCH;
      JComponent.setDefaultLocale(locale1);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2164205474576493
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setYear(462);
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke((-301), (-301));
      KeyStroke.getKeyStroke((-301), 785, true);
      AWTKeyStroke.getAWTKeyStroke('G');
      jDayChooser0.getConditionForKeyStroke(keyStroke0);
      boolean boolean0 = true;
      jDayChooser0.setDayBordersVisible(true);
      int int0 = JComponent.WHEN_FOCUSED;
      KeyEvent.getKeyModifiersText(7);
      jDayChooser0.setMaxDayCharacters((-301));
      jDayChooser0.getDayPanel();
      jDayChooser0.addListeners(27);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1598053345299366
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser1 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[7];
      JMenu jMenu0 = new JMenu("Center");
      menuElementArray0[1] = (MenuElement) jMenu0;
      JMenu jMenu1 = new JMenu("Center", false);
      JMenuItem jMenuItem0 = jMenu1.add("day");
      menuElementArray0[4] = (MenuElement) jMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser1, 0, (-459L), 0, 14, 'g', menuElementArray0, menuSelectionManager0);
      MenuElement[] menuElementArray1 = new MenuElement[8];
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      menuSelectionManager1.isComponentPartOfCurrentMenu(jMenu0);
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jMenu0, 0, 1367, 0, 6, 'b', menuElementArray1, menuSelectionManager1);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.114399273529393
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      DefaultCellEditor defaultCellEditor0 = new DefaultCellEditor(jComboBox0);
      Stack<DropMode> stack0 = new Stack<DropMode>();
      JTree jTree0 = new JTree(stack0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JTree jTree1 = new JTree((TreeNode) null);
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree1, defaultTreeCellRenderer0);
      DefaultTreeCellEditor defaultTreeCellEditor1 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0, defaultTreeCellEditor0);
      defaultTreeCellEditor1.getFont();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFont((Font) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setToolTipText((String) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.yearChooser = jYearChooser0;
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(true);
      jYearChooser0.resetKeyboardActions();
      jDayChooser0.getInsets();
      jDayChooser0.setName("1");
      jDayChooser0.removeNotify();
      jDayChooser0.drawWeeks();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.220801490636804
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".`c239*PhTa";
      stringArray0[1] = "x";
      stringArray0[2] = "plugins/map/MapDialog_AddMapImageToNodeAction.properties";
      stringArray0[3] = "i/E4@+M2J+-u5D[H";
      int int0 = 1;
      MockDate mockDate0 = new MockDate(301, 1, (-2296), (-2296), (-1), (-2296));
      MockDate mockDate1 = new MockDate(10, (-2296), 2354, 301, (-2157));
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.setMinSelectableDate(mockDate1);
      mockDate1.after(date0);
      MockDate mockDate2 = new MockDate();
      jDayChooser0.setSelectableDateRange(mockDate2, mockDate0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setMonth(301);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getTopLevelAncestor();
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      jTextPane0.addMouseWheelListener((MouseWheelListener) null);
      jTextPane0.getStyle("plugins/map/MapDialog_AddMapImageToNodeAction.properties");
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument();
      // Undeclared exception!
      try { 
        defaultStyledDocument0.getFont((AttributeSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.StyleConstants", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.230857286591324
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(0);
      GapContent gapContent0 = new GapContent(972);
      gapContent0.createPosition(0);
      char[] charArray0 = new char[0];
      Segment segment0 = new Segment(charArray0, 7, 30);
      segment0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setMaxDayCharacters(30);
      jDayChooser0.getSelectedDay();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 41;
      doubleArray0[3] = (double) 7;
      doubleArray0[4] = (double) 7;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 30;
      AffineTransform affineTransform0 = new AffineTransform(doubleArray0);
      assertEquals(7.0, affineTransform0.getScaleX(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.129862706746338
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawDays();
      Color color0 = Color.DARK_GRAY;
      jDayChooser0.setDay((-950));
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      JInternalFrame jInternalFrame0 = new JInternalFrame("28", false, false, false, false);
      jInternalFrame0.getNormalBounds();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDayBordersVisible(false);
      SVGUseElementBridge sVGUseElementBridge0 = new SVGUseElementBridge();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(0);
      double[] doubleArray0 = new double[0];
      AffineTransform affineTransform0 = null;
      try {
        affineTransform0 = new AffineTransform(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.awt.geom.AffineTransform", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.091803330640885
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".`c239*PhTa";
      stringArray0[1] = "x";
      stringArray0[2] = "plugins/map/MapDialog_AddMapImageToNodeAction.properties";
      stringArray0[3] = "i/E4@+M2J+-u5D[H";
      stringArray0[4] = "plugins.map.FreeMindMapController$SetHomection";
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      DefaultCellEditor defaultCellEditor0 = new DefaultCellEditor(jComboBox0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(41);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.058591591902833
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("day");
      mockPrintWriter0.append((CharSequence) "day");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "23");
      jDayChooser0.drawWeeks();
      jDayChooser0.initDecorations();
      Locale locale0 = null;
      try {
        locale0 = new Locale("day", ").Dd,fH9Kv;`", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.getAncestorListeners();
      jMonthChooser0.getUI();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "month";
      stringArray0[1] = "day";
      stringArray0[2] = "month";
      stringArray0[3] = "month";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[6] = ".`c239*PhTa";
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      DefaultCellEditor defaultCellEditor0 = new DefaultCellEditor(jComboBox0);
      Stack<DropMode> stack0 = new Stack<DropMode>();
      JTree jTree0 = new JTree(stack0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JTree jTree1 = new JTree((TreeNode) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(defaultTreeCellRenderer0, 238, "day", (byte) (-103));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.tree.DefaultTreeCellRenderer cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".`c239*PhTa";
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      DefaultCellEditor defaultCellEditor0 = new DefaultCellEditor(jComboBox0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Stack<DropMode> stack0 = new Stack<DropMode>();
      JTree jTree0 = new JTree(stack0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JTree jTree1 = new JTree((TreeNode) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1236949235614806
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "i/E4@+M2J+-u5D[H";
      stringArray0[1] = "^~U!";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[2] = "^~U!";
      stringArray0[3] = "i/E4@+M2J+-u5D[H";
      stringArray0[4] = "?_";
      stringArray0[5] = "?_";
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFont();
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getWeekdayForeground();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#}6:CTCD (YoRB");
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setForeground(color0);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2801162954101715
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-3183));
      jDayChooser0.setYear(0);
      int int0 = ImageObserver.HEIGHT;
      jDayChooser0.setDecorationBackgroundVisible(true);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      MockDate mockDate0 = new MockDate(14, (-2809), 260, 802, (-2809), 10);
      MockDate mockDate1 = new MockDate((-1437625606), (-2157), (-1437625606), 29, 0);
      MockDate mockDate2 = new MockDate(260, 29, 29, 2, 14);
      mockDate2.after(date0);
      MockDate mockDate3 = new MockDate();
      jDayChooser0.setSelectableDateRange(mockDate1, mockDate2);
      jDayChooser0.setMonth(44);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getTopLevelAncestor();
      jTextPane0.getStyle("vFn5+-M.M,kv'");
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument();
      // Undeclared exception!
      try { 
        defaultStyledDocument1.getFont((AttributeSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.StyleConstants", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.240247623800649
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawDays();
      Color color0 = Color.DARK_GRAY;
      jDayChooser0.setSundayForeground(color0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.focusLost(focusEvent0);
      ActionEvent actionEvent0 = new ActionEvent(focusEvent0, 0, (String) null, 0);
      actionEvent0.paramString();
      jDayChooser0.getMaxDayCharacters();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.event.FocusEvent cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1016904260397298
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      MockDate mockDate0 = new MockDate(780, 3, 2);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.init();
      jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".`c239*PhTa";
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.enableInputMethods(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1338013620262806
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      Color color0 = Color.DARK_GRAY;
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.getAncestorListeners();
      JMonthChooser jMonthChooser1 = new JMonthChooser(false);
      jMonthChooser1.getAncestorListeners();
      Locale locale0 = new Locale("Windows", " icc-color(", "x");
      locale0.hasExtensions();
      JComponent.setDefaultLocale(locale0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.updateUI();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.0966166083347697
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setName("");
      jDayChooser0.drawWeeks();
      jDayChooser0.drawDays();
      jDayChooser0.setWeekdayForeground((Color) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.09202406836961
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawDays();
      Color color0 = Color.DARK_GRAY;
      jDayChooser0.setDay((-950));
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.getAncestorListeners();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      JMonthChooser jMonthChooser1 = new JMonthChooser(false);
      jMonthChooser1.getAncestorListeners();
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Locale locale0 = new Locale("Windows", " icc-color(", "x");
      locale0.hasExtensions();
      JComponent.setDefaultLocale(locale0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.updateUI();
      jDayChooser0.setDay((-950));
      jDayChooser0.setDay((-950));
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1369);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.1144257212092703
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".`c239*PhTa";
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      JComboBox<DefaultTableModel> jComboBox1 = new JComboBox<DefaultTableModel>();
      DefaultCellEditor defaultCellEditor0 = new DefaultCellEditor(jComboBox1);
      Stack<DropMode> stack0 = new Stack<DropMode>();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-1147));
      Vector<String> vector0 = new Vector<String>();
      Stack<String> stack1 = new Stack<String>();
      JTree jTree0 = new JTree(stack1);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JComboBox<DefaultTableModel> jComboBox2 = new JComboBox<DefaultTableModel>();
      DefaultCellEditor defaultCellEditor1 = new DefaultCellEditor(jComboBox1);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      MapDialog mapDialog0 = new MapDialog();
      FileMode fileMode0 = new FileMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3970879626072525
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getMultiClickThreshhold();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getHeight();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setYear((-1839));
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", true, false, false, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      jDayChooser0.repaint(rectangle0);
      jDayChooser0.setDayBordersVisible(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 0, 0L, 0, 361, 'k');
      InputEvent.getMaskForButton(3);
      jDayChooser0.keyReleased(keyEvent0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 100, false, jDayChooser_DecoratorButton0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getDayPanel();
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setIgnoreRepaint(true);
      jDayChooser0.setYear(2103);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "day");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      GapContent gapContent0 = new GapContent();
      gapContent0.createPosition(2349);
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      Segment segment0 = new Segment(charArray0, 208, 0);
      try { 
        gapContent0.getChars(208, 0, segment0);
        fail("Expecting exception: BadLocationException");
      
      } catch(BadLocationException e) {
         //
         // Invalid location
         //
         verifyException("javax.swing.text.GapContent", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.096699891103565
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".`c239*PhTa";
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jTextPane0.removeContainerListener((ContainerListener) null);
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument();
      Locale locale0 = Locale.FRENCH;
      JComponent.setDefaultLocale(locale0);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.170087880043637
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 151, '[', 0);
      jDayChooser0.getClientProperty(keyEvent0);
      keyEvent0.setSource((Object) null);
      InputEvent.getModifiersExText(2674);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.updateUI();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.170120776584018
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 151, 'f', 0);
      jDayChooser0.getClientProperty(keyEvent0);
      keyEvent0.setSource((Object) null);
      InputEvent.getModifiersExText(2674);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.updateUI();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.initDecorations();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDecorationBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionMap actionMap0 = new ActionMap();
      jDayChooser0.setActionMap(actionMap0);
      int int0 = jDayChooser0.getDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, int0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.255897215812417
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 41;
      jDayChooser0.firePropertyChange("28", 41, 41);
      jDayChooser0.addNotify();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getSundayForeground();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.isDayBordersVisible();
      int int1 = 7;
      ActionEvent actionEvent0 = new ActionEvent("28", 7, "z]dAgB]J");
      Locale locale0 = Locale.JAPAN;
      actionEvent0.setSource(locale0);
      actionEvent0.setSource(locale0);
      actionEvent0.paramString();
      jDayChooser0.isDecorationBackgroundVisible();
      MockGregorianCalendar mockGregorianCalendar0 = null;
      try {
        mockGregorianCalendar0 = new MockGregorianCalendar((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.value = 0;
      jDayChooser0.setYearChooser(jYearChooser0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.170005734881401
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JYearChooser jYearChooser0 = new JYearChooser();
      Dimension dimension0 = jDayChooser_DecoratorButton0.getMaximumSize();
      jDayChooser0.yearChooser = jYearChooser0;
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      dimension0.height = 290;
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      JComboBox<DefaultTableModel> jComboBox1 = new JComboBox<DefaultTableModel>();
      DefaultCellEditor defaultCellEditor0 = new DefaultCellEditor(jComboBox0);
      Stack<DropMode> stack0 = new Stack<DropMode>();
      JTree jTree0 = new JTree(stack0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JTree jTree1 = new JTree();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree1, defaultTreeCellRenderer0);
      DefaultCellEditor defaultCellEditor1 = new DefaultCellEditor(jComboBox0);
      DefaultTreeCellEditor defaultTreeCellEditor1 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0, defaultTreeCellEditor0);
      defaultTreeCellEditor0.getFont();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFont((Font) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.2493624697103174
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-40));
      GapContent gapContent0 = new GapContent(808);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setMaxDayCharacters(808);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser1.setFocus();
      jDayChooser1.getMaxSelectableDate();
      Color color0 = Color.PINK;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'j';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      floatArray0[1] = (float) 'j';
      floatArray0[2] = (float) (-40);
      floatArray0[3] = (float) 808;
      floatArray0[4] = (float) 808;
      floatArray0[5] = (float) 'j';
      floatArray0[6] = (float) 808;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      XmlDocument xmlDocument0 = new XmlDocument();
      jDayChooser0.setDay(0);
      try { 
        xmlDocument0.createElementEx("28");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // INVALID_CHARACTER_ERR: An invalid character was specified, such as in a name.
         //
         verifyException("org.apache.crimson.tree.XmlDocument", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.1867762766523793
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setOpaque(false);
      jDayChooser0.requestFocus();
      jDayChooser0.isDayBordersVisible();
      SystemColor systemColor0 = SystemColor.infoText;
      Color.getColor("A?wo,MELeNa*^c");
      jDayChooser0.setBackground(systemColor0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.doLayout();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setMonth((-834));
      jDayChooser0.drawWeeks();
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.175592593151128
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".`c239*PhTa";
      stringArray0[1] = "x";
      stringArray0[2] = "plugins/map/MapDialog_AddMapImageToNodeAction.properties";
      stringArray0[3] = "i/E4@+M2J+-u5D[H";
      stringArray0[4] = "plugins.map.FreeMindMapController$SetHomeAction";
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      DefaultCellEditor defaultCellEditor0 = new DefaultCellEditor(jComboBox0);
      JMenu jMenu0 = new JMenu("YSTB54BQa}YQ?x");
      MenuElement[] menuElementArray0 = new MenuElement[5];
      menuElementArray0[0] = (MenuElement) jMenu0;
      menuElementArray0[1] = (MenuElement) jMenu0;
      menuElementArray0[2] = (MenuElement) jMenu0;
      menuElementArray0[3] = (MenuElement) jMenu0;
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      JMenuItem jMenuItem0 = structuredMenuHolder0.addMenuItem(jMenu0, "x#})n33");
      menuElementArray0[4] = (MenuElement) jMenuItem0;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jMenu0, (-1950), 0L, 4, (-1950), '+', menuElementArray0, menuSelectionManager0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.1962795130893347
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1X&7zi{<");
      int int0 = (-1965);
      int int1 = 90;
      jDayChooser0.repaint(90L, (-2062), (-1965), (-1965), 90);
      jDayChooser0.firePropertyChange("1X&7zi{<", true, true);
      jDayChooser0.getLocale();
      Color color0 = Color.blue;
      jDayChooser0.setForeground(color0);
      int int2 = 33;
      jDayChooser0.setMaxDayCharacters(33);
      jDayChooser0.setDayBordersVisible(true);
      ElemExtensionDecl elemExtensionDecl0 = new ElemExtensionDecl();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1X&7zi{<");
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(elemExtensionDecl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.1686593257594646
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".`c239*PhTa";
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(false);
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(coreDocumentImpl0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, false);
      SVGGeneratorContext sVGGeneratorContext1 = SVGGeneratorContext.createDefault(coreDocumentImpl0);
      SVGGraphics2D sVGGraphics2D1 = new SVGGraphics2D(sVGGeneratorContext1, true);
      sVGGraphics2D0.clipRect(3, 1278, 17, 24);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.169968006150972
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("day");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getHorizontalAlignment();
      jDayChooser_DecoratorButton0.getMultiClickThreshhold();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getHeight();
      jDayChooser0.setMaxDayCharacters(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "vo{f";
      stringArray0[2] = "";
      stringArray0[3] = "?_";
      stringArray0[4] = "?_";
      stringArray0[5] = "?_";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
