/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 09:53:58 GMT 2020
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import freemind.main.Resources;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.DefaultFocusTraversalPolicy;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Label;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.PrintWriter;
import java.text.ParsePosition;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Set;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JToggleButton;
import javax.swing.JTree;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicCheckBoxUI;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.metal.MetalRootPaneUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.GapContent;
import javax.swing.text.Segment;
import javax.swing.text.StringContent;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.xalan.templates.DecimalFormatProperties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7421583343393316
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPanel0, (-3907), 9L, (-1244), 0, 'J', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.getForeground();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext1.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext1.new NamedStyle("", styleContext_NamedStyle0);
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext1.new NamedStyle(styleContext_NamedStyle1);
      AttributeSet attributeSet0 = styleContext_NamedStyle2.copyAttributes();
      Font font0 = defaultStyledDocument0.getFont(attributeSet0);
      jDayChooser0.setFont(font0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics((Graphics) null);
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7788273381957804
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getMultiClickThreshhold();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getHeight();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setYear((-1839));
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", true, false, false, true);
      jInternalFrame0.requestFocus(false);
      jInternalFrame0.getNormalBounds();
      jDayChooser0.getForeground();
      jDayChooser0.getDay();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext.getDefaultStyleContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      ParsePosition parsePosition0 = new ParsePosition(0);
      mockSimpleDateFormat0.parse("day", parsePosition0);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.757689330507757
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(0);
      GapContent gapContent0 = new GapContent(972);
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[1] = 'o';
      charArray0[2] = '%';
      charArray0[3] = '$';
      charArray0[4] = '%';
      gapContent0.createPosition(972);
      charArray0[5] = 'F';
      charArray0[6] = 'T';
      charArray0[7] = 'E';
      charArray0[8] = '$';
      Segment segment0 = new Segment(charArray0, 0, 0);
      segment0.first();
      gapContent0.getChars(0, 0, segment0);
      Locale locale0 = Locale.forLanguageTag("}_?=P!k,");
      Locale locale1 = jDayChooser0.getLocale();
      locale1.stripExtensions();
      Locale locale2 = Locale.forLanguageTag("org.apache.batik.css.engine.value.RectValue");
      locale1.getDisplayScript(locale0);
      jDayChooser0.setLocale(locale2);
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7419541084422874
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(0);
      GapContent gapContent0 = new GapContent(972);
      jDayChooser0.getFocusListeners();
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[1] = 'o';
      charArray0[2] = '%';
      charArray0[3] = '$';
      charArray0[4] = '%';
      gapContent0.createPosition(972);
      charArray0[5] = 'F';
      charArray0[6] = 'T';
      charArray0[7] = 'E';
      charArray0[8] = '$';
      Segment segment0 = new Segment(charArray0, 0, 0);
      segment0.first();
      gapContent0.getChars(0, 0, segment0);
      Locale locale0 = Locale.forLanguageTag("}_?=P!k,");
      Locale locale1 = jDayChooser0.getLocale();
      Locale locale2 = Locale.forLanguageTag("org.apache.batik.css.engine.value.RectValue");
      locale1.getDisplayScript(locale0);
      jDayChooser0.setLocale(locale2);
      jDayChooser0.setMonth(0);
      jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8058342412344195
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getMultiClickThreshhold();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getHeight();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setYear((-1839));
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", true, false, false, true);
      jInternalFrame0.getNormalBounds();
      jDayChooser0.getForeground();
      jDayChooser0.getDay();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext.getDefaultStyleContext();
      jDayChooser_DecoratorButton0.isDefaultButton();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      DecimalFormatProperties decimalFormatProperties0 = new DecimalFormatProperties(0);
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay((-1839));
      jDayChooser1.setDayBordersVisible(false);
      Locale locale0 = Locale.CANADA_FRENCH;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7419541084422874
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawDays();
      Color color0 = Color.DARK_GRAY;
      jDayChooser0.setSundayForeground(color0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.focusLost(focusEvent0);
      ActionEvent actionEvent0 = new ActionEvent(focusEvent0, 0, (String) null, 0);
      jDayChooser0.getSelectedDay();
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8006791748895705
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getMultiClickThreshhold();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getHeight();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setYear((-1839));
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", true, false, false, true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.getDay();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext1.new NamedStyle("?3S]1KYUl.|su6NB", styleContext_NamedStyle0);
      defaultStyledDocument0.setParagraphAttributes(3, 3, styleContext_NamedStyle1, true);
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext1.new NamedStyle(styleContext_NamedStyle1);
      styleContext_NamedStyle0.getName();
      styleContext_NamedStyle0.copyAttributes();
      defaultStyledDocument0.getFont(styleContext_NamedStyle2);
      GapContent gapContent0 = new GapContent();
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(gapContent0, styleContext0);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      
      MockDate mockDate0 = new MockDate();
      jDayChooser1.setMinSelectableDate(mockDate0);
      jDayChooser1.setMonth(14);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8489937546315374
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      jDayChooser0.removeComponentListener((ComponentListener) null);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 0, 2830L, 36, 36, '$', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      jDayChooser0.updateUI();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 36, false, jDayChooser0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.keyReleased(menuKeyEvent0);
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, (-1971), false, jDayChooser0);
      jDayChooser1.focusLost(focusEvent1);
      jDayChooser1.getDayPanel();
      jDayChooser1.keyPressed(menuKeyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8187586905346707
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPanel0, (-3907), 9L, (-1244), 0, 'J', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      Color color0 = jDayChooser0.getForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext1.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext1.new NamedStyle("", styleContext_NamedStyle0);
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext1.new NamedStyle(styleContext_NamedStyle1);
      AttributeSet attributeSet0 = styleContext_NamedStyle2.copyAttributes();
      Font font0 = defaultStyledDocument0.getFont(attributeSet0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor((JTree) null, defaultTreeCellRenderer0);
      defaultTreeCellEditor0.getFont();
      jDayChooser0.setFont(font0);
      jDayChooser0.setMaxDayCharacters((-606));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9072529928470296
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-1794));
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.yearChooser = jYearChooser0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "accessories.plugins.time.JDayChooser");
      jDayChooser0.setMaxDayCharacters((-1794));
      jDayChooser0.getUI();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("1", vetoableChangeListener0);
      jMonthChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.updateUI();
      Locale locale0 = Locale.CHINESE;
      jYearChooser0.setLocale(locale0);
      jDayChooser0.getMinSelectableDate();
      KeyEvent keyEvent0 = new KeyEvent(jYearChooser0, 1048576, 1048576, 627, (-1794), '3');
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getTemporaryCalendar();
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.62460900034393
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = '`';
      charArray0[2] = 'p';
      Segment segment0 = new Segment(charArray0, 0, 0);
      GapContent gapContent0 = new GapContent(0);
      try { 
        gapContent0.getChars(34, 322, segment0);
        fail("Expecting exception: BadLocationException");
      
      } catch(BadLocationException e) {
         //
         // Invalid location
         //
         verifyException("javax.swing.text.GapContent", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7234701836273554
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(0);
      GapContent gapContent0 = new GapContent(972);
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[1] = 'o';
      charArray0[2] = '%';
      charArray0[3] = '$';
      charArray0[4] = '%';
      gapContent0.createPosition(972);
      charArray0[5] = 'F';
      charArray0[6] = 'T';
      charArray0[7] = 'E';
      charArray0[8] = '$';
      Segment segment0 = new Segment(charArray0, 0, 0);
      gapContent0.getChars(0, 0, segment0);
      Locale locale0 = Locale.forLanguageTag("}_?=P!k,");
      Locale locale1 = jDayChooser0.getLocale();
      locale0.getDisplayScript(locale1);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.760874871072829
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      metalRootPaneUI0.getPreferredSize(jDayChooser0);
      jDayChooser0.addPropertyChangeListener("org.openstreetmap.gui.jmapviewer.tilesources.OsmTileSource$Maplint", (PropertyChangeListener) metalRootPaneUI0);
      jDayChooser0.getDayPanel();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "accessories.plugins.time.JDayChooser$DecoratorButton");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dialog Plain 11");
      jDayChooser0.getSelectedDay();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(14, jDayChooser0.getDay());
      
      System.setCurrentTimeMillis(1281L);
      jDayChooser0.setDay((byte)50);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.760874871072829
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      metalRootPaneUI0.getPreferredSize(jDayChooser0);
      jDayChooser0.addPropertyChangeListener("org.openstreetmap.gui.jmapviewer.tilesources.OsmTileSource$Maplint", (PropertyChangeListener) metalRootPaneUI0);
      jDayChooser0.getDayPanel();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "accessories.plugins.time.JDayChooser$DecoratorButton");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dialog Plain 11");
      jDayChooser0.getSelectedDay();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      System.setCurrentTimeMillis(1281L);
      jDayChooser0.setFocus();
      jDayChooser0.setDay(520);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8043490098333104
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPanel0, (-3907), 9L, (-1244), 0, 'J', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      Color color0 = jDayChooser0.getForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext1.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext1.new NamedStyle("", styleContext_NamedStyle0);
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext1.new NamedStyle(styleContext_NamedStyle1);
      styleContext_NamedStyle2.copyAttributes();
      System.setCurrentTimeMillis((-2377L));
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6717601208463133
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 151, '[', 0);
      jDayChooser0.getClientProperty(keyEvent0);
      keyEvent0.setSource((Object) null);
      InputEvent.getModifiersExText(0);
      jDayChooser0.removeComponentListener((ComponentListener) null);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.updateUI();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertTrue(boolean0);
      
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7743379459057973
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPanel0, (-3907), 9L, (-1244), 0, 'J', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      Color color0 = jDayChooser0.getForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext1.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext1.new NamedStyle("", styleContext_NamedStyle0);
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext1.new NamedStyle(styleContext_NamedStyle1);
      AttributeSet attributeSet0 = styleContext_NamedStyle2.copyAttributes();
      defaultStyledDocument0.getFont(attributeSet0);
      GapContent gapContent0 = new GapContent();
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(gapContent0, styleContext0);
      jDayChooser0.getDayPanel();
      jDayChooser0.getDaysInMonth();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("day");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getMultiClickThreshhold();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getHeight();
      jDayChooser0.setMaxDayCharacters(0);
      int int0 = (-1839);
      jDayChooser0.setYear(0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", true, true, true, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      jDayChooser0.repaint(rectangle0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser_DecoratorButton0.isSelected();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.630470240160676
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(0);
      GapContent gapContent0 = new GapContent(972);
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      DecimalFormatProperties decimalFormatProperties0 = new DecimalFormatProperties(36);
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      jDayChooser_DecoratorButton0.isDefaultButton();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setDay(1859);
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(31, jDayChooser0.getDay());
      
      jDayChooser1.initDecorations();
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7576893305077577
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-1794));
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.yearChooser = jYearChooser0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "accessories.plugins.time.JDayChooser");
      jDayChooser0.setMaxDayCharacters((-1794));
      jDayChooser0.getUI();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("1", vetoableChangeListener0);
      jMonthChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.updateUI();
      Locale locale0 = Locale.CHINESE;
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext1.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle("org.apache.xalan.templates.ElemLiteralResult", styleContext_NamedStyle0);
      Style style0 = defaultStyledDocument0.addStyle("", styleContext_NamedStyle1);
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext0.new NamedStyle(style0);
      styleContext_NamedStyle2.copyAttributes();
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(styleContext1);
      Font font0 = defaultStyledDocument1.getFont(styleContext_NamedStyle2);
      jDayChooser0.setFont(font0);
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.856185292225255
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPanel0, (-3907), 9L, (-1244), 0, 'J', menuElementArray0, menuSelectionManager0);
      MockDate mockDate0 = new MockDate(1695, 3, 48);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      Color color0 = jDayChooser0.getForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext1.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext1.new NamedStyle(styleContext_NamedStyle1);
      styleContext_NamedStyle2.getName();
      AttributeSet attributeSet0 = styleContext_NamedStyle2.copyAttributes();
      defaultStyledDocument0.getFont(attributeSet0);
      GapContent gapContent0 = new GapContent();
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(gapContent0, styleContext0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7376047233857554
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(0);
      GapContent gapContent0 = new GapContent(972);
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[1] = 'o';
      charArray0[2] = '%';
      charArray0[3] = '$';
      gapContent0.createPosition(972);
      Color color0 = MapView.standardNodeTextColor;
      SystemColor systemColor0 = SystemColor.controlHighlight;
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.init();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setDecorationBackgroundColor(systemColor0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext1.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext1.new NamedStyle("day", styleContext_NamedStyle0);
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext1.new NamedStyle(styleContext_NamedStyle1);
      styleContext_NamedStyle0.getName();
      styleContext_NamedStyle1.copyAttributes();
      defaultStyledDocument0.getFont(styleContext_NamedStyle0);
      GapContent gapContent1 = new GapContent();
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(gapContent0, styleContext0);
      jDayChooser0.setDayBordersVisible(true);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      SystemColor systemColor0 = SystemColor.activeCaption;
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.drawDays();
      Color color0 = Color.DARK_GRAY;
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.753252865192133
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      int int0 = JComponent.UNDEFINED_CONDITION;
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.setFocus();
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.init();
      jDayChooser0.setEnabled(true);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setForeground((Color) null);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("1", false);
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getRegistration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.HookAdapter", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7419541084422874
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[1] = 'o';
      charArray0[2] = '%';
      charArray0[3] = '$';
      charArray0[4] = '%';
      charArray0[5] = 'F';
      charArray0[6] = 'T';
      charArray0[7] = 'E';
      charArray0[8] = '$';
      Segment segment0 = new Segment(charArray0, 0, 0);
      segment0.first();
      Locale locale0 = Locale.forLanguageTag("}_?=P!k,");
      Locale locale1 = jDayChooser0.getLocale();
      Locale locale2 = Locale.forLanguageTag("org.apache.batik.css.engine.value.RectValue");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      locale1.hasExtensions();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) priorityQueue0, locale_FilteringMode0);
      locale1.getDisplayScript(locale0);
      jDayChooser0.setLocale(locale2);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7376047233857554
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(0);
      GapContent gapContent0 = new GapContent(972);
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[1] = 'o';
      charArray0[2] = '%';
      charArray0[3] = '$';
      charArray0[4] = '%';
      gapContent0.createPosition(972);
      Color color0 = MapView.standardNodeTextColor;
      SystemColor systemColor0 = SystemColor.controlHighlight;
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.init();
      jDayChooser0.setEnabled(true);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setForeground((Color) null);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("scrolling", true);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      MapDialog mapDialog0 = new MapDialog();
      Resources.getInstance();
      Properties properties0 = FreeMindApplet.userProps;
      mapDialog0.setProperties((Properties) null);
      // Undeclared exception!
      try { 
        mapDialog0.getRegistration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.HookAdapter", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7419541084422874
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1564, true, jDayChooser0);
      jDayChooser0.getY();
      focusEvent0.paramString();
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      JToggleButton jToggleButton0 = new JToggleButton((Icon) null);
      jToggleButton0.isFocusPainted();
      jToggleButton0.isFocusPainted();
      Dimension dimension0 = basicCheckBoxUI0.getPreferredSize(jToggleButton0);
      jDayChooser0.setPreferredSize(dimension0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.isDecorationBordersVisible();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.getLocale();
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[4] = "x";
      stringArray0[2] = "^~U!";
      stringArray0[3] = "^~U!";
      stringArray0[2] = "plugins.map.FreeMindMapController$SetHomeAction";
      stringArray0[5] = "Windows";
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = jDayChooser0.getLocale();
      Locale.forLanguageTag("@$ )Q}^x ");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale locale1 = JComponent.getDefaultLocale();
      locale1.getDisplayScript(locale0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7419541084422874
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawDays();
      Color color0 = Color.DARK_GRAY;
      jDayChooser0.setSundayForeground(color0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      focusEvent0.getOppositeComponent();
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.focusLost(focusEvent0);
      ActionEvent actionEvent0 = new ActionEvent(focusEvent0, 0, (String) null, 0);
      jDayChooser0.isDayBordersVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.event.FocusEvent cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      jDayChooser0.getFocusTraversalKeys(0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-3907), (-3907), (-3907), 0, 'J', menuElementArray0, menuSelectionManager0);
      jDayChooser0.setFocus();
      jDayChooser0.setDecorationBordersVisible(false);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(boolean0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setName("");
      jDayChooser0.drawWeeks();
      jDayChooser0.drawDays();
      jDayChooser0.setWeekdayForeground((Color) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(0);
      GapContent gapContent0 = new GapContent(972);
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[1] = 'o';
      charArray0[2] = '%';
      charArray0[3] = '$';
      charArray0[4] = '%';
      gapContent0.createPosition(972);
      charArray0[5] = 'F';
      charArray0[6] = 'T';
      charArray0[7] = 'E';
      charArray0[8] = '$';
      Segment segment0 = new Segment(charArray0, 0, 0);
      segment0.first();
      gapContent0.getChars(0, 0, segment0);
      Locale locale0 = Locale.forLanguageTag("}_?=P!k,");
      Locale locale1 = jDayChooser0.getLocale();
      Locale locale2 = Locale.forLanguageTag("org.apache.batik.css.engine.value.RectValue");
      locale2.getUnicodeLocaleAttributes();
      locale1.getDisplayScript(locale0);
      jDayChooser0.setLocale(locale2);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1087);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.698009616895563
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GapContent gapContent0 = new GapContent();
      gapContent0.createPosition(2337);
      char[] charArray0 = new char[7];
      charArray0[1] = '-';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      charArray0[5] = 'T';
      charArray0[6] = 'T';
      Segment segment0 = new Segment(charArray0, 2337, 160);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      GapContent gapContent1 = new GapContent();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent1, styleContext0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.setMaxDayCharacters(3052);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8489937546315374
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      String[] stringArray0 = new String[8];
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 0, 2830L, 36, 36, '$', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      jDayChooser0.updateUI();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 36, false, jDayChooser0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.keyReleased(menuKeyEvent0);
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, (-1971), false, jDayChooser0);
      jDayChooser1.focusLost(focusEvent1);
      menuKeyEvent0.setKeyCode(0);
      jDayChooser1.getDayPanel();
      jDayChooser1.keyPressed(menuKeyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6477744711335873
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInputMethodListeners();
      jDayChooser0.getComponentPopupMenu();
      jDayChooser0.updateUI();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      jDayChooser0.setDay(44);
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      jDayChooser0.requestFocus();
      jDayChooser0.setMaxDayCharacters((-1168));
      jDayChooser0.initDecorations();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 151, '[', 0);
      jDayChooser0.getClientProperty(keyEvent0);
      keyEvent0.setSource((Object) null);
      InputEvent.getModifiersExText(2674);
      jDayChooser0.keyTyped(keyEvent0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      
      jDayChooser0.updateUI();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 0L, (-1314), (-2671), 'v', 0);
      jDayChooser0.getClientProperty(keyEvent0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 0, 0L, 1083, 1114, 'U');
      InputEvent.getModifiersExText(8841);
      jDayChooser0.removeComponentListener((ComponentListener) null);
      jDayChooser0.keyTyped(keyEvent1);
      jDayChooser0.updateUI();
      boolean boolean0 = false;
      int int0 = 34;
      Label label0 = null;
      try {
        label0 = new Label("x");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("day");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "day");
      mockPrintWriter0.append('&');
      jDayChooser0.list(printWriter0, 1430);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      GraphicContext graphicContext0 = new GraphicContext();
      graphicContext0.getBackground();
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", true, true, true, true);
      JInternalFrame jInternalFrame1 = new JInternalFrame("day", false, false);
      jInternalFrame1.getNormalBounds();
      jDayChooser0.getForeground();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext.getDefaultStyleContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8043490098333104
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPanel0, (-3907), (-3907), (-1244), 0, 'J', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      Color color0 = jDayChooser0.getForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext1.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext1.new NamedStyle("", styleContext_NamedStyle0);
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext1.new NamedStyle(styleContext_NamedStyle1);
      AttributeSet attributeSet0 = styleContext_NamedStyle2.copyAttributes();
      Font font0 = defaultStyledDocument0.getFont(attributeSet0);
      jDayChooser0.setFont(font0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.value = 0;
      jDayChooser0.setYearChooser(jYearChooser0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.593621512459067
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3t*5#R\"Tw#1_Mv=+)");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3t*5#R\"Tw#1_Mv=+)");
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setDay((-351));
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7302978718780415
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPanel0, (-3907), 9L, (-1244), 0, 'J', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.getForeground();
      jDayChooser0.getDay();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext1.new NamedStyle();
      styleContext_NamedStyle0.toString();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext1.new NamedStyle("", styleContext_NamedStyle0);
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext1.new NamedStyle(styleContext_NamedStyle1);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser();
      assertEquals(14, jDayChooser2.getDay());
      
      jDayChooser2.setDay((-1244));
      jDayChooser0.setDayBordersVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JYearChooser jYearChooser0 = new JYearChooser();
      Dimension dimension0 = jDayChooser_DecoratorButton0.getMaximumSize();
      jDayChooser0.yearChooser = jYearChooser0;
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser_DecoratorButton0.transferFocusDownCycle();
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      dimension0.height = 290;
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("nb@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7421583343393316
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPanel0, (-3907), 9L, (-1244), (-3907), 'J', menuElementArray0, menuSelectionManager0);
      KeyEvent.getKeyModifiersText(13);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.getForeground();
      jDayChooser0.getDay();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      styleContext_NamedStyle0.toString();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle("", styleContext_NamedStyle0);
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext0.new NamedStyle(styleContext_NamedStyle1);
      AttributeSet attributeSet0 = styleContext_NamedStyle2.copyAttributes();
      Font font0 = defaultStyledDocument0.getFont(attributeSet0);
      jDayChooser0.setFont(font0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JYearChooser jYearChooser0 = new JYearChooser();
      Dimension dimension0 = new Dimension();
      jDayChooser0.yearChooser = jYearChooser0;
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      dimension0.height = 0;
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isPaintingTile();
      jDayChooser0.setName("");
      jDayChooser0.drawWeeks();
      jDayChooser0.drawDays();
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.710079913333388
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      KeyEvent.getKeyModifiersText(1214);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setToolTipText("Meta+Ctrl+Alt+Alt Graph+Button1");
      MenuElement[] menuElementArray0 = new MenuElement[1];
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      basicTreeUI0.getExpandedIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Icon) null, false);
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 3407, 3407, 1214, (-2883), 'J', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[1] = 'O';
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StringContent stringContent0 = new StringContent();
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(stringContent0, styleContext0);
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle(styleContext_NamedStyle0);
      styleContext_NamedStyle1.copyAttributes();
      defaultStyledDocument0.getFont(styleContext_NamedStyle0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DebugGraphics debugGraphics0 = new DebugGraphics((Graphics) null);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }
}
