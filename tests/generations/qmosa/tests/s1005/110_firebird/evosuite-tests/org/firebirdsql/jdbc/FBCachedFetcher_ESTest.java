/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 09:15:24 GMT 2020
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.management.remote.JMXPrincipal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.gds.GDS;
import org.firebirdsql.gds.GDSException;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.EmbeddedGDSImpl;
import org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.EventHandleImp;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.gds.impl.wire.isc_db_handle_impl;
import org.firebirdsql.jca.FBConnectionRequestInfo;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.field.FBBlobField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.172054349662827
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean1 = fBCachedFetcher0.previous();
      assertFalse(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(boolean1);
      
      boolean boolean2 = fBCachedFetcher0.previous();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(boolean2);
      
      Stream<byte[][]> stream0 = linkedList0.parallelStream();
      assertEquals(1, linkedList0.size());
      assertNotNull(stream0);
      
      boolean boolean3 = fBCachedFetcher0.absolute(400);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(boolean3);
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isLast());
      assertNotNull(fBCachedFetcher1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean4 = fBCachedFetcher1.previous();
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isLast());
      assertFalse(boolean4);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      boolean boolean5 = fBCachedFetcher0.next();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(boolean5);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean6 = fBCachedFetcher0.previous();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(boolean6);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      fBCachedFetcher0.deleteRow();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean7 = linkedList0.add((byte[][]) null);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean7);
      
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertNotNull(fBCachedFetcher0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertNotNull(predicate0);
      
      boolean boolean1 = predicate0.test(fBCachedFetcher0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(boolean1);
      
      Predicate<Object> predicate1 = Predicate.isEqual((Object) fBResultSet0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNotSame(predicate1, predicate0);
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.negate();
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate2.or(predicate3);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate4, predicate2);
      assertNotNull(predicate4);
      
      boolean boolean2 = linkedList0.removeIf(predicate4);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(boolean2);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate4, predicate2);
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      byte[][] byteArray0 = new byte[5][7];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-33);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[9];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte) (-33);
      byteArray3[1] = (byte) (-33);
      byteArray3[2] = (byte) (-33);
      byteArray3[3] = (byte) (-33);
      byteArray3[4] = (byte)27;
      byteArray3[5] = (byte) (-33);
      byteArray3[6] = (byte) (-33);
      byteArray3[7] = (byte) (-33);
      byteArray3[8] = (byte) (-33);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[4];
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      
      byteArray4[0] = (byte)27;
      byteArray4[1] = (byte)64;
      byteArray4[2] = (byte) (-33);
      byteArray4[3] = (byte)27;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[2];
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      
      byteArray5[0] = (byte)64;
      byteArray5[1] = (byte)64;
      byteArray0[4] = byteArray5;
      linkedList0.push(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      byte[][] byteArray0 = new byte[0][2];
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute(3335);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3277462104103352
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean1 = fBCachedFetcher0.previous();
      assertFalse(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(boolean1);
      
      boolean boolean2 = fBCachedFetcher0.previous();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(boolean2);
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isLast());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertNotNull(fBCachedFetcher1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean3 = fBCachedFetcher1.previous();
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isLast());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(boolean3);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      boolean boolean4 = fBCachedFetcher0.next();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(boolean4);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean5 = fBCachedFetcher0.next();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean5);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      fBCachedFetcher0.deleteRow();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean6 = linkedList0.add((byte[][]) null);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean3);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean6);
      
      boolean boolean7 = fBCachedFetcher0.isLast();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean7);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean8 = fBCachedFetcher1.last();
      assertTrue(boolean8 == boolean6);
      assertFalse(boolean8 == boolean2);
      assertFalse(boolean8 == boolean1);
      assertFalse(boolean8 == boolean3);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean0);
      assertFalse(boolean8 == boolean7);
      assertFalse(boolean8 == boolean5);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertTrue(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertEquals(1, fBCachedFetcher1.getRowNum());
      assertTrue(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertTrue(boolean8);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      boolean boolean9 = fBCachedFetcher0.first();
      assertFalse(boolean9 == boolean1);
      assertTrue(boolean9 == boolean4);
      assertFalse(boolean9 == boolean3);
      assertFalse(boolean9 == boolean5);
      assertTrue(boolean9 == boolean0);
      assertTrue(boolean9 == boolean6);
      assertFalse(boolean9 == boolean7);
      assertTrue(boolean9 == boolean8);
      assertFalse(boolean9 == boolean2);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(boolean9);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      fBCachedFetcher1.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertEquals(1, fBCachedFetcher1.getRowNum());
      assertTrue(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isLast());
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.986266517864739
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean1 = fBCachedFetcher0.previous();
      assertFalse(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean1);
      
      boolean boolean2 = fBCachedFetcher0.previous();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean2);
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertNotNull(fBCachedFetcher1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")B<&W!c$}j%7p");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = fBCachedFetcher1.previous();
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(boolean4);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      boolean boolean5 = fBCachedFetcher0.next();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean5);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean6 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      fBCachedFetcher0.deleteRow();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean7 = linkedList0.add((byte[][]) null);
      assertTrue(boolean7 == boolean6);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean7);
      
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection0).getConnectionRequestInfo();
      doReturn((GDSHelper) null).when(fBManagedConnection0).getGDSHelper();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8857642807655581
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[1] = fBBlobField0;
      fBBlobFieldArray0[2] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobField0;
      fBBlobFieldArray0[4] = fBBlobField0;
      fBBlobFieldArray0[5] = fBBlobField0;
      fBBlobFieldArray0[4] = fBBlobField0;
      fBBlobFieldArray0[7] = fBBlobFieldArray0[6];
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBBlobField[] fBBlobFieldArray1 = linkedList0.toArray(fBBlobFieldArray0);
      assertEquals(8, fBBlobFieldArray0.length);
      assertEquals(8, fBBlobFieldArray1.length);
      assertEquals(1, linkedList0.size());
      assertSame(fBBlobFieldArray0, fBBlobFieldArray1);
      assertSame(fBBlobFieldArray1, fBBlobFieldArray0);
      assertNotNull(fBBlobFieldArray1);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      byte[][] byteArray0 = new byte[0][5];
      boolean boolean1 = linkedList0.add(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean1);
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBResultSet0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, linkedList0.size());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, linkedList0.size());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(linkedList0.contains(byteArray0));
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, linkedList0.size());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(linkedList0.contains(byteArray0));
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = fBCachedFetcher0.relative((-2));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, linkedList0.size());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean3);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5487986030538186
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, linkedList1.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertNotNull(fBCachedFetcher0);
      
      fBCachedFetcher0.beforeFirst();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, linkedList1.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      
      boolean boolean1 = fBCachedFetcher0.relative(141);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, linkedList1.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      
      boolean boolean2 = fBCachedFetcher0.previous();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, linkedList1.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean2);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      
      boolean boolean3 = fBCachedFetcher0.previous();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, linkedList1.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean3);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList1, fBResultSet0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, linkedList1.size());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertTrue(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isFirst());
      assertTrue(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertNotNull(fBCachedFetcher1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, linkedList1.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean4 = fBCachedFetcher1.previous();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, linkedList1.size());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertTrue(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isFirst());
      assertTrue(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertFalse(boolean4);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      boolean boolean5 = fBCachedFetcher1.relative((-1054));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, linkedList1.size());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertTrue(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isFirst());
      assertTrue(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertFalse(boolean5);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      fBCachedFetcher1.setFetchSize(141);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, linkedList1.size());
      assertTrue(fBCachedFetcher1.isEmpty());
      assertEquals(141, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isFirst());
      assertTrue(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      boolean boolean6 = fBCachedFetcher0.next();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, linkedList1.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(boolean6);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean7 = fBCachedFetcher0.previous();
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, linkedList1.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(boolean7);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, linkedList1.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      fBCachedFetcher0.deleteRow();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, linkedList1.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean8 = fBCachedFetcher1.isAfterLast();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean8 == boolean6);
      assertFalse(boolean8 == boolean0);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean5);
      assertFalse(boolean8 == boolean7);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, linkedList1.size());
      assertTrue(fBCachedFetcher1.isEmpty());
      assertEquals(141, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isFirst());
      assertTrue(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertFalse(boolean8);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, linkedList1.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      int int0 = fBCachedFetcher1.getFetchSize();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, linkedList1.size());
      assertTrue(fBCachedFetcher1.isEmpty());
      assertEquals(141, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isFirst());
      assertTrue(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertEquals(141, int0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0140355237092673
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNotNull(fBResultSet0);
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.add((byte[][]) null);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertNotSame(linkedList1, linkedList0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertNotNull(databaseParameterBuffer0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      databaseParameterBufferImp0.removeArgument(55);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      
      GDSException gDSException0 = new GDSException(55, 55);
      assertNotNull(gDSException0);
      
      isc_db_handle_impl isc_db_handle_impl1 = new isc_db_handle_impl();
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertNotNull(isc_db_handle_impl1);
      
      isc_db_handle_impl1.addWarning(gDSException0);
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      assertEquals("", gDSException0.getParam());
      assertEquals((-1), gDSException0.getFbErrorCode());
      assertFalse(gDSException0.isWarning());
      assertEquals(55, gDSException0.getIntParam());
      assertEquals(0, gDSException0.getXAErrorCode());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertNotSame(isc_db_handle_impl1, isc_db_handle_impl0);
      
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl1, gDSHelper_GDSHelperErrorListener0);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertFalse(gDSHelper0.inTransaction());
      assertNotNull(gDSHelper0);
      assertEquals(16384, GDSHelper.DEFAULT_BLOB_BUFFER_SIZE);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, fBResultSet0);
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList2.size());
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean1 = fBCachedFetcher0.next();
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList2.size());
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(boolean1);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      
      boolean boolean2 = fBCachedFetcher0.previous();
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList2.size());
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(boolean2);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      
      byte[][] byteArray0 = new byte[9][7];
      byteArray0[0] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[1] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[2] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[3] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[4] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[5] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[6] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[7] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[8] = gDSHelper0.BLOB_LENGTH_REQUEST;
      fBCachedFetcher0.insertRow(byteArray0);
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(9, byteArray0.length);
      assertEquals(0, linkedList2.size());
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(linkedList2.contains(byteArray0));
      assertFalse(linkedList0.contains(byteArray0));
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      
      fBCachedFetcher0.deleteRow();
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList2.size());
      assertEquals(0, linkedList0.size());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(linkedList2.contains(byteArray0));
      assertFalse(linkedList0.contains(byteArray0));
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      
      boolean boolean3 = fBCachedFetcher0.isAfterLast();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList2.size());
      assertEquals(0, linkedList0.size());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(linkedList2.contains(byteArray0));
      assertFalse(linkedList0.contains(byteArray0));
      assertTrue(boolean3);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean1 = fBCachedFetcher0.previous();
      assertFalse(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(boolean1);
      
      boolean boolean2 = fBCachedFetcher0.previous();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(boolean2);
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertNotNull(fBCachedFetcher1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean3 = fBCachedFetcher1.previous();
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertFalse(boolean3);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      boolean boolean4 = fBCachedFetcher0.next();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean4);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean5 = fBCachedFetcher0.previous();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(boolean5);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      fBCachedFetcher0.deleteRow();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean6 = linkedList0.add((byte[][]) null);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean6);
      
      System.setCurrentTimeMillis(1895L);
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.501192900143942
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean1 = fBCachedFetcher0.previous();
      assertFalse(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(boolean1);
      
      boolean boolean2 = fBCachedFetcher0.previous();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(boolean2);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      
      boolean boolean3 = fBCachedFetcher0.previous();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(boolean3);
      
      boolean boolean4 = fBCachedFetcher0.next();
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(boolean4);
      
      boolean boolean5 = fBCachedFetcher0.previous();
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(boolean5);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      
      boolean boolean6 = fBCachedFetcher0.isAfterLast();
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(boolean6);
      
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)100;
      boolean boolean7 = fBCachedFetcher0.absolute(2007);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(boolean7);
      
      boolean boolean8 = fBCachedFetcher0.isLast();
      assertFalse(boolean8 == boolean0);
      assertFalse(boolean8 == boolean4);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean5);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(boolean8);
      
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, int0);
      
      boolean boolean9 = fBCachedFetcher0.isFirst();
      assertTrue(boolean9 == boolean2);
      assertFalse(boolean9 == boolean4);
      assertFalse(boolean9 == boolean0);
      assertTrue(boolean9 == boolean8);
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean5);
      assertTrue(boolean9 == boolean3);
      assertTrue(boolean9 == boolean6);
      assertTrue(boolean9 == boolean7);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(boolean9);
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean10 = fBCachedFetcher0.isEmpty();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(boolean10 == boolean0);
      assertTrue(boolean10 == boolean9);
      assertTrue(boolean10 == boolean8);
      assertTrue(boolean10 == boolean6);
      assertTrue(boolean10 == boolean7);
      assertFalse(boolean10 == boolean4);
      assertTrue(boolean10 == boolean3);
      assertTrue(boolean10 == boolean2);
      assertTrue(boolean10 == boolean1);
      assertTrue(boolean10 == boolean5);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(boolean10);
      assertNotSame(linkedList0, linkedList1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4862411939709976
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean1 = fBCachedFetcher0.previous();
      assertFalse(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean1);
      
      boolean boolean2 = fBCachedFetcher0.previous();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean2);
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertNotNull(fBCachedFetcher1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean3 = fBCachedFetcher1.previous();
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(boolean3);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      boolean boolean4 = fBCachedFetcher0.next();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(boolean4);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean5 = fBCachedFetcher0.previous();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(boolean5);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      fBCachedFetcher0.deleteRow();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean6 = fBCachedFetcher1.isAfterLast();
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(boolean6);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      fBCachedFetcher1.updateRow((byte[][]) null);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)100;
      boolean boolean7 = fBCachedFetcher1.absolute(2004);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean6);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean0);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertEquals(2, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertTrue(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(boolean7);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      boolean boolean8 = fBCachedFetcher0.isLast();
      assertFalse(boolean8 == boolean5);
      assertFalse(boolean8 == boolean4);
      assertFalse(boolean8 == boolean0);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean7);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean8);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      int int0 = fBCachedFetcher1.getFetchSize();
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertEquals(2, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertTrue(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isFirst());
      assertEquals(0, int0);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      boolean boolean9 = fBCachedFetcher0.isFirst();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean9 == boolean1);
      assertFalse(boolean9 == boolean7);
      assertFalse(boolean9 == boolean6);
      assertTrue(boolean9 == boolean5);
      assertFalse(boolean9 == boolean8);
      assertFalse(boolean9 == boolean2);
      assertFalse(boolean9 == boolean3);
      assertTrue(boolean9 == boolean0);
      assertTrue(boolean9 == boolean4);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(boolean9);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean10 = fBCachedFetcher1.isBeforeFirst();
      assertTrue(boolean10 == boolean8);
      assertTrue(boolean10 == boolean2);
      assertFalse(boolean10 == boolean5);
      assertTrue(boolean10 == boolean1);
      assertTrue(boolean10 == boolean7);
      assertFalse(boolean10 == boolean4);
      assertFalse(boolean10 == boolean0);
      assertTrue(boolean10 == boolean3);
      assertTrue(boolean10 == boolean6);
      assertFalse(boolean10 == boolean9);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertEquals(2, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertTrue(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(boolean10);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      boolean boolean11 = fBCachedFetcher1.isBeforeFirst();
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertTrue(boolean11 == boolean2);
      assertFalse(boolean11 == boolean9);
      assertFalse(boolean11 == boolean4);
      assertTrue(boolean11 == boolean3);
      assertTrue(boolean11 == boolean1);
      assertTrue(boolean11 == boolean10);
      assertTrue(boolean11 == boolean7);
      assertTrue(boolean11 == boolean8);
      assertFalse(boolean11 == boolean0);
      assertTrue(boolean11 == boolean6);
      assertFalse(boolean11 == boolean5);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertEquals(2, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertTrue(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(boolean11);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.11928092190985
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNotNull(fBResultSet0);
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.add((byte[][]) null);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertNotSame(linkedList1, linkedList0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertNotNull(databaseParameterBuffer0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      databaseParameterBufferImp0.removeArgument(55);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      
      GDSException gDSException0 = new GDSException(55, 55);
      assertNotNull(gDSException0);
      
      isc_db_handle_impl0.addWarning(gDSException0);
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals((-1), gDSException0.getFbErrorCode());
      assertFalse(gDSException0.isWarning());
      assertEquals(0, gDSException0.getXAErrorCode());
      assertEquals(55, gDSException0.getIntParam());
      assertEquals("", gDSException0.getParam());
      
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertFalse(gDSHelper0.inTransaction());
      assertNotNull(gDSHelper0);
      assertEquals(16384, GDSHelper.DEFAULT_BLOB_BUFFER_SIZE);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, fBResultSet0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, linkedList2.size());
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean1 = fBCachedFetcher0.next();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, linkedList2.size());
      assertFalse(boolean1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      
      boolean boolean2 = fBCachedFetcher0.previous();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, linkedList2.size());
      assertFalse(boolean2);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      
      byte[][] byteArray0 = new byte[9][7];
      byteArray0[0] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[1] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[2] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[3] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[4] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[5] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[6] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[7] = gDSHelper0.BLOB_LENGTH_REQUEST;
      fBCachedFetcher0.insertRow(byteArray0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(9, byteArray0.length);
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(linkedList2.contains(byteArray0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      
      fBCachedFetcher0.deleteRow();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(linkedList2.contains(byteArray0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, linkedList0.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(linkedList2.contains(byteArray0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.844621476365503
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[1] = fBBlobField0;
      fBBlobFieldArray0[2] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobField0;
      fBBlobFieldArray0[4] = fBBlobField0;
      fBBlobFieldArray0[5] = fBBlobField0;
      fBBlobFieldArray0[4] = fBBlobField0;
      fBBlobFieldArray0[7] = fBBlobFieldArray0[6];
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBBlobField[] fBBlobFieldArray1 = linkedList0.toArray(fBBlobFieldArray0);
      assertEquals(8, fBBlobFieldArray0.length);
      assertEquals(8, fBBlobFieldArray1.length);
      assertEquals(1, linkedList0.size());
      assertSame(fBBlobFieldArray0, fBBlobFieldArray1);
      assertSame(fBBlobFieldArray1, fBBlobFieldArray0);
      assertNotNull(fBBlobFieldArray1);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      byte[][] byteArray0 = new byte[0][5];
      boolean boolean1 = linkedList0.add(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean1);
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBResultSet0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(2, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(2, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(linkedList0.contains(byteArray0));
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(2, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(linkedList0.contains(byteArray0));
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      System.setCurrentTimeMillis(0L);
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(2, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(linkedList0.contains(byteArray0));
      
      int int0 = fBCachedFetcher0.getRowNum();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(2, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNotNull(fBResultSet0);
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.add((byte[][]) null);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertNotSame(linkedList1, linkedList0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertNotNull(databaseParameterBuffer0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      String string0 = databaseParameterBufferImp0.getArgumentAsString((-1380));
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNull(string0);
      
      GDSHelper gDSHelper0 = new GDSHelper((GDS) null, databaseParameterBuffer0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertFalse(gDSHelper0.inTransaction());
      assertNotNull(gDSHelper0);
      assertEquals(16384, GDSHelper.DEFAULT_BLOB_BUFFER_SIZE);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertNotNull(fBCachedFetcher0);
      
      int int0 = fBCachedFetcher0.getRowNum();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, int0);
      assertNotSame(linkedList0, linkedList1);
      
      FBCachedFetcher fBCachedFetcher1 = null;
      try {
        fBCachedFetcher1 = new FBCachedFetcher(gDSHelper0, 16384, 16384, isc_stmt_handle_impl0, fBResultSet0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8407487285692812
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      byte[][] byteArray0 = new byte[13][4];
      byteArray0[1] = byteArray0[0];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-16);
      byteArray1[1] = (byte) (-59);
      byteArray1[2] = (byte) (-16);
      byteArray1[3] = (byte) (-16);
      byteArray1[4] = (byte) (-16);
      byteArray1[5] = (byte) (-117);
      byteArray0[2] = byteArray1;
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-117);
      byteArray2[1] = (byte) (-59);
      byteArray2[2] = (byte) (-16);
      byteArray2[3] = (byte) (-59);
      byteArray2[4] = (byte) (-117);
      byteArray2[5] = (byte) (-16);
      byteArray2[6] = (byte) (-59);
      byteArray2[7] = (byte) (-59);
      byteArray2[8] = (byte) (-117);
      byteArray0[3] = byteArray2;
      byte[] byteArray3 = new byte[6];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte) (-16);
      byteArray3[1] = (byte) (-16);
      byteArray3[2] = (byte) (-16);
      byteArray3[3] = (byte) (-16);
      byteArray3[4] = (byte) (-16);
      byteArray3[5] = (byte) (-117);
      byteArray0[4] = byteArray3;
      byte[] byteArray4 = new byte[1];
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      
      byteArray4[0] = (byte) (-16);
      byteArray0[5] = byteArray4;
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(13, byteArray0.length);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      
      byte[][] byteArray5 = new byte[2][1];
      assertFalse(byteArray5.equals((Object)byteArray0));
      
      byteArray5[0] = byteArray1;
      byte[] byteArray6 = new byte[5];
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray2));
      
      byteArray6[0] = (byte) (-59);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(linkedList0.contains(byteArray5));
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean1 = fBCachedFetcher0.isAfterLast();
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(linkedList0.contains(byteArray5));
      assertFalse(boolean1);
      
      boolean boolean2 = fBCachedFetcher0.isLast();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(linkedList0.contains(byteArray5));
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((List<byte[][]>) null, (FBObjectListener.FetcherListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      assertNotNull(databaseParameterBufferImp1);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      assertNotNull(javaGDSImpl1);
      
      JavaGDSImpl javaGDSImpl2 = new JavaGDSImpl();
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      assertNotNull(javaGDSImpl2);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl2.createIscDbHandle();
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertNotSame(javaGDSImpl2, javaGDSImpl1);
      assertNotSame(javaGDSImpl2, javaGDSImpl0);
      assertNotNull(isc_db_handle_impl0);
      
      GDSException gDSException0 = GDSException.createWithXAErrorCode("PURE_JAVA", 335544726);
      assertNull(gDSException0.getParam());
      assertEquals(0, gDSException0.getIntParam());
      assertEquals((-1), gDSException0.getFbErrorCode());
      assertFalse(gDSException0.isWarning());
      assertEquals(335544726, gDSException0.getXAErrorCode());
      assertNotNull(gDSException0);
      
      GDSException gDSException1 = new GDSException((-1819), 16381);
      assertFalse(gDSException1.equals((Object)gDSException0));
      assertNotNull(gDSException1);
      
      isc_db_handle_impl isc_db_handle_impl1 = new isc_db_handle_impl();
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertTrue(isc_db_handle_impl1.isValid());
      assertNotNull(isc_db_handle_impl1);
      
      List<GDSException> list0 = isc_db_handle_impl1.getWarnings();
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertTrue(isc_db_handle_impl1.isValid());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(gDSException0));
      assertNotSame(isc_db_handle_impl1, isc_db_handle_impl0);
      assertNotNull(list0);
      
      isc_db_handle_impl1.addWarning(gDSException1);
      assertFalse(gDSException1.equals((Object)gDSException0));
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      assertEquals((-1), gDSException1.getFbErrorCode());
      assertEquals("", gDSException1.getParam());
      assertFalse(gDSException1.isWarning());
      assertEquals(0, gDSException1.getXAErrorCode());
      assertEquals(16381, gDSException1.getIntParam());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertTrue(isc_db_handle_impl1.isValid());
      assertNotSame(gDSException1, gDSException0);
      assertNotSame(isc_db_handle_impl1, isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp2 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp2);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp3 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp3.equals((Object)databaseParameterBufferImp2));
      assertNotNull(databaseParameterBufferImp3);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp4 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp4.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp4.equals((Object)databaseParameterBufferImp3));
      assertNotNull(databaseParameterBufferImp4);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp5 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp5.equals((Object)databaseParameterBufferImp3));
      assertTrue(databaseParameterBufferImp5.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp5.equals((Object)databaseParameterBufferImp4));
      assertNotNull(databaseParameterBufferImp5);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp6 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp6.equals((Object)databaseParameterBufferImp5));
      assertTrue(databaseParameterBufferImp6.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp6.equals((Object)databaseParameterBufferImp4));
      assertTrue(databaseParameterBufferImp6.equals((Object)databaseParameterBufferImp3));
      assertNotNull(databaseParameterBufferImp6);
      
      JavaGDSImpl javaGDSImpl3 = new JavaGDSImpl();
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl2));
      assertNotNull(javaGDSImpl3);
      
      EventHandleImp eventHandleImp0 = (EventHandleImp)javaGDSImpl3.createEventHandle("PURE_JAVA");
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl2));
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertNotSame(javaGDSImpl3, javaGDSImpl1);
      assertNotSame(javaGDSImpl3, javaGDSImpl0);
      assertNotSame(javaGDSImpl3, javaGDSImpl2);
      assertNotNull(eventHandleImp0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp7 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp7.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp7.equals((Object)databaseParameterBufferImp6));
      assertTrue(databaseParameterBufferImp7.equals((Object)databaseParameterBufferImp3));
      assertTrue(databaseParameterBufferImp7.equals((Object)databaseParameterBufferImp5));
      assertTrue(databaseParameterBufferImp7.equals((Object)databaseParameterBufferImp4));
      assertNotNull(databaseParameterBufferImp7);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp8 = (org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp)databaseParameterBufferImp6.deepCopy();
      assertTrue(databaseParameterBufferImp6.equals((Object)databaseParameterBufferImp5));
      assertTrue(databaseParameterBufferImp6.equals((Object)databaseParameterBufferImp7));
      assertTrue(databaseParameterBufferImp6.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp6.equals((Object)databaseParameterBufferImp4));
      assertTrue(databaseParameterBufferImp6.equals((Object)databaseParameterBufferImp3));
      assertTrue(databaseParameterBufferImp8.equals((Object)databaseParameterBufferImp4));
      assertTrue(databaseParameterBufferImp8.equals((Object)databaseParameterBufferImp7));
      assertTrue(databaseParameterBufferImp8.equals((Object)databaseParameterBufferImp3));
      assertTrue(databaseParameterBufferImp8.equals((Object)databaseParameterBufferImp5));
      assertTrue(databaseParameterBufferImp8.equals((Object)databaseParameterBufferImp6));
      assertTrue(databaseParameterBufferImp8.equals((Object)databaseParameterBufferImp2));
      assertNotSame(databaseParameterBufferImp6, databaseParameterBufferImp4);
      assertNotSame(databaseParameterBufferImp6, databaseParameterBufferImp3);
      assertNotSame(databaseParameterBufferImp6, databaseParameterBufferImp8);
      assertNotSame(databaseParameterBufferImp6, databaseParameterBufferImp5);
      assertNotSame(databaseParameterBufferImp6, databaseParameterBufferImp2);
      assertNotSame(databaseParameterBufferImp6, databaseParameterBufferImp7);
      assertNotSame(databaseParameterBufferImp8, databaseParameterBufferImp6);
      assertNotSame(databaseParameterBufferImp8, databaseParameterBufferImp2);
      assertNotSame(databaseParameterBufferImp8, databaseParameterBufferImp4);
      assertNotSame(databaseParameterBufferImp8, databaseParameterBufferImp3);
      assertNotSame(databaseParameterBufferImp8, databaseParameterBufferImp7);
      assertNotSame(databaseParameterBufferImp8, databaseParameterBufferImp5);
      assertNotNull(databaseParameterBufferImp8);
      
      boolean boolean1 = isc_db_handle_impl1.hasTransactions();
      assertFalse(boolean1 == boolean0);
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertTrue(isc_db_handle_impl1.isValid());
      assertFalse(boolean1);
      assertNotSame(isc_db_handle_impl1, isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp9 = (org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp)databaseParameterBufferImp7.deepCopy();
      assertTrue(databaseParameterBufferImp7.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp7.equals((Object)databaseParameterBufferImp6));
      assertTrue(databaseParameterBufferImp7.equals((Object)databaseParameterBufferImp3));
      assertTrue(databaseParameterBufferImp7.equals((Object)databaseParameterBufferImp8));
      assertTrue(databaseParameterBufferImp7.equals((Object)databaseParameterBufferImp5));
      assertTrue(databaseParameterBufferImp7.equals((Object)databaseParameterBufferImp4));
      assertTrue(databaseParameterBufferImp9.equals((Object)databaseParameterBufferImp5));
      assertTrue(databaseParameterBufferImp9.equals((Object)databaseParameterBufferImp4));
      assertTrue(databaseParameterBufferImp9.equals((Object)databaseParameterBufferImp3));
      assertTrue(databaseParameterBufferImp9.equals((Object)databaseParameterBufferImp7));
      assertTrue(databaseParameterBufferImp9.equals((Object)databaseParameterBufferImp8));
      assertTrue(databaseParameterBufferImp9.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp9.equals((Object)databaseParameterBufferImp6));
      assertNotSame(databaseParameterBufferImp7, databaseParameterBufferImp9);
      assertNotSame(databaseParameterBufferImp7, databaseParameterBufferImp4);
      assertNotSame(databaseParameterBufferImp7, databaseParameterBufferImp3);
      assertNotSame(databaseParameterBufferImp7, databaseParameterBufferImp8);
      assertNotSame(databaseParameterBufferImp7, databaseParameterBufferImp5);
      assertNotSame(databaseParameterBufferImp7, databaseParameterBufferImp2);
      assertNotSame(databaseParameterBufferImp7, databaseParameterBufferImp6);
      assertNotSame(databaseParameterBufferImp9, databaseParameterBufferImp4);
      assertNotSame(databaseParameterBufferImp9, databaseParameterBufferImp7);
      assertNotSame(databaseParameterBufferImp9, databaseParameterBufferImp2);
      assertNotSame(databaseParameterBufferImp9, databaseParameterBufferImp6);
      assertNotSame(databaseParameterBufferImp9, databaseParameterBufferImp3);
      assertNotSame(databaseParameterBufferImp9, databaseParameterBufferImp8);
      assertNotSame(databaseParameterBufferImp9, databaseParameterBufferImp5);
      assertNotNull(databaseParameterBufferImp9);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp10 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp10.equals((Object)databaseParameterBufferImp4));
      assertTrue(databaseParameterBufferImp10.equals((Object)databaseParameterBufferImp3));
      assertTrue(databaseParameterBufferImp10.equals((Object)databaseParameterBufferImp8));
      assertTrue(databaseParameterBufferImp10.equals((Object)databaseParameterBufferImp5));
      assertTrue(databaseParameterBufferImp10.equals((Object)databaseParameterBufferImp6));
      assertTrue(databaseParameterBufferImp10.equals((Object)databaseParameterBufferImp9));
      assertTrue(databaseParameterBufferImp10.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp10.equals((Object)databaseParameterBufferImp7));
      assertNotNull(databaseParameterBufferImp10);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp11 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp11.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp11.equals((Object)databaseParameterBufferImp9));
      assertTrue(databaseParameterBufferImp11.equals((Object)databaseParameterBufferImp6));
      assertTrue(databaseParameterBufferImp11.equals((Object)databaseParameterBufferImp3));
      assertTrue(databaseParameterBufferImp11.equals((Object)databaseParameterBufferImp5));
      assertTrue(databaseParameterBufferImp11.equals((Object)databaseParameterBufferImp7));
      assertTrue(databaseParameterBufferImp11.equals((Object)databaseParameterBufferImp8));
      assertTrue(databaseParameterBufferImp11.equals((Object)databaseParameterBufferImp10));
      assertTrue(databaseParameterBufferImp11.equals((Object)databaseParameterBufferImp4));
      assertNotNull(databaseParameterBufferImp11);
      
      isc_db_handle_impl isc_db_handle_impl2 = (isc_db_handle_impl)javaGDSImpl2.createIscDbHandle();
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl3));
      assertFalse(isc_db_handle_impl2.equals((Object)isc_db_handle_impl1));
      assertFalse(isc_db_handle_impl2.equals((Object)isc_db_handle_impl0));
      assertEquals(0, isc_db_handle_impl2.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl2.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl2.getResp_data_len());
      assertEquals(0, isc_db_handle_impl2.getResp_object());
      assertEquals(0, isc_db_handle_impl2.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl2.getDialect());
      assertEquals(0, isc_db_handle_impl2.getProtocol());
      assertTrue(isc_db_handle_impl2.isValid());
      assertNotSame(javaGDSImpl2, javaGDSImpl1);
      assertNotSame(javaGDSImpl2, javaGDSImpl0);
      assertNotSame(javaGDSImpl2, javaGDSImpl3);
      assertNotSame(isc_db_handle_impl2, isc_db_handle_impl1);
      assertNotSame(isc_db_handle_impl2, isc_db_handle_impl0);
      assertNotNull(isc_db_handle_impl2);
      
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl3, databaseParameterBufferImp0, isc_db_handle_impl0, (GDSHelper.GDSHelperErrorListener) null);
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl2));
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBufferImp1));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl3));
      assertFalse(isc_db_handle_impl0.equals((Object)isc_db_handle_impl1));
      assertFalse(isc_db_handle_impl0.equals((Object)isc_db_handle_impl2));
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertFalse(gDSHelper0.inTransaction());
      assertNotNull(gDSHelper0);
      assertEquals(16384, GDSHelper.DEFAULT_BLOB_BUFFER_SIZE);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      boolean boolean2 = linkedList1.add((byte[][]) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertEquals(1, linkedList1.size());
      assertTrue(boolean2);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList1, linkedList0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      assertFalse(linkedList0.equals((Object)linkedList2));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1, linkedList1.size());
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean3 = fBCachedFetcher0.isEmpty();
      assertFalse(linkedList0.equals((Object)linkedList2));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1, linkedList1.size());
      assertFalse(boolean3);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList1, linkedList0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.294545165844896
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean0 = fBCachedFetcher0.last();
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean0);
      
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      GDSType gDSType0 = javaGDSImpl0.getType();
      assertEquals("PURE_JAVA", gDSType0.toString());
      assertNotNull(gDSType0);
      
      boolean boolean1 = fBCachedFetcher0.relative(0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean1);
      
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl(gDSType0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertNotNull(fBCachedFetcher0);
      
      byte[][] byteArray0 = new byte[0][6];
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher1);
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(byteArray0));
      assertNotNull(linkedList1);
      
      boolean boolean1 = fBCachedFetcher0.isAfterLast();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean2 = fBCachedFetcher0.isBeforeFirst();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean2);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean3 = fBCachedFetcher0.previous();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean3);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      byte[][] byteArray1 = new byte[9][6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-120);
      byteArray2[1] = (byte) (-15);
      byteArray1[0] = byteArray2;
      byte[] byteArray3 = new byte[7];
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte) (-120);
      byteArray3[1] = (byte) (-97);
      byteArray3[2] = (byte) (-120);
      byteArray3[3] = (byte) (-120);
      byteArray3[4] = (byte)1;
      byteArray3[5] = (byte) (-15);
      byteArray3[6] = (byte) (-15);
      byteArray1[1] = byteArray3;
      byte[] byteArray4 = new byte[3];
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      
      byteArray4[0] = (byte) (-97);
      byteArray4[1] = (byte) (-15);
      byteArray4[2] = (byte) (-120);
      byte[] byteArray5 = new byte[7];
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray3));
      
      byteArray5[0] = (byte) (-120);
      byteArray5[1] = (byte) (-15);
      byteArray5[2] = (byte) (-120);
      byteArray5[3] = (byte) (-97);
      byteArray5[4] = (byte)1;
      byteArray5[5] = (byte) (-15);
      byteArray5[6] = (byte) (-120);
      byteArray1[3] = byteArray5;
      byte[] byteArray6 = new byte[9];
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray4));
      
      byteArray6[0] = (byte) (-15);
      byteArray6[1] = (byte) (-15);
      byteArray6[2] = (byte) (-15);
      byteArray6[3] = (byte)1;
      byteArray6[4] = (byte) (-15);
      byteArray6[5] = (byte) (-120);
      byteArray6[6] = (byte)1;
      byteArray6[7] = (byte) (-97);
      byteArray5[5] = (byte)1;
      byteArray1[4] = byteArray6;
      byte[] byteArray7 = new byte[1];
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray2));
      
      byteArray7[0] = (byte) (-15);
      byteArray1[5] = byteArray7;
      byte[] byteArray8 = new byte[21];
      assertFalse(byteArray8.equals((Object)byteArray3));
      assertFalse(byteArray8.equals((Object)byteArray5));
      assertFalse(byteArray8.equals((Object)byteArray4));
      assertFalse(byteArray8.equals((Object)byteArray2));
      assertFalse(byteArray8.equals((Object)byteArray7));
      assertFalse(byteArray8.equals((Object)byteArray6));
      
      byteArray8[0] = (byte) (-120);
      byteArray8[1] = (byte) (-97);
      byteArray8[2] = (byte) (-15);
      byteArray8[3] = (byte) (-97);
      byteArray8[4] = (byte)1;
      byteArray8[5] = (byte) (-120);
      byteArray8[6] = (byte) (-15);
      byteArray8[7] = (byte) (-97);
      byteArray1[6] = byteArray8;
      byte[] byteArray9 = new byte[0];
      assertFalse(byteArray9.equals((Object)byteArray8));
      assertFalse(byteArray9.equals((Object)byteArray3));
      assertFalse(byteArray9.equals((Object)byteArray5));
      assertFalse(byteArray9.equals((Object)byteArray6));
      assertFalse(byteArray9.equals((Object)byteArray4));
      assertFalse(byteArray9.equals((Object)byteArray7));
      assertFalse(byteArray9.equals((Object)byteArray2));
      
      byteArray1[7] = byteArray9;
      byte[] byteArray10 = new byte[8];
      assertFalse(byteArray10.equals((Object)byteArray6));
      assertFalse(byteArray10.equals((Object)byteArray8));
      assertFalse(byteArray10.equals((Object)byteArray9));
      assertFalse(byteArray10.equals((Object)byteArray7));
      assertFalse(byteArray10.equals((Object)byteArray3));
      assertFalse(byteArray10.equals((Object)byteArray5));
      assertFalse(byteArray10.equals((Object)byteArray2));
      assertFalse(byteArray10.equals((Object)byteArray4));
      
      byteArray10[0] = (byte)1;
      byteArray10[1] = (byte) (-15);
      byteArray10[2] = (byte) (-120);
      byteArray10[3] = (byte)1;
      byteArray10[4] = (byte) (-120);
      byteArray10[5] = (byte) (-15);
      byteArray10[6] = (byte) (-120);
      byteArray10[7] = (byte) (-97);
      byteArray1[8] = byteArray10;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertNotNull(fBCachedFetcher0);
      
      byte[][] byteArray0 = new byte[0][6];
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isFirst());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher1);
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(byteArray0));
      assertNotNull(linkedList1);
      
      boolean boolean1 = fBCachedFetcher0.isAfterLast();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean2 = fBCachedFetcher0.isBeforeFirst();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean2);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean3 = fBCachedFetcher0.previous();
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean3);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      byte[][] byteArray1 = new byte[9][6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-120);
      byteArray2[1] = (byte) (-15);
      byteArray1[0] = byteArray2;
      byte[] byteArray3 = new byte[7];
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte) (-120);
      byteArray3[1] = (byte) (-97);
      byteArray3[2] = (byte) (-120);
      byteArray3[3] = (byte) (-120);
      byteArray3[4] = (byte)1;
      byteArray3[5] = (byte) (-15);
      byteArray3[6] = (byte) (-15);
      byteArray1[1] = byteArray3;
      byte[] byteArray4 = new byte[3];
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      
      byteArray4[0] = (byte) (-97);
      byteArray4[1] = (byte) (-15);
      byteArray4[2] = (byte) (-120);
      byte[] byteArray5 = new byte[7];
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray4));
      
      byteArray5[0] = (byte) (-120);
      byteArray5[1] = (byte) (-15);
      byteArray5[2] = (byte) (-120);
      byteArray5[3] = (byte) (-97);
      byteArray5[4] = (byte)1;
      byteArray5[5] = (byte) (-15);
      byteArray5[6] = (byte) (-120);
      byteArray1[3] = byteArray5;
      byte[] byteArray6 = new byte[9];
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray4));
      
      byteArray6[0] = (byte) (-15);
      byteArray6[1] = (byte) (-15);
      byteArray6[2] = (byte) (-15);
      byteArray6[3] = (byte)1;
      byteArray6[4] = (byte) (-15);
      byteArray6[5] = (byte) (-120);
      byteArray6[6] = (byte)1;
      byteArray6[7] = (byte) (-97);
      byteArray6[8] = (byte)1;
      byteArray1[4] = byteArray6;
      byte[] byteArray7 = new byte[1];
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray2));
      
      byteArray7[0] = (byte) (-15);
      byteArray1[5] = byteArray7;
      byte[] byteArray8 = new byte[8];
      assertFalse(byteArray8.equals((Object)byteArray2));
      assertFalse(byteArray8.equals((Object)byteArray3));
      assertFalse(byteArray8.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray7));
      assertFalse(byteArray8.equals((Object)byteArray4));
      assertFalse(byteArray8.equals((Object)byteArray5));
      
      byteArray8[0] = (byte) (-120);
      byteArray8[1] = (byte) (-97);
      byteArray8[2] = (byte) (-15);
      byteArray8[3] = (byte) (-97);
      byteArray8[4] = (byte)1;
      byteArray8[5] = (byte) (-120);
      byteArray8[6] = (byte) (-15);
      byteArray8[7] = (byte) (-97);
      byteArray1[6] = byteArray8;
      byte[] byteArray9 = new byte[0];
      assertFalse(byteArray9.equals((Object)byteArray6));
      assertFalse(byteArray9.equals((Object)byteArray5));
      assertFalse(byteArray9.equals((Object)byteArray7));
      assertFalse(byteArray9.equals((Object)byteArray3));
      assertFalse(byteArray9.equals((Object)byteArray8));
      assertFalse(byteArray9.equals((Object)byteArray4));
      assertFalse(byteArray9.equals((Object)byteArray2));
      
      byteArray1[7] = byteArray9;
      byte[] byteArray10 = new byte[8];
      assertFalse(byteArray10.equals((Object)byteArray8));
      assertFalse(byteArray10.equals((Object)byteArray2));
      assertFalse(byteArray10.equals((Object)byteArray7));
      assertFalse(byteArray10.equals((Object)byteArray4));
      assertFalse(byteArray10.equals((Object)byteArray9));
      assertFalse(byteArray10.equals((Object)byteArray6));
      assertFalse(byteArray10.equals((Object)byteArray5));
      assertFalse(byteArray10.equals((Object)byteArray3));
      
      byteArray10[0] = (byte)1;
      byteArray10[1] = (byte) (-15);
      byteArray10[2] = (byte) (-120);
      byteArray10[3] = (byte)1;
      byteArray10[4] = (byte) (-120);
      byteArray10[5] = (byte) (-15);
      byteArray10[6] = (byte) (-120);
      byteArray10[7] = (byte) (-97);
      byteArray1[8] = byteArray10;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8848713335781606
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[1] = fBBlobField0;
      fBBlobFieldArray0[2] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobField0;
      fBBlobFieldArray0[4] = fBBlobField0;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      fBBlobFieldArray0[5] = fBBlobField0;
      fBBlobFieldArray0[4] = fBBlobField0;
      fBBlobFieldArray0[7] = fBBlobFieldArray0[6];
      boolean boolean1 = linkedList0.add((byte[][]) null);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      
      FBBlobField[] fBBlobFieldArray1 = linkedList0.toArray(fBBlobFieldArray0);
      assertEquals(8, fBBlobFieldArray0.length);
      assertEquals(8, fBBlobFieldArray1.length);
      assertEquals(1, linkedList0.size());
      assertSame(fBBlobFieldArray0, fBBlobFieldArray1);
      assertSame(fBBlobFieldArray1, fBBlobFieldArray0);
      assertNotNull(fBBlobFieldArray1);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      byte[][] byteArray0 = new byte[0][5];
      boolean boolean2 = linkedList0.add(byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, byteArray0.length);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean2);
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBResultSet0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      
      fBCachedFetcher0.close();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(linkedList0.contains(byteArray0));
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(linkedList0.contains(byteArray0));
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(linkedList0.contains(byteArray0));
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection((FBManagedConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertNotNull(fBCachedFetcher0);
      
      int int0 = 3335;
      boolean boolean0 = fBCachedFetcher0.absolute((-241));
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(boolean0);
      
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection0).getConnectionRequestInfo();
      doReturn((GDSHelper) null).when(fBManagedConnection0).getGDSHelper();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4402347497045995
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      assertNotNull(databaseParameterBufferImp1);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      assertNotNull(javaGDSImpl1);
      
      JavaGDSImpl javaGDSImpl2 = new JavaGDSImpl();
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      assertNotNull(javaGDSImpl2);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl2.createIscDbHandle();
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertNotSame(javaGDSImpl2, javaGDSImpl0);
      assertNotSame(javaGDSImpl2, javaGDSImpl1);
      assertNotNull(isc_db_handle_impl0);
      
      GDSException gDSException0 = GDSException.createWithXAErrorCode("PURE_JAVA", 16381);
      assertFalse(gDSException0.isWarning());
      assertNull(gDSException0.getParam());
      assertEquals((-1), gDSException0.getFbErrorCode());
      assertEquals(16381, gDSException0.getXAErrorCode());
      assertEquals(0, gDSException0.getIntParam());
      assertNotNull(gDSException0);
      
      GDSException gDSException1 = new GDSException((-1819), 16381);
      assertFalse(gDSException1.equals((Object)gDSException0));
      assertNotNull(gDSException1);
      
      isc_db_handle_impl isc_db_handle_impl1 = new isc_db_handle_impl();
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertNotNull(isc_db_handle_impl1);
      
      isc_db_handle_impl1.addWarning(gDSException1);
      assertFalse(gDSException1.equals((Object)gDSException0));
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      assertFalse(gDSException1.isWarning());
      assertEquals((-1), gDSException1.getFbErrorCode());
      assertEquals(0, gDSException1.getXAErrorCode());
      assertEquals(16381, gDSException1.getIntParam());
      assertEquals("", gDSException1.getParam());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertNotSame(gDSException1, gDSException0);
      assertNotSame(isc_db_handle_impl1, isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp2 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp2);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp3 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp3.equals((Object)databaseParameterBufferImp2));
      assertNotNull(databaseParameterBufferImp3);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp4 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp4.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp4.equals((Object)databaseParameterBufferImp3));
      assertNotNull(databaseParameterBufferImp4);
      
      JavaGDSImpl javaGDSImpl3 = new JavaGDSImpl();
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl2));
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl0));
      assertNotNull(javaGDSImpl3);
      
      EventHandleImp eventHandleImp0 = (EventHandleImp)javaGDSImpl0.createEventHandle("PURE_JAVA");
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl3));
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl2));
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertNotSame(javaGDSImpl0, javaGDSImpl3);
      assertNotSame(javaGDSImpl0, javaGDSImpl1);
      assertNotSame(javaGDSImpl0, javaGDSImpl2);
      assertNotNull(eventHandleImp0);
      
      EventHandleImp eventHandleImp1 = (EventHandleImp)javaGDSImpl3.createEventHandle("PURE_JAVA");
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl2));
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl0));
      assertFalse(eventHandleImp1.equals((Object)eventHandleImp0));
      assertEquals((-1), eventHandleImp1.getEventCount());
      assertEquals((-1), eventHandleImp1.getEventId());
      assertEquals((-1), eventHandleImp1.getLocalId());
      assertEquals("PURE_JAVA", eventHandleImp1.getEventName());
      assertNotSame(javaGDSImpl3, javaGDSImpl2);
      assertNotSame(javaGDSImpl3, javaGDSImpl1);
      assertNotSame(javaGDSImpl3, javaGDSImpl0);
      assertNotSame(eventHandleImp1, eventHandleImp0);
      assertNotNull(eventHandleImp1);
      
      GDSException gDSException2 = new GDSException("PURE_JAVA");
      assertFalse(gDSException2.equals((Object)gDSException0));
      assertFalse(gDSException2.equals((Object)gDSException1));
      assertNotNull(gDSException2);
      
      isc_db_handle_impl1.addWarning(gDSException0);
      assertFalse(gDSException0.equals((Object)gDSException2));
      assertFalse(gDSException0.equals((Object)gDSException1));
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      assertFalse(gDSException0.isWarning());
      assertNull(gDSException0.getParam());
      assertEquals((-1), gDSException0.getFbErrorCode());
      assertEquals(16381, gDSException0.getXAErrorCode());
      assertEquals(0, gDSException0.getIntParam());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertNotSame(gDSException0, gDSException2);
      assertNotSame(gDSException0, gDSException1);
      assertNotSame(isc_db_handle_impl1, isc_db_handle_impl0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PURE_JAVA");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      GDSException gDSException3 = GDSException.createWithXAErrorCode("PURE_JAVA", (-1905));
      assertFalse(gDSException3.equals((Object)gDSException1));
      assertFalse(gDSException3.equals((Object)gDSException2));
      assertFalse(gDSException3.equals((Object)gDSException0));
      assertEquals(0, gDSException3.getIntParam());
      assertEquals((-1), gDSException3.getFbErrorCode());
      assertNull(gDSException3.getParam());
      assertFalse(gDSException3.isWarning());
      assertEquals((-1905), gDSException3.getXAErrorCode());
      assertNotSame(gDSException3, gDSException1);
      assertNotSame(gDSException3, gDSException2);
      assertNotSame(gDSException3, gDSException0);
      assertNotNull(gDSException3);
      
      isc_db_handle_impl1.addWarning(gDSException1);
      assertFalse(gDSException1.equals((Object)gDSException3));
      assertFalse(gDSException1.equals((Object)gDSException0));
      assertFalse(gDSException1.equals((Object)gDSException2));
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      assertFalse(gDSException1.isWarning());
      assertEquals((-1), gDSException1.getFbErrorCode());
      assertEquals(0, gDSException1.getXAErrorCode());
      assertEquals(16381, gDSException1.getIntParam());
      assertEquals("", gDSException1.getParam());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertNotSame(gDSException1, gDSException3);
      assertNotSame(gDSException1, gDSException0);
      assertNotSame(gDSException1, gDSException2);
      assertNotSame(isc_db_handle_impl1, isc_db_handle_impl0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean2 = fBCachedFetcher0.relative(1562);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean2);
      
      boolean boolean3 = fBCachedFetcher0.relative((-1905));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(boolean3);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)1;
      byteArray0[0] = byteArray1;
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      
      linkedList0.addFirst(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(2, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      
      int int0 = 1970;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4142790651247086
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      byte[][] byteArray0 = new byte[1][1];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)6;
      byteArray1[1] = (byte)86;
      byteArray1[2] = (byte)6;
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(1, linkedList0.size());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative((-909));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1858893592192605
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertNotNull(fBResultSet0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean1 = fBCachedFetcher0.previous();
      assertFalse(boolean1 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertNotNull(fBCachedFetcher1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean3 = fBCachedFetcher1.previous();
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(boolean3);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      boolean boolean4 = fBCachedFetcher0.next();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(boolean4);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean5 = fBCachedFetcher0.previous();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(boolean5);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      fBCachedFetcher0.setFetchSize(60000);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(60000, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      fBCachedFetcher0.deleteRow();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(60000, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean6 = linkedList0.add((byte[][]) null);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean6);
      
      System.setCurrentTimeMillis(255L);
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(60000, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9795962153613327
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean0 = fBCachedFetcher0.absolute(55);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(boolean0);
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isFirst());
      assertTrue(fBCachedFetcher1.isEmpty());
      assertTrue(fBCachedFetcher1.isLast());
      assertNotNull(fBCachedFetcher1);
      
      fBCachedFetcher1.beforeFirst();
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isFirst());
      assertTrue(fBCachedFetcher1.isEmpty());
      assertTrue(fBCachedFetcher1.isLast());
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      boolean boolean1 = fBCachedFetcher0.previous();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(boolean1);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean2 = fBCachedFetcher0.next();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(boolean2);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean3 = fBCachedFetcher0.last();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(boolean3);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean4 = fBCachedFetcher0.previous();
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(boolean4);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      
      boolean boolean5 = fBCachedFetcher1.relative(55);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isFirst());
      assertTrue(fBCachedFetcher1.isEmpty());
      assertTrue(fBCachedFetcher1.isLast());
      assertFalse(boolean5);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection0).getConnectionRequestInfo();
      doReturn((GDSHelper) null).when(fBManagedConnection0).getGDSHelper();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertNotNull(fBCachedFetcher0);
      
      byte[][] byteArray0 = new byte[0][6];
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isLast());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher1);
      
      // Undeclared exception!
      try { 
        fBCachedFetcher1.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertNotNull(fBCachedFetcher0);
      
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      assertNotNull(jMXPrincipal0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      assertNotNull(predicate0);
      
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Predicate<Object> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      boolean boolean0 = predicate2.test(timeUnit0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-858));
      assertEquals((-858), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-3438));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-3438), (int)integer1);
      assertNotNull(integer1);
      
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate3.negate();
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate4, predicate1);
      assertNotNull(predicate4);
      
      boolean boolean1 = predicate0.test((Object) null);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Predicate<Object> predicate5 = predicate0.and(predicate4);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate0));
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate2, predicate5);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate5, predicate2);
      assertNotNull(predicate5);
      
      Predicate<Object> predicate6 = predicate1.and(predicate3);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate2, predicate5);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate6, predicate5);
      assertNotSame(predicate6, predicate2);
      assertNotNull(predicate6);
      
      Integer integer2 = new Integer((-3176));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-3176), (int)integer2);
      assertNotNull(integer2);
      
      boolean boolean2 = predicate2.test(linkedList0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertEquals(0, linkedList0.size());
      assertFalse(boolean2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate2, predicate5);
      assertNotSame(predicate2, predicate6);
      
      Predicate<Object> predicate7 = predicate4.negate();
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertNotSame(predicate7, predicate1);
      assertNotSame(predicate7, predicate4);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate7);
      assertNotSame(predicate2, predicate5);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate7);
      assertNotNull(predicate7);
      
      boolean boolean3 = predicate7.test(predicate3);
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertTrue(boolean3);
      assertNotSame(predicate7, predicate1);
      assertNotSame(predicate7, predicate4);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate7);
      assertNotSame(predicate2, predicate5);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate7);
      
      Integer integer3 = new Integer(6);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(6, (int)integer3);
      assertNotNull(integer3);
      
      Predicate<Object> predicate8 = Predicate.isEqual((Object) integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate7));
      assertNotSame(predicate8, predicate0);
      assertNotNull(predicate8);
      
      Predicate<Object> predicate9 = predicate8.negate();
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate0));
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate3));
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate5));
      assertFalse(predicate9.equals((Object)predicate2));
      assertFalse(predicate9.equals((Object)predicate1));
      assertFalse(predicate9.equals((Object)predicate8));
      assertNotSame(predicate8, predicate0);
      assertNotSame(predicate9, predicate4);
      assertNotSame(predicate9, predicate7);
      assertNotSame(predicate9, predicate1);
      assertNotNull(predicate9);
      
      Predicate<String> predicate10 = Predicate.isEqual((Object) predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate8));
      assertNotSame(predicate0, predicate8);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate7);
      assertNotNull(predicate10);
      
      Predicate<Object> predicate11 = predicate0.negate();
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate2));
      assertFalse(predicate11.equals((Object)predicate6));
      assertFalse(predicate11.equals((Object)predicate5));
      assertFalse(predicate11.equals((Object)predicate7));
      assertFalse(predicate11.equals((Object)predicate1));
      assertFalse(predicate11.equals((Object)predicate4));
      assertFalse(predicate11.equals((Object)predicate0));
      assertFalse(predicate11.equals((Object)predicate8));
      assertFalse(predicate11.equals((Object)predicate3));
      assertNotSame(predicate0, predicate8);
      assertNotSame(predicate11, predicate9);
      assertNotSame(predicate11, predicate7);
      assertNotSame(predicate11, predicate1);
      assertNotSame(predicate11, predicate4);
      assertNotNull(predicate11);
      
      boolean boolean4 = predicate7.test(integer3);
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate11));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate11));
      assertFalse(predicate4.equals((Object)predicate0));
      assertTrue(boolean4);
      assertNotSame(predicate7, predicate1);
      assertNotSame(predicate7, predicate9);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate7, predicate4);
      assertNotSame(predicate0, predicate8);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate7);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate2, predicate5);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate7);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate4, predicate11);
      
      boolean boolean5 = linkedList0.removeIf(predicate4);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate0));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate11));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate11));
      assertFalse(predicate4.equals((Object)predicate0));
      assertEquals(0, linkedList0.size());
      assertFalse(boolean5);
      assertNotSame(predicate0, predicate8);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate7);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate2, predicate5);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate7);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate4, predicate11);
      
      boolean boolean6 = fBCachedFetcher0.first();
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(boolean6);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5403058252265167
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertNotNull(fBCachedFetcher0);
      
      fBCachedFetcher0.afterLast();
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertEquals(0, linkedList0.size());
      assertNotNull(predicate1);
      
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection((FBManagedConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[1] = fBBlobField0;
      fBBlobFieldArray0[2] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobField0;
      fBBlobFieldArray0[4] = fBBlobField0;
      fBBlobFieldArray0[5] = fBBlobField0;
      fBBlobFieldArray0[4] = fBBlobField0;
      fBBlobFieldArray0[7] = fBBlobFieldArray0[6];
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      FBBlobField[] fBBlobFieldArray1 = linkedList0.toArray(fBBlobFieldArray0);
      assertEquals(8, fBBlobFieldArray0.length);
      assertEquals(8, fBBlobFieldArray1.length);
      assertEquals(1, linkedList0.size());
      assertSame(fBBlobFieldArray0, fBBlobFieldArray1);
      assertSame(fBBlobFieldArray1, fBBlobFieldArray0);
      assertNotNull(fBBlobFieldArray1);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      byte[][] byteArray0 = new byte[0][5];
      boolean boolean1 = linkedList0.add(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean1);
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBResultSet0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, linkedList0.size());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNotNull(fBResultSet0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      assertNotNull(databaseParameterBufferImp1);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      assertNotNull(javaGDSImpl1);
      
      JavaGDSImpl javaGDSImpl2 = new JavaGDSImpl();
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      assertNotNull(javaGDSImpl2);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl2.createIscDbHandle();
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotSame(javaGDSImpl2, javaGDSImpl0);
      assertNotSame(javaGDSImpl2, javaGDSImpl1);
      assertNotNull(isc_db_handle_impl0);
      
      GDSException gDSException0 = GDSException.createWithXAErrorCode("PURE_JAVA", 335544726);
      assertEquals((-1), gDSException0.getFbErrorCode());
      assertFalse(gDSException0.isWarning());
      assertEquals(0, gDSException0.getIntParam());
      assertNull(gDSException0.getParam());
      assertEquals(335544726, gDSException0.getXAErrorCode());
      assertNotNull(gDSException0);
      
      GDSException gDSException1 = new GDSException((-1819), 16381);
      assertFalse(gDSException1.equals((Object)gDSException0));
      assertNotNull(gDSException1);
      
      isc_db_handle_impl isc_db_handle_impl1 = new isc_db_handle_impl();
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertNotNull(isc_db_handle_impl1);
      
      List<GDSException> list0 = isc_db_handle_impl1.getWarnings();
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(gDSException1));
      assertNotSame(isc_db_handle_impl1, isc_db_handle_impl0);
      assertNotNull(list0);
      
      isc_db_handle_impl1.addWarning(gDSException1);
      assertFalse(gDSException1.equals((Object)gDSException0));
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      assertEquals("", gDSException1.getParam());
      assertEquals(0, gDSException1.getXAErrorCode());
      assertEquals(16381, gDSException1.getIntParam());
      assertEquals((-1), gDSException1.getFbErrorCode());
      assertFalse(gDSException1.isWarning());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertNotSame(gDSException1, gDSException0);
      assertNotSame(isc_db_handle_impl1, isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp2 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp2);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp3 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp3.equals((Object)databaseParameterBufferImp2));
      assertNotNull(databaseParameterBufferImp3);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp4 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp4.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp4.equals((Object)databaseParameterBufferImp3));
      assertNotNull(databaseParameterBufferImp4);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp5 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp5.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp5.equals((Object)databaseParameterBufferImp3));
      assertTrue(databaseParameterBufferImp5.equals((Object)databaseParameterBufferImp4));
      assertNotNull(databaseParameterBufferImp5);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp6 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp6.equals((Object)databaseParameterBufferImp4));
      assertTrue(databaseParameterBufferImp6.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp6.equals((Object)databaseParameterBufferImp3));
      assertTrue(databaseParameterBufferImp6.equals((Object)databaseParameterBufferImp5));
      assertNotNull(databaseParameterBufferImp6);
      
      JavaGDSImpl javaGDSImpl3 = new JavaGDSImpl();
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl2));
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl1));
      assertNotNull(javaGDSImpl3);
      
      EventHandleImp eventHandleImp0 = (EventHandleImp)javaGDSImpl3.createEventHandle("PURE_JAVA");
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl2));
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl1));
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertNotSame(javaGDSImpl3, javaGDSImpl2);
      assertNotSame(javaGDSImpl3, javaGDSImpl0);
      assertNotSame(javaGDSImpl3, javaGDSImpl1);
      assertNotNull(eventHandleImp0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp7 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp7.equals((Object)databaseParameterBufferImp6));
      assertTrue(databaseParameterBufferImp7.equals((Object)databaseParameterBufferImp3));
      assertTrue(databaseParameterBufferImp7.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp7.equals((Object)databaseParameterBufferImp5));
      assertTrue(databaseParameterBufferImp7.equals((Object)databaseParameterBufferImp4));
      assertNotNull(databaseParameterBufferImp7);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp8 = (org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp)databaseParameterBufferImp6.deepCopy();
      assertTrue(databaseParameterBufferImp6.equals((Object)databaseParameterBufferImp4));
      assertTrue(databaseParameterBufferImp6.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp6.equals((Object)databaseParameterBufferImp3));
      assertTrue(databaseParameterBufferImp6.equals((Object)databaseParameterBufferImp5));
      assertTrue(databaseParameterBufferImp6.equals((Object)databaseParameterBufferImp7));
      assertTrue(databaseParameterBufferImp8.equals((Object)databaseParameterBufferImp3));
      assertTrue(databaseParameterBufferImp8.equals((Object)databaseParameterBufferImp4));
      assertTrue(databaseParameterBufferImp8.equals((Object)databaseParameterBufferImp5));
      assertTrue(databaseParameterBufferImp8.equals((Object)databaseParameterBufferImp6));
      assertTrue(databaseParameterBufferImp8.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp8.equals((Object)databaseParameterBufferImp7));
      assertNotSame(databaseParameterBufferImp6, databaseParameterBufferImp7);
      assertNotSame(databaseParameterBufferImp6, databaseParameterBufferImp3);
      assertNotSame(databaseParameterBufferImp6, databaseParameterBufferImp4);
      assertNotSame(databaseParameterBufferImp6, databaseParameterBufferImp5);
      assertNotSame(databaseParameterBufferImp6, databaseParameterBufferImp8);
      assertNotSame(databaseParameterBufferImp6, databaseParameterBufferImp2);
      assertNotSame(databaseParameterBufferImp8, databaseParameterBufferImp7);
      assertNotSame(databaseParameterBufferImp8, databaseParameterBufferImp4);
      assertNotSame(databaseParameterBufferImp8, databaseParameterBufferImp2);
      assertNotSame(databaseParameterBufferImp8, databaseParameterBufferImp3);
      assertNotSame(databaseParameterBufferImp8, databaseParameterBufferImp5);
      assertNotSame(databaseParameterBufferImp8, databaseParameterBufferImp6);
      assertNotNull(databaseParameterBufferImp8);
      
      boolean boolean0 = isc_db_handle_impl1.hasTransactions();
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertFalse(boolean0);
      assertNotSame(isc_db_handle_impl1, isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp9 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp9.equals((Object)databaseParameterBufferImp4));
      assertTrue(databaseParameterBufferImp9.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp9.equals((Object)databaseParameterBufferImp6));
      assertTrue(databaseParameterBufferImp9.equals((Object)databaseParameterBufferImp8));
      assertTrue(databaseParameterBufferImp9.equals((Object)databaseParameterBufferImp5));
      assertTrue(databaseParameterBufferImp9.equals((Object)databaseParameterBufferImp7));
      assertTrue(databaseParameterBufferImp9.equals((Object)databaseParameterBufferImp3));
      assertNotNull(databaseParameterBufferImp9);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp10 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp10.equals((Object)databaseParameterBufferImp9));
      assertTrue(databaseParameterBufferImp10.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp10.equals((Object)databaseParameterBufferImp4));
      assertTrue(databaseParameterBufferImp10.equals((Object)databaseParameterBufferImp7));
      assertTrue(databaseParameterBufferImp10.equals((Object)databaseParameterBufferImp3));
      assertTrue(databaseParameterBufferImp10.equals((Object)databaseParameterBufferImp5));
      assertTrue(databaseParameterBufferImp10.equals((Object)databaseParameterBufferImp6));
      assertTrue(databaseParameterBufferImp10.equals((Object)databaseParameterBufferImp8));
      assertNotNull(databaseParameterBufferImp10);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp11 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertTrue(databaseParameterBufferImp11.equals((Object)databaseParameterBufferImp9));
      assertTrue(databaseParameterBufferImp11.equals((Object)databaseParameterBufferImp8));
      assertTrue(databaseParameterBufferImp11.equals((Object)databaseParameterBufferImp6));
      assertTrue(databaseParameterBufferImp11.equals((Object)databaseParameterBufferImp5));
      assertTrue(databaseParameterBufferImp11.equals((Object)databaseParameterBufferImp7));
      assertTrue(databaseParameterBufferImp11.equals((Object)databaseParameterBufferImp2));
      assertTrue(databaseParameterBufferImp11.equals((Object)databaseParameterBufferImp4));
      assertTrue(databaseParameterBufferImp11.equals((Object)databaseParameterBufferImp3));
      assertTrue(databaseParameterBufferImp11.equals((Object)databaseParameterBufferImp10));
      assertNotNull(databaseParameterBufferImp11);
      
      isc_db_handle_impl isc_db_handle_impl2 = (isc_db_handle_impl)javaGDSImpl2.createIscDbHandle();
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl3));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      assertFalse(isc_db_handle_impl2.equals((Object)isc_db_handle_impl0));
      assertFalse(isc_db_handle_impl2.equals((Object)isc_db_handle_impl1));
      assertEquals(0, isc_db_handle_impl2.getProtocol());
      assertEquals(0, isc_db_handle_impl2.getDialect());
      assertEquals(0, isc_db_handle_impl2.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl2.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl2.getResp_data_len());
      assertTrue(isc_db_handle_impl2.isValid());
      assertEquals(0, isc_db_handle_impl2.getResp_object());
      assertEquals(0, isc_db_handle_impl2.getODSMajorVersion());
      assertNotSame(javaGDSImpl2, javaGDSImpl0);
      assertNotSame(javaGDSImpl2, javaGDSImpl3);
      assertNotSame(javaGDSImpl2, javaGDSImpl1);
      assertNotSame(isc_db_handle_impl2, isc_db_handle_impl0);
      assertNotSame(isc_db_handle_impl2, isc_db_handle_impl1);
      assertNotNull(isc_db_handle_impl2);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, linkedList1.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertNotNull(fBCachedFetcher0);
      
      boolean boolean1 = fBCachedFetcher0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList1.equals((Object)linkedList2));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, linkedList1.size());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(boolean1);
      assertNotSame(linkedList0, linkedList2);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList1, linkedList0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      byte[][] byteArray0 = new byte[1][1];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)6;
      byteArray1[1] = (byte)86;
      byteArray1[2] = (byte)6;
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertEquals(1, linkedList0.size());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      
      System.setCurrentTimeMillis((byte)6);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, ".T{1N!Y?]%oA");
      MockThread mockThread2 = new MockThread(mockThread1, " f3U4l=Xwp?");
      MockThread mockThread3 = new MockThread(threadGroup0, mockThread2, "", (-1L));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(335544421, threadPoolExecutor_DiscardPolicy0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread3, scheduledThreadPoolExecutor0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(335544421, threadPoolExecutor_DiscardPolicy0);
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      scheduledThreadPoolExecutor1.schedule(callable0, (long) 335544421, timeUnit1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate2.test(timeUnit0);
      Integer integer0 = new Integer((-858));
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.test(predicate2);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate4.and(predicate3);
      Integer integer1 = new Integer((-3176));
      predicate5.test(integer1);
      predicate3.test(integer0);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate.isEqual((Object) timeUnit0);
      predicate7.test(integer1);
      predicate7.and(predicate6);
      predicate5.or(predicate7);
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add((byte[][]) null);
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.removeExtensionParams();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      javaGDSImpl0.createIscDbHandle();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4708084763221112
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(335544421, threadPoolExecutor_DiscardPolicy0);
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      scheduledThreadPoolExecutor0.schedule(callable0, (long) 335544421, timeUnit1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate2.test(timeUnit0);
      Integer integer0 = new Integer((-858));
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.test(predicate2);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate4.and(predicate3);
      Integer integer1 = new Integer((-3176));
      predicate5.test(integer1);
      predicate3.test(integer0);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate7 = predicate6.negate();
      predicate7.and(predicate6);
      predicate5.or(predicate7);
      linkedList0.removeIf(predicate5);
      System.setCurrentTimeMillis((-1953L));
      byte[][] byteArray0 = new byte[8][9];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte)49;
      byteArray1[2] = (byte) (-23);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-23);
      byteArray2[1] = (byte) (-23);
      byteArray2[2] = (byte)94;
      byteArray2[3] = (byte)49;
      byteArray2[4] = (byte) (-23);
      byteArray2[5] = (byte) (-36);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)49;
      byteArray3[1] = (byte)102;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte) (-36);
      byteArray3[4] = (byte) (-36);
      byteArray3[5] = (byte) (-2);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[0];
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[7];
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte) (-2);
      byteArray5[2] = (byte)4;
      byteArray5[3] = (byte) (-36);
      byteArray5[4] = (byte) (-23);
      byteArray5[5] = (byte)102;
      byteArray5[6] = (byte) (-23);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[8];
      byteArray6[0] = (byte)0;
      byteArray6[1] = (byte)49;
      byteArray6[2] = (byte)94;
      byteArray6[3] = (byte) (-23);
      byteArray6[4] = (byte)77;
      byteArray6[5] = (byte)0;
      byteArray6[6] = (byte)49;
      byteArray6[7] = (byte) (-2);
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[7];
      byteArray7[0] = (byte)94;
      byteArray7[1] = (byte)4;
      byteArray7[2] = (byte)2;
      byteArray7[3] = (byte) (-36);
      byteArray7[4] = (byte)77;
      byteArray7[5] = (byte)4;
      byteArray7[6] = (byte)102;
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[9];
      byteArray8[0] = (byte) (-23);
      byteArray8[1] = (byte)4;
      byteArray8[2] = (byte) (-2);
      byteArray8[3] = (byte)0;
      byteArray8[4] = (byte)42;
      byteArray8[5] = (byte) (-23);
      byteArray8[6] = (byte) (-23);
      byteArray8[7] = (byte) (-2);
      byteArray8[8] = (byte)94;
      byteArray0[7] = byteArray8;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }
}
