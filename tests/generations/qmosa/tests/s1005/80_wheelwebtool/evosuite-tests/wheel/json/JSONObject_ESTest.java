/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 10:16:00 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.103547110465915
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.entrySet();
      JSONObject.quote("JSONObject[");
      hashMap0.put("\"JSONObject[\"", "\"JSONObject[\"");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Object, JSONArray> hashMap1 = new HashMap<Object, JSONArray>();
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("JSONObject[", biFunction0);
      hashMap0.put((String) null, (String) null);
      JSONObject jSONObject1 = jSONObject0.put("\"JSONObject[\"", (-1080L));
      Boolean boolean0 = new Boolean("\"JSONObject[\"");
      jSONObject1.optDouble("JSONObject[");
      JSONObject.quote("JSONObject[");
      JSONObject jSONObject2 = jSONObject0.putOpt("liKYK0N?OZ", "\"JSONObject[\"");
      Double double0 = Double.valueOf((double) (-1080L));
      Double.sum(0.0, (-1080L));
      jSONObject2.accumulate("\"JSONObject[\"", double0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.optJSONArray("\"JSONObject[\"");
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("false", object0);
      jSONObject1.optString("it");
      try { 
        jSONObject1.getBoolean("\"JSONObject[\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"JSONObject[\\\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.163734220868515
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject(set0);
      String string0 = "~2V 8";
      JSONObject jSONObject1 = jSONObject0.append("~2V 8", "~2V 8");
      int int0 = 110;
      jSONObject0.toString((-2721), 110);
      jSONObject0.put("=[p~zs-=A`j)", (double) (-2721));
      jSONObject1.optLong("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000007\": [\"java.lang.String@0000000007\"],\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n                                                                                                              }", (long) (-2721));
      Float float0 = new Float((-184.299742));
      Boolean.compare(true, true);
      Float float1 = new Float((float) 0);
      Boolean boolean0 = Boolean.valueOf("=[p~zs-=A`j)");
      jSONObject1.accumulate("~2V 8", hashMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9869282139561077
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Byte.toUnsignedLong((byte) (-21));
      Float float0 = new Float((-2026.1730798524866));
      StringWriter stringWriter0 = new StringWriter(44);
      StringWriter stringWriter1 = stringWriter0.append(';');
      CharBuffer charBuffer0 = CharBuffer.allocate(990);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      StringWriter stringWriter3 = stringWriter1.append(';');
      StringWriter stringWriter4 = new StringWriter();
      stringWriter1.append((CharSequence) charBuffer0);
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charBuffer0.get(charArray0);
      stringWriter3.append((CharSequence) charBuffer0);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      Float float1 = new Float((-2026.1730798524866));
      JSONObject jSONObject1 = jSONObject0.append("] is not a JSONObject.", stringWriter2);
      jSONObject0.optJSONObject("] is not a JSONObject.");
      jSONObject1.write(stringWriter1);
      JSONObject jSONObject2 = jSONObject1.put("rkY$lB_3aWj2.~nB79", 0.0);
      try { 
        jSONObject2.getJSONObject("U;R#Z{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"U;R#Z{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4323412815407504
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject(set0);
      JSONObject jSONObject1 = jSONObject0.append("~2V 8", "~2V 8");
      jSONObject0.toString((-2721), 110);
      JSONObject jSONObject2 = jSONObject0.put("=[p~zs-=A`j)", (double) (-2721));
      jSONObject2.optLong("=[p~zs-=A`j)");
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = new JSONObject("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000007\": [\"java.lang.String@0000000007\"],\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n                                                                                                              }");
      Float float0 = new Float((double) (-2721));
      JSONObject jSONObject5 = jSONObject1.append("getinRtern", jSONObject0);
      jSONObject5.optJSONObject("qrKiE(c/h");
      JSONObject jSONObject6 = new JSONObject((Map) hashMap0);
      jSONObject6.put("getintern", (-3569.030633405766));
      try { 
        jSONObject6.getJSONObject("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.942758545786991
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long.divideUnsigned(1L, (-1L));
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Boolean.logicalAnd(true, true);
      JSONObject jSONObject1 = jSONObject0.putOpt("ff9Z+F", object0);
      jSONObject1.optBoolean("z", false);
      JSONObject jSONObject2 = new JSONObject();
      Object object1 = new Object();
      jSONObject2.optLong("78", 0L);
      Float float0 = new Float((double) 0L);
      Boolean.compare(false, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('>');
      StringWriter stringWriter2 = new StringWriter();
      CharBuffer.allocate(1450);
      stringWriter2.append((CharSequence) "78");
      StringWriter stringWriter3 = stringWriter1.append((CharSequence) "78");
      stringWriter3.append((CharSequence) "78");
      Integer integer0 = new Integer(2390);
      jSONObject0.accumulate("ff9Z+F", stringWriter2);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.78489484807327
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Float.isFinite((-1.0F));
      jSONObject0.toString(19, (-14530064));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = 1571;
      try { 
        jSONArray0.getJSONObject(1571);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1571] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7901795709120119
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject(set0);
      HashMap hashMap1 = new HashMap<String, JSONObject>();
      int int0 = 110;
      JSONObject.valueToString(set0, (-2721), 110);
      String string0 = "=[p~zs-=A`j)";
      jSONObject0.put("=[p~zs-=A`j)", (double) (-2721));
      String string1 = "qrKiE(c/h";
      try { 
        jSONObject0.getString("] s not a JSONArra.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] s not a JSONArra.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3189087877942574
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "JSONObject[";
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      JSONObject.quote("JSONObject[");
      JSONObject.quote("\"JSONObject[\"");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Object, JSONArray> hashMap1 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("\"JSONObject[\"", (-1080L));
      Boolean boolean0 = new Boolean("\"JSONObject[\"");
      jSONObject1.optDouble("JSONObject[");
      String string1 = "com";
      JSONObject.quote("JSONObject[");
      JSONObject jSONObject2 = jSONObject0.putOpt("liKYK0N?OZ", "\"JSONObject[\"");
      jSONObject2.put("?n$d.i+Dj", 321.0649944033751);
      jSONObject2.toString((-1053));
      JSONObject.quote("{\n\"java.lang.String@0000000005\": java.lang.Double@0000000006,\n\"java.lang.String@0000000004\": \"java.lang.String@0000000002\",\n\"java.lang.String@0000000002\": java.lang.Long@0000000003\n}");
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 14;
      jSONObject1.put("isformat", (Collection) set0);
      int int1 = 4;
      try { 
        jSONObject0.getJSONObject("gIN=)|fiJH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gIN=)|fiJH\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7140367141062398
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      jSONObject0.putOpt("JSONArray initial value should be a string or collection or array.", set0);
      hashMap0.put("is", "");
      Float float0 = new Float(964.7835);
      StringWriter stringWriter0 = new StringWriter();
      Long.toUnsignedString(0L);
      Float float1 = new Float((-367.5));
      JSONObject jSONObject1 = new JSONObject(float1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3499409467867323
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject(set0);
      jSONObject0.append("~2V 8", "~2V 8");
      jSONObject0.toString((-2721), 110);
      JSONObject jSONObject1 = jSONObject0.put("=[p~zs-=A`j)", (double) (-2721));
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = new JSONObject("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000007\": [\"java.lang.String@0000000007\"],\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n                                                                                                              }");
      String string0 = "";
      jSONObject3.optDouble("", (double) 110);
      jSONObject2.optBoolean("qrKiE(c/h");
      try { 
        jSONObject1.getDouble("5{-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5{-\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("v@^;!(+Y{!7O+4", "v@^;!(+Y{!7O+4");
      hashMap0.entrySet();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.908390573344026
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Byte.toUnsignedLong((byte) (-21));
      JSONObject.doubleToString(0.0);
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("0", hashMap0);
      Float float0 = new Float(3884.7053F);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.putOpt("JSONArray[", hashMap0);
      JSONObject jSONObject3 = jSONObject1.put("0", false);
      jSONObject2.optBoolean("0", false);
      Float float1 = new Float(0.0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "%hh'7Pe/dS}p");
      stringWriter1.append((CharSequence) "0");
      String string0 = ": ";
      JSONObject.quote(": ");
      try { 
        jSONObject3.getDouble(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\": \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "JSONObject[";
      hashMap0.put("XWJ@U?q+1!9dcxO}Kt", "!TH{rH{7FN4z");
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean("XWJ@U?q+1!9dcxO}Kt");
      HashMap<Object, JSONArray> hashMap1 = new HashMap<Object, JSONArray>();
      long long0 = (-1080L);
      try { 
        jSONObject0.put((String) null, (-1080L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0050683555949265
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Byte.toUnsignedLong((byte) (-21));
      JSONObject.doubleToString(0.0);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.putOpt("0", boolean0);
      jSONObject0.optBoolean("0", true);
      JSONObject jSONObject1 = new JSONObject();
      Object object1 = new Object();
      Float float0 = new Float((-1210.2205153053492));
      Float float1 = new Float(0.0F);
      String string0 = "QmGi`iW*$'[";
      try { 
        Double.valueOf("QmGi`iW*$'[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.138333059508028
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Long long0 = new Long((-1L));
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      stringArray0[1] = ":!l:2!M3Mv";
      stringArray0[2] = "z";
      JSONObject jSONObject0 = new JSONObject(":!l:2!M3Mv", stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject();
      Object object1 = new Object();
      Float float0 = new Float(1.6843805915078636);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('u');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) ":!l:2!M3Mv");
      stringWriter2.append((CharSequence) ":!l:2!M3Mv");
      Integer integer0 = new Integer(1713);
      String string0 = "toU";
      Long long1 = new Long((-1L));
      Long.toUnsignedString((long) 1713);
      jSONObject0.accumulate("wheel.json.JSONObject", (Object) null);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("hv9l'NzTiLFa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of hv9l'NzTiLFa
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1635454183520875
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "{}";
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      String string1 = "]~xy^<8Xoaam#plMbc(";
      byte byte0 = (byte)2;
      Byte.toUnsignedLong((byte)2);
      JSONObject jSONObject1 = new JSONObject("{}");
      try { 
        jSONObject1.getBoolean("7=)!)\u0004[:u8.{$F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7=)!)\\u0004[:u8.{$F\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0184473086472206
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-35));
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("I;~RgT&*$<--/");
      jSONObject0.toString((int) (byte) (-35), 1371);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2171363422249817
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.entrySet();
      JSONObject.quote("JSONObject[");
      JSONObject.quote("\"JSONObject[\"");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Object, JSONArray> hashMap1 = new HashMap<Object, JSONArray>();
      hashMap0.put("JSONObject[", "JSONObject[");
      JSONObject jSONObject1 = jSONObject0.put("\"JSONObject[\"", (-1080L));
      Boolean boolean0 = new Boolean("\"JSONObject[\"");
      jSONObject1.optDouble("JSONObject[");
      JSONObject.quote("JSONObject[");
      String string0 = "liKYK0N?OZ";
      JSONObject jSONObject2 = jSONObject0.putOpt("liKYK0N?OZ", "\"JSONObject[\"");
      int int0 = (-1053);
      jSONObject2.toString((-1053));
      JSONObject.quote("{\n\"java.lang.String@0000000004\": \"java.lang.String@0000000002\",\n\"java.lang.String@0000000002\": java.lang.Long@0000000003\n}");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.optDouble("\"JSONObject[\"", (-2355.1581422));
      try { 
        jSONObject1.getDouble("\"{\n\"java.lang.String@0000000004\": \"java.lang.String@0000000002\",\n\"java.lang.String@0000000002\": java.lang.Long@0000000003\n}\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"{\\n\\\"java.lang.String@0000000004\\\": \\\"java.lang.String@0000000002\\\",\\n\\\"java.lang.String@0000000002\\\": java.lang.Long@0000000003\\n}\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9155464084477625
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "JSONObject[";
      hashMap0.entrySet();
      JSONObject.quote("JSONObject[");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("JSONObject[", "\"JSONObject[\"");
      Double.isFinite((-2826.0966340730624));
      HashMap<Object, JSONArray> hashMap1 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("\"JSONObject[\"", (-1080L));
      Double.isFinite((-2826.0966340730624));
      jSONObject1.optDouble("JSONObject[");
      hashMap0.put("JSONObject[", "wai");
      jSONObject0.optString("com");
      jSONObject0.putOpt("liKYK0N?OZ", "\"JSONObject[\"");
      JSONObject.doubleToString((-549.292341));
      StringWriter stringWriter0 = new StringWriter();
      int int0 = (-6);
      jSONObject1.optDouble("\"JSONObject[\"");
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", (-6), 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9844786887162782
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "JSONObectG";
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      hashMap0.put("JSONObectG", "' and instead saw '");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double.isFinite((-2826.0966340730624));
      JSONObject jSONObject1 = new JSONObject(set0);
      JSONObject.valueToString((Object) null, (-121175892), (-2721));
      jSONObject1.toString((-2721), 110);
      String string1 = "=[p~zs-=A`j)";
      JSONObject jSONObject2 = jSONObject1.put("=[p~zs-=A`j)", (double) (-2721));
      jSONObject2.opt((String) null);
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 101;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "null", 101, 101);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5278369592870242
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.entrySet();
      JSONObject.quote("JSONObject[");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double.isFinite((-2826.0966340730624));
      HashMap<Object, JSONArray> hashMap1 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("\"JSONObject[\"", (-1080L));
      Double.isFinite((-2826.0966340730624));
      jSONObject1.optLong("", 0L);
      Double double0 = new Double(3832.77);
      jSONObject0.put("\"JSONObject[\"", 0L);
      Double.min((-1.0), 818.277);
      Long long0 = new Long(0L);
      int int0 = 0;
      jSONObject0.getLong("\"JSONObject[\"");
      StringWriter stringWriter0 = new StringWriter();
      hashMap0.clear();
      Long.getLong("\"JSONObject[\"", 0L);
      stringWriter0.append((CharSequence) "\"JSONObject[\"");
      hashMap0.put("\"JSONObject[\"", "");
      String string0 = ": ";
      try { 
        jSONObject1.getJSONArray("\"JSONObject[\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"JSONObject[\\\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      hashMap0.put("is", "");
      Float float0 = new Float(Double.NaN);
      String string0 = "in";
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1610));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5171063970610277
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-21));
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      
      Short short0 = new Short((short)0);
      Integer integer0 = new Integer(18);
      Integer.getInteger("N)C}@ntR1|&", 2147483645);
      Long long0 = new Long(18);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.970044295384732
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long.divideUnsigned(1L, (-1L));
      Long.getLong(":!l:2!M3Mv", long0);
      Long.compare(0L, (-1L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.optString(":!l:2!M3Mv");
      String string0 = "co";
      jSONObject0.putOpt("Ggpc9D`", "z");
      jSONObject0.optBoolean("Ggpc9D`", true);
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'W';
      StringWriter stringWriter1 = stringWriter0.append('W');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) ":!l:2!M3Mv");
      stringWriter2.append((CharSequence) "");
      try { 
        jSONObject0.getLong("J`|I<ykpRq[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"J`|I<ykpRq[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Long long0 = new Long((-1L));
      String string0 = "z";
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((double) 1L);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":!l:2!M3Mv";
      stringArray0[1] = ":!l:2!M3Mv";
      stringArray0[2] = "z";
      JSONObject jSONObject0 = new JSONObject(":!l:2!M3Mv", stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONArray1.optInt(2812);
      jSONObject0.toJSONArray(jSONArray1);
      JSONObject jSONObject1 = new JSONObject();
      Object object1 = new Object();
      JSONTokener jSONTokener0 = new JSONTokener(":!l:2!M3Mv");
      jSONTokener0.nextTo('C');
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3941720078187914
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject.getNames((Object) hashMap0);
      Long long0 = new Long((short)51);
      JSONObject.valueToString(hashMap0, (short)51, 88);
      Float float0 = new Float((double) (short)51);
      int int0 = (-1610);
      StringWriter stringWriter0 = new StringWriter((short)51);
      char char0 = 'h';
      StringWriter stringWriter1 = stringWriter0.append('h');
      JSONObject.doubleToString((short)51);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "51", (-1610), 70);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1449080763320683
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.entrySet();
      JSONObject.quote("JSONObject[");
      JSONObject.quote("JSONObject[");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Object, JSONArray> hashMap1 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("\"JSONObject[\"", (-1080L));
      Boolean boolean0 = new Boolean("\"JSONObject[\"");
      jSONObject1.optDouble("JSONObject[");
      JSONObject.quote("JSONObject[");
      JSONObject jSONObject2 = jSONObject0.putOpt("g[,,h<", "\"JSONObject[\"");
      HashMap<String, JSONArray> hashMap2 = new HashMap<String, JSONArray>();
      hashMap1.putAll(hashMap2);
      jSONObject2.toString((-1053));
      JSONObject.valueToString(hashMap1, (-1053), (-1053));
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "\"JSONObject[\"", 14, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3423688954773283
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long.divideUnsigned(1L, (-1L));
      Long.getLong(":!l:2!M3Mv", long0);
      Long.compare(0L, (-1L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.optString(":!l:2!M3Mv");
      JSONObject jSONObject1 = jSONObject0.putOpt("Ggpc9D`", "z");
      jSONObject0.optBoolean("Ggpc9D`", true);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('4');
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Ggpc9D`");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "co");
      jSONObject1.write(stringWriter2);
      jSONObject0.length();
      try { 
        jSONObject0.getInt("Ggpc9D`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ggpc9D`\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8065071652616693
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "{}";
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":!l:2!M3Mv";
      JSONObject jSONObject0 = new JSONObject(object1, stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject();
      Object object2 = new Object();
      jSONObject1.append(":!l:2!M3Mv", jSONObject0);
      jSONObject1.optJSONObject("{}");
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject2.put("wri", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9730038344472076
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-6774.8118));
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Expected a ',' or '}'";
      stringArray0[1] = "V#4\"ZS";
      stringArray0[2] = "KaxDavdw)7#cW";
      stringArray0[3] = "V#4\"ZS";
      stringArray0[4] = "KaxDavdw)7#cW";
      stringArray0[5] = "KwRwNt@";
      stringArray0[6] = "KaxDavdw)7#cW";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray2 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray3 = jSONObject0.toJSONArray(jSONArray2);
      assertNull(jSONArray3);
      
      JSONObject jSONObject1 = new JSONObject();
      Object object1 = new Object();
      JSONObject jSONObject2 = jSONObject1.append("Expected a ',' or '}'", "KwRwNt@");
      jSONObject0.optJSONObject("Expected a ',' or '}'");
      jSONObject2.put("KaxDavdw)7#cW", (-6774.8118));
      JSONArray jSONArray4 = jSONObject1.toJSONArray(jSONArray1);
      assertEquals(1, jSONArray4.length());
      assertNotNull(jSONArray4);
      assertNotSame(jSONArray4, jSONArray1);
      
      int int0 = jSONObject0.optInt("Expected a ',' or '}'", (-731));
      assertEquals((-731), int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5311386121723252
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      stringArray0[1] = "z";
      stringArray0[2] = "z";
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(86);
      linkedList0.add(integer0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Object object1 = new Object();
      Float float0 = new Float(1.6843805915078636);
      jSONObject0.optJSONArray(":!l:2!M3Mv");
      Short short0 = new Short((short)612);
      jSONObject0.accumulate("ODnO `Z", short0);
      try { 
        jSONObject0.getLong("getintValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getintValue\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7162450023344868
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Object) "JSONObjectG");
      JSONObject jSONObject1 = jSONObject0.accumulate("JSONObjectG", (Object) null);
      try { 
        jSONObject1.getJSONObject("isoptLong");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isoptLong\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6429782415242826
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      Double.isFinite(0.0);
      Float float0 = new Float((-394.3026));
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      Double.isFinite((-2826.0966340730624));
      JSONObject jSONObject2 = jSONObject0.put("Xr2uy 4x", 13);
      jSONObject2.toString();
      JSONObject jSONObject3 = jSONObject2.put("Xr2uy 4x", true);
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject4 = jSONObject3.put("", (Map) hashMap0);
      jSONObject0.optString("gettoHexString", "");
      jSONObject1.optDouble("H*9g");
      jSONObject1.optInt("9|d;CS0Xr");
      jSONObject3.toString();
      jSONObject4.optString("1b");
      JSONObject jSONObject5 = jSONObject1.put("9|d;CS0Xr", 2319.3343);
      String string0 = jSONObject5.toString(62, (-228));
      jSONObject4.optString("^@,@M");
      String string1 = JSONObject.quote("{\"java.lang.String@0000000002\":wheel.json.JSONObject@0000000006,\"java.lang.String@0000000003\":java.lang.Boolean@0000000005}");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9636861126802363
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      JSONObject.quote("JSONObject[");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double.isFinite((-2826.0966340730624));
      HashMap<Object, JSONArray> hashMap1 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject1 = new JSONObject(set0);
      JSONObject.valueToString("\"JSONObject[\"", (-121175892), (-2672));
      JSONObject.doubleToString((-2826.0966340730624));
      JSONObject.doubleToString((-121175892));
      String string0 = " at character ";
      jSONObject1.optLong(" at character ", 1905L);
      Double double0 = new Double((-1448.7));
      Double.min((-1448.7), Double.NaN);
      JSONObject.valueToString("\"java.lang.String@0000000007\"", (-2672), (-2672));
      try { 
        jSONObject0.getLong("(2y0C,c5D0'2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(2y0C,c5D0'2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.0031377133862405
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Long long0 = new Long((-1L));
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((double) 1L);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      stringArray0[1] = ":!l:2!M3Mv";
      stringArray0[2] = "z";
      JSONObject jSONObject0 = new JSONObject(":!l:2!M3Mv", stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("\n", true);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject2 = new JSONObject();
      Object object1 = new Object();
      Float float0 = new Float(1.0);
      jSONObject0.append(":!l:2!M3Mv", float0);
      jSONObject2.optJSONObject(stringArray0[0]);
      jSONObject2.put("rkY$lB_3aWj2.~nB79", (-3569.030633405766));
      boolean boolean0 = jSONObject1.isNull("isparseFloat");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6163893218486356
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long.divideUnsigned(0L, 1L);
      Long long1 = Long.getLong(":!l:2!M3Mv", long0);
      Long.compare(0L, 0L);
      Long.divideUnsigned(0L, 197L);
      Long.getLong("z", (-1L));
      JSONObject.numberToString(long0);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      Long.getLong("ishashCod", 0L);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject("java.lang.Long@0000000001", stringArray0);
      jSONObject0.optLong(",\n");
      jSONObject2.optDouble("java.lang.Long@0000000001");
      jSONObject1.optInt(":!l:2!M3Mv");
      jSONObject1.toString();
      jSONObject1.optString("Subotring bounds error");
      JSONObject jSONObject3 = jSONObject1.put("#jwV*b~Q:+I", 1.0);
      jSONObject3.putOpt("Y6Y&j&_]%tPKAA{$~", long1);
      double double0 = jSONObject1.getDouble("#jwV*b~Q:+I");
      assertEquals(2, jSONObject1.length());
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.nextTo("{}");
      jSONTokener0.nextClean();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.058631590217126
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Byte.toUnsignedLong((byte) (-21));
      Float float0 = new Float((-2026.1730798524866));
      StringWriter stringWriter0 = new StringWriter(44);
      StringWriter stringWriter1 = stringWriter0.append(';');
      CharBuffer charBuffer0 = CharBuffer.allocate(990);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      stringWriter1.append((CharSequence) charBuffer0);
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charBuffer0.get(charArray0);
      stringWriter3.append((CharSequence) charBuffer0);
      stringWriter2.append((CharSequence) charBuffer0);
      Integer integer0 = new Integer(';');
      Long long0 = new Long(0L);
      Long.toUnsignedString((long) (byte) (-21));
      JSONObject jSONObject0 = new JSONObject((Object) "toU");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", (Collection) linkedList0);
      Integer integer1 = new Integer(44);
      JSONObject jSONObject2 = jSONObject0.accumulate("toU", integer1);
      jSONObject0.optJSONObject("Expected a ',' or ']'");
      JSONObject.doubleToString(990);
      jSONObject2.isNull("toU");
      jSONObject1.getLong("toU");
      assertEquals(5, jSONObject1.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5278369592870242
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "JSONObject[";
      hashMap0.entrySet();
      JSONObject.quote("JSONObject[");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((String) null, (String) null);
      Double.isFinite((-2826.0966340730624));
      HashMap<Object, JSONArray> hashMap1 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("\"JSONObject[\"", (-1080L));
      Double.isFinite((-2826.0966340730624));
      jSONObject1.optLong("", 0L);
      Double double0 = new Double(3832.77);
      Double.min((-1.0), 818.277);
      Long long0 = new Long(0L);
      int int0 = 0;
      jSONObject0.getLong("\"JSONObject[\"");
      StringWriter stringWriter0 = new StringWriter();
      hashMap0.clear();
      Long.getLong("\"JSONObject[\"", 0L);
      stringWriter0.append((CharSequence) "\"JSONObject[\"");
      JSONObject.quote("\"JSONObject[\"");
      try { 
        jSONObject0.getDouble(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\": \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4444190426347405
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Float float0 = new Float((float) (byte) (-21));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("XsqAPR0)", true);
      JSONObject jSONObject1 = new JSONObject();
      Object object0 = new Object();
      String string0 = "getdecode";
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.optLong("getdecode", (long) (byte) (-21));
      Float float1 = new Float(1542.2772353);
      Boolean.compare(true, true);
      Float float2 = new Float((-4271.2F));
      try { 
        jSONObject2.getInt("getdecode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getdecode\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9433483923290391
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 13, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6059020322440924
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = "co";
      String string1 = "78";
      JSONObject jSONObject1 = jSONObject0.putOpt("78", "co");
      try { 
        jSONObject1.getDouble("78");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"78\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1390858946957136
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      JSONObject jSONObject2 = jSONObject1.put("q", (-1080L));
      Double.isFinite((-2826.0966340730624));
      jSONObject1.optDouble("Kc2bT(HXL");
      jSONObject0.optString("cMP,W8V6t@%KpvWYI");
      jSONObject2.put("g&#{$xYD;s", true);
      jSONObject1.opt("");
      JSONTokener jSONTokener0 = new JSONTokener("+N_8");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of +N_8
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.entrySet();
      hashMap0.entrySet();
      hashMap0.put("is", "");
      double double0 = Double.NaN;
      Double double1 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Long long0 = new Long((-5062L));
      Long.divideUnsigned((-366L), (-1831L));
      Long.getLong(":!l:2!M3Mv", (Long) null);
      Long.compare(1L, 1L);
      Long.divideUnsigned(1L, (-2454L));
      Long.getLong("?qow|G'6X>>", (-1831L));
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0160219125358343
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      stringArray0[1] = ":!l:2!M3Mv";
      stringArray0[2] = "z";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean(":!l:2!M3Mv", true);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.put(":!l:2!M3Mv", 1265.41339);
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = new JSONObject(jSONObject2);
      JSONObject jSONObject5 = new JSONObject(jSONObject0, stringArray0);
      jSONObject5.optDouble("z'Vk}L,", 1765.0);
      String string0 = "h;wh);+~~N=2#E^m ";
      try { 
        jSONObject3.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.3362152258930386
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "KwRwNt@";
      stringArray0[1] = "V#4\"ZS";
      Long.divideUnsigned((-1656L), (-1L));
      Long long0 = new Long(0L);
      Long.getLong("isappend", long0);
      Long.compare(1L, (-1656L));
      Float float0 = new Float((double) 1);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.sum(1L, (-199.0F));
      jSONObject0.optString(",:]}/\"[{;=#");
      jSONObject0.optBoolean("KwRwNt@", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ":!l:2!M3Mv");
      stringWriter1.close();
      stringWriter1.append('4');
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "");
      stringWriter2.append((CharSequence) "isappend");
      jSONObject0.write(stringWriter1);
      jSONObject0.optDouble("isappend", (double) 1);
      jSONObject0.optBoolean((String) null);
      JSONObject.numberToString(long0);
      jSONObject0.accumulate("V#4\"ZS", "java.lang.Long@000000001");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8684565914639069
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("XWJ@U?q+1!9dcxO}Kt", "!TH{rH{7FN4z");
      hashMap0.entrySet();
      JSONObject.quote("JSONObject[");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double.isFinite((-2831.1809792462514));
      HashMap<Object, JSONArray> hashMap1 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("\"JSONObject[\"", (-1080L));
      Double.isFinite((-2826.0966340730624));
      jSONObject1.optDouble("JSONObject[");
      jSONObject0.optString("com");
      String string0 = "liKYK0N?OZ";
      JSONObject jSONObject2 = jSONObject0.putOpt("liKYK0N?OZ", "\"JSONObject[\"");
      Float float0 = new Float((float) (-1080L));
      String string1 = "JSONArray[";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject3 = jSONObject2.putOpt("JSONArray[", object0);
      try { 
        jSONObject3.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject.getNames((Object) "null");
      Short short0 = new Short((short)31);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.374476453903601
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Byte.toUnsignedLong((byte) (-21));
      Float float0 = new Float((-2026.1730798524866));
      StringWriter stringWriter0 = new StringWriter(44);
      StringWriter stringWriter1 = stringWriter0.append(';');
      CharBuffer charBuffer0 = CharBuffer.allocate(990);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      StringWriter stringWriter3 = stringWriter1.append(';');
      stringWriter0.close();
      StringWriter stringWriter4 = new StringWriter();
      stringWriter1.append((CharSequence) charBuffer0);
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charBuffer0.get(charArray0);
      stringWriter3.append((CharSequence) charBuffer0);
      StringWriter stringWriter5 = stringWriter2.append((CharSequence) charBuffer0);
      Integer integer0 = new Integer(';');
      Long long0 = new Long(0L);
      Long.toUnsignedString((long) (byte) (-21));
      JSONObject jSONObject0 = new JSONObject((Object) "toU");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("ishashCode", (Collection) linkedList0);
      Integer integer1 = new Integer(44);
      JSONObject jSONObject1 = jSONObject0.accumulate("toU", integer1);
      jSONObject0.optJSONObject("Expected a ',' or ']'");
      JSONObject.doubleToString(990);
      jSONObject1.isNull("toU");
      jSONObject0.write(stringWriter5);
      assertEquals(5, jSONObject0.length());
      
      Double double0 = new Double(990);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertEquals(11, stringArray0.length);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.2271467272473777
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      JSONObject.valueToString(jSONObject0);
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.put("", 46);
      JSONObject.valueToString(jSONObject0, 60, 60);
      Double.isFinite((-2826.0966340730624));
      int int0 = jSONObject0.getInt("");
      assertEquals(46, int0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.841767019157289
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte byte0 = (byte) (-21);
      Byte byte1 = new Byte((byte) (-21));
      JSONObject jSONObject0 = new JSONObject(byte1);
      Byte.toUnsignedLong((byte) (-21));
      JSONObject jSONObject1 = jSONObject0.put("!XQae,6,mcq", 0.0);
      jSONObject1.optInt("!XQae,6,mcq", 81);
      Byte byte2 = new Byte((byte) (-21));
      try { 
        jSONObject0.getBoolean("!XQae,6,mcq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!XQae,6,mcq\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "JSONArray initial value should be a string or collection or array.";
      JSONObject jSONObject1 = jSONObject0.putOpt("JSONArray initial value should be a string or collection or array.", (Object) null);
      String string1 = "isforEach";
      try { 
        jSONObject1.getJSONArray("isforEach");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isforEach\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.9206397521204939
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("", "");
      JSONObject.valueToString(jSONObject0, 60, 60);
      Double.isFinite((-2826.0966340730624));
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("true", "true", biFunction0);
      Float.max((byte) (-21), 0.0F);
      Float.sum(1805.5094F, 0.0F);
      JSONObject.getNames((Object) null);
      try { 
        Float.valueOf("true");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long.divideUnsigned(1L, (-1L));
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = new Object();
      Boolean.logicalAnd(true, true);
      JSONObject.doubleToString(Double.NaN);
      Double.min((-3572.8304708773135), 298.80473025971);
      try { 
        Float.valueOf("z");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.1195672639566423
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      stringArray0[1] = ":!l:2!M3Mv";
      stringArray0[2] = "z";
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(86);
      linkedList0.add(integer0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject();
      Object object1 = new Object();
      Float float0 = new Float(1.6843805915078636);
      JSONObject jSONObject2 = jSONObject0.append(":!l:2!M3Mv", float0);
      jSONObject1.optJSONObject(stringArray0[0]);
      jSONObject1.put("rkY$lB_3aWj2.~nB79", (-3569.030633405766));
      jSONObject2.optInt(":!l:2!M3Mv");
      String string0 = JSONObject.valueToString(jSONArray0, 86, 86);
      assertNotNull(string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.2948506104872353
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONObject.testValidity(object0);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("", jSONArray1);
      jSONObject0.names();
      jSONObject1.toString((-42724917));
      byte byte0 = (byte)55;
      Byte byte1 = new Byte((byte)55);
      JSONObject.getNames((Object) byte1);
      String string0 = null;
      jSONObject0.optString((String) null);
      short short0 = (short) (-1441);
      Short short1 = new Short((short)21);
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.9749979495339653
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long.divideUnsigned(1L, (-1L));
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Boolean.logicalAnd(true, true);
      String string0 = "ff9Z+F";
      JSONObject jSONObject1 = jSONObject0.putOpt("ff9Z+F", object0);
      jSONObject1.optBoolean("z", false);
      JSONObject jSONObject2 = new JSONObject();
      Object object1 = new Object();
      jSONObject2.optLong("78", 0L);
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("`B~^3q{O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of `B~^3q{O
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.281654740887368
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte byte0 = (byte) (-21);
      Byte byte1 = new Byte((byte) (-21));
      JSONObject jSONObject0 = new JSONObject(byte1);
      JSONObject jSONObject1 = jSONObject0.put("!XQae,6,mcq", 0.0);
      Byte byte2 = new Byte((byte) (-21));
      jSONObject1.optLong("!XQae,6,mcq", (long) (byte) (-21));
      jSONObject0.getString("!XQae,6,mcq");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      jSONObject0.write(writer0);
      try { 
        jSONObject0.getBoolean("!XQae,6,mcq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!XQae,6,mcq\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.162674723195228
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      int int0 = 0;
      Float float0 = new Float((float) 0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optBoolean("lo", false);
      String[] stringArray0 = new String[6];
      JSONObject jSONObject1 = jSONObject0.append("lo", object0);
      jSONObject1.append("lo", float0);
      stringArray0[0] = "lo";
      stringArray0[1] = "5uqs";
      stringArray0[2] = "lo";
      stringArray0[3] = "lo";
      stringArray0[4] = "lo";
      stringArray0[5] = "lo";
      jSONObject0.optString("lo");
      Float float1 = new Float(1.0F);
      jSONObject0.putOpt("o", float1);
      jSONObject0.optBoolean("lo", false);
      String string0 = "/";
      try { 
        jSONObject1.getLong("lo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lo\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.1916686741135574
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long.divideUnsigned(1L, (-1L));
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Boolean.logicalAnd(true, true);
      String string0 = "78";
      String string1 = "ff9Z+F";
      jSONObject0.putOpt("ff9Z+F", object0);
      JSONObject jSONObject1 = new JSONObject();
      Object object1 = new Object();
      jSONObject1.optLong("78", 0L);
      Float float0 = new Float((double) 0L);
      Boolean.compare(false, true);
      Float float1 = new Float((-8.5003605F));
      String string2 = "mj#>S@w$<B";
      Boolean boolean1 = Boolean.valueOf("mj#>S@w$<B");
      JSONObject jSONObject2 = jSONObject0.accumulate("MQ2e", boolean1);
      // Undeclared exception!
      jSONObject2.toString(0, 8448);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.473799304967732
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long.divideUnsigned(1L, (-1L));
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Boolean.logicalAnd(true, true);
      String string0 = "ff9Z+F";
      JSONObject jSONObject1 = jSONObject0.putOpt("ff9Z+F", object0);
      jSONObject1.optBoolean("z", false);
      JSONObject jSONObject2 = new JSONObject();
      Object object1 = new Object();
      jSONObject2.optLong("78", 0L);
      Float float0 = new Float((double) 0L);
      Boolean.compare(false, true);
      Float float1 = new Float((-8.5003605F));
      Boolean boolean1 = Boolean.valueOf("mj#>S@w$<B");
      jSONObject0.accumulate("MQ2e", boolean1);
      jSONObject1.optInt("78");
      // Undeclared exception!
      jSONObject0.toString(8192);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.708231919320705
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      Double.sum((-394.3026), (-3494.805988954));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      Double.isFinite((-2826.0966340730624));
      JSONObject jSONObject2 = jSONObject0.put("Xr2uy 4x", 13);
      jSONObject2.toString();
      JSONObject jSONObject3 = jSONObject2.put("Xr2uy 4x", true);
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject4 = jSONObject3.put("", (Map) hashMap0);
      jSONObject0.optString("gettoHexString", "] is not a Boolean.");
      Object object0 = new Object();
      jSONObject0.putOpt("", jSONObject2);
      jSONObject1.optDouble("H*9g");
      jSONObject1.optInt("9|d;CS0Xr");
      jSONObject3.toString();
      jSONObject4.optString(": ");
      // Undeclared exception!
      jSONObject3.toString(62, (-228));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.237259706418903
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long.divideUnsigned(1L, (-1L));
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optBoolean("z", false);
      JSONObject jSONObject1 = new JSONObject();
      Object object1 = new Object();
      String string0 = "getdecode";
      jSONObject1.optLong("78", 0L);
      Float float0 = new Float((double) 0L);
      jSONObject0.keys();
      Boolean.compare(false, true);
      Float float1 = new Float((-8.5003605F));
      JSONObject jSONObject2 = jSONObject0.append("z", boolean0);
      jSONObject0.accumulate("MQ2e", boolean0);
      jSONObject2.optInt("78");
      jSONObject2.append("getdecode", jSONObject0);
      try { 
        jSONObject2.getBoolean("z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"z\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.128880559136737
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "V#4\"ZS";
      Long.divideUnsigned((-1656L), (-1L));
      Long long0 = new Long(0L);
      Long.getLong("isappend", long0);
      Long.compare(1L, (-1656L));
      Float float0 = new Float((double) 1);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.sum(1L, (-199.0F));
      jSONObject0.optLong(":!l:2!M3Mv", (long) 1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ":!l:2!M3Mv");
      stringWriter1.flush();
      stringWriter0.write("HIKps");
      stringWriter1.close();
      jSONObject0.put("YZ {+G9F(+Ho6Hcosq", false);
      StringWriter stringWriter2 = stringWriter1.append('.');
      StringWriter stringWriter3 = stringWriter0.append((CharSequence) "V#4\"ZS");
      stringWriter3.append((CharSequence) "isappend");
      jSONObject0.write(stringWriter2);
      Float.isFinite(0L);
      jSONObject0.optDouble("isappend", (double) 1);
      StringWriter stringWriter4 = stringWriter3.append((CharSequence) ":!l:2!M3Mv");
      stringWriter4.append('.');
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1619));
      jSONObject0.accumulate("=\".uWON", integer1);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-85));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_y-";
      Byte.toUnsignedLong((byte)11);
      stringArray0[1] = ").s({U|0NhVy(={HhK";
      stringArray0[2] = ")nh}D@z";
      Byte.compare((byte) (-85), (byte)46);
      Byte.compare((byte)34, (byte)36);
      stringArray0[3] = "] is not a JSONObject.";
      stringArray0[4] = "\"}b1'zfm,5jR";
      stringArray0[5] = " of ";
      stringArray0[6] = ",";
      stringArray0[7] = "Un2X%+jU2";
      stringArray0[8] = "ha";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put("u[Ke3Xb2z>;D4M", (long) (-131));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.6433470174911693
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.valueToString(hashMap0);
      stringWriter0.write(567);
      jSONObject0.optLong("{}");
      jSONObject0.optBoolean("{}");
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      Double double0 = new Double(567);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put(double0, jSONArray0);
      Double.max(567, (-372.6906));
      jSONObject0.optJSONArray("'");
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      jSONObject1.optBoolean("null", false);
      JSONObject.numberToString(double0);
      JSONObject jSONObject2 = jSONObject0.put("'", (Collection) linkedList0);
      jSONObject0.opt("Bad value from toJSONString: ");
      jSONObject2.optString("", "Kt{!'Y");
      JSONObject.valueToString(jSONObject0, (-1728), (-2315));
      JSONObject.testValidity("Kt{!'Y");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(stringWriter0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.734147416299865
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      Double.isFinite((-394.3026));
      Double.sum((-394.3026), (-3494.805988954));
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      Double.isFinite((-2826.0966340730624));
      JSONObject jSONObject2 = jSONObject0.put("gettoUnsignedLong", 13);
      jSONObject2.toString();
      JSONObject jSONObject3 = jSONObject2.put("gettoUnsignedLong", true);
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject4 = jSONObject3.put("", (Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      Object object0 = new Object();
      jSONObject0.putOpt("", jSONObject2);
      jSONObject1.optDouble("H*9g");
      jSONObject1.optInt("9|d;CS0Xr");
      jSONObject3.toString();
      jSONObject4.optString(": ");
      JSONObject jSONObject5 = jSONObject1.put("9|d;CS0Xr", 2319.3343);
      // Undeclared exception!
      jSONObject5.toString(62, (-228));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.8898032420472077
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject0.put("isrotateRight", (Collection) linkedList0);
      HashMap<Double, Float> hashMap1 = new HashMap<Double, Float>();
      Double double0 = new Double(1302.204944735);
      Float float0 = new Float(292.7366F);
      hashMap1.put(double0, float0);
      jSONObject0.optLong("isnotifyAll");
      jSONObject0.put("isrotateRight", (Map) hashMap1);
      String string0 = "Xr2uy 4x";
      Float float1 = new Float(0.0F);
      jSONObject0.putOpt("Xr2uy 4x", "Xr2uy 4x");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1610));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.7234814019295517
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long.divideUnsigned(1L, (-1L));
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Float.sum(1519.0342F, 1.0F);
      Short short0 = new Short((short) (-1878));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1285962936622183
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.has("$");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.15374194270109
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "{}";
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONTokener0.nextTo('e');
      Boolean boolean0 = new Boolean("]~xy^<8Xoaam#plMbc(");
      jSONObject0.optDouble("I;~RgT&*$<--/", 0.0);
      String string1 = "e[:GyGQqBM6chhOH";
      jSONTokener0.nextTo('v');
      StringWriter stringWriter0 = new StringWriter();
      jSONTokener0.syntaxError("isvalueOf");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "|l^4IUUW`IH1@7sKCA");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "e[:GyGQqBM6chhOH", 48, 50);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "Jj1ipWYfIG+Qk-";
      String string1 = "] is not a JSONObject.";
      jSONObject0.put("Jj1ipWYfIG+Qk-", true);
      jSONObject0.remove("Jj1ipWYfIG+Qk-");
      jSONObject0.optDouble("Jj1ipWYfIG+Qk-", (-2527.086));
      try { 
        jSONObject0.get("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.0385829715350186
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long.divideUnsigned(1L, (-1L));
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Boolean.logicalAnd(true, true);
      JSONObject jSONObject1 = jSONObject0.putOpt("ff9Z+F", object0);
      jSONObject1.optBoolean("z", false);
      JSONObject jSONObject2 = new JSONObject();
      Object object1 = new Object();
      jSONObject2.optLong("78", 0L);
      Float float0 = new Float((double) 0L);
      Boolean.compare(false, true);
      Float float1 = new Float((-8.5003605F));
      jSONObject1.optDouble("78", (-3263.50526083935));
      jSONObject0.optBoolean("] is not a JSONArray.");
      try { 
        jSONObject2.getDouble("78");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"78\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      short short0 = (short)1499;
      Short short1 = new Short((short)1499);
      String string0 = "JSONArray initial value should be a string or collection or array.";
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt((String) null, short1);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6113482429121737
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.put("!XQae,6,mcq", 0.0);
      byte byte0 = (byte)70;
      Byte byte1 = new Byte((byte)70);
      Integer integer0 = new Integer(18);
      Integer integer1 = Integer.getInteger("sho", integer0);
      jSONObject0.put("", (Object) integer1);
      String string0 = null;
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.7927379968045558
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[0] = "";
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string1 = "r$r;.@";
      Float float0 = new Float(461.0);
      Float.isFinite((-1.0F));
      JSONObject jSONObject1 = jSONObject0.putOpt("r$r;.@", float0);
      jSONObject1.remove("istoString");
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.128880559136737
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "KwRwNt@";
      stringArray0[1] = "V#4\"ZS";
      Long.divideUnsigned((-1656L), (-1L));
      Long long0 = new Long(0L);
      Long.getLong("isappend", long0);
      Long.compare(1L, (-1656L));
      Float float0 = new Float((double) 1);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.sum(1L, (-199.0F));
      jSONObject0.optLong(":!l:2!M3Mv", (long) 1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ":!l:2!M3Mv");
      stringWriter1.flush();
      stringWriter0.write("HIKps");
      stringWriter1.close();
      StringWriter stringWriter2 = stringWriter1.append('.');
      StringWriter stringWriter3 = stringWriter0.append((CharSequence) "V#4\"ZS");
      stringWriter3.append((CharSequence) "isappend");
      jSONObject0.write(stringWriter2);
      Float.isFinite(0L);
      jSONObject0.optDouble("isappend", (double) 1);
      StringWriter stringWriter4 = stringWriter3.append((CharSequence) ":!l:2!M3Mv");
      stringWriter4.append('.');
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1619));
      jSONObject0.accumulate("=\".uWON", integer1);
      jSONObject0.optString("V#4\"ZS", (String) null);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.1547491274910455
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "KwRwNt@";
      stringArray0[1] = "V#4\"ZS";
      Long.compare(1L, (-1656L));
      Float float0 = new Float((double) 1);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.sum(1L, (-199.0F));
      jSONObject0.optLong(":!l:2!M3Mv", (long) 1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ":!l:2!M3Mv");
      stringWriter1.flush();
      stringWriter0.write("HIKps");
      stringWriter1.close();
      stringWriter1.append('.');
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "V#4\"ZS");
      stringWriter2.append((CharSequence) "isappend");
      jSONObject0.write(stringWriter1);
      jSONObject0.optDouble("isappend", (double) 1);
      stringWriter2.append((CharSequence) ":!l:2!M3Mv");
      stringWriter0.append((CharSequence) "V#4\"ZS");
      Byte byte0 = new Byte((byte)92);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONObject.", byte0);
      jSONObject1.optString((String) null, "UcBxfa");
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject1.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.090159922407372
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0);
      Double.isFinite((-2826.0966340730624));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('_');
      stringWriter1.append('d');
      stringWriter0.append((CharSequence) "false");
      try { 
        jSONObject0.getDouble("ba<HYSK)VOn\"SGILW+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ba<HYSK)VOn\\\"SGILW+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(set0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.8800363308349797
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "{}";
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      String string1 = "]~xy^<8Xoaam#plMbc(";
      Byte.toUnsignedLong((byte)2);
      String string2 = "mj#>S@w$<B";
      Boolean boolean0 = Boolean.valueOf("]~xy^<8Xoaam#plMbc(");
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", boolean0);
      jSONObject1.optInt("{}");
      try { 
        jSONTokener0.next(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Substring bounds error at character 2 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.0008695826931318
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long.divideUnsigned(1L, (-1L));
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Boolean.logicalAnd(true, true);
      String string0 = "ff9Z+F";
      JSONObject jSONObject1 = jSONObject0.putOpt("ff9Z+F", object0);
      JSONObject jSONObject2 = new JSONObject();
      Object object1 = new Object();
      jSONObject2.optLong("78", 0L);
      Float float0 = new Float((double) 0L);
      Boolean.compare(false, true);
      Float float1 = new Float((-8.5003605F));
      Boolean boolean1 = Boolean.valueOf("mj#>S@w$<B");
      JSONObject jSONObject3 = jSONObject0.accumulate("MQ2e", boolean1);
      jSONObject3.optInt("sp", 58);
      jSONObject1.optInt("78");
      try { 
        jSONObject2.getBoolean("&;;=eU6/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&;;=eU6/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.106577333232116
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt("JSONArray initial value should be a string or collection or array.", set0);
      jSONObject1.toJSONArray((JSONArray) null);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      String string0 = "XB0GAXSz2\"SpV52h~";
      String string1 = null;
      hashMap1.put("XB0GAXSz2\"SpV52h~", (String) null);
      Float float0 = new Float(964.7835);
      StringWriter stringWriter0 = new StringWriter(0);
      int int0 = (-122);
      jSONObject1.optJSONObject("XB0GAXSz2\"SpV52h~");
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) null, 7, 117);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "V#4\"ZS";
      Long.divideUnsigned((-1656L), (-1L));
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      JSONObject.quote(":!l:2!M3Mv");
      JSONObject.quote("V#4\"ZS");
      try { 
        Float.valueOf("null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.2510583317959272
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = 61;
      jSONArray0.put(1889, 61);
      jSONArray0.put(12.221801640331854);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      JSONArray jSONArray1 = new JSONArray((Collection) null);
      jSONObject0.toJSONArray(jSONArray1);
      StringWriter stringWriter0 = new StringWriter(61);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "get", 55, 1889);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.6890092384766586
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Short.toUnsignedInt((short)59);
      Short.toUnsignedInt((short) (-1057));
      Short.toUnsignedLong((short)857);
      Short.toUnsignedLong((short)2291);
      Short.toUnsignedInt((short)865);
      Short.toUnsignedInt((short)865);
      Short.toUnsignedLong((short)1599);
      Short.compare((short)74, (short)1140);
      Short.compare((short)87, (short) (-4366));
      Short.compare((short) (-1057), (short) (-2254));
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Short short0 = new Short((short)100);
      Short.toUnsignedLong((short) (-630));
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("A JSONObject text must end with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONObject text must end with '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.2995530335744938
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 0, 0);
      assertEquals("null", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-50462705), 4);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.4311385219282593
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = 61;
      Integer integer0 = new Integer(12);
      linkedList0.add(integer0);
      jSONArray0.put(1889, 61);
      jSONArray0.put(0.0);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray1);
      StringWriter stringWriter0 = new StringWriter(61);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "get", 55, 1889);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.1537419427010902
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Float.max((-143.14458F), 5853.153F);
      Float.sum((-2057.6F), (-1148.9772F));
      Integer integer0 = new Integer((-1068));
      JSONObject.getNames((Object) integer0);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.8634368681781956
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      stringArray0[1] = ":!l:2!M3Mv";
      stringArray0[2] = "z";
      JSONObject jSONObject0 = new JSONObject(":!l:2!M3Mv", stringArray0);
      jSONObject0.put("", (Object) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject();
      Object object1 = new Object();
      Float float0 = new Float(1.6843805915078636);
      JSONObject jSONObject2 = jSONObject0.append(":!l:2!M3Mv", float0);
      jSONObject1.optJSONObject(stringArray0[0]);
      jSONObject1.put("rkY$lB_3aWj2.~nB79", (-3569.030633405766));
      try { 
        jSONObject2.getJSONObject(":!l:2!M3Mv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":!l:2!M3Mv\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.771623955677366
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a Boolean.";
      int int0 = (-794);
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (-794));
      JSONObject jSONObject2 = jSONObject1.put("] is not a Boolean.", false);
      jSONObject2.put("] is not a Boolean.", 0.0);
      jSONObject0.get("] is not a Boolean.");
      String string1 = "1yqm^;3q|g\"7FK_";
      String string2 = null;
      double double0 = (-1564.05967264729);
      Double double1 = new Double(Double.NaN);
      try { 
        jSONObject0.put((String) null, (Object) double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.6433129176290384
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float((-2023.1706310121026));
      StringWriter stringWriter0 = new StringWriter(44);
      StringWriter stringWriter1 = stringWriter0.append(';');
      CharBuffer charBuffer0 = CharBuffer.allocate(990);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      StringWriter stringWriter3 = stringWriter1.append(';');
      StringWriter stringWriter4 = new StringWriter();
      stringWriter1.append((CharSequence) charBuffer0);
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charBuffer0.get(charArray0);
      stringWriter3.append((CharSequence) charBuffer0);
      stringWriter2.append((CharSequence) charBuffer0);
      Integer integer0 = new Integer(';');
      Long long0 = new Long(';');
      Long.toUnsignedString((long) (byte) (-21));
      JSONObject jSONObject0 = new JSONObject((Object) "toU");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", (Collection) linkedList0);
      Integer integer1 = new Integer(44);
      jSONObject1.optJSONArray("ishashCode");
      try { 
        jSONObject1.accumulate((String) null, stringWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte byte0 = (byte) (-35);
      Byte byte1 = new Byte((byte) (-35));
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = new JSONObject();
      jSONTokener0.next();
      jSONObject0.put("sY,3zgDn@P", true);
      String string1 = "gettoHexString";
      jSONObject0.opt("gettoHexString");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-2048));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0579054247036734
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.entrySet();
      Short short0 = new Short((short)57);
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.1985809958301727
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Long long0 = new Long((-1L));
      Long.divideUnsigned(1L, (-1L));
      Long.getLong(":!l:2!M3Mv", long0);
      Long.compare(0L, (-1L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.optString(":!l:2!M3Mv");
      jSONObject0.putOpt("Ggpc9D`", "z");
      jSONObject0.optBoolean("Ggpc9D`", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('W');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) ":!l:2!M3Mv");
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "");
      stringWriter0.append('~');
      stringWriter2.append((CharSequence) "z");
      StringBuffer stringBuffer0 = stringWriter3.getBuffer();
      stringWriter2.append((CharSequence) stringBuffer0);
      Short short0 = new Short((short)1620);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>(0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("wu", 0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.6249871742304454
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "getisNaN";
      stringArray0[1] = "s+}=W8:fJ4";
      stringArray0[2] = ".";
      stringArray0[3] = "2/-#F";
      stringArray0[4] = "FR";
      stringArray0[5] = "vACu/>'-l6YZm!mCgC";
      stringArray0[6] = "] is not a Boolean.";
      stringArray0[7] = "YlQ%Sm ty[hX75";
      stringArray0[8] = "iscompare";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("] is not a JSONObject.", false);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.7201934592198251
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "JSONArray initial value should be a string or collection or array.";
      JSONObject jSONObject1 = jSONObject0.putOpt("JSONArray initial value should be a string or collection or array.", set0);
      Boolean boolean0 = Boolean.valueOf(true);
      try { 
        jSONObject1.append("JSONArray initial value should be a string or collection or array.", boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[JSONArray initial value should be a string or collection or array.] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Float.max((-1.0F), 5853.153F);
      StringWriter stringWriter0 = new StringWriter(47);
      StringWriter stringWriter1 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(47);
      stringWriter1.append((CharSequence) charBuffer0);
      stringWriter0.append((CharSequence) charBuffer0);
      stringWriter1.append((CharSequence) charBuffer0);
      Integer integer0 = new Integer(13);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("getlistIterator", "isdecode");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.15374194270109
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Map) hashMap0);
      jSONArray1.put(461.0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(hashMap0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.7279318349954007
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Integer integer0 = new Integer((-4674));
      JSONObject jSONObject0 = new JSONObject(integer0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "false";
      stringArray0[1] = "Expected a ',' or ']'";
      stringArray0[2] = "\"\"";
      stringArray0[3] = "_M";
      stringArray0[4] = "i5$v>BwUsFqAr+vYe9";
      stringArray0[5] = "joi";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      jSONObject0.put("\"\"", (Map) hashMap0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-35));
      JSONTokener jSONTokener0 = new JSONTokener("{");
      Short.toUnsignedLong((short)87);
      Short.toUnsignedInt((short)92);
      Byte.toUnsignedLong((byte) (-35));
      Short.compare((byte) (-35), (short)791);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-85));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_y-";
      Byte.toUnsignedLong((byte)11);
      stringArray0[1] = ").s({U|0NhVy(={HhK";
      stringArray0[2] = ")nh}D@z";
      Byte.compare((byte) (-85), (byte)46);
      Byte.compare((byte)34, (byte)36);
      stringArray0[3] = "] is not a JSONObject.";
      stringArray0[4] = ")nh}D@z";
      stringArray0[5] = " of ";
      stringArray0[6] = ",";
      String string0 = "Un2X%+jU2";
      stringArray0[7] = "Un2X%+jU2";
      stringArray0[8] = "ha";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      try { 
        jSONObject0.getInt("nUL#YJy<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nUL#YJy<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "{~";
      JSONTokener jSONTokener0 = new JSONTokener("{~");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "KwRwNt@";
      stringArray0[0] = "KwRwNt@";
      stringArray0[1] = "V#4\"ZS";
      stringArray0[2] = "KaxDavdw)7#cW";
      Float float0 = new Float(1.0F);
      CharBuffer.wrap((CharSequence) "V#4\"ZS");
      StringWriter stringWriter0 = new StringWriter(1170);
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("lo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of lo
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = (-1L);
      Long long1 = new Long((-1L));
      JSONTokener jSONTokener0 = new JSONTokener("ha");
      JSONTokener jSONTokener1 = new JSONTokener("D9S%Ti}UD%I@W&d(iC`");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of D9S%Ti}UD%I@W&d(iC`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "equ";
      stringArray0[1] = "Gnj^1'WX>@L)E;*2";
      stringArray0[2] = "Null key.";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = "{O}i6A|[#}u8T$g+";
      stringArray0[5] = "55?|ZF3pC`hn*MG";
      stringArray0[6] = "Jy 1)`6CNrID-[*$ze!";
      stringArray0[7] = "Missing value";
      stringArray0[8] = "get";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.5985597997280185
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte byte0 = (byte) (-35);
      String string0 = "pu";
      JSONObject jSONObject0 = new JSONObject((Object) "pu");
      String string1 = "!XQae,6,mcq";
      JSONObject jSONObject1 = jSONObject0.put("]#v4v\"q:4b6:K[S?h", 0.0);
      Byte byte1 = new Byte((byte)29);
      try { 
        jSONObject1.getString("!XQae,6,mcq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!XQae,6,mcq\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      double double1 = Double.sum((-2668.707106), (-394.3026));
      JSONObject.testValidity(double0);
      assertNotEquals((double)double0, (double)double1, 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = null;
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.5622590391891036
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Double.isFinite((-2826.0966340730624));
      HashMap<Object, JSONArray> hashMap1 = new HashMap<Object, JSONArray>();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.optBoolean("78", false);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("78");
      try { 
        jSONTokener0.nextString('B');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 2 of 78
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.3438479335283025
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject1 = jSONObject0.append("{}", float0);
      jSONObject1.toString((-2721), 2197);
      JSONObject jSONObject2 = jSONObject0.put("", 2843.9287);
      jSONObject2.optBoolean((String) null, true);
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = new JSONObject("{}");
      jSONObject1.optDouble("~2V 8", 2843.9287);
      String string0 = "Cx]*$JT";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("Cx]*$JT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Cx]*$JT
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Float float0 = new Float((-741.32085));
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0900596587107838
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.valueToString(double0, 62, 62);
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.806426029973026
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      JSONObject.valueToString(jSONObject0, 60, 60);
      Double.isFinite((-2826.0966340730624));
      jSONObject1.put("V' 9@DZ", 106);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pa";
      stringArray0[1] = "null";
      stringArray0[2] = "%=EBGqw{ ";
      stringArray0[3] = "isvalueOf";
      stringArray0[4] = "@";
      stringArray0[5] = " ~?;pb=5ge_z-pk,f";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = jSONObject0.toString((-610));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject.quote("");
      JSONObject.quote("L98is'_iIWF//W1op8");
      try { 
        Float.valueOf("\"\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Float float0 = new Float(1.0);
      String string0 = JSONObject.quote("23/ %");
      assertEquals("\"23/ %\"", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "JSONOect[";
      hashMap0.put("JSONOect[", "JSONOect[");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      jSONObject0.optString("");
      Float float0 = new Float(Double.NaN);
      String string1 = "in";
      CharBuffer.wrap((CharSequence) "");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1610));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Float float0 = new Float(116.63831F);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "|qW<";
      stringArray0[1] = "4>9Io'E:PAP";
      stringArray0[2] = "";
      stringArray0[3] = "I#Fw7,&iUw_w1yV~ue";
      stringArray0[4] = "va";
      stringArray0[5] = "Aos)nK3iPnR\"/u";
      stringArray0[6] = "_?]5Y";
      stringArray0[7] = ": ";
      stringArray0[8] = "4# fg$IV{EghH2CP#n!";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)34);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.toString((-1357), 106);
      jSONObject0.toString(46, 13);
      try { 
        Float.valueOf("getnotifyAll");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.488507861129921
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte byte0 = (byte) (-21);
      Byte byte1 = new Byte((byte) (-21));
      JSONObject jSONObject0 = new JSONObject(byte1);
      Float.isFinite((byte) (-21));
      try { 
        jSONObject0.getJSONArray("r$r;.@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"r$r;.@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      hashMap0.put("getremove", "getremove");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("SmLGcMYxS{}xLa_Q", set0);
      try { 
        jSONObject1.getJSONArray("SmLGcMYxS{}xLa_Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"SmLGcMYxS{}xLa_Q\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Short short0 = new Short((short)62);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(PK";
      stringArray0[1] = "~xu+]@h-Q$]ZPr7d";
      stringArray0[2] = "VY@Y]*=b3B`?Vl:v3o2";
      stringArray0[3] = "&@6[rkJ$ j+X +_LW";
      Short.compare((short)62, (short) (-2023));
      stringArray0[4] = "+>I<Pa-";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
