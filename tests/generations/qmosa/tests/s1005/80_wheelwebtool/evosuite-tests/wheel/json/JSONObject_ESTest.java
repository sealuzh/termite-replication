/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 17:08:44 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.232406970318784
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("add", "add");
      StringWriter stringWriter0 = new StringWriter(2188);
      StringWriter stringWriter1 = new StringWriter(2188);
      stringWriter1.close();
      Boolean boolean0 = new Boolean("M5@");
      JSONObject jSONObject2 = jSONObject0.put("null", (Object) jSONObject1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = '~';
      charArray0[2] = '#';
      stringWriter1.write(charArray0);
      StringWriter stringWriter2 = stringWriter0.append('(');
      StringWriter stringWriter3 = stringWriter2.append('\'');
      stringWriter3.close();
      StringWriter stringWriter4 = new StringWriter(2188);
      StringWriter stringWriter5 = new StringWriter();
      stringWriter3.append((CharSequence) "null");
      stringWriter3.write(charArray0);
      StringWriter stringWriter6 = new StringWriter(2188);
      // Undeclared exception!
      jSONObject2.write(stringWriter4);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7672228610077343
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not :a Boolean.", true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject2 = jSONObject1.put("'qPg|8", (Map) hashMap0);
      jSONObject2.getBoolean("] is not :a Boolean.");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONObject1.optJSONArray("] is not :a Boolean.");
      linkedList0.clear();
      jSONObject0.optJSONArray("<mDNOn1ezcW>igT ");
      jSONObject0.toJSONArray(jSONArray0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList0.spliterator();
      // Undeclared exception!
      try { 
        linkedList2.addAll((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6332004508871008
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.replace((String) null, (String) null, (String) null);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      hashMap0.put((String) null, (String) null);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 140, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.482343931014082
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.isFinite((-544.62823F));
      linkedList0.addFirst("d4?");
      linkedList0.removeFirst();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      linkedList1.removeIf(predicate4);
      linkedList0.retainAll(linkedList1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("d4?");
      linkedList2.iterator();
      linkedList2.add("f{KK2_U.2L&B`y42W\"");
      linkedList0.addAll((Collection<? extends String>) linkedList2);
      linkedList2.stream();
      Float.max(204.722F, 0.0F);
      Float float0 = new Float((double) 204.722F);
      Float.max(1.0F, 204.722F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.doubleToString(204.722F);
      // Undeclared exception!
      jSONObject0.toString(3865);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      Float float0 = new Float((-1.06892));
      byte byte0 = (byte)33;
      Byte byte1 = new Byte((byte)33);
      hashMap0.put(float0, byte1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("=qeac$jW;f5i&=p");
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3264424544521174
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("add", "add");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('P');
      stringWriter1.close();
      Double double1 = new Double(0.0);
      stringWriter1.close();
      JSONObject jSONObject1 = jSONObject0.put("add", (Object) "add");
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      stringWriter1.write(charArray0);
      stringWriter0.append('6');
      stringWriter1.close();
      StringWriter stringWriter2 = new StringWriter(2188);
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      jSONObject0.put("add", (Map) hashMap0);
      stringWriter2.write(charArray0);
      StringWriter stringWriter3 = new StringWriter(2188);
      jSONObject1.write(stringWriter1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3361536163327665
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Float float0 = new Float((-997.0F));
      Float.isFinite((-997.0F));
      Float float1 = new Float(0.0F);
      Float float2 = new Float((-997.0F));
      Float.isFinite(0.0F);
      Float.sum(2356.0F, (-997.0F));
      Float.isFinite(2356.0F);
      Float.isFinite((-250.0F));
      Float.isFinite(0.0F);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\\');
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      stringWriter1.write(charArray0);
      StringWriter stringWriter2 = stringWriter1.append('\\');
      stringWriter2.close();
      StringWriter stringWriter3 = new StringWriter(1262);
      stringWriter0.write(charArray0);
      StringWriter stringWriter4 = new StringWriter(673);
      JSONObject jSONObject0 = new JSONObject(stringWriter4);
      jSONObject0.write(stringWriter0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.optJSONObject((String) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5264884296497847
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Double double0 = new Double((-394.3));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)6);
      Short.compare((short)101, (short)6);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject3 = jSONObject2.accumulate("", jSONArray0);
      JSONObject jSONObject4 = jSONObject3.append("", jSONObject1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONObject2.optJSONArray("ishashvodg_e");
      jSONObject2.optJSONArray("");
      Object object0 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[5] = "";
      stringArray0[1] = "ishashvodg_e";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "wzTu5g]\u0000l=[)5`Cm";
      stringArray0[5] = "_dNO";
      stringArray0[6] = "<mDNOnjezcW>iT ";
      stringArray0[7] = "wzTu5g]\u0000l=[)5`Cm";
      stringArray0[8] = "ishashvodg_e";
      JSONObject jSONObject5 = new JSONObject(object0, stringArray0);
      jSONObject5.opt(stringArray0[0]);
      Double double1 = new Double(0.0);
      JSONObject jSONObject6 = jSONObject4.put("_dNO", (double) (short)6);
      assertNotSame(jSONObject6, jSONObject5);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6432869996872768
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Float float0 = new Float((-997.0F));
      Float.sum(0.0F, 0.0F);
      Float.isFinite(0.0F);
      Float.max((-1.0F), (-2800.6926F));
      float float1 = 3209.0F;
      Float.isFinite(3209.0F);
      Float.max((-1.0F), (-1.0F));
      Float.isFinite((-1.0F));
      Float.isFinite((-1341.6F));
      Float.max(1757.57F, 0.0F);
      Float.sum(1757.57F, (-1.0F));
      Float.isFinite(1757.57F);
      Float.max(0.0F, (-1.0F));
      Float.sum((-1.0F), (-1.0F));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      Double double0 = new Double((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = "Substring bounds error";
      String string1 = null;
      try { 
        jSONObject1.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2452574540393013
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("=OKuR", object0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-301));
      linkedList0.iterator();
      linkedList0.offer(short0);
      short short1 = (short)1917;
      Short short2 = new Short((short) (-301));
      Short.compare((short)425, (short)101);
      Short.toUnsignedInt((short) (-1003));
      Short short3 = new Short((short)101);
      linkedList0.add(short3);
      linkedList0.pollLast();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.isNull("=OKuR");
      Boolean boolean0 = new Boolean("=OKuR");
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject1.getInt("eM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"eM\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7191427980583
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not :a Boolean.", true);
      JSONObject jSONObject2 = jSONObject1.put("] is not :a Boolean.", 0.0);
      jSONObject0.get("] is not :a Boolean.");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject2.accumulate("] is not :a Boolean.", jSONArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "] is not :a Boolean.";
      StringWriter stringWriter0 = new StringWriter(8192);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      JSONObject jSONObject3 = jSONObject1.append("gf", jSONArray0);
      stringArray0[1] = "";
      stringArray0[2] = "] is not :a Boolean.";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "] is not :a Boolean.";
      stringArray0[7] = "] is not :a Boolean.";
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(Double.NaN);
      JSONObject.doubleToString(Double.NaN);
      Writer writer0 = jSONObject3.write(stringWriter1);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.549874419348945
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Double double0 = new Double((-394.3));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)1917);
      Short.compare((short)1917, (short)1917);
      Short.compare((short)101, (short)1917);
      int int0 = new Integer((short)101);
      linkedList0.add(short0);
      linkedList0.pollLast();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Integer integer0 = new Integer((short)1917);
      boolean boolean0 = jSONObject0.isNull("");
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("");
      Boolean boolean2 = Boolean.FALSE;
      jSONObject0.accumulate("!+!y+O&$Tf!Gy", boolean2);
      jSONObject0.put("i=", (-629.1));
      int int1 = jSONObject1.getInt("i=");
      assertEquals((-629), int1);
      
      Short.toUnsignedLong((short)1917);
      Short.toUnsignedInt((short)13086);
      Short short1 = new Short((short)8448);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      boolean boolean3 = linkedList2.addAll((Collection<? extends String>) linkedList1);
      assertTrue(boolean3 == boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4079607198802515
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("add", "add");
      StringWriter stringWriter0 = new StringWriter(2188);
      StringWriter stringWriter1 = stringWriter0.append('P');
      stringWriter1.close();
      Double double1 = new Double('P');
      stringWriter1.close();
      JSONObject jSONObject2 = jSONObject0.put("add", (Object) "add");
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      stringWriter1.write(charArray0);
      stringWriter0.append('6');
      stringWriter1.close();
      StringWriter stringWriter2 = new StringWriter(2188);
      stringWriter2.write(charArray0);
      StringWriter stringWriter3 = new StringWriter(2188);
      jSONObject2.write(stringWriter1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.optJSONObject((String) null);
      try { 
        jSONObject1.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.726670380801524
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Double double0 = new Double((-394.3));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)1917);
      Short.compare((short)101, (short)1917);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      jSONObject1.put("", (Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "F+";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "F+";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.getJSONObject("");
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3202876299623028
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("add", "add");
      boolean boolean0 = jSONObject1.optBoolean("add", true);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)586);
      Short.toUnsignedLong((short)14);
      Short short1 = new Short((short)14);
      Short.toUnsignedInt((short)106);
      JSONObject jSONObject2 = jSONObject0.put("add", 2398.055141370404);
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      jSONObject0.accumulate("PEtH+gbq>8@E", double0);
      long long0 = jSONObject2.getLong("add");
      assertEquals(2398L, long0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      boolean boolean1 = linkedList3.addAll((Collection<? extends String>) linkedList6);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.876181887339815
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "4j`m=jX0JdYa,S";
      HashMap<Long, JSONArray> hashMap0 = new HashMap<Long, JSONArray>();
      Long long0 = new Long(0L);
      Long.sum(0L, (-1L));
      BiFunction<Object, Object, JSONArray> biFunction0 = (BiFunction<Object, Object, JSONArray>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute(long0, biFunction0);
      jSONArray0.put((Map) hashMap0);
      stringArray0[1] = "ma";
      stringArray0[2] = "Kbs";
      stringArray0[3] = "afd4;S]'':bz";
      stringArray0[4] = "isN";
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("mi", 1157L);
      String string0 = jSONObject0.optString("getcompare", "Expected a ':' after a key");
      assertEquals("Expected a ':' after a key", string0);
      
      int int0 = jSONObject1.optInt((String) null, 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.463931189231278
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("", "");
      JSONObject.valueToString("");
      StringWriter stringWriter0 = new StringWriter(2188);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = JSONObject.NULL;
      String string0 = "\\r";
      String[] stringArray0 = new String[19];
      stringArray0[0] = "\r";
      stringArray0[1] = "";
      stringArray0[2] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.remove("");
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3843097937657984
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Float.isFinite(306.37683F);
      Float.max((-1067.68F), 0.0F);
      Float.max(306.37683F, 0.0F);
      Float.max(0.0F, 0.0F);
      Float.sum((-1014.6796F), 0.0F);
      Float.max((-1048.686F), (-1361.2F));
      Float.sum(1561.0F, (-1067.68F));
      Float.isFinite(0.0F);
      Float.min(0.0F, 0.0F);
      String string0 = JSONObject.quote("] not found.");
      assertEquals("\"] not found.\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"] not found.\"");
      jSONObject0.toString((-6392), (-6392));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.09233707261021
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", 0.0);
      jSONObject0.get("] is not a Boolean.");
      Double.max((-794), 1257.20641763741);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      String string0 = "$B+.kEg?g6/MTYk2)u";
      JSONObject.quote("$B+.kEg?g6/MTYk2)u");
      StringWriter stringWriter0 = new StringWriter(4);
      jSONObject1.getLong("] is not a Boolean.");
      Object object0 = JSONObject.NULL;
      String string1 = "\\f";
      jSONObject0.optDouble("] is not a Boolean.");
      jSONObject1.opt("\f");
      String string2 = "\\n";
      try { 
        jSONObject0.getInt("\"H]'Q]B4ga-tj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"H]'Q]B4ga-tj\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6711416389929687
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONArray[", false);
      JSONObject jSONObject2 = jSONObject1.put("] is not :a Boolean.", 2334.7);
      jSONObject2.get("JSONArray[");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Long long0 = new Long((-4541L));
      JSONObject jSONObject3 = jSONObject2.accumulate("&|~9Gdzfv%pl\"an 8", long0);
      Integer integer0 = new Integer(64);
      JSONObject jSONObject4 = jSONObject2.append("", integer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      jSONObject4.optJSONArray("");
      jSONObject4.optJSONArray("toS");
      jSONObject3.toJSONArray(jSONArray0);
      Object object0 = jSONObject4.opt("");
      assertNotSame(object0, jSONArray0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6659458902916686
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.replace((String) null, (String) null, (String) null);
      hashMap0.put((String) null, (String) null);
      hashMap0.put((String) null, "JSONArray initial value should be a string or collection or array.");
      hashMap0.put("isspliterator", "pE=AtROMA~#,i");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Boolean boolean0 = Boolean.valueOf("pE=AtROMA~#,i");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0gUj37";
      stringArray0[1] = "pE=AtROMA~#,i";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[6] = "M,YVbUk!W#!";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.toString();
      jSONObject0.optJSONArray("0gUj37");
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject1);
      jSONObject0.toJSONArray((JSONArray) null);
      // Undeclared exception!
      try { 
        jSONObject1.toString((-205), 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.983358998289896
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)64);
      JSONObject jSONObject1 = jSONObject0.putOpt("getiterator", byte0);
      int int0 = 3475;
      jSONObject0.toString(3475, 3475);
      String string0 = "get";
      JSONObject jSONObject2 = jSONObject1.put("get", (double) (byte)64);
      jSONObject2.toString((int) (byte)64, (-291));
      jSONObject2.getInt("getiterator");
      JSONObject.getNames(jSONObject1);
      String string1 = "cl";
      jSONObject0.optDouble("cl");
      JSONObject jSONObject3 = jSONObject0.put(":==})qKN^UpF8wzM", (-162));
      jSONObject3.optInt(":==})qKN^UpF8wzM");
      String string2 = "ite";
      jSONObject1.optJSONArray("ite");
      JSONObject.numberToString(byte0);
      // Undeclared exception!
      jSONObject3.toString(64, 3475);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.26736923541205
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (-794));
      JSONObject jSONObject2 = jSONObject1.put("] is not a Boolean.", 0.0);
      jSONObject0.get("] is not a Boolean.");
      Double.max((-794), 1257.20641763741);
      jSONObject0.toString(4);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject3 = new JSONObject("{\"java.lang.String@0000000002\": java.lang.Double@0000000004}");
      StringWriter stringWriter0 = new StringWriter(4);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{\"java.lang.String@0000000002\": java.lang.Double@0000000004}");
      StringWriter stringWriter2 = stringWriter1.append('_');
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "$B+.kEg?g6/MTYk2)u", 5, 5);
      stringWriter3.write((-155));
      jSONObject3.write(stringWriter3);
      jSONObject2.getLong("] is not a Boolean.");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject4 = jSONObject2.put("{\"java.lang.String@0000000002\": java.lang.Double@0000000004}", false);
      JSONObject jSONObject5 = jSONObject4.accumulate("$B+.kEg?g6/MTYk2)u", "1CC&UWq");
      jSONObject5.isNull("$B+.kEg?g6/MTYk2)u");
      jSONObject1.getInt("] is not a Boolean.");
      jSONObject2.getBoolean("{\"java.lang.String@0000000002\": java.lang.Double@0000000004}");
      long long0 = jSONObject2.optLong("] is not a Boolean.");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4227700056493635
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "d_8:gXJZ";
      stringArray0[1] = "uqT;&e`0mqD";
      String string0 = "JSONObject[";
      int int0 = 15;
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      jSONArray0.put(15, (Map) hashMap0);
      stringArray0[2] = "JSONObject[";
      String string1 = "?4Y!d=";
      stringArray0[3] = "?4Y!d=";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string2 = "Z vNuu)0'5{";
      jSONObject1.put("Z vNuu)0'5{", true);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("{yQ})_*,oB_KpV3IH`v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {yQ})_*,oB_KpV3IH`v
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.253642008989387
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(double0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)1917);
      Short.toUnsignedInt((short)1917);
      boolean boolean0 = new Boolean("");
      linkedList0.pollLast();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.optDouble("}T5zb");
      jSONObject0.isNull("");
      Boolean boolean1 = new Boolean("");
      Float.max((-1079.0F), 1917);
      Long.remainderUnsigned(879L, 879L);
      Long.compare(0L, 0L);
      Long long0 = new Long((short)1917);
      JSONObject.numberToString(long0);
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      assertTrue(hashMap0.isEmpty());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.888611030432643
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not :a Boolean.", true);
      JSONObject jSONObject2 = jSONObject1.put("] is not :a Boolean.", 0.0);
      jSONObject0.get("] is not :a Boolean.");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = "'qPg|8";
      JSONObject jSONObject3 = jSONObject1.append("'qPg|8", jSONArray0);
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      Long long0 = new Long(0L);
      hashMap0.put("tH", long0);
      jSONObject2.put("] is not :a Boolean.", (Map) hashMap0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      jSONObject1.optJSONArray("] is not :a Boolean.");
      jSONObject0.optJSONArray("<mDNOnjezcW>iT ");
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject2.toString((-1574), (-1574));
      try { 
        jSONObject3.getDouble("' and instead saw '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"' and instead saw '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4009103114529533
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not :a Boolean.", true);
      jSONObject1.put("Missing value", (Object) jSONObject0);
      jSONObject1.put("] is not :a Boolean.", 0.0);
      jSONObject0.get("] is not :a Boolean.");
      Float float0 = new Float(0.0);
      Boolean boolean0 = new Boolean("] is not :a Boolean.");
      JSONObject jSONObject2 = new JSONObject((Object) "] is not :a Boolean.");
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject3 = new JSONObject();
      jSONObject2.optInt("istoBinaryString", (-2736));
      jSONObject3.optDouble("wheel.json.JSONObject$Null", 0.0);
      jSONObject2.put("] is not :a Boolean.", (Collection) linkedList0);
      assertEquals(4, jSONObject2.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6436720422622577
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("an04OaG1g", "an04OaG1g");
      Long long0 = new Long(0L);
      JSONObject.numberToString(long0);
      jSONObject1.append("Null pointer", "an04OaG1g");
      jSONObject0.put("an04OaG1g", false);
      jSONObject1.getBoolean("an04OaG1g");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList5.addAll((Collection<? extends String>) linkedList4);
      JSONObject jSONObject2 = jSONObject0.put("an04OaG1g", (-2885));
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Double double0 = new Double((-413.03204441737495));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "~dJfTF16";
      linkedList0.add("~dJfTF16");
      linkedList0.toArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~dJfTF16");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~dJfTF16
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.607049068437444
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      StringWriter stringWriter0 = new StringWriter(2196);
      StringWriter stringWriter1 = stringWriter0.append('P');
      char[] charArray0 = new char[9];
      stringWriter1.close();
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      charArray0[4] = 'P';
      charArray0[5] = 'P';
      Double double1 = new Double(0.0);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) double1);
      stringWriter0.write(charArray0);
      charArray0[6] = 'P';
      charArray0[7] = 'P';
      stringWriter1.close();
      charArray0[8] = 'P';
      stringWriter1.write(charArray0);
      StringWriter stringWriter2 = new StringWriter('P');
      jSONObject1.write(stringWriter2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string1 = "";
      jSONObject0.getDouble("");
      try { 
        jSONObject2.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.455760027083268
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Float float0 = new Float((-997.0F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(849.562442244163);
      Short short0 = new Short((short)2352);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "KaxDavdw)7#cW";
      stringArray0[1] = "KaxDavdw)7#cW";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertNotNull(jSONArray2);
      
      JSONTokener jSONTokener0 = new JSONTokener("Expected a ',' or '}'");
      Byte byte0 = new Byte((byte) (-17));
      JSONObject jSONObject1 = jSONObject0.append("KaxDavdw)7#cW", byte0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      double double0 = new Short((short)2352);
      jSONObject1.keys();
      jSONObject0.accumulate("KaxDavdw)7#cW", jSONArray2);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.442214080129496
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      StringWriter stringWriter0 = new StringWriter(2188);
      StringWriter stringWriter1 = stringWriter0.append('P');
      char[] charArray0 = new char[9];
      stringWriter1.close();
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      charArray0[4] = 'P';
      charArray0[5] = 'P';
      Double double1 = new Double('P');
      jSONObject1.put("", (Object) double1);
      stringWriter0.write(charArray0);
      charArray0[6] = 'P';
      charArray0[7] = 'P';
      stringWriter1.close();
      charArray0[8] = 'P';
      stringWriter1.write(charArray0);
      StringWriter stringWriter2 = new StringWriter('P');
      stringWriter2.close();
      jSONObject1.write(stringWriter2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject1.optJSONObject("TWhKiJOZ*3]+Iu<dzJ9");
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.19468882195149
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      jSONArray0.put(12, (Object) linkedList0);
      Object object0 = JSONObject.NULL;
      hashMap0.put(jSONArray0, object0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "{";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject1.put("", (double) 12);
      jSONObject0.optInt("");
      jSONObject3.optBoolean("");
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.3088552427058513
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("", "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      Object object0 = JSONObject.NULL;
      Double double1 = new Double(3113.748565661);
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("false", "false");
      String string1 = JSONObject.doubleToString((-394.3026));
      assertEquals("-394.3026", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3876362280213312
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Long long0 = new Long((-614L));
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      Byte byte0 = new Byte((byte)36);
      Long long1 = new Long((-614L));
      hashMap0.replace(byte0, long1, long0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.containsAll(linkedList1);
      linkedList1.add("{");
      Long long2 = new Long((byte)36);
      Byte byte1 = new Byte((byte) (-63));
      hashMap0.put(byte1, long2);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.addAll((Collection<? extends String>) linkedList2);
      Long long3 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.keySet();
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "{";
      stringArray0[2] = "] is not a JSONArray.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.put("{", (Collection) linkedList2);
      String string0 = JSONObject.valueToString(linkedList3);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.1806740495185957
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1.0);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      Short short0 = new Short((short)3358);
      Short.toUnsignedLong((short)32);
      Short.toUnsignedInt((short)32);
      jSONObject1.put("3KLN(B", (double) (short)3358);
      HashMap<Byte, Long> hashMap1 = new HashMap<Byte, Long>();
      Byte byte0 = new Byte((byte)23);
      Long long0 = new Long((short)3358);
      Long long1 = new Long((short)3358);
      JSONObject jSONObject2 = jSONObject0.accumulate("'", byte0);
      JSONObject jSONObject3 = jSONObject1.putOpt("'", "v@XyrSl8");
      Byte.compare((byte)43, (byte)102);
      Double double1 = new Double((byte)23);
      Double double2 = new Double((short)3358);
      hashMap0.put(double1, double2);
      Byte byte1 = new Byte((byte)43);
      JSONObject.valueToString(byte1, (short)32, 946);
      jSONObject3.optLong("3KLN(B");
      assertEquals(2, jSONObject1.length());
      
      String[] stringArray0 = JSONObject.getNames(jSONObject2);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.353594457343486
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(398.880357582);
      Float float0 = new Float((-888.4F));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      JSONObject jSONObject2 = new JSONObject(float0, stringArray0);
      JSONArray jSONArray2 = jSONObject1.toJSONArray(jSONArray1);
      JSONTokener jSONTokener0 = new JSONTokener("Wya87J7<.|`/X1MC");
      Byte byte0 = new Byte((byte)46);
      JSONObject jSONObject3 = jSONObject1.append(".Syv*=N>t{", "");
      try { 
        jSONObject3.toJSONArray(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9042552998214495
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Float float0 = new Float((-997.0F));
      Float.isFinite((-997.0F));
      Float float1 = new Float(0.0F);
      Float.isFinite((-250.0F));
      Float.sum(0.0F, 0.0F);
      Float.isFinite((-630.5644F));
      Float.isFinite((-630.5644F));
      Float.sum(3495.8003F, 36.7119F);
      Float.min(0.0F, (-919.147F));
      Float.sum(36.7119F, (-663.0009F));
      Float.sum(3495.8003F, (-997.0F));
      Float.isFinite((float) float0);
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      Float float2 = new Float((-250.0F));
      Float.max((-626.289F), (-626.289F));
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)4);
      jSONObject0.put("'", (Object) byte0);
      jSONObject0.getDouble("'");
      String string0 = ">LGlUV7i$";
      try { 
        jSONObject0.getBoolean(">LGlUV7i$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">LGlUV7i$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4459311899497576
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)24);
      linkedList0.add(short0);
      jSONObject0.put("] is not a Boolean.", 1);
      jSONObject0.getDouble("] is not a Boolean.");
      double double0 = jSONObject0.optDouble("] is not a Boolean.", 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5553415252763094
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Double double0 = new Double((-394.3));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.put("", (-394.3));
      jSONObject0.getDouble("");
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4592045174343244
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      StringWriter stringWriter0 = new StringWriter(2188);
      StringWriter stringWriter1 = stringWriter0.append('P');
      stringWriter1.close();
      StringWriter stringWriter2 = stringWriter1.append('%');
      stringWriter2.append((CharSequence) "");
      StringWriter stringWriter3 = new StringWriter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList1.addAll((Collection<? extends String>) linkedList3);
      jSONObject1.put("", 2188);
      int int0 = jSONObject1.getInt("");
      assertEquals(2188, int0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7879181764502974
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.entrySet();
      hashMap0.put("JSONObject[", "JSONObject[");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      hashMap0.put("Ulb", (String) null);
      Boolean boolean0 = Boolean.valueOf("1yqm^;3q|g\"7FK_");
      JSONObject.getNames((Object) boolean0);
      jSONObject0.optDouble("] is not a JSONArray.");
      jSONObject0.optString("W^WPWzUs^");
      String string0 = "tr";
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("tr", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8555683342429987
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Float.isFinite(0.0F);
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      Float.sum(0.0F, 0.0F);
      Float.isFinite((-2720.1978F));
      Float.max(2415.2F, (float) float0);
      Float.max((-1.0F), (-1.0F));
      Float.isFinite(2342.193F);
      Float.isFinite(2415.2F);
      Float.max(1.0F, 1.0F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      Double double0 = new Double(0.0F);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.947780978779843
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("geva7as", false);
      int int0 = (-794);
      JSONObject jSONObject2 = jSONObject0.put("] is not a Boolean.", (-794));
      jSONObject2.optLong("] is not a Boolean.");
      jSONObject2.toString(3, (-794));
      boolean boolean0 = false;
      jSONObject2.put("] is not a Boolean.", false);
      jSONObject0.optInt("geva7as");
      Double double0 = new Double((-794));
      Double.max((-794), 1257.20641763741);
      try { 
        jSONObject1.getJSONArray("geva7as");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"geva7as\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.045445107063333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      int int0 = 2188;
      StringWriter stringWriter0 = new StringWriter(2188);
      stringWriter0.close();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject.valueToString(jSONArray0);
      StringWriter stringWriter1 = stringWriter0.append('%');
      stringWriter1.append((CharSequence) "");
      StringWriter stringWriter2 = new StringWriter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONObject1.accumulate("", linkedList0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        linkedList3.removeFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.670792086347495
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.replace((String) null, (String) null, (String) null);
      hashMap0.put((String) null, (String) null);
      hashMap0.put((String) null, "JSONArray initial value should be a string or collection or array.");
      String string0 = "isspliterator";
      hashMap0.put("isspliterator", "pE=AtROMA~#,i");
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.put((String) null, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0302443119132882
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "geva7as";
      JSONObject jSONObject1 = jSONObject0.put("geva7as", false);
      JSONObject jSONObject2 = jSONObject0.put("] is not a Boolean.", (-794));
      String string1 = jSONObject2.toString(3, 864);
      jSONObject2.put("] is not a Boolean.", false);
      jSONObject0.optInt("geva7as");
      Double double0 = new Double((-794));
      Double.max((-794), 1257.20641763741);
      Float float0 = new Float((double) (-794));
      Byte byte0 = new Byte((byte) (-76));
      JSONObject jSONObject3 = new JSONObject(byte0);
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject4 = new JSONObject(string1);
      jSONObject1.isNull("va");
      jSONObject1.has("Expected '");
      try { 
        jSONObject2.getInt("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.83833056763163
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Double double0 = new Double((-1637.626192602));
      Double.min(898.517431, (-2782.614384632575));
      hashMap0.put((Object) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      Double double1 = new Double((-2782.614384632575));
      Double.isFinite(1.0);
      JSONObject.valueToString(double0, 23, 2446);
      hashMap0.put(jSONObject0, double1);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("\nSA9RbpER_a.Gh", (Map) hashMap0);
      jSONObject1.getString("\nSA9RbpER_a.Gh");
      jSONObject0.optBoolean("\nSA9RbpER_a.Gh");
      jSONObject0.names();
      String string0 = JSONObject.doubleToString((-1637.626192602));
      String string1 = JSONObject.valueToString((Object) null, 330, (-286));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8611092158802522
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "u";
      JSONObject jSONObject1 = jSONObject0.accumulate("u", "u");
      jSONObject1.optBoolean("u", true);
      jSONObject1.optBoolean("u", true);
      Double.isFinite((-394.3026));
      jSONObject1.toString();
      jSONObject1.put("", true);
      jSONObject1.put(",vG;kZ83> H", (double) 13);
      jSONObject0.optBoolean("", true);
      String string1 = "\\u";
      jSONObject0.optString(string1);
      jSONObject1.putOpt("u", (Object) null);
      String string2 = "toU";
      boolean boolean0 = true;
      try { 
        jSONObject0.getJSONObject("u$RxR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"u$RxR\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.0126200936538066
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a Boolean.", (-794));
      jSONObject0.get("] is not a Boolean.");
      jSONObject0.getLong("] is not a Boolean.");
      Double.max((-794), 1257.20641763741);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(4);
      int int0 = 583;
      Integer.toUnsignedLong(4);
      try { 
        jSONObject1.get("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.809836695337393
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("geva7as", false);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.toString(3, 864);
      jSONObject2.put("] is not a Boolean.", false);
      jSONObject0.optInt("geva7as");
      Double double0 = new Double((-794));
      Double.max((-794), 1257.20641763741);
      Float float0 = new Float((double) (-794));
      Byte byte0 = new Byte((byte) (-76));
      JSONObject jSONObject3 = new JSONObject(byte0);
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject4 = new JSONObject("{}");
      jSONObject1.isNull("va");
      jSONObject1.has("Expected '");
      try { 
        jSONObject2.getInt("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.527095896912811
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not :a Boolean.", true);
      JSONObject jSONObject2 = jSONObject1.put("] is not :a Boolean.", 0.0);
      Object object0 = jSONObject0.get("] is not :a Boolean.");
      assertEquals(0.0, object0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject3 = jSONObject2.accumulate("] is not :a Boolean.", jSONArray0);
      jSONObject1.append("gf", jSONArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(72);
      Integer integer1 = Integer.getInteger("] is not :a Boolean.", integer0);
      jSONObject3.put("", (Object) integer1);
      linkedList0.forEach(consumer0);
      JSONArray jSONArray1 = jSONObject1.optJSONArray("] is not :a Boolean.");
      assertNotNull(jSONArray1);
      assertEquals(2, jSONArray1.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.2055325581712015
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (-794));
      jSONObject1.toString(3, 864);
      JSONObject jSONObject2 = jSONObject1.put("] is not a Boolean.", false);
      jSONObject2.put("] is not a Boolean.", 0.0);
      Double double0 = new Double((-794));
      Double.max((-794), 1257.20641763741);
      jSONObject0.toString(4);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      String string0 = "";
      jSONObject2.optDouble("");
      Integer integer0 = new Integer(4);
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject4 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("");
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\": java.lang.Double@0000000005}");
      JSONObject jSONObject5 = new JSONObject(jSONTokener0);
      jSONObject5.keys();
      jSONObject1.optJSONArray("");
      JSONObject jSONObject6 = null;
      try {
        jSONObject6 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 60 of {\"java.lang.String@0000000002\": java.lang.Double@0000000005}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.1021687062542953
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "geva7as";
      JSONObject jSONObject1 = jSONObject0.put("geva7as", false);
      JSONObject jSONObject2 = jSONObject0.put("geva7as", (-794));
      jSONObject2.toString(3, 864);
      JSONObject jSONObject3 = jSONObject2.put("geva7as", false);
      jSONObject0.optInt("geva7as");
      JSONObject jSONObject4 = jSONObject3.put("geva7as", (double) 864);
      Double double0 = new Double((-794));
      Double.max((-794), 1257.20641763741);
      Float float0 = new Float((double) (-794));
      Byte byte0 = new Byte((byte) (-76));
      JSONObject jSONObject5 = new JSONObject(byte0);
      JSONObject jSONObject6 = new JSONObject("{\"java.lang.String@0000000002\": java.lang.Integer@0000000004}");
      jSONObject1.isNull("va");
      jSONObject4.has("Expected '");
      try { 
        jSONObject2.getInt("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6221210326695619
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Double double0 = new Double(3601.7739374);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      Double.max((-5340.04397384), 3601.7739374);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.retainAll(linkedList1);
      linkedList0.sort(comparator0);
      Boolean boolean0 = new Boolean(true);
      JSONObject.getNames((Object) boolean0);
      Double double1 = new Double((-4832.0));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.3199044298479494
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      jSONObject1.getString("");
      StringWriter stringWriter0 = new StringWriter(2188);
      stringWriter0.append('P');
      Float.isFinite(1.0F);
      Float.max(2188, 1.0F);
      Float.sum(0.0F, 1.0F);
      Float.max(0.0F, 0.0F);
      float float0 = new Float((double) 1.0F);
      Object object0 = new Object();
      Double double1 = new Double(1.0);
      assertEquals(1.0, (double)double1, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.3261029578469845
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("", "");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)1463);
      Short.toUnsignedLong((short)1463);
      Short.compare((short)1917, (short)114);
      Short.toUnsignedInt((short)114);
      linkedList0.add(short0);
      linkedList0.add(short0);
      Short short1 = linkedList0.pollLast();
      Integer integer0 = new Integer(10);
      jSONObject0.isNull("[");
      Boolean boolean0 = new Boolean("");
      String string0 = "Z\"*j";
      try { 
        jSONObject0.accumulate((String) null, short1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      BiConsumer<Object, Integer> biConsumer0 = (BiConsumer<Object, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(true, true);
      String string0 = JSONObject.valueToString(boolean0, (-40792328), 244);
      assertNotNull(string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1807382878069084
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = new Float(2708.0F);
      String string0 = ",\n";
      int int0 = 58;
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.4403155898639302
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addFirst("Expected a ',' or ']'");
      linkedList0.removeFirst();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.and(predicate0);
      Predicate<Object> predicate5 = predicate4.negate();
      predicate2.or(predicate1);
      predicate5.or(predicate3);
      linkedList1.removeIf(predicate3);
      linkedList0.retainAll(linkedList1);
      linkedList0.iterator();
      Float float0 = new Float((-2315.8813950594));
      JSONObject jSONObject1 = new JSONObject(linkedList1);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      String string0 = JSONObject.valueToString(jSONObject0, 748, (-120));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.497978952233908
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("u", true);
      jSONObject0.optBoolean("u", true);
      Double.isFinite((-394.3026));
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.append("u", "u");
      jSONObject1.optBoolean("", true);
      String string0 = "\\u";
      jSONObject1.optString(string0);
      jSONObject0.putOpt("u", (Object) null);
      jSONObject0.has("u");
      try { 
        jSONObject0.getInt("ROGyJ0vJ(\"2&;q{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ROGyJ0vJ(\\\"2&;q{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Float float0 = new Float((-997.0F));
      Float.sum(0.0F, 0.0F);
      Float.max((-1.0F), (-1.0F));
      Float.sum((-997.0F), (-997.0F));
      Float.isFinite(150.3432F);
      Float.min(0.0F, (-997.0F));
      String string0 = JSONObject.quote("S/");
      assertEquals("\"S/\"", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.0446855721430905
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "KwRwNt@";
      stringArray0[1] = "wheel.json.JSONObject";
      stringArray0[2] = "KaxDavdw)7#cW";
      stringArray0[3] = "Expected a ',' or '}'";
      jSONArray0.put((-316.349));
      stringArray0[4] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONObject");
      jSONObject0.accumulate("Expected a ',' or '}'", jSONArray0);
      Long long0 = Long.valueOf(582L);
      assertEquals(582L, (long)long0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.3478801716292006
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(398.880357582);
      Float float0 = new Float((-394.3026));
      Float.min((-888.4F), 132.0F);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      JSONObject jSONObject2 = new JSONObject(float0, stringArray0);
      JSONArray jSONArray2 = jSONObject1.toJSONArray(jSONArray1);
      jSONArray2.join(" at character ");
      JSONTokener jSONTokener0 = new JSONTokener(" at character ");
      int int0 = 23;
      try { 
        jSONArray2.getJSONArray(23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[23] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.506415304115426
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Double double0 = new Double(1881.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      BiFunction<Double, Object, Double> biFunction0 = (BiFunction<Double, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('I');
      StringWriter stringWriter2 = stringWriter1.append('l');
      stringWriter2.close();
      Double double1 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      JSONObject jSONObject1 = jSONObject0.put("\r", (Object) stringWriter2);
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      stringWriter0.write(charArray0);
      stringWriter2.append('I');
      stringWriter1.close();
      StringWriter stringWriter3 = new StringWriter(3619);
      stringWriter1.write(charArray0);
      StringWriter stringWriter4 = new StringWriter(1387);
      jSONObject1.write(stringWriter4);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.optJSONObject("TWhKiJOZ*3]+Iu<dzJ9");
      jSONObject0.put("0", 0.0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.3719198209004677
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string2 = "?^*r+6=ex8'm";
      String string3 = "W6.QH{sX.$";
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7383076693992492
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<JSONArray, Object> hashMap1 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap1);
      assertEquals(2, jSONObject0.length());
      
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      String string0 = JSONObject.valueToString(jSONArray0, (-2394), (-630));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      Short short0 = new Short((short)2988);
      Double double0 = new Double(2240.81111334);
      hashMap0.put(short0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("istoString", false);
      jSONObject1.optJSONObject("wheel.json.JSONObject");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.500927952540415
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("istoString", true);
      double double1 = new Float((-394.3026));
      jSONObject1.optBoolean("Bl`?^PYAz");
      Double double2 = new Double(3019.119019399);
      jSONObject1.putOpt("istoString", double2);
      jSONObject0.accumulate("", "");
      Boolean boolean0 = new Boolean("");
      StringWriter stringWriter0 = new StringWriter(2188);
      StringWriter stringWriter1 = stringWriter0.append('P');
      stringWriter1.append((CharSequence) "");
      StringWriter stringWriter2 = new StringWriter();
      Short.toUnsignedLong((short) (-1156));
      Short.toUnsignedLong((short)0);
      Short.toUnsignedInt((short)4061);
      Short short0 = new Short((short)0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject1.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.8423943585863412
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "istoString";
      jSONObject0.put("istoString", true);
      double double1 = 3019.119019399;
      try { 
        jSONObject0.getDouble("istoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoString\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long.getLong("Aa%");
      JSONObject jSONObject1 = jSONObject0.accumulate("_", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.983146854663437
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "getlistIterator";
      Long.remainderUnsigned(1560L, 217L);
      Long long0 = new Long(1560L);
      Long long1 = new Long(217L);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.accumulate("getlistIterator", (Object) null);
      String string0 = "istoString";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("istoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of istoString
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.0115537715672924
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Short short0 = new Short((short)3358);
      Short.toUnsignedLong((short) (-3225));
      Short.toUnsignedLong((short)3358);
      Short.toUnsignedInt((short) (-1429));
      HashMap<Byte, Long> hashMap1 = new HashMap<Byte, Long>();
      hashMap1.entrySet();
      String string0 = null;
      Byte byte0 = new Byte((byte)25);
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((short) (-3225));
      hashMap1.put(byte0, long0);
      jSONObject0.accumulate("] not found.", hashMap1);
      try { 
        jSONObject0.getBoolean("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double double0 = new Double((-413.03204441737495));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float float0 = new Float((-1.0F));
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.7099284913365564
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.entrySet();
      hashMap0.put("JSONObject[", "JSONObject[");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("] is not a number.", "W^WPWzUs^");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<JSONArray, Object> hashMap1 = new HashMap<JSONArray, Object>();
      Double double0 = new Double((-595.5));
      JSONObject jSONObject1 = new JSONObject(double0);
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.putOpt((String) null, object0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1650626510437467
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("u", true);
      jSONObject0.optBoolean("u", true);
      Double.isFinite((-394.3026));
      jSONObject0.toString();
      jSONObject0.optBoolean("", true);
      String string0 = "\\u";
      jSONObject0.optString(string0);
      jSONObject0.putOpt("u", (Object) null);
      jSONObject0.has("u");
      try { 
        jSONObject0.getInt("ROGyJ0vJ(\"2&;q{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ROGyJ0vJ(\\\"2&;q{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.3501664738274863
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double((-1518.5777254478));
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double double1 = new Double((-1518.5777254478));
      Double double2 = new Double(630.61);
      BiConsumer<Object, Double> biConsumer0 = (BiConsumer<Object, Double>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      BiFunction<Double, Double, Double> biFunction1 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(double2, biFunction1);
      jSONObject0.names();
      Short.toUnsignedLong((short) (-1308));
      Short.toUnsignedLong((short) (-2876));
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      HashMap<Byte, Long> hashMap1 = new HashMap<Byte, Long>();
      hashMap1.keySet();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a JSONArray.";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.576589397593953
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      StringWriter stringWriter0 = new StringWriter(2188);
      StringWriter stringWriter1 = stringWriter0.append('P');
      stringWriter1.append((CharSequence) "");
      StringWriter stringWriter2 = new StringWriter();
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[19];
      stringArray0[0] = "F+";
      stringArray0[1] = "";
      stringArray0[2] = "";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.toString(2188, 2188);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject1.optString("", "F+");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.9051439184682946
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not :a Boolean.", true);
      JSONObject jSONObject2 = jSONObject1.put("] is not :a Boolean.", 0.0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject3 = jSONObject2.accumulate("] is not :a Boolean.", jSONArray0);
      JSONObject jSONObject4 = jSONObject1.append("gf", jSONArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      jSONObject1.optJSONArray("");
      jSONObject0.optJSONArray("<mDNOnjezcW>iT ");
      jSONObject3.toJSONArray(jSONArray0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("getaddFirst");
      jSONObject4.getJSONArray("] is not :a Boolean.");
      jSONObject2.optString("gf");
      JSONObject jSONObject5 = jSONObject2.put("-22.04426178115.", (Object) "] is not :a Boolean.");
      assertSame(jSONObject2, jSONObject5);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.7980021635821197
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double((-394.3));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-301));
      linkedList0.iterator();
      linkedList0.offer(short0);
      short short1 = (short)1917;
      Short short2 = new Short((short)1917);
      Short.compare((short)101, (short)1917);
      Short.toUnsignedInt((short)1917);
      linkedList0.add(short2);
      linkedList0.pollLast();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.isNull("");
      Boolean boolean0 = new Boolean("");
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.5218890888688006
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not :a Boolean.", true);
      jSONObject1.put("] is not :a Boolean.", 0.0);
      jSONObject0.get("] is not :a Boolean.");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Short.toUnsignedInt((short)160);
      jSONObject1.put("", 0.0);
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      jSONObject0.accumulate("PEtH+gbq>8@E", "] is not :a Boolean.");
      String string0 = null;
      jSONObject0.getLong("] is not :a Boolean.");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      try { 
        jSONObject1.put((String) null, (int) (short)160);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      Float float0 = new Float((-888.4F));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONTokener jSONTokener0 = new JSONTokener("");
      Byte byte0 = new Byte((byte)107);
      Byte byte1 = new Byte((byte)107);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("a@]mG4HZGy", (Collection) linkedList0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.3551579693792895
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.418658483769117
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("", "");
      StringWriter stringWriter0 = new StringWriter(2188);
      jSONObject0.accumulate("", "");
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.append(':');
      stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = new StringWriter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "F+";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.6220322287852307
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "KwRwNt@";
      stringArray0[1] = "KwRwNt@";
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      hashMap0.put(jSONArray1, jSONArray1);
      JSONTokener jSONTokener0 = new JSONTokener("KwRwNt@");
      String string0 = "kM`HE1z]QT\")";
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      jSONObject0.names();
      jSONObject0.optDouble("/$|w}jN");
      jSONObject0.optJSONObject("/$|w}jN");
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float float0 = new Float((-997.0F));
      Float.isFinite((-997.0F));
      Float float1 = new Float((-997.0F));
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      Float.max(3157.4F, (-1.0F));
      Float.max((-250.0F), (-997.0F));
      Float.min(1.0F, 135.13739F);
      Float.max((-250.0F), 0.0F);
      Float.max((-250.0F), 0.0F);
      Float.sum(0.0F, 0.0F);
      Float.isFinite((-2209.0F));
      Float.min((-1080.5502F), (-1384.0F));
      String string0 = JSONObject.quote("/qvP]6pJWI5b#");
      assertEquals("\"/qvP]6pJWI5b#\"", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.7152607734658951
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.max((-3344.7F), 1.0F);
      Float.isFinite((-545.9585F));
      linkedList0.addFirst("d4?");
      linkedList0.removeFirst();
      Float.max(1.0F, 1.0F);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.iterator();
      linkedList1.add("f{KK2_U.2L&B`y42W\"");
      linkedList1.stream();
      Float.max(204.722F, 0.0F);
      Float float0 = new Float((double) 204.722F);
      Float.max(1.0F, 1886.1F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.3329680297486974
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Double double0 = new Double((-394.3));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("]cZ?Je%]p1];Cx]*$J", (-1296L));
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      short short0 = (short)1917;
      Short short1 = new Short((short)1917);
      Short.compare((short)101, (short)1917);
      Short.compare((short)1917, (short)20);
      Short.toUnsignedInt((short)1917);
      linkedList0.add(short1);
      linkedList0.pollLast();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Integer integer0 = new Integer((short)1917);
      jSONObject0.isNull("");
      Boolean boolean0 = new Boolean("");
      try { 
        jSONObject1.getInt("qu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"qu\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Float float0 = new Float((-997.0F));
      Float.isFinite((-997.0F));
      Float float1 = new Float(0.0F);
      Float.max((-250.0F), (-997.0F));
      Float.max((-3686.876F), (-3061.0F));
      Float.max((-3061.0F), 0.0F);
      Float.isFinite((-250.0F));
      Float.isFinite(0.0F);
      Float.max((-250.0F), (float) float1);
      Float.max((-1.0F), (-1.0F));
      Float.sum((-250.0F), 0.0F);
      Float.max((-1185.9F), (-250.0F));
      Float.max((-250.0F), (-997.0F));
      Float.max((-1.0F), (-250.0F));
      Float.sum((-1892.0F), 0.0F);
      Boolean boolean0 = new Boolean(true);
      Float.min(0.30556586F, (-1834.5127F));
      String string0 = JSONObject.quote("\r");
      assertEquals("\"\\r\"", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float float0 = new Float((-997.0F));
      Float.max((-250.0F), (-250.0F));
      Float float1 = new Float((-250.0F));
      Float.isFinite((float) float1);
      Float.isFinite(0.0F);
      Float.max((-250.0F), (float) float0);
      Float.max((-1.0F), (-1.0F));
      Float float2 = new Float((-997.0F));
      Float.max((-1.4813614F), (-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(16);
      Integer.getInteger("getfloatTRawIntBits");
      Float.sum((-434.5542F), (-250.0F));
      Float.isFinite((-250.0F));
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.5986983972989752
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-111));
      JSONObject jSONObject0 = new JSONObject(byte0);
      String string0 = "?kEsf'";
      jSONObject0.optBoolean("?kEsf'");
      jSONObject0.optBoolean(",AbgP))", true);
      Byte byte1 = new Byte((byte)72);
      Byte.toUnsignedLong((byte) (-111));
      jSONObject0.accumulate(",AbgP))", byte1);
      jSONObject0.optString((String) null, (String) null);
      jSONObject0.optDouble((String) null, 0.0);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("MmLlR", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("MmLlR", (Map) hashMap0);
      long long0 = (-699L);
      try { 
        jSONObject2.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float((-999.35345F));
      Float.isFinite((-999.35345F));
      Float float1 = new Float((-999.35345F));
      Float.isFinite(0.0F);
      Boolean boolean0 = new Boolean(true);
      Float float2 = new Float((-373.4943F));
      Float float3 = new Float(0.0F);
      Integer integer0 = new Integer((-916));
      Integer.compare(45, 1653);
      Integer.toUnsignedLong(22);
      Integer.getInteger((String) null);
      Integer.compare(11, (-1309));
      Integer integer1 = new Integer(26);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.5453929420108388
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Short short0 = new Short((short)672);
      Float float0 = new Float(1.0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONTokener jSONTokener0 = new JSONTokener("<}XBMvMiPeU+B");
      Byte byte0 = new Byte((byte)44);
      JSONObject jSONObject1 = jSONObject0.append("<}XBMvMiPeU+B", byte0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.length();
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[8];
      stringArray0[7] = "U4r8O~pe/RR>GO6AMc";
      stringArray0[1] = "istoSt<ing";
      stringArray0[2] = "U4r8O~pe/RR>GO6AMc";
      stringArray0[3] = "w+8JSyl";
      stringArray0[4] = "U4r8O~pe/RR>GO6AMc";
      stringArray0[5] = "java.lang.Float@00000000010";
      stringArray0[6] = "U4r8O~pe/RR>GO6AMc";
      stringArray0[7] = "U4r8O~pe/RR>GO6AMc";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Object object1 = jSONObject0.remove(")R#7Rm'FKx <^W3");
      assertNull(object1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.3329680297486974
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      short short0 = (short)1917;
      Short short1 = new Short((short)1917);
      jSONObject0.optDouble("", 0.0);
      Short.compare((short)101, (short)1917);
      Short.toUnsignedInt((short)1917);
      linkedList0.add(short1);
      linkedList0.pollLast();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = "}T5zb";
      jSONObject1.optDouble("}T5zb");
      jSONObject0.isNull("");
      Boolean boolean0 = new Boolean("");
      try { 
        jSONObject1.getString("}T5zb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}T5zb\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.9658372138213545
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.max((-3344.7F), 1.0F);
      Float.isFinite((-545.9585F));
      linkedList0.addFirst("d4?");
      linkedList0.removeFirst();
      Float.max(1.0F, 1.0F);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.iterator();
      linkedList1.add("f{KK2_U.2L&B`y42W\"");
      linkedList1.stream();
      Float.max(204.722F, 0.0F);
      Float float0 = new Float((double) 204.722F);
      Float.max(1.0F, 1886.1F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.getNames(jSONObject0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.613129842728147
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float(393.02F);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "getlistIterator";
      stringArray0[1] = "isaddLast";
      stringArray0[2] = "isaddLast";
      String string0 = "wheel.json.JSONObject";
      Float.max(0.0F, 393.02F);
      stringArray0[3] = "wheel.json.JSONObject";
      stringArray0[4] = "v20kP@bf";
      stringArray0[5] = "Z~jq]N]2H_K!l[";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.length();
      try { 
        jSONObject0.getJSONObject("D*Oy=_WX;=mSCc4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"D*Oy=_WX;=mSCc4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.197818483896144
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Double double0 = new Double((-394.3));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)1917);
      Short.compare((short)101, (short)1917);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONObject jSONObject2 = jSONObject1.put("", (Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject3 = jSONObject2.accumulate("", jSONArray0);
      JSONObject jSONObject4 = jSONObject3.append("", jSONObject1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList2.addAll((Collection<? extends String>) linkedList3);
      Long long0 = new Long((short)1917);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      jSONObject3.optLong("\"!Ve()~ ||I))`qY3b}", (long) (short)1917);
      LinkedList<String> linkedList5 = new LinkedList<String>();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList3.addAll((Collection<? extends String>) linkedList6);
      LinkedList<String> linkedList8 = new LinkedList<String>();
      LinkedList<String> linkedList9 = new LinkedList<String>();
      linkedList7.add((String) null);
      String string0 = "vwe(\\'{WK=l~F[2(-I";
      try { 
        jSONObject4.getJSONArray("vwe('{WK=l~F[2(-I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vwe('{WK=l~F[2(-I\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean("Missing value");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.058590981074228
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Float float0 = new Float((double) (-1715));
      Float.sum((-1715), (-1715));
      JSONObject jSONObject0 = new JSONObject((Object) "\"`f~uBsqmCMa[4");
      long long0 = jSONObject0.optLong(")Kpv/p");
      assertEquals(3, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.041432646277109
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("", "");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)1463);
      Short.compare((short)1917, (short)114);
      Short.toUnsignedInt((short)114);
      linkedList0.add(short0);
      linkedList0.pollLast();
      Integer integer0 = new Integer(10);
      jSONObject0.isNull("[");
      Boolean boolean0 = new Boolean("");
      try { 
        jSONObject0.getInt("Z\"*j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z\\\"*j\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.471346413410988
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Double double0 = new Double((-393.9443357913682));
      Long long0 = new Long((-614L));
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      Byte byte0 = new Byte((byte)36);
      Long long1 = new Long((-614L));
      hashMap0.replace(byte0, long1, long0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.add("getlongValue");
      linkedList0.containsAll(linkedList1);
      linkedList1.add("{");
      Long long2 = new Long((byte)36);
      Byte byte1 = new Byte((byte) (-63));
      hashMap0.put(byte1, long2);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.addAll((Collection<? extends String>) linkedList2);
      Long long3 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.keySet();
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "{";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("] is not a Boolean.", 3023L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(true);
      Double double0 = new Double(0.0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      try { 
        jSONObject0.getJSONObject("]y6v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]y6v\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.7099284913365564
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "KwRwNt@";
      stringArray0[1] = "Hvqm_RY |ie2Vi";
      stringArray0[2] = "KaxDavdw)7#cW";
      stringArray0[3] = "Expected a ',' or '}'";
      Float float0 = new Float(317.9280417339);
      boolean boolean0 = new Boolean("KaxDavdw)7#cW");
      JSONObject jSONObject0 = new JSONObject(float0);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      double double0 = jSONObject0.optDouble((String) null, 317.9280417339);
      assertEquals(3, jSONObject0.length());
      assertEquals(317.9280417339, double0, 0.01);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.5952629603288848
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.max((-3344.7F), 1.0F);
      Float.isFinite((-545.9585F));
      Float.isFinite((-545.9585F));
      Float.max(1.0F, 1.0F);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("f{KK2_U.2L&B`y42W\"");
      linkedList1.stream();
      Float.max(204.722F, 0.0F);
      Float float0 = new Float((double) 204.722F);
      Float.max(1.0F, 1886.1F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      jSONObject0.keys();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.1432136814444385
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("", "");
      Double double1 = new Double(3304.3046602779);
      jSONObject0.put("", (Object) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('!');
      char[] charArray0 = new char[0];
      stringWriter1.write(charArray0);
      stringWriter0.close();
      int int0 = (-6254807);
      StringWriter stringWriter2 = null;
      try {
        stringWriter2 = new StringWriter((-6254807));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.9383400296394173
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("%E", (-394.3026));
      jSONObject0.optBoolean("%E", true);
      JSONObject.valueToString("V#4\"ZS", 2310, 92);
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.getLong("$p-V'B!yloimO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$p-V'B!yloimO\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.5923843999839837
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("geva7as", false);
      JSONObject jSONObject2 = jSONObject0.put("] is not a Boolean.", (-794));
      jSONObject2.put("] is not a Boolean.", false);
      jSONObject0.optInt("geva7as");
      Double double0 = new Double((-794));
      Double.max((-794), 1257.20641763741);
      Float float0 = new Float((double) (-794));
      Byte byte0 = new Byte((byte) (-76));
      JSONObject jSONObject3 = new JSONObject(byte0);
      jSONObject2.get("geva7as");
      Boolean boolean0 = new Boolean(false);
      jSONObject1.isNull("va");
      jSONObject1.has("Expected '");
      try { 
        jSONObject2.getInt("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.7099284913365564
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.max((-3344.7F), 1.0F);
      Float.isFinite((-545.9585F));
      linkedList0.addFirst("Expected a ',' or ']'");
      linkedList0.removeFirst();
      Float.max(1.0F, 1.0F);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.iterator();
      linkedList1.add("f{KK2_U.2L&B`y42W\"");
      linkedList1.stream();
      LinkedList<Boolean> linkedList2 = new LinkedList<Boolean>();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) "f{KK2_U.2L&B`y42W\"");
      jSONObject0.opt("g]K~,_]3+&o");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      LinkedList<String> linkedList7 = new LinkedList<String>();
      LinkedList<String> linkedList8 = new LinkedList<String>();
      LinkedList<String> linkedList9 = new LinkedList<String>();
      LinkedList<String> linkedList10 = new LinkedList<String>();
      boolean boolean0 = linkedList10.addAll((Collection<? extends String>) linkedList5);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float float0 = new Float(393.02F);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "getlistIterator";
      stringArray0[1] = "isaddLast";
      stringArray0[3] = "wheel.json.JSONObject";
      stringArray0[5] = "Z~jq]N]2H_K!l[";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.getDouble("^bKPk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^bKPk\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.7810757935445594
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Float float0 = new Float(393.02F);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "getlistIterator";
      stringArray0[1] = "isaddLast";
      stringArray0[2] = "R8A_`6/*J";
      stringArray0[3] = "wheel.json.JSONObject";
      stringArray0[4] = "v20kP@bf";
      stringArray0[5] = "Z~jq]N]2H_K!l[";
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray1 = new String[2];
      stringArray1[0] = "va";
      stringArray1[1] = "isaddLast";
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray1);
      JSONObject.valueToString(jSONObject0);
      try { 
        jSONObject0.getJSONArray("isaddLast");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isaddLast\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.9416960651588844
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.isFinite((-545.9585F));
      linkedList0.addFirst("d4?");
      String string0 = linkedList0.removeFirst();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.clear();
      linkedList0.retainAll(linkedList1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.iterator();
      linkedList2.add("f{KK2_U.2L&B`y42W\"");
      linkedList2.stream();
      Float.max(204.722F, 0.0F);
      Float float0 = new Float((double) 204.722F);
      Float.max(1.0F, 204.722F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      String string1 = JSONObject.valueToString(linkedList2);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.046130006931039
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Double double0 = new Double((-413.03204441737495));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("~dJfTF16");
      linkedList0.add("ad");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      int int0 = jSONObject0.optInt("~dJfTF16", 11);
      assertEquals(4, jSONObject0.length());
      assertEquals(11, int0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.324619696311217
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("add", "add");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((-394.3026));
      Short short0 = new Short((short)2352);
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "Expected a ',' or '}'";
      stringArray0[2] = "Expected a ',' or '}'";
      JSONObject jSONObject2 = new JSONObject(float0, stringArray0);
      jSONObject1.toJSONArray((JSONArray) null);
      JSONTokener jSONTokener0 = new JSONTokener("] is not a JSONObject.");
      Byte byte0 = new Byte((byte) (-17));
      jSONObject1.append("j5!isP", jSONTokener0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("Expected a ',' or '}'"));
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.7411693695266814
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not :a Boolean.", true);
      JSONObject jSONObject2 = jSONObject1.put("] is not :a Boolean.", 0.0);
      assertEquals(1, jSONObject0.length());
      
      jSONObject0.get("] is not :a Boolean.");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject3 = jSONObject2.accumulate("] is not :a Boolean.", jSONArray0);
      JSONObject jSONObject4 = jSONObject1.append("gf", jSONArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      jSONObject1.optJSONArray("");
      jSONObject0.optJSONArray("<mDNOnjezcW>iT ");
      jSONObject3.toJSONArray(jSONArray0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("getaddFirst");
      JSONArray jSONArray1 = jSONObject4.getJSONArray("] is not :a Boolean.");
      assertEquals(2, jSONArray1.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Float float0 = new Float((double) (-1715));
      Float.sum((-1715), (-1715));
      String string0 = JSONObject.quote("\"`f~uBsqmCMa[4");
      assertEquals("\"\\\"`f~uBsqmCMa[4\"", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      HashMap<String, Long> hashMap1 = new HashMap<String, Long>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string0 = jSONObject0.toString(130, 48);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("x|pb@Cr@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"x|pb@Cr@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 0, 0);
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      Integer.divideUnsigned(59, 62);
      Integer.compareUnsigned((-124), (-124));
      Integer.compare(0, (-124));
      Integer.toUnsignedLong(9);
      Integer integer0 = new Integer(1);
      Integer integer1 = Integer.getInteger("j&RdF%'", integer0);
      Integer.getInteger("Bu!*{Bf\"$cbSk");
      Integer.compare(1526, (-1788));
      Integer integer2 = new Integer(1526);
      Integer.getInteger("Bu!*{Bf\"$cbSk", integer2);
      Integer integer3 = new Integer(0);
      JSONObject.getNames((Object) integer1);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap1.size());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.148815922340797
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("geva7as", false);
      String string0 = "";
      jSONObject1.accumulate("geva7as", "] is not a Boolean.");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)74);
      Short.compare((short)70, (short) (-2689));
      String string1 = null;
      Double double0 = new Double((short)1917);
      try { 
        jSONObject1.put((String) null, (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.6552045970807578
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.isFinite((-544.6F));
      linkedList0.addFirst("d4?");
      linkedList0.removeFirst();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      predicate1.or(predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      predicate3.negate();
      predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      Predicate<Object> predicate5 = predicate4.negate();
      linkedList1.removeIf(predicate5);
      linkedList0.retainAll(linkedList1);
      linkedList0.add("d4?");
      linkedList0.iterator();
      linkedList0.add("f{KK2_U.2L&B`y42W\"");
      linkedList0.stream();
      Float.max(209.01974F, 0.0F);
      Float float0 = new Float((double) 209.01974F);
      Float.max(1.0F, 209.01974F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("f{KK2_U.2L&B`y42W\"", (Object) null);
      assertEquals(4, jSONObject1.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.1597593517489875
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not :a Boolean.", true);
      JSONObject jSONObject2 = jSONObject1.put("] is not :a Boolean.", 0.0);
      jSONObject0.get("] is not :a Boolean.");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject2.accumulate("] is not :a Boolean.", jSONArray0);
      jSONObject1.append("gf", jSONArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(12);
      jSONObject1.append("isforEach", integer0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList2.addAll((Collection<? extends String>) linkedList1);
      Long long0 = new Long((-1L));
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      LinkedList<String> linkedList7 = new LinkedList<String>();
      linkedList5.addAll((Collection<? extends String>) linkedList3);
      LinkedList<String> linkedList8 = new LinkedList<String>();
      LinkedList<String> linkedList9 = new LinkedList<String>();
      linkedList9.add("='[oB");
      try { 
        jSONObject1.getJSONArray(";v<amTI/\"6y?{*?9Pi7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";v<amTI/\\\"6y?{*?9Pi7\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.111940764054574
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Float float0 = new Float((-997.0F));
      Float float1 = new Float(0.0F);
      Float.max(2415.2F, (float) float1);
      Float.max((-1.0F), (-1.0F));
      Float.sum((-997.0F), (-1.0F));
      Float.max(0.0F, (-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.optInt("false");
      assertEquals(3, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = Double.valueOf((-394.3026));
      JSONObject.testValidity(double0);
      boolean boolean0 = Double.isFinite((-394.3026));
      assertTrue(boolean0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.5174714039166524
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      Double double0 = new Double(0.0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.addLast("P");
      linkedList2.addAll((Collection<? extends String>) linkedList1);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Byte byte0 = new Byte((byte) (-26));
      JSONObject.valueToString(byte0);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList5.addAll((Collection<? extends String>) linkedList1);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      boolean boolean1 = linkedList6.add("] is not a Boolean.");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.0618891620997144
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      Float.max(0.0F, (-1401.596F));
      Float.sum((-2543.2847F), (-1.0F));
      Float.max(0.0F, 2868.801F);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(2, jSONObject0.length());
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      String string0 = JSONObject.valueToString(hashMap1);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.1778153663960604
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Double double0 = new Double((-413.03204441737495));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.max(1.0F, 1.0F);
      Float.isFinite((-1634.171F));
      Float.isFinite(605.30756F);
      Float.max(0.0F, (-1986.4578F));
      linkedList0.stream();
      Float.max(1.0F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      Float.max(1886.1F, (-577.615F));
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.869143275016842
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.replace((String) null, (String) null, (String) null);
      hashMap0.put((String) null, (String) null);
      hashMap0.put((String) null, "JSONArray initial value should be a string or collection or array.");
      hashMap0.put("isspliterator", "pE=AtROMA~#,i");
      hashMap0.entrySet();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      hashMap0.put("", "J8j7pas~SdgX$BR");
      hashMap0.put("JSONO.bjec[", "JSONO.bjec[");
      Double double0 = new Double(3113.748565661);
      JSONObject.valueToString(hashMap0);
      // Undeclared exception!
      JSONObject.valueToString(set0, 635, 2147483645);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      jSONObject0.put("TWhKiJOZ*3]+Iu<dzJ9", 723);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.6100777751436999
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.isFinite((-544.6F));
      linkedList0.addFirst("d4?");
      linkedList0.removeFirst();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) double0);
      predicate0.negate();
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      predicate0.and(predicate1);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      linkedList1.removeIf(predicate4);
      linkedList0.retainAll(linkedList1);
      linkedList0.add("d4?");
      linkedList0.iterator();
      linkedList0.add("f{KK2_U.2L&B`y42W\"");
      linkedList0.stream();
      Float.max(204.722F, 0.0F);
      Float float0 = new Float((double) 204.722F);
      Float.max(1.0F, 204.722F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("] is not a JSONObject.", false);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.193877669746141
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("add", "add");
      StringWriter stringWriter0 = new StringWriter(2188);
      StringWriter stringWriter1 = stringWriter0.append('P');
      stringWriter1.close();
      Boolean boolean0 = Boolean.valueOf(true);
      try { 
        jSONObject1.append("add", boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[add] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Double double0 = new Double(3113.748565661);
      String string0 = JSONObject.doubleToString(3113.748565661);
      assertEquals("3113.748565661", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "5$o^>wIQ:v*:#QTSf?P";
      stringArray0[1] = "i/rRb~fZZA)2s";
      stringArray0[2] = "getdoubleToLongBits";
      stringArray0[3] = "";
      stringArray0[4] = "6$3~";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Float.isFinite((-1179.92F));
      Boolean boolean0 = new Boolean(true);
      Float float0 = new Float(0.0F);
      Float float1 = new Float((-471.5F));
      Integer integer0 = new Integer(124);
      Integer.compareUnsigned((-2408), (-1681));
      Integer.max(96, 96);
      Integer.min(92, 10);
      Integer integer1 = new Integer((-916));
      Integer.compareUnsigned(9, 96);
      Integer.toUnsignedString(97);
      Integer.compare(9, 11);
      Integer.toUnsignedLong(96);
      Integer.getInteger("y4Qe%]{BZeN5BM", integer0);
      Integer.getInteger("y4Qe%]{BZeN5BM");
      Integer.compare((-2408), (-2408));
      Integer integer2 = new Integer(3);
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(integer0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.0325330653044436
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "KwRwNt@";
      stringArray0[1] = "V#4\"ZS";
      stringArray0[2] = "KaxDavdw)7#cW";
      stringArray0[3] = "Expected a ',' or '}'";
      Float float0 = new Float(317.9280417339);
      Float.isFinite(1886.1982F);
      JSONObject jSONObject0 = new JSONObject(float0);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.optLong("KaxDavdw)7#cW", 0L);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.3141455801481003
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Float float0 = new Float((-997.0F));
      Float float1 = new Float((-997.0F));
      Float.isFinite((-997.0F));
      Float.max(3157.4F, 1.0F);
      Float.max((-250.0F), (-997.0F));
      Float.max((-250.0F), 0.0F);
      Float.max((-250.0F), 0.0F);
      Float.isFinite(0.0F);
      Float.max((-250.0F), 0.0F);
      Float.isFinite((-250.0F));
      Float.isFinite((-0.7560057F));
      Float.max((-250.0F), (float) float1);
      Float.max((-1.0F), (-1.0F));
      Float float2 = new Float(0.0F);
      Float.max((-997.0F), (-1.0F));
      Float.max((-1.0F), 0.0F);
      Float.max(200.65F, 0.0F);
      Float.max(1565.7991F, 0.0F);
      Float float3 = new Float(0.0F);
      Double double0 = new Double(0.0);
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Float.isFinite((-1179.92F));
      Boolean boolean0 = new Boolean(true);
      Float float0 = new Float(0.0F);
      Float float1 = new Float((-471.5F));
      Integer integer0 = new Integer(124);
      Integer.compareUnsigned((-2408), (-1681));
      Integer.max(96, 96);
      Integer.min(92, 10);
      Integer integer1 = new Integer((-916));
      Integer.compareUnsigned(9, 96);
      Integer.toUnsignedString(97);
      Integer.compare(9, 11);
      Integer.toUnsignedLong(96);
      Integer.getInteger("y4Qe%]{BZeN5BM", integer0);
      Integer.getInteger("y4Qe%]{BZeN5BM");
      Integer.compare((-2408), (-2408));
      Integer integer2 = new Integer(3);
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Float float0 = new Float((-997.0F));
      Float.sum(0.0F, 0.0F);
      Float.max(0.0F, 0.0F);
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      Byte byte0 = new Byte((byte)62);
      Long long0 = new Long((byte)25);
      hashMap0.replace(byte0, long0, long0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList2.forEach(consumer0);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList3.forEach(consumer1);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList0.addAll((Collection<? extends String>) linkedList3);
      Long long1 = new Long((byte)62);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("u,", false);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("getcompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getcompare\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.0116585526031
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.addAll((Collection<? extends String>) linkedList1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("KwRwNt@");
      Long long0 = new Long(188);
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@0kI";
      stringArray0[1] = "KwRwNt@";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("KwRwNt@", object0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.clear();
      Float float0 = new Float((-3678.4333F));
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "isremove";
      stringArray0[2] = "~dJfTF16";
      stringArray0[3] = "~dJfTF16";
      stringArray0[4] = "~dJfTF16";
      stringArray0[5] = "~dJfTF16";
      stringArray0[6] = null;
      stringArray0[7] = null;
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      try { 
        jSONObject0.append(stringArray0[7], "-=KCP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
      
      Float float0 = new Float(372.39F);
      Float.isFinite(0.0F);
      Float.max(0.0F, 0.0F);
      Float.max(0.0F, (-742.0911F));
      Float.max((-742.0911F), 0.0F);
      Float.sum(372.39F, 1517.3445F);
      Float.max(0.0F, (-1410.5297F));
      Float.sum(0.0F, 0.0F);
      Float.isFinite(0.0F);
      Float.min((-1014.6796F), 0.0F);
      String string1 = JSONObject.quote("\"\"");
      assertEquals("\"\\\"\\\"\"", string1);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Double double0 = new Double((-413.03204441737495));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, 188, 188);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Float float0 = new Float((-997.0F));
      Float float1 = new Float(0.0F);
      Float.max(2415.2F, (float) float1);
      Float.max((-1.0F), (-1.0F));
      Float.sum((-997.0F), (-1.0F));
      Float.max(0.0F, (-1.0F));
      Float.sum((-1.0F), (-1.0F));
      Float.isFinite((-997.0F));
      String string0 = JSONObject.valueToString(float1, 44, 10);
      assertNotNull(string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.7236380869841463
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("7`|LJn", "9;pk=$jZEQ^v@!?");
      hashMap0.replace((String) null, (String) null, (String) null);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      String string0 = JSONObject.valueToString(hashMap0, 140, 91);
      assertNotNull(string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.2739580694777835
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.max((-3344.7F), 1.0F);
      Float.isFinite((-545.9585F));
      linkedList0.addFirst("d4?");
      linkedList0.removeFirst();
      Float.max(1.0F, 1.0F);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.iterator();
      linkedList1.add("f{KK2_U.2L&B`y42W\"");
      linkedList1.stream();
      Float.max(204.722F, 0.0F);
      Float float0 = new Float((double) 204.722F);
      Float.max(1.0F, 1886.1F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      jSONObject0.toString(48, 1991);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-602));
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Long long0 = new Long((-602));
      assertEquals((-602L), (long)long0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Float float0 = new Float((-997.0F));
      Float.isFinite((-997.0F));
      Float float1 = new Float(0.0F);
      Float float2 = new Float((-997.0F));
      Float.isFinite(0.0F);
      Float.sum(2356.0F, (-997.0F));
      Float.isFinite(2356.0F);
      Float.isFinite((-250.0F));
      Float.isFinite(0.0F);
      Float.sum(1.0F, 2865.747F);
      Float.sum(3480.4485F, (-997.0F));
      Float.isFinite((float) float2);
      Float.min((-997.0F), 2865.747F);
      Float.sum(1.0F, 2356.0F);
      Float.max((-250.0F), 0.0F);
      Float.sum(2865.747F, 1.0F);
      Float.isFinite(0.0F);
      Float.min((-1136.9122F), 1744.2F);
      String string0 = JSONObject.numberToString(float1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Float float0 = new Float((-997.0F));
      Float.isFinite((-997.0F));
      Float float1 = new Float(0.0F);
      Float float2 = new Float((-997.0F));
      Float.sum(2356.0F, (-997.0F));
      Float.isFinite(2356.0F);
      Float.isFinite((-250.0F));
      Float.isFinite(0.0F);
      Float.sum(1.0F, 2865.747F);
      Float.sum(3480.4485F, (-997.0F));
      Float.isFinite((float) float2);
      Float.min((-997.0F), 2865.747F);
      Float.sum(1.0F, 2356.0F);
      Float.max((-250.0F), 0.0F);
      Float.sum(2865.747F, 1.0F);
      Float.isFinite(0.0F);
      Float.min((-1136.9122F), 1744.2F);
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.6750924883025666
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Float float0 = new Float((-997.0F));
      Float float1 = new Float(0.0F);
      Float.max((-997.0F), (-1.0F));
      Float.max((-250.0F), (-997.0F));
      Float.max(2727.0F, (-3094.0F));
      Float.max((-997.0F), (-3061.0F));
      Float.max((-3686.876F), (-3061.0F));
      Float.max((-3061.0F), (-3061.0F));
      Float.max(1.0F, (-3061.0F));
      Float.max(1120.9869F, 0.0F);
      Float.max((-250.0F), (float) float1);
      Float.max((-1.0F), (-1.0F));
      Float.sum((-997.0F), (-1.0F));
      Float.max(0.0F, (-1.0F));
      Float.max(0.0F, 0.30556586F);
      Float.max(1566.6328F, 0.30556586F);
      Float.sum(10.139F, 1.0F);
      Float.min((-250.0F), 2318.9475F);
      String string0 = JSONObject.quote("Expected '");
      assertEquals("\"Expected '\"", string0);
      
      JSONObject jSONObject0 = new JSONObject(float0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.7506817223249798
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.isFinite((-544.6F));
      linkedList0.addFirst("d4?");
      linkedList0.removeFirst();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate4.test(predicate2);
      predicate1.or(predicate2);
      predicate3.or(predicate1);
      Predicate<Object> predicate5 = predicate4.or(predicate1);
      linkedList1.removeIf(predicate5);
      linkedList0.retainAll(linkedList1);
      linkedList0.add("d4?");
      linkedList0.iterator();
      linkedList0.add("f{KK2_U.2L&B`y42W\"");
      linkedList0.stream();
      Float.max(204.722F, 0.0F);
      Float float0 = new Float((double) 204.722F);
      Float.max(1.0F, 204.722F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.optString("f{KK2_U.2L&B`y42W\"", "pa");
      assertEquals("pa", string0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.815062529505342
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Float float0 = new Float((-997.0F));
      Float.isFinite((-997.0F));
      Float float1 = new Float(0.0F);
      Float.max((-250.0F), (-997.0F));
      Float.isFinite((-250.0F));
      Float.isFinite(0.0F);
      Float.max((-250.0F), (float) float1);
      Float.max((-1.0F), (-1.0F));
      Float.sum((-997.0F), (-1.0F));
      Float.max(0.0F, (-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.names();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      Float.isFinite(0.0F);
      Boolean boolean0 = new Boolean(false);
      Float float0 = new Float((-471.5F));
      Float float1 = new Float(0.0F);
      Integer integer0 = new Integer(128);
      Integer.max(128, 96);
      Integer integer1 = new Integer((-916));
      Integer.compareUnsigned(87, (-1872));
      Integer.compare(11, (-916));
      Integer.toUnsignedLong(128);
      Integer.getInteger("y4Qe%]{BZeN5BM", integer0);
      Integer.getInteger("Null pointer");
      Integer.compare(87, 9);
      Integer integer2 = new Integer(3);
      String[] stringArray0 = JSONObject.getNames((Object) "Null pointer");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.8666883842082265
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not :a Boolean.";
      jSONObject0.put("] is not :a Boolean.", 0.0);
      try { 
        jSONObject0.getJSONArray("] is not :a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not :a Boolean.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.9622594906199144
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.isFinite((-544.6F));
      linkedList0.addFirst("d4?");
      linkedList0.removeFirst();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.or(predicate2);
      predicate3.or(predicate1);
      Predicate<Object> predicate5 = predicate4.or(predicate1);
      linkedList1.removeIf(predicate5);
      linkedList0.retainAll(linkedList1);
      linkedList0.add("d4?");
      linkedList0.iterator();
      linkedList0.add("f{KK2_U.2L&B`y42W\"");
      linkedList0.stream();
      Float.max(204.722F, 0.0F);
      Float float0 = new Float((double) 204.722F);
      Float.max(1.0F, 204.722F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.getJSONArray(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\": \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.0899985519282223
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double((-1518.5777254478));
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double double1 = new Double((-1518.5777254478));
      Double double2 = new Double(630.61);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) double2);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      predicate4.and(predicate0);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate2.and(predicate5);
      Predicate<Object> predicate7 = predicate0.or(predicate6);
      predicate3.or(predicate7);
      predicate4.or(predicate2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.removeIf(predicate0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.retainAll(linkedList0);
      linkedList1.add("istoHexString");
      linkedList1.iterator();
      linkedList1.add("f{KK2_U.2L&B`y42W\"");
      linkedList1.stream();
      Float.max(0.0F, 1.0F);
      Float float0 = new Float((double) 0.0F);
      Float.max(0.0F, 0.0F);
      Short short0 = Short.valueOf((short)10);
      JSONObject jSONObject1 = new JSONObject(short0);
      assertEquals(1, jSONObject1.length());
      
      boolean boolean0 = jSONObject0.optBoolean("f{KK2_U.2L&B`y42W\"");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.9622594906199144
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.isFinite((-544.6F));
      linkedList0.addFirst("d4?");
      linkedList0.removeFirst();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      predicate0.and(predicate1);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate2.test(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      linkedList1.removeIf(predicate4);
      linkedList0.retainAll(linkedList1);
      linkedList0.add("d4?");
      linkedList0.iterator();
      linkedList0.add("f{KK2_U.2L&B`y42W\"");
      linkedList0.stream();
      Float.max(204.722F, 0.0F);
      Float float0 = new Float((double) 204.722F);
      Float.max(1.0F, 204.722F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.getLong("pus");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pus\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.3300185960211162
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.replace((String) null, (String) null, (String) null);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      String string0 = JSONObject.valueToString(hashMap0, 140, 91);
      assertEquals("{}", string0);
  }
}
