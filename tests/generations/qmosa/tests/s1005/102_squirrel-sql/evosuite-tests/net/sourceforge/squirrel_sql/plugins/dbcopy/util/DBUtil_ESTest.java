/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 16:46:16 GMT 2019
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.event.ComponentListener;
import java.awt.event.MouseMotionListener;
import java.io.File;
import java.io.FileFilter;
import java.io.PipedWriter;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.text.ChoiceFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TimeUnit;
import javax.swing.Box;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.InputVerifier;
import javax.swing.JRootPane;
import javax.swing.JSpinner;
import javax.swing.border.LineBorder;
import javax.swing.filechooser.FileSystemView;
import javax.swing.plaf.basic.BasicCheckBoxUI;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultTreeCellRenderer;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAlias;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAliasColorProperties;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAliasSchemaProperties;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.client.util.ApplicationFileWrappersImpl;
import net.sourceforge.squirrel_sql.client.util.ApplicationFiles;
import net.sourceforge.squirrel_sql.fw.id.IIdentifier;
import net.sourceforge.squirrel_sql.fw.id.IntegerIdentifier;
import net.sourceforge.squirrel_sql.fw.id.UidIdentifier;
import net.sourceforge.squirrel_sql.fw.sql.DataTypeInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.ProcedureInfo;
import net.sourceforge.squirrel_sql.fw.sql.SQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriver;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverPropertyCollection;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.fw.util.FileWrapper;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperFactoryImpl;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.evosuite.runtime.mock.javax.swing.filechooser.MockFileSystemView;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.util.file.FilePrefixFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-24);
      byteArray0[4] = (byte) (-16);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      dBCopyPlugin0.setPasteToTableName(")rD\"=l");
      dBCopyPlugin0.setCopyMenuEnabled(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dBCopyPlugin0.getPluginAppSettingsFolder();
      ISession iSession0 = null;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(")rD\"=l", " schema=", ")rD\"=l", " schema=", 2005, "[E9,", (byte) (-24), (byte) (-24), (byte) (-24), (byte) (-24), " schema=", ")rD\"=l", (-466), (byte)114, "xjBeLWo~REbS$");
      DBUtil.replaceDistinctDataType(0, tableColumnInfo0, (ISession) null);
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, (String) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", ")rD\"=l", 1111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("/~1e{#Ud|GSN", (String) null, "/~1e{#Ud|GSN", "executeQuery: TimesTen allows a maximum fetch size of 128.  Altering p(eferred fetch size from ", (-689), "/~1e{#Ud|GSN", (-6), (-1042), (-2099), (-689), "executeQuery: TimesTen allows a maximum fetch size of 128.  Altering p(eferred fetch size from ", "/~1e{#Ud|GSN", (-1073741822), (-6), "B\"5Gj9}\"DjyOZ");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SESSION;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.UDT_TYPE_DBO;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getVisibleRect();
      DatabaseObjectType.createNewDatabaseObjectType("status");
      Icon icon0 = defaultTreeCellRenderer0.getDefaultClosedIcon();
      DatabaseObjectType.createNewDatabaseObjectType("CREATE TABLE ", icon0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.replaceDistinctDataType(2001, tableColumnInfo0, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "C";
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(502);
      SQLAlias sQLAlias0 = new SQLAlias((IIdentifier) null);
      SQLAlias sQLAlias1 = new SQLAlias();
      sQLAlias1.getDriverPropertiesClone();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      uidIdentifier0.setString("c");
      sQLAlias0.setDriverIdentifier(integerIdentifier0);
      DBUtil.typesAreEquivalent(3, 2);
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFiles1.getUpdateDirectory();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      applicationFiles3.getLicenceFile();
      File file0 = applicationFiles3.getSQuirrelJarFile();
      assertEquals(0L, file0.getUsableSpace());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      applicationFiles2.getWelcomeFile();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      applicationFiles2.getLicenceFile();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      applicationFiles3.getPluginsDirectory();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.setApplicationFiles(applicationFiles3);
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getFAQFile();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      ApplicationFiles applicationFiles9 = new ApplicationFiles();
      ApplicationFiles applicationFiles10 = new ApplicationFiles();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFiles9.getUpdateDirectory();
      ApplicationFiles applicationFiles11 = new ApplicationFiles();
      ISQLConnection iSQLConnection0 = null;
      DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, "y{;#'$S*,VNbO");
      // Undeclared exception!
      try { 
        DBUtil.getPKColumnString((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getFAQFile();
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      applicationFiles2.getExecutionLogFile();
      applicationFiles2.getLibraryDirectory();
      applicationFiles2.getChangeLogFile();
      applicationFiles2.getLicenceFile();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getFAQFile();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      MockFile mockFile0 = new MockFile("@dZ62oD8:)8ce3W");
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("ORACLE", "square", "ORACLE");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SCHEMA;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      String string0 = DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      assertEquals("ORACLE", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "</", (String) null, 2000, "</", 2000, (-598), (-598), (-598), (String) null, "</", 2000, 2000, "IhLKu/F]lOF");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getWebSite();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.INDEX_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      dBCopyPlugin0.getPluginUserSettingsFolder();
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("http://www.squirrelsql.org", "kc>;&Gi(%e-_v", "kc>;&Gi(%e-_v", "kc>;&Gi(%e-_v", 2004, "_?w2S.5aVS`", (-1111), (-38), (-1111), 2004, " schema = ", "z;GB%LK", (-1111), (-1886), "'l+'7YbnB}UEsFJr|");
      DBUtil.isBinaryType(tableColumnInfo1);
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = sQLAlias0.getDriverPropertiesClone();
      SQLConnection sQLConnection0 = null;
      try {
        sQLConnection0 = new SQLConnection((Connection) null, sQLDriverPropertyCollection0, sQLDriver0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLConnection == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.SQLConnection", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      DBUtil.typesAreEquivalent(3, (-1452));
      applicationFiles0.getFwJarFile();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      applicationFiles2.getLibraryDirectory();
      applicationFiles0.getUpdateDirectory();
      System.setCurrentTimeMillis(1622L);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFiles1.getLibraryDirectory();
      applicationFiles0.getLicenceFile();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      DBUtil.typesAreEquivalent(3, 2000);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      applicationFiles0.getUpdateDirectory();
      MockFile mockFile0 = new MockFile("r4LT");
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      applicationFiles6.getLicenceFile();
      File file0 = applicationFiles6.getSQuirrelJarFile();
      assertEquals(0L, file0.getTotalSpace());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-2);
      byteArray0[4] = (byte) (-3);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("W;k1Gtv7b'V[czTh", "'%&w$u4gN%ezuF", "8C\"O]Vj~.Djz", "jTP7/,puRq@dHn%", (byte) (-2), "RK*", (byte) (-2), (byte) (-2), 3196, (byte) (-2), "-o&uJZ&}@`", "6Q0+v", (byte) (-3), 3196, "RK*");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("QS$uj+dv6<8ZF]sT");
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDF;
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      defaultListCellRenderer0.setVerifyInputWhenFocusTarget(true);
      defaultListCellRenderer0.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType("jTP7/,puRq@dHn%", (Icon) null);
      DatabaseObjectType.createNewDatabaseObjectType("jTP7/,puRq@dHn%");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-2);
      byteArray0[4] = (byte) (-3);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("W;k1Gtv7b'V[czTh", "'%&w$u4gN%ezuF", "8C\"O]Vj~.Djz", "jTP7/,puRq@dHn%", (byte) (-3), "RK*", (byte) (-2), (byte) (-2), 3196, (byte) (-2), "-o&uJZ&}@`", "6Q0+v", (-313), 3196, "RK*");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("QS$uj+dv6<8ZF]sT");
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDF;
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      defaultListCellRenderer0.setVerifyInputWhenFocusTarget(true);
      defaultListCellRenderer0.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType("jTP7/,puRq@dHn%", (Icon) null);
      DatabaseObjectType.createNewDatabaseObjectType("jTP7/,puRq@dHn%");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getChangeLogFile();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("\"t+p");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getLibraryDirectory();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      applicationFiles1.getLibraryDirectory();
      DBUtil.typesAreEquivalent((-7), 1554);
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      applicationFiles2.getLibraryDirectory();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      applicationFiles5.getUpdateDirectory();
      System.setCurrentTimeMillis(1554);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFiles1.getQuickStartGuideFile();
      applicationFiles0.getChangeLogFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.setApplicationFiles(applicationFiles1);
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getExecutionLogFile();
      applicationFileWrappersImpl0.getDatabaseAliasesTreeStructureFile();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      DBUtil.typesAreEquivalent(16, (-4266));
      dBCopyPlugin0.getSourceSession();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      applicationFiles1.getJDBCDebugLogFile();
      applicationFiles1.getSQuirrelJarFile();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      applicationFileWrappersImpl1.setApplicationFiles(applicationFiles3);
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl4.setApplicationFiles(applicationFiles3);
      assertFalse(applicationFiles3.equals((Object)applicationFiles2));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFiles1.getJDBCDebugLogFile();
      applicationFiles1.getLibraryDirectory();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      applicationFiles3.getLibraryDirectory();
      applicationFiles3.getQuickStartGuideFile();
      DBUtil.typesAreEquivalent((-7), (-7));
      DBUtil.typesAreEquivalent(104, 104);
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      applicationFiles2.getLibraryDirectory();
      applicationFiles1.getUpdateDirectory();
      System.setCurrentTimeMillis((-7));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)2;
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      arrayList0.add((ITableInfo) null);
      arrayList0.add((ITableInfo) null);
      SynchronousQueue<ForeignKeyInfo> synchronousQueue0 = new SynchronousQueue<ForeignKeyInfo>();
      synchronousQueue0.peek();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      synchronousQueue0.poll(527L, timeUnit0);
      synchronousQueue0.spliterator();
      arrayList0.retainAll(synchronousQueue0);
      arrayList0.add((ITableInfo) null);
      ArrayList<ITableInfo> arrayList1 = new ArrayList<ITableInfo>();
      arrayList1.add((ITableInfo) null);
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) null);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      SQLDriver sQLDriver0 = new SQLDriver();
      assertNull(sQLDriver0.getJarFileName());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).getCatalog();
      doReturn((DatabaseMetaData) null).when(connection0).getMetaData();
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      SQLDriver sQLDriver0 = new SQLDriver();
      sQLDriver0.clone();
      SQLConnection sQLConnection0 = new SQLConnection(connectionWrapper0, (SQLDriverPropertyCollection) null, sQLDriver0);
      sQLConnection0.commit();
      sQLConnection0.getCatalog();
      JSpinner jSpinner0 = new JSpinner();
      jSpinner0.getKeyListeners();
      Color.getHSBColor(0.0F, 0.0F, 0.0F);
      jSpinner0.getWidth();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      sQLDriver0.setUrl(";T6te&)^R~41");
      ConnectionWrapper connectionWrapper1 = new ConnectionWrapper(connectionWrapper0);
      connectionWrapper1.clearWarnings();
      SQLAlias sQLAlias0 = new SQLAlias();
      sQLAlias0.setPassword(";T6te&)^R~41");
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      sQLDriverPropertyCollection0.removeDriverProperty("g");
      SQLConnection sQLConnection1 = new SQLConnection(connectionWrapper1, sQLDriverPropertyCollection0, sQLDriver0);
      SQLConnection sQLConnection2 = new SQLConnection(connectionWrapper1, sQLDriverPropertyCollection0, sQLDriver0);
      // Undeclared exception!
      try { 
        DBUtil.tableHasPrimaryKey(sQLConnection0, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // metaData
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.DatabaseMetaDataWrapper", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "C";
      stringArray0[0] = "C";
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).getCatalog();
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      SQLDriver sQLDriver0 = new SQLDriver();
      sQLDriver0.clone();
      SQLConnection sQLConnection0 = new SQLConnection(connectionWrapper0, (SQLDriverPropertyCollection) null, sQLDriver0);
      sQLConnection0.commit();
      sQLConnection0.getCatalog();
      JSpinner jSpinner0 = new JSpinner();
      Color color0 = Color.getHSBColor(0.0F, 0.0F, 0.0F);
      LineBorder lineBorder0 = new LineBorder(color0, 10000);
      jSpinner0.setBorder(lineBorder0);
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      sQLDriver0.removePropertyChangeListener(jSpinner_NumberEditor0);
      sQLDriver0.setUrl("sj|kzmL");
      connectionWrapper0.clearWarnings();
      SQLAlias sQLAlias0 = new SQLAlias();
      sQLAlias0.setPassword("g");
      sQLAlias0.getDriverPropertiesClone();
      // Undeclared exception!
      try { 
        DBUtil.getColumnName(sQLConnection0, (ITableInfo) null, (-1344));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.SQLDatabaseMetaData", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      dBCopyPlugin0.unload();
      String string0 = "~P[x^";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", ",E{E4)&U2bW", ",E{E4)&U2bW", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 1, "i|cS<5RgV\"wVf'z", (-867), 7, (-867), 7, "_w2S@.VS`", "~P[x^", (-1049), (-3360), "~P[x^");
      DBUtil.typesAreEquivalent(2, 7);
      // Undeclared exception!
      try { 
        schemaInfo0.getCatalogs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      SQLDriver sQLDriver0 = new SQLDriver();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "C");
      TableColumnInfo tableColumnInfo0 = null;
      // Undeclared exception!
      try { 
        DBUtil.replaceOtherDataType((TableColumnInfo) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      applicationFiles2.getLibraryDirectory();
      applicationFiles2.getLicenceFile();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      DBUtil.typesAreEquivalent(16, 3);
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      applicationFiles5.getUpdateDirectory();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      applicationFiles6.getLicenceFile();
      File file0 = applicationFiles6.getSQuirrelJarFile();
      assertEquals("squirrel-sql.jar", file0.getName());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      SQLDriver sQLDriver0 = new SQLDriver(uidIdentifier0);
      sQLDriver0.setUrl("0M^F1;#b_");
      assertEquals("-683d4782:16e6feb8a3b:-7e46", uidIdentifier0.toString());
      
      SQLAlias sQLAlias0 = new SQLAlias();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, "RK*", "8C\"O]Vj~.Djz", (String) null, 3196, "b+2>`-(Yxe>z/1a6$K_", 3196, 1007, 3196, 3196, " schema=", "6:`IOY+=dLUE", (-1160), 3196, "$GB3H[");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("Khs[LZ9@2WfHHYgm3+c");
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDF;
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      DefaultListCellRenderer defaultListCellRenderer1 = new DefaultListCellRenderer();
      defaultListCellRenderer1.setVerifyInputWhenFocusTarget(false);
      defaultListCellRenderer1.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType("!GiJJe!,D$+VbIqz", (Icon) null);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.VIEW;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("NQ[>'i.?O\"", "NQ[>'i.?O\"", "NQ[>'i.?O\"");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.VIEW;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SCHEMA;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SESSION;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.createNewDatabaseObjectType("NQ[>'i.?O\"");
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.createNewDatabaseObjectType("o");
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      DatabaseObjectType.createNewDatabaseObjectType("DBUtil.error.firebirdcommit");
      DatabaseObjectType.createNewDatabaseObjectType("o");
      defaultTreeCellRenderer1.paintImmediately(1, (-660), (-660), (-1171));
      defaultTreeCellRenderer1.isDoubleBuffered();
      DefaultTreeCellRenderer defaultTreeCellRenderer2 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultOpenIcon();
      DatabaseObjectType.createNewDatabaseObjectType("das|-|`aIor=@", icon0);
      DatabaseObjectType.createNewDatabaseObjectType("NQ[>'i.?O\"");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("(@)D4B.N", "o", "object is a multicolumn type", "object is a multicolumn type", (-660), (String) null, 1, (-128), 1, (-1171), "|F)cGT", "HkK~", (-128), (-660), " tableName = ");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType4);
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "%uEY/ru/o5j+.B(cC", "NQ[>'i.?O\"", "das|-|`aIor=@", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = null;
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("|9d^4/Y)La", (String) null, "|9d^4/Y)La", "|9d^4/Y)La", (-82), (String) null, (-860), 2, 1381, (-860), "", "|9d^4/Y)La", 1381, 1381, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.PROC_TYPE_DBO;
      ImageIcon imageIcon0 = new ImageIcon();
      imageIcon0.getImageLoadStatus();
      DatabaseObjectType.createNewDatabaseObjectType("", (Icon) imageIcon0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.INDEX;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType.createNewDatabaseObjectType((String) null);
      DBUtil.setLastStatement((String) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      dBCopyPlugin0.getSourceSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.OTHER;
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl0);
      dBCopyPlugin1.getPasteToTableInfo((ISQLConnection) null, "", "|9d^4/Y)La");
      // Undeclared exception!
      try { 
        DBUtil.getColumnCount((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      SQLAlias sQLAlias0 = new SQLAlias();
      UidIdentifier uidIdentifier1 = new UidIdentifier();
      SQLAliasColorProperties sQLAliasColorProperties0 = sQLAlias0.getColorProperties();
      sQLAliasColorProperties0.setToolbarBackgroundColorRgbValue(32);
      SQLAlias sQLAlias1 = new SQLAlias();
      sQLAlias1.setColorProperties(sQLAliasColorProperties0);
      SQLAliasSchemaProperties sQLAliasSchemaProperties0 = new SQLAliasSchemaProperties();
      sQLAlias0.setSchemaProperties(sQLAliasSchemaProperties0);
      sQLAlias0.setPassword("0M^F1;#b_");
      sQLAlias0.getDriverPropertiesClone();
      // Undeclared exception!
      try { 
        DBUtil.getColumnNames((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo((String) null, (String) null, "executeQuery: TimesTen allows a maximum fetch size of 128.  Altering p(eferred fetch size from ");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.USER;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SCHEMA;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SESSION;
      DatabaseObjectType.createNewDatabaseObjectType(".");
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.createNewDatabaseObjectType("DBUtil.error.bindclobfailure");
      defaultTreeCellRenderer0.paintImmediately(2000, 1237, 1237, 2000);
      defaultTreeCellRenderer0.isDoubleBuffered();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultOpenIcon();
      DatabaseObjectType.createNewDatabaseObjectType("n!VmF9n/S)`", icon0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      String string0 = DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      assertNull(string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)2;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("/~1e{#Ud|GSN", "/~1e{#Ud|GSN", "/~1e{#Ud|GSN", "/~1e{#Ud|GSN", 1237, "EjBG:", (byte)12, (-1073741822), 10, 923, "EjBG:", "EjBG:", (-689), (byte)12, "EjBG:");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[6];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SCHEMA;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfoArray0[2] = tableColumnInfo0;
      tableColumnInfoArray0[3] = tableColumnInfo0;
      tableColumnInfoArray0[4] = tableColumnInfo0;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      TableColumnInfo tableColumnInfo1 = (TableColumnInfo)DBUtil.getSchemaFromDbObject(tableColumnInfo0, schemaInfo0);
      assertEquals("EjBG:", tableColumnInfo1.getDefaultValue());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).getCatalog();
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLDriver sQLDriver1 = (SQLDriver)sQLDriver0.clone();
      SQLConnection sQLConnection0 = new SQLConnection(connectionWrapper0, (SQLDriverPropertyCollection) null, sQLDriver0);
      sQLConnection0.commit();
      sQLConnection0.commit();
      sQLConnection0.getCatalog();
      connectionWrapper0.clearWarnings();
      SQLConnection sQLConnection1 = new SQLConnection(connectionWrapper0, (SQLDriverPropertyCollection) null, sQLDriver1);
      dBCopyPlugin0.getPasteToTableInfo(sQLConnection1, "eoCO{Ti", "6mX#~");
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin0, (ITableInfo) null, "eoCO{Ti", "55[{^|[ZzKTl", "55[{^|[ZzKTl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBUtil dBUtil0 = new DBUtil();
      assertNull(dBUtil0.getLastStatementValues());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent((-1137), 237);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("|9d^4/Y)La", (String) null, "|9d^4/Y)La", "|9d^4/Y)La", (-82), (String) null, (-860), 2, 1381, (-860), "", "|9d^4/Y)La", 1381, 1381, "");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.PROC_TYPE_DBO;
      ImageIcon imageIcon0 = new ImageIcon();
      imageIcon0.getImageLoadStatus();
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType("", (Icon) imageIcon0);
      DatabaseObjectType.createNewDatabaseObjectType("|9d^4/Y)La", (Icon) imageIcon0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.INDEX;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.createNewDatabaseObjectType("");
      DBUtil.setLastStatement("N--ypV'Np%9X&aEG61");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBUtil.getLastStatement();
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType4);
      assertEquals("", tableColumnInfo0.getRemarks());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "</", "</", 2035, "</", 2035, (-598), (-598), (-598), "", "</", 2035, 2035, "IhLKu/F]lOF");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getWebSite();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.INDEX_TYPE_DBO;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("C", (Icon) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType("");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultClosedIcon();
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType.createNewDatabaseObjectType("'@", icon0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      dBCopyPlugin0.getSourceSession();
      DBUtil.replaceDistinctDataType(2035, tableColumnInfo0, (ISession) null);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLDriver sQLDriver1 = new SQLDriver();
      assertFalse(sQLDriver1.isJDBCDriverClassLoaded());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)12;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("EjBG:", "count", "B~3YE", "Skipp'6ig F (", (-667), "", (byte)12, 14, 1237, 249, "KxF3K?&59[|^xG>?/Wh", "v0FCwVu,yl", (-1549), (byte) (-2), "B~3YE");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[0];
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("NQ[>'i.?O\"", "NQ[>'i.?O\"", "NQ[>'i.?O\"");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.USER;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SCHEMA;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SESSION;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.createNewDatabaseObjectType("NQ[>'i.?O\"");
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DatabaseObjectType.createNewDatabaseObjectType("o");
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      DatabaseObjectType.createNewDatabaseObjectType("o");
      defaultTreeCellRenderer1.paintImmediately(1, (-660), (-660), (-1171));
      defaultTreeCellRenderer1.isDoubleBuffered();
      DefaultTreeCellRenderer defaultTreeCellRenderer2 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultOpenIcon();
      DatabaseObjectType.createNewDatabaseObjectType("das|-|`aIor=@", icon0);
      DatabaseObjectType.createNewDatabaseObjectType("NQ[>'i.?O\"");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("(@)D4B.N", "o", "object is a multicolumn type", "object is a multicolumn type", (-660), (String) null, 1111, (-128), 1, (-1171), "|F)cGT", "kK~", (-128), (-660), " tableName = ");
      // Undeclared exception!
      try { 
        DBUtil.getColumnSql(dBCopyPlugin0, tableColumnInfo0, "%uEY/ru/o5j+.B(cC", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("", "", "Null IApplication passed");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.USER;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SCHEMA;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SESSION;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.createNewDatabaseObjectType((String) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DatabaseObjectType.createNewDatabaseObjectType("W)=m>uI:,Gl)n=)\"?=F");
      defaultTreeCellRenderer0.paintImmediately((-1186), 415, 415, 91);
      defaultTreeCellRenderer0.isDoubleBuffered();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultOpenIcon();
      DatabaseObjectType.createNewDatabaseObjectType(".", icon0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      String string0 = DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<IDatabaseObjectInfo> linkedList0 = new LinkedList<IDatabaseObjectInfo>();
      LinkedHashSet<ProcedureInfo> linkedHashSet0 = new LinkedHashSet<ProcedureInfo>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-79);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      // Undeclared exception!
      try { 
        DBUtil.convertTableToObjectList((List<ITableInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Stack<IDatabaseObjectInfo> stack0 = new Stack<IDatabaseObjectInfo>();
      String string0 = "";
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("", (String) null, "I:DT");
      stack0.add((IDatabaseObjectInfo) databaseObjectInfo0);
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList(stack0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate((ISQLConnection) null, ":`{bcj AvvTm+#", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.sameDatabaseType((ISession) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "C";
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(502);
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[9];
      iDatabaseObjectInfoArray0[0] = (IDatabaseObjectInfo) null;
      iDatabaseObjectInfoArray0[1] = (IDatabaseObjectInfo) null;
      iDatabaseObjectInfoArray0[2] = (IDatabaseObjectInfo) null;
      iDatabaseObjectInfoArray0[3] = (IDatabaseObjectInfo) null;
      iDatabaseObjectInfoArray0[4] = (IDatabaseObjectInfo) null;
      iDatabaseObjectInfoArray0[5] = (IDatabaseObjectInfo) null;
      iDatabaseObjectInfoArray0[6] = (IDatabaseObjectInfo) null;
      iDatabaseObjectInfoArray0[7] = (IDatabaseObjectInfo) null;
      iDatabaseObjectInfoArray0[8] = (IDatabaseObjectInfo) null;
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      DBUtil.convertTableToObjectList(list0);
      SQLAlias sQLAlias0 = new SQLAlias((IIdentifier) null);
      // Undeclared exception!
      try { 
        integerIdentifier0.setString((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      dBCopyPlugin0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      dBCopyPlugin0.getSourceDatabaseObjects();
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList((List<IDatabaseObjectInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).getCatalog();
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLDriver sQLDriver1 = (SQLDriver)sQLDriver0.clone();
      SQLConnection sQLConnection0 = new SQLConnection(connectionWrapper0, (SQLDriverPropertyCollection) null, sQLDriver0);
      sQLConnection0.commit();
      sQLConnection0.getCatalog();
      JSpinner jSpinner0 = new JSpinner();
      Color color0 = Color.getHSBColor(194.3F, 194.3F, 0.0F);
      LineBorder lineBorder0 = new LineBorder(color0, 10000);
      jSpinner0.setBorder(lineBorder0);
      jSpinner0.setFocusCycleRoot(true);
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      sQLDriver0.removePropertyChangeListener(jSpinner_NumberEditor0);
      sQLDriver0.setUrl("sj|kzmL");
      connectionWrapper0.clearWarnings();
      SQLAlias sQLAlias0 = new SQLAlias();
      sQLAlias0.setPassword("g");
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = sQLAlias0.getDriverPropertiesClone();
      SQLConnection sQLConnection1 = new SQLConnection(connectionWrapper0, sQLDriverPropertyCollection0, sQLDriver1);
      dBCopyPlugin0.getPasteToTableInfo(sQLConnection1, "sj|kzmL", "sj|kzmL");
      // Undeclared exception!
      try { 
        DBUtil.getInsertSQL(dBCopyPlugin0, "oLs]h}]Xify", (ITableInfo) null, 10000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)113;
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (String) null, "Unexpected exception while attempting to determine if a table (");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.createNewDatabaseObjectType("org.hibernate.dialect.DB2Dialect", (Icon) null);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[1];
      iDatabaseObjectInfoArray0[0] = (IDatabaseObjectInfo) databaseObjectInfo0;
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)2;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("/~1e{#Ud|GSN", "/~1e{#Ud|GSN", "/~1e{#Ud|GSN", "/~1e{#Ud|GSN", 1237, "EjBG:", (byte)12, (-1073741822), 10, 923, "EjBG:", "EjBG:", (-689), (byte)12, "EjBG:");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[6];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      tableColumnInfoArray0[2] = tableColumnInfo0;
      tableColumnInfoArray0[3] = tableColumnInfo0;
      tableColumnInfoArray0[4] = tableColumnInfo0;
      tableColumnInfoArray0[5] = tableColumnInfo0;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("/~1e{#Ud|GSN, /~1e{#Ud|GSN, /~1e{#Ud|GSN, /~1e{#Ud|GSN, /~1e{#Ud|GSN, /~1e{#Ud|GSN", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte)113;
      byteArray0[3] = (byte)113;
      SynchronousQueue<ForeignKeyInfo> synchronousQueue0 = new SynchronousQueue<ForeignKeyInfo>();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      arrayList0.spliterator();
      SynchronousQueue<ForeignKeyInfo> synchronousQueue1 = new SynchronousQueue<ForeignKeyInfo>(false);
      synchronousQueue0.drainTo((Collection<? super ForeignKeyInfo>) synchronousQueue1, (int) (byte)113);
      synchronousQueue0.containsAll(synchronousQueue1);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      synchronousQueue0.contains(timeUnit0);
      synchronousQueue1.poll(52L, timeUnit0);
      SynchronousQueue<ForeignKeyInfo> synchronousQueue2 = new SynchronousQueue<ForeignKeyInfo>();
      synchronousQueue1.spliterator();
      SynchronousQueue<Integer> synchronousQueue3 = new SynchronousQueue<Integer>();
      SynchronousQueue<DataTypeInfo> synchronousQueue4 = new SynchronousQueue<DataTypeInfo>();
      arrayList0.clear();
      arrayList0.retainAll(synchronousQueue0);
      arrayList0.add((ITableInfo) null);
      arrayList0.add((ITableInfo) null);
      arrayList0.parallelStream();
      arrayList0.clone();
      // Undeclared exception!
      try { 
        DBUtil.getForeignKeySQL((SessionInfoProvider) null, (ITableInfo) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl0.getCellImportExportSelectionsFile();
      FileWrapper fileWrapper1 = applicationFileWrappersImpl0.getEditWhereColsFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      applicationFileWrappersImpl0.getJDBCDebugLogFile();
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      fileWrapperFactoryImpl1.create(fileWrapper1, " SET ");
      applicationFileWrappersImpl0.getJDBCDebugLogFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl(fileWrapper0, "Gl#.");
      FileWrapperImpl.createTempFile("ICW(UjHPZge[kG?", "c$~R'Jy", fileWrapperImpl0);
      FileWrapperImpl fileWrapperImpl1 = new FileWrapperImpl(" SET ", "ICW(UjHPZge[kG?");
      FileWrapperImpl fileWrapperImpl2 = new FileWrapperImpl(fileWrapperImpl1);
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList((IDatabaseObjectInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      applicationFiles4.getPluginsDirectory();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.setApplicationFiles(applicationFiles4);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)45;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte)95;
      byteArray0[8] = (byte)52;
      applicationFileWrappersImpl1.getFAQFile();
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      ApplicationFiles applicationFiles9 = new ApplicationFiles();
      ApplicationFiles applicationFiles10 = new ApplicationFiles();
      MockFile mockFile0 = new MockFile("s+%WXuzhkXB]");
      ApplicationFiles applicationFiles11 = new ApplicationFiles();
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[0];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)113;
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (String) null, "Unexpected exception while attempting to determine if a table (");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.createNewDatabaseObjectType("org.hibernate.dialect.DB2Dialect", (Icon) null);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType.createNewDatabaseObjectType((String) null);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[1];
      iDatabaseObjectInfoArray0[0] = (IDatabaseObjectInfo) databaseObjectInfo0;
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getEditWhereColsFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getSQuirrelJarFile();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getDatabaseDriversFile();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = DBUtil.fixCase((ISession) null, "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl0.getJDBCDebugLogFile();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)applicationFileWrappersImpl1.getQuickStartGuideFile();
      FileWrapperImpl fileWrapperImpl1 = new FileWrapperImpl(fileWrapperImpl0);
      fileWrapperFactoryImpl0.create((FileWrapper) fileWrapperImpl1, "!5|wnU");
      applicationFileWrappersImpl1.getQuickStartGuideFile();
      applicationFileWrappersImpl0.getPluginsDirectory();
      FileWrapperImpl fileWrapperImpl2 = fileWrapperFactoryImpl0.createTempFile("!5|wnU", ". Skipping FK constraint", fileWrapper0);
      FileWrapperImpl fileWrapperImpl3 = new FileWrapperImpl(fileWrapperImpl2);
      applicationFileWrappersImpl0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      FilePrefixFilter filePrefixFilter0 = new FilePrefixFilter("/", false);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBUtil.fixCase((ISession) null, (String) null);
      // Undeclared exception!
      try { 
        DBUtil.fixCase((ISession) null, "S8[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("NQ[>'i.?O\"", "NQ[>'i.?O\"", "NQ[>'i.?O\"");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SYNONYM;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SCHEMA;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("`>ctlF#+p 7|:o", "Application.info.jdbcwritersuccess", "`>ctlF#+p 7|:o", "Application.info.jdbcwritersuccess", 2001, ".H(C?DQZ^>Y-2", 1707, 6, 6, (-598), "NQ[>'i.?O\"", "uA(~:>?2<", 2000, (-16), "Application.info.jdbcwritersuccess");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getWebSite();
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.INDEX_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DatabaseObjectType.createNewDatabaseObjectType((String) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultClosedIcon();
      Box box0 = Box.createVerticalBox();
      box0.getInputVerifier();
      defaultTreeCellRenderer0.setInputVerifier((InputVerifier) null);
      DatabaseObjectType.createNewDatabaseObjectType("S8[", icon0);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.TABLE_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceDistinctDataType(2000, tableColumnInfo0, (ISession) null);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      assertEquals(0, sQLDriverPropertyCollection0.size());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)applicationFileWrappersImpl0.getJDBCDebugLogFile();
      FileWrapperImpl fileWrapperImpl1 = (FileWrapperImpl)applicationFileWrappersImpl2.getQuickStartGuideFile();
      FileWrapperImpl fileWrapperImpl2 = new FileWrapperImpl(fileWrapperImpl1);
      fileWrapperFactoryImpl0.create((FileWrapper) fileWrapperImpl2, "!5|wnU");
      applicationFileWrappersImpl2.getQuickStartGuideFile();
      applicationFileWrappersImpl1.getPluginsDirectory();
      FileWrapperImpl fileWrapperImpl3 = fileWrapperFactoryImpl0.createTempFile(". Skipping FK constraint", ". Skipping FK constraint", (FileWrapper) fileWrapperImpl0);
      FileWrapperImpl fileWrapperImpl4 = new FileWrapperImpl(fileWrapperImpl3);
      applicationFileWrappersImpl1.setFileWrapperFactory(fileWrapperFactoryImpl0);
      FilePrefixFilter filePrefixFilter0 = new FilePrefixFilter("/", false);
      fileWrapperImpl2.listFiles((FileFilter) filePrefixFilter0);
      FileWrapperImpl fileWrapperImpl5 = new FileWrapperImpl(fileWrapperImpl0);
      FileWrapperImpl fileWrapperImpl6 = new FileWrapperImpl(fileWrapperImpl2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileWrapperImpl fileWrapperImpl7 = new FileWrapperImpl(fileWrapperImpl0);
      applicationFileWrappersImpl0.getDatabaseDriversFile();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ". Skipping FK constraint");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("http://www.squirrelsql.org", "http://www.squirrelsql.org", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "!5|wnU", 364, ". Skipping FK constraint", 364, 502, 32767, (byte)0, "cT~ta", "/", 32767, 364, "cT~ta");
      // Undeclared exception!
      try { 
        DBUtil.getMaxColumnLengthSQL((ISession) null, tableColumnInfo0, "http://www.squirrelsql.org", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl0.getCellImportExportSelectionsFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      applicationFileWrappersImpl0.getJDBCDebugLogFile();
      fileWrapperFactoryImpl0.createTempFile("org.jboss.net.protocol.file.decodeFilePaths", "VdH|Z}s");
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("ICW(UjHPZge[kG?");
      FileWrapperImpl fileWrapperImpl1 = new FileWrapperImpl("ICW(UjHPZge[kG?");
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      FileWrapperImpl fileWrapperImpl2 = new FileWrapperImpl(fileWrapper0, "Gl#.");
      FileWrapperImpl.createTempFile("ICW(UjHPZge[kG?", "c$~R'Jy", fileWrapperImpl2);
      FileWrapperImpl fileWrapperImpl3 = new FileWrapperImpl(" SGTe ", "ICW(UjHPZge[kG?");
      FileWrapperImpl fileWrapperImpl4 = new FileWrapperImpl(fileWrapperImpl3);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.fw.dialects.DialectType", ", length: ", "Hr#ep9c?", "VdH|Z}s", (-1956), " SGTe ", (-1956), 506, 51, 3749, "]#egP]';sqT&iNb)XI", ">);5fbha)vd:pO6<", 51, (-1956), "trunc");
      DBUtil.isBinaryType(tableColumnInfo0);
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriver sQLDriver0 = new SQLDriver();
      assertFalse(sQLDriver0.isJDBCDriverClassLoaded());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("lib/squirrel-sql.jar");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-106);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-43);
      byteArray0[8] = (byte)7;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>();
      vector0.add((IDatabaseObjectInfo) null);
      DBUtil.convertObjectToTableList(vector0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("z8gc", "SRc@a5/%s${'Sf|*!G", "SRc@a5/%s${'Sf|*!G", "SRc@a5/%s${'Sf|*!G", (-1102), ".$Lw", 18, 0, 0, 0, ".$Lw", "SRc@a5/%s${'Sf|*!G", 18, (-1102), "SRc@a5/%s${'Sf|*!G");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      FileSystemView fileSystemView0 = MockFileSystemView.getFileSystemView();
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser(fileSystemView0);
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      File file0 = applicationFiles1.getSQuirrelJarFile();
      Icon icon0 = mockJFileChooser0.getIcon(file0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("e=l8 1^p\"g}?yM^", icon0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject((IDatabaseObjectInfo) null, schemaInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      Stack<IDatabaseObjectInfo> stack0 = new Stack<IDatabaseObjectInfo>();
      stack0.removeAllElements();
      List<ITableInfo> list0 = DBUtil.convertObjectToTableList(stack0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)8;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Hvqm_RY |ie2Vi", "Hvqm_RY |ie2Vi", "Hvqm_RY |ie2Vi", "Hvqm_RY |ie2Vi", 1237, "EjBG:", (byte)12, (byte)8, 10, (byte)12, "EjBG:", "EjBG:", (-671), (byte)12, "EjBG:");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getLeafIcon();
      DatabaseObjectType.createNewDatabaseObjectType("DBUtil.info.executeupdate", icon0);
      DatabaseObjectType.createNewDatabaseObjectType("EjBG:");
      DatabaseObjectType.createNewDatabaseObjectType("coalesce");
      DatabaseObjectType.createNewDatabaseObjectType("coalesce");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.OTHER;
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getUserSQLHistoryFile();
      File file0 = applicationFiles0.getDatabaseAliasesFile();
      MockFile mockFile0 = new MockFile("EjBG:", "EjBG:");
      assertFalse(mockFile0.equals((Object)file0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "i|cS<5RgVJwVf'z");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getEditWhereColsFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getSQuirrelJarFile();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getLibraryDirectory();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "soG-#{ah%");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "soG-#{ah%", "ngI06", "schemaManager", (byte)36, (String) null, (byte)36, (byte)36, (byte)36, (byte)36, (String) null, "dba", (byte)36, (byte)36, "soG-#{ah%");
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.OTHER;
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getUserSQLHistoryFile();
      MockFile mockFile0 = new MockFile("catalog=", "|)IW\"f");
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFileWrappersImpl2.setApplicationFiles(applicationFiles1);
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      applicationFileWrappersImpl4.setApplicationFiles(applicationFiles2);
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl1);
      assertFalse(applicationFileWrappersImpl1.equals((Object)applicationFileWrappersImpl4));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getFAQFile();
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      applicationFiles2.getLicenceFile();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      applicationFileWrappersImpl0.setApplicationFiles(applicationFiles4);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getFAQFile();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      MockFile mockFile0 = new MockFile("@dZ62oD8:)8ce3W");
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      applicationFileWrappersImpl0.setApplicationFiles(applicationFiles8);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getSchemaNameFromDbObject((IDatabaseObjectInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[10] = (byte)125;
      byteArray0[3] = (byte)125;
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("x}XF7zaj", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.USER;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SESSION;
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      metalTreeUI0.getCollapsedIcon();
      DatabaseObjectType.createNewDatabaseObjectType((String) null, (Icon) null);
      DatabaseObjectType.createNewDatabaseObjectType("!/yN{:|bQZ1TwHk", (Icon) imageIcon0);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultIcon();
      DatabaseObjectType.createNewDatabaseObjectType("WITH", (Icon) null);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SESSION;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.UDT;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getDefaultOpenIcon();
      ImageIcon imageIcon1 = new ImageIcon(byteArray0);
      DatabaseObjectType.createNewDatabaseObjectType("?s5|2IHTo", (Icon) imageIcon0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      String string0 = DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      assertEquals("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)114;
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      MouseMotionListener mouseMotionListener0 = AWTEventMulticaster.add((MouseMotionListener) null, (MouseMotionListener) defaultCaret0);
      AWTEventMulticaster.remove(mouseMotionListener0, mouseMotionListener0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.addMouseMotionListener((MouseMotionListener) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SESSION;
      Color color0 = Color.white;
      defaultTreeCellRenderer0.setBackground(color0);
      DatabaseObjectType.createNewDatabaseObjectType("K:r\"E");
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      DatabaseObjectType.createNewDatabaseObjectType("v|p=PBpi/");
      DefaultTreeCellRenderer defaultTreeCellRenderer2 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getInheritsPopupMenu();
      defaultTreeCellRenderer0.isDoubleBuffered();
      DefaultTreeCellRenderer defaultTreeCellRenderer3 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer1.getDefaultOpenIcon();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      arrayList0.parallelStream();
      ArrayList<ITableInfo> arrayList1 = new ArrayList<ITableInfo>();
      arrayList0.clone();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.dropTable("V", "V", "cw`6wxX(p2_{=", (ISession) null, true, (byte) (-24));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, (-1105));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 64, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-2801), 1310, (-2801), (-4210), "=[", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 1310, (-431), "getCatSep: Unexpected Exception - ");
      int int0 = DBUtil.replaceDistinctDataType((-336), tableColumnInfo0, (ISession) null);
      assertEquals((-336), int0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte)113;
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      metalTreeUI0.getExpandedIcon();
      DatabaseObjectType.createNewDatabaseObjectType("S8[", (Icon) null);
      DatabaseObjectType.createNewDatabaseObjectType("S8[", (Icon) null);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      JRootPane jRootPane0 = new JRootPane();
      jRootPane0.getMouseListeners();
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      basicCheckBoxUI1.getAccessibleChild(jRootPane0, 12);
      basicCheckBoxUI1.getDefaultIcon();
      DatabaseObjectType.createNewDatabaseObjectType("S8[", (Icon) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SESSION;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.PROCEDURE;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DatabaseObjectType.createNewDatabaseObjectType("~W[W^[q*LI", (Icon) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getColumnList((TableColumnInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DBUtil.typesAreEquivalent(2, 2);
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      uidIdentifier0.setString(" _0zI9['W.V!:YI");
      System.setCurrentTimeMillis(12);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl0.getChangeLogFile();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("\"t+p");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileWrapperImpl fileWrapperImpl1 = fileWrapperFactoryImpl0.createTempFile("\"t+p", "\"t+p", fileWrapper0);
      FileWrapperImpl fileWrapperImpl2 = new FileWrapperImpl(fileWrapperImpl1);
      applicationFileWrappersImpl0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      FileWrapperImpl fileWrapperImpl3 = (FileWrapperImpl)applicationFileWrappersImpl0.getQuickStartGuideFile();
      FileWrapperImpl.createTempFile(")v<xnC%ni}pH", "\"t+p", fileWrapperImpl3);
      fileWrapperFactoryImpl0.createTempFile("%t,6[b(N7wq=$L~S4:", "x", (FileWrapper) fileWrapperImpl3);
      fileWrapperImpl1.createNewFile();
      applicationFileWrappersImpl0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      FileWrapperImpl fileWrapperImpl4 = new FileWrapperImpl(". Skipping FK constraint");
      FileWrapperImpl fileWrapperImpl5 = new FileWrapperImpl(fileWrapperImpl1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileWrapperImpl fileWrapperImpl6 = new FileWrapperImpl(fileWrapperImpl1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ". Skipping FK constraint");
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setFileWrapperFactory(fileWrapperFactoryImpl1);
      dBCopyPlugin0.getWebSite();
      DBUtil.validateColumnNames((ITableInfo) null, dBCopyPlugin0);
      assertNull(dBCopyPlugin0.getPasteToTableName());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = DBUtil.getLastStatementValues();
      assertNull(string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)2;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("/~1e{#Ud|GSN", "/~1e{#Ud|GSN", "/~1e{#Ud|GSN", "/~1e{#Ud|GSN", 1237, "EjBG:", (byte)66, (-1073741822), 10, 923, "EjBG:", "EjBG:", (-689), (byte)66, "EjBG:");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[6];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      tableColumnInfoArray0[2] = tableColumnInfo0;
      tableColumnInfoArray0[3] = tableColumnInfo0;
      tableColumnInfoArray0[4] = tableColumnInfo0;
      tableColumnInfoArray0[5] = tableColumnInfo0;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(tableColumnInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getTables((ISession) null, "(rB|", ")) from ", "mxv-4\fw^p&:/}5DPIA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(502);
      boolean boolean0 = DBUtil.typesAreEquivalent(502, (-631));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedHashSet<ProcedureInfo> linkedHashSet0 = new LinkedHashSet<ProcedureInfo>();
      int int0 = (-1023);
      int int1 = (-3486);
      DBUtil.typesAreEquivalent((-1023), (-3486));
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      PipedWriter pipedWriter0 = new PipedWriter();
      String string0 = ";E\"[i _TCw";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(";E\"[i _TCw");
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1023));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      assertTrue(dBCopyPreferenceBean0.isCopyData());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      Stack<ITableInfo> stack0 = new Stack<ITableInfo>();
      DBUtil.convertTableToObjectList(stack0);
      ConnectionWrapper connectionWrapper0 = null;
      try {
        connectionWrapper0 = new ConnectionWrapper((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginAppSettingsFolder();
      DBUtil.setLastStatementValues("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertNull(iSession0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(502);
      SQLAlias sQLAlias0 = new SQLAlias((IIdentifier) null);
      sQLAlias0.getDriverPropertiesClone();
      SQLAlias sQLAlias1 = new SQLAlias();
      sQLAlias1.getDriverPropertiesClone();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      uidIdentifier0.setString("c");
      sQLAlias0.setDriverIdentifier(integerIdentifier0);
      sQLAlias1.setPassword("DBUtil.info.bindblobmem");
      UidIdentifier uidIdentifier1 = new UidIdentifier();
      SQLDriver sQLDriver0 = new SQLDriver(uidIdentifier0);
      SQLDriver sQLDriver1 = new SQLDriver();
      JSpinner jSpinner0 = new JSpinner();
      jSpinner0.getMouseWheelListeners();
      UidIdentifier uidIdentifier2 = new UidIdentifier();
      sQLAlias1.setDriverIdentifier(uidIdentifier1);
      UidIdentifier uidIdentifier3 = new UidIdentifier();
      uidIdentifier3.setString("Khs[LZ9@2WfHHYgm3+c");
      sQLAlias1.getDriverPropertiesClone();
      System.setCurrentTimeMillis(16);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getSelectQuery(dBCopyPlugin0, "HT", (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.isKeyword((ISession) null, "g{d,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.deleteDataInExistingTable((ISession) null, "Query should be executed in the event dispatch thread", "0M^F1;#b_", "+wIW.[)DHhpn||j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = DBUtil.getLastStatement();
      assertNull(string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl0.getChangeLogFile();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("\"t+p");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileWrapperImpl fileWrapperImpl1 = fileWrapperFactoryImpl0.createTempFile("\"t+p", "\"t+p", fileWrapper0);
      FileWrapperImpl fileWrapperImpl2 = new FileWrapperImpl(fileWrapperImpl1);
      applicationFileWrappersImpl0.getPluginsDirectory();
      applicationFileWrappersImpl0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      FileWrapperImpl fileWrapperImpl3 = (FileWrapperImpl)applicationFileWrappersImpl0.getQuickStartGuideFile();
      FileWrapperImpl.createTempFile(")v<xnC%ni}pH", "\"t+p", fileWrapperImpl3);
      fileWrapperFactoryImpl0.createTempFile("%t,6[b(N7wq=$L~S4:", ". Skitping F& coNstraint", (FileWrapper) fileWrapperImpl3);
      fileWrapperImpl1.createNewFile();
      applicationFileWrappersImpl0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      FileWrapperImpl fileWrapperImpl4 = new FileWrapperImpl(". Skipping FK constraint");
      FileWrapperImpl fileWrapperImpl5 = new FileWrapperImpl(fileWrapperImpl1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileWrapperImpl fileWrapperImpl6 = new FileWrapperImpl(fileWrapperImpl1);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.removeComponentListener((ComponentListener) null);
      defaultTreeCellRenderer0.isDoubleBuffered();
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "0'}RVG", "UfEB\"h,~;0/!=", ". Skipping FK constraint", 95);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, "", "select count(*) from ", ")-(", 123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.checkKeyword((ISession) null, "QD&%SUnZ<DPTY'k;+Ox", "k I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setPasteMenuEnabled(true);
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.sanityCheckPreferences((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DBUtil.tableHasForeignKey("cT3ta", "-DmigratePreferences was specified; using ", "Z~v", foreignKeyInfo0, (SessionInfoProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)12;
      // Undeclared exception!
      try { 
        DBUtil.getTableInfo((ISession) null, "Query should be executed in the event dispatch thread", "Query should be executed in the event dispatch thread");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)1;
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      TableColumnInfo tableColumnInfo0 = null;
      // Undeclared exception!
      try { 
        DBUtil.isBinaryType((TableColumnInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte)113;
      byteArray0[3] = (byte)113;
      SynchronousQueue<ForeignKeyInfo> synchronousQueue0 = new SynchronousQueue<ForeignKeyInfo>();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      arrayList0.spliterator();
      SynchronousQueue<ForeignKeyInfo> synchronousQueue1 = new SynchronousQueue<ForeignKeyInfo>(false);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      synchronousQueue1.poll(1L, timeUnit0);
      SynchronousQueue<ForeignKeyInfo> synchronousQueue2 = new SynchronousQueue<ForeignKeyInfo>();
      synchronousQueue1.spliterator();
      SynchronousQueue<Integer> synchronousQueue3 = new SynchronousQueue<Integer>();
      SynchronousQueue<DataTypeInfo> synchronousQueue4 = new SynchronousQueue<DataTypeInfo>();
      arrayList0.clear();
      arrayList0.retainAll(synchronousQueue0);
      arrayList0.add((ITableInfo) null);
      ArrayList<ITableInfo> arrayList1 = new ArrayList<ITableInfo>();
      Object object0 = new Object();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("C", ":<kHc", ":<kHc", "C", (byte)113, "C", (-1247), (byte)113, (-1247), (-1247), ":<kHc", "r{+(6yj*DQ Q(;m0Rq$", (-653), 3398, "C");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.executeQuery((ISession) null, "zy=3En");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }
}
