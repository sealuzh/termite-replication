/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 18:59:58 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASSearch;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9594045983154567
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = (DecisionTable)AbstractClassifier.makeCopy(decisionTable0);
      decisionTable2.setSearch((ASSearch) null);
      AbstractClassifier.makeCopies(decisionTable1, 3734);
      decisionTable2.resetOptions();
      DecisionTable decisionTable4 = new DecisionTable();
      Instances instances0 = decisionTable3.m_theInstances;
      decisionTable3.m_saveMemory = false;
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      try { 
        jRip0.rulesetForOneClass(5, (Instances) null, 2, 3734);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      AbstractClassifier.makeCopy(jRip0);
      jRip0.setSeed((-22L));
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      jRip0.getSeed();
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7353390710828336
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      Instances instances1 = new Instances("@data", arrayList0, 785);
      arrayList0.listIterator(0);
      Instances instances2 = Instances.mergeInstances(instances1, instances1);
      JRip jRip0 = new JRip();
      SparseInstance sparseInstance0 = new SparseInstance(785);
      instances0.add((Instance) sparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      instances2.spliterator();
      Attribute attribute0 = new Attribute("@relation");
      Attribute attribute1 = new Attribute("@data", 3);
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      jRip_RipperRule1.toString(attribute0);
      jRip_RipperRule2.hasAntds();
      JRip.RipperRule jRip_RipperRule3 = jRip0.new RipperRule();
      jRip_RipperRule1.covers(sparseInstance0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd0.covers(sparseInstance0);
      // Undeclared exception!
      try { 
        jRip_RipperRule3.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5419272964839297
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utils.SMALL = (-426.90786957636146);
      Attribute attribute0 = new Attribute("}gh@{QFXQ");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("numeric", arrayList0, 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "integer");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "INy7Z\"oZu!Y4");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      JRip jRip1 = (JRip)AbstractClassifier.makeCopy(jRip0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      jRip_RipperRule1.setConsequent(4);
      jRip_RipperRule0.hasAntds();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("date", arrayList0, 1);
      Instances instances2 = new Instances(instances1);
      jRip_RipperRule1.grow(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip1.getCheckErrorRate();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances1, 571.739540239, 0);
      jRip_RipperRule1.prune(instances2, false);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      DecisionTable decisionTable0 = new DecisionTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip0.setUsePruning(false);
      SystemInUtil.addInputLine(".U]ibxZqA+7*SQ");
      Instances instances0 = decisionTable0.m_dtInstances;
      boolean boolean0 = jRip0.getUsePruning();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6612991845318494
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utils.SMALL = (-426.90786957636146);
      Attribute attribute0 = new Attribute("}gh@{QFXQ");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("numeric", arrayList2, 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      JRip jRip1 = (JRip)AbstractClassifier.makeCopy(jRip0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.setConsequent(4);
      jRip_RipperRule0.hasAntds();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("date", arrayList0, 1);
      Instances instances2 = new Instances(instances1);
      jRip_RipperRule1.grow(instances0);
      jRip_RipperRule0.prune(instances1, true);
      jRip_RipperRule0.prune(instances1, true);
      jRip_RipperRule0.copy();
      JRip.RipperRule jRip_RipperRule2 = jRip1.new RipperRule();
      jRip_RipperRule1.hasAntds();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(3);
      jRip_NominalAntd0.covers(sparseInstance0);
      try { 
        jRip_RipperRule2.grow(instances2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4196189862824298
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      jRip0.optimizationsTipText();
      jRip0.setOptimizations((-2146639476));
      jRip0.getOptions();
      jRip0.getFolds();
      jRip0.toString();
      jRip0.getCapabilities();
      System.setCurrentTimeMillis((-2146639476));
      int int0 = jRip0.getOptimizations();
      assertEquals((-2146639476), int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5130001999799116
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utils.SMALL = (-426.90786957636146);
      Attribute attribute0 = new Attribute("}gh@{QFXQ");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("numeric", arrayList2, 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "integer");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "INy7Z\"oZu!Y4");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      AbstractClassifier.makeCopy(jRip0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.setConsequent(4);
      jRip_RipperRule0.hasAntds();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("date", arrayList0, 1);
      Instances instances2 = new Instances(instances1);
      jRip_RipperRule1.grow(instances0);
      assertEquals(4.0, jRip_RipperRule1.getConsequent(), 0.01);
      
      jRip0.getCheckErrorRate();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances1, 571.739540239, 0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SystemInUtil.addInputLine((String) null);
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byteArray0[6] = (byte) (-38);
      byteArray0[3] = (byte)102;
      byteArray0[5] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "we");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tIn case the data gets stored in a file, then this flag can be used\n\tto suppress the reglar output.\n\t(default: not suppressed)");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      AbstractClassifier.makeCopy(regressionByDiscretization0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "we");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((byte)126);
      jRip_RipperRule0.hasAntds();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nFinal ruleset: ", arrayList0, 0);
      Instances instances1 = new Instances(instances0);
      jRip_RipperRule0.grow(instances1);
      assertEquals(126.0, jRip_RipperRule0.getConsequent(), 0.01);
      
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      int[] intArray0 = new int[3];
      intArray0[1] = 3;
      intArray0[2] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 3);
      DenseInstance denseInstance0 = new DenseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(denseInstance0);
      DenseInstance denseInstance1 = new DenseInstance(binarySparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(109, intArray0, 1);
      DenseInstance denseInstance2 = new DenseInstance(310);
      denseInstance0.setWeight((-2966.227936026075));
      DenseInstance denseInstance3 = new DenseInstance(2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = (-963.98068);
      jRip_NumericAntd0.covers(binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(3);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 310;
      doubleArray0[1] = (double) 310;
      doubleArray0[2] = (double) 310;
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(2, doubleArray0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance5);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance3);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.446718530861712
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      Instances instances1 = new Instances("@data", arrayList0, 785);
      arrayList0.listIterator(0);
      Instances instances2 = Instances.mergeInstances(instances1, instances1);
      JRip jRip0 = new JRip();
      SparseInstance sparseInstance0 = new SparseInstance(785);
      instances0.add((Instance) sparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("", 78);
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances1, 1, 0);
      jRip_NumericAntd0.getMaxInfoGain();
      JRip jRip2 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip2.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, (-426.90786957636146), 3);
      jRip0.checkErrorRateTipText();
      jRip_NominalAntd0.splitData(instances2, (-122.64807120291407), 197.711);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0608333657846836
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-426.90786957636146);
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("numeric", arrayList2, 0);
      Instances.mergeInstances(instances0, instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      AbstractInstance.s_numericAfterDecimalPoint = 310;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      sparseInstance0.toString();
      binarySparseInstance0.isMissing((-71));
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(sparseInstance2);
      System.setCurrentTimeMillis((-1494L));
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute1 = new Attribute("@attribute", protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 2, Double.NaN);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      int[] intArray0 = new int[3];
      intArray0[0] = 109;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(denseInstance0);
      DenseInstance denseInstance1 = new DenseInstance(binarySparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      denseInstance0.copy();
      binarySparseInstance1.copy();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(109, intArray0, 1);
      DenseInstance denseInstance2 = new DenseInstance(310);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (double) 310;
      jRip_NumericAntd0.covers(binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      jRip_NumericAntd0.toString();
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(0);
      CoverTree coverTree0 = new CoverTree();
      assertEquals("The distance function to use for finding neighbours (default: weka.core.EuclideanDistance). ", coverTree0.distanceFunctionTipText());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "izations";
      stringArray0[1] = "1/4MiDfT6WMw";
      stringArray0[2] = "-O";
      stringArray0[3] = "b[LAH[";
      stringArray0[4] = "(`o-heW>~e;p(5";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"b[LAH[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.287991730133441
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      jRip0.optimizationsTipText();
      jRip0.optimizationsTipText();
      jRip0.setOptimizations((-2146639476));
      jRip0.getOptions();
      jRip0.getFolds();
      jRip0.seedTipText();
      jRip0.getCapabilities();
      System.setCurrentTimeMillis((-2146639476));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1049561813316413
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-426.90786957636146);
      Attribute attribute0 = new Attribute("", "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("numeric", arrayList2, 0);
      Instances.mergeInstances(instances0, instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      binarySparseInstance0.toStringNoWeight(1438);
      instances0.add((Instance) binarySparseInstance0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      AbstractInstance.s_numericAfterDecimalPoint = 310;
      jRip_NumericAntd0.accu = (-7.0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.toString(attribute0, 3);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance0.toString();
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.value(attribute0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(sparseInstance1);
      jRip_NumericAntd0.toString();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 310, (-973.4221104006));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Instances instances0 = new Instances((String) null, arrayList1, 0);
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.PRC;
      arrayList0.spliterator();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0);
      Attribute attribute0 = new Attribute(".arff", list0, (-38));
      arrayList1.add(attribute0);
      Locale locale1 = Locale.TAIWAN;
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set1, locale_FilteringMode0);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances1 = decisionTable1.m_dtInstances;
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.579755221006731
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Instances instances0 = new Instances("5t=", arrayList1, 334);
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.PRC;
      arrayList1.spliterator();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("@relation", list1, (-3));
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("integer", 415);
      Attribute.main((String[]) null);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.prune(instances0, true);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      double double0 = jRip_NumericAntd0.getMaxInfoGain();
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      Attribute attribute2 = new Attribute(".arff", instances0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute2);
      JRip.NominalAntd jRip_NominalAntd1 = jRip1.new NominalAntd(attribute2);
      attribute2.addStringValue("@attribute");
      String string0 = jRip_NominalAntd1.toString();
      assertEquals(".arff = ", string0);
      
      jRip_NominalAntd1.splitData(instances0, 1, 2.0);
      assertEquals(3, jRip1.getFolds());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertTrue(jRip1.getUsePruning());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertFalse(jRip1.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9471865956069645
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("numeric", arrayList2, 0);
      Instances.mergeInstances(instances0, instances0);
      JRip jRip1 = new JRip();
      Attribute attribute1 = new Attribute("~8no<I", 1);
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@data";
      stringArray0[1] = "@end";
      stringArray0[2] = "";
      stringArray0[3] = "@data";
      stringArray0[4] = "@data";
      jRip0.setOptions(stringArray0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute2 = new Attribute("@attribute", protectedProperties0);
      JRip jRip2 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip2.new NominalAntd(attribute1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (-472.9065442698241);
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, doubleArray0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(jRip2.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(boolean0);
      assertTrue(jRip2.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      jRip0.setOptions(stringArray0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = jRip0.getOptimizations();
      assertEquals(2, int0);
      
      String string0 = jRip0.foldsTipText();
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      
      JRip.main((String[]) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getAttr();
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      
      jRip0.globalInfo();
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator<ClassOrder> unaryOperator0 = UnaryOperator.identity();
      Function<Object, ClassOrder> function0 = (Function<Object, ClassOrder>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, ClassOrder> function1 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function0);
      Function<Object, ClassOrder> function2 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function3 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function4 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function2);
      Function.identity();
      UnaryOperator<ClassOrder> unaryOperator1 = UnaryOperator.identity();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      unaryOperator1.compose((Function<? super Integer, ? extends ClassOrder>) function4);
      Function<Object, ClassOrder> function5 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function3);
      Function<Object, ClassOrder> function6 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<ClassOrder, String> function7 = (Function<ClassOrder, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.andThen((Function<? super ClassOrder, ? extends Integer>) function8);
      function5.andThen((Function<? super ClassOrder, ? extends String>) function7);
      UnaryOperator.identity();
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.andThen((Function<? super ClassOrder, ? extends String>) function9);
      unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function6);
      Function.identity();
      unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function6);
      function6.apply(function2);
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function4);
      unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function6);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function4);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("Mathematics of Computation", 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("Mathematics of Computation <= NaN", string0);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(6);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(boolean0);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.listIterator();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("numeric", arrayList2, 0);
      Instances.mergeInstances(instances0, instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray0 = new int[3];
      intArray0[0] = 109;
      intArray0[1] = 3;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 300.0, 109);
      SparseInstance sparseInstance0 = null;
      SparseInstance sparseInstance1 = null;
      try {
        sparseInstance1 = new SparseInstance((SparseInstance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAccuRate();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("", list0, 713);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getCover();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      DecisionTable decisionTable0 = new DecisionTable();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("weka.classifiers.meta.RandomSubfpace", arrayList1, 5);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      decisionTable1.m_classIsNominal = true;
      DecisionTable decisionTable3 = new DecisionTable();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale locale0 = Locale.GERMAN;
      linkedList0.add(locale0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList2, (Collection<Locale>) linkedList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList3 = new ArrayList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>(linkedList3);
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList5 = new ArrayList<Locale>();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      CoverTree coverTree0 = new CoverTree();
      Attribute attribute0 = new Attribute("Cz;}>4@Ueo/|\"I|`w", instances0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 1, 2202.574);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3469992135645263
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n\tLM num: ");
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = 78;
      intArray0[6] = 2512;
      jRip0.setOptions(stringArray0);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(11, stringArray0.length);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      AbstractClassifier.makeCopy(jRip0);
      assertEquals(1L, jRip0.getSeed());
      
      jRip0.setSeed(0L);
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      long long0 = jRip0.getSeed();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.053085404600997
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Instances instances0 = new Instances("numeric", arrayList1, 0);
      Instances.mergeInstances(instances0, instances0);
      Attribute attribute1 = new Attribute("~8no<I", 1);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.debugTipText();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule2 = (JRip.RipperRule)jRip_RipperRule0.copy();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.splitData(instances0, 2, (-1.0));
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      jRip0.setSeed(1);
      Instances instances1 = new Instances("@relation", arrayList0, 4);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule3 = jRip1.new RipperRule();
      jRip1.setUsePruning(true);
      jRip_RipperRule2.prune(instances1, true);
      jRip1.getSeed();
      DenseInstance denseInstance0 = new DenseInstance(1);
      jRip_NominalAntd0.maxInfoGain = (-1.0);
      denseInstance0.getRevision();
      double double0 = jRip_NominalAntd0.getAttrValue();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tIn case the data gets stored in a file, then this flag can be used\n\tto suppress the regular output.\n\t(default: not suppressed)");
      jRip0.setDebug(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nLWKEH$VF`cT");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = null;
      try { 
        jRip0.rulesetForOneClass(0.0, (Instances) null, 0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator<ClassOrder> unaryOperator0 = UnaryOperator.identity();
      Function<Object, ClassOrder> function0 = (Function<Object, ClassOrder>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, ClassOrder> function1 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function0);
      Function<Object, ClassOrder> function2 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function3 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function4 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function2);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.andThen((Function<? super ClassOrder, ? extends Integer>) function5);
      Function.identity();
      UnaryOperator<ClassOrder> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ? extends ClassOrder>) function4);
      Function<Object, ClassOrder> function6 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function1);
      unaryOperator1.compose((Function<? super Integer, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function7 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function3);
      function7.apply("");
      Function<Object, ClassOrder> function8 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<ClassOrder, String> function9 = (Function<ClassOrder, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function10 = function7.andThen((Function<? super ClassOrder, ? extends String>) function9);
      UnaryOperator<Locale> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Locale, ? extends ClassOrder>) function6);
      Function<Object, String> function11 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function7.andThen((Function<? super ClassOrder, ? extends String>) function11);
      unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function8);
      unaryOperator1.andThen((Function<? super ClassOrder, ? extends String>) function10);
      function8.apply("bSTO7.T");
      UnaryOperator.identity();
      Function<Object, ClassOrder> function12 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function8);
      Function.identity();
      unaryOperator2.andThen((Function<? super Locale, ? extends ClassOrder>) function12);
      UnaryOperator.identity();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip1 = new JRip();
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      int int0 = jRip1.getFolds();
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
      assertEquals(3, int0);
      assertFalse(jRip1.getDebug());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertTrue(jRip1.getCheckErrorRate());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.clone();
      locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("", linkedList0, 255);
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      JRip.NominalAntd jRip_NominalAntd0 = null;
      try {
        jRip_NominalAntd0 = jRip0.new NominalAntd((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SystemInUtil.addInputLine((String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-38);
      byteArray1[6] = (byte) (-38);
      byteArray1[3] = (byte)102;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray1[5] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "we");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tIn case the data gets stored in a file, then this flag can be used\n\tto suppress the reglar output.\n\t(default: not suppressed)");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SystemInUtil.addInputLine("m");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      int[] intArray0 = new int[8];
      intArray0[0] = 13;
      intArray0[1] = 13;
      intArray0[2] = 2923;
      intArray0[4] = (-1);
      intArray0[2] = (-2146820467);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), intArray0, 0);
      DenseInstance denseInstance0 = new DenseInstance(13);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(24);
      binarySparseInstance2.setMissing(1595);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(sparseInstance0);
      CoverTree coverTree0 = new CoverTree();
      Attribute attribute0 = new Attribute((String) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance1 = new SparseInstance(4, doubleArray0, intArray0, 2260);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((Instance) sparseInstance1);
      jRip_NominalAntd0.covers(binarySparseInstance7);
      CoverTree coverTree1 = new CoverTree();
      assertEquals(0.0, coverTree1.measureNumLeaves(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7490906203903507
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UnaryOperator<ClassOrder> unaryOperator0 = UnaryOperator.identity();
      Function<Object, ClassOrder> function0 = (Function<Object, ClassOrder>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, ClassOrder> function1 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function0);
      Function<Object, ClassOrder> function2 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function3 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function4 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function2);
      Function.identity();
      UnaryOperator<ClassOrder> unaryOperator1 = UnaryOperator.identity();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      unaryOperator1.compose((Function<? super Integer, ? extends ClassOrder>) function4);
      Function<Object, ClassOrder> function5 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function3);
      Function<Object, ClassOrder> function6 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<ClassOrder, String> function7 = (Function<ClassOrder, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.andThen((Function<? super ClassOrder, ? extends Integer>) function8);
      function5.andThen((Function<? super ClassOrder, ? extends String>) function7);
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.andThen((Function<? super ClassOrder, ? extends String>) function9);
      function3.apply(function1);
      unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function6);
      Function.identity();
      Function<Object, ClassOrder> function10 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function6);
      function6.apply(function2);
      UnaryOperator<ClassOrder> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function4);
      unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function10);
      UnaryOperator<ClassOrder> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      Function<Object, ClassOrder> function11 = unaryOperator3.compose((Function<? super Object, ? extends ClassOrder>) function5);
      unaryOperator2.compose((Function<? super Object, ? extends ClassOrder>) function11);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("Ard|,DATj{>B`EI8Z", 1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "relational";
      jRip0.setOptions(stringArray0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      UnaryOperator<Locale> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<ClassOrder> unaryOperator1 = UnaryOperator.identity();
      Function<Object, ClassOrder> function0 = (Function<Object, ClassOrder>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, ClassOrder> function1 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function0);
      unaryOperator0.andThen((Function<? super Locale, ? extends ClassOrder>) function1);
      linkedList1.replaceAll(unaryOperator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass(1.0E-6, (Instances) null, 3, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.8875113783568844
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("numeric", arrayList2, 0);
      Instances.mergeInstances(instances0, instances0);
      JRip jRip1 = new JRip();
      Attribute attribute1 = new Attribute("@data", 2000);
      jRip0.setFolds(4);
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip1.debugTipText();
      jRip0.minNoTipText();
      jRip_NumericAntd0.getSplitPoint();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      double double0 = 0.975;
      jRip_NominalAntd0.splitData(instances0, Double.NaN, 0.975);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = new Instances((String) null, arrayList0, 2);
      Instances instances2 = Instances.mergeInstances(instances1, instances0);
      try { 
        jRip0.buildClassifier(instances2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.301608716407634
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      arrayList0.listIterator(0);
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(785);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      denseInstance0.copy();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      binarySparseInstance3.copy();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(2196, intArray0, (-3300));
      DenseInstance denseInstance1 = new DenseInstance(2196);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("@data", protectedProperties2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getMaxInfoGain();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 1000.0, 1633.169625085602);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = ".arff";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("@data", arrayList0, 785);
      instances0.remove((Object) null);
      Instances instances2 = Instances.mergeInstances(instances1, instances1);
      JRip jRip0 = new JRip();
      instances0.spliterator();
      Attribute attribute0 = new Attribute("@relation", (String) null, 785);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances2, false);
      jRip_RipperRule0.prune(instances0, false);
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertNotSame(jRip_RipperRule1, jRip_RipperRule0);
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      Instances.mergeInstances(instances0, instances2);
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.448437455613918
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("\tDon't include locally prodictive attributes.");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.listIterator();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Instances instances0 = new Instances("numeric", arrayList0, 0);
      Instances instances1 = new Instances("@relation", arrayList1, 4);
      JRip jRip1 = new JRip();
      Attribute attribute1 = new Attribute("real");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.remove((Object) arrayList0);
      arrayList0.containsAll(arrayList1);
      Attribute attribute2 = new Attribute("@end", instances0, 2);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[2] = (double) 4;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 2;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute2);
      jRip_NumericAntd0.splitData(instances1, 4660.720143761036, 490.27);
      jRip_NumericAntd0.getMaxInfoGain();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances1, 1, 64.0);
      CoverTree coverTree0 = new CoverTree();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@attribute";
      stringArray0[1] = "real";
      stringArray0[2] = "relational";
      stringArray0[3] = "real";
      stringArray0[4] = ".arff";
      stringArray0[5] = ".bsi";
      stringArray0[4] = "relational";
      stringArray0[8] = "integer";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.listIterator();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Instances instances0 = new Instances("numeric", arrayList1, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 109;
      intArray0[1] = 3;
      intArray0[2] = 2512;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 3);
      DenseInstance denseInstance0 = new DenseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(denseInstance0);
      DenseInstance denseInstance1 = new DenseInstance(binarySparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(109, intArray0, 1);
      DenseInstance denseInstance2 = new DenseInstance(2196);
      DenseInstance denseInstance3 = new DenseInstance(0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance2);
      assertTrue(boolean0);
      
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-425.00728134520574);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2196;
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      CoverTree coverTree0 = new CoverTree();
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("8118", string0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      
      jRip0.setMinNo(0.0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      double double0 = jRip0.getMinNo();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Bagging bagging0 = new Bagging();
      AbstractClassifier.makeCopy(bagging0);
      boolean boolean0 = jRip0.getDebug();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale locale0 = new Locale("kYNnG", "kYNnG");
      Locale locale1 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode1);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      List<Locale> list0 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) list0);
      LinkedList<String> linkedList5 = new LinkedList<String>();
      DecisionTable decisionTable0 = new DecisionTable();
      boolean boolean1 = jRip_RipperRule0.hasAntds();
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(boolean1 == boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SystemInUtil.addInputLine((String) null);
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byteArray0[6] = (byte) (-38);
      byteArray0[3] = (byte)102;
      byteArray0[5] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "we");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tIn case the data gets stored in a file, then this flag can be used\n\tto suppress the reglar output.\n\t(default: not suppressed)");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      AbstractClassifier.makeCopy(regressionByDiscretization0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "we");
      regressionByDiscretization0.setUseEqualFrequency(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utils.log2 = (double) 0;
      SystemInUtil.addInputLine("m");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m");
      // Undeclared exception!
      try { 
        jRip0.getMeasure(";^Rn9LM;hF\"v*PTU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ;^Rn9LM;hF\"v*PTU not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator.identity();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-6.78214234));
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      AbstractClassifier.makeCopy(jRip0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip0.getMinNo();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("$", arrayList0, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator<ClassOrder> unaryOperator0 = UnaryOperator.identity();
      Function<Object, ClassOrder> function0 = (Function<Object, ClassOrder>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, ClassOrder> function1 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function0);
      Function<Object, ClassOrder> function2 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function3 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function.identity();
      UnaryOperator<ClassOrder> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ? extends ClassOrder>) function3);
      Function<Object, ClassOrder> function4 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function5 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function2);
      Function<Object, ClassOrder> function6 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<ClassOrder, String> function7 = (Function<ClassOrder, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.compose((Function<? super Integer, ?>) function6);
      function5.andThen((Function<? super ClassOrder, ? extends String>) function7);
      UnaryOperator<Locale> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Locale, ? extends ClassOrder>) function4);
      function1.compose((Function<? super Integer, ?>) function5);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.andThen((Function<? super ClassOrder, ? extends String>) function8);
      unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function6);
      function6.apply("bSTO7.T");
      UnaryOperator.identity();
      Function<Object, ClassOrder> function9 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function6);
      unaryOperator2.andThen((Function<? super Locale, ? extends ClassOrder>) function9);
      UnaryOperator.identity();
      Attribute attribute0 = new Attribute("t");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" => t=", string0);
      
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip1 = new JRip();
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string1 = jRip_NominalAntd0.toString();
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals("t = ", string1);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator<ClassOrder> unaryOperator0 = UnaryOperator.identity();
      Function<Object, ClassOrder> function0 = (Function<Object, ClassOrder>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, ClassOrder> function1 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function0);
      Function<Object, ClassOrder> function2 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function3 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function4 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function2);
      Function.identity();
      UnaryOperator<ClassOrder> unaryOperator1 = UnaryOperator.identity();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      unaryOperator1.compose((Function<? super Integer, ? extends ClassOrder>) function4);
      unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function5 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function3);
      Function<Object, ClassOrder> function6 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<ClassOrder, String> function7 = (Function<ClassOrder, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.andThen((Function<? super ClassOrder, ? extends Integer>) function8);
      function5.andThen((Function<? super ClassOrder, ? extends String>) function7);
      UnaryOperator.identity();
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.andThen((Function<? super ClassOrder, ? extends String>) function9);
      unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function6);
      Function.identity();
      UnaryOperator.identity();
      Function<Object, ClassOrder> function10 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function6);
      UnaryOperator<ClassOrder> unaryOperator2 = UnaryOperator.identity();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("icianry", arrayList0, 12);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      function10.apply(jRip_NumericAntd1);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      
      unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function4);
      unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function10);
      UnaryOperator<ClassOrder> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      Function<Object, ClassOrder> function11 = unaryOperator3.compose((Function<? super Object, ? extends ClassOrder>) function5);
      unaryOperator2.compose((Function<? super Object, ? extends ClassOrder>) function11);
      JRip jRip1 = new JRip();
      Attribute attribute1 = new Attribute("Mathematics of Computation", (-345));
      JRip.NumericAntd jRip_NumericAntd2 = jRip1.new NumericAntd(attribute1);
      String string0 = jRip_NumericAntd2.toString();
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd2.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd2.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd2.getAccu(), 0.01);
      assertEquals(2, jRip1.getOptimizations());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals("Mathematics of Computation <= NaN", string0);
      assertFalse(jRip1.getDebug());
      assertEquals(3, jRip1.getFolds());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd2.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.05477796069814
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      DecisionTable decisionTable0 = new DecisionTable();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("weka.classifiers.meta.RandomSubSpace", arrayList1, 69);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("\t Right: ", instances0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Object object0 = jRip_NominalAntd0.copy();
      instances0.remove(object0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JRip jRip1 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      decisionTable2.setCrossVal(0);
      ClassOrder classOrder0 = new ClassOrder();
      try { 
        jRip1.rulesetForOneClass(3, instances0, 5, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.521452740110338
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator<ClassOrder> unaryOperator0 = UnaryOperator.identity();
      Function<Object, ClassOrder> function0 = (Function<Object, ClassOrder>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, ClassOrder> function1 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function0);
      Function<Object, ClassOrder> function2 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function3 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function4 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function2);
      Function.identity();
      UnaryOperator<ClassOrder> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ? extends ClassOrder>) function4);
      Function<Object, ClassOrder> function5 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function6 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function3);
      Function<Object, ClassOrder> function7 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<ClassOrder, String> function8 = (Function<ClassOrder, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.andThen((Function<? super ClassOrder, ? extends String>) function8);
      UnaryOperator<Locale> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Locale, ? extends ClassOrder>) function5);
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.andThen((Function<? super ClassOrder, ? extends String>) function9);
      unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function7);
      function7.apply("bSTO7.T");
      UnaryOperator.identity();
      Function<Object, ClassOrder> function10 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function7);
      unaryOperator2.andThen((Function<? super Locale, ? extends ClassOrder>) function10);
      UnaryOperator.identity();
      Attribute attribute0 = new Attribute("t");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" => t=", string0);
      
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip1 = new JRip();
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(3, jRip1.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertTrue(jRip1.getCheckErrorRate());
      assertTrue(jRip1.getUsePruning());
      assertEquals(1L, jRip1.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertFalse(jRip1.getDebug());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      SystemInUtil.addInputLine(".U]ibxZqA+7*SQ");
      decisionTable1.m_majority = 0.5;
      Instances instances0 = decisionTable1.m_dtInstances;
      boolean boolean0 = jRip0.getUsePruning();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(boolean0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      int[] intArray0 = new int[3];
      intArray0[0] = 109;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(denseInstance0);
      DenseInstance denseInstance1 = new DenseInstance(binarySparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      denseInstance0.copy();
      binarySparseInstance1.copy();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(109, intArray0, 1);
      DenseInstance denseInstance2 = new DenseInstance(2196);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      intArray0[0] = 2196;
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance2);
      assertTrue(boolean0);
      
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.toString(109, 2196);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(0);
      CoverTree coverTree0 = new CoverTree();
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertNotSame(jRip_NumericAntd0, jRip_NumericAntd1);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("\tDon't include locally predictive attributes.");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.listIterator();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("numeric", arrayList2, 0);
      Instances instances1 = new Instances("@relation", arrayList2, 4);
      JRip jRip1 = new JRip();
      Attribute attribute1 = new Attribute("real");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute2 = new Attribute("TE[<OA%", protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute2);
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = (double) 3;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (-986.0);
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-138.634), doubleArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.prune(instances0, false);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute2);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.getMaxInfoGain();
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        RuleStats.partition(instances0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.861378820099868
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      Attribute attribute0 = new Attribute("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      jRip0.enumerateMeasures();
      jRip_NumericAntd0.getAccu();
      jRip_NumericAntd0.accu = (-424.8785097687573);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("p}J3", arrayList0, 4);
      instances0.deleteWithMissing(attribute0);
      jRip_NumericAntd0.accu = Double.POSITIVE_INFINITY;
      attribute0.addRelation(instances0);
      jRip0.setFolds(2);
      jRip0.setUsePruning(true);
      jRip_NumericAntd0.toString();
      jRip0.debugTipText();
      jRip0.minNoTipText();
      jRip0.getMinNo();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "relational";
      stringArray0[2] = "@data";
      stringArray0[3] = "@relation";
      stringArray0[4] = "real";
      stringArray0[5] = "@relation";
      stringArray0[6] = "weka/core/Capabilities.props";
      jRip0.setOptions(stringArray0);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.listIterator();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Instances instances0 = new Instances("numeric", arrayList1, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 109;
      intArray0[1] = 3;
      intArray0[2] = 2512;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 3);
      DenseInstance denseInstance0 = new DenseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(denseInstance0);
      DenseInstance denseInstance1 = new DenseInstance(binarySparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(109, intArray0, 1);
      DenseInstance denseInstance2 = new DenseInstance(2196);
      DenseInstance denseInstance3 = new DenseInstance(denseInstance0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance2);
      assertTrue(boolean0);
      
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-425.00728134520574);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2196;
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      CoverTree coverTree0 = new CoverTree();
      String string0 = jRip_NumericAntd0.getRevision();
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals("8118", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tIn case the data gets stored in a file, then this flag can be used\n\tto suppress the reglar output.\n\t(default: not suppressed)");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      JRip jRip0 = new JRip();
      jRip0.usePruningTipText();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u<E07/Z(");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u<E07/Z(");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      SystemInUtil.addInputLine("u<E07/Z(");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nLWKEH$VF`cT");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[6];
      intArray0[0] = (-452);
      intArray0[1] = 1984234380;
      intArray0[2] = (-706);
      intArray0[3] = 69;
      intArray0[4] = (-63);
      intArray0[5] = (-3837);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-3837));
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SystemInUtil.addInputLine("we");
      JRip jRip0 = new JRip();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tIn case the data gets stored in a file, then this flag can be used\n\tto suppress the reglar output.\n\t(default: not suppressed)");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      AbstractClassifier.makeCopy(regressionByDiscretization0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Stacking: No meta scheme selected.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utils.log2 = 3752.392584292;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      SystemInUtil.addInputLine("8");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("nLWKEH$VF`cT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nLWKEH$VF`cT not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("@data", arrayList0, 785);
      Instances instances2 = Instances.mergeInstances(instances1, instances1);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute(".bsi", 785);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.copy();
      Instances.mergeInstances(instances0, instances2);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList2.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setOptimizations((-2236));
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.hasAntds();
      double double0 = jRip_RipperRule0.getConsequent();
      assertEquals((-2236), jRip0.getOptimizations());
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode2);
      Attribute attribute0 = new Attribute("", list2);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getMaxInfoGain();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, (-1461.313233816745), Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      decisionTable0.m_classIsNominal = true;
      DecisionTable decisionTable2 = new DecisionTable();
      double[] doubleArray0 = new double[0];
      decisionTable2.m_classPriors = doubleArray0;
      decisionTable2.m_majority = (-1281.19455436116);
      Random.setNextRandom(1039);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties1);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      StringReader stringReader0 = new StringReader("real");
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator<ClassOrder> unaryOperator0 = UnaryOperator.identity();
      Function<Object, ClassOrder> function0 = (Function<Object, ClassOrder>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, ClassOrder> function1 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function0);
      Function<Object, ClassOrder> function2 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function3 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function4 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function2);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = function4.andThen((Function<? super ClassOrder, ? extends Integer>) function5);
      Function.identity();
      UnaryOperator<ClassOrder> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ? extends ClassOrder>) function4);
      Function<Object, ClassOrder> function7 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function1);
      unaryOperator1.compose((Function<? super Integer, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function8 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function3);
      function3.andThen((Function<? super ClassOrder, ? extends Integer>) function6);
      Function<ClassOrder, String> function9 = (Function<ClassOrder, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function10 = function4.andThen((Function<? super ClassOrder, ? extends String>) function9);
      UnaryOperator.identity();
      Function<Object, String> function11 = function4.andThen((Function<? super ClassOrder, ? extends String>) function10);
      Function<Object, ClassOrder> function12 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function8);
      function12.apply(function11);
      Function<Object, ClassOrder> function13 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function2);
      Function<Object, ClassOrder> function14 = function8.andThen((Function<? super ClassOrder, ? extends ClassOrder>) function13);
      Function.identity();
      UnaryOperator.identity();
      function13.apply(function1);
      UnaryOperator<ClassOrder> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ? extends ClassOrder>) function12);
      unaryOperator2.compose((Function<? super Object, ? extends ClassOrder>) function7);
      UnaryOperator<ClassOrder> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function13);
      unaryOperator3.compose((Function<? super Object, ? extends ClassOrder>) function14);
      unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function13);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-426.15860996649326);
      jRip0.seedTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-426.15860996649326));
      jRip_RipperRule0.covers((Instance) null);
      Locale locale0 = new Locale("nbdT[KpY", "The seed used for randomizing the data.");
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      locale0.getUnicodeLocaleAttributes();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("\nrepDL: ", (-1087.355));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=-1087.355
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setMinNo(Double.NaN);
      Bagging bagging0 = new Bagging();
      Bagging bagging1 = new Bagging();
      jRip_RipperRule0.covers((Instance) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale locale0 = new Locale("Inside m_Ruleset", "");
      locale0.getExtensionKeys();
      Locale locale1 = Locale.GERMAN;
      locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.ensureCapacity(3);
      Instances instances0 = new Instances("numeric", arrayList0, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 109;
      intArray0[1] = 3;
      intArray0[2] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 3);
      DenseInstance denseInstance0 = new DenseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(denseInstance0);
      DenseInstance denseInstance1 = new DenseInstance(binarySparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(109, intArray0, 1);
      DenseInstance denseInstance2 = new DenseInstance(2196);
      denseInstance0.setWeight((-2966.227936026075));
      DenseInstance denseInstance3 = new DenseInstance(2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = (double) 2196;
      jRip_NumericAntd0.covers(binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      jRip0.setFolds(0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(3);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2196;
      doubleArray0[1] = (double) 2196;
      doubleArray0[2] = (double) 2196;
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(2, doubleArray0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance3);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      Bagging bagging0 = new Bagging();
      Bagging bagging1 = new Bagging();
      jRip_RipperRule0.covers((Instance) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale locale0 = new Locale("Inside m_Ruleset", "");
      Locale locale1 = Locale.GERMAN;
      locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getRevision();
      Locale locale0 = new Locale("8118", "r7V\"?ZV9E(fN+Z-VJ");
      Locale.forLanguageTag("8118");
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      locale1.getUnicodeLocaleKeys();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      LinkedList<String> linkedList7 = new LinkedList<String>();
      LinkedList<Locale> linkedList8 = new LinkedList<Locale>();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("V^,E`QF:;UK&SuH_^J*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=v^,e`qf:;uk&suh_^j*
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator<ClassOrder> unaryOperator0 = UnaryOperator.identity();
      Function<Object, ClassOrder> function0 = (Function<Object, ClassOrder>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, ClassOrder> function1 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function0);
      Function<Object, ClassOrder> function2 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function3 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<Object, ClassOrder> function4 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function2);
      Function.identity();
      UnaryOperator<ClassOrder> unaryOperator1 = UnaryOperator.identity();
      FileSystemHandling.shouldAllThrowIOExceptions();
      unaryOperator1.compose((Function<? super Integer, ? extends ClassOrder>) function4);
      Function<Object, ClassOrder> function5 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function3);
      Function<Object, ClassOrder> function6 = unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function1);
      Function<ClassOrder, String> function7 = (Function<ClassOrder, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.andThen((Function<? super ClassOrder, ? extends Integer>) function8);
      function5.andThen((Function<? super ClassOrder, ? extends String>) function7);
      UnaryOperator.identity();
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.andThen((Function<? super ClassOrder, ? extends String>) function9);
      unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function6);
      function1.compose((Function<? super Instance, ?>) function6);
      Function.identity();
      Function<Object, ClassOrder> function10 = unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function6);
      UnaryOperator<ClassOrder> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ? extends ClassOrder>) function4);
      unaryOperator0.compose((Function<? super Object, ? extends ClassOrder>) function10);
      UnaryOperator<ClassOrder> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      Function<Object, ClassOrder> function11 = unaryOperator3.compose((Function<? super Object, ? extends ClassOrder>) function5);
      unaryOperator2.compose((Function<? super Object, ? extends ClassOrder>) function11);
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-46));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale locale1 = Locale.ITALIAN;
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode2);
      locale0.getDisplayLanguage(locale1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode3);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertNotSame(jRip_RipperRule0, jRip_RipperRule1);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.globalInfo();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }
}
