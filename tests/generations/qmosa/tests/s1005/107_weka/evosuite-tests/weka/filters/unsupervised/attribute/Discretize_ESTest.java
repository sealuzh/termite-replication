/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 17:43:04 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.68644405381145
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double double0 = (-1023.0795835);
      int int0 = 10;
      Filter.makeCopies(discretize0, 10);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1023.0795835);
      doubleArray0[1] = (-1023.0795835);
      doubleArray0[2] = (-1023.0795835);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "i);";
      discretize0.m_MakeBinary = true;
      stringArray0[1] = "Number of bins.";
      stringArray0[2] = "-R";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -R option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.850863601176158
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize("VVOpx931");
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray0[4] = doubleArray5;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.getAttributeIndices();
      discretize0.getAttributeIndices();
      discretize0.setUseBinNumbers(false);
      discretize0.setBins((-3094));
      discretize0.getCapabilities();
      discretize0.getRevision();
      discretize0.getAttributeIndices();
      discretize0.listOptions();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-1260));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize("(");
      assertFalse(discretize0.getFindNumBins());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-121);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.setFindNumBins(true);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-120);
      intArray0[1] = (int) (byte)4;
      intArray0[2] = (-2067947214);
      intArray0[3] = (int) (byte) (-119);
      intArray0[4] = (int) (byte) (-119);
      intArray0[5] = (int) (byte)4;
      Range.indicesToRangeList(intArray0);
      discretize0.listOptions();
      discretize0.m_CutPoints = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.useEqualFrequencyTipText();
      discretize0.findNumBinsTipText();
      discretize0.useEqualFrequencyTipText();
      discretize0.getUseBinNumbers();
      discretize0.getFindNumBins();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      multiFilter2.getFilters();
      MultiFilter multiFilter3 = (MultiFilter)Filter.makeCopy(multiFilter2);
      AllFilter allFilter0 = new AllFilter();
      allFilter0.toString();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      multiFilter4.getFilters();
      MultiFilter multiFilter6 = (MultiFilter)Filter.makeCopy(multiFilter3);
      AllFilter allFilter1 = new AllFilter();
      multiFilter3.getFilters();
      allFilter1.toString();
      MultiFilter multiFilter7 = new MultiFilter();
      MultiFilter multiFilter8 = new MultiFilter();
      multiFilter6.getFilters();
      AllFilter allFilter2 = new AllFilter();
      MultiFilter multiFilter9 = new MultiFilter();
      MultiFilter multiFilter10 = new MultiFilter();
      MultiFilter multiFilter11 = new MultiFilter();
      MultiFilter multiFilter12 = new MultiFilter();
      Discretize discretize0 = new Discretize("weka.filters.AllFilter");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-";
      stringArray0[1] = "weka.filters.AllFilter";
      stringArray0[2] = "weka.filters.AllFilter";
      stringArray0[3] = "-B <num>";
      stringArray0[4] = "weka.filters.AllFilter";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_ClassIndex = 10;
      discretize0.m_UseEqualFrequency = true;
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u)YPeo~MB>M");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'B");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u)YPeo~MB>M");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      int int0 = 11;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(11, (int[]) null, 11);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "3DF;<74Rjv%";
      double[] doubleArray0 = new double[8];
      doubleArray0[6] = (-405.14735);
      doubleArray0[1] = (-405.14735);
      doubleArray0[2] = (-405.14735);
      doubleArray0[3] = (-405.14735);
      doubleArray0[6] = (-405.14735);
      doubleArray0[5] = (-405.14735);
      doubleArray0[6] = (-405.14735);
      doubleArray0[7] = (-405.14735);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-405.14735), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      AllFilter allFilter1 = new AllFilter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray1 = new double[7][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      discretize0.binsTipText();
      discretize0.m_CutPoints = doubleArray1;
      discretize0.getCutPoints(1);
      discretize0.globalInfo();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8217005778876232
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "9W$/[D\"}";
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Discretize discretize0 = new Discretize("9W$/[D\"}");
      double[][] doubleArray1 = new double[15][9];
      discretize0.setMakeBinary(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9W$/[D\"}");
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.32348757868292
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize("t\"N6\"4");
      discretize0.m_UseEqualFrequency = true;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "t\"N6\"4";
      stringArray0[1] = "t\"N6\"4";
      stringArray0[2] = "t\"N6\"4";
      stringArray0[3] = "t\"N6\"4";
      stringArray0[4] = "t\"N6\"4";
      stringArray0[5] = "t\"N6\"4";
      discretize0.setUseEqualFrequency(true);
      Discretize.main(stringArray0);
      discretize0.getUseEqualFrequency();
      discretize0.setFindNumBins(true);
      discretize0.getBinRangesString(93);
      discretize0.getCapabilities();
      discretize0.getAttributeIndices();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize("B");
      discretize0.setBins((-2021161078));
      discretize0.setInvertSelection(true);
      discretize0.getInvertSelection();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2021161078);
      doubleArray0[1] = (double) (-2021161078);
      doubleArray0[2] = (double) (-2021161078);
      int[] intArray0 = new int[9];
      intArray0[3] = (-2021161078);
      intArray0[1] = (-2021161078);
      intArray0[2] = (-2021161078);
      intArray0[3] = 60;
      intArray0[4] = (-2021161078);
      intArray0[5] = (-2021161078);
      intArray0[6] = (-2021161078);
      intArray0[7] = (-2021161078);
      intArray0[8] = (-2021161078);
      SparseInstance sparseInstance0 = new SparseInstance((-2021161078), doubleArray0, intArray0, (-8));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      String string0 = "StdDev  ";
      String string1 = "C5e";
      // Undeclared exception!
      try { 
        binarySparseInstance0.attributeSparse((-2021161078));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize("\"position\" has unknown type");
      discretize0.getBinRangesString((-1073741822));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.setDesiredWeightOfInstancesPerInterval(1304.9);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4661625366632738
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "$Revision: 9172 $";
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Discretize discretize0 = new Discretize("$Revision: 9172 $");
      double[][] doubleArray1 = new double[11][9];
      binarySparseInstance1.toString();
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("wgVNsh.uXPFU|", list0, protectedProperties0);
      Attribute attribute1 = attribute0.copy("$Revision: 9172 $");
      binarySparseInstance0.value(attribute1);
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      SystemInUtil.addInputLine("$Revision: 9172 $");
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.binsTipText();
      discretize0.setMakeBinary(true);
      discretize0.getMakeBinary();
      discretize0.findNumBinsTipText();
      discretize0.useBinNumbersTipText();
      discretize0.attributeIndicesTipText();
      discretize0.makeBinaryTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      double[] doubleArray0 = null;
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance(4.8, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.makeCopies(multiFilter0, 1358);
      String[] stringArray0 = new String[2];
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      multiFilter2.getFilters();
      MultiFilter multiFilter3 = (MultiFilter)Filter.makeCopy(multiFilter2);
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      Filter.runFilter(multiFilter7, stringArray0);
      Filter.runFilter(multiFilter6, stringArray0);
      MultiFilter multiFilter8 = new MultiFilter();
      multiFilter8.getFilters();
      Filter.makeCopy(multiFilter8);
      AllFilter allFilter0 = new AllFilter();
      multiFilter7.getFilters();
      allFilter0.toString();
      MultiFilter multiFilter9 = new MultiFilter();
      Filter.runFilter(multiFilter9, stringArray0);
      Filter.runFilter(multiFilter7, stringArray0);
      MultiFilter multiFilter10 = new MultiFilter();
      multiFilter10.toString();
      MultiFilter multiFilter11 = new MultiFilter();
      multiFilter3.getFilters();
      AllFilter allFilter1 = new AllFilter();
      MultiFilter multiFilter12 = new MultiFilter();
      Filter.runFilter(multiFilter6, stringArray0);
      MultiFilter multiFilter13 = new MultiFilter();
      MultiFilter multiFilter14 = new MultiFilter();
      MultiFilter multiFilter15 = new MultiFilter();
      MultiFilter multiFilter16 = new MultiFilter();
      Discretize discretize0 = new Discretize("(-inf-");
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.714011200211496
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1686.5948528;
      doubleArray0[1] = 4.5;
      doubleArray0[3] = 1686.5948528;
      doubleArray0[4] = 1686.5948528;
      doubleArray0[5] = 1686.5948528;
      int[] intArray0 = new int[8];
      Discretize discretize0 = new Discretize("Setting input format");
      discretize0.setAttributeIndices("Setting input format");
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.setInvertSelection(true);
      discretize0.setAttributeIndicesArray(intArray0);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      Filter.runFilter(discretize0, stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(6, stringArray0.length);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5719579500515657
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "4Oa[Yf;. ";
      stringArray0[1] = "-B";
      stringArray0[2] = "-B";
      stringArray0[3] = "8dGmx?d7yFh-y!+C'V";
      stringArray0[4] = "-;5aZ?.zY!}IL@vX`";
      stringArray0[5] = "uq{]p[RZuN'uo6JJ7";
      stringArray0[6] = "5";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-B\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7300480657918285
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1686.5948528;
      SystemInUtil.addInputLine("2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-M");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Output binary attributes for discretized attributes.");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-M";
      stringArray0[1] = "Jf#7)BW(&RbS-K~";
      stringArray0[2] = "Output binary attributes for discretized attributes.";
      stringArray0[3] = "2";
      stringArray0[4] = "2";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.setOutputFormat();
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.801150207871118
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("Bin number optimization in conjunction with equal-frequency binning not implemented.");
      discretize0.getAttributeIndices();
      discretize0.setMakeBinary(true);
      discretize0.getOptions();
      discretize0.getCapabilities();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.makeCopies(multiFilter0, 1358);
      String[] stringArray0 = new String[2];
      Filter.runFilter(multiFilter0, stringArray0);
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      multiFilter2.getFilters();
      MultiFilter multiFilter3 = (MultiFilter)Filter.makeCopy(multiFilter2);
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      Filter.runFilter(multiFilter7, stringArray0);
      Filter.runFilter(multiFilter6, stringArray0);
      MultiFilter multiFilter8 = new MultiFilter();
      multiFilter8.getFilters();
      Filter.makeCopy(multiFilter8);
      AllFilter allFilter0 = new AllFilter();
      multiFilter7.getFilters();
      allFilter0.toString();
      MultiFilter multiFilter9 = new MultiFilter();
      Filter.runFilter(multiFilter9, stringArray0);
      Filter.runFilter(multiFilter7, stringArray0);
      MultiFilter multiFilter10 = new MultiFilter();
      multiFilter10.toString();
      MultiFilter multiFilter11 = new MultiFilter();
      multiFilter3.getFilters();
      AllFilter allFilter1 = new AllFilter();
      MultiFilter multiFilter12 = new MultiFilter();
      Filter.runFilter(multiFilter6, stringArray0);
      MultiFilter multiFilter13 = new MultiFilter();
      MultiFilter multiFilter14 = new MultiFilter();
      MultiFilter multiFilter15 = new MultiFilter();
      DenseInstance denseInstance0 = new DenseInstance(1358, (double[]) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1358);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.convertInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.makeCopies(multiFilter0, 1358);
      String[] stringArray0 = new String[2];
      Filter.runFilter(multiFilter0, stringArray0);
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      multiFilter2.getFilters();
      MultiFilter multiFilter3 = (MultiFilter)Filter.makeCopy(multiFilter2);
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      Filter.runFilter(multiFilter7, stringArray0);
      Filter.runFilter(multiFilter6, stringArray0);
      MultiFilter multiFilter8 = new MultiFilter();
      multiFilter8.getFilters();
      Filter.makeCopy(multiFilter8);
      AllFilter allFilter0 = new AllFilter();
      multiFilter7.getFilters();
      allFilter0.toString();
      MultiFilter multiFilter9 = new MultiFilter();
      Filter.runFilter(multiFilter9, stringArray0);
      Filter.runFilter(multiFilter7, stringArray0);
      MultiFilter multiFilter10 = new MultiFilter();
      multiFilter10.toString();
      MultiFilter multiFilter11 = new MultiFilter();
      multiFilter3.getFilters();
      AllFilter allFilter1 = new AllFilter();
      MultiFilter multiFilter12 = new MultiFilter();
      Filter.runFilter(multiFilter6, stringArray0);
      MultiFilter multiFilter13 = new MultiFilter();
      MultiFilter multiFilter14 = new MultiFilter();
      MultiFilter multiFilter15 = new MultiFilter();
      DenseInstance denseInstance0 = new DenseInstance(1358, (double[]) null);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.convertInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.958375710599929
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(boolean0);
      
      discretize0.setOutputFormat();
      discretize0.globalInfo();
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I7V:n#");
      discretize0.setUseBinNumbers(true);
      discretize0.useBinNumbersTipText();
      discretize0.getOptions();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[5];
      Range range0 = new Range("");
      System.setCurrentTimeMillis(0L);
      stringArray0[0] = "";
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      discretize0.getAttributeIndices();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.800378007098917
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      Locale.getISOCountries();
      discretize0.setMakeBinary(true);
      boolean boolean0 = discretize0.m_IgnoreClass;
      discretize0.getOptions();
      discretize0.setOutputFormat();
      int int0 = discretize0.m_NumBins;
      discretize0.getCutPoints(10);
      discretize0.setOutputFormat();
      Random.setNextRandom(2308);
      discretize0.setOutputFormat();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("2");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-R <col1,col2-col4,...>");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-R <col1,col2-col4,...>");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1Aq");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DaBM{5Zp/%");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      discretize0.getOptions();
      Random.setNextRandom(1946);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.883690599420432
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1686.5948528;
      doubleArray0[1] = 4.5;
      doubleArray0[2] = (double) 89;
      doubleArray0[3] = 1686.5948528;
      doubleArray0[4] = 1686.5948528;
      doubleArray0[5] = 1686.5948528;
      int[] intArray0 = new int[8];
      intArray0[0] = 89;
      intArray0[1] = 89;
      intArray0[2] = 89;
      intArray0[3] = 89;
      intArray0[5] = 89;
      Discretize discretize0 = new Discretize("Setting input format");
      discretize0.setAttributeIndices("YTE3PPlwyKG");
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.setInvertSelection(true);
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.getOptions();
      discretize0.setOutputFormat();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.makeCopies(multiFilter0, 1358);
      String[] stringArray0 = new String[2];
      Filter.runFilter(multiFilter0, stringArray0);
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      multiFilter0.getFilters();
      MultiFilter multiFilter3 = (MultiFilter)Filter.makeCopy(multiFilter2);
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      Filter.runFilter(multiFilter7, stringArray0);
      Filter.runFilter(multiFilter6, stringArray0);
      MultiFilter multiFilter8 = new MultiFilter();
      multiFilter8.getFilters();
      Filter.makeCopy(multiFilter8);
      AllFilter allFilter0 = new AllFilter();
      multiFilter7.getFilters();
      allFilter0.toString();
      MultiFilter multiFilter9 = new MultiFilter();
      Filter.runFilter(multiFilter9, stringArray0);
      Filter.runFilter(multiFilter7, stringArray0);
      MultiFilter multiFilter10 = new MultiFilter();
      multiFilter10.toString();
      MultiFilter multiFilter11 = new MultiFilter();
      multiFilter3.getFilters();
      AllFilter allFilter1 = new AllFilter();
      MultiFilter multiFilter12 = new MultiFilter();
      Filter.runFilter(multiFilter6, stringArray0);
      MultiFilter multiFilter13 = new MultiFilter();
      MultiFilter multiFilter14 = new MultiFilter();
      MultiFilter multiFilter15 = new MultiFilter();
      DenseInstance denseInstance0 = new DenseInstance(1358);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getFindNumBins();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SystemInUtil.addInputLine("2");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-R <col1,col2-col4,...>");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-R <col1,col2-col4,...>");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1AJR");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Discretize discretize0 = new Discretize("gBIsO1'$!");
      int int0 = discretize0.getBins();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, int0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[2];
      Filter.runFilter(multiFilter0, stringArray0);
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      multiFilter2.getFilters();
      MultiFilter multiFilter3 = (MultiFilter)Filter.makeCopy(multiFilter2);
      AllFilter allFilter0 = new AllFilter();
      allFilter0.toString();
      MultiFilter multiFilter4 = new MultiFilter();
      Filter.runFilter(multiFilter0, stringArray0);
      MultiFilter multiFilter5 = new MultiFilter();
      Filter.runFilter(multiFilter1, stringArray0);
      Filter.runFilter(multiFilter4, stringArray0);
      multiFilter4.getFilters();
      MultiFilter multiFilter6 = (MultiFilter)Filter.makeCopy(multiFilter3);
      AllFilter allFilter1 = new AllFilter();
      multiFilter3.getFilters();
      allFilter1.toString();
      MultiFilter multiFilter7 = new MultiFilter();
      Filter.runFilter(multiFilter5, stringArray0);
      Filter.runFilter(multiFilter5, stringArray0);
      multiFilter3.isStreamableFilter();
      MultiFilter multiFilter8 = new MultiFilter();
      multiFilter6.getFilters();
      AllFilter allFilter2 = new AllFilter();
      MultiFilter multiFilter9 = new MultiFilter();
      Filter.runFilter(multiFilter1, stringArray0);
      AllFilter allFilter3 = new AllFilter();
      MultiFilter multiFilter10 = new MultiFilter();
      Filter.runFilter(multiFilter9, stringArray0);
      MultiFilter multiFilter11 = new MultiFilter();
      MultiFilter multiFilter12 = new MultiFilter();
      MultiFilter multiFilter13 = new MultiFilter();
      MultiFilter multiFilter14 = new MultiFilter();
      Filter.runFilter(multiFilter14, stringArray0);
      Discretize discretize0 = new Discretize("weka.filters.AllFilter");
      discretize0.getCutPoints(70);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[2];
      Filter.runFilter(multiFilter0, stringArray0);
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      multiFilter2.getFilters();
      Filter.makeCopy(multiFilter2);
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      multiFilter7.getFilters();
      Filter.makeCopy(multiFilter6);
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter8 = new MultiFilter();
      multiFilter8.getFilters();
      allFilter0.toString();
      MultiFilter multiFilter9 = new MultiFilter();
      MultiFilter multiFilter10 = new MultiFilter();
      MultiFilter multiFilter11 = new MultiFilter();
      multiFilter11.toString();
      MultiFilter multiFilter12 = new MultiFilter();
      multiFilter1.getFilters();
      MultiFilter multiFilter13 = new MultiFilter();
      Discretize discretize0 = new Discretize("weka.filters.AllFilter");
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")C^iT=T}]3.2^x`VQCU");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[2];
      Filter.runFilter(multiFilter0, stringArray0);
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      multiFilter2.getFilters();
      MultiFilter multiFilter3 = (MultiFilter)Filter.makeCopy(multiFilter2);
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      Filter.runFilter(multiFilter7, stringArray0);
      Filter.runFilter(multiFilter6, stringArray0);
      MultiFilter multiFilter8 = new MultiFilter();
      multiFilter8.getFilters();
      Filter.makeCopy(multiFilter8);
      AllFilter allFilter0 = new AllFilter();
      multiFilter7.getFilters();
      allFilter0.toString();
      MultiFilter multiFilter9 = new MultiFilter();
      Filter.runFilter(multiFilter9, stringArray0);
      Filter.runFilter(multiFilter7, stringArray0);
      MultiFilter multiFilter10 = new MultiFilter();
      multiFilter10.toString();
      MultiFilter multiFilter11 = new MultiFilter();
      multiFilter3.getFilters();
      AllFilter allFilter1 = new AllFilter();
      MultiFilter multiFilter12 = new MultiFilter();
      Filter.runFilter(multiFilter6, stringArray0);
      MultiFilter multiFilter13 = new MultiFilter();
      MultiFilter multiFilter14 = new MultiFilter();
      MultiFilter multiFilter15 = new MultiFilter();
      DenseInstance denseInstance0 = new DenseInstance((-1516.8479773507424), (double[]) null);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[27][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      double[] doubleArray2 = new double[11];
      doubleArray0[15] = doubleArray2;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = Double.NEGATIVE_INFINITY;
      double[] doubleArray3 = new double[2];
      doubleArray1[0] = 1.4082361724572854;
      doubleArray2[2] = (-1.7976931348623157E308);
      doubleArray0[9] = doubleArray3;
      doubleArray0[4] = doubleArray0[3];
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = 811.52827;
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "dcM2`oD`=CMBf";
      stringArray0[2] = "KM(YD}<i7P18Hw}@";
      stringArray0[4] = "KM(YD}<i7P18Hw}@";
      stringArray0[2] = "ACi6(`zUHoXP9";
      stringArray0[1] = "R";
      stringArray0[4] = "No upper limit has been specified for rang";
      stringArray0[8] = "sg1Ay%j9B_}JrvHe";
      doubleArray4[4] = 1.4082361724572854;
      doubleArray2[1] = (-2332.0765738431082);
      doubleArray0[5] = doubleArray4;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u)YPeo~MB>M");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'B");
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.binsTipText();
      assertEquals("Number of bins.", string0);
      
      Discretize discretize1 = new Discretize();
      discretize0.setAttributeIndices("'B");
      discretize1.getBinRangesString(34);
      Random.setNextRandom((-1));
      String string1 = discretize1.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string1);
      
      System.setCurrentTimeMillis((-881L));
      Random.setNextRandom(1478);
      String string2 = discretize1.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string2);
      
      String string3 = discretize0.invertSelectionTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string3);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.4489341378392258
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.m_IgnoreClass = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EZSv07");
      Discretize discretize1 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(7, stringArray0.length);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      multiFilter1.getFilters();
      MultiFilter multiFilter2 = (MultiFilter)Filter.makeCopy(multiFilter1);
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      MultiFilter multiFilter8 = new MultiFilter();
      MultiFilter multiFilter9 = new MultiFilter();
      multiFilter9.getFilters();
      MultiFilter multiFilter10 = new MultiFilter();
      multiFilter9.getFilters();
      MultiFilter multiFilter11 = (MultiFilter)Filter.makeCopy(multiFilter7);
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter12 = new MultiFilter();
      multiFilter2.getFilters();
      multiFilter9.getFilters();
      AllFilter allFilter1 = new AllFilter();
      allFilter1.toString();
      multiFilter5.isStreamableFilter();
      MultiFilter multiFilter13 = new MultiFilter();
      MultiFilter multiFilter14 = new MultiFilter();
      MultiFilter multiFilter15 = new MultiFilter();
      MultiFilter multiFilter16 = new MultiFilter();
      multiFilter11.toString();
      MultiFilter multiFilter17 = new MultiFilter();
      multiFilter11.getFilters();
      MultiFilter multiFilter18 = new MultiFilter();
      multiFilter11.getFilters();
      MultiFilter multiFilter19 = new MultiFilter();
      MultiFilter multiFilter20 = new MultiFilter();
      MultiFilter multiFilter21 = new MultiFilter();
      MultiFilter multiFilter22 = new MultiFilter();
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2113396603));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = (MultiFilter)Filter.makeCopy(multiFilter1);
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      MultiFilter multiFilter8 = new MultiFilter();
      MultiFilter multiFilter9 = new MultiFilter();
      multiFilter9.getFilters();
      MultiFilter multiFilter10 = new MultiFilter();
      multiFilter9.getFilters();
      Filter.makeCopy(multiFilter7);
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter11 = new MultiFilter();
      multiFilter2.getFilters();
      multiFilter9.getFilters();
      allFilter0.toString();
      MultiFilter multiFilter12 = new MultiFilter();
      multiFilter12.isStreamableFilter();
      MultiFilter multiFilter13 = new MultiFilter();
      MultiFilter multiFilter14 = new MultiFilter();
      MultiFilter multiFilter15 = new MultiFilter();
      MultiFilter multiFilter16 = new MultiFilter();
      MultiFilter multiFilter17 = new MultiFilter();
      multiFilter17.toString();
      MultiFilter multiFilter18 = new MultiFilter();
      multiFilter17.getFilters();
      MultiFilter multiFilter19 = new MultiFilter();
      multiFilter5.getFilters();
      MultiFilter multiFilter20 = new MultiFilter();
      MultiFilter multiFilter21 = new MultiFilter();
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-1012));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter0);
      Filter filter1 = Filter.makeCopy(filter0);
      Filter.makeCopy(filter1);
      Filter.runFilter(allFilter0, (String[]) null);
      AllFilter allFilter1 = new AllFilter();
      Filter.runFilter(filter1, (String[]) null);
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.runFilter(multiFilter0, (String[]) null);
      Filter filter2 = Filter.makeCopy(filter1);
      AllFilter allFilter2 = new AllFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Bc{Z)8s^Q\"8r1%Y/^0z";
      stringArray0[1] = "5.7 <= 5.70001 ? ";
      stringArray0[2] = "Bc{Z)8s^Q\"8r1%Y/^0z";
      stringArray0[3] = "Bc{Z)8s^Q\"8r1%Y/^0z";
      stringArray0[4] = "5.7 <= 5.70001 ? ";
      stringArray0[5] = "5.7 <= 5.70001 ? ";
      stringArray0[4] = "Bc{Z)8s^Q\"8r1%Y/^0z";
      stringArray0[7] = "5.7 <= 5.70001 ? ";
      stringArray0[8] = "Bc{Z)8s^Q\"8r1%Y/^0z";
      Filter.runFilter(filter2, stringArray0);
      MultiFilter multiFilter2 = new MultiFilter();
      Filter.makeCopies(filter2, 86);
      AllFilter allFilter3 = new AllFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      Filter.runFilter(multiFilter2, stringArray0);
      MultiFilter multiFilter4 = new MultiFilter();
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range wih \"-\". E.g: \"first-3,5,6-10,last\".");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range wih \"-\". E.g: \"first-3,5,6-10,last\".");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range wih \"-\". E.g: \"first-3,5,6-10,last\".");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@j~*U^8}V[GE8GKq");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Discretize discretize0 = new Discretize();
      discretize0.setBins((-1591));
      Filter.runFilter(discretize0, (String[]) null);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SystemInUtil.addInputLine((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-44);
      byteArray0[2] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-R <col1,col2-col4,...>");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-R <col1,col2-col4,...>");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-R <col1,col2-col4,...>");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-R <col1,col2-col4,...>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DaBM{5Zp/%");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.136243212595091
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.binsTipText();
      Discretize.main((String[]) null);
      discretize0.setMakeBinary(true);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Discretize discretize0 = new Discretize(">=~W4VHE7OB1X&");
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      SystemInUtil.addInputLine("D=(Fl2{}G3-axX3Yw`");
      stringArray0[1] = ">=~W4VHE7OB1X&";
      stringArray0[2] = "} expected at end of enumeration";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.getUseEqualFrequency();
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SystemInUtil.addInputLine("2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u)YPeo~MB>M");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(false);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SystemInUtil.addInputLine((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-44);
      byteArray0[2] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-R <col1,col2-col4,...>");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-R <col1,col2-col4,...>");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-R <col1,col2-col4,...>");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-R <col1,col2-col4,...>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DaBM{5Zp/%");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Discretize discretize0 = new Discretize("-R <col1,col2-col4,...>");
      String string0 = discretize0.invertSelectionTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Random.setNextRandom((-1073741841));
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      String[] stringArray0 = new String[8];
      Filter.runFilter(allFilter0, stringArray0);
      AllFilter allFilter1 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter0);
      Filter filter1 = Filter.makeCopy(filter0);
      Filter filter2 = Filter.makeCopy(allFilter1);
      Filter.runFilter(allFilter1, (String[]) null);
      Filter.makeCopy(filter2);
      Filter.runFilter(filter2, stringArray0);
      Filter.makeCopies(filter1, 6);
      AllFilter allFilter2 = new AllFilter();
      Filter.runFilter(allFilter2, (String[]) null);
      int[] intArray0 = new int[4];
      intArray0[0] = 30000;
      Filter.runFilter(filter1, stringArray0);
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(false);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Discretize discretize0 = new Discretize("Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      assertFalse(discretize0.getUseBinNumbers());
      
      SystemInUtil.addInputLine("5.0.1");
      Filter.runFilter(discretize0, (String[]) null);
      boolean boolean0 = discretize0.getInvertSelection();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[2];
      Filter.runFilter(multiFilter0, stringArray0);
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      multiFilter2.getFilters();
      MultiFilter multiFilter3 = (MultiFilter)Filter.makeCopy(multiFilter2);
      AllFilter allFilter0 = new AllFilter();
      allFilter0.toString();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      Filter.runFilter(multiFilter1, stringArray0);
      Filter.runFilter(multiFilter4, stringArray0);
      multiFilter4.getFilters();
      MultiFilter multiFilter6 = (MultiFilter)Filter.makeCopy(multiFilter3);
      AllFilter allFilter1 = new AllFilter();
      multiFilter3.getFilters();
      allFilter1.toString();
      MultiFilter multiFilter7 = new MultiFilter();
      Filter.runFilter(multiFilter5, stringArray0);
      Filter.runFilter(multiFilter5, stringArray0);
      MultiFilter multiFilter8 = new MultiFilter();
      multiFilter6.getFilters();
      AllFilter allFilter2 = new AllFilter();
      MultiFilter multiFilter9 = new MultiFilter();
      Filter.runFilter(multiFilter1, stringArray0);
      MultiFilter multiFilter10 = new MultiFilter();
      MultiFilter multiFilter11 = new MultiFilter();
      MultiFilter multiFilter12 = new MultiFilter();
      DenseInstance denseInstance0 = new DenseInstance((-1467.963376), (double[]) null);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getMakeBinary();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)124;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-R <col1,col2-col4,...>");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-R <col1,col2-col4,...>");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DaBM{5Zp/%");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Discretize discretize0 = new Discretize("2");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("2");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1Aq");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DaBM{5Zp/%");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Discretize discretize0 = new Discretize("2");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(6, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[2];
      Filter.runFilter(multiFilter0, stringArray0);
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      multiFilter2.getFilters();
      MultiFilter multiFilter3 = (MultiFilter)Filter.makeCopy(multiFilter2);
      AllFilter allFilter0 = new AllFilter();
      allFilter0.toString();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      Filter.runFilter(multiFilter1, stringArray0);
      Filter.runFilter(multiFilter4, stringArray0);
      multiFilter4.getFilters();
      Filter.makeCopy(multiFilter3);
      AllFilter allFilter1 = new AllFilter();
      multiFilter3.getFilters();
      allFilter1.toString();
      MultiFilter multiFilter6 = new MultiFilter();
      Filter.runFilter(multiFilter5, stringArray0);
      Filter.runFilter(multiFilter5, stringArray0);
      MultiFilter multiFilter7 = new MultiFilter();
      MultiFilter multiFilter8 = new MultiFilter();
      Filter.runFilter(multiFilter6, stringArray0);
      MultiFilter multiFilter9 = new MultiFilter();
      AllFilter allFilter2 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.parallelStream();
      Instances instances0 = new Instances("Value ", arrayList0, 86);
      Discretize discretize0 = new Discretize(".bsi");
      Discretize discretize1 = new Discretize("@data");
      try { 
        discretize1.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.748058988887039
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("-B");
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      
      discretize0.listOptions();
      String string1 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string1);
      
      discretize0.setUseBinNumbers(false);
      String string2 = discretize0.globalInfo();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string2);
      
      String string3 = discretize0.binsTipText();
      assertEquals("Number of bins.", string3);
      
      String string4 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string4);
      
      String string5 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string5);
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[2];
      Filter.runFilter(multiFilter0, stringArray0);
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      multiFilter2.getFilters();
      MultiFilter multiFilter3 = (MultiFilter)Filter.makeCopy(multiFilter2);
      AllFilter allFilter0 = new AllFilter();
      allFilter0.toString();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      Filter.runFilter(multiFilter1, stringArray0);
      Filter.runFilter(multiFilter4, stringArray0);
      multiFilter4.getFilters();
      MultiFilter multiFilter6 = (MultiFilter)Filter.makeCopy(multiFilter3);
      AllFilter allFilter1 = new AllFilter();
      multiFilter3.getFilters();
      allFilter1.toString();
      MultiFilter multiFilter7 = new MultiFilter();
      Filter.runFilter(multiFilter5, stringArray0);
      Filter.runFilter(multiFilter5, stringArray0);
      MultiFilter multiFilter8 = new MultiFilter();
      multiFilter6.getFilters();
      AllFilter allFilter2 = new AllFilter();
      MultiFilter multiFilter9 = new MultiFilter();
      Filter.runFilter(multiFilter1, stringArray0);
      MultiFilter multiFilter10 = new MultiFilter();
      MultiFilter multiFilter11 = new MultiFilter();
      MultiFilter multiFilter12 = new MultiFilter();
      DenseInstance denseInstance0 = new DenseInstance((-1467.963376), (double[]) null);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-2070787801));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "first-last";
      stringArray0[1] = "Unable to find the name of the package in the Description file for ";
      stringArray0[2] = "_/_9uMFLFfDeB";
      stringArray0[3] = "\tOptimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is set then the -B option will be ignored.";
      stringArray0[4] = "9zt O";
      stringArray0[5] = "(Y,O,vaYR{k=W9;";
      stringArray0[6] = "JVe3QQY2";
      stringArray0[7] = "3DF;<74Rjv%";
      stringArray0[8] = "xl[=I) SCoZbQiPzj";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }
}
