/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 19:16:23 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6161676734427517
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("|i%k");
      String[] stringArray0 = new String[2];
      String string0 = lovinsStemmer0.stem("alistic");
      assertEquals("al", string0);
      
      lovinsStemmer0.toString();
      stringArray0[0] = "alistic";
      String string1 = lovinsStemmer0.stemString("fPP%1>i/M9");
      assertEquals("fp%1>i/m9", string1);
      
      stringArray0[1] = "`?-OerW+JDCaaow";
      lovinsStemmer0.stemString("?K%AfGf");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("eful");
      String string2 = lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      assertEquals("invalis cv revis - not enough part separ by dot!", string2);
      
      String string3 = lovinsStemmer0.stemString("%:lYpA|!@8_#");
      assertEquals("%:lyp|!@8_#", string3);
      
      lovinsStemmer0.stemString("invalis cv revis - not enough part separ by dot!");
      lovinsStemmer0.stem("%:lYpA|!@8_#");
      String string4 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7263010409532868
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("et");
      assertEquals("et", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stemString("rpt");
      assertEquals("rb", string2);
      
      String string3 = lovinsStemmer0.stemString("ar");
      assertEquals("ar", string3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6502629743015307
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("dicix");
      assertEquals("dicic", string0);
      
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      lovinsStemmer0.stemString("kk<EgZ{n](<5rt|k");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("kk<EgZ{n](<5rt|k");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("$g28AjVO+5R)U:");
      assertEquals("$g28ajv+5r)u:", string2);
      
      String string3 = lovinsStemmer0.stemString("d0[&i] YqnLX=tnOnE");
      assertEquals("d0[&i] yqnlx=tn", string3);
      
      String string4 = lovinsStemmer0.stemString("kk<egz{n](<5rt|k");
      assertEquals("kk<egz{n](<5rt|k", string4);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.681262098339073
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("T*|$xWP");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("yt");
      assertEquals("yt", string0);
      
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer0.stemString("iev");
      assertEquals("ief", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stemString("inity");
      assertEquals("in", string2);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string3 = lovinsStemmer2.stemString("T*|$xWP");
      assertEquals("t*|$xwp", string3);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer3.globalInfo();
      lovinsStemmer0.stemString("ief");
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.toString();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer2.stemString("ement");
      String string4 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6041625513810045
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("Proceeding of the Sixteenth International Conference on Machine Learning");
      assertEquals("proceed of th sixteenth intern confer on mach learn", string1);
      
      String string2 = lovinsStemmer0.stemString("proceed of th sixteenth intern confer on mach learn");
      assertEquals("proceed of th sixteenth intern confer on mach learn", string2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5962047404294697
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("SU=nUD_Eb/W1");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("Proceeding of the Sixteenth International Conference on Machine Learning");
      assertEquals("proceed of th sixteenth intern confer on mach learn", string2);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.stemString("olv");
      assertEquals("olut", string3);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6340311677328363
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("~NYV}8R,xp@|_Pl}8>");
      lovinsStemmer0.stemString("Sorted array (ints): ");
      String string0 = lovinsStemmer0.stemString("A document having an author and title, but not formally published.");
      assertEquals("a docum hav an author and titl, but not form publ.", string0);
      
      lovinsStemmer0.stemString("/hoCuS>");
      lovinsStemmer0.stemString("/hoCuS>");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.toString();
      String string2 = lovinsStemmer1.stemString("hz");
      assertEquals("hz", string2);
      
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer4.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer3.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7907462324578782
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "end";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "";
      stringArray0[4] = "dicix";
      stringArray0[5] = "";
      stringArray0[6] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[7] = "dicix";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("dicix");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      String string0 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer4.stemString("X^M^=WD6");
      assertEquals("x^m^=wd6", string1);
      
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer3.stemString("\"T|FOXbb;Kw\"j&'.%0V");
      assertEquals("\"t|foxb;kw\"j&'.%0v", string2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7035908708834957
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("icide");
      lovinsStemmer0.stemString("?8F&Dt:)>Jq' Zg");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("yt");
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.589501581150214
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer5.globalInfo();
      String string0 = lovinsStemmer1.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string0);
      
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5751435277025818
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Q5$6&68-53";
      stringArray0[1] = "Variance: ";
      stringArray0[2] = "Q5$6&68-53";
      stringArray0[3] = "keywords";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("keywords");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("encies");
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("encies");
      String[] stringArray1 = new String[6];
      stringArray1[0] = "encies";
      stringArray1[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[2] = "SU=nUD_Eb/W1";
      stringArray1[3] = "Q5$6&68-53";
      stringArray1[4] = "a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.tex";
      stringArray1[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray1);
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.674891268466654
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[8];
      LovinsStemmer.main(stringArray0);
      String string0 = "vPTZV)";
      lovinsStemmer0.stemString("vPTZV)");
      lovinsStemmer0.stemString("M,t!!");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("learnet");
      lovinsStemmer0.stem("M,t!!");
      // Undeclared exception!
      try { 
        lovinsStemmer1.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.656246563315772
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "entrtex";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Can't construct a path to file relative to user dir.");
      assertEquals("can't construc a path to fil rel to user dir.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("end");
      assertEquals("ens", string2);
      
      String string3 = lovinsStemmer1.stem("&( dEB~.H");
      assertEquals("&( deb~.h", string3);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6408843672844307
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stem("-)/Z1");
      lovinsStemmer0.stemString("-)/z1");
      lovinsStemmer1.stemString("A work that is printed and bound, but without a named publisher or sponsoring institution.");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer2.stemString("");
      lovinsStemmer0.stemString("lgG}w`{lDh");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("-)/Z1");
      lovinsStemmer3.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("8034");
      lovinsStemmer1.globalInfo();
      lovinsStemmer4.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string1 = lovinsStemmer4.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5676538304073075
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string1);
      
      String string2 = lovinsStemmer3.stemString("metr");
      assertEquals("meter", string2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5173936281165532
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("0UlTAAR?/Ld.|");
      lovinsStemmer0.stemString("rud");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      assertFalse(lovinsStemmer2.equals((Object)lovinsStemmer1));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4630636139682183
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:g\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.ent");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:g\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.ent", string0);
      
      String string1 = lovinsStemmer0.stemString("The publisher's name.");
      assertEquals("th publishes nam.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stemString("Used for alphabetizing, cross referencing, and creating alabel when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat alabel when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string2);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string3 = lovinsStemmer1.stemString("us for alphabes, cros refer, and creat alabel when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.");
      assertEquals("us for alphab, cro refer, and creat alabel when th ``author'' inform is mi. th field should not be confus with th key that appear in th cit command and at th begin of th datab entr.", string3);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7794532494214312
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "end";
      stringArray0[4] = "The year of publication or, for an unpublished work, the year it was written. Generally it should consist offour numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters re numerals, such as `hbox{(about 1984)}'.";
      stringArray0[5] = "";
      stringArray0[7] = "The year of publication or, for an unpublished work, the year it was written. Generally it should consist offour numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters re numerals, such as `hbox{(about 1984)}'.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer1.stemString("flagex");
      assertEquals("flagec", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("t,q:+]`e&dUb@>o1");
      assertEquals("t,q:+]`e&dub@>o1", string2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4358490392839267
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("lud");
      lovinsStemmer1.stemString("lus");
      String string0 = lovinsStemmer1.stemString("lud");
      assertEquals("lus", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.461600303813991
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("L$ywm8uIuC}");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("A classname has to be provided with the -W opton!");
      assertEquals("a classnam ha to be provid with th -w opt!", string0);
      
      String string1 = lovinsStemmer1.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5849332148463018
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("entrtex");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "entrtex";
      stringArray0[1] = "entrtic";
      stringArray0[3] = "entrtic";
      stringArray0[4] = "\tThe file to output the processed data to (default stdout).";
      stringArray0[5] = "entrtex";
      stringArray0[6] = "entrtex";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("entrtex");
      lovinsStemmer0.stemString("errorend");
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer1.stemString("icide");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5272427625196316
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString(" Q");
      lovinsStemmer0.stemString("No input file defined!");
      lovinsStemmer0.stemString(" Q");
      lovinsStemmer0.stemString("No input file defined!");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("No input file defined!");
      assertEquals("no input fil defin!", string0);
      
      lovinsStemmer0.stemString("~Cv");
      String string1 = lovinsStemmer0.stemString("lisend");
      assertEquals("lisens", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6380951132393302
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:g\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.ent");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("kk<EgZ{n](<5rt|k");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("maste_sthesi(");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("q]eU");
      lovinsStemmer1.stemString("Fatal error.");
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6034540400596404
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "j4qr[";
      stringArray0[2] = "-)/Z1";
      stringArray0[3] = "ant";
      stringArray0[4] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("ant");
      assertEquals("ant", string1);
      
      String string2 = lovinsStemmer0.stemString("allically");
      assertEquals("al", string2);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5058157038579538
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ioned";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Rit");
      lovinsStemmer0.stemString("rit");
      lovinsStemmer0.stemString("tex");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("probToLogOdds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6825784102709282
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "ant";
      stringArray0[4] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("ation");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("mA&!~");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("-)/Z1");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer4.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer3.toString();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6533062547196584
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("invalid CVS revision - not enough parts separated by dots!");
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.stemString("A work that is printed and bound, but without a named publisher or sponsoring institution.");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("a work that is print and bound, but without a nam publishes or sponsor institut.");
      lovinsStemmer0.stemString("pans");
      lovinsStemmer0.stemString("jUifully");
      String string0 = lovinsStemmer0.stem("bex");
      String string1 = lovinsStemmer0.stem("6_ags]tk(Wk|UYCH@7!");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5864050050501801
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string0);
      
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("First option split up:");
      assertEquals("first opt split up:", string1);
      
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("UI3LSGl4ph");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("u2kdex");
      lovinsStemmer0.stemString("editor");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("UI3LSGl4ph");
      assertEquals("ui3lsgl4ph", string2);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5372494049767147
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "entials";
      stringArray0[1] = "[6qiZI6L`";
      String string0 = lovinsStemmer0.stemString("entials");
      assertEquals("ent", string0);
      
      String string1 = lovinsStemmer0.stemString("arlyt");
      assertEquals("arlys", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("RE0* U!9nv");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("@NLK$^2.");
      String string2 = lovinsStemmer1.stemString("re0* u!9nv");
      assertEquals("re0* u!9nv", string2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.643696614463705
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "end";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.stemString("dicix");
      lovinsStemmer0.stemString("*Kt#<sH");
      lovinsStemmer0.stemString("entrerid");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("*Kt#<sH");
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("entrond");
      assertEquals("entrons", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7627098820701113
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ioned";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("yi.#7) X");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("mit");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("cid");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer2.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6360183258413015
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("VOLUME");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("volum");
      assertEquals("vol", string0);
      
      String string1 = lovinsStemmer0.stemString("+!mD[#y2^Le");
      assertEquals("+!md[#y2^le", string1);
      
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("'y837Iv(CP$epQoN");
      String string3 = lovinsStemmer0.stemString("ert");
      assertEquals("ers", string3);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5933859603966853
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("~NYV}8R,xp@|_Pl}8>");
      lovinsStemmer0.stemString("Sorted array (ints): ");
      String string0 = lovinsStemmer0.stemString("A document having an author and title, but not formally published.");
      assertEquals("a docum hav an author and titl, but not form publ.", string0);
      
      lovinsStemmer0.stemString("a docum hav an author and titl, but not form publ.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("a docum hav an author and titl, but not form publ.");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("a docum hav an author and titl, but not form publ.");
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("lovinsstemmerher");
      assertEquals("lovinsstemmerhes", string2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.630986475144751
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      lovinsStemmer0.stemString(" Q");
      String string0 = lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.end");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.ens", string0);
      
      lovinsStemmer0.stemString("@");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("weka.core.RevisionUtils");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("9?,2^QBf6:");
      lovinsStemmer1.stemString(" Q");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer0.stemString("Machine Learning");
      assertEquals("mach learn", string1);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.ens");
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5343632624586006
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ical");
      lovinsStemmer0.stemString("ical");
      String string0 = lovinsStemmer0.stemString("ical");
      assertEquals("ical", string0);
      
      String string1 = lovinsStemmer0.stemString("}Zo^K*+]<_:9?");
      assertEquals("}zo^k*+]<_:9?", string1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5411648194254395
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString(" Q");
      String string0 = lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.end");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.ens", string0);
      
      String string1 = lovinsStemmer0.stemString("The ublishe's nme.");
      assertEquals("th ublishe nm.", string1);
      
      lovinsStemmer0.stemString("kk<EgZ{n]D<5rt|k");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("9tgclux");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("h/c1omf6cj~\"h0\"k<\u0001ix");
      assertEquals("h/c1omf6cj~\"h0\"k<\u0001ix", string2);
      
      String string3 = lovinsStemmer0.stemString("9tgcluc");
      assertEquals("9tgcluc", string3);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7793755329973957
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      lovinsStemmer0.stemString(" Q");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("UI3LSGl4ph");
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("iev");
      assertEquals("ief", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("ui3lsgl4ph");
      lovinsStemmer1.stemString("ui3lsgl4ph");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("ui3lsgl4ph");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer0.stemString("H2p#fKIX)=6rCj");
      assertEquals("h2p#fkic)=6rcj", string1);
      
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6445691145270684
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("antet");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A PhD thesis.");
      assertEquals("a phd thes.", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("istr");
      assertEquals("ister", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer3.stem("PdMv");
      lovinsStemmer3.stemString("");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getRevision();
      lovinsStemmer1.getRevision();
      lovinsStemmer3.getTechnicalInformation();
      String string2 = lovinsStemmer1.getRevision();
      assertEquals("8034", string2);
      
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5783441165546912
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString(">%2vEB<=PK0?:T)d_-B");
      lovinsStemmer0.stemString("uad");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString(">%2veb<=pk0?:t)d_-b");
      lovinsStemmer0.stemString("PMlAODw_Q");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer3.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5402031839478
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString(" Q");
      lovinsStemmer0.stemString("ui3lsgl4pherid");
      String string0 = lovinsStemmer0.stemString("The ublishe's nme.");
      assertEquals("th ublishe nm.", string0);
      
      lovinsStemmer0.stemString("_#XLC");
      String string1 = lovinsStemmer0.stemString("b +Mm@/^BQ^JM(i0\"v!");
      assertEquals("b +mm@/^bq^jm(i0\"v!", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stemString("_#xlc");
      assertEquals("_#xlc", string2);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5770807523556039
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ioned";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("^r$}udJn?{Tj$[x");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("icianrysyz");
      String string0 = lovinsStemmer1.stemString("^r$}udJn?{Tj$[x");
      assertEquals("^r$}udjn?{tj$[x", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stemString("icianrytpex");
      assertEquals("icianrytpic", string1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5170830318944912
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("vzek1AJvC^NMW");
      String string0 = lovinsStemmer0.stemString("W$`'gU}.cSrlRgr,D");
      assertEquals("w$`'gu}.csrlrgr,d", string0);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("ykdbex");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer4.stemString("The ublishe's nme.");
      assertEquals("th ublishe nm.", string1);
      
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string2 = lovinsStemmer3.stemString("The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.");
      assertEquals("th databas key of th entr being cros refer. any field that ar mis from th cur record ar inherit from th field being cros refer.", string2);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.4674861746347585
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "[6qiZI6L`";
      stringArray0[3] = "E&EfBN==;8k+F5F";
      stringArray0[4] = "?K%AfGf";
      stringArray0[5] = "Ko@gsqJ]";
      lovinsStemmer0.stemString("");
      String string0 = lovinsStemmer0.stemString("wycmit");
      assertEquals("wycmis", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5757826584199988
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "5+ ";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("5+ ");
      lovinsStemmer0.stemString("w;g#-2>,D)Oh=AXaX");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5007392587230357
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "[6qiZI6L`";
      stringArray0[3] = "E&EfBN==;8k+F5F";
      stringArray0[4] = "?K%Af-f";
      stringArray0[5] = "Ko@gsqJ]";
      String string0 = lovinsStemmer0.stemString("A classname has to be provided with the -W option!");
      assertEquals("a classnam ha to be provid with th -w opt!", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("?K%Af-f");
      String string1 = lovinsStemmer1.stemString("rud");
      assertEquals("rus", string1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4715641612787864
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString(" Q");
      lovinsStemmer0.stemString("endvad");
      String string0 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string0);
      
      lovinsStemmer0.stemString("th altern decis tre learn algorithm");
      String string1 = lovinsStemmer0.stemString("A document having an author and title, but not formally published.");
      assertEquals("a docum hav an author and titl, but not form publ.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("p_m>/1D{^i)");
      lovinsStemmer0.stemString("V");
      String string2 = lovinsStemmer0.stemString("Get flag -f: ");
      assertEquals("ges flag -f: ", string2);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5426815243707426
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString(" Q");
      String string0 = lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.end");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.ens", string0);
      
      lovinsStemmer0.stemString("The ublishe's nme.");
      lovinsStemmer0.stemString("kk<EgZ{n]D<5rt|k");
      String string1 = lovinsStemmer0.stemString("The ublishe's nme.");
      assertEquals("th ublishe nm.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer0.stemString("th ublishe nm.");
      assertEquals("th ublish nm.", string2);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.4345984842342145
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("entrtex");
      lovinsStemmer0.stemString("entrtic");
      String string0 = lovinsStemmer0.stemString("entrtic");
      assertEquals("entrt", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("lud");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("dex");
      String string1 = lovinsStemmer0.stemString("pand");
      assertEquals("pans", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5016726853078641
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ioned";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("mit");
      assertEquals("mis", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.627529544744872
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'p4ooN";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("um");
      assertEquals("um", string0);
      
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.518936323717464
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("lovinsstemmerher");
      assertEquals("lovinsstemmerhes", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("One or more page numbers or range of numbers, such as 42--111 or 7,41,73--97 or 43+ (the `+' in this last example indicates pages following that don't form a simple range). To make it easier to maintain Scribe-compatible databases, the standard styles convert a single dash (as in 7-33) to the double dash used in TeX to denote number ranges (as in 7--33).");
      assertEquals("on or mor pag number or rang of number, such as 42--111 or 7,41,73--97 or 43+ (th `+' in th last exampl indic pag follow that don't form a simpl rang). to mak it eas to maintain scrib-compat databas, th standard styl convers a singl dash (as in 7-33) to th doubl dash us in tic to denot number rang (as in 7--33).", string1);
      
      String string2 = lovinsStemmer1.stemString("on or mor pag number or rang of number, such as 42--111 or 7,41,73--97 or 43+ (th `+' in th last exampl indic pag follow that don't form a simpl rang). to mak it eas to maintain scrib-compat databas, th standard styl convers a singl dash (as in 7-33) to th doubl dash us in tic to denot number rang (as in 7--33).");
      assertEquals("on or mor pag number or rang of number, such as 42--111 or 7,41,73--97 or 43+ (th `+' in th last exampl ind pag follow that don't form a simpl rang). to mak it ea to maintain scrib-compat datab, th standard styl conver a singl dash (as in 7-33) to th doubl dash us in tic to denot number rang (as in 7--33).", string2);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5178996029441452
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.");
      assertEquals("th databas key of th entr being cros refer. any field that ar mis from th cur record ar inherit from th field being cros refer.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("One or more page numbers or range of numbers, such as 42--111 or 7,41,73--97 or 43+ (the `+' in this last example indicates pages following that don't form a simple range). To make it easier to maintain Scribe-compatible databases, the standard styles convert a single dash (as in 7-33) to the double dash used in TeX to denote number ranges (as in 7--33).");
      assertEquals("on or mor pag number or rang of number, such as 42--111 or 7,41,73--97 or 43+ (th `+' in th last exampl indic pag follow that don't form a simpl rang). to mak it eas to maintain scrib-compat databas, th standard styl convers a singl dash (as in 7-33) to th doubl dash us in tic to denot number rang (as in 7--33).", string1);
      
      String string2 = lovinsStemmer0.stemString("ators");
      assertEquals("ator", string2);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.4798489307285885
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "entials";
      stringArray0[1] = "[6qiZI6L`";
      stringArray0[3] = "E&EfBN==;8k+F5F";
      stringArray0[4] = "?K%AfGf";
      stringArray0[5] = "Ko@gsqJ]";
      String string0 = lovinsStemmer0.stemString("A classname has to be provided with the -W option!");
      assertEquals("a classnam ha to be provid with th -w opt!", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("Freund, Y. and Mason, L.");
      assertEquals("freund, y. and mason, l.", string1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.465180028612291
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "[6qiZI6L`";
      String string0 = lovinsStemmer0.stemString("\tUses lowercase strings.");
      assertEquals("\tus lowercas string.", string0);
      
      String string1 = lovinsStemmer0.stemString("lid");
      assertEquals("lis", string1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6213749295847137
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("dicix");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      String string0 = lovinsStemmer1.stemString("n|V\" |*Z=R");
      assertEquals("n|v\" |*z=r", string0);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer1.stemString("The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.");
      assertEquals("th nam of a ser or ses of book. when cit an entir book, th th titl field giv it titl and an opt ser field giv th nam of a ser or mult-volum ses in which th book is publ.", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.2795643472768354
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "-)/Z1";
      stringArray0[3] = "ant";
      stringArray0[4] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer3.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer2.stem("j");
      String string0 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.4783793721486531
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.";
      stringArray0[5] = "";
      stringArray0[7] = "The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.";
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
      
      String string1 = lovinsStemmer0.stemString("pEu?xjtm3'");
      assertEquals("peu?xjtm3'", string1);
  }
}
