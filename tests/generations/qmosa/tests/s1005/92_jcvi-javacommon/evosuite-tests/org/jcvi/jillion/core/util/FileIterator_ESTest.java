/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 16:33:20 GMT 2019
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcvi.jillion.core.util.FileIterator;
import org.jcvi.jillion.core.util.MultipleFileFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileIterator_ESTest extends FileIterator_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.676750661755123
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      Integer integer0 = new Integer(404);
      MockFile mockFile1 = new MockFile(mockFile0, "org.jcvi.jillion.internal.core.util.AbstractFOQueue");
      mockFile1.getCanonicalPath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      mockFile0.deleteOnExit();
      MockFile mockFile2 = new MockFile("org.jcvi.jillion.internal.core.util.AbstractFOQueue", "");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator1.forEach(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonRecursiveFileIteratorBuilder", "/org.jcvi.jillion.internal.core.util.AbstractFOQueue");
      file0.setExecutable(false);
      file0.setWritable(false);
      file0.setReadable(false);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder1.build();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      fileIterator1.iterator();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator2.getNextFile();
      // Undeclared exception!
      try { 
        fileIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.646564168461392
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Integer integer0 = new Integer(404);
      MockFile mockFile1 = new MockFile(mockFile0, "org.jcvi.jillion.internal.core.util.AbstractFOQueue");
      mockFile1.getCanonicalPath();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator1.updateFileIterator(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile2 = new MockFile("org.jcvi.jillion.internal.core.util.AbstractFOQueue", "");
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator2.forEach(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonRecursiveFileIteratorBuilder", "/org.jcvi.jillion.internal.core.util.AbstractFOQueue");
      file0.setExecutable(false);
      file0.setReadable(false);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      fileIterator2.setUpInitialState(mockFile0);
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      FileIterator fileIterator3 = fileIterator_FileIteratorBuilder1.build();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      fileIterator2.iterator();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator3.getNextFile();
      fileIterator2.next();
      fileIterator3.getNextFile();
      fileIterator1.getNextFile();
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5574502120163016
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Integer integer0 = new Integer(404);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.getCanonicalPath();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator1.setUpInitialState(mockFile1);
      fileIterator1.updateFileIterator(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile2 = new MockFile("", "");
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      mockFile1.setLastModified(404);
      MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonRecursiveFileIteratorBuilder", "/");
      fileIterator2.setUpInitialState(mockFile0);
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      FileIterator fileIterator3 = fileIterator_FileIteratorBuilder1.build();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      fileIterator2.iterator();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      File file0 = fileIterator3.getNextFile();
      MockFile mockFile3 = new MockFile("");
      assertFalse(mockFile3.equals((Object)file0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2992243763501223
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = null;
      MockFile mockFile0 = new MockFile((File) null, "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      mockFile0.delete();
      // Undeclared exception!
      try { 
        fileIterator0.iterator();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.801131751121123
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      mockFile0.getCanonicalPath();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      MockFile mockFile1 = new MockFile("");
      fileIterator1.updateFileIterator(mockFile1);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder1.build();
      MockFile mockFile2 = new MockFile("/", "/");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator1.forEach(consumer0);
      boolean boolean0 = true;
      fileIterator_FileIteratorBuilder3.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      File file0 = null;
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      // Undeclared exception!
      try { 
        fileIterator2.setUpInitialState((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2206600623999533
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("r");
      MockFile.createTempFile(".,X 8xP-x~g`=[", "", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      mockFile1.getCanonicalPath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(mockFile1);
      MockFile mockFile2 = new MockFile("r");
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      assertFalse(fileIterator_FileIteratorBuilder1.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.7293087520088575
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      mockFile0.getCanonicalPath();
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.build();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator1.setUpInitialState(mockFile0);
      fileIterator0.iterator();
      FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      fileIterator2.hasNext();
      FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      fileIterator0.iterator();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.8530463701612323
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile1 = new MockFile("N");
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      mockFile1.getCanonicalPath();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      fileIterator1.updateFileIterator(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder0.build();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator2.forEach(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator1.setUpInitialState(mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder3.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder4.includeDirectories(false);
      fileIterator_FileIteratorBuilder4.build();
      fileIterator1.spliterator();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      File file0 = fileIterator2.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      assertFalse(fileIterator_FileIteratorBuilder5.equals((Object)fileIterator_FileIteratorBuilder2));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.5255164146037217
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile1 = new MockFile("r");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      fileIterator1.updateFileIterator(mockFile0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      fileIterator_FileIteratorBuilder1.build();
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator0.setUpInitialState(mockFile1);
      fileIterator0.updateFileIterator(mockFile1);
      assertFalse(mockFile1.canExecute());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.436458324624192
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.updateFileIterator(mockFile0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      File file0 = MockFile.createTempFile("f`Ci", "");
      fileIterator_FileIteratorBuilder1.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      fileIterator0.updateFileIterator(file0);
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(false);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.929559198243765
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      mockFile0.getCanonicalPath();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      fileIterator1.updateFileIterator(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder1.build();
      MockFile mockFile1 = new MockFile("/", "r");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      fileIterator2.setUpInitialState(mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder3.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator3 = fileIterator_FileIteratorBuilder4.build();
      fileIterator3.setUpInitialState(mockFile1);
      fileIterator3.spliterator();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder6 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder6.equals((Object)fileIterator_FileIteratorBuilder5));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.750365385891757
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("org.jcvi.jillion.core.util.FIFOQueue");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      mockFile0.getCanonicalPath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      MockFile mockFile2 = new MockFile("", "org.jcvi.jillion.core.util.iter.IteratorUtil");
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile2);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder3.includeDirectories(true);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3895530195104047
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      String string0 = "\\u:Y~@byB9!+7-";
      MockFile.createTempFile(string0, "fxC{", (File) mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      Integer integer0 = new Integer(110);
      Integer integer1 = new Integer((-21));
      Integer integer2 = new Integer((-21));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-99);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Integer integer3 = new Integer((-1115));
      Integer integer4 = new Integer((-1115));
      Integer integer5 = new Integer(1);
      Integer integer6 = new Integer((-1115));
      Integer integer7 = new Integer((-1885));
      Integer integer8 = new Integer((-23));
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer2;
      integerArray0[1] = integer8;
      integerArray0[2] = integer1;
      Integer[] integerArray1 = new Integer[20];
      integerArray1[0] = integer4;
      integerArray1[0] = integer7;
      integerArray0[2] = integer4;
      integerArray0[5] = integer5;
      integerArray1[4] = integer6;
      integerArray1[5] = integer6;
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.646564168461392
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Integer integer0 = new Integer(404);
      MockFile mockFile1 = new MockFile(mockFile0, "org.jcvi.jillion.internal.core.util.AbstractFOQueue");
      mockFile1.getCanonicalPath();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator1.updateFileIterator(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile2 = new MockFile("org.jcvi.jillion.internal.core.util.AbstractFOQueue", "");
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator2.forEach(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonRecursiveFileIteratorBuilder", "/org.jcvi.jillion.internal.core.util.AbstractFOQueue");
      file0.setReadable(false);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      fileIterator2.setUpInitialState(mockFile0);
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      FileIterator fileIterator3 = fileIterator_FileIteratorBuilder1.build();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      fileIterator2.iterator();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator3.getNextFile();
      fileIterator2.next();
      fileIterator3.getNextFile();
      fileIterator1.getNextFile();
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.6489118547631496
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile1 = new MockFile("r");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(mockFile1);
      fileIterator_FileIteratorBuilder1.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      mockFile0.setReadOnly();
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      assertFalse(fileIterator1.hasNext());
      
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder3.build();
      assertFalse(fileIterator2.hasNext());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.817829862060001
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      mockFile0.getCanonicalPath();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      fileIterator1.updateFileIterator(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder1.build();
      MockFile mockFile1 = new MockFile("/", "r");
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      fileIterator2.setUpInitialState(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator3 = fileIterator_FileIteratorBuilder2.build();
      fileIterator3.spliterator();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      fileIterator1.next();
      File file0 = fileIterator2.getNextFile();
      assertEquals("tmp", file0.getName());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.83238657786342
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      mockFile0.getCanonicalPath();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      fileIterator1.updateFileIterator(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder1.build();
      MockFile mockFile1 = new MockFile("/", "r");
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      fileIterator2.setUpInitialState(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator3 = fileIterator_FileIteratorBuilder2.build();
      fileIterator3.spliterator();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      // Undeclared exception!
      try { 
        fileIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.6016225602833476
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile.createTempFile("no elements in empty iterator", "org.jcvi.jillion.core.util.FileIterator$FileNameComparator");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>(linkedList4);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>(linkedList4);
      LinkedList<FileFilter> linkedList8 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList9 = new LinkedList<FileFilter>();
      linkedList4.stream();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList9);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList7);
      LinkedList<FileFilter> linkedList10 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList11 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList12 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList13 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList14 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList15 = new LinkedList<FileFilter>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<FileFilter> linkedList16 = new LinkedList<FileFilter>(linkedList12);
      LinkedList<FileFilter> linkedList17 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList18 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList19 = new LinkedList<FileFilter>(linkedList6);
      LinkedList<FileFilter> linkedList20 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList21 = new LinkedList<FileFilter>(linkedList20);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList16);
      assertFalse(multipleFileFilter4.equals((Object)multipleFileFilter1));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.73089653877148
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      mockFile0.getCanonicalPath();
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder1.build();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.build();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator1.setUpInitialState(mockFile0);
      fileIterator0.iterator();
      FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      fileIterator2.hasNext();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder1));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      FileFilter[] fileFilterArray0 = new FileFilter[6];
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList0);
      multipleFileFilter2.accept((File) null);
      multipleFileFilter0.accept((File) null);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.4289964313989945
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      File file0 = MockFile.createTempFile("LO?r", "");
      fileIterator0.updateFileIterator(file0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      // Undeclared exception!
      try { 
        fileIterator1.updateFileIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.538507875174661
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      fileIterator_FileIteratorBuilder2.build();
      fileIterator0.getNextFile();
      FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      assertFalse(fileIterator_FileIteratorBuilder3.equals((Object)fileIterator_FileIteratorBuilder2));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0902624059333377
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      mockFile0.getCanonicalFile();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = new FileFilter[7];
      multipleFileFilter3.accept(mockFile0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter1;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter5;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter1;
      fileFilterArray0[5] = (FileFilter) multipleFileFilter3;
      fileFilterArray0[6] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      fileIterator_FileIteratorBuilder0.fileFilter(fileFilterArray0[4]);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.spliterator();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator1.hasNext());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.809092256199087
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile1 = new MockFile("r");
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      mockFile1.getCanonicalPath();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      fileIterator1.updateFileIterator(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      fileIterator1.setUpInitialState(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder0.build();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      fileIterator1.iterator();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator2.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.432757197408911
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>(linkedList1);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList5);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList8 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList9 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList10 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList11 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList12 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList13 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList14 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList15 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList16 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList17 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList18 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList19 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList20 = new LinkedList<FileFilter>(linkedList19);
      LinkedList<FileFilter> linkedList21 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList22 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList23 = new LinkedList<FileFilter>(linkedList12);
      Object object0 = new Object();
      Object object1 = new Object();
      linkedList4.removeFirstOccurrence(multipleFileFilter1);
      LinkedList<FileFilter> linkedList24 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList25 = new LinkedList<FileFilter>(linkedList16);
      LinkedList<FileFilter> linkedList26 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList27 = new LinkedList<FileFilter>(linkedList5);
      LinkedList<FileFilter> linkedList28 = new LinkedList<FileFilter>(linkedList2);
      LinkedList<FileFilter> linkedList29 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList29);
      assertFalse(multipleFileFilter2.equals((Object)multipleFileFilter0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Oq|e1P", "Oq|e1P");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[4];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter4);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }
}
