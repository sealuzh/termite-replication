/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 18:05:05 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.216212418083071
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 9223372036854773606L;
      Range range0 = Range.ofLength(9223372036854773606L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.pollLast();
      linkedList0.add(range0);
      linkedList0.add((Range) null);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The first parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.751861920022373
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.ofLength(4294967294L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift(4294967294L);
      Range range1 = range_Builder0.build();
      Long.compareUnsigned(4294967294L, 3074L);
      Long long0 = new Long(1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range range2 = Range.of(4294967294L, 4294967294L);
      Range range3 = range0.intersection(range2);
      assertTrue(range3.isEmpty());
      
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Long long1 = new Long(4294967294L);
      Object object9 = new Object();
      Object object10 = new Object();
      range1.equals(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(4294967294L, long2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4756539891236864
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = (-1175L);
      Long long1 = new Long((-1175L));
      Range range0 = Range.of((-1175L), (-59L));
      Range range1 = Range.of((-2704L), (-1175L));
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-2704L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.353092501392613
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Long long0 = new Long(4294977305L);
      Long.valueOf((-212L));
      Range.ofLength(9223372032559808513L);
      Range range0 = Range.of(9223372036854775791L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of(9223372036854775791L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.567386627962645
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-1947L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(2095L);
      range_Builder0.contractBegin(2095L);
      range_Builder0.expandEnd(4294967295L);
      Range range1 = range_Builder0.build();
      range1.getEnd(range_CoordinateSystem0);
      range0.getEnd(range_CoordinateSystem0);
      Range.Comparators.values();
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ -1946 .. -1946 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ -1946 .. -1946 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.972707800037286
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-1L), 127L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      Range.Builder range_Builder0 = new Range.Builder((-81L), (-1L));
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.shift((-81L));
      Range range2 = range_Builder0.build();
      assertFalse(range2.isEmpty());
      
      Range.Builder range_Builder2 = new Range.Builder();
      Range range3 = range_Builder1.build();
      assertTrue(range3.isEmpty());
      
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder(255L, 9223372036854775396L);
      range_Builder2.copy();
      Range.of(22L);
      Object object3 = new Object();
      Object object4 = new Object();
      Long long0 = new Long(22L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.439328131134057
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L));
      Range range1 = Range.of(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -128 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.8651176139257744
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range range1 = Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      range0.complementFrom(linkedList0);
      range1.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.8029395399651267
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(4294967309L, 9223372036854712124L);
      Long.getLong(" -ts;uL1y:r");
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(4294967309L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Long long1 = new Long(9223372036854712124L);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(" -ts;uL1y:r");
      Long long2 = new Long((-3007L));
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Range range1 = Range.of(9223372036854712124L);
      range0.complement(range1);
      Object object10 = new Object();
      Long long3 = new Long(9223372036854712125L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 9223372036854712124L, 9223372036854712125L);
      Range range3 = Range.of(4294967295L);
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3316561162689218
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 2147483624L;
      Long.compareUnsigned((-1L), 9223372036854775211L);
      long long1 = 1468L;
      Long.compareUnsigned(1468L, 194L);
      Long.getLong("");
      Long long2 = new Long(2147483624L);
      Range range0 = Range.of(2144L, 9223372032559808512L);
      Long long3 = new Long(1);
      range0.equals((Object) null);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(3572L, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.826752721368792
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.Comparators.values();
      Long.compareUnsigned(9223372036854775807L, 2147483646L);
      Range range0 = Range.ofLength(9223372036854773229L);
      Object object0 = new Object();
      Range range1 = Range.of(2147483646L);
      Range range2 = range0.intersection(range1);
      Range range3 = range1.asRange();
      Range range4 = Range.of(255L);
      Range.ofLength(9223372036854775807L);
      Range.Comparators.values();
      Range range5 = range3.asRange();
      Range range6 = range0.intersection(range1);
      assertFalse(range6.isEmpty());
      
      Range range7 = Range.ofLength(1);
      assertFalse(range7.isEmpty());
      
      Range range8 = Range.ofLength(2147483647L);
      assertFalse(range8.isEmpty());
      
      Range range9 = Range.of(2147483647L);
      List<Range> list0 = range4.complement(range5);
      List<Range> list1 = range1.complementFrom(list0);
      assertFalse(list0.contains(range9));
      assertTrue(list1.contains(range4));
      
      Object object1 = new Object();
      Long long0 = new Long(9223372036854773229L);
      boolean boolean0 = range9.equals(range1);
      assertFalse(range9.isEmpty());
      assertFalse(boolean0);
      
      range1.asRange();
      Range.ofLength(1034L);
      boolean boolean1 = range0.isSubRangeOf(range3);
      assertSame(range3, range2);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.579015178358918
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.of(2202L, 2202L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder((-81L), 2202L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.build();
      range_Builder1.shift(127L);
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(255L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = 4294967325L;
      Range.Builder range_Builder0 = new Range.Builder(4294967325L);
      Range range0 = null;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.6208178180387574
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Long long0 = new Long((-2147483648L));
      Long.getLong((String) null);
      Object object0 = new Object();
      Long.getLong("N@9~5Q'");
      Long long1 = new Long((-329L));
      Long long2 = new Long((-2147483648L));
      Range range1 = Range.of((-2147483648L));
      range0.equals(range1);
      Range range2 = range0.intersection(range1);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range2.equals(object4);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.7374986972441633
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854773606L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        range0.split(9223372036854773606L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4405 would make range [9223372036854773606 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.772632816407614
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(838L);
      Long.compareUnsigned(9223372036854775807L, 2147483646L);
      Long.compareUnsigned(838L, 32767L);
      Long.getLong("");
      Long long0 = new Long(838L);
      Range range1 = Range.of(1312L, 9223372036854775211L);
      Long long1 = new Long(9223372036854775807L);
      Long long2 = new Long(0L);
      range1.equals(long2);
      Range.of(838L);
      range1.intersection(range0);
      Range.of(9223372036854774362L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.250819827202611
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Long.getLong("tz");
      Object object0 = new Object();
      Long.getLong("tz");
      Long long0 = new Long(928L);
      Long long1 = new Long(108L);
      Object object1 = new Object();
      Range range0 = Range.of((-2154L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long long2 = new Long((-2154L));
      Object object7 = new Object();
      Long long3 = new Long((-241L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.8764738528572313
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long.compareUnsigned(2147483624L, 2147483624L);
      Long.compareUnsigned(2147483624L, (-614L));
      Long.getLong("");
      Long long0 = new Long((-614L));
      Range range1 = Range.of((-128L), (long) (-1));
      Long long1 = new Long((-128L));
      range1.equals(range0);
      Range range2 = Range.of(2147483624L);
      Range range3 = Range.of((long) (-1));
      Long.compareUnsigned(10836L, (-2071L));
      range0.equals(long0);
      Long.compareUnsigned(10836L, (-9223372036854775808L));
      Long.getLong("8)(L#GQO}y7/O");
      Long long2 = new Long(1428L);
      Long long3 = new Long(0L);
      range3.equals(long3);
      Range.of(4294967325L);
      range3.intersection(range2);
      Range.of(340L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.7877730958486096
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.shift((-1L));
      Range range0 = range_Builder1.build();
      range_Builder1.shift(65151L);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range_Builder1.copy();
      Range.of((-32768L));
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854710659 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.727873599376137
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(1945L, 1945L);
      Range range1 = Range.ofLength(1945L);
      Range range2 = Range.of(2202L, 2202L);
      Object object0 = new Object();
      Object object1 = new Object();
      range2.equals(range1);
      Long long0 = new Long((-1316L));
      Object object2 = new Object();
      Object object3 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, (-2643L), 32767L);
      range0.equals(range3);
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.8340766888446334
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = range_Builder1.shift(32767L);
      range_Builder1.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder2.copy();
      Range.of((-1223L));
      Range.of(1L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=4.108593216030066
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(1948L);
      Range range1 = Range.of(2202L, 2202L);
      Object object0 = new Object();
      range0.equals(range1);
      Long.getLong("");
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals("zEY@uz!-d\"");
      range1.split(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(1504L);
      Range range2 = Range.of((-4184L));
      Object object4 = new Object();
      range1.equals(object4);
      Long.getLong("e5C}:");
      Long long1 = new Long((-421L));
      Range.ofLength(1948L);
      Range range3 = Range.of(677L);
      Range.ofLength(677L);
      List<Range> list0 = range3.complement(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, (-421L), 677L);
      List<Range> list1 = range4.complementFrom(list0);
      assertTrue(list1.contains(range3));
      
      Range range5 = range0.intersection(range3);
      assertTrue(range5.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.5996012612215926
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long.compareUnsigned(2147483646L, 9223372036854775807L);
      Long.compareUnsigned(9223372036854775807L, (-614L));
      String string0 = "";
      Long.getLong("");
      Long long0 = new Long((-614L));
      Long long1 = new Long(0L);
      range0.equals(range0);
      Range range1 = range0.intersection(range0);
      range1.asRange();
      Range.ofLength(2065L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.5399609779748276
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(1948L, 1948L);
      Range.ofLength(1948L);
      Range range1 = Range.of(2202L, 2202L);
      Object object0 = new Object();
      range1.equals(range0);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 4417L;
      Range range2 = Range.of(range_CoordinateSystem1, 1948L, 4417L);
      Object object3 = new Object();
      range2.equals(range0);
      Range.of(0L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1948L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.86374322722194
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(1948L);
      Range range1 = Range.of(2167L, 2167L);
      Object object0 = new Object();
      range1.equals(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complementFrom(linkedList0);
      range0.complementFrom(list0);
      range1.complementFrom(list0);
      Long.getLong("");
      Long long0 = new Long(1397L);
      Range range2 = Range.of(412L, 1948L);
      Long long1 = new Long((-912L));
      range2.isSubRangeOf(range1);
      Long long2 = new Long((-912L));
      Long.valueOf(127L);
      Long long3 = new Long(1948L);
      range0.equals(range2);
      Range.of((-912L));
      range0.intersection(range1);
      Range.of(676L);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.8924878633299773
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      long long1 = 0L;
      Range range1 = Range.of(0L);
      Range range2 = Range.of(0L, 270L);
      range0.isSubRangeOf(range1);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem0);
      range0.iterator();
      range0.toString(range_CoordinateSystem0);
      range0.getLength();
      range2.intersects(range0);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 0L, 9223372036854775807L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.4463327755440565
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854712124L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854712124L, 9223372036854712124L);
      String string0 = "";
      Long.getLong("");
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(32767L);
      Object object2 = new Object();
      range1.equals(object2);
      Long.getLong("*%qy/?bj`cd`S9S");
      Long long1 = new Long(4294967295L);
      Long long2 = new Long(4294967295L);
      Object object3 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf(")8^2n=*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.)8^2n=*
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.7882219109773594
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(2147483647L);
      Range range1 = range_Builder1.build();
      Long.compareUnsigned(2147483647L, 2147483647L);
      Range range2 = Range.of(2147483647L, 2147483647L);
      Long long0 = new Long(2147483647L);
      range0.equals(range2);
      Range.of((-2178L));
      Range.of((-2178L));
      long long1 = (-1235L);
      Long.compareUnsigned((-1235L), 10836L);
      range0.equals(range1);
      Long.compareUnsigned((-2343L), (-1235L));
      Long.getLong("");
      Long long2 = new Long((-2343L));
      Long long3 = new Long((-5325L));
      // Undeclared exception!
      try { 
        Range.ofLength((-1859L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.716807784159963
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(17L, 17L);
      Range range1 = Range.of(0L);
      range0.isSubRangeOf(range1);
      range1.equals(range0);
      Range range2 = Range.ofLength(9223372036854765850L);
      range2.startsBefore(range0);
      List<Range> list0 = new LinkedList<Range>();
      List<Range> list1 = range2.complementFrom(list0);
      range0.complementFrom(list1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.7694899286185874
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(270L, 4294967295L);
      range0.isSubRangeOf(range1);
      range1.toString();
      range0.toString(range_CoordinateSystem0);
      range1.toString(range_CoordinateSystem0);
      range1.getLength();
      Range range2 = Range.of(range_CoordinateSystem0, 32769L, 4294967026L);
      range2.isSubRangeOf(range0);
      range2.equals(range_CoordinateSystem0);
      Long.compareUnsigned(270L, 574L);
      Long.getLong("[ 2147483647 .. 2147483647 ]/0B");
      Long long0 = new Long((-1083L));
      range2.equals((Object) null);
      Long.getLong("[ 270 .. 4294967295 ]/0B");
      Long long1 = new Long(4294967026L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range3 = Range.of((-1083L));
      range3.getLength();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.984496378374306
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(7178L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(7178L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range range1 = range_Builder1.build();
      Long long0 = new Long(1077L);
      Long long1 = new Long(9223372036854773229L);
      Long.valueOf(2639L);
      Range range2 = Range.ofLength(2639L);
      range1.equals((Object) null);
      Range.of((-212L));
      range2.intersection(range0);
      Range.of((-262L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.762589259713591
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Long.compareUnsigned(4294967295L, 4294967295L);
      Long.compareUnsigned(4294967295L, 758L);
      range0.iterator();
      Long.getLong("1m+");
      Object object0 = new Object();
      range0.equals(object0);
      Long.getLong(" -ts;uL1y:r");
      Long long0 = new Long(758L);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals("");
      Range range1 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      range1.split(1475L);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3558994987792694
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.of(65535L, 65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 65535L, 734L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.6107936772301428
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range0.getEnd();
      long long0 = 1808L;
      Long.getLong("1m+");
      Object object0 = new Object();
      range1.equals((Object) null);
      Long.getLong(" -ts;uL1y:r");
      Long long1 = new Long(661L);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals((Object) null);
      range1.split(661L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("WuL.T7U[`!TZ]<^j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.WuL.T7U[`!TZ]<^j
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.926350058285572
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(17L, 17L);
      Range range1 = Range.of(0L);
      range0.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder(0L, 17L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.shift((-1223L));
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder3 = range_Builder2.shift(17L);
      Range range3 = range_Builder3.build();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder5 = new Range.Builder((-1536L), 255L);
      range_Builder4.copy();
      Range range4 = Range.of(9223372036854712830L);
      List<Range> list0 = range2.complement(range4);
      range2.complementFrom(list0);
      range3.intersection(range1);
      range_Builder3.expandBegin((-1150L));
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.7643833515519525
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967325L);
      range_Builder0.contractBegin(4294967325L);
      Range range0 = range_Builder0.build();
      Long.compareUnsigned(4294967325L, 9223372032559808483L);
      Long.compareUnsigned((-2821L), (-2147483648L));
      Long.compareUnsigned(459L, 9223372036854775807L);
      Long long0 = new Long(4294967324L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Long long1 = new Long(255L);
      Object object9 = new Object();
      Object object10 = new Object();
      Range range1 = Range.of(1879L, 4294967324L);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      
      Range.CoordinateSystem.values();
      Range range3 = Range.of((-2147483648L), 2147483647L);
      //  // Unstable assertion: assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.543437659880085
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(2147483641L);
      Long.compareUnsigned(2147483641L, 2147483641L);
      Long.compareUnsigned(9223372036854775807L, (-614L));
      Long.getLong("f|#=`-rCW`1I");
      Long long0 = new Long((-2124L));
      long long1 = 0L;
      long long2 = 4294977283L;
      Range.of(4294977283L, 4294977301L);
      Long long3 = new Long((-614L));
      range0.equals((Object) null);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2147483641L, 65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.1521629584690243
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Long long0 = new Long(2147483646L);
      Long.getLong("");
      Object object0 = new Object();
      Long.getLong("<,U([sw;\"c");
      Long long1 = new Long(9223372036854712123L);
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(9223372036854712830L);
      range0.equals((Object) null);
      Long long2 = new Long(9223372036854712830L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Long long3 = new Long((-9223372036854775808L));
      Object object9 = new Object();
      Object object10 = new Object();
      assertFalse(object10.equals((Object)object0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.929550024590959
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-5L);
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), 2147483647L);
      range0.spliterator();
      range0.isSubRangeOf(range0);
      range0.intersects(range0);
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      range1.equals(range_CoordinateSystem0);
      Range range2 = range1.asRange();
      Range.of(2147483647L);
      range2.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-1538L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.71797731194264
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.ofLength(1948L);
      Long.compareUnsigned(710L, (-1L));
      Long.compareUnsigned((-843L), 1L);
      Long.getLong((String) null);
      Long long0 = new Long((-843L));
      range0.equals(long0);
      Long.getLong((String) null);
      Long long1 = new Long(3224L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(long0);
      List<Range> list0 = range0.split(3L);
      range0.split(3224L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      range0.complementFrom(list0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.6383971460077493
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.ofLength(17L);
      Range range1 = Range.of(0L);
      range0.equals(range1);
      long long0 = (-1223L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.shift(179L);
      Range.Builder range_Builder3 = range_Builder2.shift(0L);
      range_Builder2.build();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(17L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.3132129167647393
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(838L);
      Long.compareUnsigned(9223372036854775807L, 2147483646L);
      Long.compareUnsigned(838L, 32767L);
      Long.getLong("");
      Long long0 = new Long(838L);
      range0.equals("");
      long long1 = 123L;
      Long.compareUnsigned(2381L, 123L);
      Long.getLong("");
      Long long2 = new Long(1682L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 838L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=4.056679393210876
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Long long0 = new Long((-2147483648L));
      Long.compareUnsigned(4294967295L, (-1L));
      Long.getLong((String) null);
      Long long1 = new Long(255L);
      Range range1 = Range.of((-128L), 4294967295L);
      Long long2 = new Long(255L);
      range1.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder((-128L), 65535L);
      range_Builder0.copy();
      Range range2 = Range.of((-2147483648L));
      Range.of(4294977307L);
      range_Builder0.copy();
      Range range3 = Range.of(4294967295L);
      Range range4 = Range.of((-2147418105L));
      List<Range> list0 = range0.complement(range4);
      range4.complementFrom(list0);
      range1.intersection(range3);
      Range range5 = range_Builder0.build();
      assertNotSame(range5, range2);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.178008108691081
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L));
      long long1 = 2147483646L;
      long long2 = 9223372036854775807L;
      Long.compareUnsigned(2147483646L, 9223372036854775807L);
      Long.compareUnsigned(9223372036854775807L, (-614L));
      Long long3 = new Long((-614L));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.2658098229970447
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long.compareUnsigned(2147483646L, 9223372036854775807L);
      Long.compareUnsigned(9223372036854775807L, (-614L));
      Long.getLong("");
      Long long0 = new Long((-614L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      Long long1 = new Long(9223372036854775807L);
      Object object2 = new Object();
      range0.getLength();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Long long2 = new Long((-3007L));
      range0.equals(object7);
      // Undeclared exception!
      try { 
        Range.ofLength((-3007L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.7248605270619466
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(7178L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(7178L);
      Range range1 = range_Builder1.build();
      Long.compareUnsigned(7178L, 7178L);
      Long long0 = new Long(0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range1.equals(object5);
      range1.intersection(range0);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range.of((-4294968638L));
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      Object object13 = new Object();
      Object object14 = new Object();
      assertFalse(object14.equals((Object)object2));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.826146877408024
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(1948L);
      Range range1 = Range.of(2202L, 2202L);
      Object object0 = new Object();
      range1.equals(range0);
      Object object1 = new Object();
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder((-81L), 2202L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder1.shift(1446L);
      range_Builder1.build();
      range_Builder1.shift(127L);
      range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(255L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.5215997523973264
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(17L, 17L);
      Range range1 = Range.of(0L);
      range0.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range0.equals((Object) null);
      Long.compareUnsigned(858L, 858L);
      Long.getLong((String) null);
      Long long0 = new Long((-1816L));
      range1.equals("Zero Based");
      Range range2 = Range.of((long) 0);
      range2.intersection(range1);
      Range.of(1L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.4279783730534703
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = 17L;
      Range range0 = Range.of(17L, 17L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.446290125546827
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Long long1 = new Long((-2147483648L));
      long long2 = 4294967295L;
      Long.compareUnsigned(4294967295L, (-1L));
      Long.getLong((String) null);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.43035979734312
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.ofLength(4294967325L);
      Range.Builder range_Builder0 = new Range.Builder(4294967325L);
      range_Builder0.contractBegin(4294967325L);
      Range range0 = range_Builder0.build();
      Long.compareUnsigned((-2821L), 9223372032559808483L);
      Long long0 = new Long(4294967325L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long1 = new Long(75L);
      range0.equals((Object) null);
      long long2 = (-2738L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(4294967325L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=4.102175431063061
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.ofLength(4294967325L);
      Long.compareUnsigned(65534L, (-2L));
      Long.compareUnsigned(9223372036854775807L, (-1));
      Long long0 = new Long((-2L));
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(10229L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder0.shift((-2L));
      range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder((-1), 4294967295L);
      range_Builder2.contractBegin(1L);
      range_Builder4.copy();
      Range range1 = Range.of((-2L));
      Range range2 = range0.intersection(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.of((-2L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.401205415918294
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.of((-32759L));
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854774358L, (-32759L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32759 would make range [9223372036854774358 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.5372287911086517
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 10230L, 10230L);
      long long0 = (-1231L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(10230L);
      Range.ofLength(65535L);
      long long1 = 2099L;
      long long2 = (-3163L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2099L, (-3163L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.323100447758692
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.6589838244535473
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.shift((-3000L));
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder((-3332L), 2147483647L);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.of((-1L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-2828L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2828 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.531503457878984
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.of((-128L));
      long long0 = 9223372036854775807L;
      Long.compareUnsigned(2147483646L, 9223372036854775807L);
      long long1 = (-938L);
      Long.compareUnsigned((-938L), (-1881L));
      Long long2 = new Long(2147483646L);
      Range.Builder range_Builder0 = new Range.Builder(2147483646L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.shift(9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372034707292164 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.5046564804885896
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = 4294967295L;
      Range.of(9223372036854712124L);
      Range.of(4294967295L, 9223372036854775807L);
      Long.compareUnsigned(4294967295L, 9223372036854775807L);
      Long.getLong((String) null);
      Long.getLong((String) null);
      long long1 = 255L;
      Long long2 = new Long(255L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.970387429305474
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = (-4515L);
      Range range0 = Range.of((-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 2147483647L);
      range0.isSubRangeOf(range1);
      range1.intersects(range0);
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range2 = Range.of(range_CoordinateSystem0, 1L, 255L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range1.isSubRangeOf(range2);
      range_Builder1.contractBegin((-1072L));
      String string0 = "b4C9q?^$";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range1.forEach(consumer0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.152573647162874
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Long.compareUnsigned(4294967295L, 4294967295L);
      Long.compareUnsigned(4294967295L, 758L);
      Long.compareUnsigned(4294967295L, 0);
      Long.compareUnsigned(0L, 758L);
      Long long0 = new Long(755L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long1 = new Long(701L);
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.111534645219026
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=4.021552886627638
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.of(4294967309L, 9223372036854712124L);
      Long.getLong("0?b[qpxQ32a");
      Long.compareUnsigned(32767L, 65535L);
      Long.getLong("");
      Long long0 = new Long(65535L);
      Range range0 = Range.of(464L, 32767L);
      Range range1 = Range.of((-3767L));
      Range range2 = Range.of(2356L);
      Range range3 = Range.ofLength(1770L);
      boolean boolean0 = range1.intersects(range3);
      assertFalse(boolean0);
      
      Range.Comparators.values();
      range3.asRange();
      Range range4 = range1.intersection(range3);
      assertTrue(range4.isEmpty());
      
      Range range5 = Range.of((-334L));
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      assertTrue(list1.contains(range1));
      
      Range range6 = range5.intersection(range2);
      assertFalse(range2.isEmpty());
      assertSame(range6, range4);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=4.0290755448563464
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854773606L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.pollLast();
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      Long.getLong("");
      Long long0 = new Long(9223372036854773606L);
      Range range1 = Range.of(412L, 9223372036854773606L);
      Long long1 = new Long(1312L);
      Long long2 = new Long(4294977305L);
      Long long3 = Long.valueOf((-169L));
      range0.equals(long3);
      Range.of((-927L));
      range1.intersection(range0);
      Range.of(9223372036854773606L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.576405885143388
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(160L, 862L);
      range_Builder0.copy();
      Range range0 = Range.of(862L, 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.484868023354603
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(270L, 4294967338L);
      range0.isSubRangeOf(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range1.equals(object5);
      Long long0 = new Long(2147483647L);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      Object object13 = new Object();
      Object object14 = new Object();
      Long long1 = new Long((-8L));
      Object object15 = new Object();
      Object object16 = new Object();
      assertFalse(object16.equals((Object)object3));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.4079990110280645
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(1945L, 1945L);
      Long.compareUnsigned(1659L, 3224L);
      Long.compareUnsigned(64643L, (-976L));
      Long.getLong("1m+");
      range0.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1699L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1659L, (-1699L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.52399226387643
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(459L, 459L);
      Long.getLong(" -ts;uL1y:r");
      Object object0 = new Object();
      Object object1 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object2 = new Object();
      range0.equals(object2);
      Long long0 = new Long(459L);
      Long long1 = new Long(459L);
      Object object3 = new Object();
      Long long2 = new Long((-6043L));
      Object object4 = new Object();
      Long long3 = new Long(4959607L);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      Long long4 = new Long((-6043L));
      Object object13 = new Object();
      Object object14 = new Object();
      assertFalse(object14.equals((Object)object12));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.47029513121583
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-5L), 2147483647L);
      long long0 = (-1L);
      Long.compareUnsigned((-1L), (-5L));
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      long long1 = (-1L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(875L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.540116723842333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Long long0 = new Long(0L);
      long long1 = (-4294967294L);
      Long.min((-4294967294L), 1098L);
      range1.toString();
      range1.spliterator();
      range1.getLength();
      Long.compareUnsigned(9223372036854775208L, (-63L));
      Long.getLong("");
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-4294967294L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.879993940055331
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Long long0 = new Long(0L);
      range0.equals(range1);
      Range range2 = Range.of((-32L));
      Range range3 = Range.of((-1685L));
      range3.intersection(range2);
      Range.of(0L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.998387495641272
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = (-32768L);
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offer(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.parseRange("IFLi;d*yX6(l", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse IFLi;d*yX6(l into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.9329839892175653
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Long long0 = new Long(0L);
      Long.min((-4294967294L), 1098L);
      Long.compareUnsigned(3091L, (-372L));
      Long.compareUnsigned((-63L), 0L);
      Long.getLong("");
      Long long1 = new Long((-2147483649L));
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
      
      Range range2 = Range.ofLength(0L);
      List<Range> list0 = range2.split(9223372036854773618L);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.contains(range2));
      assertTrue(range2.isEmpty());
      assertSame(range1, range0);
      
      Range range3 = Range.of(0L);
      range3.getEnd();
      String string0 = range3.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 1 ]/SB", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.485845811776217
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Long.compareUnsigned(4294967295L, 4294967295L);
      Long.compareUnsigned(127L, (-2465L));
      Long.getLong("");
      Object object0 = new Object();
      Long.getLong("");
      Long long0 = new Long(127L);
      Long long1 = new Long(9223372036854773641L);
      Object object1 = new Object();
      Range.of((-2154L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long long2 = new Long(255L);
      Object object7 = new Object();
      Object object8 = new Object();
      Long long3 = new Long(0);
      boolean boolean0 = range0.equals(long3);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.3696836414383053
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(9223372036854712099L);
      Long.getLong(" -ts;uL1y:r");
      Object object0 = new Object();
      Object object1 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object2 = new Object();
      range0.equals(object2);
      Long long0 = new Long((-6043L));
      Long long1 = new Long((-6043L));
      Object object3 = new Object();
      Long long2 = new Long(0L);
      Object object4 = new Object();
      Long long3 = new Long(9223372036854712099L);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      Object object13 = new Object();
      Long long4 = new Long(4294977269L);
      Object object14 = new Object();
      Object object15 = new Object();
      assertFalse(object15.equals((Object)object7));
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.1392673346824425
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Long.compareUnsigned(4294967295L, 4294967295L);
      Long.compareUnsigned(4294967295L, 758L);
      Long.compareUnsigned(0, 65535L);
      Long.compareUnsigned(2147483646L, 50047L);
      Long long0 = new Long((-184L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long1 = new Long(50047L);
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range0.equals(object2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.537390478312691
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(1948L);
      Range range1 = Range.of(2202L, 2202L);
      Object object0 = new Object();
      Long.compareUnsigned(9223372032559808483L, (-2821L));
      Long long0 = new Long((-2821L));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range0.equals(object0);
      Long long1 = new Long(9223372032559808483L);
      Object object6 = new Object();
      Range range2 = null;
      // Undeclared exception!
      try { 
        range1.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.454021845679578
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.ofLength(4294967295L);
      Long.compareUnsigned(127L, (-2465L));
      Long.getLong("");
      Object object0 = new Object();
      Long.getLong("");
      Long long0 = new Long(127L);
      Long long1 = new Long(9223372036854773641L);
      Object object1 = new Object();
      Range.of((-2154L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long2 = new Long(255L);
      Object object6 = new Object();
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object6));
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.5973548847642958
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = (-128L);
      Range.of((-128L));
      Long.compareUnsigned(2147483624L, 2147483624L);
      Long.compareUnsigned(1L, 4294967338L);
      Long.compareUnsigned(2147483624L, 0);
      Long long1 = new Long(1);
      Object object0 = new Object();
      long long2 = 181L;
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      range_Builder1.shift(181L);
      long long3 = (-5771L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-5771L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=4.034020630739824
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder((-32768L), 1233L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = Range.of(1233L);
      Range range2 = Range.of(5248L);
      List<Range> list0 = range2.complement(range1);
      range1.complementFrom(list0);
      range2.intersection(range1);
      Range range3 = range_Builder1.build();
      assertNotSame(range3, range0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=4.179486456631002
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range range1 = Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addLast(range1);
      linkedList0.add(range1);
      assertTrue(linkedList0.contains(range1));
      
      range0.complementFrom(linkedList0);
      range1.complementFrom(linkedList0);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      range0.split(1L);
      Range.Builder range_Builder0 = new Range.Builder(180L);
      Range.Builder range_Builder1 = range_Builder0.shift((-38L));
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder((-3156L), 4294967295L);
      range_Builder3.copy();
      Range.of(255L);
      Range range3 = Range.of(4294977305L);
      List<Range> list0 = range1.complement(range2);
      range3.complementFrom(list0);
      range1.intersection(range3);
      Range.Builder range_Builder4 = new Range.Builder();
      Range range4 = range_Builder4.build();
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.527168194469833
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.ofLength(4294967325L);
      Range.Builder range_Builder0 = new Range.Builder(4294967325L);
      range_Builder0.contractBegin(4294967325L);
      Long.compareUnsigned((-39L), (-1563L));
      Long long0 = new Long((-1569L));
      long long1 = 3805L;
      Long long2 = new Long((-1569L));
      Range range1 = Range.ofLength(2411L);
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 10230L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split((-1563L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.9132001628545776
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 180L, 2356L);
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Long.compareUnsigned(12L, 758L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      range1.intersection(range0);
      Range.of(9990L, 9990L);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 180L, (-4230L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.2974925062543874
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = 17L;
      Range range0 = Range.of(17L, 17L);
      long long1 = 0L;
      Range range1 = Range.of(0L, 17L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("F^H=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.F^H=
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.618800390537175
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(17L, 17L);
      Range range1 = Range.of(0L);
      range0.equals(range1);
      long long0 = (-1223L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.shift(179L);
      Range.Builder range_Builder3 = range_Builder2.shift(0L);
      range_Builder2.build();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(17L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.864594713540655
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.ofLength(597L);
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Long.compareUnsigned(12L, 758L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-4171L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.760040275854444
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2393L, 2393L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.609897659711206
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.ofLength(0L);
      Long.compareUnsigned(0L, 1L);
      long long0 = 19L;
      Long.compareUnsigned(19L, (-913L));
      Long.getLong("");
      Long long1 = new Long(9223372036854775807L);
      Range.of(0L, 19L);
      Long long2 = new Long(9223372036854775807L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=4.201562264213309
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.ofLength(4294967295L);
      Long.compareUnsigned(4294967295L, 4294967295L);
      Range.of(1980L);
      Range range0 = Range.ofLength(758L);
      Long.compareUnsigned(4294967295L, 758L);
      Long.compareUnsigned(0, 65535L);
      Long.compareUnsigned(2147483646L, 50047L);
      Range.of((-184L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-858L), 50047L);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      long long0 = (-1866L);
      // Undeclared exception!
      try { 
        Range.of(1980L, 781L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.4512545500820937
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.of((-2147483648L), (-2147483648L));
      Long long0 = new Long((-2147483648L));
      long long1 = (-1L);
      Long.compareUnsigned(4294967295L, (-1L));
      Long.getLong((String) null);
      Long.divideUnsigned(1529L, 2190L);
      Long.divideUnsigned((-1121L), (-2147483648L));
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1950L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.6596936247580385
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.of((-1504L), 4294967295L);
      Long.getLong("");
      Object object0 = new Object();
      Long.getLong("l.nFuQ;_");
      Long long0 = new Long(4305130334L);
      Object object1 = new Object();
      Range.of(1804L);
      Range.of(1591L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long1 = new Long(1557L);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Long long2 = new Long(871L);
      Object object8 = new Object();
      Object object9 = new Object();
      assertFalse(object9.equals((Object)object6));
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.552847850188417
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Long.compareUnsigned((-2147483648L), 2147483646L);
      Long.compareUnsigned((-2147483648L), (-711L));
      Long long0 = new Long(1);
      Long long1 = new Long((-281L));
      Object object0 = new Object();
      Range.of((-307L));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long2 = new Long((-196L));
      Object object4 = new Object();
      Object object5 = new Object();
      Range range0 = Range.of((-2147483648L), (-281L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.6572517986736646
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(65535L);
      range1.intersection(range0);
      Long.getLong("wjnf4^]9b:*ydD!,");
      Range range2 = range0.intersection(range1);
      range2.getLength();
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 65535L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.8460660513268907
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.ofLength(0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(1451L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder((-1223L), 0L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.shift(1451L);
      range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.shift(1451L);
      range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(1451L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.7924349166924287
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.of((-128L));
      Long.compareUnsigned(2147483646L, 9223372036854775807L);
      Long.compareUnsigned(9223372036854775807L, (-614L));
      Long.getLong("");
      Long long0 = new Long((-614L));
      Range range0 = Range.of((-128L), 0L);
      Long long1 = new Long(0L);
      Range.ofLength(3572L);
      range0.split(1806L);
      range0.split(1097L);
      Range.of((-1334L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.777815379245722
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(1948L);
      Range range1 = Range.of(1948L, 1948L);
      Long.compareUnsigned(1948L, 1948L);
      Long.getLong((String) null);
      Object object0 = new Object();
      Long.getLong((String) null);
      Long long0 = new Long(1591L);
      Long long1 = new Long(2147483647L);
      Object object1 = new Object();
      Range.of(1591L);
      Range range2 = Range.of((long) 0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean0 = range2.equals(object4);
      Range range3 = range1.intersection(range2);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Long long2 = new Long(871L);
      Object object8 = new Object();
      Object object9 = new Object();
      boolean boolean1 = range3.equals(object9);
      assertFalse(range2.isEmpty());
      assertSame(range1, range0);
      assertTrue(boolean1 == boolean0);
      assertTrue(range3.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.82847737765801
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Long long0 = new Long((-2147483648L));
      Long.compareUnsigned(4294967295L, (-1L));
      Long.getLong((String) null);
      Long.divideUnsigned(1529L, 2190L);
      Long.divideUnsigned((-1121L), (-2147483648L));
      Long.getLong((String) null);
      Long.compareUnsigned(3181L, (-386L));
      range0.equals((Object) null);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long.compareUnsigned((-386L), 2847L);
      Long.getLong("start offset can not be less than 0");
      Long long1 = new Long((-3043L));
      range0.equals("start offset can not be less than 0");
      Range range1 = Range.of((-1685L));
      range0.intersection(range1);
      Range.CoordinateSystem.values();
      Long long2 = new Long(4069L);
      range1.equals(long2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.9563367730548356
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(2147483647L);
      Range range1 = range_Builder1.build();
      Long.compareUnsigned(2147483647L, 2147483647L);
      Long long0 = new Long(0);
      Object object0 = new Object();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = range_Builder0.shift(9223372036854773859L);
      range_Builder1.shift((-1957L));
      range_Builder1.build();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range.Builder range_Builder5 = new Range.Builder((-3604L), 2347L);
      Range.Builder range_Builder6 = new Range.Builder();
      Range range2 = Range.ofLength(2147483647L);
      range2.intersection(range1);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.5555521013680984
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.of((-128L));
      Long.compareUnsigned(2147483646L, 9223372036854775807L);
      Long.compareUnsigned(9223372036854775807L, (-614L));
      String string0 = "";
      Long.getLong("");
      Long long0 = new Long((-614L));
      Range range0 = Range.of((-128L), 0L);
      Long long1 = new Long(0L);
      long long2 = 3572L;
      Range range1 = Range.of((-128L));
      range1.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 21L, (-614L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.811601213865319
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2147483647L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      range0.isSubRangeOf(range0);
      range0.intersects(range0);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range_Builder0.expandBegin(2147483647L);
      range_Builder0.copy();
      range1.isEmpty();
      range_Builder0.contractBegin(0L);
      String string0 = "b4C9q?^$";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.744626466441099
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2147483647L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      range0.isSubRangeOf(range0);
      range0.intersects(range0);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.expandBegin(2147483647L);
      range_Builder0.copy();
      range0.isEmpty();
      range_Builder0.contractBegin(0L);
      String string0 = "b4C9q?^$";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.387294299601126
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(range_Builder1);
      Object object5 = new Object();
      Long long0 = new Long(127L);
      Object object6 = new Object();
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object5));
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.5520297562917476
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854712124L);
      Long.getLong(" -ts;uL1y:r");
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Long long0 = new Long(4294967295L);
      Long long1 = new Long(9223372036854712124L);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(" -ts;uL1y:r");
      Long long2 = new Long((-3007L));
      Object object4 = new Object();
      long long3 = range0.getLength();
      //  // Unstable assertion: assertEquals(9223372032559744830L, long3);
      
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      Long long4 = new Long((-2469L));
      range0.equals(object1);
      Range range1 = Range.ofLength(9223372036854712124L);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertTrue(range2.equals((Object)range0));
      //  // Unstable assertion: assertNotSame(range2, range0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.8200945476566996
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      range1.complement(range0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(9223372036854775807L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.4906928945069873
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range0.isSubRangeOf(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long0 = new Long(3715L);
      Object object6 = new Object();
      range0.startsBefore(range1);
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("'SzUfz`<&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.'SzUfz`<&
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.641968269775849
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = 255L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 255L, 740L);
      Range.Builder range_Builder0 = new Range.Builder((-3192L), 4294967295L);
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.shift(1625L);
      range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(4294967295L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.7434931624641825
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Long.compareUnsigned(2147483646L, 9223372036854775807L);
      Long.compareUnsigned(2438L, (-610L));
      Long long0 = new Long((-610L));
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(2438L);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.shift(2438L);
      range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder2.copy();
      Range range1 = Range.of(2438L);
      range0.intersection(range1);
      Range.of(1L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.9590469234293857
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.of((-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1291L, 1291L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, (-4515L), (-2523L));
      range0.endsBefore(range1);
      range0.complement(range1);
      Range.ofLength(1291L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem3, (-2L), 1291L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, (-2523L), 65535L);
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        Range.of((-2L), (-2933L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.921634722418759
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.ofLength(4294967325L);
      Range.Builder range_Builder0 = new Range.Builder(4294967325L);
      range_Builder0.contractBegin(4294967325L);
      range_Builder0.build();
      String string0 = "jVI";
      Range range1 = Range.of(4294967325L);
      long long0 = (-2087L);
      range1.endsBefore(range0);
      long long1 = 2147483647L;
      range1.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2087L), 1314L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.040945507052142
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967325L);
      range_Builder0.contractBegin(4294967325L);
      Range range0 = range_Builder0.build();
      Long.compareUnsigned(4294967325L, 9223372032559808483L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Long long0 = new Long((-1228L));
      Object object10 = new Object();
      Object object11 = new Object();
      assertFalse(object11.equals((Object)object8));
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.646171923819826
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(4294967309L, 9223372036854712124L);
      Long.getLong("0?b[qpxQ32a");
      Long.compareUnsigned(32767L, 65535L);
      Long.getLong("");
      Long long0 = new Long(65535L);
      Range.of(464L, 32767L);
      Long long1 = new Long((-2424L));
      Long long2 = new Long((-1));
      range0.equals(long2);
      Range.of(65535L);
      Range range1 = Range.of(4297966800L);
      range1.intersection(range0);
      Range.of(994L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.303248073639753
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2102L), 149L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.9508447032275384
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Long.compareUnsigned(9223372036854775807L, 2147483646L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2147483646L);
      Range range0 = Range.ofLength(9223372036854773229L);
      Object object0 = new Object();
      range0.equals(range_Builder1);
      Range range1 = Range.of(2147483646L);
      Range range2 = range0.intersection(range1);
      Range range3 = range1.asRange();
      range1.equals(object0);
      Range range4 = Range.of(255L);
      Range range5 = Range.ofLength(9223372036854775807L);
      range3.getBegin();
      Range.Comparators.values();
      Range range6 = range3.asRange();
      range0.intersection(range1);
      Range.of(2147483647L);
      List<Range> list0 = range4.complement(range6);
      range1.complementFrom(list0);
      range5.intersection(range2);
      // Undeclared exception!
      try { 
        Range.of(0L, (-1866L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.5980827671506157
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Long.getLong("wjnf4^]9b:*ydD!,");
      range0.intersection(range1);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 65535L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.4424796815381313
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Long.compareUnsigned(2147483646L, 9223372036854775807L);
      Long.compareUnsigned(2438L, (-610L));
      Long long0 = new Long((-610L));
      Range range0 = Range.ofLength(2147483646L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.775512226361439
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of(1L);
      range0.complement(range0);
      range0.iterator();
      Range range1 = Range.of(1L, 255L);
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.6649534939684663
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = (-4515L);
      Range.of((-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4515L), (-4515L));
      range0.getLength();
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.5277172053712227
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4515L), (-4515L));
      range0.getBegin(range_CoordinateSystem0);
      Range.of(range_CoordinateSystem0, (-4515L), 2147483647L);
      Long long0 = new Long(1521L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.8329068628485277
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = (-4515L);
      Range range0 = Range.of((-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem2);
      range0.startsBefore(range1);
      range1.getEnd(range_CoordinateSystem2);
      Range.Builder range_Builder0 = new Range.Builder((-4515L), 2895L);
      Range range2 = Range.of(0L, 1199L);
      range2.endsBefore(range0);
      range2.spliterator();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = (-1840L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, (-944L), (-1840L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=4.128301200650062
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 10230L, 10230L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-128L), 10230L);
      range_Builder0.expandBegin((-128L));
      Range range2 = Range.ofLength(10230L);
      Object object0 = new Object();
      Range range3 = Range.ofLength(10230L);
      range2.equals(range3);
      Range range4 = range2.intersection(range0);
      Range range5 = range4.asRange();
      Range range6 = Range.of(65535L);
      Range range7 = Range.ofLength(2142L);
      Range.Comparators.values();
      range2.asRange();
      range1.intersection(range6);
      Range range8 = Range.of(1361L);
      List<Range> list0 = range7.complement(range4);
      range8.complementFrom(list0);
      assertEquals(0, list0.size());
      
      Range range9 = range2.intersection(range3);
      assertSame(range3, range5);
      assertNotSame(range9, range0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.9635188597114244
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854773606L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      Long.getLong("");
      Long long0 = new Long(9223372036854773606L);
      Range.of(412L, 9223372036854773606L);
      Long long1 = new Long(1312L);
      Long long2 = new Long(4294977305L);
      Long.valueOf((-169L));
      Range range1 = Range.of(4294977305L);
      range1.intersection(range0);
      Range.of((-34L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.115161650319898
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967325L);
      range_Builder0.contractBegin(4294967325L);
      Range range0 = range_Builder0.build();
      Long.compareUnsigned(4294967325L, 9223372032559808483L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.intersects(range0);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Long long0 = new Long((-1228L));
      Object object10 = new Object();
      assertFalse(object10.equals((Object)object7));
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.2675871151461036
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of(4294967309L, 9223372036854712124L);
      Object object0 = new Object();
      Object object1 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Long long0 = new Long(9223372036854712124L);
      Object object2 = new Object();
      Long long1 = new Long(9223372032556805530L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      Long long2 = new Long(65535L);
      Object object12 = new Object();
      Object object13 = new Object();
      assertFalse(object13.equals((Object)object6));
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.93764894267553
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.ofLength(0L);
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L);
      Range range2 = Range.ofLength(1451L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem0);
      range2.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder((-1223L), 0L);
      Range.Builder range_Builder1 = new Range.Builder((-1223L), 1451L);
      long long0 = 9223372036854775807L;
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder1.build();
      Range.Builder range_Builder3 = range_Builder0.shift(1451L);
      range_Builder3.build();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(1451L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.647481850740452
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Long long0 = new Long((-2147483648L));
      Long.compareUnsigned(4294967295L, (-1L));
      Long.getLong((String) null);
      Long.divideUnsigned(1529L, 2190L);
      Long.divideUnsigned((-1121L), (-2147483648L));
      Long.getLong((String) null);
      Long.compareUnsigned(3181L, (-386L));
      range0.equals((Object) null);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long.compareUnsigned((-386L), 2847L);
      Long.getLong("start offset can not be less than 0");
      Long long1 = new Long((-3043L));
      range0.equals("start offset can not be less than 0");
      range0.intersection(range0);
      Range.of((-59L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.839271773876245
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Long long0 = new Long((-2147483648L));
      Long.compareUnsigned(4294967295L, (-1L));
      Long.getLong((String) null);
      Long.divideUnsigned(1529L, 2190L);
      Long.divideUnsigned((-1121L), (-2147483648L));
      Long.getLong((String) null);
      Long.compareUnsigned(3181L, (-386L));
      range0.equals((Object) null);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long.compareUnsigned((-386L), 2847L);
      Long.getLong("start offset can not be less than 0");
      Long long1 = new Long((-3043L));
      range0.equals("start offset can not be less than 0");
      Range range1 = Range.of((-1685L));
      long long2 = range1.getEnd();
      //  // Unstable assertion: assertEquals((-1685L), long2);
      
      Range range2 = range0.intersection(range1);
      Range.of((-59L));
      Range.Comparators.values();
      Range range3 = range0.intersection(range2);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.6889110270543437
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854712124L);
      Long.getLong(" -ts;uL1y:r");
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Long long0 = new Long(4294967295L);
      Long long1 = new Long(9223372036854712124L);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(" -ts;uL1y:r");
      Long long2 = new Long((-3007L));
      Object object4 = new Object();
      long long3 = range0.getLength();
      //  // Unstable assertion: assertEquals(9223372032559744830L, long3);
      
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      Long long4 = new Long((-2469L));
      boolean boolean0 = range0.equals(object1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range1 = Range.ofLength(1948L);
      long long5 = range1.getEnd();
      //  // Unstable assertion: assertEquals(1947L, long5);
      
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.3052682756599547
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2024L), (-2024L));
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.2081819478882947
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 9223372036854775211L, 9223372036854775211L);
      Long long0 = new Long(9223372036854775211L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.9126085447280126
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Long long0 = new Long((-2147483648L));
      Long.compareUnsigned(4294967295L, (-1L));
      Long.getLong((String) null);
      Long.divideUnsigned(1529L, 2190L);
      Long.divideUnsigned((-1121L), (-2147483648L));
      Long.getLong((String) null);
      Long.compareUnsigned(3181L, (-386L));
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(9223372036854713289L);
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder((-568L), (-98L));
      Range.Builder range_Builder4 = new Range.Builder();
      Range range1 = Range.of(1055L);
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.495182475178795
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Long long0 = new Long(2147483647L);
      Long.compareUnsigned(0L, 127L);
      Object object0 = new Object();
      Long long1 = new Long(9223372036854773641L);
      Long long2 = new Long(2147483647L);
      Object object1 = new Object();
      Range range0 = Range.of((-2706L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long long3 = new Long(2202L);
      Object object7 = new Object();
      Range range1 = Range.ofLength(2147483647L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.7073997067100017
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of(4294967325L);
      Range range1 = Range.ofLength(4294967325L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      range0.isSubRangeOf(range1);
      Range.Builder range_Builder0 = new Range.Builder(4294967325L);
      range_Builder0.contractBegin(4294967325L);
      Range range2 = range_Builder0.build();
      range2.complement(range0);
      long long0 = (-1223L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(1449L, (-1223L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.7688857771414024
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      range0.isSubRangeOf(range0);
      range0.intersects(range0);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      range_Builder1.build();
      long long0 = (-1044L);
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 9223372036854775806L, (-1044L));
      range_Builder2.shift(9223372036854775806L);
      range_Builder2.build();
      long long1 = (-362L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-362L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.9460472783318536
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.of(17L, 17L);
      Range range0 = Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L, 17L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder3 = range_Builder2.shift(17L);
      Range range2 = range_Builder3.build();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder5 = new Range.Builder((-1536L), 255L);
      range_Builder4.copy();
      Range.of(9223372036854712830L);
      Range range3 = Range.of((-1536L));
      List<Range> list0 = range1.complement(range3);
      range1.complementFrom(list0);
      range2.intersection(range0);
      range_Builder2.build();
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.27309561146277
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.build();
      Long.compareUnsigned(2147483647L, 2147483647L);
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.051457082892094
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967325L);
      range_Builder0.contractBegin(4294967325L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range0.startsBefore(range0);
      Long long0 = new Long((-412L));
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      Object object13 = new Object();
      Object object14 = new Object();
      Long long1 = new Long(4294967325L);
      Object object15 = new Object();
      Object object16 = new Object();
      assertFalse(object16.equals((Object)object3));
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.551385188566962
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.ofLength(4294967325L);
      Range.Builder range_Builder0 = new Range.Builder(4294967325L);
      range_Builder0.contractBegin(4294967325L);
      range_Builder0.build();
      Range range0 = Range.of(4294967325L);
      range_Builder0.contractEnd((-2087L));
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967325L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.5555380546977045
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(1948L);
      Range.of(1948L, 1948L);
      Long.compareUnsigned(1948L, 1948L);
      Long long0 = new Long((-1569L));
      long long1 = 3805L;
      Long long2 = new Long(3805L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.shift(0);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(363L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.6588604336973862
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.shift((-1223L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder((-1536L), 255L);
      range_Builder2.copy();
      Range.of(9223372036854712830L);
      Range range0 = range_Builder1.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.426688171211246
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(7178L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Long.compareUnsigned(7178L, 7178L);
      Long long0 = new Long(0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      Object object13 = new Object();
      Long long1 = new Long(1312L);
      Object object14 = new Object();
      Object object15 = new Object();
      assertFalse(object15.equals((Object)object0));
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2147483647L);
      long long0 = 2147483646L;
      Long.compareUnsigned(9223372036854775807L, 2147483646L);
      long long1 = (-32768L);
      Long.compareUnsigned((-32768L), (-128L));
      Long long2 = new Long(4294977304L);
      Object object0 = new Object();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.7971983136574865
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of(838L);
      Long.compareUnsigned(9223372036854775807L, 2147483646L);
      Long.compareUnsigned(838L, 32767L);
      Long.getLong("");
      Long long0 = new Long(838L);
      Range.of(1312L, 9223372036854775211L);
      Long long1 = new Long(9223372036854775807L);
      Long long2 = new Long(0L);
      Range.of(838L);
      Range.of(9223372036854774362L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (long) (-1), 9223372036854774362L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Long long0 = new Long((-1175L));
      Range.of((-1175L), (-59L));
      Long.valueOf((-2456L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long long1 = new Long(847L);
      Object object7 = new Object();
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object3));
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.234578123667491
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Long.compareUnsigned(1450L, 1450L);
      Long.compareUnsigned(826L, 4294967295L);
      Long.getLong("wjnf4^]9b:*ydD!,");
      Long long0 = new Long((-1));
      Object object0 = new Object();
      Range.of(32766L);
      Range range0 = Range.of(1L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.1459983229767676
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      long long1 = 4294967295L;
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.4785958370254777
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of(270L, 4294967338L);
      range0.isSubRangeOf(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long0 = new Long(255L);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      Object object13 = new Object();
      Object object14 = new Object();
      Long long1 = new Long((-8L));
      Object object15 = new Object();
      Object object16 = new Object();
      assertFalse(object16.equals((Object)object11));
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(2L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1077L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.6799616069051715
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L);
      range_Builder0.build();
      range_Builder0.expandBegin(466L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder3 = range_Builder1.contractBegin(466L);
      assertSame(range_Builder3, range_Builder1);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.365643922890749
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      long long0 = 2147483647L;
      Range.of(2147483647L, 2147483647L);
      String string0 = "Q_Y~okbW>mx}";
      // Undeclared exception!
      try { 
        Range.parseRange("Q_Y~okbW>mx}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Q_Y~okbW>mx} into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.7936494559306224
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of(9223372036854712124L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.intersection(range0);
      range0.asRange();
      Range.ofLength(9223372036854712124L);
      Range range1 = Range.parseRange("[ 9223372036854712124 .. 9223372036854712124 ]/0B", range_CoordinateSystem0);
      Range range2 = Range.parseRange("[ 9223372036854712124 .. 9223372036854712124 ]/0B", range_CoordinateSystem0);
      range1.complement(range2);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.7888791403041893
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = 1948L;
      Range.of(1948L);
      Range.of(1948L, 1948L);
      Long.compareUnsigned(1948L, 1948L);
      Long long1 = new Long((-1569L));
      Long long2 = new Long(3805L);
      long long3 = 3572L;
      Range.ofLength(1948L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1948L);
      // Undeclared exception!
      try { 
        range0.split((-1569L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.773924123404994
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Long long0 = new Long((-2147483648L));
      Long.compareUnsigned(4294967295L, (-1L));
      Long.divideUnsigned((-1), 2190L);
      Long.divideUnsigned((-1121L), (-2147483648L));
      Long.compareUnsigned(3181L, (-386L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long.compareUnsigned((-386L), 2847L);
      Range range1 = Range.ofLength(2147483648L);
      range1.split(8423170809913037L);
      range0.split(639L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483646L, 2579L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.3568113492839657
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long long0 = 2147483646L;
      Long long1 = new Long(618L);
      Long.compareUnsigned(2147483646L, 618L);
      Long.getLong("");
      Object object0 = new Object();
      Long.getLong("<,U([sw;\"c");
      Long long2 = new Long(9223372036854712123L);
      Long long3 = new Long((-805L));
      Object object1 = new Object();
      Range.of((-2706L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294977290L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.343633929407073
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Long long0 = new Long(618L);
      Long.compareUnsigned(2147483646L, 618L);
      Long.getLong("");
      Object object0 = new Object();
      Long.getLong("<,U([sw;\"c");
      Long long1 = new Long(9223372036854712123L);
      Long long2 = new Long((-805L));
      Object object1 = new Object();
      Range.of((-2706L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long long3 = new Long(9223372036854712123L);
      Object object7 = new Object();
      Range range0 = Range.of(2147483646L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.30273127777412
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2663L), 1806L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.2671143019073328
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Long.getLong(" -ts;uL1y:r");
      Object object0 = new Object();
      Object object1 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(4294967309L);
      Object object2 = new Object();
      Object object3 = new Object();
      Long long1 = new Long((-3007L));
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      Long long2 = new Long((-2469L));
      Range.Comparators.values();
      Range range0 = Range.of(4294967309L, 4294967309L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Long.compareUnsigned(4294967325L, 9223372032559808483L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Long long0 = new Long((-1228L));
      Object object10 = new Object();
      Object object11 = new Object();
      // Undeclared exception!
      try { 
        Range.of(1333L, 918L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.59849636950512
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of(4294967325L, 4294967325L);
      Long.compareUnsigned(758L, 4294967325L);
      Long.compareUnsigned((-1211L), (-919L));
      Long.compareUnsigned(255L, (-1));
      Long long0 = new Long((-1));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Long long1 = new Long(4294967325L);
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Range range1 = Range.of((-1211L));
      assertFalse(range1.equals((Object)range0));
  }
}
