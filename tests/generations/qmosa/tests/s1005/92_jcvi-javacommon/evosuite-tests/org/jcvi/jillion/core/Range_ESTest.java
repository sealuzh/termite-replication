/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 09:17:27 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5112341831132796
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 3358L;
      long long1 = 570L;
      Long long2 = new Long((-2527L));
      Long.getLong((String) null, long2);
      Object object0 = new Object();
      Range range0 = Range.of(3247L);
      Range range1 = Range.of(range_CoordinateSystem0, 157L, 3247L);
      range1.iterator();
      range0.endsBefore(range1);
      range0.equals(range_CoordinateSystem0);
      Range range2 = Range.of((-1451L));
      Long.getLong("");
      Range range3 = Range.of((-4L), 570L);
      Range range4 = Range.of((-4L), 2813L);
      range3.isSubRangeOf(range4);
      range2.equals(range3);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 32766L, 609L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9669434861893547
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of((-99L), 1L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6492908223005913
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = (-2147483648L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 127L);
      Long long1 = new Long((-2147483648L));
      long long2 = (-3967L);
      Long.toUnsignedString(2289L);
      Long.min((-2147483648L), (-3967L));
      Long.compareUnsigned(255L, 2190L);
      Long.compareUnsigned((-2947L), (-2486L));
      Long.getLong((String) null);
      range0.equals(long1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-710L));
      Long.getLong((String) null);
      range_Builder1.contractEnd((-802L));
      Long.getLong("");
      Range range1 = Range.ofLength(127L);
      range0.complement(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8892632916692693
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Long long0 = new Long(4294967295L);
      Long.compareUnsigned(3224L, (-128L));
      Long long1 = new Long(4294967295L);
      Long.remainderUnsigned(1487L, (-1));
      Long.valueOf((-128L));
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder(1487L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1503L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.4422476750070894
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      range0.getBegin();
      Range range1 = Range.of((-128L));
      Object object0 = new Object();
      Range range2 = Range.of((-128L), (-128L));
      range1.iterator();
      range1.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem0);
      Long.compareUnsigned((-1L), (-1L));
      Long long0 = new Long(4294967295L);
      range1.equals(range2);
      Long.compareUnsigned(4491L, (-128L));
      Long.compareUnsigned((-2486L), (-2486L));
      Long.getLong("byte array can not be null");
      range0.intersects(range1);
      Range.ofLength(4294967295L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(4491L, (-2984L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.416525712015368
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of((-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long0 = new Long(1027L);
      Long.min(2147483647L, (-2147487232L));
      long long1 = 9223372036854707749L;
      Long.compareUnsigned(2147483647L, 1090L);
      Long long2 = new Long(2147483647L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.getLength();
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range1.split(389L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long3 = 65534L;
      // Undeclared exception!
      try { 
        range0.complementFrom(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4515 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.389128465258762
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of((-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long0 = new Long(1027L);
      Long.min(2147483647L, (-2147487232L));
      Long.compareUnsigned(9223372036854707749L, 3224L);
      Long.compareUnsigned(2147483647L, 1090L);
      Long long1 = new Long(2147483647L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.ofLength(570L);
      range0.getLength();
      Range.of(range_CoordinateSystem0, (long) 1, (long) 1);
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range1.split(389L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 9223372036854775807L, (-4515L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4515 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.025005474001157
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(1960L);
      Range.ofLength(1960L);
      Long.compareUnsigned(3247L, 3247L);
      Long long0 = new Long(570L);
      Long.valueOf(1960L);
      Long.getLong((String) null, long0);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(32766L);
      Long.compareUnsigned(0L, (-4469L));
      Long.getLong("org.jcvi.jillion.core.Range$Comparators");
      range0.equals(range1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getLength();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372032559808513L, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2086299988857543
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(1960L);
      Range range1 = Range.ofLength(1960L);
      Long.compareUnsigned(3247L, 3247L);
      Long long0 = new Long(570L);
      Long.compareUnsigned((-13L), 1960L);
      Long.valueOf(1960L);
      Long long1 = Long.getLong((String) null, long0);
      Object object0 = new Object();
      range0.equals(object0);
      Range range2 = Range.of(570L);
      Long.compareUnsigned(3247L, (-4469L));
      Long.toUnsignedString(4082L);
      Long.getLong("org.jcvi.jillion.core.Range$Comparators");
      range0.equals(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem.values();
      range2.getLength();
      Long.compareUnsigned(9223372036854775807L, 1L);
      range1.equals(long0);
      Range range3 = range0.asRange();
      range3.equals(long1);
      range0.getLength();
      range1.intersection(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("4082");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.4082
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.569791524707622
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = (-2147483639L);
      Long long1 = new Long((-2147483639L));
      Range range0 = Range.of(9223372036854775208L);
      range0.equals((Object) null);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      range0.complementFrom(linkedList1);
      Range range1 = Range.of((-9223372036854775808L), (-3967L));
      range1.complementFrom(linkedList1);
      Long.compareUnsigned(9223372036854775807L, (-1882L));
      Long.getLong("");
      range0.equals("M9;~eQ@+}38ON!%^h");
      Range.Builder range_Builder0 = new Range.Builder();
      Long.getLong("M9;~eQ@+}38ON!%^h");
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long2 = (-3156L);
      long long3 = 4294965351L;
      Range.ofLength(4294965351L);
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3967 would make range [9223372036854775208 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = (-3756L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-3756L), (-3756L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.7047436346130014
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = 38L;
      long long1 = 32767L;
      Range range0 = Range.of(38L, 32767L);
      Range range1 = Range.of(32767L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = (-1392L);
      Range range2 = Range.of((-1392L));
      range0.startsBefore(range2);
      Range range3 = Range.of(range_CoordinateSystem0, 38L, 32767L);
      range1.getEnd();
      range1.complement(range0);
      range3.spliterator();
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$LongRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$LongRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2071062048134547
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      range0.intersection(range1);
      Range.ofLength(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2741056198849163
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = 4294967325L;
      Range range0 = Range.ofLength(4294967325L);
      Range range1 = Range.ofLength(4294967325L);
      range0.intersection(range1);
      Range.ofLength(4294967325L);
      Range range2 = Range.ofLength(4294967325L);
      long long1 = 9223372036854775807L;
      Range.of(4294967295L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range2.forEach(consumer0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.7424408906774094
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of((-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long0 = new Long(1027L);
      Long.min(2147483647L, (-2147487232L));
      Long.compareUnsigned(9223372036854707749L, 3224L);
      Long.compareUnsigned(2147483647L, 1090L);
      Long long1 = new Long(2147483647L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.ofLength(570L);
      range0.getLength();
      Range range1 = Range.of(range_CoordinateSystem0, (long) 1, (long) 1);
      Range range2 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range2.split(389L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(559L, 65534L);
      range2.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 65534L, 9223372036854707749L);
      range3.equals(long0);
      range2.asRange();
      range2.getLength();
      // Undeclared exception!
      try { 
        range2.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4515 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0325189149497596
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-2147483639L));
      long long1 = 9223372036854775208L;
      Range range0 = Range.of(9223372036854775208L);
      range0.equals((Object) null);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372036854775208L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.5402555553231534
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 0L);
      String string0 = range1.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
      
      Range range2 = range1.intersection(range0);
      Object object0 = new Object();
      Range range3 = Range.of((-128L), 1680L);
      range1.iterator();
      Long long0 = new Long(296L);
      range3.isSubRangeOf(range0);
      Long long1 = new Long(1680L);
      range1.iterator();
      Long long2 = new Long(1884L);
      Range range4 = Range.ofLength(316L);
      range0.isEmpty();
      Range range5 = Range.of((-1449L), 0L);
      range5.equals((Object) null);
      boolean boolean0 = range1.startsBefore(range2);
      boolean boolean1 = range1.isSubRangeOf(range3);
      assertFalse(boolean1 == boolean0);
      
      long long3 = range1.getEnd();
      assertNotSame(range1, range4);
      assertEquals(0L, long3);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.290560813103366
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-128L));
      Long.remainderUnsigned(3224L, (-819L));
      Long long1 = Long.valueOf(2147483646L);
      Long long2 = new Long(2147483646L);
      Long.getLong((String) null, long2);
      Range range0 = Range.of(255L, 1487L);
      Range range1 = Range.ofLength(255L);
      range0.equals(range1);
      Long.remainderUnsigned((-119L), (-119L));
      Long.compareUnsigned((-2147483649L), 32767L);
      Long.getLong((String) null);
      range0.equals(long1);
      Range range2 = Range.ofLength(570L);
      range0.intersection(range2);
      Range range3 = Range.of((-119L), 3224L);
      assertFalse(range3.equals((Object)range1));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.104659876139396
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = 3224L;
      Range range0 = Range.ofLength(3224L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3224L, 9223372032559808513L);
      Range.Comparators.values();
      range0.intersects(range1);
      long long1 = (-4270L);
      // Undeclared exception!
      try { 
        range1.split((-4270L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.254466130201626
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      long long1 = (-2067L);
      range1.intersects(range0);
      Range.Builder range_Builder0 = new Range.Builder(2116L);
      Range range2 = range_Builder0.build();
      range2.isSubRangeOf(range1);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.286232061796231
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L, 4294967295L);
      range0.getBegin();
      Range range1 = Range.of((-128L));
      Object object0 = new Object();
      long long1 = (-128L);
      Range range2 = Range.of((-128L), (-128L));
      range1.iterator();
      // Undeclared exception!
      try { 
        range2.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1068861474226868
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = 1945L;
      Range range0 = Range.of(1945L, 1945L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.equals(range_CoordinateSystem0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      Long.compareUnsigned(633L, 1945L);
      String string0 = "";
      Long.getLong("");
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1894L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.4665135255165493
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      range1.toString();
      Range range2 = range1.intersection(range0);
      Range range3 = Range.ofLength(0L);
      boolean boolean0 = range3.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range2.toString(range_CoordinateSystem0);
      range2.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem1);
      long long0 = range1.getLength();
      Range range4 = Range.ofLength(389L);
      range3.startsBefore(range0);
      Range range5 = Range.of(0L, 0L);
      range3.complement(range4);
      boolean boolean1 = range0.equals("[ 1 .. 0 ]/RB");
      Range range6 = Range.ofLength(0L);
      range2.equals(range6);
      boolean boolean2 = range3.startsBefore(range5);
      assertTrue(boolean2 == boolean1);
      
      range5.startsBefore(range6);
      long long1 = range2.getLength();
      assertEquals(0L, long1);
      
      long long2 = range5.getLength();
      assertFalse(long2 == long0);
      assertNotSame(range5, range4);
      
      boolean boolean3 = range0.endsBefore(range6);
      assertTrue(range6.isEmpty());
      assertSame(range6, range2);
      assertTrue(boolean3);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0863741003285914
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(1945L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.equals(range_CoordinateSystem0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      long long0 = 1L;
      Long.compareUnsigned(633L, 1L);
      String string0 = "";
      Long.getLong("");
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1894L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.0779557574008756
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.of((-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2147487232L), (-2147487232L));
      Long long0 = new Long(1027L);
      Long.min(2147483647L, (-2147487232L));
      Long.compareUnsigned(9223372036854707749L, 3224L);
      Long.compareUnsigned(2147483647L, 1090L);
      Long long1 = new Long(2147483647L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-2147487232L), (-4515L));
      Range.Comparators.values();
      long long2 = 65535L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854707749L, (-2147487232L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147487232 would make range [9223372036854707749 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.7421186236025523
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-2147483639L));
      Range range0 = Range.of(9223372036854775208L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      range0.complementFrom(linkedList1);
      Range range1 = Range.ofLength(279L);
      range1.complement(range1);
      Long.compareUnsigned(67721L, (-89L));
      Long.getLong("");
      Object object0 = new Object();
      range0.equals(object0);
      Range range2 = Range.ofLength(279L);
      Range range3 = range0.intersection(range2);
      Range.of(1635L, 32767L);
      Range range4 = Range.of((-2849L), 1080L);
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.17826954207094
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = 1945L;
      Range range0 = Range.of(1945L);
      range0.toString();
      Range range1 = range0.intersection(range0);
      Range.ofLength(0L);
      range0.isSubRangeOf(range0);
      range1.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem0);
      range0.iterator();
      Long.compareUnsigned(1945L, (-405L));
      Long.getLong("[ 1945 .. 1945 ]/0B");
      Range range2 = Range.of(1945L);
      Range range3 = range0.asRange();
      Long.getLong("number of entries must be >=0");
      range2.equals(range3);
      // Undeclared exception!
      try { 
        Range.ofLength((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.060287092608695
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.of(1945L);
      Range.Builder range_Builder0 = new Range.Builder(1945L, 1945L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("file can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.file can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8782885341845934
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-2147483639L));
      Long.min((-2147483639L), (-3967L));
      long long1 = 263L;
      Long.compareUnsigned(263L, 2190L);
      String string0 = "<8~vy^W`-KET";
      Long.getLong("<8~vy^W`-KET");
      Range range0 = Range.ofLength(2147483647L);
      range0.equals("]");
      Range.Builder range_Builder0 = new Range.Builder(263L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372036854775806L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9174329732922155
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      range0.equals(range_CoordinateSystem0);
      Long.min((-2147483648L), (-2147483648L));
      Long.remainderUnsigned((-32768L), 4294967295L);
      Long.compareUnsigned(4294967283L, 177L);
      Long.getLong("");
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.of(1854L, 1227L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.118626888992665
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Long.getLong("org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange");
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.ofLength((-852L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2437261781913755
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-4515L), (-4515L));
      Long long0 = new Long(1027L);
      Long.min(2147483647L, (-2147487232L));
      Long.compareUnsigned(9223372036854707767L, 3224L);
      Long.compareUnsigned(2147483647L, 1090L);
      Long long1 = new Long(2147483647L);
      Object object0 = new Object();
      Long.remainderUnsigned(9223372036854707767L, 1L);
      Long.compareUnsigned((-1569L), 475L);
      long long2 = 127L;
      Long.compareUnsigned(0L, (-2147473675L));
      Range range1 = Range.of((long) (-1));
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2953934965740856
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(1945L);
      Range range1 = Range.of(1945L, 1945L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.toArray();
      range0.equals(range_CoordinateSystem0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      range1.complementFrom(list0);
      range0.getBegin(range_CoordinateSystem0);
      range1.startsBefore(range0);
      range0.intersects(range0);
      range0.isSubRangeOf(range1);
      long long0 = 4294967295L;
      Long.compareUnsigned(4294967295L, (-600L));
      Long.getLong("'U");
      // Undeclared exception!
      try { 
        Range.ofLength((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8370993812038146
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 347L, 4294967295L);
      long long0 = (-2251L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 347L, (-2251L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3355027165424307
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-2147483639L));
      Long.min((-2147483639L), (-3967L));
      Long.compareUnsigned(1496L, (-805L));
      Long long1 = Long.valueOf((long) (-1));
      Long.getLong("R-i=:vvKY1-BG@@N", long1);
      Object object0 = new Object();
      Range range0 = Range.of((-3967L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range1 = Range.of(65535L);
      Long.compareUnsigned(2190L, 263L);
      Long.toUnsignedString(4082L);
      Long.getLong("DEPARTURE");
      Object object1 = new Object();
      range1.equals(object1);
      Range.CoordinateSystem.values();
      long long2 = range0.getLength();
      Object object2 = new Object();
      range0.equals(object2);
      Range range2 = range1.asRange();
      range0.equals(object2);
      long long3 = range2.getLength();
      assertTrue(long3 == long2);
      
      Range range3 = range1.intersection(range0);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.2855113402701317
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.ofLength(4294967325L);
      Range range1 = Range.ofLength(4294967325L);
      range0.intersection(range1);
      Range.ofLength(4294967325L);
      Range.ofLength(4294967325L);
      long long0 = 703L;
      Long.compareUnsigned(4294967325L, 703L);
      Long.getLong("##C*");
      Range.ofLength(2901L);
      range1.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder(4294967325L);
      range_Builder0.contractEnd(4294967325L);
      Long.getLong("");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.771169641088684
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-2147483639L));
      Long.min((-3967L), (-2147483639L));
      long long1 = 263L;
      Long.compareUnsigned((-2147483639L), 2190L);
      Long long2 = new Long((-2147483639L));
      Range range0 = Range.ofLength(9223372036854775807L);
      Long long3 = new Long((-2691L));
      range0.equals(long3);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.086459303534469
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.ofLength(4294967325L);
      Range range0 = Range.ofLength(4294967325L);
      Range range1 = Range.ofLength(4294967325L);
      range1.equals(range0);
      Long.min(4294967283L, 4294967325L);
      Long.remainderUnsigned(4294967325L, (-9223372036854775808L));
      Long.compareUnsigned(1854L, 2190L);
      Long.compareUnsigned((-2947L), 255L);
      Long.compareUnsigned(255L, 4294967325L);
      Range.ofLength(4294967283L);
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775808L), 2228L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.793465468720484
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(38L, 32767L);
      Range range1 = Range.of(2190L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of((-1392L));
      range0.startsBefore(range2);
      Range range3 = Range.of(range_CoordinateSystem0, 38L, 2190L);
      range1.getEnd();
      Long.compareUnsigned(2190L, 1960L);
      Range range4 = Range.of((-53L));
      range4.toString();
      Long.compareUnsigned((-2164L), (-1548L));
      String string0 = "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange";
      Long long0 = new Long(2802L);
      Range range5 = Range.of((-3760L));
      range5.equals("org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange");
      Range range6 = Range.ofLength(32767L);
      range5.endsBefore(range3);
      range6.getEnd();
      List<Range> list0 = range0.split(2190L);
      range6.complementFrom(list0);
      range4.getEnd();
      // Undeclared exception!
      try { 
        Range.of((-53L), (-1598L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8892632916692698
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 149L, 600L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long.getLong((String) null);
      Object object2 = new Object();
      Long long0 = new Long((-8L));
      Long.getLong("9M.ER2}4@&M", (Long) null);
      Object object3 = new Object();
      Long long1 = new Long((-8L));
      range0.equals(long1);
      Long.compareUnsigned(32766L, (-2006L));
      Long.getLong((String) null);
      Object object4 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("u!_Kf0yo`wa@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.u!_Kf0yo`wa@
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.128620949980629
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 127L;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 127L);
      Long long1 = new Long((-2147483648L));
      Long.min((-2147483648L), (-3967L));
      Long.compareUnsigned(255L, 2190L);
      Long.compareUnsigned((-2947L), (-2486L));
      Long.getLong((String) null);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-2486L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.5322213452935958
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(1945L);
      Range range1 = Range.ofLength(1945L);
      range0.toString();
      Range range2 = range1.intersection(range0);
      Range range3 = Range.parseRange("[ 1945 .. 1945 ]/0B");
      range3.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(range3);
      Long.compareUnsigned((-1392L), 5073L);
      range2.toString();
      Long.compareUnsigned((-1392L), (-1392L));
      Long long0 = new Long((-2572L));
      range2.equals("[ 1945 .. 1945 ]/0B");
      Range range4 = Range.ofLength(710L);
      range4.endsBefore(range2);
      range2.getEnd();
      // Undeclared exception!
      try { 
        range1.split((-2067L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.967867468534036
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      range0.equals(range_CoordinateSystem0);
      Long long0 = new Long((-2147483648L));
      Object object0 = new Object();
      range0.equals(">!Zgn");
      Long.min((-32768L), 380L);
      Long.remainderUnsigned((-9223372036854775808L), (-9223372036854775808L));
      Long.compareUnsigned(4294967295L, 32767L);
      Long.getLong("|y@;t$!w`dgpjm?U");
      Object object1 = new Object();
      range0.equals(long0);
      range0.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of((-390L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.7070261103211553
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = 32767L;
      Range range0 = Range.of(38L, 32767L);
      Range range1 = Range.of(2190L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-1392L);
      Range range2 = Range.of((-1392L));
      range0.startsBefore(range2);
      Range range3 = Range.of(range_CoordinateSystem0, 38L, 2190L);
      range1.getEnd();
      range1.complement(range0);
      range3.spliterator();
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$LongRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$LongRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.263191967581878
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(4294967325L);
      Range range1 = Range.ofLength(4294967325L);
      range0.intersection(range1);
      Range range2 = Range.ofLength(4294967325L);
      range2.intersects(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      long long0 = 57L;
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.192467807814258
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long.getLong("brbsbfj");
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(9998L);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range1.forEach(consumer1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.5515810167236124
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(127L);
      Long long0 = new Long((-2147483648L));
      Object object0 = new Object();
      Object object1 = new Object();
      Long.getLong((String) null);
      Object object2 = new Object();
      Long long1 = new Long(127L);
      Range range1 = Range.of((-2147483648L), (-32768L));
      Long.getLong("", (Long) null);
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean0 = range0.equals(object4);
      assertFalse(boolean0);
      
      Long.compareUnsigned((-2147473652L), (-2147483648L));
      Long.getLong((String) null);
      Object object5 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      Range range3 = Range.of((-2147483648L));
      Range range4 = range1.intersection(range3);
      assertSame(range4, range3);
      assertFalse(range4.isEmpty());
      assertNotSame(range1, range4);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.201916810924501
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of((-2147483648L), 127L);
      Long long0 = new Long((-2147483648L));
      Object object0 = new Object();
      Object object1 = new Object();
      Long long1 = new Long(127L);
      Range.of((-2147483648L), (-32768L));
      Long.getLong("", long0);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      Long.compareUnsigned((-2147473652L), (-2147483648L));
      Long.getLong((String) null);
      Object object4 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.015335123367012
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      Long long1 = new Long(4294967295L);
      Long.compareUnsigned(3224L, (-128L));
      Long long2 = new Long(4294967295L);
      Long.remainderUnsigned(1487L, (-1));
      Long long3 = Long.valueOf((-128L));
      Long.getLong((String) null, long3);
      range0.equals(long2);
      Long.min((-1), (-1));
      Long.remainderUnsigned(4294967295L, (-32768L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long4 = (-1794L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1794L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.8997571011430576
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-2147483648L));
      Long.min(2881L, (-592L));
      Long.compareUnsigned(570L, 4294967295L);
      Long.compareUnsigned(2147483491L, (-2947L));
      Long.getLong("org.jcvi.jillion.internal.core.util.Caches");
      Range.ofLength(4294967295L);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-2321L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.25969581362438
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-2147483648L));
      range0.equals(range_CoordinateSystem0);
      Long.min((-2147483648L), (-2147483648L));
      Long.remainderUnsigned((-32768L), 4294967295L);
      Long.compareUnsigned(4294967283L, 177L);
      Long.getLong("");
      range0.equals((Object) null);
      Range.ofLength(601L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-9223372036854775808L), 1854L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.3130910621871537
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-2147483639L));
      Long.min((-2147483639L), (-3967L));
      Long.compareUnsigned(263L, 2190L);
      Long.compareUnsigned((-2947L), (-2486L));
      Long.getLong((String) null);
      Range.ofLength(3224L);
      Range.of((-2147483639L), (-2147483639L));
      Range.Builder range_Builder0 = new Range.Builder(9223372036854772805L, 9223372036854772805L);
      range_Builder0.build();
      range_Builder0.build();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.36993796204126
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      Long.compareUnsigned((-128L), (-1567L));
      Long long0 = new Long((-128L));
      Long.remainderUnsigned(2619L, (-1L));
      Long long1 = Long.valueOf(2619L);
      Long.getLong((String) null, long1);
      range0.equals((Object) null);
      Long.min(1195L, 4294967295L);
      Long.remainderUnsigned(3224L, 148L);
      Long.compareUnsigned(255L, (-32768L));
      Long.getLong((String) null);
      Object object1 = new Object();
      range0.equals(object1);
      Range range1 = Range.ofLength(1080L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(1080L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.298053423284618
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Long.compareUnsigned(2147483647L, 13221L);
      Long.getLong("EzA");
      Range.ofLength(13221L);
      long long0 = 1L;
      Range.of((-2456L), 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(0L, 127L);
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.568075571059968
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Long long0 = new Long(4294967295L);
      Long.compareUnsigned(3224L, (-128L));
      Long long1 = new Long(4294967295L);
      Long.remainderUnsigned(1487L, (-1));
      Long long2 = Long.valueOf((-128L));
      Long.getLong((String) null, long2);
      range0.equals(long1);
      Long.min((-1), (-1));
      Long.compareUnsigned(1487L, 452L);
      Long.getLong("|y@;t$!w`dgpjm?U");
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-60L), 1021L);
      range0.equals(range1);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range.of((-1L), 4294967295L);
      Range range3 = Range.of((-60L), (-1L));
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.3874887384934618
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(4294967325L);
      Range range1 = Range.ofLength(4294967325L);
      Range range2 = range0.intersection(range1);
      Long.compareUnsigned(4294967325L, (-1L));
      String string0 = null;
      Long.getLong("+fEYdubB~(_ocV");
      Range range3 = Range.ofLength(9223372036854775807L);
      Range.of(4294967324L, 4294967325L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range2.intersection(range0);
      // Undeclared exception!
      try { 
        range3.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.4058892780939
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 149L;
      long long1 = 600L;
      Range range0 = Range.of(range_CoordinateSystem0, 149L, 600L);
      Range range1 = Range.of((-37L), 600L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 149L, 149L);
      Long.compareUnsigned(147L, (-26L));
      String string0 = null;
      Long.getLong((String) null);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.of((long) (-1), (-26L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.8482765550079985
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
      
      Range range1 = Range.of(4294967295L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.3074199637598043
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of((-32723L), (-32723L));
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range1.isEmpty();
      boolean boolean1 = range0.startsBefore(range1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.286478660848192
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-128L));
      Long.remainderUnsigned(3224L, (-819L));
      Long long1 = Long.valueOf(2147483646L);
      Long long2 = new Long(2147483646L);
      Long.getLong((String) null, long2);
      Range range0 = Range.of(255L, 1487L);
      Range range1 = Range.ofLength(1243L);
      range0.equals(range1);
      Long.remainderUnsigned((-119L), (-119L));
      Long.compareUnsigned((-2147483649L), 32767L);
      Long.getLong((String) null);
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
      
      Range range2 = Range.ofLength(570L);
      Range range3 = range0.intersection(range2);
      assertFalse(range3.isEmpty());
      assertNotSame(range3, range2);
      
      Range range4 = Range.of((-119L), 3224L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.5402395577903705
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = (-2147483639L);
      Long long1 = new Long((-2147483639L));
      long long2 = 279L;
      Range range0 = Range.of(9223372036854775208L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      range0.complementFrom(linkedList1);
      Range range1 = Range.ofLength(279L);
      range1.complement(range1);
      long long3 = 67721L;
      Long.compareUnsigned(67721L, (-89L));
      Long.getLong("");
      Object object0 = new Object();
      Long long4 = new Long((-1894L));
      range1.equals(long4);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483639L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.072457935131087
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 127L);
      Long long0 = new Long((-2147483648L));
      Long.min((-2147483648L), (-3967L));
      Long.compareUnsigned((-1091L), 127L);
      Long.compareUnsigned((-2947L), (-2486L));
      range0.equals(long0);
      Long.remainderUnsigned(149L, (-7L));
      Long.compareUnsigned((-128L), (-1091L));
      Long.getLong("length can not be less than 0");
      Object object0 = new Object();
      range0.equals("length can not be less than 0");
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.313680899363444
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Long.getLong("org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange");
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Long.compareUnsigned(0L, 9223372036854775208L);
      Long.valueOf(9223372036854775208L);
      Long long0 = new Long(9223372036854775208L);
      Long.getLong("org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange", long0);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.ofLength(0L);
      Long.getLong("#h?-eie1OLcdp&");
      boolean boolean0 = range1.equals((Object) null);
      Range.CoordinateSystem.values();
      long long1 = range1.getLength();
      assertEquals(0L, long1);
      
      boolean boolean1 = range0.equals(object0);
      assertTrue(boolean1 == boolean0);
      
      Range range2 = range1.asRange();
      long long2 = range0.getLength();
      assertEquals(1L, long2);
      
      range0.intersection(range1);
      assertFalse(range0.equals((Object)range2));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.499329778812846
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.of((-128L));
      Object object0 = new Object();
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-128L), 775L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-128L), 4527L);
      range1.split(9223372036854775284L);
      Long.getLong("?(wSaXl:~VDxQV");
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, 32767L, 9223372036854775208L);
      Range range2 = Range.of((-2147483649L));
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.352451830195875
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(2202L, 2202L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 32767L);
      Long.getLong("75|t");
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-3756L), 2202L);
      Range range1 = Range.of(2202L);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
      
      List<Range> list0 = range0.split(32767L);
      assertTrue(list0.contains(range1));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.110962765998967
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-2147483648L));
      Long.min((-2147483648L), (-3967L));
      Long.compareUnsigned(255L, 2190L);
      Long.compareUnsigned((-2947L), (-2486L));
      Long.getLong((String) null);
      Range range0 = Range.ofLength(3224L);
      range0.split(1946L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1771L, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.3521154376990396
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-2147483648L));
      Long.min((-2147483648L), (-3967L));
      Long.compareUnsigned(255L, 2190L);
      Long.compareUnsigned((-2947L), (-2503L));
      Long.getLong((String) null);
      Range range0 = Range.ofLength(3224L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.split(2147483647L);
      Range range1 = Range.of((-2147483648L), 1599L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.5136836648286636
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.of(1960L);
      Range.ofLength(1960L);
      Range range0 = Range.of((-1935L), (-1935L));
      Range range1 = Range.of(1808L);
      range1.intersection(range0);
      range0.getLength();
      Long.getLong("");
      Long.compareUnsigned(2949L, 1808L);
      Range.ofLength(1960L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-32768L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.508304410302894
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.parseRange("6BG1-2");
      Range.of(2521L);
      range0.spliterator();
      Range range1 = Range.of((-1629L), (-1629L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.421569656349147
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = 570L;
      Range range0 = Range.of(570L, 570L);
      Range range1 = Range.ofLength(570L);
      range1.toString();
      range1.intersection(range0);
      Range range2 = Range.ofLength(26L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.parseRange("[ 0 .. 569 ]/0B", range_CoordinateSystem0);
      range2.intersects(range3);
      // Undeclared exception!
      try { 
        Range.parseRange(" i{HnqN:e. 0mg*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  i{HnqN:e. 0mg* into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.0026974323801805
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      long long0 = 3224L;
      Long.compareUnsigned(149L, 149L);
      String string0 = null;
      Long.valueOf((long) 0);
      Long long1 = new Long(0);
      Long.getLong((String) null, long1);
      Object object0 = new Object();
      range0.equals(object0);
      long long2 = 116L;
      Long.min(116L, 149L);
      long long3 = 4294967295L;
      // Undeclared exception!
      try { 
        Long.remainderUnsigned((-32768L), 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.501521895040651
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(303L);
      Range range1 = Range.ofLength(2713L);
      Range range2 = range0.intersection(range1);
      Range.ofLength(2713L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range3 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range2);
      long long0 = 2L;
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Long.getLong("start offset can not be less than 0");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.ofLength(303L);
      range1.intersection(range3);
      // Undeclared exception!
      try { 
        Range.of(2713L, 2L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.302130091510701
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.getLength();
      range0.split(1L);
      Long.getLong("");
      Long.compareUnsigned((-4614L), (-2486L));
      Range range1 = Range.ofLength(1L);
      range1.endsBefore(range0);
      Range range2 = Range.of((-32768L), 245L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.3670846672061683
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range range1 = Range.of((-32768L), (-32768L));
      range1.intersection(range0);
      range1.getLength();
      Long.getLong("");
      long long0 = (-2147487232L);
      range0.getBegin();
      Long.compareUnsigned(255L, (-2147487232L));
      Long.compareUnsigned((-4614L), (-2486L));
      Range.ofLength(1L);
      // Undeclared exception!
      try { 
        Range.of(1L, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.1319142220900362
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-2147483639L));
      Long.min((-2147483639L), (-3967L));
      Long.compareUnsigned(263L, 2190L);
      Long.getLong("<8~vy^W`-KET");
      Range range0 = Range.ofLength(2147483647L);
      range0.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder(263L);
      range_Builder0.expandBegin((-2147483639L));
      range_Builder0.contractEnd(9223372036854775806L);
      Long.getLong("<8~vy^W`-KET");
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.6646191951934917
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854773849L);
      Range range0 = range_Builder0.build();
      long long0 = range0.getLength();
      assertEquals(9223372036854773849L, long0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.426548958368617
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-2147483648L));
      Long.min((-2147483648L), (-3967L));
      Long.compareUnsigned((-1468L), 3224L);
      Long long1 = new Long((-1468L));
      Long.compareUnsigned(3224L, 4491L);
      Range range0 = Range.ofLength(2167L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long.getLong("coordinateSystem can not be null");
      Range.of((-2147483648L), (-1188L));
      Range.ofLength(1);
      Range.of((-2147483648L), (long) (-1));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("8Ia$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.8Ia$
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.138375670253359
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-2147483639L));
      Long.min((-2147483639L), (-3967L));
      Long.compareUnsigned(263L, 2190L);
      Long.getLong("<8~vy^W`-KET");
      Range.ofLength(2147483669L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("file can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.file can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.4548802506574443
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range range1 = Range.of(0L, 0L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      
      range1.getLength();
      Long.getLong("");
      Long.compareUnsigned(255L, (-2147487232L));
      Long.compareUnsigned((-4614L), (-2486L));
      Range range3 = Range.ofLength(1L);
      boolean boolean0 = range3.startsBefore(range0);
      assertFalse(boolean0);
      
      Range range4 = Range.of((-32768L), 245L);
      assertNotSame(range4, range0);
      
      long long0 = range3.getLength();
      assertEquals(1L, long0);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.423991918489433
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(1945L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 255L);
      assertTrue(range1.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.of(255L, 1945L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.build();
      Range range2 = range_Builder1.build();
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.3016797141954393
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-2147483639L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3384L), (-3384L));
      Range range1 = Range.of((-128L), 32767L);
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-3374L), 163L);
      Long.compareUnsigned((-213L), 858L);
      Long.getLong("b5*[~me1");
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.of(890L, (-213L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.532802496192921
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 149L, 600L);
      Range range1 = Range.ofLength(0L);
      range1.intersection(range0);
      Range.ofLength(65535L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(0L, 65535L);
      Range range2 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range2);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder(range_CoordinateSystem0, (-8L), 2702L);
      range_Builder4.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.158695065831406
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.of(1945L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("file can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.file can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.6383509294321468
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-2147483639L));
      Range range0 = Range.of(9223372036854775208L);
      range0.equals((Object) null);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      range0.complementFrom(linkedList1);
      Range range1 = Range.ofLength(279L);
      range1.complementFrom(linkedList1);
      Long.compareUnsigned(9223372036854775208L, 1635L);
      boolean boolean0 = range1.endsBefore(range0);
      assertTrue(boolean0);
      
      range0.equals("given length %d would make range [%d - ? ] beyond max allowed end offset");
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      Range.of((-2147483639L), 279L);
      long long1 = range1.getLength();
      assertEquals(279L, long1);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.2836619282336605
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 127L);
      Long long0 = new Long((-2147483648L));
      Long.min((-2147483648L), (-3967L));
      Long.remainderUnsigned(3224L, 127L);
      Long.compareUnsigned((-3967L), 49L);
      Long.getLong("Z}(e=DJ\u0002Lx=[^J=Ib");
      range0.endsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      long long1 = (-2536L);
      range_Builder0.contractEnd((-2536L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.997756703271982
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), 127L);
      Long long0 = new Long((-2147483648L));
      Long.min((-2147483648L), (-3967L));
      Long.compareUnsigned(255L, 2190L);
      Long.compareUnsigned((-2947L), (-2486L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2190L, (-562L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.072457935131087
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = (-2147483648L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 127L);
      Long long1 = new Long((-2147483648L));
      Long.min((-2147483648L), (-2147483648L));
      Long.compareUnsigned((-1091L), 127L);
      Long.compareUnsigned((-2947L), (-2486L));
      String string0 = null;
      range0.equals(long1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2322L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.242253380977717
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), 127L);
      Long long0 = new Long((-2147483648L));
      Long.min((-2147483648L), (-3967L));
      Long.getLong((String) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 127L, 127L);
      Range.Builder range_Builder0 = new Range.Builder((-2147483648L), (-3967L));
      Range range1 = range_Builder0.build();
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.195085608204764
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Long.getLong("F|");
      Range range0 = Range.of(range_CoordinateSystem0, (-465L), (-465L));
      range0.getEnd();
      Range.of(875L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.352451830195875
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = (-2147483639L);
      Long long1 = new Long((-2147483639L));
      Range range0 = Range.of(9223372036854775208L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      range0.complementFrom(linkedList1);
      Range range1 = Range.ofLength(279L);
      range1.complementFrom(linkedList1);
      Long.compareUnsigned(9223372036854775208L, 1635L);
      Range.of(783L, 1635L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.1530140378840623
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(4294967325L);
      range0.getBegin();
      Range range1 = Range.ofLength(4294967325L);
      range0.intersection(range1);
      Range.ofLength(4294967325L);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(4294967325L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.3846824184553377
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      long long1 = (-2054L);
      range1.intersects(range0);
      long long2 = 2116L;
      Range.Builder range_Builder0 = new Range.Builder(2116L);
      Range.Builder range_Builder1 = new Range.Builder(4629L, 4294967295L);
      Range range2 = range_Builder1.build();
      range2.isSubRangeOf(range1);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range2.split((-2054L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.4373477172959777
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(1945L);
      Range range1 = Range.of(1945L, 1945L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      range1.complementFrom(list0);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      range1.startsBefore(range0);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.ofLength(0L);
      Range.Comparators.values();
      Range range3 = Range.of(32767L);
      long long1 = range3.getLength();
      assertEquals(1L, long1);
      
      long long2 = range1.getEnd(range_CoordinateSystem1);
      assertEquals(1946L, long2);
      
      range3.isSubRangeOf(range2);
      long long3 = range2.getEnd(range_CoordinateSystem0);
      assertTrue(long3 == long0);
      
      Range range4 = Range.of(1L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.2262939582920356
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(1960L);
      Range range1 = Range.ofLength(1960L);
      range1.split(1960L);
      Long.compareUnsigned(3247L, 3247L);
      Long long0 = new Long(570L);
      long long1 = (-9223372036854775808L);
      Long.valueOf(1960L);
      Long.getLong((String) null, long0);
      Object object0 = new Object();
      range0.isSubRangeOf(range0);
      Range.of(32766L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1392L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.7168997376996322
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(1945L);
      Long long0 = new Long(0L);
      Range range1 = Range.of(2846L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      range1.complementFrom(linkedList1);
      Range range2 = Range.ofLength(2452L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      Long.compareUnsigned(1635L, 1122L);
      Long.getLong("");
      Object object0 = new Object();
      boolean boolean0 = range1.equals(long0);
      assertFalse(boolean0);
      
      Range.ofLength(255L);
      Range range3 = range0.intersection(range2);
      assertSame(range3, range0);
      assertFalse(range3.isEmpty());
      
      Range.of((-89L), 136L);
      Range range4 = Range.of((long) 1, 9223372036854775208L);
      assertFalse(range4.isEmpty());
      
      Range range5 = range1.asRange();
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.2337475349956293
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      Range.of((-128L), (-128L));
      range0.iterator();
      range0.equals(object0);
      Long.compareUnsigned((-1L), (-1L));
      Long long1 = new Long(4294967295L);
      Long.compareUnsigned(4491L, (-128L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long.getLong("coordinateSystem can not be null");
      // Undeclared exception!
      try { 
        Range.of((-1L), (-2147473651L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long.compareUnsigned(284L, 2190L);
      Long.compareUnsigned((-2947L), (-2486L));
      Long.getLong((String) null);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.024695553858248
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      Long.compareUnsigned(1854L, 2190L);
      long long1 = 255L;
      Long.compareUnsigned((-2947L), 255L);
      String string0 = "";
      Long.getLong("");
      Range.Builder range_Builder0 = new Range.Builder(255L);
      range_Builder0.expandEnd(1603L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.f
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.8511655404720884
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = 4294967325L;
      Range range0 = Range.ofLength(4294967325L);
      Range range1 = Range.ofLength(4294967325L);
      range0.intersection(range1);
      Range range2 = Range.ofLength(4294967325L);
      Range range3 = Range.ofLength(4294967325L);
      Long long1 = new Long(1512L);
      Long.min(4294967325L, 0L);
      Long.remainderUnsigned(4294967295L, (-1224L));
      Long.compareUnsigned(4294967295L, 0L);
      long long2 = (-2947L);
      long long3 = (-1706L);
      long long4 = (-357L);
      Long.compareUnsigned((-1706L), (-357L));
      range2.intersects(range3);
      // Undeclared exception!
      try { 
        Range.ofLength((-481L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.860814667921871
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 172L, 172L);
      long long0 = (-2530L);
      // Undeclared exception!
      try { 
        Range.of((-2530L), (-4515L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.389229896320501
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(4294967325L);
      Range range1 = Range.ofLength(4294967325L);
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range2.complement(range0);
      range2.complementFrom(list0);
      range2.split(4294967325L);
      Range.ofLength(4294967325L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(57L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.473884599919243
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 303L, 4294967304L);
      Range range1 = Range.ofLength(2713L);
      Range range2 = range0.intersection(range1);
      Range.ofLength(2713L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range2);
      range_Builder0.expandEnd(2L);
      range2.startsBefore(range0);
      range_Builder1.expandEnd(559L);
      range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.1849167395122406
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = (-2147483648L);
      Long long1 = new Long((-2147483648L));
      long long2 = (-3967L);
      Long.min((-2147483648L), (-3967L));
      Long.compareUnsigned(255L, 2179L);
      long long3 = (-2486L);
      Range range0 = Range.of((-2486L));
      long long4 = 0L;
      Range range1 = Range.ofLength(0L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("<uqa2]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse <uqa2] into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.814359184750864
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(0L);
      Long.valueOf(0L);
      Long long1 = new Long(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long.getLong((String) null);
      Object object2 = new Object();
      range0.getLength();
      Long long2 = new Long((-2134L));
      Long.getLong((String) null, long2);
      Object object3 = new Object();
      range0.intersects(range0);
      Long.compareUnsigned(32766L, 65535L);
      Long.getLong((String) null);
      Object object4 = new Object();
      range0.equals(object4);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.A
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.456838608990368
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 149L, 600L);
      Range range1 = Range.of((-8L), 600L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 149L, 149L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-24L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.5467256531435507
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(4294967325L);
      Range range1 = Range.ofLength(4294967325L);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      Range.ofLength(4294967325L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range3 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range3);
      Range range4 = Range.of(109L);
      boolean boolean0 = range3.isSubRangeOf(range4);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range5 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range6 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range7 = Range.of(range_CoordinateSystem0, 4294967325L, 4294967325L);
      //  // Unstable assertion: assertSame(range7, range2);
      
      Range range8 = range0.intersection(range6);
      //  // Unstable assertion: assertTrue(range8.isEmpty());
      //  // Unstable assertion: assertNotSame(range0, range2);
      
      range1.getLength();
      long long0 = range5.getLength();
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.1107705678514885
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.of(1945L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(1945L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range1 = range_Builder1.build();
      range1.getEnd();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.expandEnd((-125L));
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.1704479994629717
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      range0.equals(range_CoordinateSystem0);
      Long long0 = new Long((-2147483648L));
      Long.remainderUnsigned((-32768L), 4294967295L);
      range0.getEnd(range_CoordinateSystem0);
      Long.compareUnsigned(4294967283L, 177L);
      Long.getLong("");
      range0.equals((Object) null);
      Range.ofLength(601L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-9223372036854775808L), 1857L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.967867468534036
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-2147483639L));
      Long.min((-2147483639L), (-3967L));
      Long.compareUnsigned(263L, 2348L);
      Long.compareUnsigned((-47L), 1224L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2151L), (-1525L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem1);
      assertEquals((-2150L), long1);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.9678854742176353
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of(1960L);
      Range range1 = Range.ofLength(1960L);
      long long0 = 3247L;
      Long.compareUnsigned(3247L, 3247L);
      long long1 = 570L;
      range0.isSubRangeOf(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-3279L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.2172615357380594
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L));
      Long long1 = new Long((-2147483648L));
      Object object0 = new Object();
      Object object1 = new Object();
      Long.getLong((String) null);
      Object object2 = new Object();
      Long long2 = new Long((-2147483648L));
      Range range1 = Range.of((-2147483648L), (-32768L));
      Long.getLong("", (Long) null);
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      Object object5 = new Object();
      Object object6 = new Object();
      range1.equals(object6);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-3177L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.4927980843848903
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = (-2147483648L);
      Range range0 = Range.of(127L);
      Long long1 = new Long((-2147483648L));
      Object object0 = new Object();
      Object object1 = new Object();
      Long.getLong((String) null);
      Object object2 = new Object();
      Long long2 = new Long(127L);
      Range range1 = Range.of((-2147483648L), (-32768L));
      Long.getLong("", (Long) null);
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      Object object5 = new Object();
      Object object6 = new Object();
      range1.equals(object6);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-3177L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.2766918294371856
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(1945L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 255L);
      assertTrue(range1.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.build();
      Range range2 = range_Builder1.build();
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.1586950658314055
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.of(1945L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("file can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.file can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.0443902281158373
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Long.min(149L, 67712L);
      Long.compareUnsigned(67708L, 2190L);
      Long.getLong("<8~vy^W`-KET");
      Range range0 = Range.ofLength(67708L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775208L);
      long long0 = 9223372036854775806L;
      range_Builder0.contractEnd(1);
      Long.getLong("value can not be <0");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.0140772805713656
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(9223372036854743040L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.0897556540651876
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of((-2147483648L), 127L);
      Long long0 = new Long((-2147483648L));
      Object object0 = new Object();
      Object object1 = new Object();
      Long.getLong((String) null);
      Object object2 = new Object();
      Long long1 = new Long(127L);
      Range.of((-2147483648L), (-32768L));
      Long.getLong("", (Long) null);
      Object object3 = new Object();
      Object object4 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.0026974323801805
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of((-8L), 600L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 149L, 149L);
      Long.compareUnsigned(149L, (-1004L));
      Long.compareUnsigned(1235L, (-2151L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 149L, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.2945673012118535
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L);
      range_Builder0.build();
      range_Builder0.expandBegin(466L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder3 = range_Builder1.contractBegin(466L);
      assertFalse(range_Builder3.equals((Object)range_Builder2));
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.158039775219435
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1112L), 0L);
      range_Builder0.expandBegin((-1112L));
      range_Builder0.expandEnd(247L);
      range_Builder0.build();
      range_CoordinateSystem0.toString();
      range_Builder0.expandBegin(0L);
      long long1 = 255L;
      Range range0 = Range.ofLength(255L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.489936460865019
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complementFrom(linkedList0);
      range0.isSubRangeOf(range1);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range2 = range_Builder0.build();
      Range range3 = range1.intersection(range2);
      Range range4 = Range.of(3161L);
      range4.complementFrom(list0);
      range0.complement(range4);
      Range.ofLength(0L);
      range0.complement(range2);
      range_Builder0.copy();
      range3.split(1946L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("2N^@=)H}sXdo?i]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.2N^@=)H}sXdo?i]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.972845711672121
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      long long0 = 2147483647L;
      Range.of(2147483647L, 2147483647L);
      String string0 = "Q_Y~okbW>mx}";
      // Undeclared exception!
      try { 
        Range.parseRange("Q_Y~okbW>mx}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Q_Y~okbW>mx} into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("WNw 0", (Range.CoordinateSystem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse WNw 0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(2L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1077L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.8531772127889563
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-2147483639L));
      long long1 = new Long((-2147483639L));
      Long.compareUnsigned(263L, 2348L);
      Long.compareUnsigned((-47L), 1224L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1525L), 1);
      Range range0 = range_Builder0.build();
      range0.toString();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-2147483639L));
      long long1 = 279L;
      Range range0 = Range.of(9223372036854775208L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      // Undeclared exception!
      try { 
        range0.split((-2147483639L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-462L), (-462L));
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.0970595116798196
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Long.compareUnsigned(2190L, 1L);
      Long.compareUnsigned(4294967295L, (-32768L));
      Long.getLong((String) null);
      Range.ofLength(84L);
      Range.Builder range_Builder0 = new Range.Builder(84L, 2190L);
      range_Builder0.shift(65535L);
      range_Builder0.build();
      Range.of(4294967295L);
      range_Builder0.build();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(1983L, 1983L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.9190235060608334
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem.values();
      Long long0 = new Long((-2147483639L));
      Long.min((-2147483639L), (-3967L));
      Long.compareUnsigned(263L, 2190L);
      Long.compareUnsigned(263L, 2348L);
      Long.compareUnsigned((-47L), 1235L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2128L), 263L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.719809854865039
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.of(4294967325L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("nKK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.nKK
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
