/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 18:34:56 GMT 2019
 */

package org.jsecurity.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import javax.servlet.ServletOutputStream;
import javax.servlet.ServletRequest;
import javax.servlet.ServletRequestWrapper;
import javax.servlet.ServletResponse;
import javax.servlet.ServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsecurity.authc.UsernamePasswordToken;
import org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.permission.AllPermission;
import org.jsecurity.authz.permission.WildcardPermission;
import org.jsecurity.authz.permission.WildcardPermissionResolver;
import org.jsecurity.cache.Cache;
import org.jsecurity.cache.CacheManager;
import org.jsecurity.cache.HashtableCache;
import org.jsecurity.realm.Realm;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.session.Session;
import org.jsecurity.session.SessionListener;
import org.jsecurity.session.mgt.eis.MemorySessionDAO;
import org.jsecurity.subject.DelegatingSubject;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.jsecurity.subject.Subject;
import org.jsecurity.web.DefaultWebSecurityManager;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultWebSecurityManager_ESTest extends DefaultWebSecurityManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0263763964392347
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      simplePrincipalCollection1.asList();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.listIterator();
      simplePrincipalCollection1.clear();
      simplePrincipalCollection0.clear();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, "-Rp=mG.vMa3,", true);
      Boolean.valueOf("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false (/192.168.1.42)");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionIdCookieSecure(false);
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.018703762168135
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AllPermission allPermission0 = new AllPermission();
      AllPermission allPermission1 = new AllPermission();
      WildcardPermissionResolver wildcardPermissionResolver3 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver4 = new WildcardPermissionResolver();
      wildcardPermissionResolver4.resolvePermission("I~AzScf1T3");
      AllPermission allPermission2 = new AllPermission();
      WildcardPermissionResolver wildcardPermissionResolver5 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver6 = new WildcardPermissionResolver();
      wildcardPermissionResolver1.resolvePermission("jsecurity");
      System.setCurrentTimeMillis((-450L));
      defaultWebSecurityManager0.setSessionIdCookieMaxAge((-876));
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6922566109222665
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockInetAddress.getLocalHost();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getContentType();
      doReturn((Locale) null).when(servletResponse0).getLocale();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper1.getContentType();
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper1.setCharacterEncoding("<");
      servletResponseWrapper0.getLocale();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper2, (ServletResponse) servletResponseWrapper3);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper5);
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper8 = new ServletRequestWrapper(servletRequestWrapper0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Subject subject0 = defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, true, (Session) null, (ServletRequest) servletRequestWrapper7, (ServletResponse) servletResponseWrapper3);
      defaultWebSecurityManager0.getSessionMode();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(subject0, servletRequestWrapper4, servletResponseWrapper5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5435510227816462
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockInetAddress.getLocalHost();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getContentType();
      doReturn((Locale) null).when(servletResponse0).getLocale();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper1.getContentType();
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper1.setCharacterEncoding("<");
      servletResponseWrapper0.getLocale();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      Subject subject0 = defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper2, (ServletResponse) servletResponseWrapper3);
      defaultWebSecurityManager0.bind(subject0, servletRequestWrapper0, servletResponseWrapper2);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper0);
      defaultWebSecurityManager0.bind(subject0, servletRequestWrapper3, servletResponseWrapper1);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(servletResponseWrapper5, "2({mO 9Y#3m)");
      Subject subject1 = defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, true, (Session) null, (ServletRequest) servletRequestWrapper2, (ServletResponse) servletResponseWrapper0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(subject1, servletRequestWrapper2, servletResponseWrapper6);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean.valueOf(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)127;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      simpleAccountRealm0.setCacheManager((CacheManager) null);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookiePath("jsWc8rity");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.278788278259563
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionIdCookieName("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      defaultWebSecurityManager1.isHttpSessionMode();
      defaultWebSecurityManager0.setSessionIdCookieName("http");
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      wildcardPermissionResolver0.resolvePermission("m`k3cB");
      WildcardPermission wildcardPermission0 = new WildcardPermission("http", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      wildcardPermissionResolver1.resolvePermission("nVmXmIyG*o");
      AllPermission allPermission0 = new AllPermission();
      WildcardPermissionResolver wildcardPermissionResolver3 = new WildcardPermissionResolver();
      MockInetAddress.getByName("org.jsecurity.authc.credential.Sha1CredentialsMatcher");
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager1);
      delegatingSubject0.logout();
      delegatingSubject0.isPermitted((List<Permission>) linkedList0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.bind(delegatingSubject0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3914915663863985
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionIdCookieName("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      defaultWebSecurityManager1.isHttpSessionMode();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      wildcardPermissionResolver0.resolvePermission("fohIy");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      wildcardPermissionResolver0.resolvePermission("m`k3cB");
      WildcardPermission wildcardPermission0 = new WildcardPermission("http", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AllPermission allPermission0 = new AllPermission();
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      MockInetAddress.getByName("org.jsecurity.authc.credential.Sha1CredentialsMatcher");
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      linkedList0.add((Permission) allPermission0);
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager1);
      delegatingSubject0.logout();
      delegatingSubject0.isPermitted((List<Permission>) linkedList0);
      defaultWebSecurityManager0.setSessionIdCookiePath("org.jsecurity.util.ThreadContext$1");
      DefaultWebSecurityManager defaultWebSecurityManager2 = new DefaultWebSecurityManager();
      LinkedList<Realm> linkedList1 = new LinkedList<Realm>();
      defaultWebSecurityManager1.getSessionMode();
      defaultWebSecurityManager2.newSessionManagerInstance();
      assertTrue(defaultWebSecurityManager2.isHttpSessionMode());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2806315962319132
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      String string0 = "jsecurity";
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionIdCookieName("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      defaultWebSecurityManager1.isHttpSessionMode();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      defaultWebSecurityManager1.setRememberMeCipherKeyBase64("jsecurity");
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      String string1 = "m`k3cB";
      defaultWebSecurityManager1.newSessionManagerInstance();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      wildcardPermissionResolver0.resolvePermission("m`k3cB");
      String string2 = "\"3|\"tK|y=:lMQ";
      wildcardPermissionResolver1.resolvePermission("\"3|\"tK|y=:lMQ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wildcardPermissionResolver1.resolvePermission("nVmXmIyG*o");
      defaultWebSecurityManager0.newSessionManagerInstance();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.createSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6469712236612866
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      simpleAccountRealm1.setCacheManager((CacheManager) null);
      AllPermission allPermission0 = new AllPermission();
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      wildcardPermissionResolver0.resolvePermission("7bU{wRUZ[e[T[+QUK");
      AllPermission allPermission1 = new AllPermission();
      WildcardPermissionResolver wildcardPermissionResolver3 = new WildcardPermissionResolver();
      String string0 = "ttD";
      // Undeclared exception!
      try { 
        wildcardPermissionResolver2.resolvePermission((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wildcard string cannot be null or empty. Make sure permission strings are properly formatted.
         //
         verifyException("org.jsecurity.authz.permission.WildcardPermission", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6120172700343436
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320/org.jsecurity.realm.text.PropertiesRealm-0-accounts.data");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(".NOjp|N", ".NOjp|N", inetAddress0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getContentType();
      doReturn((Locale) null).when(servletResponse0).getLocale();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper1.getContentType();
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper1.setCharacterEncoding("<");
      servletResponseWrapper1.setResponse(servletResponseWrapper0);
      servletResponseWrapper0.getLocale();
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleKeys();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-109);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) null, (ServletResponse) servletResponseWrapper5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6120172700343436
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320/org.jsecurity.realm.text.PropertiesRealm-0-accounts.data");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(".NOjp|N", ".NOjp|N", inetAddress0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getContentType();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper1.getContentType();
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper1.setCharacterEncoding((String) null);
      servletResponseWrapper1.setResponse(servletResponseWrapper0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Session session0 = null;
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      servletRequestWrapper0.setRequest(servletRequestWrapper3);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper2, (ServletResponse) servletResponseWrapper3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2261289670319746
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultWebSecurityManager0.getSessionMode();
      Integer.getInteger("Method argumet (authentication token) cannot be null.");
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      wildcardPermissionResolver0.resolvePermission("!j]1qASM@l 'Y|<b");
      wildcardPermissionResolver0.resolvePermission("!j]1qASM@l 'Y|<b");
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      wildcardPermissionResolver0.resolvePermission("3v@QF5x,Mj");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AllPermission allPermission0 = new AllPermission();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm0);
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver3 = new WildcardPermissionResolver();
      wildcardPermissionResolver3.resolvePermission("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      wildcardPermissionResolver3.resolvePermission("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      wildcardPermissionResolver3.resolvePermission("IOException reading index. Creating new index. ");
      AllPermission allPermission1 = new AllPermission();
      Object object0 = new Object();
      DefaultWebSecurityManager defaultWebSecurityManager2 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(servletRequest0).getServerPort();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      servletRequestWrapper0.getServerPort();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager2.bind((Subject) null, servletRequestWrapper0, servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2797657953661123
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionIdCookieName("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      defaultWebSecurityManager1.isHttpSessionMode();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      WildcardPermission wildcardPermission0 = new WildcardPermission("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      wildcardPermissionResolver1.resolvePermission("org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY");
      FileSystemHandling.shouldAllThrowIOExceptions();
      WildcardPermissionResolver wildcardPermissionResolver3 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver4 = new WildcardPermissionResolver();
      wildcardPermissionResolver3.resolvePermission(":h}k7GS-");
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      wildcardPermissionResolver4.resolvePermission("org.jsecurity.authz.permission.AllPermission");
      WildcardPermissionResolver wildcardPermissionResolver5 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver6 = new WildcardPermissionResolver();
      wildcardPermissionResolver4.resolvePermission("http");
      FileSystemHandling.shouldAllThrowIOExceptions();
      WildcardPermissionResolver wildcardPermissionResolver7 = new WildcardPermissionResolver();
      DefaultWebSecurityManager defaultWebSecurityManager2 = new DefaultWebSecurityManager();
      assertEquals("http", defaultWebSecurityManager2.getSessionMode());
      
      defaultWebSecurityManager0.getSessionMode();
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setRememberMeCookiePath("which the split location could be determined.");
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookiePath("which the split location could be determined.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320/org.jsecurity.realm.text.PropertiesRealm-0-accounts.data");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper1);
      String string0 = DefaultWebSecurityManager.AUTHENTICATED_SESSION_KEY;
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      boolean boolean0 = defaultWebSecurityManager0.isAuthenticated((Session) null, servletRequestWrapper2, servletResponseWrapper3);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("http");
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      simplePrincipalCollection1.clear();
      List list0 = simplePrincipalCollection0.asList();
      simplePrincipalCollection0.asList();
      simplePrincipalCollection1.clear();
      simplePrincipalCollection0.asList();
      Class<String> class0 = String.class;
      simplePrincipalCollection1.byType(class0);
      simplePrincipalCollection1.iterator();
      SimplePrincipalCollection simplePrincipalCollection2 = null;
      try {
        simplePrincipalCollection2 = new SimplePrincipalCollection((Collection) list0, "7Q;R,}Z[iQkB7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // principals argument cannot be an empty collection.
         //
         verifyException("org.jsecurity.subject.SimplePrincipalCollection", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9487205928347628
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      Integer integer0 = new Integer(1260);
      defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("jsWcurity");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [jsWcurity].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      Integer integer0 = new Integer(76);
      Integer integer1 = new Integer((-4443));
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("x51ZYv", "L2CB.lXdxCF9j2gu*Y&", inetAddress0);
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      wildcardPermissionResolver0.resolvePermission("n2`Izg^)@t");
      wildcardPermissionResolver0.resolvePermission("PTCw>0mAxr");
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      wildcardPermissionResolver0.resolvePermission("]d},K@d2{x+T5kFA:");
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver3 = new WildcardPermissionResolver();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WildcardPermissionResolver wildcardPermissionResolver4 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver5 = new WildcardPermissionResolver();
      wildcardPermissionResolver1.resolvePermission("]d},K@d2{x+T5kFA:");
      wildcardPermissionResolver0.resolvePermission("n2`Izg^)@t");
      AllPermission allPermission0 = new AllPermission();
      WildcardPermissionResolver wildcardPermissionResolver6 = new WildcardPermissionResolver();
      AllPermission allPermission1 = new AllPermission();
      WildcardPermissionResolver wildcardPermissionResolver7 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver8 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver9 = new WildcardPermissionResolver();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      defaultWebSecurityManager0.getPrincipals((Session) null, servletRequestWrapper0, servletResponseWrapper0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getContentType();
      doReturn((Locale) null).when(servletResponse0).getLocale();
      doReturn((ServletOutputStream) null, (ServletOutputStream) null, (ServletOutputStream) null).when(servletResponse0).getOutputStream();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper0.getOutputStream();
      servletResponseWrapper1.getContentType();
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper0.getOutputStream();
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper5.getResponse();
      servletResponseWrapper5.setCharacterEncoding("_SUBJECT_KEY");
      servletResponseWrapper1.setCharacterEncoding("Ef/E!<s(6a|XQ&Ny&.");
      servletResponseWrapper1.setResponse(servletResponseWrapper5);
      servletResponseWrapper2.getLocale();
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      locale1.getUnicodeLocaleKeys();
      servletResponseWrapper3.setContentLength((-1));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper6);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper4);
      servletResponseWrapper7.getOutputStream();
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper8);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject(servletRequest0, (ServletResponse) servletResponseWrapper7);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.javax.servlet.ServletRequest$MockitoMock$1703279478 cannot be cast to javax.servlet.http.HttpServletRequest
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean.valueOf(true);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Ojp|N", "L2CB.lXdxCF9j2gu*Y&", inetAddress0);
      char[] charArray0 = new char[1];
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      charArray0[0] = '@';
      usernamePasswordToken0.setRememberMe(true);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("Ojp|N", "Ojp|N", true, inetAddress0);
      usernamePasswordToken2.clear();
      usernamePasswordToken2.toString();
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", "org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false");
      UsernamePasswordToken usernamePasswordToken4 = new UsernamePasswordToken("L2CB.lXdxCF9j2gu*Y&", "Ojp|N", true);
      usernamePasswordToken4.setRememberMe(true);
      UsernamePasswordToken usernamePasswordToken5 = new UsernamePasswordToken();
      usernamePasswordToken2.setPassword(charArray0);
      usernamePasswordToken5.setPassword(charArray0);
      usernamePasswordToken4.setPassword(charArray0);
      usernamePasswordToken5.setRememberMe(true);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken4.setUsername("L2CB.lXdxCF9j2gu*Y&");
      usernamePasswordToken5.clear();
      usernamePasswordToken5.setUsername("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false");
      usernamePasswordToken2.toString();
      usernamePasswordToken0.setUsername("Ojp|N");
      usernamePasswordToken0.setUsername("Ojp|N");
      usernamePasswordToken2.setRememberMe(true);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) null, (ServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5435510227816462
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockInetAddress.getLocalHost();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getContentType();
      doReturn((Locale) null).when(servletResponse0).getLocale();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper1.getContentType();
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper1.setCharacterEncoding("<");
      servletResponseWrapper0.getLocale();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Session session0 = null;
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      Subject subject0 = defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper2, (ServletResponse) servletResponseWrapper3);
      defaultWebSecurityManager0.bind(subject0, servletRequestWrapper0, servletResponseWrapper2);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper0);
      defaultWebSecurityManager0.bind(subject0, servletRequestWrapper3, servletResponseWrapper1);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(servletResponseWrapper5, "2({mO 9Y#3m)");
      Subject subject1 = defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, false, (Session) null, (ServletRequest) servletRequestWrapper2, (ServletResponse) servletResponseWrapper0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(subject1, servletRequestWrapper2, servletResponseWrapper6);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7063260587210523
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.isHttpSessionMode();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      simplePrincipalCollection0.iterator();
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      simplePrincipalCollection2.addAll((PrincipalCollection) simplePrincipalCollection1);
      simplePrincipalCollection0.clear();
      List list0 = simplePrincipalCollection2.asList();
      simplePrincipalCollection0.asList();
      simplePrincipalCollection1.clear();
      Class<String> class0 = String.class;
      simplePrincipalCollection2.byType(class0);
      SimplePrincipalCollection simplePrincipalCollection3 = null;
      try {
        simplePrincipalCollection3 = new SimplePrincipalCollection((Collection) list0, "f8=Ss_&n@H#xBg,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // principals argument cannot be an empty collection.
         //
         verifyException("org.jsecurity.subject.SimplePrincipalCollection", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean.valueOf(true);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Ojp|N", "~Qz+P%x\"B&0vHf", inetAddress0);
      char[] charArray0 = new char[1];
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      charArray0[0] = '@';
      usernamePasswordToken0.setRememberMe(true);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("Ojp|N", "Ojp|N", true, inetAddress0);
      usernamePasswordToken2.clear();
      usernamePasswordToken2.toString();
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", "org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false");
      UsernamePasswordToken usernamePasswordToken4 = new UsernamePasswordToken("~Qz+P%x\"B&0vHf", "Ojp|N", true);
      usernamePasswordToken4.setRememberMe(true);
      UsernamePasswordToken usernamePasswordToken5 = new UsernamePasswordToken();
      usernamePasswordToken2.setPassword(charArray0);
      usernamePasswordToken5.setPassword(charArray0);
      usernamePasswordToken4.setPassword(charArray0);
      usernamePasswordToken5.setRememberMe(true);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken4.setUsername("~Qz+P%x\"B&0vHf");
      usernamePasswordToken5.clear();
      usernamePasswordToken5.setUsername("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false");
      usernamePasswordToken0.setUsername("Ojp|N");
      usernamePasswordToken0.setUsername("Ojp|N");
      usernamePasswordToken2.setRememberMe(true);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.getPrincipals((Session) null);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7914765784434397
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("gqt`mP6Y*R3):nt^K");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.newSessionManagerInstance();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      defaultWebSecurityManager0.setModularAuthenticationStrategy(allSuccessfulModularAuthenticationStrategy0);
      boolean boolean0 = defaultWebSecurityManager0.isAuthenticated((Session) null);
      assertFalse(boolean0);
      
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      defaultWebSecurityManager0.newSessionManagerInstance();
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.721225750316654
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean.valueOf(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      servletResponseWrapper0.setBufferSize((byte) (-126));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = new Locale("Invalid sessi:onod [");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      locale0.getDisplayCountry((Locale) null);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper1.setLocale((Locale) null);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper6);
      ServletRequestWrapper servletRequestWrapper8 = new ServletRequestWrapper(servletRequestWrapper7);
      ServletRequestWrapper servletRequestWrapper9 = new ServletRequestWrapper(servletRequestWrapper6);
      ServletRequestWrapper servletRequestWrapper10 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletRequestWrapper servletRequestWrapper11 = new ServletRequestWrapper(servletRequestWrapper9);
      defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper6, (ServletResponse) servletResponseWrapper1);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      String string0 = "L2CB.lXdxCF9j2gu*Y&";
      MemorySessionDAO memorySessionDAO0 = new MemorySessionDAO();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      HashtableCache hashtableCache0 = new HashtableCache("~Q4ZSxv4,}`6");
      memorySessionDAO0.setActiveSessionsCache(hashtableCache0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieName("jsecurity-activeSessionCache");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = Boolean.TRUE;
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("vjp|N", "vjp|N", inetAddress0);
      char[] charArray0 = new char[1];
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setRememberMe(true);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("vjp|N", charArray0, inetAddress0);
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("vjp|N", "vjp|N", true, inetAddress0);
      usernamePasswordToken2.toString();
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken("org.jsecurity.authc.UsernamePasswordToken - vjp|N, rememberMe=true (/192.168.1.42)", "org.jsecurity.authc.UsernamePasswordToken - vjp|N, rememberMe=true (/192.168.1.42)");
      UsernamePasswordToken usernamePasswordToken4 = new UsernamePasswordToken("vjp|N", "vjp|N", true);
      usernamePasswordToken4.setRememberMe(true);
      UsernamePasswordToken usernamePasswordToken5 = new UsernamePasswordToken();
      usernamePasswordToken5.setUsername("org.jsecurity.authc.UsernamePasswordToken - vjp|N, rememberMe=true (/192.168.1.42)");
      InetAddress inetAddress1 = MockInetAddress.getByName("vjp|N");
      usernamePasswordToken5.setInetAddress(inetAddress1);
      usernamePasswordToken2.setUsername("}a/O-=fz1xV^m6awb");
      usernamePasswordToken4.setPassword(charArray0);
      usernamePasswordToken4.setUsername("vjp|N");
      usernamePasswordToken5.clear();
      usernamePasswordToken4.setPassword(charArray0);
      usernamePasswordToken2.clear();
      usernamePasswordToken4.setUsername("vjp|N");
      usernamePasswordToken4.setUsername("org.jsecurity.authc.UsernamePasswordToken - vjp|N, rememberMe=true (/192.168.1.42)");
      InetAddress inetAddress2 = MockInetAddress.getByName("vjp|N");
      usernamePasswordToken0.setPassword(charArray0);
      UsernamePasswordToken usernamePasswordToken6 = new UsernamePasswordToken("D)Wmd|MG^YIG6N,BK", "] does not support authentication token [");
      usernamePasswordToken6.toString();
      usernamePasswordToken6.setInetAddress(inetAddress2);
      UsernamePasswordToken usernamePasswordToken7 = new UsernamePasswordToken("}a/O-=fz1xV^m6awb", "org.jsecurity.authc.UsernamePasswordToken - D)Wmd|MG^YIG6N,BK, rememberMe=false");
      UsernamePasswordToken usernamePasswordToken8 = new UsernamePasswordToken("vjp|N", "D)Wmd|MG^YIG6N,BK", true);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieMaxAge((-1958202527));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("x51ZYv", ".", inetAddress0);
      usernamePasswordToken0.toString();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      wildcardPermissionResolver0.resolvePermission(", which is enabled by default when the ");
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      wildcardPermissionResolver2.resolvePermission("x51ZYv");
      WildcardPermissionResolver wildcardPermissionResolver3 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver4 = new WildcardPermissionResolver();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WildcardPermissionResolver wildcardPermissionResolver5 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver6 = new WildcardPermissionResolver();
      wildcardPermissionResolver2.resolvePermission("1");
      wildcardPermissionResolver3.resolvePermission(" class: '");
      AllPermission allPermission0 = new AllPermission();
      WildcardPermissionResolver wildcardPermissionResolver7 = new WildcardPermissionResolver();
      AllPermission allPermission1 = new AllPermission();
      WildcardPermissionResolver wildcardPermissionResolver8 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver9 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver10 = new WildcardPermissionResolver();
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager((Realm) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realm argument cannot be null
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = new Boolean(false);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("ErrTr Zeading properties path [", "ErrTr Zeading properties path [", true);
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[0] = 'a';
      usernamePasswordToken0.setPassword(charArray0);
      char[] charArray1 = new char[9];
      usernamePasswordToken0.setRememberMe(true);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      usernamePasswordToken1.clear();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("&@+E`[", (String) null, true, inetAddress0);
      usernamePasswordToken1.clear();
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken();
      usernamePasswordToken3.toString();
      UsernamePasswordToken usernamePasswordToken4 = new UsernamePasswordToken("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", "&@+E`[", true);
      usernamePasswordToken4.setPassword(charArray1);
      UsernamePasswordToken usernamePasswordToken5 = new UsernamePasswordToken("':+_Mo+OT", charArray1, inetAddress0);
      usernamePasswordToken5.setRememberMe(false);
      UsernamePasswordToken usernamePasswordToken6 = new UsernamePasswordToken();
      usernamePasswordToken5.setRememberMe(false);
      usernamePasswordToken4.setUsername("?.|N");
      usernamePasswordToken3.setRememberMe(false);
      UsernamePasswordToken usernamePasswordToken7 = new UsernamePasswordToken("ErrTr Zeading properties path [", "#C}]Hub", true);
      Boolean boolean1 = Boolean.FALSE;
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieSecure(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      LinkedHashSet<SessionListener> linkedHashSet0 = new LinkedHashSet<SessionListener>();
      SessionListener sessionListener0 = mock(SessionListener.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(sessionListener0);
      defaultWebSecurityManager0.setSessionListeners(linkedHashSet0);
      simpleAccountRealm0.setAuthorizationCache((Cache) null);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("[_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [[_].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockInetAddress.getLocalHost();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      Collection<Realm> collection0 = defaultWebSecurityManager0.getRealms();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(collection0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.setSessionMode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [null].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager(linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realms collection argument cannot be empty.
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }
}
