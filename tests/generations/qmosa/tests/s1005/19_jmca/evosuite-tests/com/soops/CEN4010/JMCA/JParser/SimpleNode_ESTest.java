/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 19:00:54 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8249506629220404
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "&";
      SimpleNode simpleNode0 = new SimpleNode(18);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = "iteral";
      simpleNode0.setIdentifier("&");
      simpleNode0.setIdentifier("&");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{zcp*-;0d!Z^_f");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.dump("!sXAy,6&]&u", stringWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("iteral", "ImplementsList");
      try { 
        MockFile.createTempFile("&", "InstanceOfExpression", (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8102583142923485
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier("M\"");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream1);
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      pipedOutputStream0.close();
      simpleNode0.dump("v8?tM^/I#8j[0:", stringWriter0);
      simpleNode0.setIdentifier("}");
      simpleNode0.dump("M\"", stringWriter0);
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      PipedInputStream pipedInputStream2 = null;
      try {
        pipedInputStream2 = new PipedInputStream(pipedOutputStream0, (-1086873190));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3176278738019647
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(84);
      simpleNode0.setIdentifier("@");
      SimpleNode simpleNode1 = new SimpleNode(84);
      simpleNode0.parent = (Node) simpleNode1;
      simpleNode1.jjtAddChild(simpleNode0.parent, 84);
      StringWriter stringWriter1 = stringWriter0.append('Y');
      simpleNode0.dump("b5f-Wob$L", stringWriter1);
      simpleNode0.setIdentifier("@");
      String string0 = "4";
      String string1 = "*lshft";
      simpleNode0.jjtGetParent();
      String string2 = "Y#'@d&'|hGgW,a$f";
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3816002975101453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = '1';
      stringWriter0.write(charArray0);
      SimpleNode simpleNode0 = new SimpleNode(14);
      stringWriter0.write(1721);
      simpleNode0.setIdentifier("{");
      StringWriter stringWriter1 = new StringWriter(14);
      stringWriter1.flush();
      StringWriter stringWriter2 = new StringWriter();
      stringWriter1.append('r');
      stringWriter1.flush();
      simpleNode0.toString();
      stringWriter1.write(1721);
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = new StringWriter();
      StringWriter stringWriter6 = new StringWriter();
      StringWriter stringWriter7 = stringWriter1.append((CharSequence) null);
      stringWriter7.write(14);
      stringWriter7.flush();
      stringWriter7.append((CharSequence) "ClassOrInterfaceBody : {");
      simpleNode0.dump("{", stringWriter0);
      assertEquals("R1\u06B9<ClassOrInterfaceBody>\n</ClassOrInterfaceBody>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.2407560846182575
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(84);
      StringWriter stringWriter1 = stringWriter0.append('Y');
      simpleNode0.dump("5\"!Y", stringWriter0);
      simpleNode0.dump("5\"!Y", stringWriter1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.identifiers = null;
      // Undeclared exception!
      try { 
        simpleNode0.setIdentifier("@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0766134380298475
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(7);
      StringWriter stringWriter0 = new StringWriter(7);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.flush();
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      stringWriter0.write(charArray0);
      stringWriter0.close();
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter2 = stringWriter1.append('H');
      stringWriter1.write(7);
      simpleNode0.setIdentifier("<<");
      simpleNode0.setIdentifier("=");
      simpleNode0.dump(">=", stringWriter1);
      simpleNode0.toString();
      simpleNode0.dump("=6q@GUnXGoQmj0TB:o", stringWriter0);
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = new StringWriter();
      StringWriter stringWriter6 = new StringWriter();
      StringWriter stringWriter7 = stringWriter4.append((CharSequence) "=");
      stringWriter7.write(7);
      stringWriter7.flush();
      stringWriter2.append((CharSequence) ">=");
      simpleNode0.dump("&\"e*`*Z|7", stringWriter5);
      assertEquals("<ImplementsList>\n  <identifier>*ge</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>=</identifier>\n</ImplementsList>\n", stringWriter5.toString());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.8221949319455968
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 44;
      SimpleNode simpleNode0 = new SimpleNode(44);
      StringWriter stringWriter0 = new StringWriter(44);
      simpleNode0.setIdentifier("=");
      StringWriter stringWriter1 = new StringWriter(44);
      simpleNode0.setIdentifier("#P");
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.write(44);
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter3 = new StringWriter();
      simpleNode0.dump("0fD3>MQI%~t5\"P", stringWriter3);
      int int1 = 1950;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1950);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.8350516730230504
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 44;
      SimpleNode simpleNode0 = new SimpleNode(44);
      StringWriter stringWriter0 = new StringWriter(44);
      simpleNode0.setIdentifier("=");
      StringWriter stringWriter1 = new StringWriter(44);
      simpleNode0.setIdentifier("#P");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.identifiers = arrayList0;
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.write(44);
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter3 = new StringWriter();
      simpleNode0.dump("0fD3>MQI%~t5\"P", stringWriter3);
      int int1 = 1950;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1950);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 7;
      SimpleNode simpleNode0 = new SimpleNode(7);
      StringWriter stringWriter0 = new StringWriter(7);
      StringWriter stringWriter1 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[2] = 'H';
      stringWriter0.write(charArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      simpleNode0.setIdentifier("<");
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParserTreeConstants");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      simpleNode0.dump("<<", stringWriter0);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream2.connect(pipedOutputStream2);
      PipedInputStream pipedInputStream3 = new PipedInputStream(7);
      PipedInputStream pipedInputStream4 = null;
      try {
        pipedInputStream4 = new PipedInputStream(pipedOutputStream2);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0834763040946214
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(63);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("b5f-Wob$L", stringWriter1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.setIdentifier("@");
      simpleNode0.dump("4", stringWriter0);
      String string0 = "*lshft";
      MockFile mockFile0 = new MockFile("4", "*lshft");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("4", "Y#'@d&'|hGgW,a$f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Y#'@d&'|hGgW,a$f\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.8001573041913385
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier("M\"");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream1);
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      pipedOutputStream2.close();
      simpleNode0.setIdentifier(";");
      simpleNode0.dump(";", stringWriter0);
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      pipedOutputStream4.flush();
      try { 
        pipedInputStream0.connect(pipedOutputStream2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.8120939218445867
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 56;
      SimpleNode simpleNode0 = new SimpleNode(56);
      StringWriter stringWriter0 = new StringWriter(56);
      simpleNode0.setIdentifier(">>");
      String string0 = "=";
      simpleNode0.setIdentifier("=");
      StringWriter stringWriter1 = new StringWriter(56);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = "Modifiers";
      simpleNode0.dump("=", stringWriter0);
      MockFile mockFile0 = new MockFile("*lshft", "Y#'@d&'|hGgW,a$f");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("Modifiers", "Modifiers");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Modifiers\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.331395041505375
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(56);
      simpleNode0.setIdentifier("T");
      simpleNode0.toString("T");
      simpleNode0.setIdentifier("35(R0F,&k5JTYejS5");
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.flush();
      stringWriter0.write(3);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.flush();
      simpleNode0.dump("throsws", stringWriter0);
      simpleNode0.toString();
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump("throsws", stringWriter2);
      stringWriter2.flush();
      simpleNode0.toString();
      simpleNode0.toString();
      simpleNode0.dump("TCastLookahead : T", stringWriter0);
      simpleNode0.jjtAddChild(simpleNode0, 56);
      // Undeclared exception!
      simpleNode0.dump("CastLookahead : T : 35(R0F,&k5JTYejS5", stringWriter1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0682924484507355
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(18);
      StringWriter stringWriter2 = new StringWriter();
      stringWriter0.flush();
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = 'X';
      charArray0[2] = 'n';
      charArray0[3] = '&';
      charArray0[4] = '&';
      charArray0[5] = 'e';
      charArray0[5] = '=';
      CharBuffer charBuffer0 = CharBuffer.allocate('&');
      stringWriter1.close();
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      stringWriter4.close();
      char[] charArray1 = new char[1];
      stringWriter4.write(charArray1);
      stringWriter1.close();
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter5 = new StringWriter('&');
      StringWriter stringWriter6 = stringWriter5.append('H');
      simpleNode0.toString();
      stringWriter6.append('n');
      StringWriter stringWriter7 = stringWriter2.append('H');
      stringWriter7.append((CharSequence) charBuffer0);
      simpleNode0.dump("&", stringWriter7);
      assertEquals("H\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<VariableDeclaratorId>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n", stringWriter7.toString());
      assertEquals("H\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<VariableDeclaratorId>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.7991437026482773
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 7;
      SimpleNode simpleNode0 = new SimpleNode(7);
      StringWriter stringWriter0 = new StringWriter(7);
      StringWriter stringWriter1 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[2] = 'H';
      stringWriter0.write(charArray0);
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter2 = stringWriter1.append('H');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      simpleNode0.setIdentifier("&&");
      simpleNode0.setIdentifier("<");
      simpleNode0.dump("LFMb~g_Lr=!ioSKVvw", stringWriter2);
      JavaParser javaParser0 = new JavaParser("`)'=(D+-w@[xXd]");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream2 = null;
      try {
        pipedInputStream2 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8249506629220404
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "&";
      SimpleNode simpleNode0 = new SimpleNode(18);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = "iteral";
      simpleNode0.setIdentifier("&");
      simpleNode0.setIdentifier("&");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{zcp*-;0d!Z^_f");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{zcp*-;0d!Z^_f");
      simpleNode0.dump("!sXAy,6&]&u", stringWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("iteral", "ImplementsList");
      mockFile0.getAbsolutePath();
      try { 
        MockFile.createTempFile("&", "InstanceOfExpression", (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4942694006787995
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(100);
      StringWriter stringWriter0 = new StringWriter(100);
      stringWriter0.write(3);
      simpleNode0.toString();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.toString();
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtAddChild((Node) null, 1);
      simpleNode0.dump("{;Lr|_HxO&Hz6", stringWriter0);
      simpleNode0.toString();
      StringWriter stringWriter1 = new StringWriter();
      SimpleNode simpleNode1 = new SimpleNode((-1087359027));
      simpleNode1.dump("J^-nF*gzG", stringWriter0);
      SimpleNode simpleNode2 = new SimpleNode(100);
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = ')';
      charArray0[2] = '0';
      charArray0[3] = 'a';
      charArray0[4] = ')';
      stringWriter1.write(charArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4491080171221666
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter(0);
      JavaParser javaParser0 = new JavaParser("\"null\"");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      SimpleNode simpleNode0 = new SimpleNode(100);
      SimpleNode simpleNode1 = new SimpleNode(37);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      simpleNode0.setIdentifier((String) null);
      simpleNode1.dump("h\"o<_4+1y,", stringWriter0);
      simpleNode0.toString();
      simpleNode0.jjtGetChild(0);
      SimpleNode simpleNode2 = new SimpleNode(javaParser0, 0);
      simpleNode2.toString("&&");
      simpleNode1.toString("k/^C");
      simpleNode2.jjtGetNumChildren();
      simpleNode1.jjtAddChild(simpleNode2, 2422);
      assertEquals(2423, simpleNode1.jjtGetNumChildren());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0974033676362451
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 14;
      SimpleNode simpleNode0 = new SimpleNode(14);
      simpleNode0.setIdentifier("<=");
      simpleNode0.toString();
      simpleNode0.dump("g]hFu0x", stringWriter0);
      simpleNode0.toString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9946571675310574
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 81;
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(18);
      String string0 = "|y7n_Alrz~<p";
      simpleNode0.setIdentifier("");
      simpleNode0.dump("|y7n_Alrz~<p", stringWriter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream1);
      PipedOutputStream pipedOutputStream2 = null;
      try {
        pipedOutputStream2 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "ny";
      simpleNode0.setIdentifier("ny");
      simpleNode0.dump((String) null, stringWriter0);
      String string1 = "\"}\"";
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("DoStatement", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5605589062487968
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(100);
      StringWriter stringWriter0 = new StringWriter(100);
      simpleNode0.jjtGetNumChildren();
      SimpleNode simpleNode1 = new SimpleNode(3);
      SimpleNode simpleNode2 = new SimpleNode(39);
      simpleNode2.jjtAddChild(simpleNode0, 100);
      String string0 = "ZEv&o`jNN<kK*V1gV-";
      simpleNode2.dump("ZEv&o`jNN<kK*V1gV-", stringWriter0);
      simpleNode1.toString();
      StringReader stringReader0 = new StringReader("~");
      simpleNode2.toString();
      int int0 = (-1876);
      simpleNode2.jjtGetNumChildren();
      simpleNode1.toString("ZEv&o`jNN<kK*V1gV-");
      int int1 = (-838);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (-838));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.8437772300404254
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      SimpleNode simpleNode0 = new SimpleNode(100);
      simpleNode0.setIdentifier("=");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "<";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = "LYyb4N[(bRpy";
      simpleNode0.setIdentifier("LYyb4N[(bRpy");
      simpleNode0.setIdentifier("<");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.dump(string1, stringWriter0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.087302357535235
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[0] = 'R';
      stringWriter0.write(charArray0);
      SimpleNode simpleNode0 = new SimpleNode(32);
      stringWriter0.write(1721);
      simpleNode0.setIdentifier("~");
      StringWriter stringWriter1 = new StringWriter(32);
      stringWriter1.close();
      stringWriter1.flush();
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = stringWriter2.append(':');
      StringWriter stringWriter4 = stringWriter3.append('R');
      stringWriter3.flush();
      stringWriter2.flush();
      stringWriter4.append((CharSequence) "~");
      StringWriter stringWriter5 = new StringWriter();
      stringWriter3.append((CharSequence) "~");
      stringWriter2.write(0);
      StringWriter stringWriter6 = stringWriter4.append('R');
      stringWriter2.write(1721);
      StringWriter stringWriter7 = new StringWriter(32);
      StringWriter stringWriter8 = new StringWriter();
      StringWriter stringWriter9 = new StringWriter();
      stringWriter8.write((-1199));
      stringWriter2.flush();
      StringWriter stringWriter10 = stringWriter6.append((CharSequence) "~");
      simpleNode0.dump("</", stringWriter10);
      assertEquals(":R~~\u0000R\u06B9~<TypeArgument>\n  <identifier>~</identifier>\n</TypeArgument>\n", stringWriter4.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("TypeArgument : ~", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.2438228280066395
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[0] = 'R';
      stringWriter0.write(charArray0);
      SimpleNode simpleNode0 = new SimpleNode(32);
      stringWriter0.write(1721);
      simpleNode0.setIdentifier("~");
      StringWriter stringWriter1 = new StringWriter(32);
      stringWriter1.close();
      stringWriter1.flush();
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = stringWriter2.append(':');
      StringWriter stringWriter4 = stringWriter3.append('R');
      stringWriter3.flush();
      stringWriter2.flush();
      stringWriter4.append((CharSequence) "~");
      StringWriter stringWriter5 = new StringWriter();
      stringWriter3.append((CharSequence) "~");
      stringWriter2.write(0);
      StringWriter stringWriter6 = stringWriter4.append('R');
      stringWriter2.write(1721);
      StringWriter stringWriter7 = new StringWriter(32);
      StringWriter stringWriter8 = new StringWriter();
      StringWriter stringWriter9 = new StringWriter();
      stringWriter8.write((-1199));
      stringWriter2.flush();
      StringWriter stringWriter10 = stringWriter6.append((CharSequence) "~");
      simpleNode0.dump("Xg0Kz3X+Y'?5", stringWriter10);
      assertEquals(":R~~\u0000R\u06B9~<TypeArgument>\n  <identifier>~</identifier>\n</TypeArgument>\n", stringWriter4.toString());
      
      String string0 = simpleNode0.toString("<<");
      assertEquals("<<TypeArgument : ~", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0298260458782016
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(100);
      simpleNode0.jjtGetNumChildren();
      SimpleNode simpleNode1 = new SimpleNode(3);
      SimpleNode simpleNode2 = new SimpleNode(100);
      simpleNode2.jjtAddChild(simpleNode0, 100);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode2.identifiers = arrayList0;
      simpleNode0.toString();
      simpleNode2.jjtGetChild(3);
      simpleNode2.jjtGetNumChildren();
      SimpleNode simpleNode3 = new SimpleNode(3);
      arrayList0.add("*lt");
      simpleNode2.jjtGetNumChildren();
      simpleNode2.toString();
      assertEquals(101, simpleNode2.jjtGetNumChildren());
      
      int int0 = simpleNode3.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Arguments");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1616690518));
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1286);
      simpleNode0.jjtAddChild((Node) null, 1882);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(18);
      StringWriter stringWriter2 = new StringWriter();
      stringWriter0.flush();
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      SimpleNode simpleNode0 = new SimpleNode(18);
      stringWriter2.write((-203));
      simpleNode0.setIdentifier((String) null);
      StringWriter stringWriter3 = new StringWriter(18);
      stringWriter0.flush();
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = stringWriter3.append('+');
      stringWriter5.flush();
      simpleNode0.toString();
      stringWriter4.write(1721);
      StringWriter stringWriter6 = new StringWriter();
      StringWriter stringWriter7 = new StringWriter();
      StringWriter stringWriter8 = new StringWriter();
      StringWriter stringWriter9 = new StringWriter();
      stringWriter0.append((CharSequence) null);
      StringWriter stringWriter10 = new StringWriter();
      stringWriter10.write(3006);
      stringWriter1.flush();
      stringWriter3.append((CharSequence) "VariableDeclaratorId : null");
      // Undeclared exception!
      try { 
        simpleNode0.dump("$OaZPwBv qcJ8> ce", stringWriter8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9946571675310574
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 81;
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(18);
      String string0 = "|y7n_Alrz~<p";
      simpleNode0.setIdentifier("");
      simpleNode0.dump("|y7n_Alrz~<p", stringWriter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*rshft");
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream1);
      PipedOutputStream pipedOutputStream2 = null;
      try {
        pipedOutputStream2 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.634949116843229
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(100);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(100);
      simpleNode0.jjtGetNumChildren();
      String string0 = "~";
      simpleNode0.dump("~", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode(100);
      int int0 = 39;
      SimpleNode simpleNode2 = new SimpleNode(39);
      simpleNode2.jjtAddChild(simpleNode0, 0);
      // Undeclared exception!
      try { 
        simpleNode2.jjtAddChild(simpleNode1, (-1936093283));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1936093283
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1203));
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("&", stringWriter0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.identifiers = arrayList0;
      arrayList0.add("<=");
      // Undeclared exception!
      try { 
        simpleNode0.dump("TypeArgument", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-2806));
      JavaParser javaParser0 = new JavaParser("REn$MY>#i(D9hZVqbw");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, (-2806));
      simpleNode0.parent = (Node) simpleNode1;
      Node node0 = simpleNode0.jjtGetParent();
      assertSame(node0, simpleNode1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(25);
      SimpleNode simpleNode1 = new SimpleNode(25);
      simpleNode1.jjtSetParent(simpleNode0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.allocate(25);
      assertEquals(25, charBuffer0.remaining());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("#IX)%E!=Pw:dy");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-2093064));
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-2093064));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringWriter0.flush();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleNode simpleNode0 = new SimpleNode((-1));
      simpleNode0.jjtClose();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(863);
      Node node0 = simpleNode0.parent;
      simpleNode0.parent = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "n*7qQ~");
      SystemInUtil.addInputLine("Zi#s27o5'W0m*");
      simpleNode0.jjtOpen();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dr`$Z=,ME/>*|?0)71");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      int int0 = 116;
      // Undeclared exception!
      try { 
        javaParser0.ClassOrInterfaceBodyDeclaration(false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(73);
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2104);
      // Undeclared exception!
      try { 
        pipedInputStream0.connect((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(2605);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      StringWriter stringWriter0 = new StringWriter(2605);
      // Undeclared exception!
      try { 
        simpleNode0.dump("z8gc", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, 65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      javaParserTokenManager0.jjround = (-1758);
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1758));
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1758
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      javaParserTokenManager0.jjround = (-1758);
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1758));
      // Undeclared exception!
      try { 
        simpleNode0.toString("U(6dZ?{1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1758
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      javaParserTokenManager0.MoreLexicalActions();
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1758));
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1758
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      javaParserTokenManager0.MoreLexicalActions();
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode((-1758));
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
  }
}
