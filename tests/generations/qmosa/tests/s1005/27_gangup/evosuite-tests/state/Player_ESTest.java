/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 18:52:39 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.755739480438498
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(1L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$/$)cO00g/R^PLjc$");
      Player player0 = new Player((byte)71, (String) null, "$/$)cO00g/R^PLjc$", (byte) (-101), 27648);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      player0.unpack(byteArray0);
      player0.unpack(byteArray0);
      player0.setJoinOK(player0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile("$/$)cO00g/R^PLjc$", "");
      file0.toURL();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      player0.pack();
      System.setCurrentTimeMillis(27648);
      boolean boolean0 = player0.isJoinOK(player0, true);
      assertFalse(boolean0);
      
      player0.pack();
      assertTrue(player0.isConnected());
      assertEquals(27648, player0.getStrength());
      assertEquals((-101), player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(1626L);
      System.setCurrentTimeMillis(1626L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player(Integer.MAX_VALUE, "BG", Integer.MAX_VALUE);
      Party party0 = player0.gangBoss();
      player0.remove(party0);
      player0.setConnected(true);
      player0.getTimeOfDeath();
      player0.setDead();
      System.setCurrentTimeMillis((short)4919);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(15000L);
      player0.pack();
      player0.getTimeOfDeath();
      player0.getTimeOfDeath();
      System.setCurrentTimeMillis((-1286L));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player((-1247));
      Party party0 = player0.head;
      player0.add((Party) null);
      player0.type();
      player0.setMoney(5);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Player player1 = new Player(5, "", "", 5);
      player1.prev = (Party) player0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      player1.setMoney(0.1F);
      player1.setY((-1247));
      player0.getTimeOfDeath();
      player0.getMoney();
      player1.getY();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Player player1 = new Player((short)4919, (String) null, "Qj]+f;/xu40", (-1452), (short)4919);
      player1.getSubparty();
      player0.setMoney(1478.258F);
      player0.getMoney();
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7294597129246334
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(4L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player((byte)71, (String) null, ":7ov7;u6ih;F~F;ge;", (byte) (-4), 27648);
      byte[] byteArray1 = new byte[1];
      LinkedList<Party> linkedList0 = new LinkedList<Party>();
      byteArray1[0] = (byte) (-4);
      player0.unpack(byteArray1);
      player0.getSubparty();
      player0.unpack(byteArray1);
      Player player1 = new Player((byte) (-55), ":7ov7;u6ih;F~F;ge;", "=v%", 1284);
      player1.setJoinOK(player0, true);
      boolean boolean0 = player1.isJoinOK(player0, true);
      player1.pack();
      System.setCurrentTimeMillis((short)4919);
      player0.getIP();
      boolean boolean1 = player0.isJoinOK(player1, true);
      assertEquals(1, player1.getStrength());
      assertEquals(1284, player1.getPictureId());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(27648, player0.getStrength());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7853437136837007
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-15);
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "module.ModuleBrowserDialog$ModuleFilter");
      Player player0 = new Player(874, ")Mi", (-1376));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      player0.reset(true);
      player0.setDead();
      player0.setDead((-3L));
      player0.pack();
      player0.pack();
      player0.getTimeOfDeath();
      player0.getY();
      PipedInputStream pipedInputStream0 = new PipedInputStream(874);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream5 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream6 = new PipedOutputStream();
      Player player0 = new Player((-6), "0.0.0.0", 1284);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream5 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream6 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream7 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream8 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream9 = new PipedOutputStream();
      Player player0 = new Player(2047, "0.0.0.0", (-1));
      Party party0 = player0.prev;
      player0.add((Party) null);
      byte[] byteArray0 = player0.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8827437576468555
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player((-4352), "=5u", "'j]gl#<}", 1727);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)40;
      player0.unpack(byteArray0);
      Player player1 = new Player();
      player1.getSubparty();
      player0.setZ(3621.5015F);
      Player player2 = new Player();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream1);
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      pipedInputStream1.connect(pipedOutputStream0);
      dataOutputStream0.writeChar(252);
      player0.pack(dataOutputStream0);
      player0.getZ();
      player0.getTimeOfDeath();
      assertEquals(3621.5015F, player0.getZ(), 0.01F);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      player1.unpack(dataInputStream0);
      player1.pack();
      assertEquals(10.0F, player1.getX(), 0.01F);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player((-1981), "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", 31648);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.mark((-1253));
      player0.unpack(dataInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      
      player0.pack();
      int int0 = player0.type();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream5 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream6 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream7 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream8 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream9 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream10 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream11 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream12 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream13 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream14 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream15 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream16 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream17 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream18 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream19 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream20 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream21 = new PipedOutputStream();
      Player player0 = new Player((-189), " ", 1057);
      PipedOutputStream pipedOutputStream22 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4466856169199285
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream5 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream6 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream7 = new PipedOutputStream();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player();
      int int0 = (-3586);
      Player player1 = new Player(2262, ".T|{h!~$%BXQK", ".T|{h!~$%BXQK", 5, (-3586));
      player0.setJoinOK(player1, false);
      player0.isJoinOK(player1, true);
      PipedOutputStream pipedOutputStream8 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream3, 2652);
      PipedInputStream pipedInputStream1 = null;
      PipedOutputStream pipedOutputStream9 = null;
      try {
        pipedOutputStream9 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream5 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream6 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream7 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream8 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream9 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream10 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream11 = new PipedOutputStream();
      Player player0 = new Player(11, "", "eD4n[Mhn_\"b$nR", (-2650), 0);
      // Undeclared exception!
      try { 
        player0.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream5 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream6 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(2262, "", "state.Party", 2262);
      Player player1 = new Player((short)4919, "", (-1));
      player0.setJoinOK(player1, true);
      player0.isJoinOK(player1, true);
      PipedOutputStream pipedOutputStream7 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream6, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player(1895, "", 1895);
      System.setCurrentTimeMillis(30000L);
      System.setCurrentTimeMillis((short)4919);
      player0.getName();
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(1895, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream5 = new PipedOutputStream();
      pipedOutputStream4.flush();
      PipedOutputStream pipedOutputStream6 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream7 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream8 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream9 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream10 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream11 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream12 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream13 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream14 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream15 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream16 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream17 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream18 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream19 = new PipedOutputStream();
      Player player0 = new Player(43);
      Party party0 = player0.prev;
      Player player1 = new Player(43, (String) null, (short)4919);
      player0.setJoinOK(player1, true);
      Player player2 = new Player(4919, (String) null, (String) null, 2);
      boolean boolean0 = player2.isJoinOK(player0, false);
      assertFalse(boolean0);
      assertEquals(0, player0.getPictureId());
      assertEquals("Player43", player0.toString());
      
      player1.toString();
      assertEquals(4919, player1.getPictureId());
      assertEquals("0.0.0.0", player1.getIP());
      
      player2.getName();
      assertTrue(player2.isConnected());
      assertEquals(10.0F, player2.getX(), 0.01F);
      assertEquals(0L, player2.getTimeOfDeath());
      assertEquals(0.0F, player2.getY(), 0.01F);
      assertFalse(player2.isDead());
      assertEquals(1, player2.getStrength());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(1L);
      Player player0 = new Player((byte) (-55), "'l|!(!^^n&CgS1LVg<", "'l|!(!^^n&CgS1LVg<", 2563);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)71;
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Party party0 = new Party(264);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Player player0 = new Player((-948));
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.969755134636486
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WFT");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      Player player0 = new Player(256, "", "", (-1), 0);
      player0.unpack(byteArray0);
      Player player1 = new Player();
      player0.getSubparty();
      player1.setZ((-1));
      Player player2 = new Player();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      pipedInputStream1.connect(pipedOutputStream2);
      dataOutputStream0.writeChar(256);
      player0.pack(dataOutputStream0);
      player1.getZ();
      assertEquals((-1.0F), player1.getZ(), 0.01F);
      
      player0.getTimeOfDeath();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(sequenceInputStream0);
      player2.unpack(dataInputStream1);
      int int0 = player0.getStrength();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream5 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream6 = new PipedOutputStream();
      pipedOutputStream5.flush();
      PipedOutputStream pipedOutputStream7 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream8 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream9 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream10 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream11 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream12 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream13 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream14 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream15 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream16 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream17 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream18 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream19 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream20 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream21 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream22 = new PipedOutputStream();
      Player player0 = new Player((-5817), (String) null, (String) null, 1277, 20234);
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.05725704976923
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player(18247, "", "", (byte)47);
      byte[] byteArray0 = player0.pack();
      Player player1 = new Player(606, "S@r6NnuM-R", "c0#Of5^U:o$}&.OZM6", (-1438), 606);
      player0.unpack(byteArray0);
      player1.getSubparty();
      Player player2 = new Player((-1042));
      player2.unpack(byteArray0);
      Player player3 = new Player((short)4919, "L>exuV1n/", "", (byte)47);
      Player player4 = new Player(12032, "4<cfDPdF", "L>exuV1n/", (short)4919, 606);
      player4.setJoinOK(player2, false);
      player0.isJoinOK(player4, true);
      assertEquals(71, player0.getId());
      
      Player player5 = new Player((short)4919);
      player5.pack();
      float float0 = player1.getX();
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.68644405381145
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player((-1133), "", "", (-1133), 2147340491);
      player0.setJoinOK(player0, true);
      boolean boolean0 = player0.isJoinOK(player0, true);
      assertTrue(boolean0);
      
      player0.pack();
      player0.getIP();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(2147340491, player0.getStrength());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertTrue(player0.isConnected());
      assertEquals((-1133), player0.getPictureId());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player((-15020), "", "", (-1500), (-1500));
      player0.toString();
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals((-1500), player0.getPictureId());
      assertEquals((-1500), player0.getStrength());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player((short)4919, ".*[.]class$", ".*[.]class$", 0);
      player0.head = (Party) player1;
      byte[] byteArray0 = new byte[0];
      player0.setX((-2497.21F));
      player0.unpack(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player0.setY(3445.0F);
      player0.getY();
      System.setCurrentTimeMillis(1208L);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.850863601176158
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player((short)4919, ".*[.]class$", ".*[.]class$", (short)4919);
      player0.head = (Party) player1;
      player0.setConnected(true);
      byte[] byteArray0 = new byte[0];
      player0.gangStrength();
      player0.setDead((long) (short)4919, false);
      player0.setX((-2497.21F));
      player0.unpack(byteArray0);
      player0.setY(3445.0F);
      float float0 = player0.getY();
      assertEquals(3445.0F, float0, 0.01F);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player(807);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      float float0 = player0.getZ();
      assertTrue(player0.isConnected());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("Player807", player0.getName());
      assertFalse(player0.isDead());
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.560923023161317
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player(1, ".*[.]class$", ".*[.]class$", 1, (-4663));
      Player player1 = new Player((-4663), (String) null, (String) null, 0);
      Player player2 = new Player((short)4919, (String) null, (-3135));
      player0.setJoinOK(player2, true);
      assertEquals("0.0.0.0", player2.getIP());
      assertEquals((-3135), player2.getPictureId());
      
      player0.add(player1);
      assertEquals(1, player1.getStrength());
      
      int int0 = player0.getStrength();
      assertEquals((-4663), int0);
      
      int int1 = player0.type();
      assertEquals(5, int1);
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1271454652812127
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player();
      player0.setConnected(false);
      player0.setX(0.0F);
      Player player1 = new Player();
      int int0 = Packable.TEXT_MESSAGE;
      player0.setJoinOK(player1, false);
      int int1 = Packable.GAME_STATE;
      float float0 = Player.MOVE_DISTANCE;
      player0.setConnected(false);
      player1.head = (Party) player0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      player1.setZ((byte)0);
      byteArray0[5] = (byte)0;
      player1.unpack(byteArray0);
      player1.setY((byte)0);
      player0.setDead();
      player0.isJoinOK(player1, true);
      player0.setJoinOK(player1, false);
      boolean boolean0 = player0.isConnected();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream5 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream6 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream7 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream8 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream9 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream10 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream11 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream12 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream13 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream14 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream15 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream16 = new PipedOutputStream();
      Player player0 = new Player(2370, "7Q#g$I_0x\"#upM'N^", 2370);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream15);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.300534891680103
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player((-1949), "9<{rcKBnq6Fz@V", "9<{rcKBnq6Fz@V", (-1949), (-1949));
      player0.gangStrength();
      player0.reset(true);
      player0.getIP();
      player0.getPictureId();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      player0.setX((-983.6245F));
      Player player1 = new Player((byte)0, "9<{rcKBnq6Fz@V", 0);
      player1.setMoney((-1949));
      player0.setJoinOK(player1, true);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      player0.unpack(byteArray0);
      player0.setDead((long) (byte)0);
      float float0 = player0.getX();
      assertTrue(player0.isDead());
      assertEquals((-983.6245F), float0, 0.01F);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.174834213558677
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player((-1), "E7osw.`", "TaGZks/9rT^~U!NK", (short)4919, (-1));
      player0.getSubparty();
      player0.setJoinOK(player1, true);
      player1.setDead((long) (short)4919, true);
      player0.setDead(0L, false);
      player1.setY(0L);
      player1.gangStrength();
      player0.getY();
      player1.isConnected();
      player0.isDead();
      player1.getSubparty();
      player1.getMoney();
      player1.id = (-1);
      player1.getMoney();
      player0.getY();
      player0.boss = null;
      player0.setDead(2074L, false);
      player0.setDead(1656L);
      int int0 = player1.gangStrength();
      assertEquals(4919L, player1.getTimeOfDeath());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      Player player0 = new Player(1, "Sni`}", "", 1, 2147340491);
      float float0 = player0.getY();
      assertEquals(2147340491, player0.getStrength());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getPictureId());
      assertEquals("Sni`}", player0.getIP());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Player player0 = new Player((-14080), "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", (-14080));
      player0.prev = null;
      int int0 = player0.getStrength();
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals((-14080), player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(1, int0);
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4435896416877303
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream5 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream6 = new PipedOutputStream();
      pipedOutputStream4.flush();
      pipedOutputStream2.close();
      PipedOutputStream pipedOutputStream7 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(2262, (String) null, (String) null, 2262);
      player0.setDead((-1189L));
      player0.setJoinOK(player0, true);
      player0.isJoinOK(player0, true);
      PipedOutputStream pipedOutputStream8 = new PipedOutputStream();
      pipedOutputStream8.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream2, 2262);
      try { 
        pipedOutputStream8.connect(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Party party0 = new Party(264);
      Player player0 = new Player((-859), "3YY+ bB0qUlq6", 264);
      byte[] byteArray0 = new byte[0];
      player0.getName();
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(264, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.878666739983584
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player();
      player0.setConnected(false);
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX(0.0F);
      Player player1 = new Player();
      player1.setMoney(0.0F);
      player1.gangStrength();
      player0.setJoinOK(player1, false);
      player0.getPictureId();
      player0.getX();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      player0.type();
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.1218159503049137
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0, (-761));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)84;
      player0.setZ(0);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)117;
      player0.prev = null;
      player0.unpack(byteArray0);
      player0.id = 0;
      player0.setX(416.0F);
      player0.isDead();
      player0.getPictureId();
      player0.setY(0.0F);
      player0.toString();
      player0.pack();
      System.setCurrentTimeMillis((byte) (-59));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player(0, "4", "4", 30);
      int int0 = player0.getPictureId();
      assertEquals(30, int0);
      assertEquals(1, player0.getStrength());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream5 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream6 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream7 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(2262, (String) null, (String) null, 2262);
      player0.setX(2262);
      player0.setJoinOK(player0, true);
      player0.isJoinOK(player0, true);
      PipedOutputStream pipedOutputStream8 = new PipedOutputStream();
      pipedOutputStream8.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream8, 2652);
      try { 
        pipedInputStream0.connect(pipedOutputStream4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player(0, (String) null, (String) null, 0, 0);
      int int0 = player0.gangStrength();
      assertEquals(0, int0);
      
      player0.setY(0);
      player0.reset(false);
      player0.setMoney(0);
      player0.setZ(0);
      assertEquals(0.0F, player0.getZ(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream5 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream6 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream7 = new PipedOutputStream();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player(2262, ".T|{h!~$%BXQK", ".T|{h!~$%BXQK", 2262);
      player0.reset(false);
      player0.setJoinOK(player0, false);
      player0.isJoinOK(player0, false);
      PipedOutputStream pipedOutputStream8 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream8, 2652);
      PipedOutputStream pipedOutputStream9 = null;
      try {
        pipedOutputStream9 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream5 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream6 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream7 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream8 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream9 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream10 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream11 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream12 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream13 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream14 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream15 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream16 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream17 = new PipedOutputStream();
      Player player0 = new Player((-134), ";9&j!EYWjvF^s", (-134));
      player0.setY((-678.5F));
      System.setCurrentTimeMillis(779L);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      System.setCurrentTimeMillis(15000L);
      Player player0 = new Player((-133), "", "`bBZ\"JfD5@/S,", 1132, 0);
      Party party0 = player0.gangBoss();
      player0.remove(party0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-4);
      byteArray0[6] = (byte) (-55);
      player0.unpack(byteArray0);
      assertEquals(0, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1132, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals("", player0.getIP());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream4 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream5 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream6 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream7 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream8 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream9 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream10 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream11 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream12 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream13 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream14 = new PipedOutputStream();
      Player player0 = new Player(10);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      player0.unpack(byteArray0);
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("Player10", player0.getName());
      assertEquals(1, player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 2147340491;
      Player player0 = new Player((-1133), "", "", (-1133), 2147340491);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)5;
      Party party0 = new Party(14335);
      player0.add(party0);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-110);
      byteArray0[8] = (byte)71;
      player0.unpack(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player((-1), "iN", (-451));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals((-451), player0.getPictureId());
      assertTrue(player0.isConnected());
      assertFalse(boolean0);
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player((-1), "iN", (-446));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      boolean boolean0 = player0.isConnected();
      assertTrue(boolean0);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals((-446), player0.getPictureId());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(1L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-29);
      Player player0 = new Player((byte) (-55), ":7ov7;u6ih;F~F;ge;", "=v%", (-395));
      player0.id = (int) (byte) (-55);
      player0.toString();
      System.setCurrentTimeMillis(994L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((byte) (-29));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player(0, "", "", (-21503), (byte)47);
      player0.setZ((byte)47);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Player player0 = new Player();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Party party0 = player0.head;
      player0.add((Party) null);
      player0.getIP();
      player0.setX((-2351.0F));
      player0.getIP();
      player0.getZ();
      player0.add((Party) null);
      player0.type();
      float float0 = player0.getX();
      assertEquals((-2351.0F), float0, 0.01F);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(1L);
      Player player0 = new Player((byte) (-55), "&", "'l|!(!^^n&CgS1LVg<", 2563);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-55);
      Party party0 = new Party((-11008));
      System.setCurrentTimeMillis(2563);
      player0.getMoney();
      float float0 = player0.getMoney();
      assertFalse(player0.isDead());
      assertEquals(2563, player0.getPictureId());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("&", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(1L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player((byte)1, "8}d!tN", "cu?\"3t]fLui-!d,:V", (-1));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      player0.setMoney((byte) (-4));
      System.setCurrentTimeMillis(15000L);
      System.setCurrentTimeMillis((byte)71);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(1L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player((byte) (-55), "'l|!(!^^n&CgS1LVg<", "'l|!(!^^n&CgS1LVg<", 2563);
      player0.setDead((long) 2563, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)71;
      byteArray0[2] = (byte) (-55);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)71;
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Player player0 = new Player((-1133), "", "", (-1133), 2147340491);
      player0.gangStrength();
      System.setCurrentTimeMillis(2147340491);
      System.setCurrentTimeMillis((byte)1);
      System.setCurrentTimeMillis((short)4919);
      System.setCurrentTimeMillis((-5557));
  }
}
