/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 04:09:41 GMT 2020
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.filemode.FileController;
import freemind.modes.schememode.SchemeMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.StringReader;
import java.net.URL;
import java.net.URLStreamHandler;
import java.text.AttributedCharacterIterator;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.format.DateTimeParseException;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.PropertyResourceBundle;
import java.util.TimeZone;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JLayeredPane;
import javax.swing.JMenu;
import javax.swing.JPanel;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.border.BevelBorder;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.util.ParsedURL;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.pdf.PDFStream;
import org.apache.xalan.templates.ElemComment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Color color0 = Color.LIGHT_GRAY;
      ActionEvent actionEvent0 = new ActionEvent("Y", (-1638), "Y", 210, (-579));
      Object object0 = new Object();
      actionEvent0.paramString();
      Window.Type window_Type0 = Window.Type.NORMAL;
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8103192400621673
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.updateUI();
      jDayChooser0.grabFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 3, 38, 38, '%');
      keyEvent0.getExtendedKeyCode();
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser1, 38, 90L, (-1040), 33, 'a');
      keyEvent1.setKeyCode(312);
      KeyEvent keyEvent2 = new KeyEvent(jDayChooser1, 0, (-1999), 33, (-1397), 'C');
      keyEvent1.setKeyCode((-1397));
      keyEvent2.paramString();
      jDayChooser1.keyPressed(keyEvent0);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.getDay();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser2.new DecoratorButton();
      jDayChooser_DecoratorButton0.setMultiClickThreshhold(3);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser1.isDayBordersVisible();
      assertEquals(7, jDayChooser1.getDay());
      
      jDayChooser2.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.721207899951971
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      jDayChooser0.addFocusListener(basicComboBoxEditor_UIResource0);
      jDayChooser0.setWeekOfYearVisible(true);
      Boolean boolean1 = new Boolean(false);
      jDayChooser0.contains((-1073741817), 63720);
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters((-1073741817));
      SystemColor systemColor0 = SystemColor.menuText;
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      StringReader stringReader0 = new StringReader("Center");
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(stringReader0);
      propertyResourceBundle0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      ParsedURL parsedURL0 = new ParsedURL("rTo`VCi!Xv@*1hg~?y");
      userAgentAdapter0.checkLoadScript("nW-Q.bm]2n_{", parsedURL0, parsedURL0);
      userAgentAdapter0.getXMLParserClassName();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("<?pze]sZ\"%hP-", "(NKHz:Es+g%4'", 1, "/u&1u;pNZL", uRLStreamHandler0);
      ParsedURL parsedURL1 = new ParsedURL(uRL0, "plugins/map/MapDialog_Distance");
      userAgentAdapter0.checkLoadScript("org.apache.batik.dom.svg.SVGOMAnimatedPoints$SVGOMPointList", parsedURL0, parsedURL0);
      userAgentAdapter0.getXMLParserClassName();
      DocumentLoader documentLoader1 = new DocumentLoader(userAgentAdapter0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.focusLost((FocusEvent) null);
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8969405148774494
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxDayCharacters(1765);
      jDayChooser0.setEnabled(true);
      Instant instant0 = MockInstant.ofEpochSecond((long) 1765, (long) 1765);
      Date date0 = Date.from(instant0);
      Date date1 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date1);
      jDayChooser0.getGraphics();
      jDayChooser0.setSelectableDateRange(date1, date1);
      Date.from(instant0);
      jDayChooser0.setYear(0);
      Boolean boolean0 = new Boolean(true);
      jDayChooser0.getMaxSelectableDate();
      Locale locale0 = Locale.JAPAN;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMaxSelectableDate(date1);
      jDayChooser0.setDay(69);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(29, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8912473865444506
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMinSelectableDate();
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser0.day = (-2882);
      float[] floatArray0 = new float[7];
      Color.getColor("day");
      floatArray0[0] = (-2168.652F);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2882), (-10), 210, (-2882), 'A');
      keyEvent0.setKeyCode(550);
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDay();
      jDayChooser0.setFocus();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getDay();
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setMaxSelectableDate(date1);
      jDayChooser0.init();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setMinSelectableDate(date0);
      assertEquals((-2882), jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.770581544706131
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Color color0 = Color.LIGHT_GRAY;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2168.652F);
      ActionEvent actionEvent0 = new ActionEvent(color0, 210, "Y", 210, (-579));
      Object object0 = new Object();
      actionEvent0.paramString();
      ActionEvent actionEvent1 = new ActionEvent("unknown type,cmd=Y,when=210,modifiers=Meta+Alt+Shift+Alt Graph+Button1", 812, "14");
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setMaxSelectableDate(date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.870507868771262
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxDayCharacters(1765);
      jDayChooser0.setEnabled(true);
      Instant instant0 = MockInstant.ofEpochSecond((long) 1765, (long) 1765);
      Date date0 = Date.from(instant0);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      ParsePosition parsePosition0 = new ParsePosition(2671);
      mockSimpleDateFormat0.parse("wMfm!A9qm$C4,", parsePosition0);
      jDayChooser0.setSelectableDateRange(date0, (Date) null);
      MockInstant.ofEpochSecond((-1L), (long) 2671);
      Date.from(instant0);
      jDayChooser0.setYear(808);
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVetoableChangeListeners();
      jDayChooser0.isOptimizedDrawingEnabled();
      int int0 = 0;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 30, 2147483647L, 30, 0, 'n', 0);
      jDayChooser0.keyReleased(keyEvent0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      float[] floatArray0 = new float[2];
      Color.getColor("&lat=");
      // Undeclared exception!
      try { 
        color0.getRGBComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.800765638487914
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 63720, false);
      focusEvent0.getOppositeComponent();
      basicComboBoxEditor_UIResource0.focusLost(focusEvent0);
      jDayChooser0.addFocusListener(basicComboBoxEditor_UIResource0);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.contains((-1073741822), 63720);
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters((-1073741822));
      SystemColor systemColor0 = SystemColor.menuText;
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.isFocusOwner();
      Object object0 = new Object();
      jDayChooser0.setSundayForeground(systemColor0);
      ElemComment elemComment0 = new ElemComment();
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL;
      assertEquals(2, (int)integer0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7902488130485366
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(1765);
      jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = Locale.CANADA;
      locale0.getExtensionKeys();
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.initDecorations();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getBaselineResizeBehavior();
      jDayChooser0.setDecorationBackgroundVisible(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(15, 15, 32, 4160, 4160);
      mockGregorianCalendar0.getWeekYear();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setSelectableDateRange(date0, date0);
      boolean boolean1 = jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(boolean1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7549741464867012
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxDayCharacters(1765);
      jDayChooser0.setEnabled(true);
      Instant instant0 = MockInstant.ofEpochSecond(2108L, 0L);
      Date date0 = Date.from(instant0);
      Date date1 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.getGraphics();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2795, 442, 1765);
      Date date2 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setSelectableDateRange(date1, date2);
      // Undeclared exception!
      try { 
        MockInstant.parse("day");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'day' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.drawDays();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      String string0 = "rTo`VCi!Xv@*1hg~?y";
      ParsedURL parsedURL0 = new ParsedURL("rTo`VCi!Xv@*1hg~?y");
      userAgentAdapter0.checkLoadScript("nW-Q.bm]2n_{", parsedURL0, parsedURL0);
      JMenu jMenu0 = new JMenu("nW-Q.bm]2n_{");
      JMenu jMenu1 = new JMenu("rTo`VCi!Xv@*1hg~?y");
      SchemeMode schemeMode0 = new SchemeMode();
      FileController fileController0 = null;
      try {
        fileController0 = new FileController(schemeMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.630470240160676
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      BevelBorder bevelBorder0 = new BevelBorder(0);
      Rectangle rectangle0 = bevelBorder0.getInteriorRectangle((Component) jDayChooser0, 64258, 37, 37, 160);
      jDayChooser0.repaint(rectangle0);
      jDayChooser1.updateUI();
      jDayChooser0.grabFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 3, 38, 38, '%');
      keyEvent0.getExtendedKeyCode();
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser1, 38, 90L, (-1040), 33, 'a');
      keyEvent1.setKeyCode(312);
      KeyEvent keyEvent2 = new KeyEvent(jDayChooser1, 0, (-1999), 33, (-1397), 'C');
      jDayChooser1.initDecorations();
      jDayChooser1.setDay(33);
      jDayChooser1.setMonth(38);
      assertEquals(31, jDayChooser1.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Color color0 = Color.LIGHT_GRAY;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.LINE_HEIGHT;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, 2750, "_-", (-579), (int) gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_ANGLE);
      Object object0 = new Object();
      actionEvent0.paramString();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute1 = GVTAttributedCharacterIterator.TextAttribute.GVT_FONT_FAMILIES;
      ActionEvent actionEvent1 = new ActionEvent(actionEvent0, 45, "accessories.plugins.time.JDayChooser", (-473));
      actionEvent1.setSource(gVTAttributedCharacterIterator_TextAttribute1);
      actionEvent1.setSource(gVTAttributedCharacterIterator_TextAttribute1);
      ActionEvent actionEvent2 = new ActionEvent("accessories.plugins.time.JDayChooser", 567, "");
      JDayChooser jDayChooser0 = new JDayChooser();
      java.sql.Date date0 = new java.sql.Date((long) gVTAttributedCharacterIterator_TextAttribute1.WRITING_MODE_RTL);
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setFont((Font) null);
      jDayChooser0.setDay(4);
      assertEquals(4, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.820988163682886
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxDayCharacters(1785);
      jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JEditorPane jEditorPane0 = new JEditorPane("day", "day");
      jEditorPane0.getActionMap();
      Color color0 = jEditorPane0.getSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getTransferHandler();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setDayBordersVisible(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 1785, "org.apache.xpath.operations.Div", 0L, 433);
      Object object0 = new Object();
      actionEvent0.paramString();
      JButton jButton0 = new JButton();
      actionEvent0.setSource(jButton0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.834577696076204
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setFocus();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      systemColor0.getColorSpace();
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2565.0F;
      floatArray0[1] = 1696.2F;
      floatArray0[2] = 2565.0F;
      floatArray0[3] = (-1161.2F);
      systemColor0.getRGBColorComponents(floatArray0);
      Color color0 = Color.getColor("day", (Color) systemColor0);
      jDayChooser0.setForeground(color0);
      systemColor0.getColorSpace();
      systemColor0.getColorComponents(floatArray0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setAlwaysFireDayProperty(true);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.weekOfYearVisible = true;
      Boolean boolean1 = new Boolean(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2769));
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9254889149708867
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getContainerListeners();
      jDayChooser0.setYear(2);
      Date date0 = jDayChooser0.getMinSelectableDate();
      Instant instant0 = MockInstant.ofEpochSecond(847L, (long) 2);
      Date.from(instant0);
      Date date1 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date1);
      jDayChooser0.getGraphics();
      jDayChooser0.setSelectableDateRange(date1, date1);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getAccessibleContext();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser1.getSundayForeground();
      jDayChooser1.isWeekOfYearVisible();
      Color color0 = jDayChooser1.getWeekdayForeground();
      jDayChooser1.getMinSelectableDate();
      jDayChooser1.getMaxDayCharacters();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser1.addListeners(28);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser1.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7385791605222836
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      userAgentAdapter0.getXMLParserClassName();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1055), 0L, 210, (-531), 'A');
      keyEvent0.setKeyCode((-531));
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      int int0 = JComponent.WHEN_IN_FOCUSED_WINDOW;
      jDayChooser0.setFocus();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setMonth(2537);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.723192361041013
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      jTextPane0.addContainerListener((ContainerListener) null);
      Color color0 = jTextPane0.getSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser1.initDecorations();
      jDayChooser0.setDay(8787);
      jDayChooser0.setMonth(8787);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setMonth(8787);
      assertEquals(30, jDayChooser0.getDay());
      
      jDayChooser1.initDecorations();
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9606825345582632
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxDayCharacters(1765);
      jDayChooser0.setEnabled(true);
      Instant instant0 = MockInstant.ofEpochSecond((long) 1765, (long) 1765);
      Date date0 = Date.from(instant0);
      Date date1 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date1);
      jDayChooser0.getGraphics();
      jDayChooser0.setSelectableDateRange(date1, date1);
      jDayChooser0.getAccessibleContext();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.isWeekOfYearVisible();
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.addListeners(0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertTrue(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.757689330507757
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser0.day = (-2882);
      Color.getColor("day");
      jDayChooser0.setWeekOfYearVisible(true);
      Boolean boolean0 = new Boolean(true);
      jDayChooser0.contains(4212, (-1073741817));
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters(0);
      SystemColor systemColor0 = SystemColor.menuText;
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("day", "P`E", 10073, "OT^z6@*]v!K~", uRLStreamHandler0);
      ParsedURL parsedURL0 = new ParsedURL(uRL0, "org.apache.batik.dom.svg.SVGOMAnimatedPoints$SVGOMPointList");
      userAgentAdapter0.checkLoadScript("West", parsedURL0, parsedURL0);
      userAgentAdapter0.getXMLParserClassName();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      jDayChooser0.initDecorations();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSundayForeground();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 44, 44, 806, 10, 'K');
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.setWeekdayForeground((Color) null);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertNull(color0);
      
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.BLACK;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 3765.7917F;
      floatArray0[2] = (-1581.7075F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-4205.15F);
      floatArray0[7] = (-401.4F);
      color0.getRGBComponents(floatArray0);
      jDayChooser0.setBackground(color0);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getSundayForeground();
      float[] floatArray0 = new float[7];
      floatArray0[0] = 868.4492F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-436.17706F);
      floatArray0[4] = (-858.93353F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.99F;
      color0.getComponents(floatArray0);
      jDayChooser0.setWeekdayForeground(color0);
      Color color1 = jDayChooser0.getSundayForeground();
      assertEquals(0, color1.getGreen());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(8, 46, 8, 8, (-785), 15);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setMinSelectableDate(date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      ParsedURL parsedURL0 = new ParsedURL("rTo`VCi!Xv@*1hg~?y");
      userAgentAdapter0.checkLoadScript("nW-Q.bm]2n_{", parsedURL0, parsedURL0);
      userAgentAdapter0.getXMLParserClassName();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setForeground(color0);
      assertEquals(164, color0.getBlue());
      
      System.setCurrentTimeMillis((-10));
      HashMap<AttributedCharacterIterator.Attribute, JButton> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, JButton>();
      Font font0 = new Font(hashMap0);
      jDayChooser0.setFont(font0);
      jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusUpCycle();
      jDayChooser0.getSelectedDay();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      PDFInfo pDFInfo0 = new PDFInfo();
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFResources pDFResources0 = pDFDocument0.getResources();
      PDFStream pDFStream0 = new PDFStream();
      PDFPage pDFPage0 = new PDFPage(pDFResources0, pDFStream0, 5, (-2503));
      pDFPage0.getDocument();
      pDFInfo0.setDocument((PDFDocument) null);
      pDFInfo0.getCreationDate();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7325637712329622
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDayPanel();
      jDayChooser0.updateUI();
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.setMaxDayCharacters(28);
      jDayChooser0.getLocale();
      int int0 = 423;
      long long0 = 2502L;
      int int1 = 3238;
      char char0 = 'j';
      MenuElement[] menuElementArray0 = new MenuElement[7];
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem();
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getFreeMindMapController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6344753508465937
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(true);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jTextPane0.addContainerListener((ContainerListener) null);
      Color color0 = jTextPane0.getSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      SVGColorProfileElementBridge sVGColorProfileElementBridge1 = new SVGColorProfileElementBridge();
      ParsedURL parsedURL0 = new ParsedURL("Uti:u5@45T@=ndS");
      parsedURL0.setUserAgent("$%eYUK");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "28";
      stringArray0[2] = "28";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.736270028811289
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.addContainerListener((ContainerListener) null);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setMonth((-52));
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-973));
      jDayChooser0.getSundayForeground();
      jDayChooser0.getSundayForeground();
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7666238054495484
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(11);
      jDayChooser0.validate();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 63742, 11, 11, 8839, '&');
      keyEvent0.setKeyCode(6);
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDay();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 8993, (-325), (-1), 63742, 8839);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      ActionEvent actionEvent0 = new ActionEvent(integer0, (-4130), "day");
      PipedInputStream pipedInputStream0 = new PipedInputStream(14);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6344753508465937
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Color color0 = Color.LIGHT_GRAY;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      jTextPane0.addContainerListener((ContainerListener) null);
      Color color1 = jTextPane0.getSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color1);
      jDayChooser0.initDecorations();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.7421583343393316
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Color color0 = Color.LIGHT_GRAY;
      float[] floatArray0 = new float[7];
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 42, (-1040), 38, 3, 'H');
      keyEvent0.getExtendedKeyCode();
      keyEvent0.setKeyCode(5);
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.VERTICAL_ORIENTATION_ANGLE;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 1193, "unknown type,keyCode=5,keyText=Unknown keyCode: 0x5,keyChar='H',modifiers=Meta+Ctrl+Alt Graph,extModifiers=Meta+Ctrl+Alt Graph,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", (long) gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_ANGLE, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL);
      Object object0 = new Object();
      actionEvent0.paramString();
      actionEvent0.setSource("unknown type,keyCode=5,keyText=Unknown keyCode: 0x5,keyChar='H',modifiers=Meta+Ctrl+Alt Graph,extModifiers=Meta+Ctrl+Alt Graph,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0");
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute1 = GVTAttributedCharacterIterator.TextAttribute.VERTICAL_ORIENTATION;
      ActionEvent actionEvent1 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute1, (int) gVTAttributedCharacterIterator_TextAttribute1.ADJUST_SPACING, "unknown type,cmd=unknown type,keyCode=5,keyText=Unknown keyCode: 0x5,keyChar='H',modifiers=Meta+Ctrl+Alt Graph,extModifiers=Meta+Ctrl+Alt Graph,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0,when=1,modifiers=Ctrl");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7421583343393316
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser0.day = (-2882);
      Color.getColor("day");
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getTransferHandler();
      jDayChooser0.setYearChooser(jYearChooser0);
      jYearChooser0.getFocusTraversalPolicy();
      KeyEvent keyEvent0 = new KeyEvent(jYearChooser0, 1711, (-2882), 1142, 8993, 'V');
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDay();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-325), (-13), 10081, (-13), (-2882), 1792);
      ActionEvent actionEvent0 = new ActionEvent("V6", (-1228), "V6");
      actionEvent0.setSource(jDayChooser0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)StrokingTextPainter.FLOW_PARAGRAPH;
      PipedInputStream pipedInputStream0 = new PipedInputStream(27);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.660726144843012
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jTextPane0.addContainerListener((ContainerListener) null);
      jTextPane0.getSelectionColor();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.getDay();
      jDayChooser2.setFocus();
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.drawWeeks();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-24);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.dayPanel = jPanel0;
      jPanel0.isPaintingForPrint();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jPanel0, (-3705), (-3705), (-3705), (-3705), '\'', 10111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.7957012442565277
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Color color0 = Color.LIGHT_GRAY;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.LINE_HEIGHT;
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      ActionEvent actionEvent0 = new ActionEvent(integer0, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_TTB, "_-", 384L, 30);
      Object object0 = new Object();
      ActionEvent actionEvent1 = new ActionEvent("_-", (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED, "_-", (-1401));
      actionEvent1.paramString();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute1 = GVTAttributedCharacterIterator.TextAttribute.GVT_FONT_FAMILIES;
      ActionEvent actionEvent2 = new ActionEvent(actionEvent0, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL, "accessories.plugins.time.JDayChooser", (int) gVTAttributedCharacterIterator_TextAttribute0.UNDERLINE_ON);
      actionEvent0.setSource(actionEvent1);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute2 = GVTAttributedCharacterIterator.TextAttribute.GVT_FONT;
      ActionEvent actionEvent3 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute2, (int) gVTAttributedCharacterIterator_TextAttribute1.WRITING_MODE_RTL, "_-");
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_TERMINAL, (long) gVTAttributedCharacterIterator_TextAttribute2.ARABIC_MEDIAL, 44, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL, '&', 1);
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser((boolean) gVTAttributedCharacterIterator_TextAttribute1.STRIKETHROUGH_ON);
      jDayChooser1.getDay();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.setMultiClickThreshhold((long) gVTAttributedCharacterIterator_TextAttribute1.ORIENTATION_AUTO);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.isDayBordersVisible();
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7394486152298643
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      jDayChooser0.addFocusListener(basicComboBoxEditor_UIResource0);
      jDayChooser0.setWeekOfYearVisible(true);
      Boolean boolean0 = new Boolean(false);
      jDayChooser0.contains((-1073741817), 63720);
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters((-1073741817));
      SystemColor systemColor0 = SystemColor.menuText;
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Center", "Center", 65406, "org.apache.batik.dom.svg.SVGOMAnimatedPoints$SVGOMPointList", uRLStreamHandler0);
      ParsedURL parsedURL0 = new ParsedURL(uRL0, "org.apache.batik.dom.svg.SVGOMAnimatedPoints$SVGOMPointList");
      userAgentAdapter0.checkLoadScript("day", parsedURL0, parsedURL0);
      userAgentAdapter0.getXMLParserClassName();
      jDayChooser0.initDecorations();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.731978273379991
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxDayCharacters(1765);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getMinimumSize();
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 1739, 8993, 2982, (-943), 'A');
      keyEvent0.setKeyCode((-943));
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDay();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(994, (-3247), 2982, 0, 1, (-545));
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 994, "unknown type,keyCode=-943,keyText=\uFC51,keyChar='A',modifiers=Meta+Ctrl+Alt Graph,extModifiers=Meta+Ctrl+Alt+Button2,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.addContainerListener((ContainerListener) null);
      boolean boolean0 = new Boolean("day");
      jDayChooser0.setMonth((-52));
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }
}
