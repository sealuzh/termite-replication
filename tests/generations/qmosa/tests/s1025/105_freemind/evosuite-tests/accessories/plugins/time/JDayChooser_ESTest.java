/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 12:55:20 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.mindmapmode.MindMapMode;
import java.awt.AWTEventMulticaster;
import java.awt.CheckboxMenuItem;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.io.PrintWriter;
import java.net.URL;
import java.sql.Timestamp;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.ZoneOffset;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.Locale;
import java.util.TimeZone;
import java.util.concurrent.Delayed;
import javax.help.DefaultHelpModel;
import javax.help.HelpSet;
import javax.help.HelpSetException;
import javax.help.JHelp;
import javax.help.plaf.basic.BasicHelpUI;
import javax.swing.AbstractButton;
import javax.swing.JButton;
import javax.swing.JEditorPane;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.JTextComponent;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledEditorKit;
import javax.xml.transform.ErrorListener;
import org.apache.batik.apps.svgbrowser.JSVGViewerFrame;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.SVGGVTFont;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.batik.util.ParsedURL;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xalan.templates.StylesheetRoot;
import org.apache.xalan.transformer.TransformerImpl;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Demo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 65;
      int int1 = 6;
      jDayChooser0.createVolatileImage(65, 6);
      jDayChooser0.isRequestFocusEnabled();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2566774792688222
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      int int0 = 1765;
      jDayChooser0.setMaxDayCharacters(1765);
      jDayChooser0.isDecorationBackgroundVisible();
      Color.getColor((String) null);
      Color color0 = Color.BLACK;
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.revalidate();
      JDayChooser jDayChooser1 = new JDayChooser();
      Date date0 = null;
      jDayChooser1.setSelectableDateRange((Date) null, (Date) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser0.isDecorationBackgroundVisible();
      // Undeclared exception!
      try { 
        Timestamp.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2700828932458723
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.maxSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FONT_VARIANT;
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.revalidate();
      jDayChooser0.setSelectableDateRange(date1, date1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.isDecorationBackgroundVisible();
      jDayChooser0.setMaxSelectableDate(date0);
      HelpSet helpSet0 = new HelpSet();
      DefaultHelpModel defaultHelpModel0 = new DefaultHelpModel(helpSet0);
      JHelp jHelp0 = new JHelp(defaultHelpModel0);
      BasicHelpUI basicHelpUI0 = new BasicHelpUI(jHelp0);
      Class<Delayed> class0 = Delayed.class;
      BasicHelpUI.getIcon(class0, "");
      int int0 = 1295;
      MockDate mockDate0 = new MockDate(1295, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_TERMINAL);
      jDayChooser0.setSelectableDateRange((Date) null, date1);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      HsqlProperties hsqlProperties0 = new HsqlProperties();
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3034671756181426
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setFocus();
      SystemColor systemColor0 = SystemColor.control;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      float[] floatArray0 = new float[9];
      floatArray0[1] = (-260.97772F);
      floatArray0[7] = 2720.4685F;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 210, (-348L), (-1844), (-1844), 'A');
      keyEvent0.setKeyCode(5);
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_NONE;
      ActionEvent actionEvent0 = new ActionEvent(integer0, (-2409), "unknown type,keyCode=5,keyText=Unknown keyCode: 0x5,keyChar='A',modifiers=Meta+Alt,extModifiers=Ctrl+Shift+Alt Graph+Button2+Button3+Button4+Button5+Button6+Button7+Button8+Button9+Button10+Button11+Button12+Button13+Button14+Button15+Button16+Button17+Button18+Button19+Button20,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getDay();
      Boolean boolean0 = Boolean.TRUE;
      Color color0 = Color.magenta;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser1.initDecorations();
      jDayChooser1.setDecorationBackgroundColor(systemColor0);
      Color color1 = jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals((-65281), color1.getRGB());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.229703341556995
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMinimumSize();
      MockInstant.ofEpochSecond((long) 223, 4L);
      Color.getColor((String) null, 6);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 223, 4L, 223, '0', '0');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 140, 37, 223, 2490, '0');
      keyEvent1.setKeyCode(37);
      keyEvent1.consume();
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent1);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser2.setFocus();
      Boolean boolean0 = new Boolean(false);
      jDayChooser1.setMonth(223);
      jDayChooser1.setDay(140);
      assertEquals(31, jDayChooser1.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1365210580111675
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      SystemColor systemColor0 = SystemColor.controlText;
      ColorSpace colorSpace0 = systemColor0.getColorSpace();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[2] = (float) 0;
      systemColor0.getComponents(colorSpace0, floatArray0);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (-1161.2F);
      systemColor0.getRGBColorComponents(floatArray0);
      SystemColor systemColor1 = SystemColor.controlShadow;
      SystemColor systemColor2 = SystemColor.controlHighlight;
      jDayChooser0.setForeground(systemColor1);
      systemColor1.getColorSpace();
      jDayChooser0.isDayBordersVisible();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getInsets();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2456), 34, (-2456), 34, 35);
      mockGregorianCalendar0.getWeekYear();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.lookup(arrayList0, linkedList0);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1287753249064387
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth((-2674));
      jDayChooser0.setDay(4002);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      CoreDocumentImpl coreDocumentImpl1 = new CoreDocumentImpl(true);
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(coreDocumentImpl1);
      sVGGeneratorContext0.setEmbeddedFontsOn(true);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, false);
      jDayChooser_DecoratorButton1.paint(sVGGraphics2D0);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1070155606793213
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMinimumSize();
      int int0 = 1;
      jDayChooser0.setMaxDayCharacters(1);
      long long0 = 4L;
      Instant instant0 = MockInstant.ofEpochSecond((long) 223, 4L);
      Date.from(instant0);
      int int1 = 27;
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      PDFGraphics2D pDFGraphics2D0 = null;
      try {
        pDFGraphics2D0 = new PDFGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4009139750110116
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser0.repaint();
      jDayChooser0.setRequestFocusEnabled(true);
      Color.getColor("day", (-2873));
      Color.getColor("day", color0);
      jDayChooser0.getMinimumSize();
      jDayChooser0.setMaxDayCharacters(140);
      jDayChooser0.setEnabled(true);
      MockInstant.ofEpochSecond((long) 12, 1L);
      MockDate mockDate0 = new MockDate();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2873), 14, 140, (-555), '0');
      keyEvent0.setKeyCode(32);
      String string0 = AbstractButton.MODEL_CHANGED_PROPERTY;
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      int int0 = jDayChooser2.getDay();
      assertEquals(14, int0);
      
      Boolean boolean0 = new Boolean(true);
      jDayChooser0.setMonth((-2873));
      jDayChooser2.setDay((-163));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(false);
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(coreDocumentImpl0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, true);
      jDayChooser1.init();
      jDayChooser2.initDecorations();
      assertEquals(1, jDayChooser2.getDay());
      
      jDayChooser1.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3187936152348607
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setFocus();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      float[] floatArray0 = new float[9];
      floatArray0[1] = (-260.97772F);
      floatArray0[7] = 2720.4685F;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 210, (-348L), (-1844), (-1844), 'A');
      systemColor0.getRGBColorComponents(floatArray0);
      SystemColor systemColor1 = SystemColor.controlShadow;
      Color color0 = Color.getColor("day", (Color) systemColor1);
      jDayChooser0.setForeground(color0);
      color0.getColorSpace();
      jDayChooser0.isDayBordersVisible();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setAlwaysFireDayProperty(true);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDecorationBackgroundColor(systemColor1);
      JDayChooser jDayChooser2 = new JDayChooser();
      Boolean boolean0 = new Boolean(true);
      JDayChooser jDayChooser3 = new JDayChooser(false);
      jDayChooser3.setDay(210);
      jDayChooser3.keyReleased(keyEvent0);
      assertEquals(28, jDayChooser3.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.316789833066891
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.contains((-2962), (-2962));
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters((-2962));
      SystemColor systemColor0 = SystemColor.menuText;
      Color.getColor("day");
      Color color0 = Color.BLACK;
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getTransferHandler();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setFont((Font) null);
      jDayChooser0.isDayBordersVisible();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      Boolean boolean1 = new Boolean(true);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.205497927762563
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setFocus();
      SystemColor systemColor0 = SystemColor.controlShadow;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      ParsedURL parsedURL0 = new ParsedURL("day");
      parsedURL0.complete();
      userAgentAdapter0.checkLoadScript("day", parsedURL0, parsedURL0);
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      systemColor0.getColorSpace();
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1374.6792F;
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getTransferHandler();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setFont((Font) null);
      jDayChooser0.setSundayForeground(systemColor0);
      // Undeclared exception!
      try { 
        MockZonedDateTime.parse((CharSequence) "year");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'year' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.366610775121725
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(19);
      jDayChooser0.hasFocus();
      jDayChooser0.drawDays();
      Date date0 = jDayChooser0.getMinSelectableDate();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jDayChooser0;
      objectArray0[1] = (Object) date0;
      objectArray0[2] = (Object) jDayChooser0;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)SVGGVTFont.PAINT_INFO;
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.setSelectableDateRange(date1, date0);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.getLocale();
      jDayChooser0.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3427896815205425
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.requestFocus();
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxDayCharacters(1765);
      jDayChooser0.setEnabled(true);
      jDayChooser0.initDecorations();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.isDecorationBackgroundVisible();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getBaselineResizeBehavior();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 75, 4160, 0, 0);
      mockGregorianCalendar0.getWeekYear();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(1, jDayChooser0.getDay());
      
      jDayChooser1.isDecorationBackgroundVisible();
      jDayChooser1.focusLost((FocusEvent) null);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3329390080362247
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser0.day = (-2882);
      float[] floatArray0 = new float[7];
      Color.getColor("day");
      floatArray0[0] = (-2168.652F);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2882), (-10), 210, (-2882), 'A');
      keyEvent0.setKeyCode(550);
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getDay();
      jDayChooser1.setFocus();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getDay();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.303470275211166
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setFocus();
      SystemColor systemColor0 = SystemColor.controlShadow;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 30, 50L, 1371, 30, 'A');
      keyEvent0.setKeyCode((-10));
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getDay();
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getDay();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3248756032677274
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(19);
      jDayChooser0.hasFocus();
      jDayChooser0.drawDays();
      Date date0 = jDayChooser0.maxSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jDayChooser0;
      objectArray0[1] = (Object) date0;
      objectArray0[2] = (Object) jDayChooser0;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)SVGGVTFont.PAINT_INFO;
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.revalidate();
      jDayChooser0.setSelectableDateRange(date1, date0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setMaxSelectableDate(date0);
      MockDate mockDate0 = new MockDate((-1994), 48, 26);
      jDayChooser0.setSelectableDateRange(date0, mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.205435033889684
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jDayChooser0.getDecorationBackgroundColor();
      int int0 = 61442;
      jPanel0.setBounds(61442, 61442, 0, 0);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getVerifyInputWhenFocusTarget();
      CheckboxMenuItem checkboxMenuItem0 = null;
      try {
        checkboxMenuItem0 = new CheckboxMenuItem("day", true);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3194775896647593
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxDayCharacters(1785);
      jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JEditorPane jEditorPane0 = new JEditorPane("day", "day");
      jEditorPane0.getActionMap();
      Color color0 = jEditorPane0.getSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getTransferHandler();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setDayBordersVisible(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 1785, "org.apache.xpath.operations.Div", 0L, 433);
      Object object0 = new Object();
      actionEvent0.paramString();
      JButton jButton0 = new JButton();
      actionEvent0.setSource(jButton0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2404282305331034
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setFocus();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      float[] floatArray0 = new float[9];
      floatArray0[1] = (-260.97772F);
      floatArray0[7] = 2720.4685F;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 210, (-348L), (-1844), (-1844), 'A');
      keyEvent0.setKeyCode(5);
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDay();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_NONE;
      ActionEvent actionEvent0 = new ActionEvent(integer0, (-2409), "unknown type,keyCode=5,keyText=Unknown keyCode: 0x5,keyChar='A',modifiers=Meta+Alt,extModifiers=Ctrl+Shift+Alt Graph+Button2+Button3+Button4+Button5+Button6+Button7+Button8+Button9+Button10+Button11+Button12+Button13+Button14+Button15+Button16+Button17+Button18+Button19+Button20,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ActionEvent actionEvent1 = new ActionEvent(mockGregorianCalendar0, 27, "unknown type,keyCode=5,keyText=Unknown keyCode: 0x5,keyChar='A',modifiers=Meta+Alt,extModifiers=Ctrl+Shift+Alt Graph+Button2+Button3+Button4+Button5+Button6+Button7+Button8+Button9+Button10+Button11+Button12+Button13+Button14+Button15+Button16+Button17+Button18+Button19+Button20,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", 972L, 8);
      actionEvent1.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3336832416933775
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setFocus();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      systemColor0.getColorSpace();
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2565.0F;
      floatArray0[1] = 1696.2F;
      floatArray0[2] = 2565.0F;
      floatArray0[3] = (-1161.2F);
      systemColor0.getRGBColorComponents(floatArray0);
      Color color0 = Color.getColor("day", (Color) systemColor0);
      jDayChooser0.setForeground(color0);
      systemColor0.getColorSpace();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      jDayChooser0.setAlwaysFireDayProperty(true);
      boolean boolean1 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean1 == boolean0);
      
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JDayChooser jDayChooser1 = new JDayChooser();
      Boolean boolean2 = new Boolean(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2769));
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2120265517834916
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = 3;
      jDayChooser0.setMaxDayCharacters(3);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.hasFocus();
      jDayChooser1.drawDays();
      Date date0 = jDayChooser1.maxSelectableDate;
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser1.setMonthChooser(jMonthChooser0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)SVGGVTFont.PAINT_INFO;
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      jDayChooser0.getMaxDayCharacters();
      jDayChooser1.initDecorations();
      int int1 = (-1195);
      // Undeclared exception!
      try { 
        MockLocalDateTime.of((int) gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_AUTO, 47, (-1195), 282, 75);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 47
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2412887691219403
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setFocus();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      float[] floatArray0 = new float[9];
      floatArray0[1] = (-260.97772F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      floatArray0[7] = 2720.4685F;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 210, (-348L), (-1844), (-1844), 'A');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 218, (-555), 44, 6, '0');
      KeyEvent keyEvent2 = new KeyEvent(jDayChooser0, (-1844), 1L, 14, 218, '0');
      keyEvent2.setKeyCode(14);
      keyEvent2.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getDay();
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      
      Boolean boolean0 = new Boolean(false);
      jDayChooser1.setMonth(14);
      jDayChooser1.setDay(14);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2648528402105983
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(1765);
      jDayChooser0.setSize(1765, 2301);
      jDayChooser0.isDecorationBackgroundVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.weekOfYearVisible = true;
      jDayChooser0.initDecorations();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setMonth((-1));
      jDayChooser0.isWeekOfYearVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2719882033536103
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setFocus();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      float[] floatArray0 = new float[9];
      floatArray0[1] = (-260.97772F);
      floatArray0[7] = 2720.4685F;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 210, (-348L), (-1844), (-1844), 'A');
      keyEvent0.setKeyCode(5);
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDay();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_NONE;
      ActionEvent actionEvent0 = new ActionEvent(integer0, (-2409), "unknown type,keyCode=5,keyText=Unknown keyCode: 0x5,keyChar='A',modifiers=Meta+Alt,extModifiers=Ctrl+Shift+Alt Graph+Button2+Button3+Button4+Button5+Button6+Button7+Button8+Button9+Button10+Button11+Button12+Button13+Button14+Button15+Button16+Button17+Button18+Button19+Button20,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ActionEvent actionEvent1 = new ActionEvent(mockGregorianCalendar0, 27, "unknown type,keyCode=5,keyText=Unknown keyCode: 0x5,keyChar='A',modifiers=Meta+Alt,extModifiers=Ctrl+Shift+Alt Graph+Button2+Button3+Button4+Button5+Button6+Button7+Button8+Button9+Button10+Button11+Button12+Button13+Button14+Button15+Button16+Button17+Button18+Button19+Button20,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", 972L, 8);
      actionEvent1.setSource((Object) null);
      Boolean boolean0 = new Boolean(true);
      jDayChooser0.setMonth(307);
      jDayChooser0.setDay(5);
      boolean boolean1 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(5, jDayChooser0.getDay());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1700179605675673
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setYear(33);
      jDayChooser0.getDay();
      jDayChooser0.setFocus();
      jDayChooser0.init();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.4592819743341736
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxDayCharacters(1765);
      jDayChooser0.setEnabled(true);
      MockInstant.ofEpochSecond((long) 1765, (long) 1765);
      Date date0 = jDayChooser0.maxSelectableDate;
      Date date1 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date1);
      jDayChooser0.getGraphics();
      jDayChooser0.setSelectableDateRange(date1, date1);
      jDayChooser0.getAccessibleContext();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.isWeekOfYearVisible();
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.addListeners(0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.initDecorations();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.151862346116008
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters((-9));
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.hasFocus();
      jDayChooser1.drawDays();
      Date date0 = jDayChooser1.maxSelectableDate;
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jDayChooser0.list((PrintWriter) null, (-9));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Component", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setFocus();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      float[] floatArray0 = new float[9];
      floatArray0[1] = (-260.97772F);
      floatArray0[7] = 2720.4685F;
      jDayChooser0.setRequestFocusEnabled(false);
      Dimension dimension0 = new Dimension();
      jDayChooser0.setMaxDayCharacters(0);
      ClassLoader.getSystemClassLoader();
      StylesheetRoot stylesheetRoot0 = new StylesheetRoot((ErrorListener) null);
      TransformerImpl transformerImpl0 = new TransformerImpl(stylesheetRoot0);
      // Undeclared exception!
      try { 
        transformerImpl0.getOutputProperties();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xalan.transformer.TransformerImpl", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.205435033889684
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSundayForeground();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 44, 44, 806, 10, 'K');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2358379389334586
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser0.day = (-2873);
      float[] floatArray0 = new float[7];
      Color.getColor("day");
      floatArray0[0] = (-2168.652F);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2873), (-10), 210, (-2873), 'A');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.initDecorations();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1286651860090515
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      float[] floatArray0 = new float[9];
      floatArray0[7] = 2720.4685F;
      jDayChooser0.getDay();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_NONE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setDay(56);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Cursor cursor0 = JSVGViewerFrame.WAIT_CURSOR;
      jDayChooser0.setCursor(cursor0);
      jDayChooser0.getDaysInMonth();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "L.B&GE._:0nK?{vl,L";
      JiBX_bindingFactory.getInstance();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "oop/p", 10173);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.170005734881401
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.setWeekdayForeground((Color) null);
      jDayChooser0.getWeekdayForeground();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.2377302640876486
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      SystemColor systemColor0 = SystemColor.controlText;
      ColorSpace colorSpace0 = systemColor0.getColorSpace();
      float[] floatArray0 = new float[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      colorSpace0.fromCIEXYZ(floatArray0);
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 2565.0F;
      systemColor0.getColorComponents(colorSpace0, floatArray0);
      floatArray0[3] = 2565.0F;
      floatArray0[4] = (float) 0;
      floatArray0[5] = 2565.0F;
      floatArray0[6] = (-1161.2F);
      systemColor0.getRGBColorComponents(floatArray0);
      SystemColor systemColor1 = SystemColor.controlShadow;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 0, 'j');
      keyEvent0.setKeyCode(0);
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.getDay();
      jDayChooser1.setFocus();
      jDayChooser1.drawDays();
      jDayChooser1.getMaxDayCharacters();
      jDayChooser0.getWeekdayForeground();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.293779968642553
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMinSelectableDate();
      Color color0 = Color.LIGHT_GRAY;
      Color.getColor(" F");
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDecorationBackgroundColor((Color) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-603), (-2873), (-216), (-603), 'A');
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser0.getBaselineResizeBehavior();
      jDayChooser1.setDecorationBackgroundVisible(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(450, 2806, 210, 13, (-580));
      mockGregorianCalendar0.getWeekYear();
      mockGregorianCalendar0.getGregorianChange();
      jDayChooser1.setSelectableDateRange(date0, date0);
      boolean boolean0 = jDayChooser1.isDecorationBackgroundVisible();
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(boolean0);
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.2727872114814516
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setFocus();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      float[] floatArray0 = new float[9];
      floatArray0[1] = (-260.97772F);
      floatArray0[7] = 2720.4685F;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 210, (-348L), (-1844), (-1844), 'A');
      keyEvent0.setKeyCode((-1844));
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_NONE;
      Object object0 = new Object();
      ActionEvent actionEvent0 = new ActionEvent(object0, 14, "1JKH`Q");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getDay();
      Boolean boolean0 = Boolean.TRUE;
      jDayChooser1.setMonth((-306));
      jDayChooser1.updateUI();
      JButton jButton0 = jDayChooser1.getSelectedDay();
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertNull(jButton0);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setPreferredSize((Dimension) null);
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1609952673725847
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(140, dimension0.height);
      assertEquals(223, dimension0.width);
      
      MockInstant.ofEpochSecond((long) 223, 4L);
      Color color0 = Color.getColor((String) null, 6);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 223, 4L, 223, '0', '0');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 140, 37, 223, 2490, '0');
      keyEvent1.setKeyCode(37);
      keyEvent0.paramString();
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      BasicHelpUI.getIcon(class0, "5");
      MockDate mockDate0 = new MockDate(140, 342, 25);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      jDayChooser0.setForeground(color0);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.132670296694969
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jTextPane0.addContainerListener((ContainerListener) null);
      Color color0 = jTextPane0.getSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1700179605675673
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = Locale.CANADA;
      locale0.toLanguageTag();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getInputMap();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "en-CA");
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDecorationBackgroundVisible(true);
      JOptionPane jOptionPane0 = new JOptionPane(locale0);
      try { 
        jOptionPane0.createDialog("en-CA");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.124806616475451
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setInheritsPopupMenu(true);
      jDayChooser0.getLocation((Point) null);
      jDayChooser0.setRequestFocusEnabled(false);
      Dimension dimension0 = new Dimension();
      jDayChooser0.setMaxDayCharacters(12);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      HelpSet.findHelpSet(classLoader0, "day");
      HelpSet helpSet0 = null;
      try {
        helpSet0 = new HelpSet(classLoader0, (URL) null);
        fail("Expecting exception: HelpSetException");
      
      } catch(Throwable e) {
         //
         // Could not parse
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         //
         verifyException("javax.help.HelpSet", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1677717028005006
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(true);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jTextPane0.addContainerListener((ContainerListener) null);
      Color color0 = jTextPane0.getSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1336666818916004
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      JTextPane jTextPane0 = new JTextPane();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle("day", styleContext_NamedStyle0);
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext0.new NamedStyle(styleContext_NamedStyle1);
      Style style0 = jTextPane0.addStyle("14", styleContext_NamedStyle2);
      Font font0 = styleContext0.getFont((AttributeSet) style0);
      jDayChooser0.getFontMetrics(font0);
      jDayChooser0.drawWeeks();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 10022);
      ActionEvent actionEvent0 = new ActionEvent(bufferedInputStream0, 10022, "14", 10022);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.BufferedInputStream cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2605909815293592
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(1765);
      jDayChooser0.isDecorationBackgroundVisible();
      Color.getColor((String) null);
      Color color0 = Color.BLACK;
      Color.getColor((String) null, (Color) null);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.setInheritsPopupMenu(true);
      jYearChooser0.getTransferHandler();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setFont((Font) null);
      MindMapMode mindMapMode0 = new MindMapMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.178043550447209
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(3);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.hasFocus();
      jDayChooser1.drawDays();
      MockDate mockDate0 = new MockDate(3, 3, 3, 3, 3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.BIDI_LEVEL;
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.170846044063863
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1346, false);
      focusEvent0.getOppositeComponent();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.addFocusListener(jDayChooser1);
      jDayChooser1.setWeekOfYearVisible(false);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.contains(1346, (-1073741822));
      StyledEditorKit.ItalicAction styledEditorKit_ItalicAction0 = new StyledEditorKit.ItalicAction();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      SystemColor systemColor0 = SystemColor.menuText;
      Color color0 = Color.PINK;
      JTextPane jTextPane0 = new JTextPane();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jTextPane0.addContainerListener((ContainerListener) null);
      jTextPane0.getSelectionColor();
      Demo demo0 = null;
      try {
        demo0 = new Demo();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.150964732980717
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 336, false);
      focusEvent0.getOppositeComponent();
      jDayChooser0.addFocusListener(basicComboBoxEditor_UIResource0);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isDecorationBackgroundVisible();
      StyledEditorKit.ItalicAction styledEditorKit_ItalicAction0 = new StyledEditorKit.ItalicAction();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      SystemColor systemColor0 = SystemColor.menuText;
      JTextPane jTextPane0 = new JTextPane();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle((Style) null);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextPane0.new AccessibleJTextComponent();
      defaultStyledDocument0.addDocumentListener(jTextComponent_AccessibleJTextComponent0);
      defaultStyledDocument0.setLogicalStyle(336, styleContext_NamedStyle0);
      JTextPane jTextPane1 = new JTextPane(defaultStyledDocument0);
      jTextPane1.addContainerListener((ContainerListener) null);
      jTextPane0.getSelectionColor();
      Demo demo0 = null;
      try {
        demo0 = new Demo();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.134872868605743
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxDayCharacters(0);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.hasFocus();
      jDayChooser1.drawDays();
      Date date0 = jDayChooser0.maxSelectableDate;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "West");
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      ZoneOffset.ofHours(0);
      int int0 = (-1195);
      int int1 = 282;
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(1275, 282, (-1195), 228, 14);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 282
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }
}
