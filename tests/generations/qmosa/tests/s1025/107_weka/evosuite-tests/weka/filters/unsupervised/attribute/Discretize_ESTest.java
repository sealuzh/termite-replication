/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 13:34:38 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Properties;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0668041607880614
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1.0;
      discretize0.getDesiredWeightOfInstancesPerInterval();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "g%|:ZW%[K";
      stringArray0[1] = "]8:Arnh";
      stringArray0[2] = "nb=";
      stringArray0[3] = "+|{<m";
      stringArray0[4] = "4'{5oC";
      stringArray0[5] = "]xnf~X'0t1\"i2bD@n";
      stringArray0[6] = "";
      stringArray0[7] = "*d>LMRZU";
      Discretize.main(stringArray0);
      discretize0.getAttributeIndices();
      discretize0.getAttributeIndices();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-2135350969));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5137815842823215
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 379.0183;
      doubleArray1[1] = 2387.708;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 379.0183;
      doubleArray2[1] = 379.0183;
      doubleArray2[2] = 2387.708;
      doubleArray2[3] = 2387.708;
      doubleArray2[4] = 2387.708;
      doubleArray2[5] = 379.0183;
      doubleArray2[6] = 2387.708;
      doubleArray2[4] = 2387.708;
      doubleArray2[8] = 379.0183;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 379.0183;
      doubleArray3[1] = 379.0183;
      doubleArray3[2] = 379.0183;
      doubleArray3[3] = 2387.708;
      doubleArray3[4] = 379.0183;
      doubleArray3[5] = 379.0183;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 379.0183;
      doubleArray6[1] = 2387.708;
      doubleArray6[2] = 379.0183;
      doubleArray0[5] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString(2);
      assertEquals(10, discretize0.getBins());
      assertEquals("(-inf-379.0183],(379.0183-379.0183],(379.0183-379.0183],(379.0183-2387.708],(2387.708-379.0183],(379.0183-379.0183],(379.0183-inf)", string0);
      assertNotNull(string0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval((-115.4606275515358));
      discretize0.m_ClassIndex = 767;
      discretize0.setInvertSelection(true);
      boolean boolean0 = discretize0.m_IgnoreClass;
      discretize0.findNumBinsTipText();
      discretize0.getInvertSelection();
      discretize0.useEqualFrequencyTipText();
      discretize0.getUseEqualFrequency();
      StringReader stringReader0 = new StringReader("_u126=Kz6#");
      stringReader0.reset();
      stringReader0.reset();
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[_u126=Kz6#], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("Nu2_|Um:3");
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.setAttributeIndices("Nu2_|Um:3");
      discretize0.setFindNumBins(true);
      Filter.makeCopies(discretize0, 15);
      byte[] byteArray0 = new byte[4];
      discretize0.m_DiscretizeCols = null;
      discretize0.m_FindNumBins = false;
      byteArray0[1] = (byte)53;
      discretize0.setBins((byte)0);
      byteArray0[3] = (byte)72;
      discretize0.m_UseBinNumbers = true;
      discretize0.useBinNumbersTipText();
      discretize0.makeBinaryTipText();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      discretize0.setUseEqualFrequency(false);
      // Undeclared exception!
      try { 
        discretize0.setInvertSelection(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(true);
      discretize0.setMakeBinary(false);
      discretize0.m_UseEqualFrequency = true;
      String string0 = "#zI6@EqE=}zZ";
      Range range0 = new Range("#zI6@EqE=}zZ");
      discretize0.m_DiscretizeCols = range0;
      range0.toDisplay();
      discretize0.setUseBinNumbers(true);
      discretize0.getUseBinNumbers();
      discretize0.setOutputFormat();
      discretize0.setOutputFormat();
      range0.setRanges("#zI6@EqE=}zZ");
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 22;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(22);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance4 = null;
      try {
        binarySparseInstance4 = new BinarySparseInstance((-1948));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize("All");
      discretize0.m_UseEqualFrequency = true;
      discretize0.setOutputFormat();
      discretize0.getRevision();
      discretize0.useBinNumbersTipText();
      discretize0.getUseEqualFrequency();
      int int0 = 104;
      AllFilter allFilter0 = new AllFilter();
      String string0 = "n{F+J'E1MP( f";
      String[] stringArray0 = new String[5];
      int[] intArray0 = new int[7];
      intArray0[0] = 104;
      intArray0[1] = 3545;
      intArray0[2] = 104;
      intArray0[3] = 104;
      intArray0[4] = 104;
      intArray0[5] = (-2183);
      intArray0[6] = 104;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(104, intArray0, (-1070));
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue((-401));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize("IZ&ABP");
      discretize0.listOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.getBinRangesString((-234));
      discretize0.getInvertSelection();
      discretize0.listOptions();
      discretize0.m_MakeBinary = true;
      discretize0.getAttributeIndices();
      discretize0.getCutPoints((-234));
      discretize0.getCapabilities();
      discretize0.invertSelectionTipText();
      discretize0.m_MakeBinary = true;
      System.setCurrentTimeMillis((-234));
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      discretize0.isFirstBatchDone();
      int int0 = 4072;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(4072);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("6|", arrayList0, 1);
      discretize0.m_MakeBinary = true;
      Instances instances1 = new Instances(instances0, 4, (-2135350969));
      Instances.mergeInstances(instances1, instances0);
      Comparator<Attribute> comparator0 = (Comparator<Attribute>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      instances1.listIterator();
      instances1.toString();
      discretize0.getAttributeIndices();
      Instances.mergeInstances(instances0, instances1);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.514714844546625
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(22);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance4 = null;
      try {
        binarySparseInstance4 = new BinarySparseInstance((-1948));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.m_FindNumBins = true;
      Range range0 = new Range();
      discretize0.getOptions();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("-^jacQ%H$S");
      discretize0.setBins((-2454));
      discretize0.setDesiredWeightOfInstancesPerInterval(5.3);
      discretize0.getBins();
      discretize0.attributeIndicesTipText();
      String string0 = "Y";
      Instances instances0 = null;
      try {
        instances0 = new Instances("Y", (ArrayList<Attribute>) null, (-2454));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[10][1];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-1932735280));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1932735280
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)");
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      double[][] doubleArray0 = new double[0][1];
      discretize0.getAttributeIndices();
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        range0.isInRange((-473));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for range
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7132389994392954
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Discretize discretize0 = new Discretize("8QOd*![M");
      discretize0.m_UseEqualFrequency = false;
      assertFalse(discretize0.getMakeBinary());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      discretize0.m_MakeBinary = true;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.invertSelectionTipText();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)74;
      byteArray1[1] = (byte)74;
      byteArray1[2] = (byte)18;
      byteArray1[3] = (byte)18;
      discretize0.getInvertSelection();
      byteArray1[4] = (byte)18;
      byteArray1[5] = (byte)18;
      byteArray1[6] = (byte)74;
      byteArray1[7] = (byte)18;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      discretize0.getRevision();
      discretize0.getInvertSelection();
      int int0 = discretize0.m_ClassIndex;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      discretize0.getMakeBinary();
      discretize0.getOptions();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6151104036339126
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      discretize0.getOptions();
      Comparator<Attribute> comparator0 = (Comparator<Attribute>) mock(Comparator.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      double[][] doubleArray0 = new double[16][1];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-1012);
      doubleArray1[1] = (double) (-1012);
      doubleArray1[2] = 5.3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 5.3;
      doubleArray2[1] = (double) (-1012);
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 5.3;
      doubleArray3[1] = (double) (-1012);
      doubleArray3[2] = 5.3;
      doubleArray3[3] = 5.3;
      doubleArray3[4] = 5.3;
      doubleArray3[5] = 5.3;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (double) (-1012);
      doubleArray4[1] = 5.3;
      doubleArray4[2] = 5.3;
      doubleArray4[3] = 5.3;
      doubleArray4[4] = (double) (-1012);
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (double) (-1012);
      doubleArray4[7] = 2268.3039833111;
      doubleArray4[8] = (double) (-1012);
      doubleArray0[3] = doubleArray4;
      doubleArray0[4] = doubleArray0[1];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(2167);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2167
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#e>[mIF@HQ");
      doubleArray0[3] = (double) 30;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "F^gCWGgQ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "F^gCWGgQ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "F^gCWGgQ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F^gCWGgQ");
      Discretize discretize0 = new Discretize("#e>[mIF@HQ");
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[0];
      StringWriter stringWriter0 = new StringWriter(454);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer.wrap((CharSequence) stringBuffer0);
      char[] charArray0 = null;
      String string0 = "Bx $D5]@18'V1ED*Si";
      Discretize discretize0 = new Discretize(".p_");
      discretize0.findNumBinsTipText();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Bx $D5]@18'V1ED*Si", "-G~s");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -G~s
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#e>[mIF@HQ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#e>[mIF@HQ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#e>[mIF@HQ");
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1212686947470734
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      MultiFilter multiFilter0 = new MultiFilter();
      Filter[] filterArray0 = new Filter[1];
      multiFilter0.setFilters(filterArray0);
      Filter filter0 = Filter.makeCopy(discretize0);
      multiFilter0.setFilters(filterArray0);
      String[] stringArray0 = discretize0.getOptions();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      String[] stringArray1 = new String[5];
      Filter.runFilter(filter0, (String[]) null);
      Filter filter1 = Filter.makeCopy(allFilter1);
      Filter.runFilter(filter1, stringArray0);
      Filter.runFilter(allFilter1, stringArray1);
      Filter.makeCopy(allFilter0);
      Filter.makeCopy(allFilter1);
      Filter.runFilter(filter0, stringArray0);
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      System.setCurrentTimeMillis((-2504L));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Properties properties0 = new Properties();
      Object object2 = new Object();
      Object object3 = new Object();
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ").}X>@p";
      stringArray0[1] = "";
      discretize0.setUseBinNumbers(true);
      stringArray0[2] = "l";
      stringArray0[0] = "";
      stringArray0[4] = "l";
      stringArray0[5] = "";
      stringArray0[7] = "Number of bins.";
      Discretize.main(stringArray0);
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.getUseEqualFrequency();
      discretize0.getBins();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      double[][] doubleArray0 = new double[0][1];
      discretize0.m_CutPoints = doubleArray0;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.setProperty("C|VMju~'OI%A\"7b5)", "Dz");
      discretize0.useBinNumbersTipText();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      Properties properties2 = new Properties();
      Object object0 = new Object();
      Object object1 = new Object();
      Properties properties3 = new Properties();
      assertTrue(properties3.equals((Object)properties2));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Properties properties0 = new Properties();
      Object object4 = new Object();
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+?$");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+?$");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hg<");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+?$");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-1639");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      discretize0.m_IgnoreClass = false;
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      String[] stringArray0 = new String[0];
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J)Y~i");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J)Y~i");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q#}'{5zx<.V~ o{q]#");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J)Y~i");
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize("C\"MP");
      discretize0.setIgnoreClass(true);
      String string0 = ":cMP";
      discretize0.setAttributeIndices(":cMP");
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getUseBinNumbers();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Discretize discretize0 = new Discretize("Copy with class value set to \"third\": ");
      discretize0.globalInfo();
      System.setCurrentTimeMillis(553L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(32);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance4 = null;
      try {
        binarySparseInstance4 = new BinarySparseInstance((-1948));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.551643266517218
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize("C\"MP");
      boolean boolean0 = discretize0.m_UseEqualFrequency;
      discretize0.setIgnoreClass(true);
      discretize0.getOptions();
      discretize0.getMakeBinary();
      discretize0.useBinNumbersTipText();
      StringReader stringReader0 = new StringReader("=^gV");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[=^gV], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 32;
      Discretize discretize0 = new Discretize();
      discretize0.m_ClassIndex = 32;
      StringWriter stringWriter0 = new StringWriter(32);
      int int1 = 454;
      StringWriter stringWriter1 = new StringWriter(454);
      discretize0.getCapabilities();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      stringWriter0.getBuffer();
      CharBuffer.wrap((CharSequence) stringBuffer0);
      char[] charArray0 = null;
      String string0 = "Bx $D5]@18'V1ED*Si";
      String string1 = "-G~s";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Bx $D5]@18'V1ED*Si", "-G~s");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -G~s
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 40;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(40);
      BinarySparseInstance binarySparseInstance1 = null;
      try {
        binarySparseInstance1 = new BinarySparseInstance((-1948));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      int int0 = (-1932735253);
      arrayList1.ensureCapacity((-1932735253));
      int int1 = 77;
      Instances instances0 = new Instances("2d1nqq+[C~FL3Nu", arrayList0, 77);
      Instances instances1 = new Instances(instances0, (-1932735253));
      arrayList1.clone();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList1.sort(comparator0);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Object object2 = new Object();
      Properties properties0 = new Properties();
      Object object3 = new Object();
      Object object4 = new Object();
      discretize0.getCutPoints(1909);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Object object2 = new Object();
      Properties properties0 = new Properties();
      Object object3 = new Object();
      discretize0.getCutPoints(1909);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J)Y~i");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J)Y~i");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q#}'{5zx<.V~ o{q]#");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Discretize discretize0 = new Discretize("J)Y~i");
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-49));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      boolean boolean0 = true;
      discretize0.m_UseBinNumbers = true;
      String[] stringArray0 = new String[5];
      stringArray0[3] = "";
      stringArray0[1] = "Copy with class value set to first value:";
      stringArray0[2] = "B";
      Filter.runFilter(discretize0, stringArray0);
      stringArray0[3] = "_F`C[1X";
      stringArray0[4] = "+?$";
      discretize0.getOptions();
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter.makeCopy(allFilter0);
      allFilter0.toString();
      String[] stringArray0 = new String[10];
      stringArray0[1] = "weka.filters.AllFilter";
      stringArray0[2] = "inf";
      stringArray0[4] = "weka.filters.AllFilter";
      stringArray0[5] = "weka.filters.AllFilter";
      stringArray0[6] = "weka.filters.AllFilter";
      stringArray0[5] = "weka.filters.AllFilter";
      Filter.runFilter(allFilter0, stringArray0);
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.runFilter(multiFilter0, (String[]) null);
      MultiFilter multiFilter1 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      Filter filter1 = Filter.makeCopy(filter0);
      Filter.runFilter(filter1, stringArray0);
      AllFilter allFilter1 = new AllFilter();
      Filter.runFilter(filter1, (String[]) null);
      Discretize discretize0 = new Discretize(">'I([=Rt;zR8>n");
      boolean boolean0 = discretize0.m_MakeBinary;
      boolean boolean1 = discretize0.getFindNumBins();
      assertTrue(boolean1 == boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(32);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.forLanguageTag("\nOK to continue [y/n]? > ");
      locale0.getUnicodeLocaleAttributes();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance4 = null;
      try {
        binarySparseInstance4 = new BinarySparseInstance((-1948));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Object object2 = new Object();
      Properties properties0 = new Properties();
      Object object3 = new Object();
      Object object4 = new Object();
      Discretize discretize0 = new Discretize();
      Object object5 = new Object();
      String string0 = discretize0.binsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Number of bins.", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      discretize0.listOptions();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties2);
      // Undeclared exception!
      try { 
        properties2.setProperty((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      discretize0.listOptions();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      String string0 = null;
      Object object0 = new Object();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      Properties properties2 = new Properties();
      // Undeclared exception!
      try { 
        properties0.loadFromXML((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(32);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      String string0 = "'B2of2'";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.forLanguageTag("\nOK to continue [y/n]? > ");
      locale0.getUnicodeLocaleAttributes();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance4 = null;
      try {
        binarySparseInstance4 = new BinarySparseInstance((-1948));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Object object2 = new Object();
      Filter.runFilter(discretize0, (String[]) null);
      Object object3 = new Object();
      int int0 = discretize0.getBins();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, int0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      Properties properties0 = new Properties();
      discretize0.getRevision();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = null;
      try {
        protectedProperties3 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-1840700267);
      Discretize discretize0 = new Discretize();
      discretize0.setBins((-1840700267));
      Locale.getISOLanguages();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1840700267));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "+?$";
      SystemInUtil.addInputLine("+?$");
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2883.69957758;
      doubleArray1[1] = 371.6;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 2883.69957758;
      String[] stringArray0 = new String[0];
      Filter.runFilter(discretize0, stringArray0);
      doubleArray2[1] = 371.6;
      doubleArray2[2] = 371.6;
      doubleArray2[8] = 371.6;
      discretize0.setFindNumBins(true);
      SystemInUtil.addInputLine("PG| |tJcJ");
      doubleArray2[4] = 2883.69957758;
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-3730));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Object object0 = new Object();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("6|", arrayList0, 1856);
      Instances instances1 = new Instances(instances0, 1856);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      Instances.mergeInstances(instances1, instances1);
      boolean boolean0 = discretize0.getMakeBinary();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter[] filterArray0 = new Filter[8];
      filterArray0[0] = (Filter) multiFilter0;
      filterArray0[1] = (Filter) multiFilter0;
      filterArray0[2] = (Filter) multiFilter0;
      filterArray0[4] = (Filter) multiFilter0;
      filterArray0[5] = (Filter) multiFilter0;
      filterArray0[6] = (Filter) multiFilter0;
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "6x";
      stringArray0[1] = "Set attribute selection mode. If false,only selected (numeric) attributes in the range will be discretized; if true,only non-selected attributes will be discretized.";
      stringArray0[2] = "6x";
      stringArray0[3] = ";qnFRR";
      stringArray0[4] = "Set attribute selection mode. If false,only selected (numeric) attributes in the range will be discretized; if true,only non-selected attributes will be discretized.";
      stringArray0[5] = "Names differ: ";
      stringArray0[6] = "6x";
      discretize0.setOptions(stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[9];
      intArray0[0] = 69;
      intArray0[1] = 706;
      intArray0[2] = 347;
      intArray0[3] = 30000;
      intArray0[4] = 66;
      intArray0[5] = 1247;
      intArray0[6] = 1544;
      intArray0[7] = (-584);
      intArray0[8] = 7;
      discretize0.setAttributeIndicesArray(intArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"`Q;";
      stringArray0[1] = "7f+gPP0fDda_";
      stringArray0[2] = "Set attribute selection mode. If false,only selected (numeric) attributes in the range will be discretized; if true,only non-selected attributes will be discretized.";
      stringArray0[3] = "7f+gPP0fDda_";
      stringArray0[4] = "{CZOh,DXD$[ W:";
      stringArray0[5] = "7f+gPP0fDda_";
      stringArray0[6] = ")Ij\"";
      stringArray0[7] = "Different number of attributes: ";
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("6|", arrayList0, 1);
      Instances instances1 = new Instances(instances0, 4, (-2135350969));
      Instances.mergeInstances(instances1, instances0);
      Comparator<Attribute> comparator0 = (Comparator<Attribute>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      instances1.listIterator();
      instances1.toString();
      Instances.mergeInstances(instances0, instances1);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[0];
      discretize0.setOptions(stringArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("s$3", "I^'1zj7[C2(#bI).");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // I^'1zj7[C2(#bI).
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
