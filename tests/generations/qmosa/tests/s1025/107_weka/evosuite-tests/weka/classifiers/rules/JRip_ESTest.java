/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 13:59:11 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.BestFirst;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.SearchAlgorithm;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.trees.J48;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.MinkowskiDistance;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.unsupervised.attribute.Remove;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3300185960211162
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("-K <number of neigbors>", (List<String>) null, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Stacking stacking0 = new Stacking();
      stacking0.setNumExecutionSlots(1);
      AbstractClassifier.makeCopy(stacking0);
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      attribute0.addStringValue("");
      DecisionTable decisionTable4 = new DecisionTable();
      decisionTable2.resetOptions();
      decisionTable1.setCrossVal(59);
      DecisionTable.main((String[]) null);
      DecisionTable decisionTable5 = new DecisionTable();
      decisionTable5.setCrossVal(5);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 69);
      SparseInstance sparseInstance0 = new SparseInstance(3);
      decisionTable0.resetOptions();
      DecisionTable.main((String[]) null);
      instances0.add((Instance) sparseInstance0);
      jRip_NominalAntd0.splitData(instances0, 0, 2);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("-K <number of neigbors>", (List<String>) null, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.measureMissingArcs();
      bayesNet0.measureEntropyScore();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      DecisionTable decisionTable2 = new DecisionTable();
      decisionTable0.setCrossVal(4);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Environment environment0 = new Environment();
      M5Rules m5Rules0 = new M5Rules();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: Cannot handle string attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("XOB3^!4tsL");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.toString(attribute0);
      assertFalse(jRip0.getDebug());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "date";
      stringArray0[1] = "date";
      stringArray0[2] = "string";
      stringArray0[3] = "relational";
      jRip0.setDebug(true);
      stringArray0[4] = "@attribute";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "@end";
      stringArray1[1] = "real";
      stringArray1[2] = "@end";
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      boolean boolean0 = jRip0.getDebug();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Remove remove0 = new Remove();
      decisionTable0.setCrossVal(4);
      DecisionTable decisionTable2 = new DecisionTable();
      decisionTable2.setCrossVal(4);
      decisionTable2.setCrossVal(1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("dic", arrayList1, 2);
      arrayList1.clone();
      Attribute attribute0 = new Attribute("@relation", (List<String>) null, 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(82);
      instances0.add((Instance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 5, (-327.3798852149246));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5125057079495545
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule2 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule3 = jRip0.new RipperRule();
      jRip_RipperRule1.size();
      JRip.RipperRule jRip_RipperRule4 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule5 = jRip1.new RipperRule();
      jRip_RipperRule4.hasAntds();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jRip_RipperRule3.setConsequent((-99.0));
      JRip.RipperRule jRip_RipperRule6 = jRip1.new RipperRule();
      jRip_RipperRule3.prune(instances0, false);
      jRip_RipperRule4.getRevision();
      JRip.RipperRule jRip_RipperRule7 = jRip1.new RipperRule();
      jRip_RipperRule7.prune(instances0, false);
      jRip_RipperRule3.prune(instances0, true);
      JRip.RipperRule jRip_RipperRule8 = jRip0.new RipperRule();
      jRip_RipperRule3.grow(instances0);
      J48 j48_0 = new J48();
      assertTrue(j48_0.getSubtreeRaising());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3973985366367256
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule2 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule3 = jRip0.new RipperRule();
      jRip_RipperRule1.size();
      JRip.RipperRule jRip_RipperRule4 = jRip1.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule3.setConsequent((-99.0));
      JRip.RipperRule jRip_RipperRule5 = jRip1.new RipperRule();
      jRip_RipperRule3.prune(instances0, false);
      jRip_RipperRule2.getRevision();
      JRip.RipperRule jRip_RipperRule6 = jRip1.new RipperRule();
      Utils.SMALL = (-1.0E100);
      jRip_RipperRule6.prune(instances0, false);
      jRip_RipperRule3.prune(instances0, true);
      JRip.RipperRule jRip_RipperRule7 = jRip1.new RipperRule();
      jRip_RipperRule7.prune(instances0, true);
      J48 j48_0 = new J48();
      jRip_RipperRule3.grow(instances0);
      assertEquals((-99.0), jRip_RipperRule3.getConsequent(), 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 200003;
      jRip0.setOptimizations(200003);
      jRip0.setMinNo(0.95);
      jRip0.minNoTipText();
      jRip0.toString();
      jRip0.usePruningTipText();
      Attribute attribute0 = new Attribute("", (List<String>) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.accuRate = (double) 2;
      jRip_NumericAntd0.cover = (double) 0;
      jRip_NumericAntd0.att = attribute0;
      jRip_NumericAntd0.value = (-2851.689997);
      jRip0.setMinNo(2);
      jRip_NumericAntd0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "few");
      jRip0.setFolds((-8));
      jRip0.getFolds();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-8));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(64.0);
      System.setCurrentTimeMillis(0L);
      Instances instances0 = null;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(64.0);
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      Instances instances0 = null;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      BallNode ballNode0 = new BallNode(52);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BayesNet bayesNet0 = new BayesNet();
      BallNode ballNode1 = new BallNode(0, 38, 0);
      ballNode0.m_Left = ballNode1;
      double[] doubleArray0 = new double[7];
      ballNode1.m_NodeNumber = (-56);
      ballNode1.m_NodeNumber = (-1);
      ballNode0.m_SplitAttrib = (-1);
      doubleArray0[0] = (double) 52;
      ballNode1.m_End = (-1);
      System.setCurrentTimeMillis((-418L));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("-K <number of neigbors>", (List<String>) null, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Stacking stacking0 = new Stacking();
      AbstractClassifier.makeCopy(stacking0);
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      attribute0.addStringValue("");
      DecisionTable decisionTable4 = new DecisionTable();
      decisionTable2.resetOptions();
      decisionTable1.setCrossVal(59);
      DecisionTable.main((String[]) null);
      DecisionTable decisionTable5 = new DecisionTable();
      decisionTable5.setCrossVal(5);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 69);
      SparseInstance sparseInstance0 = new SparseInstance(3);
      decisionTable0.resetOptions();
      DecisionTable.main((String[]) null);
      instances0.add((Instance) sparseInstance0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 0, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5735143214270813
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      double double0 = 5.7;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5.7;
      doubleArray0[1] = (-1345.35557);
      doubleArray0[2] = 5.7;
      doubleArray0[3] = (-603.795840683);
      doubleArray0[4] = 5.7;
      doubleArray0[5] = 5.7;
      doubleArray0[6] = 5.7;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5.7, doubleArray0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.getBIFFile();
      BayesNet bayesNet1 = new BayesNet();
      Locale locale0 = Locale.ROOT;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      Locale locale2 = Locale.KOREA;
      locale2.getDisplayCountry(locale1);
      Locale locale3 = Locale.forLanguageTag("W~S*'@p0JL}#Y");
      locale1.getExtension('c');
      Locale locale4 = Locale.GERMAN;
      locale4.getDisplayVariant();
      locale3.getDisplayCountry();
      locale4.getUnicodeLocaleKeys();
      locale0.clone();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      locale4.getDisplayCountry(locale0);
      locale0.getDisplayVariant();
      Locale locale5 = Locale.UK;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList1);
      Locale locale6 = Locale.KOREA;
      locale2.getDisplayName(locale5);
      Locale locale7 = Locale.UK;
      locale5.getUnicodeLocaleKeys();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass(Double.NaN, (Instances) null, Double.NaN, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      jRip0.setMinNo(0.0);
      BallNode ballNode0 = new BallNode(10);
      BayesNet bayesNet0 = new BayesNet();
      BallNode ballNode1 = new BallNode(0);
      jRip0.getMinNo();
      BayesNet bayesNet1 = new BayesNet();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2128679513998635
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1103.0, doubleArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      instances0.add((Instance) binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.hasAntds();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule3 = jRip0.new RipperRule();
      arrayList0.remove((Object) jRip_RipperRule2);
      jRip_RipperRule1.size();
      JRip.RipperRule jRip_RipperRule4 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule5 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule6 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule3.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Locale.forLanguageTag("dJ+/LX)");
      Locale locale1 = Locale.FRANCE;
      JRip jRip1 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      binarySparseInstance0.toStringNoWeight(111);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1.0), doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      DenseInstance denseInstance1 = new DenseInstance(5);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(5);
      binarySparseInstance4.toStringMaxDecimalDigits(111);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, linkedList0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      Instances instances1 = new Instances(instances0, 1);
      MockRandom mockRandom0 = new MockRandom();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.measureEntropyScore();
      AbstractClassifier.makeCopy(jRip0);
      try { 
        jRip0.rulesetForOneClass(5, instances0, 5, 64.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Remove remove0 = decisionTable0.m_delTransform;
      decisionTable0.setCrossVal(4);
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      decisionTable3.setCrossVal(4);
      decisionTable3.setCrossVal(1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("BF*A", arrayList1, 2);
      decisionTable3.m_numAttributes = 4;
      arrayList1.clone();
      Attribute attribute0 = new Attribute("@relation", (List<String>) null, 2);
      Locale locale0 = Locale.FRENCH;
      attribute0.equalsMsg(jRip0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 845.667130361, 5);
      J48 j48_0 = new J48();
      assertEquals("Whether counts at leaves are smoothed based on Laplace.", j48_0.useLaplaceTipText());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.689067872995674
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Remove remove0 = decisionTable0.m_delTransform;
      decisionTable0.setCrossVal(4);
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      decisionTable3.setCrossVal(4);
      decisionTable3.setCrossVal(1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("hFp|", arrayList0, 2);
      decisionTable3.m_numAttributes = 4;
      Attribute attribute0 = new Attribute("@relation", (List<String>) null, 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 5, 3);
      jRip_NominalAntd0.splitData(instances0, 1, (-2609.343));
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      String string0 = jRip0.minNoTipText();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "$YhKM%f6aV++ -k";
      jRip0.getTechnicalInformation();
      assertEquals(1L, jRip0.getSeed());
      
      stringArray0[1] = "";
      stringArray0[2] = "x.$X/1y+gUw6Z4c41";
      stringArray0[3] = "NsgL";
      stringArray0[4] = "";
      JRip.main((String[]) null);
      jRip0.setSeed(0L);
      jRip0.debugTipText();
      jRip0.getMinNo();
      jRip0.getSeed();
      System.setCurrentTimeMillis((-3150L));
      String string0 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7576378583071737
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      AbstractClassifier.makeCopies(jRip0, 1);
      Attribute attribute0 = new Attribute("No more tokens present", (-1472));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getSplitPoint();
      Attribute attribute1 = null;
      try {
        attribute1 = new Attribute("g3&:!&GmlE),/8Z>0t", "No more tokens present", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'N'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      binarySparseInstance0.toStringNoWeight(5);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1.0), doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      DenseInstance denseInstance1 = new DenseInstance(5);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(5);
      Locale.forLanguageTag("{}");
      Attribute attribute0 = new Attribute("dB[e??;z", 5);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 3;
      intArray0[2] = 5;
      intArray0[3] = 5;
      intArray0[4] = 5;
      intArray0[5] = 0;
      intArray0[6] = 4;
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((-2449.1), intArray0, 109);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.covers(denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      denseInstance0.toStringNoWeight();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1.0), doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      DenseInstance denseInstance1 = new DenseInstance(5);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(5);
      Environment environment0 = new Environment();
      M5Rules m5Rules0 = new M5Rules();
      AbstractClassifier.makeCopy(m5Rules0);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((-2826.91016842), doubleArray0);
      Attribute attribute0 = new Attribute("5K.w?-", 991);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance4);
      jRip0.getSeed();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers(denseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 991
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getCover();
      JRip jRip1 = new JRip();
      jRip1.debugTipText();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-1.0E-6);
      doubleArray0[2] = (-1.0E-6);
      doubleArray0[3] = (-1.0E-6);
      doubleArray0[4] = (-1.0E-6);
      DenseInstance denseInstance0 = new DenseInstance((-1.0E-6), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(5, doubleArray0, (int[]) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.755739480438498
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", (String) null, 1);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip1.usePruningTipText();
      assertEquals("Whether pruning is performed.", string0);
      
      String string1 = jRip0.getRevision();
      assertEquals("8118", string1);
      
      String string2 = jRip1.toString();
      assertEquals("JRIP: No model built yet.", string2);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[1] = (-496.17787);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 2295.636307343787;
      doubleArray0[5] = (double) 1;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 2;
      DenseInstance denseInstance0 = new DenseInstance(2, doubleArray0);
      JRip jRip2 = new JRip();
      JRip.NominalAntd jRip_NominalAntd1 = jRip2.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd1.covers(denseInstance0);
      assertFalse(boolean0);
      
      String string3 = jRip1.foldsTipText();
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string3);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      String string4 = jRip_NumericAntd0.toString();
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertTrue(jRip1.getCheckErrorRate());
      assertTrue(jRip1.getUsePruning());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(3, jRip1.getFolds());
      assertEquals(" <= NaN", string4);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip1.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Remove remove0 = decisionTable0.m_delTransform;
      decisionTable0.setCrossVal(4);
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      decisionTable3.setCrossVal(4);
      BestFirst bestFirst0 = (BestFirst)decisionTable1.m_search;
      decisionTable3.setSearch(bestFirst0);
      decisionTable3.setCrossVal(1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("hFp|", arrayList0, 2);
      decisionTable3.m_numAttributes = 4;
      Attribute attribute0 = new Attribute("OJ?Q5+V$cisAz\"", (List<String>) null, 500);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 4, 4);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      String string0 = jRip0.seedTipText();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("The seed used for randomizing the data.", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7490906203903507
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      DenseInstance denseInstance1 = new DenseInstance(5);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(5);
      Environment environment0 = new Environment();
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((-2826.91016842), doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 5;
      intArray0[1] = 5;
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance(5, intArray0, (-2662));
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("5K.w?-", protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(binarySparseInstance4);
      jRip0.setOptions((String[]) null);
      System.setCurrentTimeMillis(1936L);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", (List<String>) null, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAccu();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      decisionTable2.setCrossVal(1);
      Instances instances0 = decisionTable2.m_dtInstances;
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, (-712.048790586), Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, Attribute> biFunction1 = (BiFunction<Object, Object, Attribute>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Properties properties1 = new Properties();
      properties1.clone();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties1.forEach(biConsumer0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 2408;
      Instances instances0 = new Instances(";SO#|O98", arrayList0, 2408);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.clone();
      Environment environment0 = new Environment();
      M5Rules m5Rules0 = new M5Rules();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.getBIFFile();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.measureDivergence();
      BayesNet bayesNet2 = new BayesNet();
      bayesNet1.measureMissingArcs();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      bayesNet1.getBIFFile();
      Attribute attribute0 = new Attribute("", 957);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      System.setCurrentTimeMillis(1790L);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(" <= NaN", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("2,6;D`%pol&n:");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAttrValue();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1850.112, doubleArray0);
      binarySparseInstance0.dataset();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 5, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.toXMLBIF03();
      bayesNet0.getBIFFile();
      BayesNet bayesNet1 = new BayesNet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      bayesNet1.measureDivergence();
      BayesNet bayesNet2 = new BayesNet();
      bayesNet1.measureMissingArcs();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      bayesNet1.getBIFFile();
      bayesNet0.getBIFFile();
      System.setCurrentTimeMillis(1790L);
      jRip0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      BallNode ballNode0 = new BallNode(10);
      BayesNet bayesNet0 = new BayesNet();
      BallNode ballNode1 = new BallNode(38);
      ballNode0.m_Left = ballNode1;
      double[] doubleArray0 = new double[7];
      ballNode0.m_SplitAttrib = (-1);
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) (-1);
      ballNode1.m_End = (-1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cached Sufficient Statistics for Efficient Machine Learning with Large Datasets");
      jRip0.getDebug();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      J48 j48_0 = new J48();
      assertEquals("Whether reduced-error pruning is used instead of C.4.5 pruning.", j48_0.reducedErrorPruningTipText());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+~9pf[OI7");
      jRip0.getRevision();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip0.setCheckErrorRate(false);
      jRip0.setCheckErrorRate(false);
      jRip0.getCheckErrorRate();
      jRip0.getUsePruning();
      Attribute attribute0 = new Attribute("8118", (String) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 99.073240853089;
      doubleArray0[1] = (double) 0;
      BallTree ballTree0 = new BallTree();
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance((Instances) null);
      ballTree0.setDistanceFunction(minkowskiDistance0);
      ballTree0.setMeasurePerformance(false);
      DenseInstance denseInstance0 = new DenseInstance(2, doubleArray0);
      ballTree0.listOptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "numeric";
      ballTree0.setOptions(stringArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      try { 
        ballTree0.nearestNeighbour(denseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      binarySparseInstance0.toStringNoWeight(5);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2065.4640299154203, doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      DenseInstance denseInstance1 = new DenseInstance(5);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(3217);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(5);
      Locale.forLanguageTag("G_");
      Attribute attribute0 = new Attribute("Before optimization(", 5);
      binarySparseInstance6.isMissing(6);
      int[] intArray0 = new int[2];
      intArray0[0] = 109;
      doubleArray0[4] = (double) 5;
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((-952.232714511), intArray0, 1);
      J48 j48_0 = new J48();
      JRip jRip0 = new JRip();
      int int0 = jRip0.getOptimizations();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, int0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties5.replaceAll(biFunction0);
      BiFunction<Object, Object, JRip.RipperRule> biFunction1 = (BiFunction<Object, Object, JRip.RipperRule>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      protectedProperties0.compute(protectedProperties5, biFunction1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties2);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("5M$=Rn5.@,P2Rn", protectedProperties7);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Object object0 = jRip_NominalAntd0.copy();
      protectedProperties7.remove((Object) "5M$=Rn5.@,P2Rn", object0);
      properties0.clone();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties8);
      properties1.putAll(protectedProperties9);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("@end");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @end not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      BallNode ballNode0 = new BallNode(10);
      BayesNet bayesNet0 = new BayesNet();
      BallNode ballNode1 = new BallNode(38);
      ballNode0.m_Left = ballNode1;
      double[] doubleArray0 = new double[7];
      ballNode0.m_NodeNumber = 0;
      ballNode0.m_SplitAttrib = (-1);
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      ballNode1.m_SplitAttrib = (-1);
      doubleArray0[2] = (-759.1451717);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cached Sufficient Statistics for Efficient Machine Learning with Large Datasets");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties1);
      Attribute attribute0 = new Attribute("", protectedProperties3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      
      System.setCurrentTimeMillis(0L);
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.getBIFFile();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet0.measureDivergence();
      BayesNet bayesNet2 = new BayesNet();
      SearchAlgorithm searchAlgorithm0 = bayesNet1.getSearchAlgorithm();
      bayesNet1.setSearchAlgorithm(searchAlgorithm0);
      SearchAlgorithm searchAlgorithm1 = new SearchAlgorithm();
      bayesNet1.setSearchAlgorithm(searchAlgorithm1);
      bayesNet2.measureMissingArcs();
      BayesNet bayesNet3 = new BayesNet();
      bayesNet1.getBIFFile();
      bayesNet3.measureReversedArcs();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "}`:7waTmx";
      stringArray0[2] = "eL_A,^`Vr)ri;5";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "eL_A,^`Vr)ri;5";
      stringArray0[6] = "";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 31;
      BallNode ballNode0 = new BallNode(31);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("", 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.iterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Instances instances0 = new Instances("@attribute", arrayList0, 0);
      Instances instances1 = new Instances(instances0, 31);
      int int1 = 445;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      jRip_NominalAntd0.toString();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      int[] intArray0 = new int[8];
      intArray0[0] = 5;
      decisionTable0.setUseIBk(true);
      intArray0[1] = 4;
      intArray0[2] = 2;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 2;
      decisionTable0.m_classPriorCounts = doubleArray0;
      intArray0[3] = 1;
      intArray0[4] = 2;
      System.setCurrentTimeMillis(0L);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("-D", list0, 61);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.forLanguageTag(",");
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale locale2 = Locale.ITALY;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      locale1.getUnicodeLocaleKeys();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("[F]Yc.!:x&", linkedList5);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList2, 67);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-N";
      stringArray0[1] = "[F]Yc.!:x&";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      EvoSuiteFile evoSuiteFile0 = null;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-F";
      stringArray0[1] = "<2JE4^4~";
      stringArray0[2] = "n(";
      stringArray0[3] = "z";
      stringArray0[4] = "`=PKYyb'3{Gm";
      stringArray0[5] = "";
      stringArray0[6] = "The minimum total weight of the instances in a rule.";
      stringArray0[7] = "\tSet whether turn on the\n\tdebug mode (Default: false)";
      stringArray0[8] = "-F";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"<2JE4^4~\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      int[] intArray0 = new int[8];
      intArray0[0] = 5;
      decisionTable0.setUseIBk(true);
      intArray0[1] = 4;
      intArray0[2] = 2;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 2;
      decisionTable0.m_classPriorCounts = doubleArray0;
      intArray0[3] = 1;
      SparseInstance sparseInstance0 = new SparseInstance(1, decisionTable0.m_classPriorCounts);
      JRip jRip0 = new JRip();
      int int0 = jRip0.getFolds();
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, int0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.getBIFFile();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.measureDivergence();
      BayesNet bayesNet2 = new BayesNet();
      bayesNet1.measureMissingArcs();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      bayesNet1.m_Distributions = null;
      stringArray0[4] = "";
      stringArray0[5] = "";
      AbstractClassifier.runClassifier(bayesNet0, stringArray0);
      BayesNet bayesNet3 = new BayesNet();
      bayesNet1.getBIFFile();
      Environment environment0 = new Environment();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("lZ^kxW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lZ^kxW not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, Attribute> biFunction1 = (BiFunction<Object, Object, Attribute>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Properties properties0 = new Properties();
      properties0.clone();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("nominal");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nominal not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.getBIFFile();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.measureDivergence();
      BayesNet bayesNet2 = new BayesNet();
      bayesNet1.measureMissingArcs();
      bayesNet1.measureEntropyScore();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      bayesNet5.measureEntropyScore();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Points:    ";
      stringArray0[1] = "rX'/E=#Dm/";
      stringArray0[2] = "N7JBMn";
      stringArray0[3] = "W";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      Utils.SMALL = Double.NEGATIVE_INFINITY;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", 9!;xw~s1}9w");
      String[] stringArray1 = new String[4];
      stringArray1[0] = "\tSets the method to use. Valid values are 0 (1-against-all),\n\t1 (random codes), 2 (exhaustive code), and 3 (1-against-1). (default 0)\n";
      stringArray1[1] = "";
      stringArray1[2] = "\tSets the method to use. Valid values are 0 (1-against-all),\n\t1 (random codes), 2 (exhaustive code), and 3 (1-against-1). (default 0)\n";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tSets the method to use. Valid values are 0 (1-against-all),\n\t1 (random codes), 2 (exhaustive code), and 3 (1-against-1). (default 0)\n");
      stringArray1[3] = ",";
      jRip0.setOptions(stringArray1);
      try { 
        AbstractClassifier.forName("\tSets the method to use. Valid values are 0 (1-against-all),\n\t1 (random codes), 2 (exhaustive code), and 3 (1-against-1). (default 0)\n", stringArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: \tSets the method to use. Valid values are 0 (1-against-all),
         // \t1 (random codes), 2 (exhaustive code), and 3 (1-against-1). (default 0)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1.0), doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      DenseInstance denseInstance1 = new DenseInstance(5);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(5);
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      System.setCurrentTimeMillis(2L);
      jRip0.listOptions();
      System.setCurrentTimeMillis(2737L);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale.forLanguageTag("W");
      Locale locale1 = Locale.FRANCE;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale2 = Locale.ITALY;
      locale1.hasExtensions();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      arrayList1.add(locale0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale locale3 = Locale.ROOT;
      Locale locale4 = Locale.forLanguageTag("O");
      Locale locale5 = Locale.KOREA;
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
      
      Locale locale6 = Locale.forLanguageTag("sBGUX12x");
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale6.clone();
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) list0, locale_FilteringMode1);
      locale5.getDisplayCountry(locale6);
      locale4.getDisplayVariant();
      Locale.forLanguageTag("sBGUX12x");
      Locale locale7 = Locale.KOREA;
      locale3.getDisplayName(locale2);
      Locale locale8 = Locale.UK;
      locale3.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      locale3.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers((Instance) null);
      assertTrue(jRip0.getUsePruning());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertTrue(boolean0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      BallNode ballNode0 = new BallNode(10);
      BayesNet bayesNet0 = new BayesNet();
      BallNode ballNode1 = new BallNode(11);
      ballNode0.m_Left = ballNode1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[6];
      ballNode0.m_SplitAttrib = (-1);
      doubleArray0[0] = (double) 10;
      ballNode1.m_SplitAttrib = (-1);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 11;
      jRip0.setCheckErrorRate(false);
      Attribute attribute0 = new Attribute("'$waO;c", (-711));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      System.setCurrentTimeMillis(90L);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 0.0, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.397480077752752
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule2 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule3 = jRip0.new RipperRule();
      jRip_RipperRule3.getConsequent();
      JRip.RipperRule jRip_RipperRule4 = jRip1.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule3.setConsequent((-99.0));
      JRip.RipperRule jRip_RipperRule5 = jRip1.new RipperRule();
      jRip_RipperRule3.prune(instances0, false);
      jRip_RipperRule2.getRevision();
      JRip.RipperRule jRip_RipperRule6 = jRip1.new RipperRule();
      Utils.SMALL = (-1.0E100);
      jRip_RipperRule6.prune(instances0, false);
      jRip_RipperRule3.prune(instances0, true);
      JRip.RipperRule jRip_RipperRule7 = jRip1.new RipperRule();
      jRip_RipperRule7.prune(instances0, true);
      jRip_RipperRule3.prune(instances0, false);
      assertEquals((-99.0), jRip_RipperRule3.getConsequent(), 0.01);
      
      J48 j48_0 = new J48();
      jRip_RipperRule7.prune(instances0, true);
      assertEquals(2, jRip1.getOptimizations());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale locale0 = Locale.GERMAN;
      Locale.forLanguageTag("W");
      Locale locale1 = Locale.FRANCE;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale2 = Locale.ITALY;
      jRip0.getCheckErrorRate();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      arrayList1.add(locale0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale locale3 = Locale.ROOT;
      Locale locale4 = Locale.forLanguageTag("O");
      Locale locale5 = Locale.KOREA;
      locale5.getDisplayCountry(locale4);
      Locale locale6 = Locale.forLanguageTag("sBGUX12x");
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale6.clone();
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) list0, locale_FilteringMode1);
      locale5.getDisplayCountry(locale6);
      locale4.getDisplayVariant();
      Locale locale7 = Locale.forLanguageTag("sBGUX12x");
      Locale locale8 = Locale.KOREA;
      locale8.getDisplayName(locale5);
      Locale locale9 = Locale.UK;
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      locale7.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers((Instance) null);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.convertInstance((Instance) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // convertInstance: Principal components not built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setUsePruning(false);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\nPruning the rule ...");
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(0.5, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(20.8660359395113, doubleArray0, (int[]) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute((String) null, 26);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getMaxInfoGain();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = jRip_NominalAntd0.getAccuRate();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Remove remove0 = decisionTable0.m_delTransform;
      decisionTable0.setCrossVal(4);
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      decisionTable3.setCrossVal(4);
      decisionTable3.setCrossVal(1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("hFp|", arrayList0, 2);
      decisionTable3.m_numAttributes = 4;
      Attribute attribute0 = new Attribute("lOJ?Q5+V$cisAz\"", (List<String>) null, 500);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 4, 4);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      String string0 = jRip0.seedTipText();
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals("The seed used for randomizing the data.", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "", 2136);
      attribute0.enumerateValues();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.copy();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip1.usePruningTipText();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/repCache/packageListWithVersion.txt");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "5}wdC!UQf6");
      BayesNet bayesNet0 = new BayesNet();
      jRip0.minNoTipText();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      try { 
        jRip1.classifyInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      BiFunction<Object, Object, Attribute> biFunction0 = (BiFunction<Object, Object, Attribute>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      protectedProperties0.compute(protectedProperties3, biFunction0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd((Attribute) null);
      Object object0 = jRip_NumericAntd0.copy();
      BiFunction<Object, Object, Locale.LanguageRange> biFunction1 = (BiFunction<Object, Object, Locale.LanguageRange>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties0.merge(protectedProperties1, object0, biFunction1);
      Properties properties1 = new Properties();
      // Undeclared exception!
      try { 
        jRip1.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setMinNo((-1.0));
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale locale0 = Locale.KOREAN;
      Locale.forLanguageTag(",");
      Locale locale1 = Locale.FRANCE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Utils.SMALL = 1245.8288465;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      HashMap<ClassOrder, String> hashMap0 = new HashMap<ClassOrder, String>();
      Collection<String> collection0 = hashMap0.values();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, collection0);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0);
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale locale2 = Locale.ITALY;
      Attribute attribute0 = new Attribute("d7uU5xRMBzFM.8", list1);
      Locale.getISOCountries();
      jRip0.globalInfo();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties3);
      Attribute attribute0 = new Attribute("-D", protectedProperties7);
      BayesNet bayesNet0 = new BayesNet();
      AbstractClassifier.makeCopy(bayesNet0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Object object0 = jRip_NumericAntd0.copy();
      attribute0.equals(object0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      try { 
        jRip0.rulesetForOneClass(3, (Instances) null, 0.0, 4191.739);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      jRip0.toString();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1.0), doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      DenseInstance denseInstance1 = new DenseInstance(5);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(5);
      binarySparseInstance4.toStringMaxDecimalDigits(111);
      Environment environment0 = new Environment();
      binarySparseInstance4.toString(0);
      M5Rules m5Rules0 = new M5Rules();
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance(5, doubleArray0);
      Attribute attribute0 = new Attribute("5K.w?-", (-77));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      J48 j48_0 = new J48();
      assertEquals("Whether reduced-error pruning is used instead of C.4.5 pruning.", j48_0.reducedErrorPruningTipText());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JRip jRip0 = new JRip();
      BallNode ballNode0 = new BallNode(31);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("", linkedList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.iterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Instances instances0 = new Instances("integer", arrayList0, 1);
      Instances instances1 = new Instances(instances0, 2);
      Instances instances2 = new Instances(instances1, 0, (-2809));
      jRip0.setFolds(31);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      jRip_NominalAntd0.splitData(instances1, 4, (-1.0));
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1.0), doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      DenseInstance denseInstance1 = new DenseInstance(5);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(5);
      Environment environment0 = new Environment();
      M5Rules m5Rules0 = new M5Rules();
      AbstractClassifier.makeCopy(m5Rules0);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance(5, doubleArray0);
      denseInstance0.replaceMissingValues(doubleArray0);
      Attribute attribute0 = new Attribute("5K.w?-", (-77));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(denseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale locale0 = Locale.GERMAN;
      Locale.forLanguageTag("W");
      Locale locale1 = Locale.FRANCE;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale2 = Locale.ITALY;
      locale1.hasExtensions();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale locale3 = Locale.ROOT;
      Locale locale4 = Locale.forLanguageTag("O");
      Locale locale5 = Locale.KOREA;
      Locale locale6 = Locale.CANADA_FRENCH;
      Locale locale7 = Locale.forLanguageTag("sBGUX12x");
      locale7.clone();
      locale5.getDisplayCountry(locale7);
      Locale locale8 = Locale.forLanguageTag("sBGUX12x");
      Locale locale9 = Locale.KOREA;
      locale9.getDisplayName(locale5);
      locale9.clone();
      locale4.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      locale8.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers((Instance) null);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(boolean0);
      
      String string0 = jRip0.getRevision();
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("\nGrowing and pruning Revision ...", 844);
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      String string1 = jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip1.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(3, jRip1.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
      assertTrue(jRip1.getCheckErrorRate());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.3982329129404385
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule2 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule3 = jRip0.new RipperRule();
      jRip_RipperRule1.size();
      JRip.RipperRule jRip_RipperRule4 = jRip1.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule3.setConsequent((-99.0));
      JRip.RipperRule jRip_RipperRule5 = jRip1.new RipperRule();
      jRip_RipperRule3.prune(instances0, false);
      jRip_RipperRule2.getRevision();
      JRip.RipperRule jRip_RipperRule6 = jRip1.new RipperRule();
      Utils.SMALL = (-1.0E100);
      jRip_RipperRule6.prune(instances0, false);
      jRip_RipperRule3.prune(instances0, true);
      JRip.RipperRule jRip_RipperRule7 = jRip1.new RipperRule();
      jRip_RipperRule7.prune(instances0, true);
      jRip_RipperRule3.prune(instances0, false);
      J48 j48_0 = new J48();
      jRip_RipperRule3.grow(instances0);
      assertEquals((-99.0), jRip_RipperRule3.getConsequent(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(3135.6);
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.ITALIAN;
      Locale locale2 = Locale.FRANCE;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale3 = Locale.ITALY;
      locale2.hasExtensions();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale locale4 = Locale.ROOT;
      Locale locale5 = Locale.forLanguageTag("O");
      Locale locale6 = Locale.KOREA;
      locale6.getDisplayCountry(locale5);
      Locale locale7 = Locale.forLanguageTag("fsBGUX12x");
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale5.getExtension('c');
      locale7.getDisplayVariant();
      locale7.getUnicodeLocaleKeys();
      locale7.clone();
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0, locale_FilteringMode1);
      locale6.getDisplayCountry(locale7);
      locale5.getDisplayVariant();
      Locale locale8 = Locale.UK;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList1);
      Locale locale9 = Locale.KOREA;
      locale9.getDisplayName(locale6);
      Locale locale10 = Locale.UK;
      locale5.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      locale8.getUnicodeLocaleAttributes();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string0 = jRip0.toString();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("JRIP: No model built yet.", string0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-3206.10437);
      Attribute attribute0 = new Attribute("XOB3^!4tsL");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.toString(attribute0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "date";
      stringArray0[1] = "date";
      stringArray0[2] = "string";
      stringArray0[3] = "relational";
      stringArray0[4] = "date";
      String[] stringArray1 = new String[3];
      Attribute.typeToString(2);
      stringArray1[0] = "";
      stringArray1[1] = "real";
      stringArray1[2] = "@end";
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      assertEquals(0.0, attributeSelectedClassifier0.measureNumAttributesSelected(), 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      BiFunction<Object, Object, InputStream> biFunction0 = (BiFunction<Object, Object, InputStream>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties1.replaceAll(biFunction0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties();
      Object object0 = new Object();
      protectedProperties4.remove((Object) properties0, (Object) protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties7);
      J48 j48_0 = new J48();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-2125791893));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JRip jRip0 = new JRip();
      BallNode ballNode0 = new BallNode(10);
      BayesNet bayesNet0 = new BayesNet();
      BallNode ballNode1 = new BallNode(38);
      ballNode0.m_Left = ballNode1;
      ballNode0.setRadius(753.3161338221352);
      ballNode0.m_SplitAttrib = (-1);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 0;
      ballNode1.m_SplitAttrib = 10;
      intArray0[4] = (-1);
      intArray0[5] = 0;
      intArray0[7] = 0;
      intArray0[8] = 38;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, 38);
      Attribute attribute0 = new Attribute("", 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertFalse(boolean0);
      
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("8118", string0);
  }
}
