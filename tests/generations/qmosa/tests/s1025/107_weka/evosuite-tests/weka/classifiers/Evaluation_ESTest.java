/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 13:00:40 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.SequenceInputStream;
import java.net.URI;
import java.net.URL;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.InfoGainAttributeEval;
import weka.attributeSelection.ReliefFAttributeEval;
import weka.attributeSelection.SymmetricalUncertAttributeEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.ConditionalDensityEstimator;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.bayes.net.search.SearchAlgorithm;
import weka.classifiers.evaluation.output.prediction.HTML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.OneR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomForest;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.EM;
import weka.clusterers.FilteredClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.Loader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.KDTree;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.estimators.DiscreteEstimator;
import weka.estimators.PoissonEstimator;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.575636726393011
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      adaBoostM1_0.globalInfo();
      adaBoostM1_0.getCapabilities();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiScheme multiScheme0 = new MultiScheme();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities1 = symmetricalUncertAttributeEval0.getCapabilities();
      capabilities1.disableAllClassDependencies();
      multiScheme0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+BTBY XY");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      Instances instances0 = testInstances0.generate("seedTipText");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.truePositiveRate(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(75);
      evaluation0.trueNegativeRate((-1825));
      evaluation1.weightedTrueNegativeRate();
      evaluation1.weightedTrueNegativeRate();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation1.toClassDetailsString("costMatrixTipText");
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8285893485660543
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.shouldAllThrowIOExceptions();
      capabilities0.disableAllClasses();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities1 = adaBoostM1_0.getCapabilities();
      capabilities1.supportsMaybe(capabilities0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities1.enableDependency(capabilities_Capability0);
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities2 = multiScheme0.getCapabilities();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities3 = symmetricalUncertAttributeEval0.getCapabilities();
      capabilities3.supportsMaybe(capabilities1);
      capabilities3.disableAllClassDependencies();
      Capabilities capabilities4 = multiScheme0.getCapabilities();
      capabilities2.enableAllAttributeDependencies();
      TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      capabilities4.enableAllAttributeDependencies();
      evaluation0.toMatrixString("@relation");
      evaluation0.falsePositiveRate((-1517));
      Evaluation.makeOptionString(adaBoostM1_0, true);
      evaluation0.SFPriorEntropy();
      evaluation0.weightedRecall();
      evaluation0.unclassified();
      evaluation0.addNumericTrainClass(589.4083418, 1.2000000029802322);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1705004602610343
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate(",{z]h'>KI^g0bkJ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Object object0 = new Object();
      LMT lMT0 = new LMT();
      evaluation0.weightedTruePositiveRate();
      evaluation0.weightedFMeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedMatthewsCorrelation();
      evaluation1.relativeAbsoluteError();
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = '5';
      charArray0[2] = 'w';
      charArray0[3] = 'o';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-227), charArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2975837595956614
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities1 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",{z]h'>yKI^g0bkJ");
      Capabilities.forInstances(instances0, false);
      LinearRegression linearRegression1 = new LinearRegression();
      Capabilities capabilities2 = linearRegression1.getCapabilities();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities3 = linearRegression0.getCapabilities();
      capabilities0.supportsMaybe(capabilities2);
      capabilities1.disableAllClassDependencies();
      MultiScheme multiScheme0 = new MultiScheme();
      multiScheme0.getCapabilities();
      capabilities1.enableAllAttributeDependencies();
      Logistic logistic0 = new Logistic();
      Capabilities capabilities4 = capabilities3.getAttributeCapabilities();
      TestInstances.forCapabilities(capabilities0);
      multiScheme0.setSeed((-2));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      Instances instances1 = testInstances0.generate(" ");
      MultiScheme multiScheme1 = new MultiScheme();
      linearRegression0.turnChecksOn();
      multiScheme0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances1);
      capabilities4.enableAllAttributeDependencies();
      evaluation0.toMatrixString("");
      evaluation0.falsePositiveRate(195225786);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.numFalsePositives(0);
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, "weka/core/Capabilities.props");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0160111384877113
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      TestInstances.forCapabilities(capabilities0);
      textDirectoryLoader1.setCharSet("@data");
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      Object object0 = new Object();
      evaluation0.m_NumClasses = 24;
      textDirectoryLoader1.setDebug(true);
      Stacking stacking1 = new Stacking();
      stacking1.setSeed((-2));
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities1 = precomputedKernelMatrixKernel0.getCapabilities();
      capabilities0.getOtherCapabilities();
      capabilities1.enableAllAttributeDependencies();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalDate(2289);
      TestInstances.forCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability0);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.weightedPrecision();
      // Undeclared exception!
      try { 
        evaluation0.weightedTruePositiveRate();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9278436656033775
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",{z]h'>KI^g0bkJ");
      Stacking stacking0 = new Stacking();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.6171865960077003
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",{z]h'>KI^g0bkJ");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      C45Loader c45Loader0 = new C45Loader();
      String string0 = "1vJ{3)f9+o\\utTO24g";
      Attribute attribute0 = new Attribute(string0);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      LinearRegression linearRegression1 = new LinearRegression();
      LinearRegression linearRegression2 = new LinearRegression();
      linearRegression2.setMinimal(false);
      evaluation0.KBMeanInformation();
      Evaluation.getGlobalInfo(linearRegression2);
      HTML hTML0 = new HTML();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      evaluation0.equals(attributeSelectedClassifier0);
      double double0 = evaluation0.m_SumErr;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.precision(0);
      evaluation0.numFalsePositives((-1086997899));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 0;
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XRFFLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.6064962331645947
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",{z]h'>KI^g0bkJ");
      Stacking stacking0 = new Stacking();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", list0, 40);
      Attribute attribute1 = new Attribute("@data");
      stacking0.setSeed((-82));
      stacking0.setDebug(false);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      LinearRegression linearRegression1 = new LinearRegression();
      linearRegression1.setMinimal(true);
      evaluation0.KBMeanInformation();
      Evaluation.getGlobalInfo(linearRegression0);
      HTML hTML0 = new HTML();
      evaluation0.equals((Object) null);
      double double0 = evaluation0.m_SumErr;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.precision(1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8552507637962807
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      linearRegression0.getRevision();
      Instances instances0 = testInstances0.generate(",{z]h'>KI^g0bkJ");
      Stacking stacking0 = new Stacking();
      stacking0.setDebug(false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.isMissing((-1452));
      binarySparseInstance0.setMissing((-1));
      SparseInstance sparseInstance1 = new SparseInstance(4216);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance1);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      C45Loader c45Loader0 = new C45Loader();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation0.updatePriors(instance0);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      AllFilter allFilter0 = new AllFilter();
      KDTree kDTree0 = new KDTree();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-4119.804240491), doubleArray0);
      try { 
        kDTree0.nearestNeighbour(binarySparseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1496395537278947
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("N.5zo2");
      Stacking stacking0 = new Stacking();
      stacking0.setDebug(true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      sparseInstance0.setMissing(99);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      Instances instances2 = testInstances0.generate();
      instances2.add((Instance) binarySparseInstance0);
      testInstances0.setHandler(linearRegression0);
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.weightedAreaUnderPRC();
      // Undeclared exception!
      try { 
        evaluation1.weightedTruePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.354644863768051
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      textDirectoryLoader0.setCharSet("@data");
      MockRandom mockRandom0 = new MockRandom();
      evaluation1.SFMeanEntropyGain();
      evaluation0.trueNegativeRate(460);
      Stacking stacking0 = new Stacking();
      Object object0 = new Object();
      stacking0.setSeed(2272);
      double double0 = Evaluation.MIN_SF_PROB;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("equals ? ");
      Attribute attribute0 = new Attribute("{-B;]&PVkt~]{ ", linkedList0, 493);
      Attribute attribute1 = new Attribute(" node.max: ");
      stacking0.setSeed(0);
      stacking0.setDebug(true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.setMinimal(true);
      evaluation0.KBMeanInformation();
      Evaluation.getGlobalInfo(linearRegression0);
      HTML hTML0 = new HTML();
      evaluation1.equals(evaluation0);
      double double1 = evaluation1.m_SumErr;
      evaluation1.weightedAreaUnderPRC();
      evaluation1.precision((-1983724722));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6672237606379137
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities1 = adaBoostM1_0.getCapabilities();
      capabilities0.supportsMaybe(capabilities1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities2 = multiScheme0.getCapabilities();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities3 = symmetricalUncertAttributeEval0.getCapabilities();
      capabilities3.supportsMaybe(capabilities1);
      multiScheme0.getCapabilities();
      capabilities2.enableAllAttributeDependencies();
      Logistic logistic0 = new Logistic();
      Capabilities capabilities4 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities4);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1Ou_>(PSc[3");
      Instances instances0 = testInstances0.generate((String) null);
      MultiScheme multiScheme1 = new MultiScheme();
      testInstances0.setNumString((-197112209));
      multiScheme1.getRevision();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        evaluation0.recall(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.30045221348672
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 46;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(46);
      evaluation0.SFMeanPriorEntropy();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".bsi";
      TextDirectoryLoader.main(stringArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 46;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6266674460895512
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities1 = adaBoostM1_0.getCapabilities();
      capabilities0.supportsMaybe(capabilities1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities2 = multiScheme0.getCapabilities();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities3 = symmetricalUncertAttributeEval0.getCapabilities();
      capabilities3.supportsMaybe(capabilities1);
      multiScheme0.getCapabilities();
      capabilities2.enableAllAttributeDependencies();
      Logistic logistic0 = new Logistic();
      Capabilities capabilities4 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities4);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1Ou_>(PSc[3");
      testInstances0.setNoClass(false);
      Instances instances0 = testInstances0.generate((String) null);
      MultiScheme multiScheme1 = new MultiScheme();
      multiScheme1.getRevision();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double[] doubleArray0 = null;
      double double0 = 1057.42;
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) randomSubSpace0, instance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RandomSubSpace", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.listOptions();
      SMOreg sMOreg1 = new SMOreg();
      Capabilities capabilities0 = sMOreg1.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("unprunedTipText");
      MockRandom mockRandom0 = new MockRandom(360L);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.crossValidateModel((Classifier) sMOreg0, instances0, 0, (Random) mockRandom0, (Object[]) sMOreg1.TAGS_FILTER);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6955066560616436
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",{z]h'>KI^g0bkJ");
      Stacking stacking0 = new Stacking();
      stacking0.setDebug(true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities0.disable(capabilities_Capability0);
      TestInstances.forCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedPrecision();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation2.m_ConfLevel;
      evaluation0.weightedFMeasure();
      evaluation0.priorEntropy();
      double double1 = evaluation2.m_TotalSizeOfRegions;
      SparseInstance sparseInstance0 = new SparseInstance(0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      try { 
        evaluation1.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7923911516277187
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      TestInstances.forCapabilities(capabilities0);
      textDirectoryLoader0.setCharSet(".arff");
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      Object object0 = new Object();
      textDirectoryLoader0.setDebug(true);
      stacking0.setSeed(82);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalDate((-1));
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      capabilities1.disable(capabilities_Capability0);
      TestInstances.forCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      capabilities1.enable(capabilities_Capability1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedPrecision();
      evaluation0.weightedTruePositiveRate();
      evaluation1.rootRelativeSquaredError();
      evaluation1.weightedFMeasure();
      evaluation1.priorEntropy();
      evaluation1.weightedTrueNegativeRate();
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.337827080898473
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      textDirectoryLoader0.setCharSet(".arff");
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      textDirectoryLoader0.setDebug(true);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.toString();
      precomputedKernelMatrixKernel0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances2 = new TestInstances();
      testInstances0.setNumRelationalDate((-1));
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      capabilities1.disable(capabilities_Capability0);
      TestInstances.forCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      capabilities1.enable(capabilities_Capability1);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      double double0 = evaluation0.m_ConfLevel;
      evaluation0.weightedFMeasure();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.numFalsePositives(82);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7896656513804965
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.getTechnicalInformation();
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomialUpdateable0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte)104;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.listOptions();
      Capabilities capabilities1 = sMOreg0.getCapabilities();
      capabilities1.enableAllAttributeDependencies();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances1.generate("Information Processing Letters");
      testInstances0.generate(".bsi");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      RandomForest randomForest0 = new RandomForest();
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2962664515510975
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(460);
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costMatrix0.toString();
      Stacking stacking1 = new Stacking();
      stacking0.setSeed(82);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel1.getCapabilities();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      AllFilter allFilter0 = new AllFilter();
      Object object0 = new Object();
      Object object1 = new Object();
      LMT lMT0 = new LMT();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      evaluation1.SFPriorEntropy();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1, (-226.96366));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3395889682839914
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities1 = adaBoostM1_0.getCapabilities();
      capabilities0.supportsMaybe(capabilities1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities2 = multiScheme0.getCapabilities();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities3 = symmetricalUncertAttributeEval0.getCapabilities();
      capabilities3.supportsMaybe(capabilities1);
      multiScheme0.getCapabilities();
      capabilities2.enableAllAttributeDependencies();
      Logistic logistic0 = new Logistic();
      Capabilities capabilities4 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities4);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1Ou_>(PSc[3");
      Instances instances0 = testInstances0.generate((String) null);
      MultiScheme multiScheme1 = new MultiScheme();
      multiScheme1.getRevision();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 1, 1057.42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation0.m_PriorEstimator = univariateKernelEstimator0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (-0.9189385332046727);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator((ConditionalDensityEstimator) null, binarySparseInstance1, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3208119525559794
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(461);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) textDirectoryLoader2);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      predicate4.negate();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Predicate.isEqual((Object) integer0);
      predicate0.or(predicate1);
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      instances0.removeIf(predicate3);
      Object object0 = new Object();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(456);
      evaluation0.truePositiveRate(7376);
      evaluation0.errorRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalseNegatives(116);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.740685847981469
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      TestInstances.forCapabilities(capabilities0);
      textDirectoryLoader0.setCharSet(".arff");
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      Object object0 = new Object();
      textDirectoryLoader0.setDebug(true);
      stacking0.setSeed(92);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalDate((-1));
      TestInstances.forCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      capabilities1.enable(capabilities_Capability0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedPrecision();
      evaluation0.weightedTruePositiveRate();
      evaluation1.rootRelativeSquaredError();
      evaluation1.weightedFMeasure();
      evaluation1.weightedTrueNegativeRate();
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      charArray0[1] = ';';
      charArray0[2] = 'b';
      charArray0[3] = '{';
      charArray0[4] = '`';
      charArray0[5] = 'f';
      charArray0[6] = 'A';
      charArray0[7] = 'v';
      charArray0[8] = 'D';
      evaluation0.num2ShortID(900, charArray0, 900);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7141759586685477
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costMatrix0.toString();
      Stacking stacking1 = new Stacking();
      stacking0.setSeed(82);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel1.getCapabilities();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Object object0 = new Object();
      Object object1 = new Object();
      LMT lMT0 = new LMT();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      evaluation1.SFPriorEntropy();
      evaluation0.trueNegativeRate(1);
      Stacking stacking2 = new Stacking();
      evaluation1.weightedFMeasure();
      evaluation0.truePositiveRate(2);
      evaluation1.weightedTrueNegativeRate();
      evaluation0.coverageOfTestCasesByPredictedRegions();
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9809787598716668
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      textDirectoryLoader0.setCharSet("{-B;]&PVkt~]{ ");
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      textDirectoryLoader0.getRevision();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance1);
      binarySparseInstance0.isMissing((-2));
      instances0.add((Instance) binarySparseInstance0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setCharSet("@data");
      textDirectoryLoader0.getOptions();
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, sparseInstance1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.39203048768178
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",{z]h'>KI^g0bkJ");
      Stacking stacking0 = new Stacking();
      stacking0.setDebug(false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      sparseInstance0.setMissing(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      univariateKernelEstimator0.toString();
      univariateKernelEstimator0.logDensity(0.25);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives(0);
      evaluation0.pctCorrect();
      evaluation0.KBRelativeInformation();
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9784724942075065
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      evaluation0.setPriors(instances0);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      Evaluation evaluation1 = new Evaluation(instances0);
      Version.MINOR = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(101);
      try { 
        evaluation1.evaluateModelOnce((-591.48751043225), (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -591
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3149063636538285
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",{z]h'>KI^g0bkJ");
      CostMatrix costMatrix0 = new CostMatrix(4);
      costMatrix0.toString();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation.getGlobalInfo(linearRegression0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      ConverterUtils.DataSource.read((Loader) databaseLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 1.0E-75;
      doubleArray0[3] = (double) 0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 2.0);
      evaluation0.areaUnderPRC(0);
      C45Loader c45Loader0 = new C45Loader();
      File file0 = c45Loader0.retrieveFile();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDirectory(file0);
      evaluation0.weightedAreaUnderPRC();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.1358414926568923
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",{z]h'>KI^g0bkJ");
      Stacking stacking0 = new Stacking();
      stacking0.setDebug(true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      sparseInstance0.setMissing(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedTruePositiveRate();
      Object object0 = new Object();
      evaluation0.weightedFMeasure();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.numTrueNegatives(2);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-4265));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4265
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RandomTree randomTree0 = new RandomTree();
      Capabilities capabilities0 = randomTree0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrClass;
      DenseInstance denseInstance0 = new DenseInstance(1803);
      denseInstance0.getRevision();
      instances0.add((Instance) denseInstance0);
      // Undeclared exception!
      try { 
        evaluation0.precision((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3307102464186924
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      OneR oneR0 = new OneR();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix1 = costSensitiveClassifier1.getCostMatrix();
      costMatrix0.toString();
      CostMatrix costMatrix2 = new CostMatrix(costMatrix1);
      Evaluation.getGlobalInfo(costSensitiveClassifier0);
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Integer integer0 = new Integer(2);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (int)integer0;
      doubleArray0[1] = 1.0E-75;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      evaluation0.areaUnderPRC(1758);
      C45Loader c45Loader0 = new C45Loader();
      File file0 = c45Loader0.retrieveFile();
      textDirectoryLoader0.setDirectory(file0);
      evaluation0.weightedAreaUnderPRC();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 90);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9659490612587365
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities1 = adaBoostM1_0.getCapabilities();
      capabilities1.supportsMaybe(capabilities0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities2 = multiScheme0.getCapabilities();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities3 = symmetricalUncertAttributeEval0.getCapabilities();
      capabilities3.supportsMaybe(capabilities1);
      capabilities3.disableAllClassDependencies();
      Capabilities capabilities4 = multiScheme0.getCapabilities();
      capabilities2.enableAllAttributeDependencies();
      TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      capabilities4.enableAllAttributeDependencies();
      String string0 = evaluation0.toMatrixString("@relation");
      assertEquals("@relation\n a b c d   <-- classified as\n 0 0 0 0 | a = class1\n 0 0 0 0 | b = class2\n 0 0 0 0 | c = class3\n 0 0 0 0 | d = class4\n", string0);
      
      double double0 = evaluation0.falsePositiveRate(2);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3368883075390159
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      capabilities0.capabilities();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Stacking stacking0 = new Stacking();
      stacking0.setDebug(false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(115);
      sparseInstance0.setMissing((-1561));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4159101073670017
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances2 = testInstances1.generate();
      Evaluation evaluation1 = new Evaluation(instances2);
      evaluation0.setPriors(instances1);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Object object0 = new Object();
      evaluation1.weightedFalseNegativeRate();
      evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      stacking0.setSeed((-2));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Instances instances3 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader2);
      Evaluation evaluation2 = new Evaluation(instances3);
      double double0 = evaluation0.m_SumAbsErr;
      evaluation1.weightedFalsePositiveRate();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-11));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7389896102893403
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-555.1111), (-1));
      double double0 = (-1.7976931348623157E308);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      DecisionStump decisionStump1 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1669706969186437
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities1 = adaBoostM1_0.getCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      capabilities1.supportsMaybe(capabilities0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiScheme multiScheme0 = new MultiScheme();
      multiScheme0.getCapabilities();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities2 = symmetricalUncertAttributeEval0.getCapabilities();
      capabilities2.disableAllClassDependencies();
      multiScheme0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+BTBY XY");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      Instances instances0 = testInstances0.generate("seedTipText");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.truePositiveRate(1);
      evaluation0.getRevision();
      evaluation0.trueNegativeRate(426);
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2163407016842127
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      capabilities0.enableAllClasses();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Object object0 = new Object();
      evaluation0.weightedFalseNegativeRate();
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      Version.MINOR = 19;
      evaluation0.weightedTruePositiveRate();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      evaluation0.weightedFMeasure();
      double double0 = evaluation0.unweightedMicroFmeasure();
      evaluation0.areaUnderROC(19);
      evaluation0.weightedPrecision();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.numFalseNegatives((-2));
      assertNotEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4187591973137939
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      textDirectoryLoader1.setRetrieval(467);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      textDirectoryLoader1.getDataSet();
      PoissonEstimator poissonEstimator0 = new PoissonEstimator();
      Capabilities capabilities0 = poissonEstimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6544465311255245
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalseNegatives(460);
      assertEquals(0.0, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costMatrix0.toString();
      costMatrix0.getRevision();
      costMatrix0.toString();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      costSensitiveClassifier0.setMinimizeExpectedCost(false);
      evaluation0.recall(1532);
      System.setCurrentTimeMillis(0L);
      double double1 = evaluation0.correct();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.getRevision();
      double double2 = evaluation0.numTrueNegatives(2);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.truePositiveRate(460);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.404435641117847
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate(",{z]h'>KI^g0bkJ");
      RandomSubSpace.main(testInstances0.DEFAULT_WORDS);
      Stacking stacking0 = new Stacking();
      stacking0.setDebug(true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.weightedAreaUnderPRC();
      double double1 = evaluation0.weightedAreaUnderPRC();
      evaluation0.confusionMatrix();
      double double2 = evaluation0.weightedTruePositiveRate();
      double double3 = evaluation0.weightedFMeasure();
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double4, double1, 0.01);
      
      evaluation0.relativeAbsoluteError();
      evaluation0.confusionMatrix();
      evaluation0.getHeader();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.977151240765394
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      textDirectoryLoader0.setCharSet("{-B;]&PVkt~]{ ");
      evaluation0.setPriors(instances0);
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      textDirectoryLoader0.setCharSet("@data");
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double0 = evaluation0.m_SumPriorAbsErr;
      evaluation0.trueNegativeRate(460);
      Stacking stacking0 = new Stacking();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(494, true, true);
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) simpleLogistic0, instances1, objectArray0);
      double double1 = evaluation0.weightedFalseNegativeRate();
      double double2 = evaluation1.weightedAreaUnderROC();
      double double3 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = evaluation1.weightedFMeasure();
      assertEquals(double4, double1, 0.01);
      
      double double5 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double5, double2, 0.01);
      
      evaluation1.getHeader();
      boolean boolean0 = evaluation1.getDiscardPredictions();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.788415958988295
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      TestInstances.forCapabilities(capabilities0);
      textDirectoryLoader0.setCharSet(".arff");
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      Object object0 = new Object();
      textDirectoryLoader0.setDebug(true);
      stacking0.setSeed(82);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalDate((-1));
      TestInstances.forCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      capabilities1.enable(capabilities_Capability0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.weightedTruePositiveRate();
      evaluation1.rootRelativeSquaredError();
      evaluation1.weightedFMeasure();
      double double2 = evaluation1.weightedTrueNegativeRate();
      assertEquals(double2, double1, 0.01);
      
      evaluation1.incorrect();
      assertEquals(Double.NaN, evaluation1.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation1.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.844107677780749
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctIncorrect();
      evaluation0.m_MarginCounts = null;
      double double1 = evaluation0.numFalseNegatives(460);
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      Version.VERSION = ".arff";
      evaluation0.m_MissingClass = (double) 460;
      evaluation0.toSummaryString(true);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costMatrix0.toString();
      costMatrix0.toString();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, 1.0E-75);
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double2, double0, 0.01);
      
      evaluation0.totalCost();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      evaluation0.rootMeanPriorSquaredError();
      double double3 = evaluation0.correct();
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",{z]h'>KI^g0bkJ");
      Stacking stacking0 = new Stacking();
      stacking0.setDebug(true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      sparseInstance0.setMissing(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      C45Loader c45Loader0 = new C45Loader();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(c45Loader0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",{z]h'>KI^g0bkJ");
      Stacking stacking0 = new Stacking();
      stacking0.setDebug(false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      sparseInstance0.setMissing(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      C45Loader c45Loader0 = new C45Loader();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation0.updatePriors(instance0);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.1217392960403467
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(46);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      evaluation0.toClassDetailsString("@relation");
      int int0 = (-1060150160);
      binarySparseInstance0.isMissing((-1060150160));
      instances0.add((Instance) sparseInstance0);
      textDirectoryLoader0.setCharSet(">U3wYV'w");
      evaluation0.toSummaryString("@data", false);
      String[] stringArray0 = new String[4];
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1060150160);
      Object object0 = new Object();
      MockRandom mockRandom1 = new MockRandom((-1L));
      Object object1 = new Object();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomial0, instances0, 99, (Random) mockRandom1, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.4615413108550928
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities1 = adaBoostM1_0.getCapabilities();
      capabilities1.supportsMaybe(capabilities0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiScheme multiScheme0 = new MultiScheme();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      symmetricalUncertAttributeEval0.getCapabilities();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities2 = m5Rules0.getCapabilities();
      capabilities2.disableAllClassDependencies();
      multiScheme0.getCapabilities();
      capabilities1.enableAllAttributeDependencies();
      TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Stacking stacking0 = new Stacking();
      stacking0.setDebug(false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation0.numFalseNegatives(0);
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8913741235084864
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      RandomTree randomTree0 = new RandomTree();
      Capabilities capabilities0 = randomTree0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = costSensitiveClassifier0.getCostMatrix();
      costMatrix1.toString();
      costMatrix0.toString();
      CostMatrix costMatrix2 = new CostMatrix(costMatrix0);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalseNegatives(460);
      assertEquals(0.0, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costMatrix0.toString();
      costMatrix0.getRevision();
      costMatrix0.toString();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      capabilities0.disableAllClassDependencies();
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities1 = multiScheme0.getCapabilities();
      capabilities1.enableAllAttributeDependencies();
      Logistic logistic0 = new Logistic();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getNumRuns");
      MultiScheme multiScheme1 = new MultiScheme();
      multiScheme0.getRevision();
      double double1 = evaluation0.falsePositiveRate(895);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.36388475198958
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances2 = testInstances1.generate();
      Evaluation evaluation1 = new Evaluation(instances2);
      evaluation0.setPriors(instances1);
      Stacking stacking0 = new Stacking();
      stacking0.setDebug(false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(1712);
      sparseInstance0.setMissing(1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances1.add((Instance) sparseInstance0);
      Evaluation evaluation2 = new Evaluation(instances1);
      C45Loader c45Loader0 = new C45Loader();
      ConverterUtils.DataSource converterUtils_DataSource0 = null;
      try {
        converterUtils_DataSource0 = new ConverterUtils.DataSource("@data");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class weka.core.converters.ConverterUtils
         //
         verifyException("weka.core.converters.ConverterUtils$DataSource", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.603151889651786
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte)1;
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      MultiScheme multiScheme0 = new MultiScheme();
      multiScheme0.getCapabilities();
      Capabilities capabilities1 = multiScheme0.getCapabilities();
      capabilities1.enableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = textDirectoryLoader0.getDataSet();
      testInstances0.getRevision();
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation0.pctIncorrect();
      MockRandom mockRandom0 = new MockRandom();
      double double1 = evaluation0.falseNegativeRate((byte)69);
      assertEquals(0.0, double1, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      double double2 = evaluation1.trueNegativeRate((byte)1);
      assertNotEquals(double2, double0, 0.01);
      
      Stacking stacking0 = new Stacking();
      double double3 = evaluation0.weightedFMeasure();
      double double4 = evaluation1.weightedMatthewsCorrelation();
      assertEquals(double4, double3, 0.01);
      
      evaluation2.useNoPriors();
      assertEquals(Double.NaN, evaluation2.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6588611674269642
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",{z]h'>KI^g0bkJ");
      Stacking stacking0 = new Stacking();
      stacking0.setDebug(true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Capabilities capabilities1 = simpleKMeans0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      capabilities1.disableDependency(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      capabilities1.disable(capabilities_Capability1);
      TestInstances.forCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      capabilities1.enable(capabilities_Capability2);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.trueNegativeRate(2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, (-1461032992));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.379726945891248
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      textDirectoryLoader0.setCharSet("rcJbn.DD^V");
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("k@XjD;=>}H]OW");
      RandomSubSpace.main(testInstances0.DEFAULT_WORDS);
      Stacking stacking0 = new Stacking();
      Stacking stacking1 = new Stacking();
      stacking1.setDebug(true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.weightedAreaUnderPRC();
      Evaluation evaluation2 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation2.confusionMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.9574227041064718
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      adaBoostM1_0.globalInfo();
      adaBoostM1_0.getCapabilities();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiScheme multiScheme0 = new MultiScheme();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities1 = symmetricalUncertAttributeEval0.getCapabilities();
      capabilities1.disableAllClassDependencies();
      multiScheme0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+BTBY XY");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      Instances instances0 = testInstances0.generate("seedTipText");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.truePositiveRate(1);
      Double double0 = new Double(0.0);
      Float float0 = new Float((double) (-1));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.numTrueNegatives(10);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.533223272663722
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.setPriors(instances0);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Object object0 = new Object();
      double double0 = evaluation1.weightedFalseNegativeRate();
      evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation1.m_TotalSizeOfRegions;
      MockRandom mockRandom1 = new MockRandom();
      double double2 = evaluation1.falseNegativeRate((-1));
      Evaluation evaluation3 = new Evaluation(instances0);
      double double3 = evaluation1.trueNegativeRate((-2));
      assertEquals(double3, double2, 0.01);
      
      Stacking stacking1 = new Stacking();
      Evaluation evaluation4 = new Evaluation(instances0);
      double double4 = evaluation3.weightedPrecision();
      assertEquals(double4, double0, 0.01);
      
      evaluation3.weightedAreaUnderROC();
      evaluation4.areaUnderROC((-1));
      evaluation3.numInstances();
      assertEquals(0.0, evaluation3.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.9019046995255815
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      evaluation0.setPriors(instances0);
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.m_SumPriorAbsErr;
      evaluation0.trueNegativeRate(460);
      Stacking stacking0 = new Stacking();
      boolean boolean0 = evaluation1.m_DiscardPredictions;
      Object object0 = new Object();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(494, false, false);
      Object[] objectArray0 = new Object[0];
      evaluation1.m_ConfLevel = 46.0;
      evaluation0.weightedFalseNegativeRate();
      evaluation1.weightedAreaUnderROC();
      evaluation0.weightedAreaUnderPRC();
      Integer integer0 = new Integer(460);
      evaluation0.kappa();
      evaluation0.pctIncorrect();
      evaluation1.SFEntropyGain();
      int int0 = 434;
      try { 
        evaluation0.crossValidateModel((Classifier) simpleLogistic0, instances0, 434, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      OneR oneR0 = new OneR();
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumAbsErr;
      evaluation0.weightedFalsePositiveRate();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.028452381295047
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",{z]h'>KI^g0bkJ");
      Stacking stacking0 = new Stacking();
      stacking0.setDebug(true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      sparseInstance0.setMissing(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      double double1 = evaluation0.weightedAreaUnderPRC();
      double double2 = evaluation0.weightedTruePositiveRate();
      evaluation0.kappa();
      evaluation0.getRevision();
      double double3 = evaluation0.weightedAreaUnderROC();
      assertEquals(double3, double1, 0.01);
      
      Stacking stacking1 = new Stacking();
      double double4 = evaluation0.weightedFMeasure();
      assertEquals(double4, double2, 0.01);
      
      evaluation0.truePositiveRate(0);
      double[] doubleArray0 = evaluation0.makeDistribution(1);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      MockRandom mockRandom0 = new MockRandom(637L);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomialUpdateable0, instances0, 110, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.8921604853896405
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      RandomTree randomTree0 = new RandomTree();
      Capabilities capabilities0 = randomTree0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.pctIncorrect();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("eVu50v^;St+?v#");
      MockRandom mockRandom0 = new MockRandom();
      randomTree0.toString();
      MockRandom mockRandom1 = new MockRandom();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      Instances instances1 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.setPriors(instances1);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      testInstances1.getRevision();
      Evaluation evaluation2 = new Evaluation(instances1);
      double double0 = evaluation1.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      
      MockRandom mockRandom2 = new MockRandom();
      double double1 = evaluation2.falseNegativeRate((-1));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = Evaluation.MIN_SF_PROB;
      evaluation0.trueNegativeRate((-1));
      Stacking stacking0 = new Stacking();
      evaluation2.m_ConfusionMatrix = null;
      double double3 = evaluation0.weightedFMeasure();
      assertNotEquals(double3, double1, 0.01);
      
      evaluation2.weightedMatthewsCorrelation();
      evaluation0.setDiscardPredictions(true);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.getCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",{z]h'>KI^g0bkJ");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(1);
      sparseInstance0.setMissing(31);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderPRC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.361145246685684
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 460;
      evaluation0.numFalseNegatives(460);
      Stacking stacking0 = new Stacking();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      evaluation0.toMatrixString();
      costMatrix0.getRevision();
      costMatrix0.toString();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator((ConditionalDensityEstimator) null, (Instance) null, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.3307102464186924
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      OneR oneR0 = new OneR();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix1 = costSensitiveClassifier1.getCostMatrix();
      costMatrix0.toString();
      CostMatrix costMatrix2 = new CostMatrix(costMatrix1);
      Evaluation.getGlobalInfo(costSensitiveClassifier0);
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 1.0E-75;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1.0);
      C45Loader c45Loader0 = new C45Loader();
      File file0 = c45Loader0.retrieveFile();
      textDirectoryLoader0.setDirectory(file0);
      evaluation0.weightedAreaUnderPRC();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 79);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.1049561813316413
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(46);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      textDirectoryLoader0.getRevision();
      instances0.add((Instance) sparseInstance0);
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setCharSet(".Pl");
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      evaluation0.unclassified();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.3837752741848135
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedTrueNegativeRate();
      textDirectoryLoader0.setCharSet("@data");
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.m_SumPriorAbsErr;
      Stacking stacking0 = new Stacking();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(494, true, true);
      evaluation0.weightedFalseNegativeRate();
      evaluation1.weightedAreaUnderROC();
      evaluation0.weightedAreaUnderPRC();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation0.setPriors(instances0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      try { 
        evaluation2.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.2962664515510975
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setRetrieval(467);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      textDirectoryLoader1.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorEntropy = 0.17499999701976776;
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.SFMeanEntropyGain();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.SFMeanEntropyGain(), 0.01);
      
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      capabilities0.enable(capabilities_Capability0);
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation1.SFMeanEntropyGain(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.903371599559368
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      OneR oneR0 = new OneR();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix1 = costSensitiveClassifier1.getCostMatrix();
      costMatrix0.toString();
      CostMatrix costMatrix2 = new CostMatrix(costMatrix1);
      Evaluation.getGlobalInfo(costSensitiveClassifier0);
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.rootMeanPriorSquaredError();
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.confusionMatrix();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.weightedTruePositiveRate();
      evaluation0.weightedFMeasure();
      Stacking stacking0 = new Stacking();
      evaluation1.trueNegativeRate((-474));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Stacking stacking1 = new Stacking();
      evaluation1.weightedFMeasure();
      DenseInstance denseInstance0 = new DenseInstance(2070);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction((Classifier) stacking0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.106390717345643
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.shouldAllThrowIOExceptions();
      capabilities0.disableAllClasses();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities1 = adaBoostM1_0.getCapabilities();
      capabilities1.supportsMaybe(capabilities0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities1.enableDependency(capabilities_Capability0);
      MultiScheme multiScheme0 = new MultiScheme();
      multiScheme0.getCapabilities();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = testInstances0.generate("&t|,-/]I}[C>Q");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.truePositiveRate(2);
      evaluation0.trueNegativeRate(2704);
      Float float0 = new Float(0.0);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[1];
      intArray0[0] = (-1282);
      SparseInstance sparseInstance0 = new SparseInstance(0.17499999701976776, doubleArray0, intArray0, (-1));
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) decisionStump0, (Instance) sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.1784932735004126
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 46;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(46);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      evaluation0.toClassDetailsString("@relation");
      binarySparseInstance0.isMissing((-1060150160));
      instances0.add((Instance) sparseInstance0);
      textDirectoryLoader0.setCharSet(">U3wYV'w");
      evaluation0.toSummaryString("@data", false);
      String[] stringArray0 = new String[4];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = "b:2X";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1060150160);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.3208119525559794
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      Stacking stacking0 = new Stacking();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.weightedAreaUnderPRC();
      evaluation1.confusionMatrix();
      evaluation0.weightedTruePositiveRate();
      CostMatrix costMatrix0 = new CostMatrix(613);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.3813327519834604
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.5033667580151375
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      textDirectoryLoader1.setRetrieval(467);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Instances instances0 = textDirectoryLoader1.getDataSet();
      textDirectoryLoader0.setCharSet("-o\n");
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "-o\n";
      objectArray0[1] = (Object) "-o\n";
      stacking0.setSeed(467);
      objectArray0[6] = (Object) textDirectoryLoader0;
      stacking0.setDebug(true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.toSummaryString("-H <comma seperated numbers for nodes on each layer>", true);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 467;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 0;
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 467;
      intArray0[2] = 2;
      intArray0[3] = 0;
      SparseInstance sparseInstance0 = new SparseInstance((-966.0), doubleArray0, intArray0, 0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.7676394836241975
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      TreeSet<SparseInstance> treeSet0 = new TreeSet<SparseInstance>();
      instances0.addAll((Collection<? extends Instance>) treeSet0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      int[] intArray0 = new int[8];
      intArray0[1] = 2;
      intArray0[2] = (-2);
      intArray0[3] = 2;
      intArray0[4] = (-2);
      intArray0[5] = 2;
      intArray0[6] = (-1);
      intArray0[7] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(482.477283565874, intArray0, 2);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.confusionMatrix();
      evaluation0.weightedTruePositiveRate();
      evaluation0.weightedFMeasure();
      Stacking[] stackingArray0 = new Stacking[7];
      Stacking stacking0 = new Stacking();
      stackingArray0[0] = stacking0;
      Stacking stacking1 = new Stacking();
      stackingArray0[1] = stacking1;
      Stacking stacking2 = new Stacking();
      stackingArray0[2] = stacking2;
      Stacking stacking3 = new Stacking();
      stackingArray0[3] = stacking3;
      Stacking stacking4 = new Stacking();
      stackingArray0[4] = stacking4;
      Stacking stacking5 = new Stacking();
      stackingArray0[5] = stacking5;
      Stacking stacking6 = new Stacking();
      stackingArray0[6] = stacking6;
      // Undeclared exception!
      try { 
        instances0.toArray(stackingArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.1354993326809195
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      DiscreteEstimator discreteEstimator0 = new DiscreteEstimator(3109, 3109);
      Capabilities capabilities0 = new Capabilities(discreteEstimator0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Object object0 = new Object();
      evaluation0.weightedFalseNegativeRate();
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.falseNegativeRate(3109);
      evaluation0.trueNegativeRate((-1));
      Stacking stacking1 = new Stacking();
      assertEquals(10, stacking1.getNumFolds());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      evaluation0.m_MarginCounts = null;
      evaluation0.numFalseNegatives(460);
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.0134399594822057
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(46);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      textDirectoryLoader0.getRevision();
      instances0.add((Instance) sparseInstance0);
      textDirectoryLoader0.setCharSet("rcJbn.DD^V");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      evaluation0.m_NoPriors = true;
      evaluation0.toSummaryString("@data", true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@relation";
      TextDirectoryLoader.main(stringArray0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      try { 
        evaluation0.crossValidateModel("b\"2X", instances0, 7, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: b\"2X
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.083297391369685
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      evaluation0.setPriors(instances0);
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTruePositiveRate();
      textDirectoryLoader0.setCharSet("@data");
      MockRandom mockRandom0 = new MockRandom();
      double double1 = evaluation0.m_SumPriorAbsErr;
      double double2 = evaluation0.trueNegativeRate(460);
      Stacking stacking0 = new Stacking();
      boolean boolean0 = evaluation1.m_DiscardPredictions;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      evaluation1.m_ConfLevel = 46.0;
      double double3 = evaluation0.weightedFalseNegativeRate();
      double double4 = evaluation1.weightedAreaUnderROC();
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double5, double3, 0.01);
      
      Integer integer0 = new Integer(460);
      evaluation0.kappa();
      evaluation0.pctIncorrect();
      double double6 = evaluation1.SFEntropyGain();
      assertEquals(double6, double2, 0.01);
      
      double double7 = evaluation1.weightedFalsePositiveRate();
      assertEquals(double7, double0, 0.01);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 460);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Stacking stacking1 = new Stacking();
      evaluation1.weightedFMeasure();
      double double8 = evaluation1.truePositiveRate(460);
      assertNotEquals(double8, double5, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      String[] stringArray0 = new String[1];
      costSensitiveClassifier0.getCapabilities();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[3] = (-1543.0697349662914);
      doubleArray0[4] = 1403.09126363029;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1403.09126363029, (int[]) null, (-17));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      stringArray0[0] = ".cost";
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.CostSensitiveClassifier:
         // 
         // -M
         // \tMinimize expected misclassification cost. Default is to
         // \treweight training instances according to costs per class
         // -C <cost file name>
         // \tFile name of a cost matrix to use. If this is not supplied,
         // \ta cost matrix will be loaded on demand. The name of the
         // \ton-demand file is the relation name of the training data
         // \tplus \".cost\", and the path to the on-demand file is
         // \tspecified with the -N option.
         // -N <directory>
         // \tName of a directory to search for cost files when loading
         // \tcosts on demand (default current directory).
         // -cost-matrix <matrix>
         // \tThe cost matrix in Matlab single line format.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.3473508904222826
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      double double0 = evaluation1.weightedFalseNegativeRate();
      double double1 = evaluation1.weightedAreaUnderROC();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation1.totalCost();
      assertNotEquals(double3, double0, 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.1526254461503207
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.pctIncorrect();
      textDirectoryLoader0.setCharSet(".bsi");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "rcJbn.DD^V";
      stringArray0[1] = ".bsi";
      TextDirectoryLoader.main(stringArray0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      evaluation0.makeDistribution(Double.NaN);
      int int0 = 457;
      int int1 = 23;
      evaluation1.precision(23);
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.6417326342077754
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Object object0 = new Object();
      evaluation0.weightedFalseNegativeRate();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.weightedAreaUnderPRC();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.1861066490779466
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities1 = adaBoostM1_0.getCapabilities();
      capabilities1.supportsMaybe(capabilities0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      capabilities1.enableAllClassDependencies();
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities2 = multiScheme0.getCapabilities();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities3 = symmetricalUncertAttributeEval0.getCapabilities();
      capabilities3.supportsMaybe(capabilities1);
      capabilities3.disableAllClassDependencies();
      Capabilities capabilities4 = multiScheme0.getCapabilities();
      capabilities2.enableAllAttributeDependencies();
      TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      capabilities4.enableAllAttributeDependencies();
      evaluation0.toMatrixString("@relation");
      AllFilter allFilter0 = new AllFilter();
      evaluation0.falsePositiveRate((-1517));
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-3227));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3227
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.557450248011963
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      int int0 = 460;
      evaluation0.m_MarginCounts = null;
      evaluation0.numFalseNegatives(460);
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      mockRandom0.nextDouble();
      Object object0 = new Object();
      stacking0.setSeed(460);
      Stacking stacking1 = new Stacking();
      Stacking stacking2 = new Stacking();
      AbstractClassifier.makeCopy(stacking0);
      int int1 = 13;
      evaluation0.fMeasure(13);
      // Undeclared exception!
      try { 
        Instances.mergeInstances(instances0, instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'text' '@@class@@' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.525633448066804
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",{z]h'>KI^g0bkJ");
      Stacking stacking0 = new Stacking();
      stacking0.setDebug(false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      sparseInstance0.setMissing(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      C45Loader c45Loader0 = new C45Loader();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(",{z]h'>KI^g0bkJ");
      Attribute attribute0 = new Attribute("equals ? ", linkedList0, (-2));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      evaluation0.weightedFalseNegativeRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numTrueNegatives((-2));
      evaluation0.trueNegativeRate((-1517));
      evaluation0.weightedTrueNegativeRate();
      evaluation0.weightedTrueNegativeRate();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation");
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation0.m_PriorEstimator = univariateKernelEstimator0;
      double double0 = evaluation0.m_SumPredicted;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "@relation");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate0.and(predicate2);
      instances0.removeIf(predicate0);
      Object object0 = new Object();
      double double1 = new Double((-0.9189385332046727));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1116462894);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 21;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.7530498316978935
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CostMatrix costMatrix0 = new CostMatrix(0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      OneR oneR0 = new OneR();
      evaluation0.KBInformation();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      evaluation0.sizeOfPredictedRegions();
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.5837007639017773
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      univariateKernelEstimator0.logDensity((-629.089251));
      evaluation0.m_PriorEstimator = univariateKernelEstimator0;
      univariateKernelEstimator0.toString();
      univariateKernelEstimator0.logDensity((-0.9189385332046727));
      double double0 = evaluation0.numTruePositives((-1116462894));
      double double1 = evaluation0.pctCorrect();
      double double2 = evaluation0.KBRelativeInformation();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.truePositiveRate((-1116462894));
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.9263548464292743
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.shouldAllThrowIOExceptions();
      capabilities0.disableAllClasses();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      adaBoostM1_0.toString();
      Capabilities capabilities1 = adaBoostM1_0.getCapabilities();
      capabilities1.supportsMaybe(capabilities0);
      Capabilities capabilities2 = new Capabilities(adaBoostM1_0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.6544465311255245
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double0, 0.01);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) capabilities0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      predicate2.or(predicate1);
      instances0.removeIf(predicate3);
      Object object0 = new Object();
      evaluation0.numTrueNegatives((-1));
      double double1 = evaluation0.truePositiveRate((-211));
      double double2 = evaluation0.rootMeanSquaredError();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.958037804502244
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",{z]h'>KI^g0bkJ");
      Stacking stacking0 = new Stacking();
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking1 = new Stacking();
      Object object0 = new Object();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(true);
      Stacking stacking2 = new Stacking();
      stacking2.setSeed((-1325));
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities1 = precomputedKernelMatrixKernel1.getCapabilities();
      Capabilities capabilities2 = capabilities0.getOtherCapabilities();
      capabilities2.enableAllAttributeDependencies();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setNumRelationalDate(2);
      TestInstances.forCapabilities(capabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      capabilities1.enable(capabilities_Capability0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrClass;
      double double1 = evaluation0.weightedTruePositiveRate();
      evaluation0.rootRelativeSquaredError();
      double double2 = evaluation0.weightedFMeasure();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.weightedTrueNegativeRate();
      evaluation0.weightedPrecision();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.2334830296226054
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",{z]h'>KI^g0bkJ");
      Stacking stacking0 = new Stacking();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Object object0 = new Object();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking1 = new Stacking();
      stacking0.setSeed((-1076));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Instances instances1 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation0.m_SumAbsErr;
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.829674729263769
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      evaluation0.setPriors(instances0);
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.pctIncorrect();
      textDirectoryLoader0.setCharSet("@data");
      MockRandom mockRandom0 = new MockRandom();
      double double1 = evaluation0.m_SumPriorAbsErr;
      double double2 = evaluation0.trueNegativeRate(460);
      Stacking stacking0 = new Stacking();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(494, true, true);
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) simpleLogistic0, instances1, objectArray0);
      double double3 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double3, double0, 0.01);
      
      evaluation1.weightedAreaUnderROC();
      double double4 = evaluation0.weightedAreaUnderPRC();
      Integer integer0 = new Integer(460);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 494);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      evaluation0.trueNegativeRate(460);
      Stacking stacking1 = new Stacking();
      double double5 = evaluation0.weightedFMeasure();
      assertEquals(double5, double4, 0.01);
      
      double double6 = evaluation1.truePositiveRate((-2424));
      assertEquals(double6, double2, 0.01);
      assertEquals(0.0, double6, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom(2079L);
      mockRandom0.nextDouble();
      Evaluation evaluation0 = new Evaluation(instances0);
      Object object0 = new Object();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) null, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      MultiScheme multiScheme0 = new MultiScheme();
      MultiScheme multiScheme1 = new MultiScheme();
      Capabilities capabilities1 = multiScheme1.getCapabilities();
      multiScheme0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-2930));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.9381133632849246
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      textDirectoryLoader0.getDataSet();
      Object object0 = new Object();
      LMT lMT0 = new LMT();
      evaluation0.numTrueNegatives(113);
      double double0 = evaluation0.trueNegativeRate(493);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".gz");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      Object object0 = new Object();
      stacking0.setDebug(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModel((Classifier) null, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.1821355215804705
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      RandomTree randomTree0 = new RandomTree();
      Capabilities capabilities0 = randomTree0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setCharSet("");
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      testInstances0.setNumRelationalNumeric(75);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)77;
      mockRandom1.nextBytes(byteArray0);
      mockRandom1.nextDouble();
      evaluation0.SFMeanEntropyGain();
      testInstances0.setMultiInstance(true);
      evaluation0.getClassPriors();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      testInstances0.setNumInstances((byte)0);
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForPredictor(1.1000000014901161, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.135752485091249
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(",{z]h'>KI^g0bkJ");
      Stacking stacking0 = new Stacking();
      stacking0.setDebug(true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      sparseInstance0.setMissing(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedTruePositiveRate();
      Object object0 = new Object();
      evaluation0.weightedFMeasure();
      evaluation0.weightedMatthewsCorrelation();
      try { 
        evaluation0.updateStatsForPredictor(10.0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSchemeEntropy;
      textDirectoryLoader0.setCharSet("rcJbn.DD^V");
      String[] stringArray0 = new String[4];
      TextDirectoryLoader.main(stringArray0);
      MockRandom mockRandom0 = new MockRandom();
      double double1 = evaluation0.m_SumClass;
      evaluation0.getClassPriors();
      int int0 = 457;
      evaluation0.precision(457);
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.1369072608149295
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval((-1616));
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      String string0 = "rcJbn.DD^V";
      evaluation0.toClassDetailsString(".arff");
      textDirectoryLoader0.setCharSet("");
      evaluation0.setPriors(instances0);
      evaluation0.avgCost();
      try { 
        Evaluation.handleCostOption("%F46jJ-{&1gErt", 617);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.6714599763614508
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextDouble();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.661034146408792
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      capabilities0.capabilities();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-1));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) capabilities0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.and(predicate2);
      predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      instances0.removeIf(predicate3);
      evaluation0.falseNegativeRate(2727);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      int int0 = 1456;
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "@relation");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.9533804114103956
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      capabilities0.capabilities();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-1));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) capabilities0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.and(predicate2);
      predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      instances0.removeIf(predicate3);
      evaluation0.falseNegativeRate(2727);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.trueNegativeRate(1456);
      Stacking stacking0 = new Stacking();
      Instances instances1 = new Instances(instances0, (-1393));
      Evaluation evaluation3 = new Evaluation(instances1);
      capabilities0.enableAllAttributeDependencies();
      String string0 = evaluation0.toMatrixString("@data");
      Evaluation evaluation4 = new Evaluation(instances1);
      evaluation4.falsePositiveRate(2727);
      String string1 = Evaluation.makeOptionString((Classifier) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.4031416180176828
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EM eM0 = new EM();
      Capabilities capabilities0 = new Capabilities(eM0);
      LogitBoost logitBoost0 = new LogitBoost();
      LogitBoost logitBoost1 = new LogitBoost();
      logitBoost1.getCapabilities();
      LogitBoost logitBoost2 = new LogitBoost();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "numFoldsTipText";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "weka/core/Capabilities.props";
      stringArray0[6] = "weka/core/Capabilities.props";
      LogitBoost.main(stringArray0);
      logitBoost2.setShrinkage((-2645.678545487));
      logitBoost0.setLikelihoodThreshold(196.5208329560771);
      LogitBoost logitBoost3 = new LogitBoost();
      logitBoost3.setNumFolds((-1112551771));
      Evaluation.getGlobalInfo(logitBoost1);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Object object0 = new Object();
      Object object1 = new Object();
      LMT lMT0 = new LMT();
      assertEquals("Set splitting criterion based on the residuals of LogitBoost. There are two possible splitting criteria for LMT: the default is to use the C4.5 splitting criterion that uses information gain on the class variable. The other splitting criterion tries to improve the purity in the residuals produces when fitting the logistic regression functions. The choice of the splitting criterion does not usually affect classification accuracy much, but can produce different trees.", lMT0.splitOnResidualsTipText());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      univariateKernelEstimator0.toString();
      CostMatrix costMatrix0 = new CostMatrix(10);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.1463096566766366
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(483);
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      MockRandom mockRandom1 = new MockRandom((-1));
      evaluation0.weightedFalsePositiveRate();
      Evaluation evaluation1 = new Evaluation(instances1);
      try { 
        evaluation1.crossValidateModel(" ", instances0, 483, testInstances0.DEFAULT_WORDS, (Random) mockRandom1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called:  
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.007458120938535
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(46);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      evaluation0.toClassDetailsString("@relation");
      int int0 = (-1060150160);
      binarySparseInstance0.isMissing((-1060150160));
      instances0.add((Instance) sparseInstance0);
      textDirectoryLoader0.setCharSet(">U3wYV'w");
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities1 = adaBoostM1_0.getCapabilities();
      capabilities0.supportsMaybe(capabilities1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiScheme multiScheme0 = new MultiScheme();
      multiScheme0.getCapabilities();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities2 = symmetricalUncertAttributeEval0.getCapabilities();
      capabilities2.supportsMaybe(capabilities1);
      Stacking stacking0 = new Stacking();
      stacking0.setDebug(false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(12);
      Object object0 = new Object();
      Evaluation.handleCostOption((String) null, 1);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.212547260857539
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 46;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(46);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      evaluation0.toClassDetailsString("@relation");
      binarySparseInstance0.isMissing((-1060150160));
      evaluation0.getDiscardPredictions();
      textDirectoryLoader0.setCharSet(">U3wYV'w");
      evaluation0.toSummaryString("@data", true);
      String[] stringArray0 = new String[4];
      MockRandom mockRandom0 = new MockRandom();
      String string0 = "b:2X";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1060150160);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.0291633182489255
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      capabilities0.capabilities();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) capabilities0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.and(predicate2);
      predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      instances0.removeIf(predicate3);
      double double1 = evaluation0.falseNegativeRate(2727);
      assertEquals(double1, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.trueNegativeRate(1456);
      Stacking stacking0 = new Stacking();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(13);
      evaluation0.truePositiveRate(69);
      evaluation3.unweightedMacroFmeasure();
      double double2 = evaluation2.meanAbsoluteError();
      assertEquals(Double.NaN, double2, 0.01);
      
      evaluation1.SFEntropyGain();
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.6308731393221025
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-23);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-1398));
      MockRandom mockRandom0 = new MockRandom();
      Stacking stacking0 = new Stacking();
      evaluation0.toSummaryString(true);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(25);
      costSensitiveClassifier0.getCostMatrix();
      costMatrix0.toString();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation1.weightedAreaUnderPRC();
      evaluation0.weightedTruePositiveRate();
      evaluation1.trueNegativeRate((byte)105);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 92);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.2731738319283363
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(46);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      univariateKernelEstimator0.toString();
      univariateKernelEstimator0.logDensity((-0.9189385332046727));
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities1 = new Capabilities((CapabilitiesHandler) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Instances instances0 = null;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.0635356254917383
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      OneR oneR0 = new OneR();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix1 = costSensitiveClassifier1.getCostMatrix();
      costMatrix0.toString();
      CostMatrix costMatrix2 = new CostMatrix(costMatrix1);
      String string0 = Evaluation.getGlobalInfo(costSensitiveClassifier0);
      assertEquals("\nSynopsis for weka.classifiers.meta.CostSensitiveClassifier:\n\nA metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", string0);
      
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Integer integer0 = new Integer(2);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (int)integer0;
      doubleArray0[1] = 1.0E-75;
      costMatrix1.toString();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      double double1 = evaluation1.weightedAreaUnderPRC();
      double double2 = evaluation0.weightedTruePositiveRate();
      String string1 = evaluation1.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string1);
      
      double double3 = evaluation1.weightedFMeasure();
      double double4 = evaluation1.unweightedMicroFmeasure();
      assertEquals(double4, double3, 0.01);
      
      evaluation1.areaUnderROC(1);
      evaluation0.m_NumTrainClassVals = 2;
      double double5 = evaluation0.weightedPrecision();
      assertEquals(double5, double1, 0.01);
      
      double double6 = evaluation1.weightedFalseNegativeRate();
      assertEquals(double6, double2, 0.01);
      
      evaluation1.numTrueNegatives((-1461032992));
      double double7 = evaluation0.truePositiveRate(0);
      assertNotEquals(double7, double4, 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomialUpdateable0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities1 = new Capabilities(naiveBayesMultinomialUpdateable0);
      naiveBayesMultinomialUpdateable0.listOptions();
      try { 
        Evaluation.evaluateModel("RxDw$6Z0T", (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name RxDw$6Z0T.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.4348094859187583
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      RandomSubSpace.main(stringArray0);
      SMOreg sMOreg0 = new SMOreg();
      Enumeration enumeration0 = new AlphabeticTokenizer();
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Instances instances0 = null;
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 121);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }
}
