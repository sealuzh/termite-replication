/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 13:15:48 GMT 2019
 */

package macaw.businessLayer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import macaw.businessLayer.DerivedVariable;
import macaw.businessLayer.OntologyTerm;
import macaw.businessLayer.RawVariable;
import macaw.businessLayer.SupportingDocument;
import macaw.businessLayer.User;
import macaw.businessLayer.ValueLabel;
import macaw.businessLayer.Variable;
import macaw.system.ChangeEventType;
import macaw.system.MacawChangeEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Variable_ESTest extends Variable_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      User user0 = new User("DUPLICATE_AVAILABILITY_STATE", "DUPLICATE_AVAILABILITY_STATE");
      user0.setUserID("<}^ Y+>y_**kSazqBi5");
      SupportingDocument.detectFieldChanges(user0, supportingDocument0, supportingDocument0);
      supportingDocument0.getDisplayName();
      supportingDocument0.setDescription("macaw.businessLayer.Variable");
      rawVariable0.setSupportingDocuments((ArrayList<SupportingDocument>) null);
      // Undeclared exception!
      try { 
        rawVariable0.removeSupportingDocument(supportingDocument0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.126520074411919
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      derivedVariable0.removeValueLabel(valueLabel0);
      valueLabel0.getDisplayName();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ArrayList<ValueLabel> arrayList0 = new ArrayList<ValueLabel>();
      User user0 = new User();
      user0.setLastName("UNABLE_TO_ASSOCIATE_SOURCE_VARIABLE");
      ValueLabel.detectFieldChanges(user0, derivedVariable0, valueLabel0, valueLabel0);
      arrayList0.add(valueLabel0);
      arrayList0.add(valueLabel0);
      derivedVariable1.setLabel("UNABLE_TO_CHECK_DATABASE_EXISTS");
      derivedVariable1.setValueLabels(arrayList0);
      derivedVariable1.setIdentifier(1826);
      derivedVariable0.containsSourceVariable(derivedVariable1);
      derivedVariable1.getDisplayName();
      derivedVariable1.getCodeBookNumber();
      Variable.validateFields(derivedVariable0);
      derivedVariable1.getColumnEnd();
      derivedVariable1.getValueLabels();
      derivedVariable1.getAlternativeVariable();
      assertEquals(1826, derivedVariable1.getIdentifier());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.759084315143278
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.setName("user.addressLine2.label");
      ontologyTerm0.setNewRecord(true);
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.setCoded(true);
      rawVariable1.codeBookNumber = "INVALID_ALIAS_FILE_PATH";
      rawVariable1.setForm("&(p{,EW@");
      rawVariable0.cloneAttributes(rawVariable1);
      rawVariable0.containsOntologyTerm(ontologyTerm0);
      rawVariable0.isCoded();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      try { 
        DerivedVariable.validateFields(derivedVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.DerivedVariable", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7464921238997273
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setLabel("'>");
      derivedVariable0.setColumnEnd("YgfNITxw_");
      User user0 = new User();
      user0.setPassword("'>");
      user0.setLastName("'>");
      user0.setAddressLine2("'>");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable1, derivedVariable0);
      User user1 = new User();
      try { 
        User.validateFields(user1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.User", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.5305232126317794
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setOntologyTerms((ArrayList<OntologyTerm>) null);
      rawVariable0.setAlias(" 4#o_2d(*(n!");
      rawVariable0.codeBookNumber = "+:gP`aJWrQ$z&";
      // Undeclared exception!
      try { 
        rawVariable0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1488608757772574
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      User user0 = new User();
      User user1 = new User();
      user0.setLastName("UNABLE_TO_CHECK_ALIAS_FILE_PATH_DUPLICATE");
      User user2 = new User("INALID_ALIAS_FILE_PATH", "user.password.saveChanges");
      User user3 = new User();
      User user4 = new User();
      user3.setPassword("^lqsj");
      user3.setPhone("<$%{s%J8z`mYB)W^I");
      user3.setAddressLine2((String) null);
      User user5 = new User();
      user5.setFirstName("nQO!_8,W$-");
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setCleaned(true);
      rawVariable0.setAlternativeVariable(derivedVariable0);
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable0);
      assertTrue(derivedVariable0.isCleaned());
      
      User user6 = new User();
      User user7 = new User();
      User user8 = new User();
      User user9 = new User();
      User user10 = new User();
      User user11 = new User();
      User user12 = new User();
      User user13 = new User();
      rawVariable0.getAlternativeVariable();
      assertFalse(rawVariable0.isCleaned());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7896843142571908
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setQuestionNumber("\"2hq=e4HI");
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      arrayList0.add(supportingDocument0);
      derivedVariable0.addSupportingDocuments(arrayList0);
      derivedVariable0.setYear("\"2hq=e4HI");
      derivedVariable0.getCleaningStatus();
      derivedVariable0.getQuestionNumber();
      derivedVariable0.getSourceVariables();
      try { 
        DerivedVariable.validateFields(derivedVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.DerivedVariable", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9740420290828737
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.createVariableSummary();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.notes = "variable.name.label";
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      ontologyTerm0.setIdentifier((-905));
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      derivedVariable0.addSupportingDocuments(arrayList0);
      ontologyTerm0.getDisplayName();
      ontologyTerm0.setTerm("$v}&r}x0slO5E=PRS-)");
      ontologyTerm0.setOntologyName("X8 *");
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      derivedVariable0.setAlias("9zQR- 8");
      derivedVariable0.getAlias();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.setIsNewRecord(false);
      derivedVariable0.hasSameDisplayName(derivedVariable1);
      try { 
        DerivedVariable.validateFields(derivedVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.DerivedVariable", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.945000415476649
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setName("'>");
      User user0 = new User();
      user0.setAddressLine2("'>");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable derivedVariable3 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable2, derivedVariable0);
      assertEquals("'>", derivedVariable0.getDisplayName());
      
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFileName("'>");
      derivedVariable1.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      derivedVariable3.addSupportingDocument(supportingDocument0);
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable4 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable3);
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, (Variable) null);
      User user1 = new User();
      User user2 = new User();
      User user3 = new User();
      User user4 = new User();
      User user5 = new User();
      User user6 = new User();
      User user7 = new User();
      User user8 = new User();
      Variable variable0 = rawVariable0.getAlternativeVariable();
      assertEquals(0, variable0.getIdentifier());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.8314417011158293
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      String string0 = "ULrq2E{I]H.X3Drot";
      rawVariable0.setQuestionNumber("ULrq2E{I]H.X3Drot");
      rawVariable0.setValueLabels((ArrayList<ValueLabel>) null);
      rawVariable0.setIsNewRecord(false);
      rawVariable0.getValueLabels();
      rawVariable0.getCodeBookNumber();
      rawVariable0.createVariableSummary();
      rawVariable0.notes = "Q*8w?\"Cj)l";
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.clone();
      rawVariable0.setCleaningDescription("ULrq2E{I]H.X3Drot");
      rawVariable0.createVariableSummary();
      derivedVariable0.getCodeBookNumber();
      try { 
        RawVariable.validateFields(rawVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.RawVariable", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9986330663747731
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      User user0 = new User("user.password.saveChanges", "user.password.saveChanges");
      User user1 = new User();
      User user2 = new User();
      User user3 = new User("^lqsj", "user.password.saveChanges");
      user3.setPassword("user.password.saveChanges");
      user0.setPhone("^lqsj");
      user1.setAddressLine2("Bw*uZ6~H\"C\"H6,dJt @");
      User user4 = new User();
      user1.setFirstName("QL7bG*");
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      User user5 = new User("Bw*uZ6~H\"C\"H6,dJt @", "XMdCY3m_\"XQ");
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, rawVariable0, rawVariable0);
      assertNotNull(macawChangeEvent0);
      assertEquals(0, macawChangeEvent0.getChangedObjectIdentifier());
      assertEquals("Changed variable \"Alternative Variable\", field \"\", from \"\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
      
      User user6 = new User();
      User user7 = new User();
      User user8 = new User();
      User user9 = new User();
      User user10 = new User();
      User user11 = new User("+6mjT1", (String) null);
      User user12 = new User();
      User user13 = new User();
      rawVariable0.getAlternativeVariable();
      assertFalse(rawVariable0.isNewRecord());
      assertFalse(rawVariable0.isCoded());
      assertFalse(rawVariable0.isCleaned());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9172299880444386
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setLabel("@");
      User user0 = new User();
      user0.setPassword((String) null);
      user0.setPhone((String) null);
      user0.setAddressLine2("@");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable1, derivedVariable0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFileName((String) null);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      SupportingDocument supportingDocument5 = new SupportingDocument();
      SupportingDocument supportingDocument6 = new SupportingDocument();
      derivedVariable1.addSupportingDocument(supportingDocument6);
      derivedVariable1.getSupportingDocuments();
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      derivedVariable1.removeSupportingDocuments(arrayList0);
      SupportingDocument supportingDocument7 = new SupportingDocument();
      SupportingDocument supportingDocument8 = new SupportingDocument();
      SupportingDocument supportingDocument9 = new SupportingDocument();
      SupportingDocument supportingDocument10 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument5);
      assertEquals("@", derivedVariable0.getLabel());
      
      SupportingDocument supportingDocument11 = new SupportingDocument();
      SupportingDocument supportingDocument12 = new SupportingDocument();
      SupportingDocument supportingDocument13 = new SupportingDocument();
      boolean boolean0 = derivedVariable2.containsSupportingDocument(supportingDocument7);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.143652409619771
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      String string0 = null;
      derivedVariable0.setLabel((String) null);
      User user0 = new User();
      User user1 = new User((String) null, (String) null);
      user1.setAddressLine2("general.error.promotesSecurityRisk");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      // Undeclared exception!
      try { 
        DerivedVariable.detectFieldChanges(user1, derivedVariable1, derivedVariable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.util.ValidationUtility", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.970371554814284
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setName("'>");
      derivedVariable0.setLabel("'>");
      User user0 = new User();
      user0.setAddressLine2("'>");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable derivedVariable3 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable3, derivedVariable0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable1.addSupportingDocument(supportingDocument0);
      derivedVariable1.addSupportingDocument(supportingDocument0);
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      derivedVariable1.removeSupportingDocuments(arrayList0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument1);
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      SupportingDocument supportingDocument5 = new SupportingDocument();
      SupportingDocument supportingDocument6 = new SupportingDocument();
      derivedVariable2.containsSupportingDocument(supportingDocument6);
      SupportingDocument supportingDocument7 = new SupportingDocument();
      assertEquals("", supportingDocument7.getFilePath());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.7642139177154403
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setName("'>");
      derivedVariable0.setLabel("'>");
      User user0 = new User();
      user0.setAddressLine2("'>");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable derivedVariable3 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable3, derivedVariable0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable1.addSupportingDocument(supportingDocument0);
      DerivedVariable.validateFields(derivedVariable0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      Object object0 = new Object();
      Predicate<OntologyTerm> predicate0 = Predicate.isEqual(object0);
      arrayList0.removeIf(predicate0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      arrayList0.add(ontologyTerm0);
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super OntologyTerm, ? extends Integer>) function0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.replaceAll(unaryOperator0);
      DerivedVariable derivedVariable4 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList2 = derivedVariable0.getOntologyTerms();
      arrayList2.add(ontologyTerm1);
      derivedVariable4.getOntologyTerms();
      derivedVariable1.setOntologyTerms(arrayList1);
      derivedVariable2.cloneAttributes(derivedVariable1);
      User user1 = new User();
      User user2 = new User();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.getAlternativeVariable();
      Variable.detectFieldChanges(user2, derivedVariable3, derivedVariable0);
      assertEquals("'>", derivedVariable0.getLabel());
      
      derivedVariable3.getLabel();
      derivedVariable4.getDisplayName();
      assertEquals("Unknown", derivedVariable4.getCategory());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.columnStart = "variable.questionNumber.label";
      derivedVariable0.setCleaned(false);
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      arrayList0.listIterator();
      derivedVariable0.removeSourceVariables(arrayList0);
      derivedVariable0.setCleaningDescription("variable.questionNumber.label");
      derivedVariable0.getDisplayName();
      derivedVariable0.setSourceVariables(arrayList0);
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      derivedVariable0.addOntologyTerms(arrayList1);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.addSourceVariable(rawVariable0);
      derivedVariable0.getFilePath();
      assertEquals("variable.questionNumber.label", derivedVariable0.getCleaningDescription());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.625071549495739
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setColumnEnd(";{rrn/{JcDj`gj");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.cloneAttributes(derivedVariable0);
      derivedVariable0.codeBookNumber = "ux !2 >";
      rawVariable0.getColumnEnd();
      OntologyTerm ontologyTerm0 = null;
      // Undeclared exception!
      try { 
        derivedVariable0.containsOntologyTerm((OntologyTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.810368007100507
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setColumnStart("c");
      derivedVariable0.setCategory(")\"t FCCF(v.UdTR-");
      derivedVariable0.setAlias(")\"t FCCF(v.UdTR-");
      derivedVariable0.notes = "variable.columnEnd.label";
      derivedVariable0.setColumnStart("");
      derivedVariable0.setLabel("ZIhWqQAtzh`Jqz>");
      derivedVariable0.codeBookNumber = "ZIhWqQAtzh`Jqz>";
      derivedVariable0.getNotes();
      derivedVariable0.setCodeBookNumber("+{s?u,kSti5l)G(8yz");
      derivedVariable0.getCleaningDescription();
      derivedVariable0.clone();
      ArrayList<Variable> arrayList0 = derivedVariable0.getSourceVariables();
      derivedVariable0.setSourceVariables(arrayList0);
      derivedVariable0.createVariableSummary();
      derivedVariable0.getCategory();
      User user0 = new User();
      user0.setCity("lDI+h");
      derivedVariable0.removeSourceVariables(arrayList0);
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, derivedVariable0);
      derivedVariable0.getOntologyTerms();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.containsSourceVariable(derivedVariable1);
      assertEquals("ZIhWqQAtzh`Jqz>", derivedVariable0.getLabel());
      
      int int0 = derivedVariable1.getIdentifier();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8411381539506984
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      User user0 = new User();
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, derivedVariable0);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.columnEnd = "INVALID_ALIMS_FILE_PATH";
      User user1 = new User("INVALID_ALIMS_FILE_PATH", "");
      DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable0);
      User user2 = new User();
      User user3 = new User();
      User user4 = new User();
      System.setCurrentTimeMillis(1664L);
      derivedVariable0.hasSameDisplayName(rawVariable0);
      derivedVariable0.createVariableSummary();
      assertEquals("INVALID_ALIMS_FILE_PATH", derivedVariable0.getColumnEnd());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.810232780596112
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setCategory(")\"t FCCF(v.UdTR-");
      derivedVariable0.setAlias(")\"t FCCF(v.UdTR-");
      derivedVariable0.setColumnStart("");
      derivedVariable0.setLabel("ZIhWqQAtzh`Jqz>");
      derivedVariable0.codeBookNumber = "ZIhWqQAtzh`Jqz>";
      derivedVariable0.getNotes();
      derivedVariable0.setCodeBookNumber("+{s?u,kSti5l)G(8yz");
      derivedVariable0.getCleaningDescription();
      derivedVariable0.clone();
      ArrayList<Variable> arrayList0 = derivedVariable0.getSourceVariables();
      derivedVariable0.setSourceVariables(arrayList0);
      derivedVariable0.createVariableSummary();
      derivedVariable0.getCategory();
      User user0 = new User();
      user0.setCity("lDI+h");
      derivedVariable0.removeSourceVariables(arrayList0);
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, derivedVariable0);
      derivedVariable0.getOntologyTerms();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.containsSourceVariable(derivedVariable1);
      assertEquals("+{s?u,kSti5l)G(8yz", derivedVariable0.getCodeBookNumber());
      
      int int0 = derivedVariable1.getIdentifier();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.74329692323934
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setForm("KuWULWO)ra=_|MF");
      derivedVariable0.setForm("general.fieldValue.blank");
      User user0 = new User();
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, derivedVariable0);
      derivedVariable0.columnStart = "`N[>XG/7:b";
      derivedVariable0.setQuestionNumber("`N[>XG/7:b");
      derivedVariable0.setYear("Ap;EjE.O==nS9W");
      User.detectFieldChanges(user0, user0, user0);
      user0.setFirstName("`N[>XG/7:b");
      derivedVariable0.clone();
      Variable.detectFieldChanges(user0, derivedVariable0, derivedVariable0);
      derivedVariable0.createVariableSummary();
      derivedVariable0.getSourceVariables();
      derivedVariable0.getDisplayName();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable1.containsOntologyTerm(ontologyTerm0);
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable1, derivedVariable0);
      derivedVariable0.removeSourceVariable(derivedVariable1);
      assertEquals("`N[>XG/7:b", derivedVariable0.getQuestionNumber());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8937277100473913
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setDescription("UNABLE_TO_GET_CHANGES_FOR_DOCUMENT");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      supportingDocument3.setTitle("UNABLE_TO_GET_CHANGES_FOR_DOCUMENT");
      derivedVariable0.addSupportingDocument(supportingDocument3);
      supportingDocument2.setIdentifier((-630));
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      derivedVariable0.removeSupportingDocuments(arrayList0);
      derivedVariable0.containsSupportingDocument(supportingDocument3);
      SupportingDocument supportingDocument4 = new SupportingDocument();
      SupportingDocument supportingDocument5 = new SupportingDocument();
      SupportingDocument supportingDocument6 = new SupportingDocument();
      SupportingDocument supportingDocument7 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument2);
      SupportingDocument supportingDocument8 = new SupportingDocument();
      // Undeclared exception!
      try { 
        derivedVariable0.addSourceVariables((ArrayList<Variable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8937277100473913
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setDescription("UNABLE_TO_GET_CHANGES_FOR_DOCUMENT");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      supportingDocument3.setTitle("UNABLE_TO_GET_CHANGES_FOR_DOCUMENT");
      derivedVariable0.addSupportingDocument(supportingDocument3);
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      derivedVariable0.removeSupportingDocuments(arrayList0);
      derivedVariable0.containsSupportingDocument(supportingDocument3);
      SupportingDocument supportingDocument4 = new SupportingDocument();
      supportingDocument2.setIdentifier(1);
      SupportingDocument supportingDocument5 = new SupportingDocument();
      SupportingDocument supportingDocument6 = new SupportingDocument();
      SupportingDocument supportingDocument7 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument2);
      SupportingDocument supportingDocument8 = new SupportingDocument();
      assertFalse(supportingDocument8.equals((Object)supportingDocument0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.939043038302082
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      User user0 = new User();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setName("");
      User user1 = new User();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.setYear("2W C8&#Z#t'RC4q");
      DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable1);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable2.addSupportingDocument(supportingDocument1);
      ArrayList<SupportingDocument> arrayList0 = derivedVariable2.getSupportingDocuments();
      // Undeclared exception!
      try { 
        derivedVariable2.removeSupportingDocuments(arrayList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.603755847366152
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      User user0 = new User();
      User user1 = new User();
      user0.setLastName("UNABLE_TO_CHECK_ALIAS_FILE_PATH_DUPLICATE");
      User user2 = new User();
      User user3 = new User();
      User user4 = new User();
      user3.setPassword("^lqsj");
      user3.setPhone("<$%{s%J8z`mYB)W^I");
      user3.setAddressLine2((String) null);
      User user5 = new User();
      user5.setFirstName("nQO!_8,W$-");
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable0);
      assertEquals("Changed variable \"Alternative Variable\", field \"\", from \"\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
      assertNotNull(macawChangeEvent0);
      
      User user6 = new User();
      User user7 = new User();
      User user8 = new User();
      User user9 = new User("^lqsj", "^lqsj");
      User user10 = new User();
      User user11 = new User();
      User user12 = new User();
      User user13 = new User();
      rawVariable0.getAlternativeVariable();
      rawVariable0.cloneAttributes(derivedVariable0);
      assertFalse(derivedVariable0.isNewRecord());
      assertEquals(0, derivedVariable0.getIdentifier());
      assertFalse(derivedVariable0.isCoded());
      assertEquals("Unknown", derivedVariable0.getCategory());
      assertEquals("Unknown", derivedVariable0.getAvailability());
      assertEquals("Unknown", derivedVariable0.getCleaningStatus());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.5813690145252886
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setCleaningDescription("valueLabel.isMissingValue.saveChanges");
      rawVariable0.setForm("+:gP`aJWrQ$z&");
      rawVariable0.clone();
      rawVariable0.getForm();
      assertEquals("valueLabel.isMissingValue.saveChanges", rawVariable0.getCleaningDescription());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.questionNumber = "hK-\"j%sb";
      rawVariable0.codeBookNumber = "+:gP`aJWrQ$z&";
      System.setCurrentTimeMillis(0L);
      rawVariable0.getCodeBookNumber();
      // Undeclared exception!
      try { 
        Variable.detectFieldChanges((User) null, rawVariable0, rawVariable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.211667659113366
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      User user0 = new User();
      user0.setAffiliation("");
      User user1 = new User("UNABLE_TO_INITIALISE_CONNECTION", "UNABLE_TO_INITIALISE_CONNECTION");
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setIdentifier(1596);
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, rawVariable0);
      assertEquals(1596, rawVariable0.getIdentifier());
      
      RawVariable rawVariable1 = new RawVariable();
      User user2 = new User(" S/'BH@_", "Bw*uZ6~H\"C\"H6,dJt @");
      User user3 = new User();
      User user4 = new User();
      System.setCurrentTimeMillis((-1210L));
      String string0 = rawVariable1.getCleaningStatus();
      assertEquals("Unknown", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6657940454100815
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setCleaned(true);
      Variable.validateFields(rawVariable0);
      rawVariable0.isCleaned();
      ValueLabel valueLabel0 = new ValueLabel();
      rawVariable0.removeValueLabel(valueLabel0);
      User user0 = new User("8vr}", "variable.name.label");
      RawVariable rawVariable1 = new RawVariable();
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, rawVariable1);
      RawVariable rawVariable2 = new RawVariable();
      User user1 = new User("INVALID_ALIAS_FILE_PATH", "INVALID_ALIAS_FILE_PATH");
      User user2 = new User();
      System.setCurrentTimeMillis((-1870L));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.899191577071091
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setLabel("general.fieldValue.blank");
      rawVariable0.columnStart = "general.fieldValue.blank";
      rawVariable0.setColumnStart("general.fieldValue.blank");
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.clone();
      User user0 = new User();
      supportingDocument0.setIsNewRecord(true);
      SupportingDocument.detectFieldChanges(user0, supportingDocument0, supportingDocument0);
      supportingDocument0.setTitle("general.fieldValue.blank");
      supportingDocument0.setIsNewRecord(false);
      supportingDocument0.clone();
      rawVariable0.removeSupportingDocument(supportingDocument0);
      rawVariable0.getColumnStart();
      rawVariable0.getCleaningStatus();
      rawVariable0.getForm();
      rawVariable0.getColumnStart();
      rawVariable0.getSupportingDocuments();
      rawVariable0.clone();
      rawVariable0.getDisplayName();
      Variable.validateFields(rawVariable0);
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.hasSameDisplayName(rawVariable1);
      assertEquals("general.fieldValue.blank", rawVariable0.getLabel());
      
      Variable.detectChangesInAlternativeVariable(user0, rawVariable1, rawVariable1);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = (DerivedVariable)derivedVariable0.clone();
      assertEquals("Unknown", derivedVariable1.getCategory());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9385005954171288
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList0 = rawVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ontologyTerm1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate0.and(predicate3);
      predicate2.or(predicate1);
      predicate2.and(predicate3);
      Integer integer0 = new Integer(1);
      predicate4.test(integer0);
      Predicate<Object> predicate7 = predicate6.and(predicate1);
      Predicate<Object> predicate8 = predicate4.and(predicate1);
      predicate5.negate();
      Predicate<Object> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = Predicate.isEqual((Object) arrayList0);
      predicate9.or(predicate7);
      Predicate<Object> predicate11 = predicate0.and(predicate2);
      predicate11.and(predicate10);
      predicate8.negate();
      arrayList0.removeIf(predicate11);
      arrayList0.add(ontologyTerm1);
      arrayList0.add(ontologyTerm0);
      assertEquals(2, arrayList0.size());
      
      UnaryOperator.identity();
      UnaryOperator.identity();
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      arrayList1.add(ontologyTerm2);
      rawVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      OntologyTerm ontologyTerm5 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      rawVariable0.removeOntologyTerm(ontologyTerm3);
      assertFalse(rawVariable0.isCoded());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setForm((String) null);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.removeOntologyTerm(ontologyTerm0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ontologyTerm2);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.or(predicate2);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      predicate4.and(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      predicate5.test((Object) null);
      predicate5.and(predicate5);
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) arrayList2);
      arrayList2.removeIf(predicate6);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      Function<Object, OntologyTerm> function0 = (Function<Object, OntologyTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ? extends OntologyTerm>) function0);
      arrayList1.replaceAll(unaryOperator0);
      ArrayList<OntologyTerm> arrayList3 = new ArrayList<OntologyTerm>();
      derivedVariable0.setOntologyTerms(arrayList3);
      ArrayList<ValueLabel> arrayList4 = new ArrayList<ValueLabel>();
      User user0 = new User();
      String string0 = rawVariable0.getFilePath();
      assertNotNull(string0);
      
      System.setCurrentTimeMillis(2456L);
      derivedVariable0.getFilePath();
      assertFalse(derivedVariable0.isCoded());
      assertFalse(derivedVariable0.isCleaned());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
      assertFalse(derivedVariable0.isNewRecord());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      // Undeclared exception!
      try { 
        derivedVariable0.addSupportingDocuments((ArrayList<SupportingDocument>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.7854068541386123
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      rawVariable0.setCleaningDescription("UNABLE_TO_DELETE_USER");
      valueLabel0.setLabel("UNABLE_TO_DELETE_USER");
      valueLabel0.setIdentifier(2431);
      User user0 = new User("UNABLE_TO_DELETE_USER", "UNABLE_TO_DELETE_USER");
      user0.setCity((String) null);
      ValueLabel.differencesExist(user0, rawVariable0, valueLabel0, valueLabel0);
      rawVariable0.setNotes((String) null);
      rawVariable0.removeValueLabel(valueLabel0);
      rawVariable0.getDisplayName();
      rawVariable0.clone();
      rawVariable0.getSupportingDocuments();
      rawVariable0.getAlternativeVariable();
      System.setCurrentTimeMillis(2431);
      rawVariable0.getNotes();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.columnEnd = "variable.columnEnd.label";
      // Undeclared exception!
      try { 
        derivedVariable0.containsSourceVariable((Variable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.DerivedVariable", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.574464215715726
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      Variable.validateFields(rawVariable0);
      rawVariable0.setLabel((String) null);
      ArrayList<ValueLabel> arrayList0 = new ArrayList<ValueLabel>();
      arrayList0.add((ValueLabel) null);
      rawVariable0.setCodeBookNumber("acP");
      arrayList0.remove((Object) "acP");
      rawVariable0.setLabel("variable.isCleaned.saveChanges.changedToNotClean");
      rawVariable0.setValueLabels(arrayList0);
      rawVariable0.getLabel();
      assertEquals("acP", rawVariable0.getCodeBookNumber());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.669841593430007
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ontologyTerm1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate1.or(predicate1);
      predicate2.and(predicate1);
      predicate3.and(predicate4);
      predicate1.negate();
      Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate5 = predicate0.or(predicate2);
      predicate3.and(predicate5);
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      ChangeEventType changeEventType0 = ChangeEventType.ONTOLOGY_TERM;
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent(changeEventType0, " =hi'R8[U[[erI%", " =hi'R8[U[[erI%");
      predicate2.test(macawChangeEvent0);
      Predicate.isEqual((Object) predicate2);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      arrayList0.add(ontologyTerm2);
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      ArrayList<OntologyTerm> arrayList1 = rawVariable0.getOntologyTerms();
      arrayList1.replaceAll(unaryOperator0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.questionNumber = " =hi'R8[U[[erI%";
      derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm3);
      ArrayList<OntologyTerm> arrayList2 = rawVariable0.getOntologyTerms();
      derivedVariable0.setOntologyTerms(arrayList2);
      derivedVariable0.cloneAttributes(rawVariable0);
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      OntologyTerm ontologyTerm5 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm5);
      rawVariable0.removeOntologyTerm(ontologyTerm5);
      assertEquals(" =hi'R8[U[[erI%", rawVariable0.getQuestionNumber());
      
      String string0 = derivedVariable0.getColumnStart();
      assertEquals("", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.724232061207118
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.getDisplayName();
      ArrayList<ValueLabel> arrayList0 = rawVariable0.getValueLabels();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      arrayList0.add((ValueLabel) null);
      derivedVariable0.containsSourceVariable(rawVariable0);
      arrayList0.add((ValueLabel) null);
      User user0 = new User("UNABLE_TO_GET_SOURCE_VARIABLES", "UNABLE_TO_GET_SOURCE_VARIABLES");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.setValueLabels(arrayList0);
      derivedVariable1.containsSourceVariable(derivedVariable0);
      derivedVariable1.setColumnStart("INVALID_CATEGORY");
      derivedVariable1.createVariableSummary();
      DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable1);
      derivedVariable0.getName();
      derivedVariable0.cloneAttributes(rawVariable0);
      System.setCurrentTimeMillis((-1L));
      rawVariable0.getCleaningDescription();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      String string0 = "";
      int int0 = 2;
      try { 
        OntologyTerm.validateFields(ontologyTerm0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.OntologyTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.7834301322356256
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setLabel("'>");
      User user0 = new User();
      user0.setPassword("'>");
      user0.setAddressLine2("'>");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable2);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFileName("'>");
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      SupportingDocument supportingDocument5 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument5);
      ArrayList<SupportingDocument> arrayList0 = derivedVariable2.getSupportingDocuments();
      derivedVariable1.removeSupportingDocuments(arrayList0);
      derivedVariable1.containsSupportingDocument(supportingDocument5);
      SupportingDocument supportingDocument6 = new SupportingDocument();
      SupportingDocument supportingDocument7 = new SupportingDocument();
      SupportingDocument supportingDocument8 = new SupportingDocument();
      SupportingDocument supportingDocument9 = new SupportingDocument();
      SupportingDocument supportingDocument10 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument10);
      SupportingDocument supportingDocument11 = new SupportingDocument();
      SupportingDocument supportingDocument12 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument2);
      derivedVariable0.getOntologyTerms();
      derivedVariable0.cloneAttributes(derivedVariable2);
      assertEquals("'>", derivedVariable2.getLabel());
      assertEquals("'>", derivedVariable0.getLabel());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      RawVariable rawVariable1 = new RawVariable();
      User user0 = new User("Z2<D9kr0^Ot4(;", "variable.isCleaned.saveChanges.changedToNotClean");
      User user1 = new User();
      user1.setCounty("F4>,&ULM}Hj^[");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.columnEnd = "F4>,&ULM}Hj^[";
      String string0 = derivedVariable0.getNotes();
      assertFalse(derivedVariable0.isCoded());
      assertEquals("", string0);
      assertFalse(derivedVariable0.isCleaned());
      assertFalse(derivedVariable0.isNewRecord());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.6453168013182604
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.removeOntologyTerm(ontologyTerm0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList1);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      ontologyTerm1.setIdentifier(110);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      predicate2.or(predicate3);
      arrayList1.removeIf(predicate2);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      arrayList1.add(ontologyTerm1);
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      arrayList1.replaceAll(unaryOperator0);
      arrayList1.replaceAll(unaryOperator0);
      derivedVariable0.getOntologyTerms();
      derivedVariable0.setOntologyTerms(arrayList1);
      ArrayList<ValueLabel> arrayList2 = new ArrayList<ValueLabel>();
      derivedVariable0.setAvailability("W?Oa O9");
      derivedVariable0.cloneAttributes(rawVariable0);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      derivedVariable0.removeSourceVariable(rawVariable0);
      assertEquals("W?Oa O9", derivedVariable0.getAvailability());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.7241342377784066
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      RawVariable rawVariable1 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setName("+:gP`aJWrQ$z&");
      User user0 = new User();
      user0.setAddressLine2("Bw*uZ6~H\"C\"H6,dJt @");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable2, derivedVariable0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      derivedVariable0.getName();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable1.getSupportingDocuments();
      derivedVariable1.removeSupportingDocuments(arrayList0);
      DerivedVariable derivedVariable3 = new DerivedVariable();
      derivedVariable3.notes = "variable.codeBookNumber.label";
      derivedVariable3.cloneAttributes(derivedVariable0);
      assertEquals("variable.codeBookNumber.label", derivedVariable3.getNotes());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0418856049423066
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setName("'>");
      derivedVariable0.setQuestionNumber("'>");
      User user0 = new User();
      user0.setAddressLine2("'>");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable derivedVariable3 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable2, derivedVariable0);
      assertEquals("'>", derivedVariable0.getQuestionNumber());
      
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFileName("'>");
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      derivedVariable3.addSupportingDocument(supportingDocument0);
      derivedVariable3.getSupportingDocuments();
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable4 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable1);
      DerivedVariable derivedVariable5 = new DerivedVariable();
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable5, derivedVariable2);
      User user1 = new User();
      User user2 = new User();
      User user3 = new User();
      User user4 = new User();
      User user5 = new User();
      User user6 = new User();
      User user7 = new User();
      rawVariable0.getAlternativeVariable();
      assertEquals("Unknown", rawVariable0.getCategory());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.questionNumber = "hK-\"j%sb";
      rawVariable0.codeBookNumber = "macaw.businessLayer.Variable";
      Predicate.isEqual((Object) rawVariable0);
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "macaw.businessLayer.Variable");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      arrayList1.removeIf(predicate2);
      arrayList1.add((OntologyTerm) null);
      arrayList0.add((OntologyTerm) null);
      UnaryOperator.identity();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      arrayList2.add(ontologyTerm0);
      rawVariable0.getOntologyTerms();
      // Undeclared exception!
      try { 
        rawVariable0.updateOntologyTerm((OntologyTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user0 = new User("B?GEC(ik", "k~:jywAJlltM];@'");
      User user1 = new User();
      User user2 = new User();
      System.setCurrentTimeMillis((-1845L));
      String string0 = derivedVariable0.getAvailability();
      assertFalse(derivedVariable0.isCleaned());
      assertFalse(derivedVariable0.isCoded());
      assertFalse(derivedVariable0.isNewRecord());
      assertEquals("Unknown", string0);
      assertEquals(0, derivedVariable0.getIdentifier());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      SupportingDocument supportingDocument5 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument3);
      derivedVariable0.getSupportingDocuments();
      // Undeclared exception!
      try { 
        derivedVariable0.removeSupportingDocuments((ArrayList<SupportingDocument>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.7856784786699715
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.setCodeBookNumber("Bw*uZ6~H\"C\"H6,dJt @");
      rawVariable0.getFilePath();
      rawVariable0.setAlias("macaw.system.MacawException");
      rawVariable0.getIdentifier();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ontologyTerm0.setIdentifier(0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      rawVariable0.addOntologyTerm(ontologyTerm2);
      rawVariable0.clone();
      rawVariable0.getColumnStart();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.setName("M&lxq|X+BdK5`im&M");
      rawVariable0.setAlias("macaw.system.MacawException");
      rawVariable1.getYear();
      assertEquals("M&lxq|X+BdK5`im&M", rawVariable1.getName());
      
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      arrayList0.replaceAll(unaryOperator0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setOntologyTerms(arrayList0);
      ArrayList<ValueLabel> arrayList1 = new ArrayList<ValueLabel>();
      RawVariable rawVariable2 = new RawVariable();
      derivedVariable0.cloneAttributes(rawVariable2);
      RawVariable rawVariable3 = new RawVariable();
      rawVariable3.updateOntologyTerm(ontologyTerm2);
      assertEquals(0, rawVariable3.getIdentifier());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.747174004791234
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.getCategory();
      derivedVariable0.setName("Unknown");
      User user0 = new User("Unknown", "Unknown");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable1.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      derivedVariable1.addSupportingDocument(supportingDocument2);
      derivedVariable0.getName();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      derivedVariable0.removeSupportingDocuments(arrayList0);
      derivedVariable0.cloneAttributes(derivedVariable1);
      assertEquals("Unknown", derivedVariable1.getDisplayName());
      assertEquals("Unknown", derivedVariable0.getDisplayName());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.970986192731046
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setName("'>");
      User user0 = new User();
      user0.setAddressLine2("'>");
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      derivedVariable0.removeSupportingDocuments(arrayList0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable derivedVariable3 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable3, derivedVariable0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable1.addSourceVariable(derivedVariable3);
      derivedVariable1.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      derivedVariable1.columnEnd = "'>";
      Variable.validateFields(derivedVariable0);
      derivedVariable0.addSupportingDocument(supportingDocument0);
      ArrayList<SupportingDocument> arrayList1 = derivedVariable1.getSupportingDocuments();
      // Undeclared exception!
      try { 
        derivedVariable1.removeSupportingDocuments(arrayList1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      User user0 = new User("af}Q=0,>YAv;fiqA#@e", "O%-gEPj]X\n");
      RawVariable rawVariable0 = new RawVariable();
      User user1 = new User("z", "af}Q=0,>YAv;fiqA#@e");
      user1.setFirstName("O%-gEPj]X\n");
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, (Variable) null);
      User user2 = new User();
      User user3 = new User();
      User user4 = new User();
      User user5 = new User();
      User user6 = new User();
      User user7 = new User("af}Q=0,>YAv;fiqA#@e", "O%-gEPj]X\n");
      User user8 = new User();
      User user9 = new User();
      assertEquals("", user9.getLastName());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.2162443181522673
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      User user0 = new User();
      User user1 = new User();
      User user2 = new User("INVALID_ALIAS_FILE_PATH", "INVALID_ALIAS_FILE_PATH");
      User user3 = new User();
      User user4 = new User();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable((Variable) null);
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, rawVariable0);
      User user5 = new User();
      User user6 = new User();
      User user7 = new User();
      User user8 = new User();
      User user9 = new User();
      User user10 = new User();
      User user11 = new User();
      User user12 = new User();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.getAlternativeVariable();
      // Undeclared exception!
      try { 
        Variable.validateFields((Variable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.521452740110338
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.removeOntologyTerm(ontologyTerm0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList1);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate0.or(predicate4);
      Predicate<Object> predicate5 = predicate3.negate();
      predicate5.and(predicate2);
      ArrayList<OntologyTerm> arrayList2 = derivedVariable0.getOntologyTerms();
      arrayList2.removeIf(predicate2);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      arrayList1.add(ontologyTerm3);
      arrayList1.add(ontologyTerm2);
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      arrayList2.replaceAll(unaryOperator0);
      derivedVariable0.setOntologyTerms(arrayList1);
      ontologyTerm1.setOntologyName("general.fieldValue.unknown");
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      boolean boolean0 = derivedVariable0.containsOntologyTerm(ontologyTerm1);
      boolean boolean1 = rawVariable0.isCleaned();
      assertFalse(boolean1 == boolean0);
      assertFalse(rawVariable0.isCoded());
      assertEquals("0", rawVariable0.getDisplayItemIdentifier());
      assertFalse(rawVariable0.isNewRecord());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.689067872995674
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      User user0 = new User();
      user0.setAffiliation((String) null);
      String string0 = "";
      user0.setAffiliation("");
      User user1 = new User(" S/'BH@_", (String) null);
      RawVariable rawVariable1 = new RawVariable();
      // Undeclared exception!
      try { 
        Variable.detectChangesInAlternativeVariable((User) null, rawVariable1, rawVariable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.629848447701272
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.removeOntologyTerm(ontologyTerm0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList1);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      predicate2.or(predicate3);
      ontologyTerm1.setDescription((String) null);
      arrayList1.removeIf(predicate2);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      arrayList1.add(ontologyTerm1);
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      arrayList1.replaceAll(unaryOperator0);
      arrayList1.replaceAll(unaryOperator0);
      derivedVariable0.getOntologyTerms();
      derivedVariable0.setName("y'EW9a=");
      derivedVariable0.setOntologyTerms(arrayList1);
      ArrayList<ValueLabel> arrayList2 = new ArrayList<ValueLabel>();
      derivedVariable0.setAvailability("W?Oa O9");
      derivedVariable0.cloneAttributes(rawVariable0);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      assertEquals("W?Oa O9", rawVariable0.getAvailability());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      User user0 = new User();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.questionNumber = "variable.label.labl";
      User user1 = new User("variable.label.labl", "variable.label.labl");
      User user2 = new User("", "INVALID_ALIAS_FILE_PATH");
      User user3 = new User();
      User user4 = new User();
      User user5 = new User();
      User user6 = new User();
      User user7 = new User();
      derivedVariable0.columnEnd = "variable.year.label";
      User user8 = new User("1@YENsv9;0Px]u", "variable.label.labl");
      User user9 = new User();
      String string0 = derivedVariable0.getFilePath();
      assertFalse(derivedVariable0.isCleaned());
      assertFalse(derivedVariable0.isNewRecord());
      assertEquals("", string0);
      assertFalse(derivedVariable0.isCoded());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.7467447448420033
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setForm("#c]=4:*g]iv@6");
      String string0 = "'>";
      derivedVariable0.setName("'>");
      User user0 = new User();
      user0.setAddressLine2("'>");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable derivedVariable3 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable2, derivedVariable0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFileName("'>");
      SupportingDocument supportingDocument1 = new SupportingDocument();
      User user1 = new User("'>", "+:gP`aJWrQ$z&");
      User user2 = new User();
      User user3 = new User();
      String string1 = "variable.columnStart.label";
      User user4 = new User("iK(S)?5m*`jn", "variable.columnStart.label");
      try { 
        User.validateFields(user3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.User", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8962379780650007
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setName("'>");
      User user0 = new User();
      user0.setAddressLine2("'>");
      user0.setUserID(")5rNd@Va7");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFileName("'>");
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      derivedVariable1.addSupportingDocument(supportingDocument4);
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      derivedVariable0.removeSupportingDocuments(arrayList0);
      SupportingDocument supportingDocument5 = new SupportingDocument();
      SupportingDocument supportingDocument6 = new SupportingDocument();
      SupportingDocument supportingDocument7 = new SupportingDocument();
      SupportingDocument supportingDocument8 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument4);
      assertEquals("'>", derivedVariable0.getName());
      
      SupportingDocument supportingDocument9 = new SupportingDocument();
      SupportingDocument supportingDocument10 = new SupportingDocument();
      SupportingDocument supportingDocument11 = new SupportingDocument();
      boolean boolean0 = derivedVariable1.containsSupportingDocument(supportingDocument11);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.9169986404446697
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setName("'>");
      User user0 = new User();
      user0.setAddressLine2("'>");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable2);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFileName("'>");
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      derivedVariable1.addSupportingDocument(supportingDocument4);
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      derivedVariable0.removeSupportingDocuments(arrayList0);
      SupportingDocument supportingDocument5 = null;
      // Undeclared exception!
      try { 
        derivedVariable2.containsSupportingDocument((SupportingDocument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.3143719702816234
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      SupportingDocument supportingDocument5 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument5);
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      derivedVariable0.removeSupportingDocuments(arrayList0);
      derivedVariable0.containsSupportingDocument(supportingDocument1);
      SupportingDocument supportingDocument6 = new SupportingDocument();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.containsSupportingDocument(supportingDocument0);
      RawVariable rawVariable0 = new RawVariable();
      RawVariable rawVariable1 = new RawVariable();
      // Undeclared exception!
      try { 
        rawVariable1.removeOntologyTerm((OntologyTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.6609431845496183
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFileName("OW+@x");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      derivedVariable0.setSupportingDocuments(arrayList0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument3);
      ArrayList<SupportingDocument> arrayList1 = derivedVariable0.getSupportingDocuments();
      derivedVariable0.removeSupportingDocuments(arrayList1);
      derivedVariable0.containsSupportingDocument(supportingDocument3);
      SupportingDocument supportingDocument4 = new SupportingDocument();
      SupportingDocument supportingDocument5 = new SupportingDocument();
      SupportingDocument supportingDocument6 = new SupportingDocument();
      SupportingDocument supportingDocument7 = new SupportingDocument();
      boolean boolean0 = derivedVariable0.containsSupportingDocument(supportingDocument2);
      assertTrue(boolean0);
      
      SupportingDocument supportingDocument8 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.cloneAttributes(rawVariable0);
      assertEquals("Unknown", rawVariable0.getCleaningStatus());
      assertFalse(rawVariable0.isCoded());
      assertFalse(rawVariable0.isCleaned());
      assertFalse(rawVariable0.isNewRecord());
      assertEquals("Unknown", rawVariable0.getCategory());
      assertEquals("Unknown", rawVariable0.getAvailability());
      assertEquals("0", rawVariable0.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertEquals(0, derivedVariable0.getIdentifier());
      
      derivedVariable0.setIdentifier(1);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      boolean boolean0 = derivedVariable0.containsSupportingDocument(supportingDocument0);
      assertEquals(1, derivedVariable0.getIdentifier());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.setCleaningStatus("variable.columnEnd.label");
      rawVariable0.removeOntologyTerm(ontologyTerm0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ontologyTerm2);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.or(predicate2);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate1.test(arrayList0);
      predicate1.or(predicate3);
      arrayList1.removeIf(predicate1);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      arrayList1.add(ontologyTerm0);
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super OntologyTerm, ? extends Integer>) function0);
      arrayList1.replaceAll(unaryOperator0);
      arrayList1.replaceAll(unaryOperator0);
      ArrayList<OntologyTerm> arrayList2 = derivedVariable0.getOntologyTerms();
      derivedVariable0.setOntologyTerms(arrayList2);
      System.setCurrentTimeMillis(0L);
      rawVariable0.getQuestionNumber();
      assertEquals("variable.columnEnd.label", rawVariable0.getCleaningStatus());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.580255841983545
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.cloneAttributes(derivedVariable0);
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      // Undeclared exception!
      try { 
        derivedVariable0.removeOntologyTerms((ArrayList<OntologyTerm>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList0 = rawVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ontologyTerm1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate3);
      Predicate<Object> predicate6 = predicate2.or(predicate1);
      predicate4.and(predicate3);
      predicate5.and(predicate6);
      predicate5.negate();
      predicate3.and(predicate4);
      Predicate.isEqual((Object) predicate6);
      Predicate<Object> predicate7 = predicate0.or(predicate4);
      predicate5.and(predicate7);
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Predicate.isEqual((Object) predicate4);
      arrayList0.removeIf(predicate4);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      arrayList1.add(ontologyTerm3);
      arrayList0.add(ontologyTerm4);
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      Function<Object, OntologyTerm> function0 = (Function<Object, OntologyTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super OntologyTerm, ? extends OntologyTerm>) function0);
      arrayList1.replaceAll(unaryOperator0);
      ontologyTerm3.setOntologyName("Unknown");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setCleaned(true);
      derivedVariable0.setOntologyTerms(arrayList1);
      OntologyTerm ontologyTerm5 = new OntologyTerm();
      boolean boolean0 = derivedVariable0.containsOntologyTerm(ontologyTerm1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.7082307052263648
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.removeOntologyTerm(ontologyTerm0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ontologyTerm2);
      Predicate<Object> predicate1 = predicate0.negate();
      arrayList1.add(ontologyTerm2);
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.or(predicate2);
      predicate1.test(arrayList0);
      derivedVariable0.addSupportingDocuments(arrayList0);
      predicate0.test((Object) null);
      predicate1.or(predicate2);
      arrayList1.removeIf(predicate1);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      arrayList1.add(ontologyTerm0);
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      arrayList1.replaceAll(unaryOperator0);
      arrayList1.replaceAll(unaryOperator0);
      ArrayList<OntologyTerm> arrayList2 = derivedVariable0.getOntologyTerms();
      derivedVariable0.setOntologyTerms(arrayList2);
      derivedVariable0.cloneAttributes(rawVariable0);
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm3);
      assertFalse(rawVariable0.isCoded());
      assertFalse(rawVariable0.isNewRecord());
      assertEquals("Unknown", rawVariable0.getCleaningStatus());
      assertEquals("Unknown", rawVariable0.getCategory());
      assertEquals("0", rawVariable0.getDisplayItemIdentifier());
      assertEquals("Unknown", rawVariable0.getAvailability());
      
      boolean boolean0 = derivedVariable0.isCoded();
      assertFalse(derivedVariable0.isCleaned());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.0002932271481244
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setName("'>");
      User user0 = new User();
      user0.setAddressLine2("'>");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable derivedVariable3 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable3, derivedVariable0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable1.addSupportingDocument(supportingDocument0);
      derivedVariable2.setYear("jByL[p");
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      derivedVariable2.addSupportingDocument(supportingDocument0);
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      derivedVariable3.removeSupportingDocuments(arrayList0);
      derivedVariable2.containsSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      SupportingDocument supportingDocument5 = new SupportingDocument();
      supportingDocument5.setDocumentCode("'>");
      SupportingDocument supportingDocument6 = new SupportingDocument();
      derivedVariable1.containsSupportingDocument(supportingDocument5);
      SupportingDocument supportingDocument7 = new SupportingDocument();
      SupportingDocument supportingDocument8 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument0);
      assertEquals("'>", derivedVariable0.getDisplayName());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.6218445153853693
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      RawVariable rawVariable0 = new RawVariable();
      String string0 = "";
      User user0 = new User("O;@<V->O@zCj", "");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.setColumnStart("B?GEC(ik");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ontologyTerm1.setNewRecord(false);
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, rawVariable1);
      ArrayList<OntologyTerm> arrayList0 = derivedVariable1.getOntologyTerms();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      arrayList0.add(ontologyTerm2);
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      arrayList2.add(ontologyTerm2);
      // Undeclared exception!
      try { 
        derivedVariable1.removeOntologyTerms(arrayList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.7072672244219262
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.cloneAttributes(derivedVariable0);
      ArrayList<OntologyTerm> arrayList0 = derivedVariable0.getOntologyTerms();
      derivedVariable0.removeOntologyTerms(arrayList0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      assertEquals("Unknown", derivedVariable0.getCategory());
      assertEquals("Unknown", derivedVariable0.getAvailability());
      assertFalse(derivedVariable0.isNewRecord());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
      assertEquals("Unknown", derivedVariable0.getCleaningStatus());
      assertFalse(derivedVariable0.isCleaned());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList0 = rawVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ontologyTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate2.or(predicate3);
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate0.and(predicate4);
      predicate2.or(predicate1);
      predicate2.and(predicate4);
      Integer integer0 = new Integer(1);
      predicate5.test(integer0);
      Predicate<Object> predicate8 = predicate7.and(predicate1);
      predicate2.negate();
      predicate6.negate();
      predicate7.test(ontologyTerm0);
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = Predicate.isEqual((Object) arrayList0);
      predicate9.or(predicate8);
      Predicate<Object> predicate11 = predicate0.and(predicate2);
      predicate11.and(predicate10);
      predicate10.negate();
      arrayList0.removeIf(predicate11);
      arrayList0.add(ontologyTerm0);
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<OntologyTerm> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super OntologyTerm, ? extends OntologyTerm>) unaryOperator1);
      arrayList0.replaceAll(unaryOperator1);
      ontologyTerm1.setOntologyName("AF2v(lXv!p2FTq]");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setOntologyTerms((ArrayList<OntologyTerm>) null);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      // Undeclared exception!
      try { 
        derivedVariable0.containsOntologyTerm(ontologyTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.1499732228295376
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      User user0 = new User();
      User user1 = new User();
      user0.setLastName("UNABLE_TO_CHECK_ALIAS_FILE_PATH_DUPLICATE");
      User user2 = new User("INALID_ALIAS_FILE_PATH", "user.password.saveChanges");
      User user3 = new User();
      User user4 = new User();
      user3.setPassword("^lqsj");
      user3.setPhone("<$%{s%J8z`mYB)W^I");
      user3.setAddressLine2((String) null);
      User user5 = new User();
      user5.setFirstName("nQO!_8,W$-");
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable0);
      User user6 = new User();
      User user7 = new User();
      User user8 = new User();
      User user9 = new User();
      User user10 = new User();
      User user11 = new User();
      rawVariable0.setIsNewRecord(true);
      User user12 = new User();
      User user13 = new User();
      Variable variable0 = rawVariable0.getAlternativeVariable();
      assertFalse(variable0.isNewRecord());
      
      int int0 = rawVariable0.getIdentifier();
      assertTrue(rawVariable0.isNewRecord());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.86257310963418
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.columnStart = "_";
      User user0 = new User("O;@<V->O@zCj", "");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setColumnStart("B{v'cO 3$]dc");
      assertEquals("B{v'cO 3$]dc", rawVariable0.getColumnStart());
      
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable1, derivedVariable0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFileName("B{v'cO 3$]dc");
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      derivedVariable1.addSupportingDocument(supportingDocument4);
      RawVariable rawVariable1 = new RawVariable();
      ArrayList<SupportingDocument> arrayList0 = rawVariable1.getSupportingDocuments();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable2.removeSupportingDocuments(arrayList0);
      SupportingDocument supportingDocument5 = new SupportingDocument();
      SupportingDocument supportingDocument6 = new SupportingDocument();
      SupportingDocument supportingDocument7 = new SupportingDocument();
      SupportingDocument supportingDocument8 = new SupportingDocument();
      DerivedVariable derivedVariable3 = new DerivedVariable();
      derivedVariable3.containsSupportingDocument(supportingDocument4);
      SupportingDocument supportingDocument9 = new SupportingDocument();
      SupportingDocument supportingDocument10 = new SupportingDocument();
      SupportingDocument supportingDocument11 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument2);
      assertEquals("Unknown", derivedVariable0.getCategory());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.9392647432128456
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setName("'>");
      User user0 = new User();
      user0.setAddressLine2("'>");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable derivedVariable3 = new DerivedVariable();
      DerivedVariable derivedVariable4 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable4, derivedVariable0);
      derivedVariable4.setCategory("/");
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable1.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      derivedVariable2.addSupportingDocument(supportingDocument1);
      ArrayList<SupportingDocument> arrayList0 = derivedVariable2.getSupportingDocuments();
      // Undeclared exception!
      try { 
        derivedVariable2.removeSupportingDocuments(arrayList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.970797602443446
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setName("'>");
      User user0 = new User();
      user0.setAddressLine2("'>");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable derivedVariable3 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable2, derivedVariable0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFileName("'>");
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      derivedVariable3.addSupportingDocument(supportingDocument0);
      ArrayList<SupportingDocument> arrayList0 = derivedVariable3.getSupportingDocuments();
      arrayList0.iterator();
      derivedVariable2.removeSupportingDocuments(arrayList0);
      derivedVariable3.containsSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument4 = new SupportingDocument();
      SupportingDocument supportingDocument5 = new SupportingDocument();
      SupportingDocument supportingDocument6 = new SupportingDocument();
      supportingDocument6.clone();
      SupportingDocument supportingDocument7 = new SupportingDocument();
      derivedVariable1.containsSupportingDocument(supportingDocument6);
      SupportingDocument supportingDocument8 = new SupportingDocument();
      SupportingDocument supportingDocument9 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument9);
      derivedVariable0.getDisplayName();
      assertEquals("'>", derivedVariable0.getDisplayName());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.7112729587474917
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.removeOntologyTerm(ontologyTerm0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      ontologyTerm2.setNameSpace((String) null);
      rawVariable0.addOntologyTerm(ontologyTerm2);
      rawVariable0.clone();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.setAlias("NO_ONTOLOGY_TERM_FILTER");
      rawVariable1.getYear();
      UnaryOperator.identity();
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList2 = rawVariable0.getOntologyTerms();
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply(ontologyTerm0);
      arrayList2.replaceAll(unaryOperator0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.setOntologyTerms(arrayList1);
      ArrayList<ValueLabel> arrayList3 = new ArrayList<ValueLabel>();
      RawVariable rawVariable2 = new RawVariable();
      derivedVariable1.cloneAttributes(derivedVariable0);
      RawVariable rawVariable3 = new RawVariable();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm3);
      assertEquals("NO_ONTOLOGY_TERM_FILTER", rawVariable0.getAlias());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.8872385926133708
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.questionNumber = "hK-\"j%sb";
      User user0 = new User();
      user0.setFirstName("hK-\"j%sb");
      User user1 = new User("NON_EXISTENT_ONTOLOGY_TERM_ASSOCIATION", "NON_EXISTENT_ONTOLOGY_TERM_ASSOCIATION");
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user1, rawVariable0, rawVariable0);
      assertEquals("Changed variable \"Alternative Variable\", field \"blank\", from \"\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
      assertNotNull(macawChangeEvent0);
      assertEquals(0, (int)macawChangeEvent0.getVariableOwnerID());
      
      User user2 = new User();
      User user3 = new User();
      User user4 = new User();
      User user5 = new User();
      User user6 = new User();
      User user7 = new User("9>Z]", "aa`LFP-z{RBxF_+m");
      User user8 = new User();
      User user9 = new User();
      rawVariable0.getAlternativeVariable();
      assertFalse(rawVariable0.isCleaned());
      assertFalse(rawVariable0.isNewRecord());
      assertFalse(rawVariable0.isCoded());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.5813690145252886
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.codeBookNumber = "+:gP`aJWrQ$z&";
      RawVariable rawVariable1 = (RawVariable)rawVariable0.clone();
      assertEquals("", rawVariable1.getLabel());
      assertEquals("Unknown", rawVariable1.getAvailability());
      assertEquals("", rawVariable1.getNotes());
      assertEquals("", rawVariable1.getForm());
      assertEquals("+:gP`aJWrQ$z&", rawVariable1.getCodeBookNumber());
      assertEquals("", rawVariable1.getColumnStart());
      assertEquals("Unknown", rawVariable1.getCleaningStatus());
      assertEquals("Unknown", rawVariable1.getCategory());
      assertEquals(0, rawVariable1.getIdentifier());
      assertEquals("", rawVariable1.getDisplayName());
      assertFalse(rawVariable1.isCleaned());
      assertFalse(rawVariable1.isCoded());
      
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.hasSameDisplayName(rawVariable0);
      assertFalse(rawVariable0.isCleaned());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.9641010569731763
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.getDisplayItemIdentifier();
      rawVariable0.setCodeBookNumber("");
      rawVariable0.getFilePath();
      rawVariable0.setAlias("0");
      rawVariable0.getIdentifier();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.setIdentifier(0);
      rawVariable0.addOntologyTerm(ontologyTerm0);
      rawVariable0.addOntologyTerm(ontologyTerm0);
      rawVariable0.clone();
      rawVariable0.getColumnStart();
      rawVariable0.setName("");
      rawVariable0.setAlias("");
      rawVariable0.getYear();
      rawVariable0.getCleaningDescription();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.containsSourceVariable(rawVariable0);
      derivedVariable0.getIdentifier();
      rawVariable0.getDisplayName();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.setAvailability("0");
      assertEquals("0", derivedVariable1.getAvailability());
      
      derivedVariable1.setAvailability("");
      derivedVariable0.cloneAttributes(rawVariable0);
      Variable.validateFields(derivedVariable1);
      derivedVariable0.createVariableSummary();
      assertFalse(derivedVariable0.isCleaned());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SupportingDocument supportingDocument0 = new SupportingDocument();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.addSupportingDocument(supportingDocument0);
      // Undeclared exception!
      try { 
        derivedVariable1.addOntologyTerms((ArrayList<OntologyTerm>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1488608757772574
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      User user0 = new User();
      User user1 = new User();
      user0.setStatus("lRom~ No)7");
      user0.setLastName("UNABLE_O_CHECK_ALIAS_FILE_PATH_DUPLICATE");
      User user2 = new User("INALID_ALIAS_FILE_PATH", "user.password.saveChanges");
      User user3 = new User();
      User user4 = new User();
      user3.setPassword("^qsj");
      user3.setPhone("<$%{s%J8z`mYB)W^I");
      user3.setAddressLine2((String) null);
      User user5 = new User();
      user5.setCity("<$%{s%J8z`mYB)W^I");
      user5.setFirstName("nQO!_8,W$-");
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      User user6 = new User((String) null, "nQO!_8,W$-");
      user6.setPassword("user.password.saveChanges");
      user6.setUserID("INALID_ALIAS_FILE_PATH");
      user6.setFirstName("nQO!_8,W$-");
      Variable.detectChangesInAlternativeVariable(user6, rawVariable0, derivedVariable0);
      rawVariable0.setColumnEnd("user.email.label");
      User user7 = new User();
      User user8 = new User();
      User user9 = new User();
      User user10 = new User();
      User user11 = new User();
      User user12 = new User("9>Z]", "user.password.saveChanges");
      User user13 = new User("9>Z]", "<");
      rawVariable0.getAlternativeVariable();
      assertEquals("user.email.label", rawVariable0.getColumnEnd());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.665925868143944
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<OntologyTerm> arrayList0 = rawVariable0.getOntologyTerms();
      Integer[] integerArray0 = new Integer[0];
      arrayList0.toArray(integerArray0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.questionNumber = "U;8!";
      arrayList0.add(ontologyTerm0);
      arrayList0.add(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>(arrayList0);
      rawVariable0.setOntologyTerms(arrayList1);
      String string0 = rawVariable0.getCleaningDescription();
      assertEquals("", string0);
      
      RawVariable rawVariable1 = (RawVariable)rawVariable0.clone();
      assertEquals("U;8!", rawVariable1.getQuestionNumber());
      assertFalse(rawVariable1.isCleaned());
      assertEquals("", rawVariable1.getColumnStart());
      assertEquals("Unknown", rawVariable1.getCategory());
      assertEquals("", rawVariable1.getAlias());
      assertEquals("", rawVariable1.getCodeBookNumber());
      assertEquals("", rawVariable1.getFilePath());
      assertFalse(rawVariable1.isNewRecord());
      assertEquals("Unknown", rawVariable1.getCleaningStatus());
      assertFalse(rawVariable1.isCoded());
      assertEquals("", rawVariable1.getColumnEnd());
      assertEquals("Unknown", rawVariable1.getAvailability());
      
      String string1 = rawVariable0.getDisplayItemIdentifier();
      assertEquals("0", string1);
      
      boolean boolean0 = rawVariable0.isCleaned();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.938647740808504
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setName("/*LCpChQ 35>Z");
      User user0 = new User();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      ArrayList<MacawChangeEvent> arrayList0 = DerivedVariable.detectFieldChanges(user0, derivedVariable1, derivedVariable0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFileName("/*LCpChQ 35>Z");
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      derivedVariable2.addSupportingDocument(supportingDocument0);
      ArrayList<SupportingDocument> arrayList1 = derivedVariable2.getSupportingDocuments();
      derivedVariable1.removeSupportingDocuments(arrayList1);
      derivedVariable2.containsSupportingDocument(supportingDocument0);
      derivedVariable0.columnStart = "=D6r|FS";
      SupportingDocument supportingDocument4 = new SupportingDocument();
      SupportingDocument supportingDocument5 = new SupportingDocument();
      SupportingDocument supportingDocument6 = new SupportingDocument();
      SupportingDocument supportingDocument7 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument6);
      SupportingDocument supportingDocument8 = new SupportingDocument();
      SupportingDocument supportingDocument9 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument9);
      ArrayList<MacawChangeEvent> arrayList2 = DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable0);
      assertEquals("=D6r|FS", derivedVariable0.getColumnStart());
      assertFalse(arrayList2.equals((Object)arrayList0));
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.7156245201890656
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      User user0 = new User("38ZDm.(h%*KObH7hHl", "Unknown");
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, derivedVariable0);
      rawVariable0.cloneAttributes(derivedVariable0);
      derivedVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      User user1 = new User("Unknown", "Unknown");
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, rawVariable0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      User user2 = new User();
      User user3 = new User();
      User.detectFieldChanges(user3, user2, user0);
      derivedVariable1.containsSourceVariable(derivedVariable0);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable2.setCleaningDescription("38ZDm.(h%*KObH7hHl");
      DerivedVariable.detectFieldChanges(user0, derivedVariable2, derivedVariable0);
      derivedVariable2.cloneAttributes(derivedVariable0);
      assertEquals("38ZDm.(h%*KObH7hHl", derivedVariable0.getCleaningDescription());
      
      derivedVariable1.getAlternativeVariable();
      assertFalse(derivedVariable1.isCoded());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.6845198108434345
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.createVariableSummary();
      User user0 = new User("'+/", "'+/");
      User user1 = new User();
      User user2 = new User();
      user2.setPhone("L/");
      User.detectFieldChanges(user1, user2, user1);
      derivedVariable0.form = "9B|d*Tr/1e+";
      User user3 = new User();
      DerivedVariable.detectFieldChanges(user1, derivedVariable0, derivedVariable0);
      derivedVariable0.getSourceVariables();
      int int0 = derivedVariable0.getIdentifier();
      assertEquals("9B|d*Tr/1e+", derivedVariable0.getForm());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.632197381311811
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setLabel("'>");
      User user0 = new User();
      user0.setPassword("'>");
      user0.setAddressLine2("'>");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.notes = "'>";
      DerivedVariable.detectFieldChanges(user0, derivedVariable1, derivedVariable0);
      User user1 = new User();
      derivedVariable0.cloneAttributes(derivedVariable1);
      try { 
        User.validateFields(user1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.User", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.removeOntologyTerm(ontologyTerm0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ontologyTerm2);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.or(predicate2);
      predicate1.test(arrayList0);
      predicate0.test((Object) null);
      predicate1.or(predicate2);
      arrayList1.removeIf(predicate1);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      arrayList1.add(ontologyTerm0);
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      arrayList1.replaceAll(unaryOperator0);
      arrayList1.replaceAll(unaryOperator0);
      ArrayList<OntologyTerm> arrayList2 = derivedVariable0.getOntologyTerms();
      derivedVariable0.setOntologyTerms(arrayList2);
      // Undeclared exception!
      try { 
        derivedVariable0.cloneAttributes((Variable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.9410068610812892
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList0 = rawVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ontologyTerm1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate0.and(predicate3);
      predicate2.or(predicate1);
      Integer integer0 = new Integer(1);
      predicate4.test(integer0);
      Predicate<Object> predicate7 = predicate6.and(predicate1);
      Predicate<Object> predicate8 = predicate4.and(predicate1);
      Predicate<Object> predicate9 = predicate5.negate();
      Predicate<Object> predicate10 = predicate7.negate();
      Predicate<Object> predicate11 = Predicate.isEqual((Object) arrayList0);
      predicate10.or(predicate7);
      predicate11.and(predicate6);
      Predicate<Object> predicate12 = predicate9.negate();
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      predicate12.and(predicate11);
      assertFalse(arrayList0.contains(ontologyTerm0));
      
      predicate8.negate();
      boolean boolean0 = arrayList0.removeIf(predicate12);
      arrayList1.add(ontologyTerm1);
      arrayList0.add(ontologyTerm0);
      UnaryOperator.identity();
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      arrayList2.add(ontologyTerm3);
      rawVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm4);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      boolean boolean1 = rawVariable0.hasSameDisplayName(derivedVariable0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      derivedVariable0.setSupportingDocuments(arrayList0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFileName("FC");
      supportingDocument0.setFileName("B?GEC(ik");
      boolean boolean0 = derivedVariable0.containsSupportingDocument(supportingDocument0);
      assertFalse(derivedVariable0.isCoded());
      assertFalse(derivedVariable0.isCleaned());
      assertFalse(boolean0);
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
      assertFalse(derivedVariable0.isNewRecord());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.74471682437329
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ValueLabel valueLabel0 = new ValueLabel();
      ontologyTerm0.setDescription("Ap;EjE.O==nS9W");
      ontologyTerm0.setIdentifier((-1569));
      derivedVariable0.addValueLabel(valueLabel0);
      ValueLabel.validateFields(valueLabel0);
      ontologyTerm0.setTerm("8-A#(BNy:>3");
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      ValueLabel valueLabel1 = new ValueLabel();
      valueLabel1.getDisplayName();
      ValueLabel.validateFields(valueLabel0);
      rawVariable0.removeValueLabel(valueLabel1);
      derivedVariable0.cloneAttributes(rawVariable0);
      boolean boolean0 = rawVariable0.isCoded();
      assertFalse(boolean0);
      
      derivedVariable0.containsSourceVariable(rawVariable0);
      assertFalse(rawVariable0.isCleaned());
      assertEquals(0, rawVariable0.getIdentifier());
      assertEquals("Unknown", rawVariable0.getCategory());
      assertFalse(rawVariable0.isNewRecord());
      assertEquals("Unknown", rawVariable0.getCleaningStatus());
      assertEquals("Unknown", rawVariable0.getAvailability());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.removeOntologyTerm(ontologyTerm0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      ValueLabel valueLabel0 = new ValueLabel();
      derivedVariable0.addValueLabel(valueLabel0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ontologyTerm2);
      predicate0.negate();
      // Undeclared exception!
      try { 
        arrayList1.set((-2013265917), ontologyTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      User user0 = new User("2W C8&#Z#t'RC4q", "?9F/BC-6 vUOwd:R");
      // Undeclared exception!
      try { 
        Variable.detectFieldChanges(user0, (Variable) null, (Variable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.9700712845710653
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setName("'>");
      User user0 = new User();
      user0.setAddressLine2("'>");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable2.setCodeBookNumber("'>");
      DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable2);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFileName("'>");
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      derivedVariable1.addSupportingDocument(supportingDocument4);
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      derivedVariable0.removeSupportingDocuments(arrayList0);
      SupportingDocument supportingDocument5 = new SupportingDocument();
      SupportingDocument supportingDocument6 = new SupportingDocument();
      SupportingDocument supportingDocument7 = new SupportingDocument();
      SupportingDocument supportingDocument8 = new SupportingDocument();
      // Undeclared exception!
      try { 
        derivedVariable0.containsSupportingDocument((SupportingDocument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.6852661909001596
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      String string0 = "'>";
      derivedVariable0.setLabel("'>");
      User user0 = new User();
      user0.setPassword("'>");
      user0.setAddressLine2("'>");
      derivedVariable0.notes = "'>";
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable1, derivedVariable0);
      User user1 = new User();
      derivedVariable0.getColumnEnd();
      try { 
        User.validateFields(user1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.User", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.534616400831924
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.columnStart = "+:gP`aJWrQ$z&";
      rawVariable0.codeBookNumber = "+:gP`aJWrQ$z&";
      RawVariable rawVariable1 = (RawVariable)rawVariable0.clone();
      assertEquals("Unknown", rawVariable1.getCleaningStatus());
      assertEquals("", rawVariable1.getNotes());
      assertEquals("Unknown", rawVariable1.getAvailability());
      assertEquals("", rawVariable1.getQuestionNumber());
      assertFalse(rawVariable1.isNewRecord());
      assertEquals("Unknown", rawVariable1.getCategory());
      assertEquals("", rawVariable1.getCleaningDescription());
      assertFalse(rawVariable1.isCleaned());
      assertEquals("+:gP`aJWrQ$z&", rawVariable1.getCodeBookNumber());
      assertEquals("", rawVariable1.getLabel());
      assertEquals("", rawVariable1.getColumnEnd());
      assertEquals("", rawVariable1.getYear());
      assertEquals("+:gP`aJWrQ$z&", rawVariable1.getColumnStart());
      assertEquals(0, rawVariable1.getIdentifier());
      assertEquals("", rawVariable1.getDisplayName());
      assertFalse(rawVariable1.isCoded());
      assertEquals("", rawVariable1.getAlias());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.9172299880444386
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.removeOntologyTerm(ontologyTerm0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList1);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate4.or(predicate3);
      predicate0.or(predicate4);
      Predicate<Object> predicate5 = predicate3.negate();
      predicate5.and(predicate2);
      ArrayList<OntologyTerm> arrayList2 = derivedVariable0.getOntologyTerms();
      arrayList2.removeIf(predicate2);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      arrayList1.add(ontologyTerm3);
      UnaryOperator.identity();
      derivedVariable0.getOntologyTerms();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.setFilePath("+:gP`aJWrQ$z&");
      derivedVariable1.setOntologyTerms(arrayList2);
      assertEquals("+:gP`aJWrQ$z&", derivedVariable1.getFilePath());
      
      ArrayList<ValueLabel> arrayList3 = new ArrayList<ValueLabel>();
      User user0 = new User();
      ArrayList<MacawChangeEvent> arrayList4 = RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      assertEquals(0, arrayList4.size());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.70816141220136
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.removeOntologyTerm(ontologyTerm0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      rawVariable0.columnEnd = "@*``n}0)_jk Rh";
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      derivedVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ontologyTerm2);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.or(predicate2);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      predicate4.and(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      predicate5.and(predicate5);
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      Object object0 = rawVariable0.clone();
      arrayList1.remove(object0);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) arrayList1);
      arrayList1.removeIf(predicate6);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      Function<Object, OntologyTerm> function0 = (Function<Object, OntologyTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ? extends OntologyTerm>) function0);
      User user0 = new User();
      User user1 = new User();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.534616400831924
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.questionNumber = "hK-\"j%sb";
      rawVariable0.codeBookNumber = "macaw.busi]XssLaGer.Viable";
      rawVariable0.codeBookNumber = "+:gP`aPWrQ$z&";
      RawVariable rawVariable1 = (RawVariable)rawVariable0.clone();
      assertFalse(rawVariable1.isCleaned());
      assertEquals("", rawVariable1.getName());
      assertEquals("", rawVariable1.getColumnStart());
      assertEquals("", rawVariable1.getForm());
      assertEquals("", rawVariable1.getColumnEnd());
      assertEquals("+:gP`aPWrQ$z&", rawVariable1.getCodeBookNumber());
      assertEquals("", rawVariable1.getCleaningDescription());
      assertEquals("", rawVariable1.getAlias());
      assertEquals("Unknown", rawVariable1.getCategory());
      assertEquals("", rawVariable1.getFilePath());
      assertFalse(rawVariable1.isNewRecord());
      assertEquals("0", rawVariable1.getDisplayItemIdentifier());
      assertEquals("Unknown", rawVariable1.getAvailability());
      assertEquals("", rawVariable1.getYear());
      assertEquals("", rawVariable1.getNotes());
      assertEquals("Unknown", rawVariable1.getCleaningStatus());
      assertFalse(rawVariable1.isCoded());
      assertEquals("hK-\"j%sb", rawVariable1.getQuestionNumber());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.534616400831924
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.form = "+";
      rawVariable0.codeBookNumber = "+:gP`aJWrQ$z&";
      RawVariable rawVariable1 = (RawVariable)rawVariable0.clone();
      assertFalse(rawVariable1.isCleaned());
      assertEquals("+:gP`aJWrQ$z&", rawVariable1.getCodeBookNumber());
      assertEquals("", rawVariable1.getColumnEnd());
      assertEquals("", rawVariable1.getLabel());
      assertEquals("", rawVariable1.getColumnStart());
      assertEquals("Unknown", rawVariable1.getCategory());
      assertEquals("", rawVariable1.getCleaningDescription());
      assertFalse(rawVariable1.isNewRecord());
      assertEquals("Unknown", rawVariable1.getAvailability());
      assertEquals("", rawVariable1.getNotes());
      assertEquals("", rawVariable1.getYear());
      assertEquals("", rawVariable1.getQuestionNumber());
      assertEquals("", rawVariable1.getFilePath());
      assertEquals("+", rawVariable1.getForm());
      assertEquals("", rawVariable1.getDisplayName());
      assertEquals("Unknown", rawVariable1.getCleaningStatus());
      assertEquals(0, rawVariable1.getIdentifier());
      assertFalse(rawVariable1.isCoded());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      rawVariable0.setCleaningDescription("Ap;EjE.O==nS9W");
      ArrayList<OntologyTerm> arrayList0 = rawVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ontologyTerm1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate3);
      Predicate<Object> predicate6 = predicate2.or(predicate1);
      predicate4.and(predicate3);
      predicate5.and(predicate6);
      predicate5.negate();
      Predicate.isEqual((Object) predicate6);
      Predicate<Object> predicate7 = predicate0.or(predicate4);
      predicate5.and(predicate7);
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      Predicate.isEqual((Object) predicate4);
      arrayList0.removeIf(predicate4);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      arrayList1.add(ontologyTerm3);
      arrayList0.add(ontologyTerm4);
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<OntologyTerm> unaryOperator1 = UnaryOperator.identity();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      unaryOperator0.andThen((Function<? super OntologyTerm, ? extends OntologyTerm>) unaryOperator1);
      arrayList1.replaceAll(unaryOperator1);
      ontologyTerm3.setOntologyName(".6\u0003+nBPf$pu?//q{V");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setOntologyTerms(arrayList0);
      assertEquals("Ap;EjE.O==nS9W", rawVariable0.getCleaningDescription());
      
      OntologyTerm ontologyTerm5 = new OntologyTerm();
      derivedVariable0.containsOntologyTerm(ontologyTerm3);
      derivedVariable0.getForm();
      assertEquals(0, derivedVariable0.getIdentifier());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.removeOntologyTerm(ontologyTerm0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ontologyTerm2);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate3.and(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate4.and(predicate2);
      ArrayList<OntologyTerm> arrayList1 = rawVariable0.getOntologyTerms();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) arrayList1);
      arrayList1.removeIf(predicate5);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      arrayList1.add(ontologyTerm0);
      UnaryOperator.identity();
      derivedVariable0.setOntologyTerms(arrayList1);
      assertEquals(1, arrayList1.size());
      
      OntologyTerm ontologyTerm5 = new OntologyTerm();
      derivedVariable0.containsOntologyTerm(ontologyTerm2);
      boolean boolean0 = derivedVariable0.isNewRecord();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.containsSourceVariable(derivedVariable1);
      derivedVariable0.getAlias();
      assertFalse(derivedVariable0.isNewRecord());
      assertFalse(derivedVariable0.isCleaned());
      assertEquals(0, derivedVariable0.getIdentifier());
      assertFalse(derivedVariable0.isCoded());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList0 = rawVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ontologyTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      predicate0.and(predicate3);
      predicate4.or(predicate2);
      Predicate<Object> predicate5 = predicate4.and(predicate3);
      predicate5.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) null);
      predicate6.and(predicate5);
      Integer integer0 = new Integer(2193);
      Predicate.isEqual((Object) integer0);
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      Predicate.isEqual((Object) supportingDocument0);
      rawVariable0.addOntologyTerms(arrayList1);
      arrayList1.removeIf(predicate3);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      arrayList0.add(ontologyTerm2);
      arrayList1.add(ontologyTerm0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user0 = new User("Bw*uZ6~H\"C\"H6,dJt @", "Bw*uZ6~H\"C\"H6,dJt @");
      User user1 = new User();
      User user2 = new User();
      RawVariable rawVariable1 = new RawVariable();
      derivedVariable0.removeSourceVariable(rawVariable1);
      assertFalse(rawVariable1.isCoded());
      assertFalse(rawVariable1.isNewRecord());
      assertEquals(0, rawVariable1.getIdentifier());
      assertFalse(rawVariable1.isCleaned());
      assertFalse(derivedVariable0.isCoded());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.9385005954171288
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList0 = rawVariable0.getOntologyTerms();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ontologyTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate2.or(predicate3);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate0.and(predicate4);
      predicate6.test(predicate4);
      Predicate<Object> predicate8 = predicate0.and(predicate2);
      Predicate<Object> predicate9 = predicate4.negate();
      Predicate<Object> predicate10 = predicate2.negate();
      predicate10.and(predicate3);
      Predicate<Object> predicate11 = predicate10.negate();
      predicate3.or(predicate5);
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent();
      Predicate.isEqual((Object) macawChangeEvent0);
      predicate11.or(predicate7);
      predicate1.or(predicate11);
      Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate12 = predicate9.negate();
      Predicate<Object> predicate13 = predicate8.negate();
      predicate13.test(predicate12);
      predicate13.and(predicate9);
      Predicate<Object> predicate14 = predicate5.negate();
      Predicate.isEqual((Object) predicate0);
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      predicate7.and(predicate14);
      arrayList1.removeIf(predicate6);
      arrayList1.add(ontologyTerm0);
      arrayList0.add(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      arrayList1.add(ontologyTerm0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable1 = new RawVariable();
      derivedVariable0.containsSourceVariable(rawVariable1);
      assertEquals(0, derivedVariable0.getIdentifier());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.1488608757772574
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      User user0 = new User();
      User user1 = new User();
      user0.setLastName("UNABLE_TO_CHECK_ALIAS_FILE_PATH_DUPLICATE");
      User user2 = new User("INALID_ALIAS_FILE_PATH", "user.password.saveChanges");
      User user3 = new User("user.password.saveChanges", "INALID_ALIAS_FILE_PATH");
      User user4 = new User();
      user3.setAddressLine2((String) null);
      User user5 = new User();
      user5.setFirstName("nQO!_8,W$-");
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      rawVariable0.removeValueLabel(valueLabel0);
      rawVariable0.setAlternativeVariable(derivedVariable0);
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable0);
      assertNotNull(macawChangeEvent0);
      assertEquals("Changed variable \"Alternative Variable\", field \"\", from \"\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
      assertEquals(0, (int)macawChangeEvent0.getVariableOwnerID());
      
      User user6 = new User();
      User user7 = new User();
      User user8 = new User();
      User user9 = new User();
      User user10 = new User();
      User user11 = new User();
      User user12 = new User();
      User user13 = new User();
      rawVariable0.getAlternativeVariable();
      assertFalse(rawVariable0.isCleaned());
      assertFalse(rawVariable0.isCoded());
      assertFalse(rawVariable0.isNewRecord());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.6845198108434345
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      User user0 = new User();
      user0.setAffiliation("");
      user0.setStatus("general.fieldValue.blank");
      user0.setFirstName("variable.year.label");
      user0.setPhone("general.fieldValue.blank");
      user0.setFirstName("Ap;EjE.O==nS9W");
      user0.setAddressLine1(" S/'BH@_");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<ValueLabel> arrayList0 = derivedVariable0.getValueLabels();
      derivedVariable0.setValueLabels(arrayList0);
      DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable0);
      System.setCurrentTimeMillis((-1L));
  }
}
