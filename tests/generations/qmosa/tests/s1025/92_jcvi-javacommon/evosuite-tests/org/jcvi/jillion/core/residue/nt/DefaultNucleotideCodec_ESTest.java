/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 14:32:35 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5139159280205035
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.decodedLengthOf(byteArray0);
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 821);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.toString(byteArray0);
      nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      Set<Nucleotide> set0 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec5.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec5.iterator(byteArray1);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec3.getGappedOffsetFor(byteArray1, 0);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec6.isGap(byteArray0, 0);
      defaultNucleotideCodec0.isGap(byteArray0, 0);
      defaultNucleotideCodec1.getGapOffsets(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode((byte[]) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.976432073516815
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 4294967295L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483645
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.352152342392497
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, 0);
      assertEquals(0, int0);
      
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec1.isGap(byteArray1, (byte) (-2));
      Byte byte0 = new Byte((byte) (-2));
      linkedList0.removeLastOccurrence(byte0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 1908874353);
      assertEquals(1908874353, int1);
      
      defaultNucleotideCodec0.iterator(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec3.encode((-1), (Iterator<Nucleotide>) null);
      defaultNucleotideCodec3.iterator(byteArray1);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getGapOffsets(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)0}, byteArray2);
      
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.decodedLengthOf(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray3 = defaultNucleotideCodec2.encode(nucleotide0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray3);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-9);
      int int0 = 1229541165;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4985380092679708
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      Nucleotide nucleotide1 = defaultNucleotideCodec0.decode(byteArray0, 0);
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      assertEquals(0, int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 4221);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 4221);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.decodedLengthOf(byteArray0);
      int int1 = new Integer(0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec4.toString(byteArray1);
      assertEquals("-", string0);
      
      nucleotide1.getAllPossibleAmbiguities();
      byte[] byteArray2 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set0);
      int int2 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray2, 0);
      assertEquals(1, int2);
      
      DefaultNucleotideCodec.values();
      Integer integer0 = new Integer(2048);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.getNumberOfGapsUntil(byteArray2, (-1071));
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec6.getNumberOfGapsUntil(byteArray0, (-1071));
      Nucleotide nucleotide2 = defaultNucleotideCodec3.decode(byteArray0, 0);
      assertEquals(Nucleotide.Gap, nucleotide2);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.6063620180731144
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, 0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Nucleotide nucleotide1 = Nucleotide.Adenine;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec1.toString(byteArray0);
      assertEquals("", string0);
      
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 78);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide2 = Nucleotide.Purine;
      nucleotide2.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec5.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec6.iterator(byteArray1);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec7.getGappedOffsetFor(byteArray1, 1048);
      DefaultNucleotideCodec defaultNucleotideCodec8 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec7.isGap(byteArray0, 821);
      long long0 = defaultNucleotideCodec8.getUngappedLength(byteArray1);
      assertEquals(0L, long0);
      
      boolean boolean1 = defaultNucleotideCodec7.isGap(byteArray1, 0);
      assertFalse(boolean1 == boolean0);
      
      defaultNucleotideCodec8.getGapOffsets(byteArray1);
      assertEquals(5, byteArray1.length);
      
      defaultNucleotideCodec4.decode(byteArray0, 0L);
      int int0 = defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, (-1359));
      assertEquals((-1359), int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte) (-9);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte) (-9), iterator0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.5615520316360794
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      Nucleotide nucleotide1 = defaultNucleotideCodec0.decode(byteArray0, 0);
      assertEquals(Nucleotide.Gap, nucleotide1);
      
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      nucleotide1.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 4221);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 4221);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.decodedLengthOf(byteArray0);
      int int1 = defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 799);
      assertTrue(int1 == int0);
      
      byte[] byteArray2 = new byte[4];
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.toString(byteArray2);
      Set<Nucleotide> set1 = nucleotide1.getAllPossibleAmbiguities();
      byte[] byteArray3 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, 0);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.iterator(byteArray2);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec5.getNumberOfGapsUntil(byteArray3, 799);
      int int2 = defaultNucleotideCodec5.getNumberOfGapsUntil(byteArray1, 1699);
      assertEquals(1, int2);
      
      byte[] byteArray4 = defaultNucleotideCodec4.encode((Collection<Nucleotide>) set1);
      assertEquals(4, byteArray4.length);
      
      defaultNucleotideCodec2.getGapOffsets(byteArray1);
      assertSame(nucleotide0, nucleotide1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.5615520316360794
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      int int0 = defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      Nucleotide nucleotide1 = defaultNucleotideCodec0.decode(byteArray0, 0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      nucleotide1.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 4221);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 4221);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.decodedLengthOf(byteArray0);
      int int1 = defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 799);
      assertEquals(0, int1);
      
      byte[] byteArray2 = new byte[4];
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.toString(byteArray2);
      Set<Nucleotide> set1 = nucleotide1.getAllPossibleAmbiguities();
      byte[] byteArray3 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set0);
      int int2 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, 0);
      assertFalse(int2 == int1);
      
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.iterator(byteArray2);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec5.getNumberOfGapsUntil(byteArray3, 799);
      defaultNucleotideCodec5.getNumberOfGapsUntil(byteArray1, 1699);
      byte[] byteArray4 = defaultNucleotideCodec4.encode((Collection<Nucleotide>) set1);
      assertEquals(4, byteArray4.length);
      
      List<Integer> list0 = defaultNucleotideCodec2.getGapOffsets(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray1);
      assertTrue(list0.contains(int0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.299190345035193
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 2874);
      assertFalse(boolean0);
      
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec1.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, 0);
      String string0 = defaultNucleotideCodec3.toString(byteArray1);
      assertEquals("CG", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-46)}, byteArray1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)10;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, 3124);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2846518715811976
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, 0);
      assertEquals(Nucleotide.Gap, nucleotide0);
      
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      assertEquals(0, int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 4221);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.decodedLengthOf(byteArray0);
      Nucleotide nucleotide1 = Nucleotide.Unknown;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.decodedLengthOf(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec4.getUngappedLength(byteArray1);
      assertEquals(1L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-16)}, byteArray1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.4655985954525774
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 821);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotThymine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec4.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.iterator(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec7.iterator(byteArray0);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec8 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.getGappedOffsetFor(byteArray1, 781);
      DefaultNucleotideCodec defaultNucleotideCodec9 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec6.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.180068815209871
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = Nucleotide.Purine;
      Set<Nucleotide> set0 = nucleotide1.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide2 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set1 = nucleotide2.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec2.getNumberOfGaps(byteArray0);
      assertEquals(0, int0);
      
      defaultNucleotideCodec1.getGapOffsets(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)18}, byteArray0);
      
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide3 = Nucleotide.Gap;
      byte[] byteArray1 = defaultNucleotideCodec3.encode(nucleotide3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.938311329683084
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte) (-9);
      defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(1229541165, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8609075434234903
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of(0L, 0L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.52762385589389
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)42;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-78));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9252418704396264
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte) (-9);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.encode(8, iterator0);
      Iterator<Nucleotide> iterator1 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(1229541165, iterator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)1;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(11, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)18;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.981763193098644
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)17;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (-41));
      assertEquals(1, int0);
      
      int int1 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (-267));
      assertEquals((-267), int1);
      
      int int2 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-80)}, byteArray1);
      assertEquals(0, int2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor((byte[]) null, 65535);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.valueOf("INSTANCE");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)14;
      defaultNucleotideCodec0.isGap(byteArray0, (byte)26);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte) (-121);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, (-2146832499));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.635203454722414
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)61;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)61);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      defaultNucleotideCodec0.getGapOffsets(byteArray1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)83;
      byteArray1[3] = (byte)61;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)127;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)95);
      byte[] byteArray1 = new byte[4];
      int int0 = 1840700269;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-123);
      byteArray1[2] = (byte) (-123);
      String string0 = "SF*s'KNTg0amWM8B7E";
      // Undeclared exception!
      try { 
        Range.parseRange("SF*s'KNTg0amWM8B7E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse SF*s'KNTg0amWM8B7E into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-29);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte) (-29), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-10);
      byteArray1[1] = (byte)17;
      defaultNucleotideCodec0.iterator(byteArray0);
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)77;
      byteArray1[4] = (byte)110;
      byteArray1[5] = (byte) (-80);
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte)115;
      byteArray1[8] = (byte) (-77);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6952868444197953
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 256);
      byte byte0 = (byte) (-123);
      byte[] byteArray1 = new byte[5];
      defaultNucleotideCodec0.isGap(byteArray0, 1840700269);
      byteArray1[2] = (byte)0;
      byteArray1[2] = (byte) (-123);
      byteArray0[5] = (byte) (-123);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, 1677);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-123);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte) (-123);
      byteArray3[1] = (byte) (-123);
      byteArray3[2] = (byte) (-123);
      byteArray3[3] = (byte) (-123);
      byteArray3[4] = (byte) (-123);
      byteArray3[5] = (byte) (-123);
      byteArray3[6] = (byte) (-123);
      byteArray3[7] = (byte) (-123);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray3, 359);
      byteArray2[1] = (byte) (-123);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.3778475412793196
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)77;
      byteArray0[4] = (byte)104;
      byteArray0[6] = (byte) (-87);
      byteArray0[4] = (byte)1;
      int int0 = (-2033);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-2033));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6241026221599717
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.toString(byteArray0);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)90;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Nucleotide nucleotide1 = Nucleotide.Pyrimidine;
      linkedList0.add(nucleotide1);
      linkedList0.offer(nucleotide1);
      linkedList0.add(nucleotide0);
      Nucleotide nucleotide2 = Nucleotide.Cytosine;
      linkedList0.add(nucleotide2);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)4, (byte)51, (byte)61}, byteArray1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8516161964302413
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)4;
      Nucleotide nucleotide0 = Nucleotide.NotThymine;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      String string0 = defaultNucleotideCodec0.toString(byteArray1);
      assertEquals("V", string0);
      
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      defaultNucleotideCodec0.encode(nucleotide1);
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)18;
      byteArray0[8] = (byte)1;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)31;
      defaultNucleotideCodec0.decode(byteArray0, (byte)1);
      int int0 = defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      assertEquals(1179815, int0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.179921228284246
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.decode(byteArray0, 0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      defaultNucleotideCodec0.decode(byteArray0, 0L);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      byte byte0 = (byte)76;
      byteArray1[2] = (byte)76;
      byteArray1[3] = (byte) (-124);
      byteArray1[4] = (byte)93;
      byteArray1[5] = (byte)76;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray1, (-698L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -698
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList1.iterator();
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      linkedList1.add(nucleotide0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-1894), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-6);
      Range range0 = Range.ofLength(1L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.400344526816758
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)15;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2305L), 2470L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -2305 .. 2469 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-63);
      byteArray0[8] = (byte)14;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte) (-72), 1241465088L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 256);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.8331547833861124
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = new byte[5];
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList0.add(nucleotide0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byteArray1[1] = (byte) (-123);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4048159937786893
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.toString(byteArray0);
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)90;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.403763330235561
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)118;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      ListIterator<Nucleotide> listIterator0 = linkedList0.listIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(441, (Iterator<Nucleotide>) listIterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-43);
      int int0 = 1229541165;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.1145216998146044
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)64;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertEquals(4, byteArray1.length);
      
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte) (-46), (byte) (-32)}, byteArray2);
      assertEquals(6, byteArray2.length);
      
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)5;
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertEquals(0, int0);
      
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byte[] byteArray3 = defaultNucleotideCodec0.encode(nucleotide1);
      assertEquals(5, byteArray3.length);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-81);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byte[] byteArray1 = new byte[5];
      int int0 = 1840700269;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-123);
      byteArray1[2] = (byte) (-123);
      String string0 = "SF*s'KNTg0amWM8B7E";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("SF*s'KNTg0amWM8B7E", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse SF*s'KNTg0amWM8B7E into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.857186997743457
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      linkedList0.addLast(nucleotide0);
      linkedList0.add(nucleotide0);
      linkedList0.listIterator();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byteArray0[0] = (byte) (-31);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 1840700269;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (byte) (-124));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)7;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte[] byteArray1 = new byte[7];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, 256);
      byte byte0 = (byte) (-123);
      byte[] byteArray2 = new byte[5];
      int int0 = 1840700269;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-123);
      byteArray2[2] = (byte) (-123);
      byteArray1[5] = (byte) (-123);
      String string0 = "SF*s'KNTg0amWM8B7E";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("SF*s'KNTg0amWM8B7E", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse SF*s'KNTg0amWM8B7E into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2680L), (long) (byte) (-84));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-2));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)89;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)14;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.8165446936432823
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)9;
      byteArray0[0] = (byte)9;
      int int0 = 1229541165;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(1229541165, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)9;
      byteArray0[0] = (byte)9;
      long long0 = 788L;
      Range range0 = Range.of((long) (byte)9, 788L);
      Range.of((long) (byte)9, 788L);
      byte[] byteArray1 = new byte[15];
      byteArray1[2] = (byte)9;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      long long1 = (-377L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.5837270630973106
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 0);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.decodedLengthOf(byteArray0);
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 825);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.ofLength(0);
      defaultNucleotideCodec3.iterator(byteArray0, range0);
      defaultNucleotideCodec4.toString(byteArray0);
      nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getNumberOfGapsUntil(byteArray0, 255);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      Set<Nucleotide> set0 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec5.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec5.iterator(byteArray1);
      DefaultNucleotideCodec.values();
      int int1 = defaultNucleotideCodec3.getGappedOffsetFor(byteArray1, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)29, (byte)32}, byteArray1);
      assertTrue(int1 == int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec6.isGap(byteArray0, 0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.6862668983950018
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-123);
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte) (-123);
      defaultNucleotideCodec0.isGap(byteArray0, (byte) (-123));
      byteArray1[2] = (byte) (-123);
      byteArray0[5] = (byte) (-123);
      String string0 = "SF*s'KNTg0amWM8B7E";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(221L);
      defaultNucleotideCodec0.iterator(byteArray1, range0);
      // Undeclared exception!
      try { 
        Range.parseRange("SF*s'KNTg0amWM8B7E", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse SF*s'KNTg0amWM8B7E into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)9;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 2L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 2 corresponds to encodedIndex 5  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.404588558646996
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)14;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.6074986111006435
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte) (-87);
      byte byte0 = (byte)1;
      byteArray0[4] = (byte)1;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 0 corresponds to encodedIndex 4  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-71);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      byteArray0[1] = (byte)58;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-101L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -101
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }
}
