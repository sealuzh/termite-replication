/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 15:36:22 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2000428065800537
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range0.equals(object3);
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4120608842979254
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(9223372032559808506L, 9223372036854775807L);
      Long long0 = new Long(9223372032559808506L);
      Object object0 = new Object();
      long long1 = 2147483647L;
      // Undeclared exception!
      try { 
        range0.split(2147483647L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372034707292170 would make range [9223372036854775800 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.7639157965102936
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 9223372036854775281L;
      Range range0 = Range.of(9223372036854775281L);
      Long long1 = new Long(9223372036854775281L);
      Range range1 = Range.ofLength((long) long1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range1.complement(range0);
      range0.complement(range1);
      Range.of(9223372036854775281L);
      long long2 = 2147483647L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775281L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.761051196645935
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 4294967295L);
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.of(255L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      Object object4 = new Object();
      range0.equals((Object) null);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3127787005250524
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 4294967295L;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 4294967295L);
      Object object2 = new Object();
      range0.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("max cluster distance can not be negative", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse max cluster distance can not be negative into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=4.06274749527968
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      List<Range> list0 = range0.split(2147483647L);
      Range range1 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      range0.spliterator();
      range1.intersects(range0);
      boolean boolean0 = range2.intersects(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      List<Range> list1 = range0.split(9223372036854775807L);
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
      
      Object object1 = new Object();
      Object object2 = new Object();
      range2.equals(object2);
      Range.CoordinateSystem.values();
      List<Range> list2 = range0.complement(range0);
      Range range3 = range2.intersection(range1);
      range3.complementFrom(list2);
      //  // Unstable assertion: assertSame(range3, range1);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      //  // Unstable assertion: assertFalse(range3.equals((Object)range2));
      //  // Unstable assertion: assertEquals(0, list2.size());
      
      boolean boolean1 = range0.equals((Object) null);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.647283868425793
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775720L, 9223372036854775720L);
      Range range1 = Range.of(9223372036854775720L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = range0.asRange();
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range1.complement(range2);
      //  // Unstable assertion: assertFalse(list2.contains(range1));
      
      Object object0 = new Object();
      range2.equals(range1);
      range1.equals(list1);
      Range range3 = range1.intersection(range2);
      range0.intersection(range1);
      List<Range> list3 = range3.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list3.size());
      
      boolean boolean0 = range1.equals(range3);
      //  // Unstable assertion: assertSame(range3, range0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.98412047246686
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 89L, 89L);
      Range range1 = Range.of(89L, 9223372036854775807L);
      range0.getEnd(range_CoordinateSystem0);
      range0.split(89L);
      Range range2 = Range.of(89L);
      Range range3 = Range.of(range_CoordinateSystem0, 89L, 89L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = range2.getEnd();
      //  // Unstable assertion: assertEquals(89L, long0);
      
      range0.getEnd();
      range0.intersects(range3);
      range0.split(9223372036854775807L);
      Range range4 = Range.of(88L, 9223372036854775807L);
      Object object0 = new Object();
      long long1 = range4.getEnd();
      //  // Unstable assertion: assertEquals(9223372036854775807L, long1);
      
      Object object1 = new Object();
      boolean boolean0 = range3.equals(range2);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      List<Range> list0 = range0.complement(range4);
      //  // Unstable assertion: assertTrue(list0.contains(range4));
      
      Range range5 = range2.intersection(range0);
      //  // Unstable assertion: assertTrue(range5.equals((Object)range1));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.76412629435448
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 89L;
      Range range0 = Range.of(range_CoordinateSystem0, 89L, 89L);
      range0.getEnd(range_CoordinateSystem0);
      range0.split(89L);
      Range range1 = Range.of(89L);
      Range range2 = Range.of(range_CoordinateSystem0, 89L, 89L);
      range2.isSubRangeOf(range1);
      range0.getEnd();
      range0.intersects(range2);
      Range range3 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      range1.equals(range0);
      Range range4 = range2.intersection(range0);
      range4.asRange();
      range3.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, 2743L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.7051529767019344
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of((-1L), 255L);
      Object object0 = new Object();
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 1L, 9223372036854772812L);
      range0.equals(range0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.827593913272221
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.ofLength(992L);
      boolean boolean0 = range1.endsBefore(range0);
      range0.equals((Object) null);
      boolean boolean1 = range0.intersects(range1);
      assertTrue(boolean1 == boolean0);
      
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.isEmpty());
      assertFalse(range0.isEmpty());
      
      Range range2 = Range.ofLength(992L);
      range1.isSubRangeOf(range2);
      boolean boolean2 = range1.isSubRangeOf(range2);
      assertTrue(boolean2);
      
      Range range3 = Range.of(255L);
      boolean boolean3 = range1.isEmpty();
      boolean boolean4 = range3.startsBefore(range1);
      assertSame(range1, range2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.8208844582764967
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      range0.split(2147483647L);
      Range range1 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      range2.getEnd();
      range0.spliterator();
      range1.intersects(range0);
      range1.split(9223372036854775806L);
      Range.ofLength(9223372036854774996L);
      Object object1 = new Object();
      range0.getEnd();
      Object object2 = new Object();
      Object object3 = new Object();
      range2.equals(object3);
      range2.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.902691000476893
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      range0.split(2147483647L);
      Range range1 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      Spliterator<Long> spliterator0 = range0.spliterator();
      range1.intersects(range0);
      range2.intersects(range0);
      range0.split(9223372036854775807L);
      Range range3 = Range.ofLength(65535L);
      Object object1 = new Object();
      range2.equals(spliterator0);
      Range range4 = range0.intersection(range3);
      range4.asRange();
      range4.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 2743L, 9223372036854775807L);
      long long0 = 4544L;
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 4544L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.934916714695931
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483646L, 2147483646L);
      range0.equals((Object) null);
      Range range1 = Range.ofLength(2147483646L);
      long long0 = (-284L);
      Range range2 = Range.of((-284L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.startsBefore(range2);
      range2.complement(range0);
      // Undeclared exception!
      try { 
        Range.of(4294967366L, 65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.8866883029256085
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of((-2147483636L));
      Object object0 = new Object();
      Range range1 = Range.of((-2490L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2490L), (-425L));
      range2.equals(range1);
      Range range3 = Range.of(range_CoordinateSystem0, (-2147483636L), (-2490L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      List<Range> list0 = range3.complement(range0);
      range1.complementFrom(list0);
      range0.equals(range_CoordinateSystem0);
      range3.intersection(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("}k327;F:q@JTvX[X=4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.}k327;F:q@JTvX[X=4
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=4.0701276359370375
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 89L, 89L);
      Range range1 = Range.of(89L);
      range0.intersection(range1);
      Range range2 = Range.of(97L, 255L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getEnd(range_CoordinateSystem1);
      Range range3 = Range.of((-1L));
      range3.split(255L);
      Range range4 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range5 = Range.of(range_CoordinateSystem2, (-1L), 2147483647L);
      range2.getEnd();
      Range range6 = Range.of(2147483647L);
      range6.asRange();
      Range range7 = Range.of(2147483647L);
      range5.intersects(range7);
      range2.split(2864L);
      Range.ofLength(4294967295L);
      Object object0 = new Object();
      range4.getEnd();
      Object object1 = new Object();
      range6.equals(range4);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3935777538322145
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1L), 255L);
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=4.00738856935359
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 89L, 89L);
      Range range1 = Range.of(89L, 9223372036854775807L);
      range0.getEnd(range_CoordinateSystem0);
      range0.split(89L);
      Range range2 = Range.of(89L);
      Range range3 = Range.of(range_CoordinateSystem0, 89L, 89L);
      range3.isSubRangeOf(range2);
      range0.getEnd();
      range0.intersects(range3);
      range0.split(89L);
      Range.ofLength(9223372036854775807L);
      Range range4 = Range.ofLength(88L);
      List<Range> list0 = range4.complement(range1);
      range0.complementFrom(list0);
      range1.endsBefore(range0);
      Range.of(89L);
      range3.intersection(range2);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=4.070810717955685
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      Range range1 = Range.of((-2490L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complementFrom(linkedList0);
      linkedList0.addAll((Collection<? extends Range>) list0);
      Range range2 = Range.of((-32768L), (-425L));
      range0.equals(range0);
      List<Range> list1 = range2.complement(range1);
      Range.of(2868L);
      range0.complementFrom(list1);
      range2.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("*gCogZ4 ", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse *gCogZ4  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.525952744083132
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483646L, 2147483646L);
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.of(2147483646L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.898716533350261
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372036854775281L);
      Long long0 = new Long(9223372036854775281L);
      Range range1 = Range.ofLength((long) long0);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range.of((long) long0);
      Range range2 = Range.of((-9223372034707292160L));
      // Undeclared exception!
      try { 
        range2.complementFrom(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372034707292160 would make range [9223372036854775281 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.6383610674137965
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483646L, 2147483646L);
      Range range1 = Range.of(2147483646L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=4.030545327662075
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372036854775281L);
      Long long0 = new Long(1089L);
      Range range1 = Range.ofLength(2147483647L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      Range range2 = Range.of((-1563L));
      range2.complementFrom(list1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1030L, (-928L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=4.075343340266728
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483646L, 2147483646L);
      range0.equals(range_CoordinateSystem0);
      Range.of(2147483646L);
      Range.of((-284L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(2147483646L);
      linkedList0.addAll((Collection<? extends Range>) linkedList0);
      Range range2 = Range.of((-284L), 2147483646L);
      List<Range> list0 = range1.complement(range2);
      // Undeclared exception!
      try { 
        linkedList0.addAll((-898), (Collection<? extends Range>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -898, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.7235698879444366
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-587L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-587L), (-587L));
      range0.getBegin();
      Range range2 = range0.intersection(range1);
      range2.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.6018169318349447
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Long long0 = new Long(9223372036854775281L);
      Range.ofLength((long) long0);
      Range range0 = Range.of((long) long0);
      Range.Builder range_Builder0 = new Range.Builder(1559L);
      Range.ofLength(2285L);
      Range range1 = Range.of((-708L));
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -708 would make range [9223372036854775281 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.86124568197695
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = 421L;
      Range range0 = Range.ofLength(421L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = range0.asRange();
      long long1 = 8589934501L;
      Range range2 = Range.of(range_CoordinateSystem0, 8589934501L, 8589934501L);
      long long2 = 6L;
      Range.of((-4483L), 6L);
      Range.parseRange("[ 1 .. 421 ]/RB", range_CoordinateSystem0);
      range2.intersects(range1);
      range1.getLength();
      range1.endsBefore(range0);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.6982482542923796
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 89L, 89L);
      Range range1 = Range.of(89L, 9223372036854775807L);
      range0.getEnd(range_CoordinateSystem0);
      Range range2 = Range.of(89L);
      range0.split(89L);
      Range.of(89L);
      Range.of(range_CoordinateSystem0, 89L, 89L);
      range0.getEnd();
      range1.split(89L);
      Object object0 = new Object();
      range0.equals(range2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=4.155658568185825
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.ofLength(2882L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      List<Range> list0 = range0.split(741L);
      List<Range> list1 = range0.complementFrom(list0);
      Range range1 = Range.ofLength(741L);
      range0.complement(range1);
      range0.complementFrom(list1);
      range1.equals(range0);
      Range range2 = Range.of(2882L);
      range1.spliterator();
      Range range3 = range0.intersection(range2);
      range1.intersection(range3);
      Range.of(range_CoordinateSystem0, 256L, 2882L);
      range0.intersection(range2);
      long long0 = 2147483646L;
      Range.of(1663L, 2147483646L);
      // Undeclared exception!
      try { 
        Range.parseRange("offset must be >= 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse offset must be >= 0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.7498121078661018
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, (-9223372036854775808L));
      Range range1 = range0.asRange();
      Range range2 = Range.ofLength(1885L);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(range1);
      Object object4 = new Object();
      List<Range> list0 = range2.complement(range0);
      assertTrue(list0.contains(range2));
      assertFalse(list0.contains(range0));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=4.139359864450724
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      range0.complementFrom(linkedList0);
      range1.getBegin();
      Range range2 = Range.of((-284L));
      range0.complement(range1);
      Range.of((-3115L), 9223372034707292161L);
      range1.complement(range2);
      range2.spliterator();
      Range range3 = Range.of(1737L, 4294967366L);
      Range range4 = Range.of(1052L);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      
      Range.of((-763L), 32767L);
      Range range5 = Range.of(256L);
      range3.complement(range5);
      //  // Unstable assertion: assertTrue(range5.isEmpty());
      
      Range range6 = Range.ofLength(255L);
      List<Range> list0 = range1.complement(range6);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1334L), (-1334L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long0 = new Long(4294967295L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.176906881743452
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range0.equals((Object) null);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.9680825572485565
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483646L, 2147483646L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(2147483646L);
      long long0 = (-284L);
      Range.of((-284L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.ofLength(2147483646L);
      List<Range> list0 = range2.complement(range1);
      linkedList0.addAll((Collection<? extends Range>) list0);
      Range.of(2147483646L, 2147483646L);
      // Undeclared exception!
      try { 
        range1.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=4.1966493005647525
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(797L, 4294967295L);
      Range range1 = Range.of((-1L), 65535L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      range0.complementFrom(list1);
      List<Range> list2 = range1.complement(range0);
      range0.complementFrom(list2);
      range1.equals((Object) null);
      Range.of((-284L));
      Range range2 = Range.of(797L, 4294967295L);
      range1.spliterator();
      range2.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372034707292162L, 1697L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.2081819478882956
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of(range_CoordinateSystem0, 2147483647L, (-9223372036854775808L));
      Long long0 = new Long(448L);
      assertEquals(448L, (long)long0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=4.250628012761186
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 0L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2449L);
      Range range2 = Range.of(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range3 = range0.intersection(range1);
      range_Builder0.contractEnd(0L);
      Range.of(0L);
      String string0 = range2.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
      
      boolean boolean0 = range0.intersects(range0);
      Range.Builder range_Builder2 = range_Builder0.shift(589L);
      Range range4 = range_Builder1.build();
      boolean boolean1 = range4.isEmpty();
      assertTrue(boolean1 == boolean0);
      
      range4.isSubRangeOf(range1);
      Range.Builder range_Builder3 = new Range.Builder(589L, 1766L);
      range_Builder2.build();
      range3.toString();
      assertTrue(range3.isEmpty());
      
      Range range5 = Range.parseRange("[ 0 .. 0 ]/0B");
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=4.015794575738157
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      Range range1 = Range.of((-2490L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2490L), (-432L));
      Range range3 = Range.of((-432L), (-432L));
      range2.equals(range3);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      range0.equals(range_CoordinateSystem0);
      range0.intersection(range2);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-1L), (-978L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.4368525347745678
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(812L, 812L);
      Range range1 = Range.of(3624L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.893929069379563
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(812L, 812L);
      Range range1 = Range.of(3624L);
      Object object0 = new Object();
      Range range2 = Range.of((-4294967276L), (-1588L));
      Range range3 = Range.of(812L);
      range1.equals(range0);
      range2.intersection(range1);
      Range.of(2147483648L);
      Object object1 = new Object();
      range3.equals(object1);
      Range.CoordinateSystem.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.919897807256374
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(680L);
      Range range1 = Range.of(680L, 3262L);
      boolean boolean0 = range0.equals(range1);
      Range range2 = Range.of(9223372036854774996L);
      Range.of(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.startsBefore(range0);
      range1.complement(range2);
      Range range3 = Range.of(2147483647L);
      range2.equals(range0);
      range0.intersection(range3);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.of(4294967295L);
      assertNotSame(range4, range3);
      
      boolean boolean1 = range2.equals("[$bd}+y#(aAw-");
      assertTrue(boolean1 == boolean0);
      
      range1.complementFrom(linkedList0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.8360309595749382
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 82L, 2147483646L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 32766L, 2147483646L);
      range0.complementFrom(linkedList0);
      Range range1 = Range.of(32766L);
      range1.getBegin();
      Range range2 = Range.of(32766L);
      range2.complement(range1);
      long long0 = (-3122L);
      // Undeclared exception!
      try { 
        Range.of((-29L), (-3122L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.360226077835231
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-9223372034707292160L));
      Object object0 = new Object();
      Range.of((-1L));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.862728733432378
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(762L, 4294967295L);
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      Range range1 = Range.of(762L, 65535L);
      range0.complementFrom(list0);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.of((-1L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.278464337380255
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.ofLength(2882L);
      Range.of(2147483647L);
      Range range0 = Range.ofLength(3624L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.8728742180500615
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.ofLength(2882L);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = Range.ofLength(32767L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.ofLength(9223372036854710287L);
      Range.of(1346L);
      range1.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 4752L, 4752L);
      Range range3 = Range.of(1286L, 2147483647L);
      Range range4 = Range.of(0L, 32767L);
      range3.equals(range4);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.951476573294551
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2794L;
      Range.of(range_CoordinateSystem0, 2794L, 2794L);
      Range.of((-778L), 1737L);
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.of(2147483646L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.6461266503463996
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775720L, 9223372036854775720L);
      Range.of(range_CoordinateSystem0, 9223372036854775720L, 9223372036854775720L);
      Range range1 = Range.of((-2863L));
      // Undeclared exception!
      try { 
        range1.complement(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2863 would make range [9223372036854775719 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.7110509716259235
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 89L, 89L);
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(89L, 9223372036854775807L);
      Object object0 = new Object();
      long long1 = (-1559L);
      Range.of((-1559L), 2147483647L);
      Object object1 = new Object();
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, 146L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.250819827202611
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.6878951978267436
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of((-1044L));
      Range.of(4294967295L, 4294967295L);
      Range.of((-1044L));
      range0.spliterator();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, 4294967295L, 9223372036854775204L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 4294967295L, 2147483646L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.6680457091504306
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(1190L);
      List<Range> list0 = range1.complement(range0);
      Range range2 = range0.asRange();
      range0.complementFrom(list0);
      range1.complement(range0);
      Object object0 = new Object();
      range0.equals(range1);
      range1.equals(object0);
      Range range3 = range0.intersection(range1);
      range2.intersection(range1);
      range3.complementFrom(list0);
      range0.equals(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("@p\"u&},aTm|w8z7.[N", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse @p\"u&},aTm|w8z7.[N into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.682636705919808
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775720L, 9223372036854775720L);
      Range range1 = Range.of(9223372036854775720L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = range0.asRange();
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range1.complement(range2);
      //  // Unstable assertion: assertFalse(list2.contains(range1));
      //  // Unstable assertion: assertTrue(list2.contains(range0));
      
      Object object0 = new Object();
      range2.equals(range1);
      range1.equals(list1);
      Range range3 = range1.intersection(range2);
      Range range4 = range0.intersection(range1);
      range3.complementFrom(list0);
      range1.equals("@p\"u&},aTm|w8z7.[N");
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 0L, 155L);
      boolean boolean0 = range4.equals((Object) null);
      //  // Unstable assertion: assertSame(range0, range3);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=4.031812425076607
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372036854775281L);
      Long long0 = new Long(9223372036854775281L);
      Range range1 = Range.ofLength((long) long0);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      Range.of((long) long0);
      List<Range> list2 = range0.complementFrom(list1);
      //  // Unstable assertion: assertTrue(list2.contains(range0));
      
      Range.Builder range_Builder0 = new Range.Builder(1559L);
      Range range2 = Range.ofLength(2285L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = Range.of(2285L);
      Range range4 = range3.intersection(range0);
      //  // Unstable assertion: assertTrue(range4.isEmpty());
      
      range0.equals(list0);
      //  // Unstable assertion: assertTrue(list0.equals((Object)list2));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=4.074475583337449
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(1509L);
      List<Range> list0 = range1.complement(range0);
      Range range2 = Range.of((-32768L));
      Range range3 = range2.asRange();
      range1.complementFrom(list0);
      range3.complement(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      range3.equals(object1);
      range1.equals(object1);
      range2.intersection(range0);
      Range range4 = range3.intersection(range1);
      range4.complementFrom(linkedList0);
      range4.equals((Object) null);
      Range range5 = Range.of(4497L);
      Range range6 = range5.intersection(range0);
      range6.asRange();
      Range range7 = range2.asRange();
      assertSame(range7, range3);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.793640072220217
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775720L, 9223372036854775720L);
      Range range1 = Range.of(9223372036854775720L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = range0.asRange();
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 19L, 9223372036854775720L);
      Range range3 = Range.ofLength(0L);
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.37173586323881
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 127L;
      Range range0 = Range.of(range_CoordinateSystem1, 127L, 127L);
      Object object0 = new Object();
      Long long1 = new Long(127L);
      range0.equals(long1);
      // Undeclared exception!
      try { 
        Range.parseRange("length can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse length can not be negative into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=4.040657215309879
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(2622L);
      range_Builder0.expandBegin(2622L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(4294967295L, 4294967295L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      range1.startsBefore(range0);
      Range range2 = Range.ofLength(65535L);
      assertFalse(range2.isEmpty());
      
      Object object2 = new Object();
      Range range3 = Range.of(4294967295L);
      range0.isSubRangeOf(range1);
      boolean boolean0 = range3.startsBefore(range1);
      assertFalse(boolean0);
      
      Range.Builder range_Builder1 = new Range.Builder(4068L, 4294967295L);
      Range range4 = Range.of((-1L));
      assertFalse(range4.isEmpty());
      
      Range range5 = range1.intersection(range3);
      assertFalse(range5.isEmpty());
      assertSame(range5, range3);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.235215232301768
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(range_CoordinateSystem0, 1564L, 9223372036854775807L);
      range0.equals(object0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals((Object) null);
      Long long0 = new Long(9223372036854775807L);
      assertEquals(9223372036854775807L, (long)long0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.8059177244753712
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(89L);
      Range range1 = Range.of(89L, 89L);
      Long long0 = new Long(89L);
      Range range2 = Range.ofLength(89L);
      List<Range> list0 = range0.complement(range1);
      Range.of(89L);
      Range range3 = Range.of(89L, 89L);
      range3.complementFrom(list0);
      range2.equals(range3);
      // Undeclared exception!
      try { 
        Range.parseRange("cAMff,s+xYrRyL\u0007");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse cAMff,s+xYrRyL\u0007 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.9212690699254407
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 89L, 89L);
      Range range1 = Range.of(89L, 9223372036854775807L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(89L, long0);
      
      range0.split(89L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(89L);
      List<Range> list0 = range3.split(2399L);
      //  // Unstable assertion: assertTrue(list0.contains(range3));
      
      Range range4 = Range.of(range_CoordinateSystem0, 89L, 89L);
      range4.isSubRangeOf(range3);
      range0.getEnd();
      range0.intersects(range4);
      range0.split(89L);
      Range range5 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      long long1 = range5.getEnd();
      //  // Unstable assertion: assertEquals(9223372036854775806L, long1);
      
      Object object1 = new Object();
      boolean boolean0 = range1.equals(range5);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      List<Range> list1 = range2.complement(range4);
      //  // Unstable assertion: assertTrue(list1.contains(range1));
      //  // Unstable assertion: assertTrue(range2.equals((Object)range1));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=4.190398450656278
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483646L, 2147483675L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of((-3769L));
      Range range2 = Range.of(255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range3 = Range.ofLength(1L);
      List<Range> list0 = range3.complement(range2);
      linkedList0.addAll((Collection<? extends Range>) list0);
      Range range4 = Range.of(1L, 9223372032559808513L);
      range3.startsBefore(range4);
      range1.complement(range2);
      Range.of(1L);
      range0.complementFrom(linkedList0);
      range4.equals(range1);
      Range range5 = Range.ofLength(2147483646L);
      range5.equals("number of entries must be <= Integer.MAX_VALUE");
      // Undeclared exception!
      try { 
        Range.of((-128L), (-2928L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.734252296505884
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of((-228L));
      Long long0 = new Long((-228L));
      Range range2 = Range.of(9223372036854775807L);
      range2.isEmpty();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.endsBefore(range1);
      Long long1 = new Long(1696L);
      range0.equals(long1);
      Long.remainderUnsigned(9223372036854775720L, 9223372036854775720L);
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.5203691403978925
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372034707292160L), 680L);
      Range.of((-4621L), (-1369L));
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = new Long(680L);
      Range range1 = Range.of(range_CoordinateSystem1, (-9223372034707292160L), (-1369L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=4.196315670683785
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372034707292160L), 680L);
      range0.iterator();
      range0.iterator();
      Range range1 = Range.of(0L, 680L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Long long0 = new Long(680L);
      range0.isSubRangeOf(range1);
      range0.iterator();
      Range range2 = Range.of(range_CoordinateSystem1, (-9223372034707292160L), 680L);
      range0.equals(range2);
      Range.CoordinateSystem.values();
      Range range3 = Range.ofLength(2147483647L);
      // Undeclared exception!
      try { 
        range3.complement(range0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=4.255452588450841
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372034707292160L), 680L);
      range0.iterator();
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long0 = new Long(680L);
      range0.isSubRangeOf(range0);
      range0.iterator();
      Range range1 = Range.of(range_CoordinateSystem1, (-9223372034707292160L), 680L);
      range0.equals(range1);
      Range.CoordinateSystem.values();
      Range range2 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        range2.complement(range0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.8928622810619324
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1293L, 9223372036854775720L);
      Range range1 = Range.of(9223372036854775720L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = range1.asRange();
      range0.complementFrom(list0);
      range2.complement(range1);
      Object object0 = new Object();
      Range range3 = Range.of(9223372036854775720L, 9223372036854775720L);
      range0.equals(range3);
      range0.equals(object0);
      range3.intersection(range1);
      range3.intersection(range2);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.895974481821905
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 812L, 4294967295L);
      Range range1 = Range.ofLength(812L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854710287L);
      Range range2 = Range.ofLength(1374L);
      Range.of(9223372036854775807L);
      Range range3 = Range.of(range_CoordinateSystem0, (-543L), 9223372036854710287L);
      long long0 = range1.getLength();
      assertEquals(812L, long0);
      
      boolean boolean0 = range3.equals(range2);
      assertFalse(boolean0);
      
      Range range4 = range2.intersection(range0);
      assertFalse(range4.isEmpty());
      assertFalse(range4.equals((Object)range0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.541784488652908
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.of(9223372036854771962L);
      Range range0 = Range.of((-9223372034707292160L));
      Object object0 = new Object();
      Range.of(127L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range0.equals(object3);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=4.189583799402994
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372034707292160L), 680L);
      Range range1 = Range.of((-9223372034707292160L), 255L);
      List<Range> list0 = range1.complement(range0);
      range1.intersects(range0);
      Range range2 = range1.asRange();
      Range range3 = Range.of(255L);
      range2.complementFrom(list0);
      range3.intersection(range1);
      long long0 = (-134L);
      Range.Builder range_Builder0 = new Range.Builder((-134L), (-1L));
      List<Range> list1 = range3.complementFrom(list0);
      range0.complementFrom(list1);
      Range range4 = Range.ofLength(255L);
      Range range5 = Range.of(680L);
      range4.equals(range5);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 2176L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.8444980456539737
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 782L;
      Range range1 = Range.of(range_CoordinateSystem0, 782L, 782L);
      range1.isEmpty();
      Range range2 = Range.of((-1L));
      range2.endsBefore(range1);
      range0.intersects(range2);
      range0.intersects(range1);
      range2.isSubRangeOf(range0);
      Range.Comparators.valueOf("LONGEST_TO_SHORTEST");
      // Undeclared exception!
      try { 
        range2.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.550953126654381
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-9L), (-9L));
      Range range1 = Range.of((-9L));
      range0.equals(range1);
      Range range2 = range1.intersection(range0);
      Range.of((-9L));
      range2.equals(range0);
      // Undeclared exception!
      try { 
        Range.of(4294967366L, 2147483648L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.542388970741509
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1954L, 1954L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("length can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse length can not be negative into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.5233970230856295
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      long long1 = 0L;
      Range range1 = Range.of(0L);
      range1.intersection(range0);
      Range.of(0L);
      Range.ofLength(4613L);
      Long long2 = new Long(4613L);
      Long long3 = new Long(0L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("I01aY 7XH|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.I01aY 7XH|
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.5365846357545756
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.of(262L, 9223372036854775807L);
      Range range0 = Range.of(262L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.18195858203324
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range range0 = Range.of(380L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.6869254698681115
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-1044L));
      Range.of(4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775204L, (-3018L));
      range_Builder0.expandEnd(2147483647L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.1651294905433627
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      boolean boolean0 = range0.equals(object6);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=4.067489173878846
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 89L, 89L);
      Range range1 = Range.of((-9223372034707292160L), (-626L));
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      Range range2 = Range.of((-486L), 1464L);
      List<Range> list1 = range2.complementFrom(list0);
      range2.complement(range1);
      range2.complementFrom(list1);
      Range range3 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder((-486L), 2147483646L);
      range_Builder0.contractEnd((-128L));
      Range.of((-626L));
      range3.toString();
      range2.intersects(range0);
      range_Builder0.shift(9223372034707292162L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775680 would make range [9223372034707291676 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=4.037691452759051
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1222L), 4294967295L);
      range0.spliterator();
      range0.isEmpty();
      long long0 = 0L;
      Range.of(0L);
      range0.endsBefore(range1);
      Range range2 = Range.of((-9223372036854775808L), (-938L));
      range2.intersects(range0);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("`iMN}|$x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.`iMN}|$x
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.819984186081645
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(89L);
      Range range1 = Range.of(89L, 89L);
      Long long0 = new Long(89L);
      Range range2 = Range.ofLength(89L);
      List<Range> list0 = range0.complement(range1);
      Range range3 = Range.of(89L);
      Range range4 = Range.of(89L, 89L);
      range4.complementFrom(list0);
      range2.isSubRangeOf(range3);
      // Undeclared exception!
      try { 
        Range.parseRange("cAMff,s+xYrRyL\u0007");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse cAMff,s+xYrRyL\u0007 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=4.0578827085820555
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372036854775281L);
      Long long0 = new Long(9223372036854775281L);
      Range range1 = Range.ofLength((long) long0);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      Range.of((long) long0);
      List<Range> list2 = range0.complementFrom(list1);
      //  // Unstable assertion: assertTrue(list2.contains(range0));
      
      Range.Builder range_Builder0 = new Range.Builder(1559L, 9223372036854775281L);
      Range range2 = Range.ofLength(2285L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = Range.of(2285L);
      Range range4 = range3.intersection(range0);
      //  // Unstable assertion: assertTrue(range4.isEmpty());
      
      Range range5 = Range.of(0L, 9223372036854775720L);
      Range range6 = Range.of(904L, 2285L);
      range6.equals(range5);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
      //  // Unstable assertion: assertFalse(range5.equals((Object)range3));
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.70869189142799
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775720L, 9223372036854775720L);
      Range range1 = Range.of(9223372036854775720L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.of(range_CoordinateSystem0, 9223372036854775720L, 9223372036854775720L);
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range1.complement(range2);
      Object object0 = new Object();
      range2.equals(range1);
      range1.equals(list1);
      Range range3 = range1.intersection(range2);
      Range range4 = range0.intersection(range1);
      Range range5 = Range.of(0L);
      range3.equals(list2);
      boolean boolean0 = range5.equals((Object) null);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
      
      range2.equals(list2);
      //  // Unstable assertion: assertNotSame(range1, range3);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
      //  // Unstable assertion: assertTrue(range1.equals((Object)range4));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.719788325158828
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372036854775281L);
      Long long0 = new Long(9223372036854775281L);
      Range range1 = Range.ofLength((long) long0);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      Range.of((long) long0);
      range0.complementFrom(list1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775281L, (-936L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -936 would make range [9223372036854775281 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.721724412288249
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(1L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-766L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -766 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.5880911564220352
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-2482L));
      Range range1 = Range.of((-32768L), (-32768L));
      range1.isEmpty();
      range0.split(1196L);
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-1L), (-2482L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.402076401432097
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.ofLength(2882L);
      Range.of(2147483647L);
      Long long0 = new Long(313L);
      Range.of(313L);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.716483941738745
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isEmpty();
      long long0 = (-1L);
      Range range1 = Range.of((-1L));
      range1.endsBefore(range0);
      Range range2 = null;
      // Undeclared exception!
      try { 
        range1.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.5480287801418577
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.of(797L, 4294967295L);
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range1 = Range.of(581L, 797L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.7637317615809356
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(0L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      Range range1 = Range.of(4225L);
      Range range2 = Range.of(0L);
      Range range3 = Range.ofLength(1022L);
      range1.endsBefore(range3);
      Range range4 = Range.ofLength(0L);
      range1.intersects(range2);
      boolean boolean1 = range0.isSubRangeOf(range4);
      range2.isSubRangeOf(range1);
      assertNotSame(range2, range3);
      
      Range range5 = Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 255L, 4294967295L);
      range_Builder0.expandEnd(0L);
      boolean boolean2 = range1.isEmpty();
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = range5.startsBefore(range1);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=4.178726659784074
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.isSubRangeOf(range0);
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 2147483647L);
      range0.complementFrom(linkedList0);
      range1.getBegin();
      Range range3 = Range.of((-284L));
      range0.intersects(range2);
      range0.complement(range1);
      range1.complement(range3);
      range3.spliterator();
      Range range4 = Range.of(1737L, 4294967366L);
      Range.of(1052L);
      range3.getBegin(range_CoordinateSystem1);
      range4.equals(range1);
      range3.intersection(range0);
      range3.equals(range2);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = 604L;
      Range.ofLength(604L);
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=4.103709526378054
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372034707292160L), 680L);
      Range range1 = Range.of((-9223372034707292160L), 255L);
      range1.complement(range0);
      range1.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(2L);
      range2.split(1L);
      Range range3 = Range.of(9223372036854775552L);
      range2.spliterator();
      range3.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775128L, 680L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.9229020589967187
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 0L, 341L);
      Range range1 = Range.of((-9223372034707292160L), (-9223372034707292160L));
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem3, 506L, 604L);
      boolean boolean0 = range1.equals(range_CoordinateSystem2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.6805631847759104
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.of(797L, 4294967295L);
      Range.of((-1L), 65535L);
      Range.of(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(757L);
      assertEquals(757L, (long)long0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.2915464788552296
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.Comparators.values();
      Range.of(9223372036854775281L);
      Long long0 = new Long(9223372036854775281L);
      Range range0 = Range.ofLength((long) long0);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(2882L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.2315032765352982
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.of((-32768L));
      Range.of((-64L));
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(1331L);
      assertEquals(1331L, (long)long0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=4.132521706956192
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372034707292150L), 680L);
      Range range1 = Range.of((-9223372034707292150L), 255L);
      range1.complement(range0);
      range1.intersects(range0);
      Range range2 = Range.of(2L);
      Range range3 = Range.of(9223372036854775552L);
      range3.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775552L);
      range_Builder0.build();
      range2.isEmpty();
      range1.isSubRangeOf(range3);
      Range range4 = Range.of((-9223372036854774447L));
      range1.startsBefore(range4);
      Range.Builder range_Builder1 = new Range.Builder(2L, 2203L);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      range_Builder2.build();
      Range range5 = Range.of(2759L, 9223372036854775128L);
      assertFalse(range5.equals((Object)range3));
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.587268091876133
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(2882L);
      Range range1 = Range.ofLength(2882L);
      Range range2 = Range.ofLength(3624L);
      boolean boolean0 = range2.isSubRangeOf(range0);
      boolean boolean1 = range2.startsBefore(range1);
      assertTrue(boolean1 == boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(2449L, 4294967295L);
      Range range3 = range0.intersection(range2);
      assertSame(range3, range1);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.2380188789437025
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.of((-2147483648L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("R/(=H\"Kz&GR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.R/(=H\"Kz&GR
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.765492012545158
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(0L);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(4225L);
      Range range2 = Range.of(0L);
      Range range3 = Range.ofLength(1022L);
      range1.endsBefore(range3);
      Range range4 = Range.ofLength(0L);
      range3.endsBefore(range2);
      boolean boolean0 = range4.equals(range0);
      assertFalse(boolean0);
      
      range1.intersects(range2);
      List<Range> list0 = range1.complement(range3);
      assertTrue(list0.contains(range1));
      
      boolean boolean1 = range0.isSubRangeOf(range4);
      range2.isSubRangeOf(range1);
      assertNotSame(range2, range3);
      assertSame(range2, range0);
      
      Range range5 = Range.of(255L);
      range1.isEmpty();
      boolean boolean2 = range5.startsBefore(range1);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.856278870823942
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      range0.getBegin();
      range0.endsBefore(range0);
      range0.isEmpty();
      range0.split(1196L);
      range0.complement(range0);
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-1L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.6970335046920546
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 1703L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1703L);
      Range range0 = range_Builder0.build();
      Range.of(0L, 0L);
      Range range1 = range_Builder1.build();
      Range range2 = range_Builder1.build();
      range2.toString();
      Range range3 = range0.intersection(range2);
      range3.iterator();
      range_CoordinateSystem0.getAbbreviatedName();
      range_Builder0.build();
      range_CoordinateSystem0.toString();
      range0.getBegin();
      range0.isEmpty();
      range_CoordinateSystem0.toString();
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.7040535613244896
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder(0L, (-1L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(0L);
      range_Builder2.contractBegin((-1L));
      range_Builder2.build();
      range_Builder1.copy();
      Range.Builder range_Builder3 = new Range.Builder(0L, (-1L));
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(3052L, (-1358L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.8086706582308425
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(0L);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(4225L);
      Range range2 = Range.of(0L);
      Range range3 = Range.ofLength(1022L);
      range1.endsBefore(range3);
      Range range4 = Range.ofLength(0L);
      range1.isEmpty();
      range0.isSubRangeOf(range4);
      range2.isSubRangeOf(range1);
      Range range5 = Range.of(255L);
      range5.getBegin();
      Range.Builder range_Builder0 = new Range.Builder(range4);
      Range.Builder range_Builder1 = new Range.Builder(0L, 4225L);
      range1.isEmpty();
      range5.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 32767L, 1684L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-628L), (-628L));
      // Undeclared exception!
      try { 
        range0.split((-628L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.1170472568566674
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2147483646L;
      Range.of(range_CoordinateSystem0, 2147483646L, 2147483646L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967295L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.7971377304062592
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = 255L;
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2187L);
      range_Builder0.contractEnd(0L);
      range_Builder0.expandEnd(255L);
      range_Builder0.copy();
      range_Builder1.expandBegin(924L);
      range_Builder0.contractEnd((-26L));
      long long1 = 276L;
      range_Builder1.contractEnd(276L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("/E", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse /E into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2031L), 0L);
      range_Builder0.shift((-2671L));
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(3714L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.409219584492206
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-2294L), (-2294L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=4.03774368529467
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854775281L);
      Long long0 = new Long(9223372036854775281L);
      Range range1 = Range.ofLength((long) long0);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      Range.of((long) long0);
      range0.complementFrom(list1);
      Range.Builder range_Builder0 = new Range.Builder(1559L);
      Range range2 = Range.ofLength(2285L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = Range.of(2285L);
      range3.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(4420L, 606L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=4.03433771059595
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of((-2449L));
      Long long0 = new Long(3311L);
      long long1 = 4294967295L;
      Range.ofLength(4294967295L);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      range0.toString();
      Range.of(857L);
      range1.complementFrom(list0);
      long long2 = (-2565L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2565L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.583678955767852
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L, 0L);
      long long1 = 4613L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd();
      range0.asRange();
      long long2 = (-32767L);
      // Undeclared exception!
      try { 
        Range.parseRange("]y}7 Q?", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ]y}7 Q? into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.63773130117101
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.ofLength(604L);
      Range range0 = Range.of(2374L);
      Range.ofLength(604L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-1358L), 604L);
      Range.Builder range_Builder2 = new Range.Builder((-1358L), 0L);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range_Builder3.contractBegin(2374L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=4.052331973240737
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372036854775281L);
      Long long0 = new Long(9223372036854775281L);
      Range range1 = Range.ofLength((long) long0);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      Range.of((long) long0);
      range0.complementFrom(list1);
      Range.Builder range_Builder0 = new Range.Builder(1559L);
      Range range2 = Range.ofLength(2285L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = Range.of(2285L);
      range3.intersection(range0);
      Range range4 = range2.asRange();
      assertFalse(range4.equals((Object)range1));
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.409219584492206
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of((-4621L), (-1369L));
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1369L), long0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.3840001337745327
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(0L, 2882L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(2147483647L, 2799L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.530996748593901
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2050L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2050L, 2741L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      range_Builder1.expandBegin((-2092L));
      range_Builder0.contractBegin(0L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_Builder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.8346171653445724
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Object object0 = new Object();
      Range.ofLength(32767L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854710287L);
      Range range1 = Range.ofLength(255L);
      range1.spliterator();
      Range range2 = Range.of(32767L);
      Range range3 = range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range3.getLength();
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=4.159080320222672
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 0L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2449L);
      Range range2 = range_Builder0.build();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      range0.intersection(range1);
      range_Builder0.contractEnd(0L);
      Range.of(0L);
      String string1 = range2.toString();
      assertEquals("[ -2449 .. -1 ]/0B", string1);
      
      range0.intersects(range0);
      Range.Builder range_Builder2 = range_Builder0.shift(589L);
      Range range3 = range_Builder1.build();
      range3.isEmpty();
      range3.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder3 = new Range.Builder(589L, 1766L);
      range_Builder2.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=4.2346784044418255
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = 797L;
      Range range0 = Range.of(797L, 4294967295L);
      Range range1 = Range.of((-1L), 65535L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      range0.complementFrom(list1);
      List<Range> list2 = range1.complement(range0);
      range0.complementFrom(list2);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.ofLength(2025L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range1.forEach(consumer0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.698238261648873
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.of((-1L));
      range1.getEnd();
      long long0 = (-1238L);
      Range range2 = Range.of((-1238L));
      range2.isEmpty();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range0.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-228L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.328688240580527
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483648L, long0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range range1 = Range.of(2147483647L, 2147483647L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.3136130768287644
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775720L, 9223372036854775720L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(9223372036854775721L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.7882784301273364
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.ofLength(2882L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(3624L);
      range1.spliterator();
      Range range2 = range0.intersection(range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
      
      Range range3 = Range.of(range_CoordinateSystem0, 2882L, 2882L);
      range3.equals(range_CoordinateSystem0);
      range3.intersection(range1);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.84443251254707
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.ofLength(604L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.ofLength(604L);
      range0.endsBefore(range1);
      Range range2 = Range.ofLength(4294967295L);
      range0.intersects(range2);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 2374L, 2374L);
      range0.isSubRangeOf(range3);
      Range.of(2346L);
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 2346L, 2346L);
      range_Builder1.expandEnd(604L);
      range2.isEmpty();
      // Undeclared exception!
      try { 
        Range.ofLength((-828L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.9814256226202445
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range range1 = Range.of(0L);
      Range range2 = Range.ofLength(1052L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.iterator();
      Range range3 = Range.ofLength(809L);
      range3.complement(range2);
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.of(1052L, (-393L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.112227645912027
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.ofLength(1217L);
      long long0 = range0.getLength();
      assertEquals(1217L, long0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.581268255036592
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of(812L, 812L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-74L), 32767L);
      range1.getEnd();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 1708L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.3442622789152225
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.ofLength(2882L);
      Range range0 = Range.ofLength(2882L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(1331L);
      assertEquals(1331L, (long)long0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.4493138094806866
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1954L, 1954L);
      range0.split(3383L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.6561695962843475
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 89L, 89L);
      Range.of(89L, 9223372036854775807L);
      Range range0 = Range.of(1L);
      range0.split(9223372036854775290L);
      long long0 = (-951L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem1, 89L, (-951L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.455425354451507
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(9223372036854775552L);
      Range.of(255L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-9223372036854775808L), 1738L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.5544407818453623
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-353L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-353L), 1957L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=4.02776378590997
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 0L);
      List<Range> list0 = range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(2449L);
      Range range2 = range_Builder0.build();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      List<Range> list1 = range1.complementFrom(list0);
      assertFalse(list1.contains(range2));
      
      Range range3 = Range.of(0L);
      range3.complementFrom(list1);
      Range.Builder range_Builder1 = new Range.Builder(1559L);
      Range range4 = Range.ofLength(0L);
      Range range5 = Range.of(1559L);
      Range range6 = range5.intersection(range3);
      List<Range> list2 = range6.complement(range4);
      assertTrue(list2.contains(range0));
      assertSame(range3, range1);
      assertFalse(list2.contains(range3));
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.2728914881723026
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.of(2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.2009388382289825
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1340L), (-1340L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("&%_M[?UyQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.&%_M[?UyQ
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.3478021580345723
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = (-7L);
      Range.Builder range_Builder0 = new Range.Builder((-7L), 251L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(846L);
      range_Builder1.build();
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-65L), (-1029L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.1792007145348498
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Object object0 = new Object();
      Range.of(1033L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.983807034403656
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1222L), 4294967295L);
      range0.spliterator();
      Range range2 = Range.of((-1L), 4294967295L);
      range2.isEmpty();
      long long0 = 0L;
      Range.of(0L);
      range0.endsBefore(range1);
      Range range3 = Range.of((-9223372036854775808L), (-938L));
      range3.intersects(range2);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("`iMN}|$x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.`iMN}|$x
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.7557615020896797
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 782L, 782L);
      range1.isEmpty();
      Range range2 = Range.of(782L);
      range2.endsBefore(range1);
      range0.intersects(range1);
      range2.isSubRangeOf(range0);
      Range.Comparators.valueOf("LONGEST_TO_SHORTEST");
      range2.isSubRangeOf(range2);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(782L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.64633103734169
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775720L, 9223372036854775720L);
      Range range1 = Range.of(1580L);
      range1.endsBefore(range0);
      range0.intersects(range1);
      range0.isSubRangeOf(range1);
      Range.Comparators.valueOf("LONGEST_TO_SHORTEST");
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1580L, (-177L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.9280720478087296
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372036854775281L);
      Long long0 = new Long(9223372036854775281L);
      Range range1 = Range.ofLength((long) long0);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      Range.of((long) long0);
      List<Range> list2 = range0.complementFrom(list1);
      //  // Unstable assertion: assertTrue(list2.contains(range0));
      
      Range.Builder range_Builder0 = new Range.Builder(1559L);
      Range range2 = Range.ofLength(2285L);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(2285L);
      Range range4 = range3.intersection(range0);
      //  // Unstable assertion: assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=4.00364358554849
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372036854775281L);
      Long long0 = new Long(9223372036854775281L);
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      Range.of((long) long0);
      range0.complementFrom(list1);
      Range range1 = Range.ofLength(2285L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = Range.of(2285L);
      range2.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(4420L, 606L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.682232832374077
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.isEmpty();
      Range range1 = Range.of((-1L));
      range1.endsBefore(range0);
      range_Builder0.expandBegin((-1L));
      range0.intersects(range0);
      range1.isSubRangeOf(range0);
      Range.Comparators.valueOf("LONGEST_TO_SHORTEST");
      range1.isSubRangeOf(range1);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(782L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.673734424496247
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 882L, 882L);
      Range.Builder range_Builder1 = new Range.Builder(1L);
      Range range2 = Range.of(1L);
      Range range3 = range1.intersection(range2);
      assertSame(range3, range0);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Range range0 = Range.of(65535L, 65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-20L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.2177140722199202
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = 978L;
      Range range0 = Range.ofLength(978L);
      Long long1 = new Long(978L);
      range0.equals(long1);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range_CoordinateSystem0.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("v|O/bm&$f>UMr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.v|O/bm&$f>UMr
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.3861827060295004
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of((-128L), 1696L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      boolean boolean0 = range0.equals(object6);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=4.026872539351958
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      boolean boolean0 = range1.isSubRangeOf(range0);
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 2147483647L);
      range0.complementFrom(linkedList0);
      boolean boolean1 = range0.intersects(range2);
      assertFalse(boolean1 == boolean0);
      
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      boolean boolean2 = range0.startsBefore(range0);
      assertFalse(boolean2);
      
      range1.complement(range0);
      range1.spliterator();
      Range range3 = Range.of(1737L, 4294967366L);
      Range range4 = Range.of(1052L);
      range1.getBegin(range_CoordinateSystem1);
      Range range5 = Range.of(range_CoordinateSystem0, 2147483647L, 4294967366L);
      range1.complement(range5);
      Range range6 = Range.of(1737L);
      assertFalse(range6.equals((Object)range3));
      
      List<Range> list0 = range1.complement(range4);
      assertNotSame(range4, range6);
      assertFalse(range4.isEmpty());
      assertSame(range1, range0);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.765633126925419
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(0L);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(4225L);
      Range range2 = Range.of(0L);
      Range range3 = Range.ofLength(1022L);
      range1.endsBefore(range3);
      range3.endsBefore(range2);
      range2.equals(range0);
      range1.intersects(range2);
      List<Range> list0 = range1.complement(range3);
      range0.isSubRangeOf(range2);
      range3.complementFrom(list0);
      range3.equals(range1);
      range2.intersection(range3);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("; nR[0H8UX=znJ:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.; nR[0H8UX=znJ:
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.5557993208982337
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.ofLength(2882L);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = Range.ofLength(32767L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.ofLength(9223372036854710287L);
      Range range3 = range1.intersection(range2);
      Range range4 = Range.of(85L);
      range4.equals(range0);
      range3.intersection(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("*.4f).vpZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.*.4f).vpZ
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=4.143161084632368
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      range0.complementFrom(linkedList0);
      Range range2 = Range.of((-284L));
      boolean boolean0 = range0.intersects(range1);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      boolean boolean1 = range2.startsBefore(range0);
      assertFalse(boolean1 == boolean0);
      
      range2.spliterator();
      Range.of(1737L, 4294967366L);
      Range range3 = Range.of(1052L);
      assertFalse(range3.isEmpty());
      
      long long0 = range2.getBegin(range_CoordinateSystem0);
      assertEquals((-284L), long0);
      
      range2.intersection(range0);
      range2.isSubRangeOf(range2);
      assertFalse(range2.isEmpty());
      
      range1.intersection(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.1860594162939453
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range0 = Range.of((-2653L));
      assertFalse(range0.isEmpty());
  }
}
