/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 15:37:24 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6619955410855933
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Short short0 = new Short((short)117);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.optBoolean("val", true);
      Short.compare((short)117, (short)117);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Object object0 = JSONObject.NULL;
      jSONObject0.names();
      BiFunction<Object, Double, Double> biFunction0 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(object0, biFunction0);
      short short1 = (short) (-1001);
      Short.compare((short)117, (short) (-1001));
      JSONObject jSONObject1 = jSONObject0.put("mer", (Map) hashMap0);
      jSONObject1.keys();
      JSONObject jSONObject2 = jSONObject0.optJSONObject("mer");
      JSONObject.getNames((Object) short0);
      try { 
        jSONObject2.getJSONArray("cG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"cG\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.680282024108376
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      Boolean boolean0 = new Boolean("");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      Float float0 = new Float((-1623.2F));
      linkedList1.add(float0);
      Float float1 = new Float((-1623.2F));
      Float float2 = new Float((-1623.2F));
      Integer integer0 = new Integer((-1418));
      Integer integer1 = new Integer((-25));
      Integer integer2 = new Integer(4632);
      Integer integer3 = new Integer((-4282));
      Integer integer4 = new Integer(11);
      Integer.sum((-4282), (-1785));
      String[] stringArray0 = JSONObject.getNames((Object) float1);
      assertNotNull(stringArray0);
      
      JSONTokener jSONTokener0 = new JSONTokener("");
      Boolean boolean1 = new Boolean("`OR:Y8M,cwoPi");
      Integer integer5 = new Integer(44);
      StringWriter stringWriter0 = new StringWriter();
      Boolean.logicalAnd(true, true);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      StringWriter stringWriter1 = new StringWriter(59);
      Integer integer6 = new Integer(27);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNotNull(jSONArray0);
      assertEquals(8, jSONObject1.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2027541049469783
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[2] = stringArray0[1];
      Float float0 = new Float(2009.7933F);
      Double double0 = new Double(0.0F);
      Double.isFinite(1.0);
      Double.min(0.0, (-1909.9205));
      Float.min(3492.5F, (-3108.0F));
      Float.min(0.0F, 1023.1611F);
      Double.sum(2009.7933F, 1.0);
      Float float1 = new Float((-938.3069245739));
      Float.isFinite(0.0F);
      Float.min(0.0F, 0.0F);
      Float.min(1023.1611F, 0.0F);
      Float.min(1023.1611F, 0.0F);
      Float.min(0.0F, 26.875F);
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      Byte byte0 = new Byte((byte) (-84));
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      hashMap0.put(byte0, jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.names();
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6027857489898554
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "BM*AaLX^qTJv!\\!z7";
      JSONObject.quote("BM*AaLX^qTJv!!z7");
      Float float0 = new Float(1.0F);
      Float.isFinite((-2292.9F));
      Float float1 = new Float((-1.0F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      Long long0 = new Long(0L);
      Long.getLong("\"BM*AaLX^qTJv!\\!z7\"", 0L);
      Byte byte0 = new Byte((byte)20);
      JSONObject jSONObject0 = new JSONObject(byte0);
      String string1 = "dec";
      JSONObject jSONObject1 = jSONObject0.accumulate("dec", linkedList0);
      jSONObject1.toString((int) (byte)20);
      int int0 = 13;
      jSONObject0.toString((int) (byte)20, 58);
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject1.getDouble("BM*AaLX^qTJv!!z7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"BM*AaLX^qTJv!!z7\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9145719248694824
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(2187);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Double.sum((-1693.564407), 2187);
      Double.isFinite(2187);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      Set<JSONArray> set0 = hashMap0.keySet();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      hashMap0.values();
      Set<JSONArray> set1 = hashMap0.keySet();
      Double.isFinite((-4249.3652953));
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONArray jSONArray1 = new JSONArray((Collection) set1);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertEquals(1, jSONObject0.length());
      assertNull(jSONArray2);
      
      String string0 = JSONObject.valueToString(set0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.015802817683888
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(2187);
      Float float0 = new Float(0.0F);
      Double double0 = new Double((-3404.5));
      JSONObject.quote("C]4#g8T@8/,~3(wo");
      Byte byte0 = new Byte((byte)85);
      HashMap<Short, JSONObject> hashMap0 = new HashMap<Short, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte1 = new Byte((byte)34);
      JSONObject jSONObject1 = jSONObject0.putOpt(",~%lP{1ZUERsoJs7OF", byte1);
      Object object0 = JSONObject.NULL;
      jSONObject1.accumulate("\"C]4#g8T@8/,~3(wo\"", object0);
      jSONObject0.putOpt("\"C]4#g8T@8/,~3(wo\"", double0);
      jSONObject1.getDouble(",~%lP{1ZUERsoJs7OF");
      JSONTokener jSONTokener0 = new JSONTokener(",~%lP{1ZUERsoJs7OF");
      try { 
        jSONTokener0.next('^');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected '^' and instead saw ',' at character 1 of ,~%lP{1ZUERsoJs7OF
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.059130541410059
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap1 = new HashMap<JSONArray, Long>(hashMap0);
      JSONObject.valueToString(hashMap1);
      HashMap<JSONArray, Long> hashMap2 = new HashMap<JSONArray, Long>();
      hashMap2.putAll(hashMap0);
      HashMap<String, Double> hashMap3 = new HashMap<String, Double>();
      assertEquals(0, hashMap3.size());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6189978958658688
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      Integer integer0 = new Integer((-4001));
      JSONObject jSONObject0 = new JSONObject((Object) "true");
      Double.sum((-631.471678), (-631.471678));
      Double.isFinite((-631.471678));
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      Set<JSONArray> set0 = hashMap0.keySet();
      try { 
        jSONObject0.put((String) null, (Collection) set0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.507949694759748
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      Float.min(1.5121346F, 1815.3331F);
      Float.sum(1815.3331F, 1815.3331F);
      Float.max(0.0F, 0.0F);
      Float.min(0.0F, 0.0F);
      Float.min((-670.53F), 0.0F);
      double double0 = 0.0;
      Float float0 = new Float(0.0);
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      String string0 = null;
      try { 
        jSONObject1.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7881502068860122
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      Float.isFinite(1.0F);
      Float.min(1.5121346F, 1815.3331F);
      Float.sum(1815.3331F, 1815.3331F);
      Float.max(0.0F, 0.0F);
      Float.min(0.0F, 0.0F);
      Float.min((-670.53F), 0.0F);
      Float float0 = new Float(0.0);
      Float.min((-670.53F), 1.0F);
      Float.min(0.0F, 1.0F);
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>(3, 554.052F);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      Integer integer0 = new Integer((-30803738));
      jSONObject0.accumulate("true", integer0);
      long long0 = jSONObject0.optLong("true");
      assertEquals(1, jSONObject0.length());
      assertEquals((-30803738L), long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.33441370096059
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(2187);
      JSONObject jSONObject0 = new JSONObject(integer0);
      Double.sum(2187, (-631.471678));
      Double.isFinite(0.0);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      Set<JSONArray> set0 = hashMap0.keySet();
      JSONObject jSONObject1 = jSONObject0.put("null", (Collection) set0);
      jSONObject0.names();
      jSONObject1.optJSONArray("null");
      String string0 = "isintValue";
      try { 
        jSONObject0.getDouble("re");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"re\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.322230210050763
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ";!eLCfUK";
      JSONObject jSONObject1 = jSONObject0.put(";!eLCfUK", (Collection) null);
      jSONObject0.put("xV;fBl3", 1.8169818690943975);
      String string1 = ": ";
      Byte byte0 = new Byte((byte) (-128));
      jSONObject0.accumulate(": ", jSONObject1);
      jSONObject0.putOpt("", (Object) null);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      // Undeclared exception!
      try { 
        jSONTokener0.next(';');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1015830955806851
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optDouble(47, Double.NaN);
      int int0 = 1300;
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Long long0 = new Long(34);
      Long.compare(34, 1300);
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = new Boolean(true);
      linkedList0.add(boolean1);
      Boolean.logicalXor(true, true);
      Boolean.logicalXor(true, true);
      linkedList0.add(boolean0);
      String string0 = ",\n";
      Long.getLong(",\n", 0L);
      jSONArray0.optInt(34);
      linkedList0.removeLastOccurrence(long0);
      jSONArray0.optInt(1415, 1415);
      jSONArray0.put(1300, (Collection) linkedList0);
      jSONArray0.optBoolean(34);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      // Undeclared exception!
      try { 
        linkedList1.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.886048952386867
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Byte byte0 = new Byte((byte)67);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[1] = "z%I";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = new JSONObject("z%I", stringArray0);
      JSONObject jSONObject2 = jSONObject0.append("JSONArray initial value should be a string or collection or array.", jSONObject1);
      JSONObject jSONObject3 = jSONObject2.put("true", 1.0);
      StringWriter stringWriter0 = new StringWriter((byte)67);
      jSONObject3.write(stringWriter0);
      jSONObject3.has(" at character ");
      Integer integer0 = new Integer((byte)67);
      Object object0 = new Object();
      JSONObject.valueToString(object0, 670, 61);
      String string0 = "PL,BRm%EQM2{s";
      jSONObject2.optLong("PL,BRm%EQM2{s", (long) (byte)67);
      try { 
        jSONObject0.getJSONObject("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray initial value should be a string or collection or array.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float.min(1.5121346F, 1815.3331F);
      Float.max((-1.0F), (-1.0F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      Float float0 = new Float(1.0F);
      linkedList1.add((Float) null);
      Float float1 = new Float(625.76F);
      Float.max((-1.0F), 1.5121346F);
      linkedList1.offer(float1);
      linkedList0.addLast(float1);
      linkedList1.add(float0);
      linkedList1.addFirst(float0);
      JSONObject.doubleToString(1939.614031);
      Float.sum(625.76F, (-1.0F));
      Float.sum((-1.0F), 1.0F);
      Double.min((-2179.1780352), (-1.0));
      Float.isFinite((-1.0F));
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6481786903646367
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      Byte byte0 = new Byte((byte) (-18));
      Long long0 = new Long((byte) (-18));
      JSONObject.valueToString(long0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("java.lang.Long@0000000001", "java.lang.Long@0000000001");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>(hashMap0);
      stringWriter0.append((CharSequence) ",:]}/\"[{;=#");
      HashMap<Object, Double> hashMap3 = new HashMap<Object, Double>();
      jSONObject0.put("!4", (Map) hashMap3);
      Integer integer0 = new Integer(8448);
      Integer integer1 = new Integer((byte) (-18));
      Double double0 = new Double(8448);
      Object object0 = new Object();
      JSONObject.valueToString(hashMap3, 8448, 1471);
      jSONObject0.optLong(",:]}/\"[{;=#", (long) 1471);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("fo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of fo
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Short short0 = new Short((short)4192);
      Short.toUnsignedLong((short)49);
      Short.toUnsignedInt((short) (-782));
      Short.toUnsignedInt((short)4192);
      Short.toUnsignedLong((short)49);
      JSONObject jSONObject0 = new JSONObject();
      Short.toUnsignedLong((short) (-2095));
      Short.compare((short) (-782), (short)1011);
      Integer.toUnsignedLong((short) (-782));
      Float float0 = new Float(717.9639F);
      Short short1 = new Short((short)2127);
      Short.compare((short)29, (short)2127);
      JSONObject jSONObject1 = jSONObject0.putOpt("g>&~ZO+", (Object) null);
      try { 
        jSONObject1.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7208342349300767
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ",\n";
      jSONObject0.optLong(",\n");
      jSONObject0.optInt("nH_Tpv^$mS9");
      jSONObject0.optJSONObject("On");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", (Collection) linkedList0);
      JSONObject.doubleToString(0);
      Float float0 = new Float((double) 0);
      linkedList0.add(float0);
      jSONObject1.has("W}\"A|pXInX");
      int int0 = 468;
      Integer integer0 = new Integer(468);
      JSONObject jSONObject2 = new JSONObject(integer0, stringArray0);
      jSONObject1.getJSONArray(",:]}/\"[{;=#");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.240759702914864
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "orEe";
      stringArray0[1] = "orEe";
      stringArray0[2] = "orEe";
      stringArray0[2] = "orEe";
      stringArray0[4] = "orEe";
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject1 = jSONObject0.putOpt("orEe", "orEe");
      jSONObject1.remove("orEe");
      try { 
        jSONObject0.getBoolean("orEe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"orEe\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4788576018531012
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "orEe");
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap1 = new HashMap<JSONArray, Long>(hashMap0);
      jSONObject0.toString(29, 101);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("SIHO_G7b[(qX=^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of SIHO_G7b[(qX=^
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2757157865636937
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt(";!eLCfUK", ";!eLCfUK");
      Boolean boolean1 = new Boolean(";!eLCfUK");
      String string0 = ",";
      jSONObject1.put("get", (Collection) null);
      String string1 = "Mpa6?V";
      JSONObject jSONObject2 = jSONObject1.put("Mpa6?V", (-915.0));
      byte byte0 = (byte)47;
      jSONObject2.get("Mpa6?V");
      Byte byte1 = new Byte((byte)47);
      JSONObject jSONObject3 = jSONObject2.putOpt(",", "Mpa6?V");
      jSONObject0.accumulate("Mpa6?V", (Object) null);
      JSONObject jSONObject4 = new JSONObject(jSONObject2);
      jSONObject3.putOpt(",", jSONObject4);
      JSONTokener jSONTokener0 = new JSONTokener("true");
      try { 
        jSONTokener0.next(';');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected ';' and instead saw 't' at character 1 of true
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.519206275040953
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      Byte byte0 = new Byte((byte) (-18));
      Long long0 = new Long((byte) (-18));
      JSONObject.valueToString(long0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("java.lang.Long@0000000001", "java.lang.Long@0000000001");
      JSONObject jSONObject1 = new JSONObject((Object) ",:]}/\"[{;=#");
      JSONObject jSONObject2 = jSONObject1.append("java.lang.Long@0000000001", stringWriter0);
      Boolean.logicalAnd(true, true);
      jSONObject2.put(",:]}/\"[{;=#", (-3837.112));
      Float float0 = new Float(0.0);
      JSONObject jSONObject3 = new JSONObject(",:]}/\"[{;=#", stringArray0);
      jSONObject2.append("java.lang.Long@0000000001", jSONObject3);
      jSONObject2.put(",:]}/\"[{;=#", true);
      assertEquals(5, jSONObject2.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      Byte byte0 = new Byte((byte) (-18));
      Boolean.valueOf("*nbAjD<0Ogi*5U");
      Float float0 = new Float((float) (byte) (-18));
      Float float1 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.865919034829084
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-120));
      JSONTokener jSONTokener0 = new JSONTokener("jb9TIZ7%E>");
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "jb9TIZ7%E>";
      stringArray0[1] = "jb9TIZ7%E>";
      stringArray0[2] = "jb9TIZ7%E>";
      stringArray0[3] = "jb9TIZ7%E>";
      stringArray0[4] = "jb9TIZ7%E>";
      stringArray0[5] = "jb9TIZ7%E>";
      jSONObject0.put("Q", (-1.0));
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.append("\r", boolean0);
      JSONObject jSONObject2 = jSONObject1.put("jb9TIZ7%E>", 0.0);
      jSONObject2.has("qsB:");
      jSONObject0.keys();
      Long long0 = new Long(1987L);
      jSONObject1.accumulate("vx6E1?4'hu(+!w>aPj'", long0);
      jSONObject2.toString(1963);
      jSONObject2.optBoolean("jb9TIZ7%E>", false);
      // Undeclared exception!
      jSONObject2.toString((int) (byte) (-120), 1963);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "{q";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {q
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3899633616366383
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double double0 = new Double(340.046422);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Double.sum(0.0, 0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("U`P<q4{DQ.^F^", double0);
      jSONObject1.optInt("U`P<q4{DQ.^F^");
      Double.isFinite((-3582.8431));
      jSONObject0.optJSONArray("pa");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3167764286957957
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Boolean.valueOf(",:]}/\"[{;=#");
      Double double0 = new Double((-42.427528));
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", boolean1);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.put(",:]}/\"[{;=#", (-5087.856783831712));
      try { 
        jSONObject1.getLong(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3935343515788563
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = Double.NaN;
      Double double1 = new Double(Double.NaN);
      byte byte0 = (byte)68;
      Byte byte1 = new Byte((byte) (-60));
      try { 
        JSONObject.valueToString(double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3336610304416983
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Byte byte0 = new Byte((byte)67);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[1] = "z%I";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("isputOpt", (long) (byte)67);
      jSONObject0.optLong("put", 2462L);
      String string0 = "";
      String string1 = "java.lang.Float@0000000001.";
      jSONObject1.optDouble("java.lang.Float@0000000001.", (double) 2462L);
      jSONObject1.getLong("isputOpt");
      try { 
        jSONObject0.getInt("getgetNames");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetNames\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8761026062292383
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", (-16.639559896325068));
      jSONObject1.getLong(",:]}/\"[{;=#");
      jSONObject2.getInt(",:]}/\"[{;=#");
      Short short0 = new Short((short)46);
      JSONObject jSONObject3 = jSONObject0.accumulate(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject.getNames((Object) "Bad value from toJSONString: ");
      JSONObject jSONObject4 = jSONObject2.put(",:]}/\"[{;=#", false);
      jSONObject4.getString(",:]}/\"[{;=#");
      jSONObject4.optLong("49.0");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject3.toJSONArray(jSONArray0);
      JSONObject jSONObject5 = jSONObject3.put("\t", true);
      assertSame(jSONObject5, jSONObject4);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8567883134081615
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Boolean.valueOf(false);
      Double double0 = new Double(0.0);
      Byte byte0 = new Byte((byte)24);
      JSONObject.valueToString(double0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>(hashMap0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "java.lang.Double@0000000001");
      JSONObject jSONObject1 = jSONObject0.put("getcompareTo", (Map) hashMap2);
      jSONObject1.write(stringWriter1);
      Float.isFinite((-4172.5F));
      JSONObject.doubleToString(Double.NaN);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.optInt("nu", (-1680));
      jSONObject1.optJSONArray("java.lang.Double@0000000001");
      jSONObject0.optString("getcompareTo", "null");
      JSONObject jSONObject2 = jSONObject0.append("] not found.", hashMap0);
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.569629979084266
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte byte0 = (byte) (-120);
      Byte byte1 = new Byte((byte) (-120));
      String[] stringArray0 = new String[2];
      Byte.toUnsignedInt((byte) (-120));
      stringArray0[0] = "getgetBoolean";
      stringArray0[1] = "";
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("", "getgetBoolean");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Boolean boolean0 = new Boolean("getgetBoolean");
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      jSONObject1.put("getgetBoolean", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray1.put(136, true);
      jSONArray2.put(1.0);
      JSONArray jSONArray3 = new JSONArray();
      jSONArray3.put(116, (Object) byte1);
      JSONObject jSONObject2 = jSONObject0.put("jTys(pRVBR)3", (int) (byte) (-120));
      jSONObject0.optLong("null");
      jSONObject2.getLong("jTys(pRVBR)3");
      try { 
        jSONObject1.getJSONArray("<Zs0IH~r2Zt[Xl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<Zs0IH~r2Zt[Xl\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.853453377079092
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      try { 
        jSONObject1.getDouble(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.26611155761449
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Double double0 = new Double(4344.165920008041);
      JSONObject jSONObject0 = new JSONObject((Object) "");
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap1 = new HashMap<JSONArray, Long>(hashMap0);
      // Undeclared exception!
      jSONObject0.toString(9, 8192);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.21084549553677
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Double double0 = new Double(340.046422);
      Double double1 = new Double(0.0);
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      try { 
        Long.decode("z(gd/[r#SgP(rO?Y;\u0004");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"z(gd/[r#SgP(rO?Y;\u0004\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.4735311753621145
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap1 = new HashMap<JSONArray, Long>(hashMap0);
      jSONObject0.toString((-919), (-2284));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      HashMap<JSONArray, Long> hashMap2 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap3 = new HashMap<JSONArray, Long>();
      hashMap3.putAll(hashMap0);
      // Undeclared exception!
      try { 
        hashMap1.putAll((Map<? extends JSONArray, ? extends Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8978053853621675
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Boolean.valueOf(":]/\"0X[{;#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ":]/\"0X[{;#";
      stringArray0[1] = ":]/\"0X[{;#";
      stringArray0[2] = ":]/\"0X[{;#";
      stringArray0[3] = ":]/\"0X[{;#";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1396));
      linkedList0.add(integer0);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      hashMap0.values();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      hashMap1.keySet();
      Boolean boolean0 = new Boolean(false);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double double0 = new Double(1.0);
      Double.max((-543.7624904602), 0.0);
      Integer integer1 = new Integer(103);
      Short short0 = new Short((short) (-20956));
      Short.toUnsignedLong((short) (-1547));
      JSONObject jSONObject2 = new JSONObject(short0);
      assertEquals(1, jSONObject2.length());
      
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2892657859513244
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 0.0);
      jSONObject1.has("");
      JSONObject jSONObject2 = new JSONObject(",:]}/\"[{;=#", stringArray0);
      Object object0 = jSONObject0.opt(",:]}/\"[{;=#");
      assertEquals(0.0, object0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.2865071652616695
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "{q";
      Integer integer0 = new Integer((-76));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{q";
      stringArray0[1] = "{q";
      stringArray0[2] = "{q";
      stringArray0[3] = "{q";
      stringArray0[4] = "{q";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Integer.getInteger("{q", (-76));
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("", object0);
      String string1 = "getdoubleToRawLongBits";
      jSONObject0.put("getdoubleToRawLongBits", 0.0);
      String string2 = "Jt:ze75";
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      Float.isFinite(1.0F);
      Float.min(1.5121346F, 1815.3331F);
      Float.sum((-2813.8445F), 1.5121346F);
      Float.max(1.0F, 1.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      Float float0 = new Float(1.0F);
      linkedList1.add((Float) null);
      Float float1 = new Float(625.76F);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      hashMap0.values();
      hashMap0.keySet();
      Boolean boolean0 = new Boolean(true);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.648620504964382
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-120));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "getgetBooBean";
      stringArray0[1] = "O^";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("O^", "getgetBooBean");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject2 = new JSONObject("O^", stringArray0);
      jSONObject2.append("getgetBooBean", jSONObject1);
      jSONObject2.put("getgetBooBean", (double) (-26713449));
      jSONObject2.has("getgetBooBean");
      String[] stringArray1 = new String[9];
      stringArray1[0] = "+4VTirI~I+MY\\{&";
      stringArray1[1] = "getgetBooBean";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[7] = "ismin";
      stringArray1[5] = "O^";
      stringArray1[6] = "@?Qx(CvC$-zd_trZV?-";
      stringArray1[7] = "";
      stringArray1[8] = "O^";
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Double double0 = new Double((-1375.460747263));
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap1 = new HashMap<JSONArray, Long>(hashMap0);
      jSONObject0.toString(101, 101);
      JSONObject jSONObject1 = new JSONObject("{}");
      HashMap<JSONArray, Long> hashMap2 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap3 = new HashMap<JSONArray, Long>();
      hashMap3.putAll(hashMap1);
      hashMap0.putAll(hashMap3);
      HashMap<String, Double> hashMap4 = new HashMap<String, Double>();
      assertEquals(0, hashMap4.size());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Byte byte0 = new Byte((byte)67);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "&";
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        hashMap0.merge("&", (Double) null, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap1 = new HashMap<JSONArray, Long>();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-296), (-296));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0886606529337475
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(false, false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.append("{c@UF(>XX", boolean0);
      jSONObject0.opt((String) null);
      try { 
        jSONObject0.getBoolean("nk V!1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nk V!1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.8541041607088595
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = jSONObject0.put("6'b2*{q", (Object) null);
      JSONObject jSONObject2 = jSONObject0.put("6'b2*{q", 1L);
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short) (-134));
      Long long0 = new Long((short) (-134));
      Float.isFinite((short) (-134));
      JSONObject.doubleToString(0.0);
      jSONObject0.optString("Expe`ted '", "0");
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject3.toString();
      jSONObject0.getInt("6'b2*{q");
      jSONObject1.isNull("~1`b");
      JSONObject jSONObject4 = jSONObject3.append("0", "&Ga");
      assertFalse(jSONObject4.equals((Object)jSONObject2));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5191709023509072
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      Float.isFinite(1.0F);
      Float.min(1.5121346F, 1815.3331F);
      Float.sum((-2813.8445F), 1.5121346F);
      Float.max((-1.0F), (-1.0F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      Float float0 = new Float(1.0F);
      Float float1 = new Float(625.76F);
      linkedList1.offer(float1);
      linkedList1.add(float0);
      linkedList1.addFirst(float0);
      JSONObject.doubleToString(1939.614031);
      Float float2 = new Float((double) 1.5121346F);
      linkedList0.add(float2);
      Float float3 = new Float(0.0);
      linkedList0.add(float2);
      linkedList1.add(float0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{;kGK^}.nX{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 1 of {;kGK^}.nX{
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.065739050949497
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      Boolean.logicalAnd(true, true);
      jSONObject0.put(",:]}/\"[{;=#", 0.0);
      Float float0 = new Float(0.0);
      try { 
        jSONObject1.append(",:]}/\"[{;=#", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[,:]}/\"[{;=#] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.646615603374066
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Boolean.valueOf(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "getcompareTo";
      stringArray0[0] = "getcompareTo";
      JSONObject jSONObject0 = new JSONObject("getcompareTo", stringArray0);
      jSONObject0.names();
      jSONObject0.optLong("%/9V6x,U6p&");
      JSONObject jSONObject1 = jSONObject0.put("X]t?Xqm,:D'D`8c", (double) 0L);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.accumulate("getcompareTo", boolean0);
      jSONObject1.getBoolean("getcompareTo");
      try { 
        jSONObject0.getInt("ismax");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ismax\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.0767375430942647
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("true", "true");
      jSONObject0.getBoolean("true");
      try { 
        jSONObject1.get("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.005951530670934
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("orEe", jSONArray0);
      try { 
        jSONObject0.getBoolean("orEe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"orEe\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8989668615652522
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = ",:]}/\\\"[{;=#";
      Boolean.valueOf(",:]}/\"[{;=#");
      JSONObject jSONObject0 = new JSONObject();
      String string1 = ";!eLCfUK";
      jSONObject0.putOpt(",:]}/\"[{;=#", ";!eLCfUK");
      try { 
        jSONObject0.getBoolean(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.084928952551198
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 0.0);
      jSONObject1.has("");
      JSONObject jSONObject2 = new JSONObject(",:]}/\"[{;=#", stringArray0);
      try { 
        jSONObject0.getJSONArray(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5279302732165236
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-120));
      String[] stringArray0 = new String[2];
      Byte.toUnsignedInt((byte) (-120));
      stringArray0[0] = "getgetBoolean";
      stringArray0[1] = "";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("", "getgetBoolean");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject2 = new JSONObject("", stringArray0);
      jSONObject2.append("getgetBoolean", jSONObject1);
      jSONObject2.put("getgetBoolean", (double) 34);
      jSONObject2.has("getgetBoolean");
      Integer integer0 = new Integer(136);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "+4VTirI~I+MY\\{&";
      stringArray1[1] = "getgetBoolean";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "ismin";
      stringArray1[5] = "";
      stringArray1[6] = "@?Qx(CvC$-zd_trZV?-";
      stringArray1[7] = "";
      stringArray1[8] = "";
      JSONObject jSONObject3 = new JSONObject(integer0, stringArray1);
      jSONObject1.getJSONArray("");
      JSONObject jSONObject4 = jSONObject0.put("ismin", (Object) jSONObject3);
      assertSame(jSONObject4, jSONObject0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of F
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(2187);
      Double.sum(0.0F, 0.0F);
      Double.isFinite(0.0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("kXpe)bKB", integer0);
      Float float0 = new Float(0.0F);
      Byte byte0 = new Byte((byte) (-88));
      try { 
        jSONObject1.put((String) null, (Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.890759204840123
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", 0.0);
      jSONObject1.getLong(",:]}/\"[{;=#");
      jSONObject2.getInt(",:]}/\"[{;=#");
      Boolean.logicalXor(false, true);
      jSONObject0.put("49.0", true);
      Integer integer0 = new Integer(0);
      jSONObject2.optDouble(",:]}/\"[{;=#");
      JSONObject jSONObject3 = jSONObject2.put(",`X(1-\"c7v.}JHA", 0);
      assertSame(jSONObject3, jSONObject1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.3497009968360065
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      Float float1 = new Float(0.0F);
      String[] stringArray0 = new String[6];
      stringArray0[3] = "\f";
      Float.max(0.0F, 2776.005F);
      Float.isFinite(2776.005F);
      jSONObject0.has("kEfWZIP");
      Float.isFinite(0.0F);
      JSONObject.doubleToString(2776.005F);
      jSONObject0.optString("lo", "");
      jSONObject0.toString();
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("kas4o5Lk'^Gff]@", (Object) "{}");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.048825628287185
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = ",:]}\\\"[{;=#";
      Boolean boolean0 = Boolean.valueOf(",:]}\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}\"[{;=#";
      stringArray0[1] = ",:]}\"[{;=#";
      stringArray0[2] = ",:]}\"[{;=#";
      stringArray0[3] = ",:]}\"[{;=#";
      stringArray0[4] = ",:]}\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}\"[{;=#", ",:]}\"[{;=#");
      JSONObject jSONObject2 = jSONObject0.put(",:]}\"[{;=#", 0.0);
      jSONObject1.getLong(",:]}\"[{;=#");
      jSONObject2.getInt(",:]}\"[{;=#");
      Short short0 = new Short((short)46);
      JSONObject jSONObject3 = jSONObject0.accumulate(",:]}\"[{;=#", ",:]}\"[{;=#");
      JSONObject.getNames((Object) "Bad value from toJSONString: ");
      JSONObject jSONObject4 = jSONObject2.put(",:]}\"[{;=#", false);
      jSONObject4.getString(",:]}\"[{;=#");
      JSONObject.getNames(jSONObject2);
      Float float0 = new Float(0.0F);
      jSONObject3.putOpt("gjT]uxQ, #68_(s|", float0);
      jSONObject4.optLong("49.0");
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject3.getDouble("49.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"49.0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.664334665017352
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Double double0 = new Double((-1375.460747263));
      JSONObject jSONObject0 = new JSONObject(double0);
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      BiFunction<JSONArray, Long, Long> biFunction0 = (BiFunction<JSONArray, Long, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      HashMap<JSONArray, Long> hashMap1 = new HashMap<JSONArray, Long>(hashMap0);
      jSONObject0.toString(101, 101);
      JSONObject jSONObject1 = new JSONObject("{\n                                                                                                                                                                                                          \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                                                                          \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                                                                          \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                                                                     }");
      HashMap<JSONArray, Long> hashMap2 = new HashMap<JSONArray, Long>();
      String string0 = "\\t";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject1.put("\t", (Collection) linkedList0);
      Float float0 = new Float((-1.0));
      jSONObject1.putOpt((String) null, float0);
      try { 
        jSONObject1.getJSONObject("{\n                                                                                                                                                                                                          \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                                                                          \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                                                                          \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                                                                     }");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n                                                                                                                                                                                                          \\\"java.lang.String@0000000002\\\": java.lang.Boolean@0000000003,\\n                                                                                                                                                                                                          \\\"java.lang.String@0000000004\\\": java.lang.Boolean@0000000005,\\n                                                                                                                                                                                                          \\\"java.lang.String@0000000006\\\": \\\"java.lang.Class@0000000007\\\"\\n                                                                                                     }\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5610752965144479
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Expected a ',' or '}'";
      Float.isFinite(1.0F);
      Float.min(1.0F, 1.0F);
      Float float0 = new Float(921.3871F);
      Double.isFinite(1815.3331F);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      Set<JSONArray> set0 = hashMap0.keySet();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      HashMap<JSONArray, Integer> hashMap2 = new HashMap<JSONArray, Integer>();
      hashMap2.clear();
      hashMap0.values();
      HashMap<JSONArray, Integer> hashMap3 = new HashMap<JSONArray, Integer>();
      hashMap1.keySet();
      Boolean boolean0 = new Boolean(true);
      JSONArray jSONArray0 = new JSONArray((Collection) set0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap3);
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.6343906646165616
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "t,ue";
      Float.isFinite(1.0F);
      Float.min(1.5121346F, 1815.3331F);
      Float.sum(1815.3331F, 1815.3331F);
      Float.min(3630.6663F, 1.0F);
      Float.min(1.0F, 1815.3331F);
      Float float0 = new Float((double) 1.5121346F);
      Integer integer0 = new Integer(518);
      Integer integer1 = new Integer((-428));
      Integer integer2 = new Integer((-3836));
      Integer integer3 = new Integer((-3736));
      Integer integer4 = Integer.valueOf((-428));
      Integer.remainderUnsigned(55, (-3836));
      Integer.getInteger("t,ue", integer4);
      Integer integer5 = new Integer((-428));
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      Collection<Integer> collection0 = hashMap0.values();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      JSONArray jSONArray0 = new JSONArray(collection0);
      Double double0 = new Double((-3736));
      Double.max(3630.6663F, 1.5121346F);
      Integer integer6 = new Integer((-428));
      Short short0 = new Short((short)7546);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap1);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(2187);
      Double.sum(0.0F, 0.0F);
      Double.isFinite(0.0);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      hashMap0.keySet();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      HashMap<JSONArray, Integer> hashMap2 = new HashMap<JSONArray, Integer>();
      hashMap2.values();
      HashMap<JSONArray, Integer> hashMap3 = new HashMap<JSONArray, Integer>();
      hashMap3.keySet();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Float.isFinite(0.0F);
      Float.min(0.0F, 2855.2761F);
      Float.sum(0.0F, 0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      Float float0 = new Float((-1614.0F));
      Float float1 = new Float((-278.73F));
      Float.sum((-1.0F), 0.0F);
      linkedList0.clone();
      Float.sum(0.0F, (-1.0F));
      linkedList0.addFirst(float1);
      JSONObject.doubleToString(1.0F);
      Float float2 = new Float(328.0);
      Float float3 = new Float((double) 0.0F);
      linkedList1.add(float0);
      Float float4 = new Float(0.0F);
      linkedList0.push(float4);
      Float float5 = new Float(1456.896701059);
      linkedList0.add((Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.994551140392763
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      Byte byte0 = new Byte((byte) (-18));
      Long long0 = new Long((byte) (-18));
      JSONObject.valueToString(long0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", (double) (byte) (-18));
      jSONObject1.optLong("java.lang.Long@0000000001");
      jSONObject0.optInt(",:]}/\"[{;=#");
      jSONObject0.optJSONObject("{ufH4q{H(i!U");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      jSONObject1.put(",:]}/\"[{;=#", (Collection) linkedList1);
      JSONObject.doubleToString((-1449.25454717));
      jSONObject1.has(",:]}/\"[{;=#");
      JSONObject jSONObject2 = new JSONObject("8@G%JM", stringArray0);
      jSONObject2.put("getvalues", true);
      try { 
        jSONObject2.getJSONArray("F/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"F/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8743555868395938
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(2187);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Double.sum(401.726541, (-1693.564407));
      Double.isFinite(401.726541);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      Set<JSONArray> set0 = hashMap0.keySet();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      HashMap<JSONArray, Integer> hashMap2 = new HashMap<JSONArray, Integer>();
      Collection<Integer> collection0 = hashMap2.values();
      hashMap1.keySet();
      Boolean boolean1 = new Boolean(true);
      JSONArray jSONArray0 = new JSONArray((Collection) set0);
      Boolean.valueOf(false);
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.accumulate("[", jSONArray1);
      jSONObject0.accumulate("[", collection0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.0277883211927774
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      int int0 = jSONObject0.optInt(",:]}/\"[{;=#");
      assertEquals(0, int0);
      
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", 0.0);
      jSONObject1.getLong(",:]}/\"[{;=#");
      jSONObject2.getInt(",:]}/\"[{;=#");
      Short short0 = new Short((short)46);
      JSONObject jSONObject3 = jSONObject0.accumulate(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      String[] stringArray1 = JSONObject.getNames((Object) "Bad value from toJSONString: ");
      assertNotNull(stringArray1);
      
      jSONObject0.optLong(",:]}/\"[{;=#", (long) 0);
      JSONObject jSONObject4 = new JSONObject();
      jSONObject1.toString();
      jSONObject2.opt(",:]}/\"[{;=#");
      String string0 = jSONObject3.getString(",:]}/\"[{;=#");
      String string1 = jSONObject3.optString(",:]}/\"[{;=#");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.8209903974407697
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[0];
      Float.max(2635.6375F, 2635.6375F);
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      Short short0 = new Short((short) (-433));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.put((String) null, 934L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.7099284913365564
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double double0 = new Double(340.046422);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optDouble((String) null, (-3317.514717543522));
      HashMap<JSONArray, Long> hashMap0 = null;
      try {
        hashMap0 = new HashMap<JSONArray, Long>((Map<? extends JSONArray, ? extends Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.9494837273589989
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "RDA[");
      try { 
        jSONObject0.getJSONObject("RDA[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"RDA[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.1110942732940394
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "orEe";
      stringArray0[1] = "orEe";
      stringArray0[2] = "orEe";
      stringArray0[2] = "orEe";
      stringArray0[4] = "orEe";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("orEe", "orEe");
      String string0 = "s";
      JSONObject jSONObject1 = jSONObject0.put(".", 0L);
      try { 
        jSONObject1.getInt("orEe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"orEe\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.2921850617822144
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "val";
      stringArray0[1] = "val";
      stringArray0[2] = "val";
      stringArray0[3] = "val";
      stringArray0[4] = "val";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("val", "val");
      jSONObject1.optLong("val", (-513L));
      try { 
        jSONObject0.getBoolean("val");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"val\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.0290330539463177
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Short short0 = new Short((short)123);
      Short.toUnsignedLong((short)123);
      Short.toUnsignedInt((short)123);
      Short.toUnsignedInt((short) (-390));
      Short.toUnsignedLong((short)123);
      JSONObject jSONObject0 = new JSONObject();
      Short.toUnsignedLong((short)4656);
      Short.compare((short)123, (short)46);
      Integer.toUnsignedLong(65146);
      Float float0 = new Float((float) (short)123);
      Short short1 = new Short((short)4656);
      Short.compare((short)46, (short) (-347));
      Double double0 = new Double(0.0);
      Double.isFinite(123);
      Double.max((short)46, (short)4656);
      Double.max(1713.3363420274, 393);
      JSONObject jSONObject1 = jSONObject0.putOpt("g>&~ZO+", double0);
      jSONObject1.getDouble("g>&~ZO+");
      try { 
        jSONObject0.getJSONObject("g>&~ZO+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g>&~ZO+\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.9494837273589989
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = 340.046422;
      Double double1 = new Double(340.046422);
      JSONObject jSONObject0 = new JSONObject(double1);
      String string0 = "X,iZPbi\"p4c";
      String string1 = "isoptJSONObject";
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      try { 
        jSONObject0.getInt("r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(2187);
      Double.sum(0.0F, 0.0F);
      Double.isFinite(0.0);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      hashMap0.keySet();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      HashMap<JSONArray, Integer> hashMap2 = new HashMap<JSONArray, Integer>();
      Integer integer1 = new Integer(2187);
      Integer integer2 = new Integer(2187);
      Integer.getInteger("zPlY?rePNHK");
      Integer integer3 = new Integer(2187);
      Integer.getInteger("zPlY?rePNHK", integer2);
      Integer integer4 = new Integer(2187);
      hashMap2.values();
      HashMap<JSONArray, Integer> hashMap3 = new HashMap<JSONArray, Integer>();
      Double.sum(0.0F, 2187);
      Float float0 = new Float((double) 2187);
      Float.isFinite((float) integer3);
      Float.min(0.0F, (float) integer3);
      Float.min(464.2F, (-1.0F));
      Float float1 = new Float(0.0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(2187);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.7465666702827662
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[1] = stringArray0[0];
      Byte byte0 = new Byte((byte) (-18));
      Long long0 = new Long((byte) (-18));
      JSONObject.quote(stringArray0[1]);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>(hashMap0);
      stringWriter0.append((CharSequence) ",:]}/\"[{;=#");
      HashMap<Object, Double> hashMap3 = new HashMap<Object, Double>();
      JSONObject jSONObject1 = jSONObject0.put("!4", (Map) hashMap3);
      jSONObject1.write(stringWriter0);
      Float.isFinite((-1.0F));
      JSONObject.doubleToString((-352.25F));
      Boolean boolean0 = Boolean.FALSE;
      jSONObject1.optInt((String) null, 9);
      String string0 = hashMap2.put((String) null, "%UG8E3RN!y&hXz\"l");
      JSONObject jSONObject2 = new JSONObject((Map) hashMap2);
      jSONObject2.optJSONArray((String) null);
      Byte.compare((byte) (-18), (byte)123);
      jSONObject2.optString(" ff7OpN4cfi", string0);
      JSONObject.doubleToString((byte) (-18));
      JSONObject.numberToString(byte0);
      String string1 = "E<,|`mU+YVM";
      try { 
        jSONObject2.getDouble("E<,|`mU+YVM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"E<,|`mU+YVM\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.3798545484938445
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      jSONObject0.optLong((String) null);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.accumulate("M&ObZuE=,BM", (Object) null);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optLong("/4(>V=FW,", 1L);
      String string1 = "";
      jSONObject0.optLong("W#9wf^.DNNiI5f$J/fD");
      try { 
        jSONObject0.getDouble("HH{X~5Ji:8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"HH{X~5Ji:8\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.3030631272174755
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Boolean.valueOf(",:]}/\"[{;=#");
      Double double0 = new Double((-42.427528));
      Byte byte0 = new Byte((byte)68);
      JSONObject.valueToString(byte0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>(hashMap1);
      stringWriter0.append((CharSequence) "java.lang.Byte@0000000001");
      jSONObject0.put("?vUyKzD[JG[K%u:I ", (Map) hashMap0);
      jSONObject0.write(stringWriter0);
      Float.isFinite((-352.25F));
      try { 
        Long.decode("java.lang.Byte@0000000001");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Byte@0000000001\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.1869977945039083
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(2187);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Double.sum((-1693.564407), (-631.471678));
      Double.isFinite(2187);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      hashMap0.keySet();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      hashMap0.values();
      StringWriter stringWriter0 = new StringWriter(100);
      Float.isFinite(2187);
      stringWriter0.close();
      stringWriter0.close();
      jSONObject0.write(stringWriter0);
      Long long0 = Long.decode("0");
      assertEquals(0L, (long)long0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(2187);
      Double.sum(0.0F, 0.0F);
      Double.isFinite(0.0);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      hashMap0.keySet();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      HashMap<JSONArray, Integer> hashMap2 = new HashMap<JSONArray, Integer>();
      Integer integer1 = new Integer(2187);
      Integer integer2 = new Integer(2187);
      Integer.toUnsignedLong(2187);
      Integer.getInteger("zPlY?rePNHK", integer2);
      Integer integer3 = new Integer(2187);
      hashMap2.values();
      HashMap<JSONArray, Integer> hashMap3 = new HashMap<JSONArray, Integer>();
      Set<JSONArray> set0 = hashMap3.keySet();
      Boolean.valueOf(true);
      JSONArray jSONArray0 = new JSONArray((Collection) set0);
      Double double0 = new Double((-1.0));
      hashMap3.clone();
      HashMap<JSONArray, Long> hashMap4 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap5 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap6 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap7 = new HashMap<JSONArray, Long>();
      hashMap4.putAll(hashMap7);
      HashMap<JSONArray, Long> hashMap8 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap9 = new HashMap<JSONArray, Long>(hashMap5);
      HashMap<String, Double> hashMap10 = new HashMap<String, Double>();
      Short short0 = new Short((short)128);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "zPlY?rePNHK";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      boolean boolean1 = jSONObject0.isNull("zPlY?rePNHK");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.750811717968241
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      Byte byte0 = new Byte((byte) (-18));
      Long long0 = new Long((byte) (-18));
      JSONObject.valueToString(long0);
      StringWriter stringWriter0 = new StringWriter();
      Long.compareUnsigned(5795L, (byte) (-18));
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("java.lang.Long@0000000001", "java.lang.Long@0000000001");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>(hashMap0);
      stringWriter0.append((CharSequence) ",:]}/\"[{;=#");
      HashMap<Object, Double> hashMap3 = new HashMap<Object, Double>();
      JSONObject jSONObject1 = jSONObject0.put("!4", (Map) hashMap3);
      hashMap1.values();
      jSONObject0.keys();
      jSONObject1.keys();
      hashMap0.putAll(hashMap1);
      Double double0 = new Double((byte) (-18));
      hashMap3.put("java.lang.Long@0000000001", double0);
      Long long1 = new Long(0L);
      Long.getLong(",:]}/\"[{;=#", (long) (-1));
      jSONObject1.accumulate(",:]}/\"[{;=#", long1);
      jSONObject1.toString(3071);
      jSONObject1.toString(13, 101);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap2);
      try { 
        jSONObject2.getDouble("{\n                                                                                                                  \"java.lang.String@0000000004\": {},\n                                                                                                                  \"java.lang.String@0000000005\": java.lang.Long@0000000006\n                                                                                                     }");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n                                                                                                                  \\\"java.lang.String@0000000004\\\": {},\\n                                                                                                                  \\\"java.lang.String@0000000005\\\": java.lang.Long@0000000006\\n                                                                                                     }\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.3265314879986048
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap1 = new HashMap<JSONArray, Long>(hashMap0);
      jSONObject0.toString(101, (-2975));
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,:]}/\"[{;=#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.473028097443453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = ",:]}/\\\"[{;=#";
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.append("] is not a number.", stringArray0[4]);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.toString(2, 39);
      Integer integer0 = new Integer(101);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,:]}/\"[{;=#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.68431923333042
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", 0.0);
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getLong(",:]}/\"[{;=#");
      Integer integer0 = new Integer((-1172));
      JSONObject jSONObject3 = new JSONObject(integer0, stringArray0);
      JSONObject.valueToString(jSONObject3, (-1172), (-1172));
      jSONObject2.getInt(",:]}/\"[{;=#");
      Boolean.logicalXor(false, true);
      jSONObject0.put("49.0", true);
      int int0 = jSONObject1.optInt("Bad value from toJSONString: ", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Float.isFinite(0.0F);
      Float.min(1.0F, 0.0F);
      Float.sum(1815.3331F, 0.0F);
      Float.max(0.0F, 0.0F);
      Float.min(0.0F, (-545.6327F));
      Float.min(0.0F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      Float.min(0.0F, (-741.0F));
      Float.min((-2168.61F), 0.0F);
      HashMap<Byte, Object> hashMap1 = new HashMap<Byte, Object>(8448, 1.0F);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Short.toUnsignedInt((short) (-4261));
      int int0 = Short.toUnsignedInt((short)54);
      long long0 = new Short((short) (-4261));
      JSONObject jSONObject0 = new JSONObject();
      Short.compare((short)61, (short) (-388));
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap1 = new HashMap<JSONArray, Long>();
      hashMap1.putAll(hashMap0);
      HashMap<JSONArray, Long> hashMap2 = new HashMap<JSONArray, Long>(hashMap0);
      HashMap<String, Double> hashMap3 = new HashMap<String, Double>();
      int int1 = jSONObject0.length();
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.593099266678872
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = ",:]}/\\\"[{;=#";
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.optLong("] is not a Boolean.", 0L);
      String string1 = "";
      String string2 = "HH{X~5Ji:8";
      try { 
        jSONObject0.getDouble(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.326238859694458
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "orEe";
      stringArray0[1] = "orEe";
      stringArray0[2] = "orEe";
      stringArray0[3] = "orEe";
      Float.max((-1.0F), (-1.0F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Float> linkedList2 = new LinkedList<Float>(linkedList1);
      linkedList1.add((Float) null);
      Float float0 = new Float((-1.0F));
      linkedList1.add((Float) null);
      Float float1 = new Float((-15.11235F));
      Float.max((-15.11235F), 0.0F);
      Float.min(0.0F, (-1.0F));
      Float.min(0.0F, (-1.0F));
      Float.isFinite((-1458.3F));
      Float.sum((-2654.0F), 2477.4077F);
      Float.sum((-1.0F), (-1.0F));
      Float.min((-3340.04F), (-1.0F));
      Float.isFinite((-1.0F));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.put("KKP;HnL", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.934551794074474
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double(340.046422);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.getNames(jSONObject0);
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap1 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap2 = new HashMap<JSONArray, Long>(hashMap1);
      HashMap<String, Double> hashMap3 = new HashMap<String, Double>();
      assertTrue(hashMap3.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.988787946554966
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", (double) 32);
      jSONObject0.optLong("");
      jSONObject1.optLong("", 0L);
      Integer.getInteger("'");
      jSONObject0.toString();
      Double double0 = Double.valueOf((double) 32L);
      double double1 = new Double(32L);
      Double.sum(1.3511258069421879, 1.3511258069421879);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      jSONObject1.optLong("");
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.accumulate("", jSONObject1);
      jSONObject1.getJSONArray("");
      JSONObject.getNames((Object) jSONObject1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.6363258614716907
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt(",:]}/\"[{;=#");
      try { 
        jSONObject0.put((String) null, 61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Short short0 = new Short((short)39);
      Short short1 = new Short((short)39);
      Short short2 = new Short((short)92);
      JSONObject.quote("C]4S#g8T@/,3((Mo");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.poll();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      // Undeclared exception!
      try { 
        linkedList1.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.682145726091479
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(2187);
      Double.sum(0.0F, 0.0F);
      Double.isFinite(0.0);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      hashMap0.keySet();
      Short.toUnsignedLong((short)44);
      JSONObject jSONObject0 = new JSONObject();
      Short.toUnsignedLong((short)33);
      Short.compare((short)22950, (short)218);
      Integer.toUnsignedLong(2187);
      Float float0 = new Float(0.0F);
      Short short0 = new Short((short) (-2095));
      Short.compare((short)218, (short) (-686));
      String string0 = "+,Wx2}n lIcwV";
      jSONObject0.putOpt("+,Wx2}n lIcwV", float0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.476941678592489
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "b,~{d?k=xGL{;\"";
      stringArray0[1] = "iM2SP4]E";
      stringArray0[2] = "] is not a Boolean.";
      stringArray0[3] = " ^prh_a$Y z:,t*~=E";
      stringArray0[4] = "wheel.json.JSONObject$1";
      stringArray0[5] = "] is not a Boolean.";
      stringArray0[6] = ";~\"K!";
      stringArray0[7] = "";
      boolean boolean0 = jSONObject0.optBoolean("z`@s \"ngSvD");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      linkedList2.removeLastOccurrence(linkedList1);
      Float float0 = new Float(0.0F);
      JSONObject.getNames((Object) null);
      linkedList2.removeLastOccurrence(linkedList1);
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      Float float1 = new Float(0.0F);
      linkedList1.add(float1);
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      linkedList3.toArray();
      linkedList1.removeLast();
      LinkedList<Float> linkedList5 = new LinkedList<Float>();
      Float float2 = new Float(0.0F);
      linkedList5.add(float2);
      Comparator<Float> comparator0 = (Comparator<Float>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      Boolean boolean0 = new Boolean(false);
      LinkedList<Float> linkedList6 = new LinkedList<Float>(linkedList1);
      LinkedList<Float> linkedList7 = new LinkedList<Float>(linkedList1);
      try { 
        Long.decode("t,ue");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"t,ue\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.039871718747301
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Expected a ',' or '}'";
      Float.min(1.0F, 1.0F);
      Float float0 = new Float(1.0F);
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer(2965);
      Integer.compareUnsigned(1286, 1286);
      Boolean boolean0 = new Boolean("Expected a ',' or '}'");
      Integer integer3 = new Integer(0);
      StringWriter stringWriter0 = new StringWriter();
      Boolean.logicalAnd(true, true);
      Boolean.logicalAnd(true, true);
      Long long0 = new Long(0);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-143));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Float> linkedList2 = new LinkedList<Float>(linkedList1);
      linkedList2.removeLastOccurrence(linkedList1);
      Float float0 = new Float(0.0F);
      JSONObject.getNames((Object) linkedList2);
      linkedList1.removeLastOccurrence(linkedList0);
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      linkedList0.add(float0);
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      linkedList2.toArray();
      Float float1 = linkedList0.removeLast();
      LinkedList<Float> linkedList5 = new LinkedList<Float>();
      linkedList2.add(float1);
      Comparator<Float> comparator0 = (Comparator<Float>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList3.sort(comparator0);
      Boolean boolean0 = new Boolean(true);
      linkedList3.clone();
      LinkedList<Float> linkedList6 = new LinkedList<Float>(linkedList3);
      LinkedList<Float> linkedList7 = new LinkedList<Float>(linkedList6);
      String string0 = ")/2q2dg|xjq^7~.!8=";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.631539578568037
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Short short0 = new Short((short)39);
      Short.toUnsignedLong((short)39);
      Short.toUnsignedInt((short)56);
      Short.toUnsignedInt((short) (-390));
      Short.toUnsignedLong((short)56);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.toUnsignedLong((short)78);
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap1 = new HashMap<JSONArray, Long>();
      hashMap0.putAll(hashMap1);
      HashMap<JSONArray, Long> hashMap2 = new HashMap<JSONArray, Long>();
      HashMap<String, Double> hashMap3 = new HashMap<String, Double>();
      jSONObject0.put("Missing value", (int) (short) (-390));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.5831417482076728
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(false, false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.keys();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.0704571438630857
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Short short0 = new Short((short)123);
      BiFunction<Object, Object, JSONObject> biFunction0 = (BiFunction<Object, Object, JSONObject>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double((short)123);
      JSONObject.valueToString(double0);
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Double@0000000001");
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.valueToString((Object) null, (short)123, (short)123);
      StringWriter stringWriter1 = new StringWriter();
      assertEquals("", stringWriter1.toString());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.7412699576190973
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float.max(610.3F, 610.3F);
      Float.min(610.3F, 0.0F);
      Float float0 = new Float(0.0F);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)2);
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      Boolean boolean0 = new Boolean("true");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      JSONTokener jSONTokener0 = new JSONTokener("true");
      jSONObject0.optJSONObject(",");
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      linkedList2.clone();
      // Undeclared exception!
      try { 
        linkedList2.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.6952764766845418
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.opt("istoUnsignedString");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      HashMap<JSONArray, Long> hashMap1 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap2 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap3 = new HashMap<JSONArray, Long>();
      hashMap3.putAll(hashMap1);
      HashMap<JSONArray, Long> hashMap4 = new HashMap<JSONArray, Long>(hashMap3);
      HashMap<String, Double> hashMap5 = new HashMap<String, Double>();
      assertEquals(0, hashMap5.size());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.8645439912733885
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(2187);
      JSONObject jSONObject0 = new JSONObject(integer0);
      Double.sum(2187, (-631.471678));
      Double.isFinite(0.0);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<JSONArray, Long> hashMap1 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap2 = new HashMap<JSONArray, Long>();
      hashMap1.putAll(hashMap2);
      HashMap<JSONArray, Long> hashMap3 = new HashMap<JSONArray, Long>(hashMap2);
      HashMap<String, Double> hashMap4 = new HashMap<String, Double>();
      try { 
        jSONObject0.getString(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.213461945386232
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(2187);
      Double.sum(0.0F, 0.0F);
      Double.isFinite(0.0);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      hashMap0.keySet();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      HashMap<JSONArray, Integer> hashMap2 = new HashMap<JSONArray, Integer>();
      Integer integer1 = new Integer(2187);
      Integer integer2 = new Integer(2187);
      Integer.compareUnsigned((-1499), 685);
      Integer.toUnsignedLong(2187);
      Integer.getInteger("zPlY?rePNHK", integer2);
      Integer integer3 = new Integer(2187);
      hashMap2.values();
      HashMap<JSONArray, Integer> hashMap3 = new HashMap<JSONArray, Integer>();
      Set<JSONArray> set0 = hashMap3.keySet();
      JSONArray jSONArray0 = new JSONArray((Collection) set0);
      Double double0 = new Double((-1.0));
      hashMap0.clone();
      Double.sum(0.0, (-1138.29785270416));
      Long long0 = new Long(1);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.optBoolean("7*K[;;,fw/8L9@3&B");
      Double.isFinite(0.0);
      jSONObject0.optString("7*K[;;,fw/8L9@3&B");
      try { 
        jSONObject0.get("+cm%9/>)=Ih#~eY.IM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+cm%9/>)=Ih#~eY.IM\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.7322201838634412
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.optString(")UyM|6!=uzoE4J", ")UyM|6!=uzoE4J");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.583141748207673
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(2187);
      Double.isFinite(0.0);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      hashMap0.keySet();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      HashMap<JSONArray, Integer> hashMap2 = new HashMap<JSONArray, Integer>();
      Integer integer1 = new Integer(2187);
      hashMap2.entrySet();
      String string0 = "\\u";
      Integer integer2 = new Integer(2187);
      Integer.compareUnsigned((-1499), 685);
      Integer.min(685, 1);
      Integer integer3 = new Integer(1);
      Integer.getInteger("", integer3);
      Integer integer4 = new Integer(1);
      Integer.getInteger(string0, integer2);
      Integer integer5 = new Integer(2187);
      hashMap2.values();
      HashMap<JSONArray, Integer> hashMap3 = new HashMap<JSONArray, Integer>();
      Set<JSONArray> set0 = hashMap3.keySet();
      JSONArray jSONArray0 = new JSONArray((Collection) set0);
      Double double0 = new Double((-1.0));
      hashMap0.clone();
      Double.sum(0.0, (-1137.558849303504));
      Long long0 = new Long(1);
      JSONObject jSONObject0 = new JSONObject(long0);
      Double.isFinite(0.0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("ApZ#'M=LAZ#yM", 1.0);
      Float float0 = new Float(0.0F);
      boolean boolean0 = Float.isFinite(0.0F);
      Float.min(0.0F, (-5163.074F));
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.248404413622087
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 0.0);
      jSONObject1.has("");
      jSONObject0.optDouble(",:]}/\"[{;=#", (-1215.628114287));
      try { 
        jSONObject1.getLong("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.9094499788253425
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      double double0 = jSONObject0.optDouble("!f!bZ U ");
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Substring bounds error";
      stringArray0[1] = "Substring bounds error";
      stringArray0[2] = "Substring bounds error";
      stringArray0[3] = "Substring bounds error";
      stringArray0[4] = "Substring bounds error";
      stringArray0[5] = "?F7:ok`&gUn&h]S";
      stringArray0[6] = "Substring bounds error";
      stringArray0[7] = "Substring bounds error";
      stringArray0[8] = "o2h1!";
      JSONObject jSONObject0 = new JSONObject("Substring bounds error", stringArray0);
      Object object0 = jSONObject0.remove("Substring bounds error");
      assertNull(object0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.2831984663755978
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = ",:]}/\\\"[{;=#";
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[5];
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      String string1 = "] is not a number.";
      JSONObject jSONObject1 = jSONObject0.append("] is not a number.", stringArray0[4]);
      Double.isFinite((-1396));
      String string2 = "null";
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      hashMap0.keySet();
      try { 
        jSONObject1.put(stringArray0[0], false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject.quote("&/MJO@\"v6`|'ce");
      Float float0 = new Float((-1623.2F));
      Boolean boolean0 = new Boolean("&/MJO@\"v6`|'ce");
      Integer integer0 = new Integer((-2205));
      Boolean boolean1 = new Boolean("\"&/MJO@\"v6`|'ce\"");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      // Undeclared exception!
      try { 
        linkedList0.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "b,~{d?k=xGL{;\"";
      stringArray0[1] = "iM2SP4]E";
      stringArray0[2] = "] is not a Boolean.";
      stringArray0[3] = " ^prh_a$Y z:,t*~=E";
      stringArray0[4] = "iM2SP4]E";
      stringArray0[6] = "aeEw!ao[@zC[G";
      stringArray0[7] = "c";
      jSONObject0.put("] is not a Boolean.", false);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optInt(";-", 748);
      Object object0 = new Object();
      Object object1 = new Object();
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>(748);
      HashMap<Short, Object> hashMap1 = new HashMap<Short, Object>();
      Short short0 = new Short((short)2617);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "N=ac\"(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "b,~{d?k=xGL{;\"";
      stringArray0[1] = "iM2SP4]E";
      stringArray0[2] = "] is not a Boolean.";
      stringArray0[3] = " ^prh_a$Y z:,t*~=E";
      stringArray0[4] = "wheel.json.JSONObject$1";
      stringArray0[5] = "aeEw!ao[@zC[G";
      stringArray0[6] = ";~\"K!";
      stringArray0[7] = "";
      int int0 = jSONObject0.optInt("s`9", (-304));
      assertEquals((-304), int0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Short short0 = new Short((short)39);
      Float.isFinite(1.0F);
      Float.min(0.0F, 1815.3331F);
      Float float0 = new Float(0.0F);
      Float.min(1815.3331F, (short)39);
      Float.min((-1.0F), (-1.0F));
      Float float1 = new Float(0.0F);
      Float.min((-766.448F), (-1.0F));
      JSONObject.quote("~Zp-]h0iv7jq=CoE*");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter((short)39);
      assertFalse(stringWriter2.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.111940764054574
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject((Object) "");
      int int0 = jSONObject0.optInt("N|<MAE{YUBx>");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(43);
      Integer integer0 = new Integer((-1954));
      assertFalse(integer0.equals((Object)int0));
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.038198852167527
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(2187);
      Double.sum(0.0F, 0.0F);
      Double.isFinite(2187);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      HashMap<JSONArray, Integer> hashMap2 = new HashMap<JSONArray, Integer>();
      Integer integer1 = new Integer(2187);
      Integer integer2 = new Integer(2187);
      Integer integer3 = new Integer(2187);
      Integer.remainderUnsigned(2187, 2187);
      Integer integer4 = new Integer((int) integer3);
      Integer.getInteger("zPlY?rePNHK", integer2);
      Integer integer5 = new Integer(2187);
      hashMap2.values();
      HashMap<JSONArray, Integer> hashMap3 = new HashMap<JSONArray, Integer>();
      Set<JSONArray> set0 = hashMap3.keySet();
      JSONArray jSONArray0 = new JSONArray((Collection) set0);
      Double double0 = new Double((-1.0));
      JSONObject.quote("RW=H8W8U,7k");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(4);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}@mD)u+5n7,I/9$EV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }@mD)u+5n7,I/9$EV
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Double double0 = new Double(348.06839170408585);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.237354554687262
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Float float0 = new Float(2009.7933F);
      Double double0 = new Double((-22.292068F));
      Float float1 = new Float(2009.7933F);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      hashMap0.entrySet();
      hashMap0.keySet();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      hashMap1.clone();
      hashMap0.clear();
      hashMap1.values();
      HashMap<JSONArray, Integer> hashMap2 = new HashMap<JSONArray, Integer>();
      Set<JSONArray> set0 = hashMap0.keySet();
      Boolean boolean0 = new Boolean(false);
      JSONArray jSONArray0 = new JSONArray((Collection) set0);
      jSONArray0.put((Map) hashMap2);
      Double double1 = new Double(0.0);
      Integer integer0 = new Integer(103);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.accumulate((String) null, hashMap2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.7952029674126406
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Expected a ',' or '}'";
      Float.max(1815.3331F, 1815.3331F);
      Float.min(1.0F, 1815.3331F);
      Float float0 = new Float(1.0F);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)95);
      linkedList0.offerFirst(short0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double double0 = new Double(1.0F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONTokener jSONTokener0 = new JSONTokener("Expected a ',' or '}'");
      jSONTokener0.back();
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap1 = new HashMap<JSONArray, Long>();
      hashMap0.putAll(hashMap1);
      hashMap0.putAll(hashMap1);
      HashMap<String, Double> hashMap2 = new HashMap<String, Double>();
      Float float1 = new Float((double) 1.0F);
      jSONObject0.append("vm8:;dE1>.8q@UnffIN", float1);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "4X]";
      stringArray0[2] = "u";
      stringArray0[3] = "U!e$f$Q+^";
      stringArray0[4] = "w13;J";
      stringArray0[5] = "isquote";
      stringArray0[6] = "9";
      stringArray0[7] = "g)cpz6c*]3";
      stringArray0[8] = "dou";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.9716518516064823
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Double double0 = new Double(0.0F);
      Double.isFinite(0.0);
      Boolean.logicalAnd(true, true);
      Boolean.compare(false, true);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-4282));
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer(9);
      Integer integer5 = new Integer(9);
      String[] stringArray0 = JSONObject.getNames((Object) integer2);
      Integer.compareUnsigned((-450), 60);
      Boolean boolean0 = new Boolean("1@nj1h++_CoX");
      Integer integer6 = new Integer((-693));
      StringWriter stringWriter0 = new StringWriter();
      Boolean.logicalAnd(true, true);
      Boolean.logicalAnd(true, true);
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-693));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.409279132828002
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 0.0);
      jSONObject0.put(",:]}/\"[{;=#", (Object) null);
      jSONObject1.has("");
      JSONObject jSONObject2 = new JSONObject(",:]}/\"[{;=#", stringArray0);
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.406394642439529
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(2187);
      JSONObject jSONObject0 = new JSONObject(integer0);
      Double.sum(2187, (-631.471678));
      Double.isFinite(0.0);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      hashMap0.keySet();
      JSONObject jSONObject1 = jSONObject0.put("is", (-0.6858851));
      jSONObject0.optLong("is", (long) 2187);
      Byte byte0 = new Byte((byte)38);
      String string0 = null;
      jSONObject0.putOpt("s7g", "s7g");
      jSONObject1.accumulate("s7g", (Object) null);
      jSONObject0.putOpt((String) null, ": ");
      JSONTokener jSONTokener0 = new JSONTokener("0/hH6`");
      try { 
        jSONTokener0.next('u');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'u' and instead saw '0' at character 1 of 0/hH6`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.524417004097017
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(2187);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Double.sum(401.726541, (-1693.564407));
      Double.isFinite(401.726541);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("T7A{3.WSs1#4", 1002.869937);
      jSONObject1.optLong(": ", 1847L);
      Byte byte0 = new Byte((byte) (-59));
      Integer integer1 = new Integer(58);
      jSONObject2.putOpt(": ", integer1);
      JSONObject jSONObject3 = jSONObject2.accumulate("BlKyQsnx", (Object) null);
      jSONObject3.putOpt("`@<f=HeGJ>/{", integer1);
      JSONTokener jSONTokener0 = new JSONTokener("`@<f=HeGJ>/{");
      try { 
        jSONTokener0.next('c');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'c' and instead saw '`' at character 1 of `@<f=HeGJ>/{
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Float float0 = new Float(1373.46);
      Float.min(0.0F, 0.0F);
      Float.min(0.0F, 0.0F);
      String string0 = JSONObject.valueToString(float0, (-1722), 1024);
      assertNotNull(string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      Boolean.logicalXor(true, false);
      Boolean.logicalXor(false, false);
      Boolean.logicalOr(true, false);
      String string0 = JSONObject.valueToString(boolean0, 60, 60);
      assertNotNull(string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.475644998784904
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Short short0 = new Short((short)44);
      Short.compare((short)13086, (short)44);
      Short.toUnsignedLong((short)61);
      Short.toUnsignedLong((short)44);
      Short.toUnsignedInt((short)44);
      Short.toUnsignedInt((short)9);
      Short.toUnsignedInt((short)61);
      Short.toUnsignedLong((short)8448);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.toUnsignedLong((short)44);
      Short.compare((short)160, (short)8448);
      Short.toUnsignedInt((short)8448);
      Short.compare((short)8192, (short) (-1031));
      Short.compare((short)101, (short)101);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      jSONObject0.toString(26, 0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.5829605038398125
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Short short0 = new Short((short)128);
      Short.toUnsignedLong((short)95);
      Short.toUnsignedInt((short)312);
      Short.toUnsignedInt((short) (-209));
      Short.toUnsignedLong((short)81);
      Double double0 = new Double((short)128);
      JSONObject jSONObject0 = new JSONObject(double0);
      Short.toUnsignedLong((short) (-162));
      Short.toUnsignedInt((short)95);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      jSONObject0.toString(32);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.288634276150991
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Short short0 = new Short((short)39);
      Float.isFinite(1.0F);
      Short.compare((short)128, (short)57);
      Short.toUnsignedLong((short) (-110));
      Short.toUnsignedLong((short)39);
      Short.toUnsignedInt((short) (-110));
      Short.toUnsignedInt((short) (-1299));
      Short.toUnsignedLong((short)57);
      JSONObject jSONObject0 = new JSONObject((Object) ")");
      Short.toUnsignedLong((short) (-3108));
      Short.compare((short) (-3108), (short)723);
      Short.toUnsignedInt((short)9);
      Short.compare((short)57, (short)2694);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[2] = stringArray0[1];
      Float float0 = new Float(2009.7933F);
      Double double0 = new Double(0.0F);
      Double.isFinite(1.0);
      Double.min(0.0, (-1909.9204964672633));
      Float float1 = new Float((-3108.0F));
      Float.min(3492.5F, (-3108.0F));
      Float.min(0.0F, (-1.0F));
      Double.sum(2009.7933F, 1.0);
      Float float2 = new Float((-938.3069245739));
      Float.isFinite(0.0F);
      Float.min(0.0F, 0.0F);
      Float.min(1.0F, 1770.163F);
      Double.sum(1.0, 2832.03782690266);
      Double.sum((-938.3069245739), 0.0);
      Double.max((-4378.463244396), 1.0F);
      Float.sum(0.0F, (-1.0F));
      Float.sum((-1.0F), 1770.163F);
      Double.min((-1.0F), (-1.0F));
      Float.isFinite(6089.0527F);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      Float.isFinite(1.0F);
      Float.min(1.5121346F, 1815.3331F);
      Float.sum(1815.3331F, 1815.3331F);
      float float0 = new Float(1815.3331F);
      Float.min(1.0F, 1815.3331F);
      Float float1 = new Float((double) 1.5121346F);
      Float.isFinite(3592.8F);
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      Float.sum(3066.2334F, 1.5121346F);
      Float.min(1.0F, 0.0F);
      Float.min(0.0F, (-1458.3F));
      Float.min(1815.3331F, 2523.5498F);
      Float.isFinite((-897.3637F));
      Float.sum(1.0F, 1.5121346F);
      Float.sum((-577.0477F), 1.0F);
      Float.sum((-1.0F), 2364.0F);
      Float.min(1.0F, 1.0F);
      Float.isFinite(1379.21F);
      String string0 = JSONObject.quote("true");
      assertEquals("\"true\"", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.7875224758611812
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(2187);
      JSONObject jSONObject0 = new JSONObject(integer0);
      Double.sum(2187, (-631.471678));
      Double.isFinite(0.0);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      Set<JSONArray> set0 = hashMap0.keySet();
      jSONObject0.put("null", (Collection) set0);
      HashMap<JSONArray, Long> hashMap1 = new HashMap<JSONArray, Long>();
      HashMap<JSONArray, Long> hashMap2 = new HashMap<JSONArray, Long>();
      hashMap1.putAll(hashMap2);
      HashMap<JSONArray, Long> hashMap3 = new HashMap<JSONArray, Long>(hashMap1);
      HashMap<String, Double> hashMap4 = new HashMap<String, Double>();
      jSONObject0.put("n)b5%", 291.3424);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.9556913461207355
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Float.min(610.3F, 0.0F);
      Float float0 = new Float(0.0F);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)2);
      Boolean boolean0 = new Boolean("true");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      Float float1 = new Float(1.0);
      linkedList1.add(float1);
      linkedList1.pop();
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      try { 
        jSONObject0.getDouble("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      Float.isFinite(1.0F);
      Float.min(1.5121346F, 1815.3331F);
      Float.sum(1815.3331F, 1815.3331F);
      Float.min((-0.43115306F), 1.0F);
      Float.min(1.0F, 1815.3331F);
      Float float0 = new Float((double) 1.5121346F);
      Float.isFinite(3592.8F);
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      Float.sum(3077.4111F, 1.5121346F);
      Float.min(1.0F, 0.0F);
      Float.min(0.0F, (-1458.3F));
      Float.min((-0.43115306F), 2523.5498F);
      Float.isFinite((-897.3637F));
      Float.sum(1.0F, 1.5121346F);
      Float.sum((-577.0477F), 1.0F);
      Float.sum((-1.0F), 2364.0F);
      Float.min(1.0F, 1.0F);
      Float.isFinite(1379.21F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      Float.isFinite(1.0F);
      Float.min(1.5121346F, 1815.3331F);
      Float.sum(1815.3331F, 1815.3331F);
      Float.min(0.0F, 1.0F);
      Float.min(1.0F, 1815.3331F);
      Float float0 = new Float(0.0);
      Float.isFinite(0.0F);
      Float.min(1.0F, 0.0F);
      Float.min(0.0F, (-1458.3F));
      Float.min(0.0F, 2523.5498F);
      Float.sum(1.0F, 1.5121346F);
      Float.sum((-577.0477F), 1.0F);
      Float.min(1.0F, 1.0F);
      Float.isFinite(1379.21F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.9556913461207355
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Expected a ',' or '}'";
      Float.isFinite(1.0F);
      Float.max(1815.3331F, 1815.3331F);
      Float.min(1.0F, 1815.3331F);
      Float float0 = new Float((-1.0F));
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double double0 = new Double(1.0F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.getLong("]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.9556913461207355
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Float.min(610.3F, 0.0F);
      Float float0 = new Float(0.0F);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)2);
      Boolean boolean0 = new Boolean("true");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      Float float1 = new Float(1.0);
      linkedList1.add(float1);
      linkedList1.pop();
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      try { 
        jSONObject0.getDouble(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.7453252132588983
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Double double0 = new Double(340.046422);
      JSONObject jSONObject0 = new JSONObject(double0);
      Float.min(0.0F, 0.0F);
      Float.max(0.0F, 2269.4768F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      Float float0 = new Float(1464.9744F);
      Float float1 = new Float((double) 0.0F);
      linkedList0.add(float1);
      Float.isFinite(1107.7F);
      Float float2 = new Float(0.0F);
      Float.max(0.0F, 0.0F);
      linkedList0.offer(float0);
      linkedList0.addLast(float2);
      linkedList1.add((Float) null);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      linkedList2.addFirst(float1);
      JSONObject.doubleToString(2269.4768F);
      Float float3 = new Float((-33.835));
      linkedList1.add(float1);
      LinkedList<Float> linkedList3 = new LinkedList<Float>(linkedList1);
      try { 
        Long.decode("false");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"false\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.85441987781001
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Short short0 = new Short((short)44);
      Short.toUnsignedLong((short)44);
      Short.toUnsignedInt((short)9);
      Short.toUnsignedInt((short)56);
      Float float0 = new Float((float) 44L);
      Float.min((-1.0F), 636.72F);
      JSONObject.quote("getdoubleToRawLongBits");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter((short)9);
      JSONTokener jSONTokener0 = new JSONTokener("\"getdoubleToRawLongBits\"");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"getdoubleToRawLongBits\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      Comparator<Float> comparator0 = (Comparator<Float>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      short short0 = (short)628;
      Short short1 = new Short((short)628);
      linkedList0.removeFirstOccurrence(short1);
      Float float0 = new Float((-1623.2F));
      Float.min(1.0F, 397.34677F);
      linkedList1.add(float0);
      Float float1 = new Float((-1623.2F));
      Float float2 = new Float((-1623.2F));
      linkedList0.add(float2);
      linkedList1.removeLast();
      Float float3 = new Float((-1623.2F));
      linkedList0.add(float3);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      linkedList0.toArray();
      linkedList0.add(float2);
      linkedList0.removeLast();
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      Float float4 = new Float(Double.NaN);
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      Float float5 = new Float((-1623.2F));
      linkedList0.add(float5);
      linkedList4.add(float0);
      Float float6 = new Float((double) (-1623.2F));
      Float float7 = new Float(Double.NaN);
      UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
      linkedList3.replaceAll(unaryOperator0);
      linkedList0.add(float7);
      LinkedList<Float> linkedList5 = new LinkedList<Float>(linkedList3);
      Byte byte0 = new Byte((byte)22);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(byte0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
