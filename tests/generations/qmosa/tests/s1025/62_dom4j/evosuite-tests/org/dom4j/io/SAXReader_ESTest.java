/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 13:57:24 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.420295386033961
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      String string0 = "//tmp/,].@MFsSZ44wzJV0";
      sAXReader0.setEncoding("//tmp/,].@MFsSZ44wzJV0");
      int int0 = 58;
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8836404106149494
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.resetHandlers();
      sAXReader0.isIncludeExternalDTDDeclarations();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.error((SAXParseException) null);
      sAXReader0.setEntityResolver(defaultHandler0);
      sAXReader0.getEntityResolver();
      sAXReader0.createDefaultEntityResolver("local-name");
      String string0 = null;
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      AttributesImpl attributesImpl1 = new AttributesImpl();
      attributesImpl1.getLength();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      attributes2Impl0.getValue("_R#pan", "");
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      AttributesImpl attributesImpl2 = new AttributesImpl();
      attributesImpl2.getLength();
      AttributesImpl attributesImpl3 = new AttributesImpl();
      AttributesImpl attributesImpl4 = new AttributesImpl();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl();
      AttributesImpl attributesImpl5 = new AttributesImpl(attributes2Impl2);
      attributesImpl2.getQName((-2759));
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributesImpl3);
      xMLFilterImpl1.startElement(";mHXxJIdw$ta<Za#6F", "0", "_R#pan", attributesImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty("[XPathPattern: text: ", ",].@MFsSZ44JV");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3497427651978415
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      StringReader stringReader0 = new StringReader("//home/ubuntu/termite/projects/62_dom4j/lNb[)8/58&C:+VF%lHbY3M9?)GIDs4$ws-+Wug");
      try { 
        sAXReader0.read((Reader) stringReader0, "//home/ubuntu/termite/projects/62_dom4j/Document/Document/tmp/A%z>u{3Lif@%IPb[I0http:/xml.org/sax/features/use-locator20Document");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document //home/ubuntu/termite/projects/62_dom4j/Document/Document/tmp/A%z>u{3Lif@%IPb[I0http:/xml.org/sax/features/use-locator20Document : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setDTDHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      xMLFilterImpl0.endElement((String) null, "http://xml.org/sax/features/string-interning", "http://xml.org/sax/properties/declaration-handler");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getDocumentFactory();
      StringReader stringReader0 = new StringReader("%iuYh2");
      DefaultDocument defaultDocument0 = new DefaultDocument();
      sAXReader0.getXMLFilter();
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.366660627207849
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getDTDHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("%iuYh2");
      try { 
        sAXReader0.read((Reader) stringReader0, "org.dom4j.io.SAXReader");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/org.dom4j.io.SAXReader : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.4384521309148504
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Kak");
      sAXReader_SAXEntityResolver0.resolveEntity("wjXh:/", "");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 56);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      bufferedInputStream1.close();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      pipedInputStream0.markSupported();
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(pipedInputStream0);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.reset();
      pipedInputStream0.markSupported();
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(pipedInputStream0);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.reset();
      pipedInputStream0.markSupported();
      BufferedInputStream bufferedInputStream4 = new BufferedInputStream(sequenceInputStream0);
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      try { 
        sAXReader0.read("wjXh:/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unknown protocol: wjxh Nested exception: unknown protocol: wjxh
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("");
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"\". Nested exception: Invalid encoding name \"\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4383740327894543
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setEncoding("//home/ubuntu/termite/projects/62_dom4j/0uPMtf<~#wB$/home/ubuntu/termite/projects/62_dom4j/file:/!];C6*&Lhj:;6(k/joop?y0P$pi@1/home/ubuntu/termite/projects/62_dom4j/file:/!];C6*&Lhj:;6(k/joop?y0P$pi@");
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '5';
      charArray0[2] = 'b';
      defaultHandler0.characters(charArray0, 706, 706);
      defaultHandler0.resolveEntity("file://", "");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("file://");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.tree.AbstractAttribute", "");
      String string0 = "http://xml.org/sax/properties/lexical-handler";
      StringReader stringReader0 = new StringReader("http://xml.org/sax/properties/lexical-handler");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.349742765197841
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "lNb[)8N";
      MockFile mockFile0 = new MockFile("lNb[)8N");
      sAXReader0.setEncoding(" Pattern: ");
      mockFile0.delete();
      mockFile0.toURI();
      MockFile.createTempFile("lNb[)8N", "lNb[)8N");
      mockFile0.getCanonicalPath();
      String string1 = "M9?)GIDs4$ws-+Wug";
      mockFile0.getCanonicalPath();
      File file0 = MockFile.createTempFile("lNb[)8N", "M9?)GIDs4$ws-+Wug", (File) mockFile0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \" PATTERN: \". Nested exception: Invalid encoding name \" PATTERN: \".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      MockFile mockFile0 = new MockFile("//tmp/[?E>AM6nQ&KXTA0org.jaxen.dom4j.DocumentNavigator");
      mockFile0.delete();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "//home/ubuntu/termite/projects/62_dom4j/qsB:/vx6E1?4'hu(+!w>aPj'0N$-ida22h:\"1<!D(*f";
      MockFile.createTempFile("//home/ubuntu/termite/projects/62_dom4j/qsB:/vx6E1?4'hu(+!w>aPj'0N$-ida22h:\"1<!D(*f", "//tmp/[?E>AM6nQ&KXTA0org.jaxen.dom4j.DocumentNavigator", (File) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3219307546040406
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "GDdrk";
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEncoding("");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.5213864941505775
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.setEncoding("M3J//wB:zwvR2fhh");
      QName qName0 = QName.get("]4qzd", (Namespace) null, "E<n7  4");
      qName0.getDocumentFactory();
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      sAXReader0.setEncoding("M3J//wB:zwvR2fhh");
      int int0 = 74;
      String string0 = "";
      sAXReader0.setErrorHandler((ErrorHandler) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("TEXT_NODE", "M3J//wB:zwvR2fhh", 74, "", uRLStreamHandler0);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(":`L@e2 !M+,}+/tZ!0R");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("//home/ubuntu/termite/projects/62_dom4j/0uPMtf<~#wB$/home/ubuntu/termite/projects/62_dom4j/file:/!];C6*&Lhj:;6(k/joop?y0P$pi@1/home/ubuntu/termite/projects/62_dom4j/file:/!];C6*&Lhj:;6(k/joop?y0P$pi@", ":`L@e2 !M+,}+/tZ!0R");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 14);
      byteArrayInputStream0.reset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 706);
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0, "{diYv,>}9c)lAZ#");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document {diYv,>}9c)lAZ# : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setEncoding("Z(a&)4`|b/u");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '5';
      charArray0[2] = 'b';
      defaultHandler0.characters(charArray0, 706, 706);
      StringReader stringReader0 = new StringReader("}{5]A");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-76);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-76), (byte)107);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.reset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      byteArrayInputStream0.markSupported();
      pushbackInputStream0.close();
      byteArrayInputStream0.markSupported();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream((byte)107);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.reset();
      pipedInputStream1.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      pipedInputStream1.skip((byte) (-76));
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream1.markSupported();
      pipedInputStream2.markSupported();
      pipedInputStream2.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream1, 14);
      bufferedInputStream1.available();
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(pipedInputStream1, 22);
      bufferedInputStream1.markSupported();
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(bufferedInputStream0, (byte)107);
      SAXReader sAXReader0 = new SAXReader();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, bufferedInputStream1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(false);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/lexical-handler", "#h-04");
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/lexical-handler' cannot be casted to org.xml.sax.ext.LexicalHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setFeature("http://xml.org/sax/features/string-interning", true);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "http://xml.org/sax/features/string-interning");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.setFeature("http://xml.org/sax/features/string-interning", false);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // False state for feature 'http://xml.org/sax/features/string-interning' is not supported.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setEncoding("file://");
      defaultHandler0.resolveEntity("file://", "");
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.tree.AbstractAttribute", "");
      sAXReader0.getEncoding();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setValidation(false);
      try { 
        sAXReader0.setFeature("O0F[c9p>s", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'O0F[c9p>s' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity(".4|4>*t2Fq}nC1{P:", "(=>@");
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("&", (String) null);
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read("/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:/// : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setErrorHandler(defaultHandler0);
      MockFile mockFile0 = new MockFile("lNb[)8N", "lNb[)8N");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("xa|lZj;~zZ-BU/");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL("O0F[c9p>s", "O0F[c9p>s", 0, "O0F[c9p>s", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      attributes2Impl0.getValue(349);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      attributes2Impl0.setAttributes(attributes2Impl1);
      Attributes2Impl attributes2Impl2 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl2);
      attributes2Impl0.getLength();
      attributes2Impl2.getLength();
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      Attributes2Impl attributes2Impl3 = new Attributes2Impl();
      attributes2Impl0.getLength();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      AttributesImpl attributesImpl2 = new AttributesImpl();
      AttributesImpl attributesImpl3 = new AttributesImpl(attributesImpl2);
      attributesImpl3.getQName(0);
      Attributes2Impl attributes2Impl4 = new Attributes2Impl(attributesImpl1);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl3);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3326774197215174
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Kak");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("wjXh:/", "");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.markSupported();
      Integer integer0 = new Integer(56);
      pipedInputStream0.markSupported();
      pipedInputStream1.mark((-3560));
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream2.markSupported();
      pipedInputStream2.markSupported();
      pipedInputStream0.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1857);
      bufferedInputStream0.markSupported();
      SAXReader sAXReader0 = new SAXReader();
      InputSource inputSource1 = new InputSource((InputStream) null);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      attributesImpl1.getType("92");
      attributesImpl0.getValue(47);
      attributesImpl1.setAttributes(attributesImpl0);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl1);
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      attributesImpl2.getLength();
      attributesImpl0.getLength();
      xMLFilterImpl4.setParent(xMLFilterImpl0);
      attributesImpl2.getValue((String) null, "org.dom4j.io.PruningDispatchHandler");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      xMLFilterImpl2.startElement("org.dom4j.io.PruningDispatchHandler", "DN", "92", attributesImpl2);
      AttributesImpl attributesImpl3 = new AttributesImpl();
      AttributesImpl attributesImpl4 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.startElement(" of document ", "org.dom4j.io.PruningDispatchHandler", ":P", attributesImpl3);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl6);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.dom4j.io.PruningDispatchHandler");
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0, true);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.endDocument();
      PruningDispatchHandler pruningDispatchHandler1 = new PruningDispatchHandler();
      pruningDispatchHandler1.resetHandlers();
      pruningDispatchHandler0.addHandler((String) null, (ElementHandler) null);
      try { 
        sAXReader1.configureReader(xMLFilterImpl1, (DefaultHandler) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@e4580d1 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.457509523925203
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getAttributeQName("The argument to the name function must be a node-set", "The argument to the name function must be a node-set", "The argument to the name function must be a node-set");
      QName.get((String) null, (Namespace) null, "#s99_}jZK");
      qName0.getDocumentFactory();
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(documentFactory0);
      DocumentFactory documentFactory1 = DefaultDocumentFactory.getInstance();
      sAXReader0.setDocumentFactory(documentFactory1);
      sAXReader1.getDocumentFactory();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("DpZ1t?Mib.@AZi");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("%e{pNc");
      sAXReader_SAXEntityResolver1.resolveEntity("", "DpZ1t?Mib.@AZi");
      StringReader stringReader0 = new StringReader("%e{pNc");
      Reader reader0 = null;
      try { 
        sAXReader1.read((Reader) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte) (-51);
      byteArray0[4] = (byte)107;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-51), (byte)107);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.reset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      byteArrayInputStream0.markSupported();
      pushbackInputStream0.close();
      byteArrayInputStream0.markSupported();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream((byte)107);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.reset();
      pipedInputStream1.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      pipedInputStream1.skip((byte) (-51));
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream1.markSupported();
      pipedInputStream2.markSupported();
      pipedInputStream2.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream1, 14);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(pipedInputStream1, 22);
      bufferedInputStream1.markSupported();
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(bufferedInputStream0, (byte)107);
      SAXReader sAXReader0 = new SAXReader();
      bufferedInputStream3.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream1);
      dataInputStream0.mark(15);
      DOMDocument dOMDocument0 = new DOMDocument();
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertNotNull(documentFactory0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-76);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-76), (byte)107);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.reset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.markSupported();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream((byte)107);
      byteArrayInputStream0.reset();
      pipedInputStream1.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      pipedInputStream1.skip((byte) (-76));
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream1.markSupported();
      pipedInputStream2.markSupported();
      pipedInputStream2.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream1, 14);
      bufferedInputStream1.available();
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(pipedInputStream1, 22);
      bufferedInputStream1.markSupported();
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(bufferedInputStream0, (byte)107);
      SAXReader sAXReader0 = new SAXReader();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream1);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.5834215521229957
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter();
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("X&dK],", ",X);|bU~vLLe9'8Ur^Y");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setStripWhitespaceText(true);
      SAXReader sAXReader1 = new SAXReader();
      sAXReader1.setDocumentFactory(documentFactory0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("G2~A.`ib`qaIFS");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver2 = new SAXReader.SAXEntityResolver("}S:ty^T~>?e/[M\"BbE");
      sAXReader_SAXEntityResolver2.resolveEntity("S~gF'6aK^Yzk<?/", "");
      StringReader stringReader0 = new StringReader("&n");
      SAXReader sAXReader2 = new SAXReader(true);
      try { 
        sAXReader2.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Reference is not allowed in prolog. Nested exception: Reference is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setContentHandler((ContentHandler) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.getErrorHandler();
      sAXReader0.installXMLFilter(xMLReader0);
      try { 
        MockURL.URL("//tmp/,(sSP@sVf{yt*0/home/ubuntu/termite/projects/62_dom4j/O0F[c9p>s/O0F[c9p>s0O0F[c9p>s", "//tmp/,(sSP@sVf{yt*0/home/ubuntu/termite/projects/62_dom4j/O0F[c9p>s/O0F[c9p>s0O0F[c9p>s", "//tmp/,(sSP@sVf{yt*0/home/ubuntu/termite/projects/62_dom4j/O0F[c9p>s/O0F[c9p>s0O0F[c9p>s");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: //tmp/,(ssp@svf{yt*0/home/ubuntu/termite/projects/62_dom4j/o0f[c9p>s/o0f[c9p>s0o0f[c9p>s
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3219307546040406
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      attributesImpl1.getType("92");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl1);
      AttributesImpl attributesImpl2 = new AttributesImpl();
      attributesImpl2.getLength();
      attributesImpl0.getLength();
      xMLFilterImpl5.setParent(xMLFilterImpl4);
      attributesImpl2.getValue((String) null, "org.dom4j.io.PruningDispatchHandler");
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      attributes2Impl0.getLength();
      xMLFilterImpl2.startElement("org.dom4j.io.PruningDispatchHandler", "DN", "92", attributesImpl2);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl0);
      attributesImpl2.clear();
      AttributesImpl attributesImpl3 = new AttributesImpl();
      AttributesImpl attributesImpl4 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl7.startElement("92", "org.jaxen.saxpath.base.Token", (String) null, attributes2Impl0);
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl();
      PipedInputStream pipedInputStream0 = new PipedInputStream(45);
      pipedInputStream0.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1921);
      bufferedInputStream0.markSupported();
      SAXReader sAXReader0 = new SAXReader();
      InputSource inputSource0 = new InputSource(pipedInputStream0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl2, true);
      try { 
        sAXReader1.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@4279ef50 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@4279ef50 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter((XMLFilter) null);
      sAXReader0.setIgnoreComments(true);
      sAXReader0.isIgnoreComments();
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.471853918106659
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-76), (byte)107);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.reset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      byteArrayInputStream0.markSupported();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      byteArrayInputStream0.markSupported();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream((byte)107);
      byteArrayInputStream0.reset();
      pipedInputStream1.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      pipedInputStream1.skip((byte) (-76));
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream2.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream1, 14);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.removeHandler("//home/ubuntu/termite/projects/62_dom4j/lNb[)8N/lNb[)8N/58&C:+VF%lHbY058&C:+VF%lHbY");
      try { 
        sAXReader0.read((InputStream) pipedInputStream2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AttributesImpl attributesImpl0 = new AttributesImpl();
      attributesImpl0.getType("");
      attributesImpl0.getValue(2);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      attributesImpl0.setAttributes(attributesImpl1);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      AttributesImpl attributesImpl3 = new AttributesImpl(attributesImpl1);
      AttributesImpl attributesImpl4 = new AttributesImpl();
      attributesImpl1.getLength();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributesImpl3);
      attributes2Impl2.getLength();
      attributesImpl2.clear();
      attributes2Impl0.getValue("N9w_DXf% !33", "TP5#YR,Sz)t-L}]!");
      Attributes2Impl attributes2Impl3 = new Attributes2Impl();
      attributesImpl0.getLength();
      AttributesImpl attributesImpl5 = new AttributesImpl();
      AttributesImpl attributesImpl6 = new AttributesImpl();
      AttributesImpl attributesImpl7 = new AttributesImpl(attributesImpl2);
      Attributes2Impl attributes2Impl4 = new Attributes2Impl();
      attributes2Impl1.getLength();
      Attributes2Impl attributes2Impl5 = new Attributes2Impl();
      AttributesImpl attributesImpl8 = new AttributesImpl(attributesImpl3);
      attributes2Impl2.getType("//tmp/FNoThzw-?fJ:f,0/tmp/tmp/home/ubuntu/termite/projects/62_dom4j/lNb[)8N/58&C:+VF%lHbY3M9?)GIDs4$ws-+Wug0=:9yHd3!}wvQ!0'tnQD?");
      xMLFilterImpl0.startElement((String) null, (String) null, "//tmp/FNoThzw-?fJ:f,0/tmp/tmp/home/ubuntu/termite/projects/62_dom4j/lNb[)8N/58&C:+VF%lHbY3M9?)GIDs4$ws-+Wug0=:9yHd3!}wvQ!0'tnQD?", attributesImpl1);
      SAXReader sAXReader0 = new SAXReader((String) null);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.2631550402832814
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AttributesImpl attributesImpl0 = new AttributesImpl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      attributesImpl2.getLength();
      attributesImpl0.getLength();
      attributesImpl2.getLength();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      attributesImpl1.getValue("92", "92");
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      attributesImpl2.getLength();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl1);
      AttributesImpl attributesImpl3 = new AttributesImpl();
      AttributesImpl attributesImpl4 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl3);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl7);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Object object0 = new Object();
      Object object1 = new Object();
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      StringReader stringReader0 = new StringReader(">|v;5a1Xl:/ffvCU[w");
      StringReader stringReader1 = new StringReader(">|v;5a1Xl:/ffvCU[w");
      stringReader1.mark(92);
      MockURL.getFtpExample();
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AttributesImpl attributesImpl0 = new AttributesImpl();
      attributesImpl0.getType("");
      attributesImpl0.getValue(2);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      attributesImpl0.setAttributes(attributesImpl1);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      AttributesImpl attributesImpl3 = new AttributesImpl(attributesImpl1);
      attributesImpl3.getLength();
      attributesImpl1.getLength();
      attributesImpl3.getValue("n&),lF3%ny_VkQ", "n&),lF3%ny_VkQ");
      Attributes2Impl attributes2Impl2 = new Attributes2Impl();
      attributesImpl1.getLength();
      AttributesImpl attributesImpl4 = new AttributesImpl();
      AttributesImpl attributesImpl5 = new AttributesImpl();
      AttributesImpl attributesImpl6 = new AttributesImpl(attributesImpl0);
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributesImpl6);
      Attributes2Impl attributes2Impl4 = new Attributes2Impl(attributesImpl4);
      AttributesImpl attributesImpl7 = new AttributesImpl(attributes2Impl0);
      xMLFilterImpl0.startElement("'hVaGK#:a'dZ", "", " : ", attributesImpl7);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader();
      MockFile mockFile0 = new MockFile(" : ");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(true);
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-1);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      DefaultDocumentFactory.getInstance();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      boolean boolean0 = sAXReader0.isValidating();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 16, (byte) (-1));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)47);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      DefaultDocumentFactory.getInstance();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      sAXReader0.isValidating();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.225155042985273
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AttributesImpl attributesImpl0 = new AttributesImpl();
      attributesImpl0.getType("");
      attributesImpl0.getValue(2);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      attributesImpl0.setAttributes(attributesImpl1);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      AttributesImpl attributesImpl3 = new AttributesImpl(attributesImpl1);
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributesImpl2);
      AttributesImpl attributesImpl4 = new AttributesImpl(attributesImpl2);
      attributesImpl4.getValue("http://xml.org/sax/features/string-interning", "N'6M\"rMW!do");
      Attributes2Impl attributes2Impl3 = new Attributes2Impl();
      attributes2Impl3.clear();
      attributesImpl4.getLength();
      AttributesImpl attributesImpl5 = new AttributesImpl();
      attributesImpl2.getLocalName(3257);
      attributesImpl0.getLength();
      AttributesImpl attributesImpl6 = new AttributesImpl();
      AttributesImpl attributesImpl7 = new AttributesImpl(attributesImpl1);
      attributesImpl0.getQName(0);
      attributes2Impl1.getQName(0);
      AttributesImpl attributesImpl8 = new AttributesImpl(attributesImpl4);
      Attributes2Impl attributes2Impl4 = new Attributes2Impl(attributesImpl8);
      Attributes2Impl attributes2Impl5 = new Attributes2Impl(attributes2Impl2);
      xMLFilterImpl0.startElement((String) null, "org.jaxen.function.SumFunction", ";|/", attributes2Impl2);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      Object object0 = new Object();
      File file0 = MockFile.createTempFile("org.jaxen.pattern.UnionPattern", "http://xml.org/sax/features/string-interning");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockFile mockFile0 = new MockFile("lNb[)8N");
      mockFile0.delete();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile.createTempFile("58&C:+/F%blHb7", "58&C:+/F%blHb7", (File) mockFile0);
      MockFile mockFile1 = new MockFile("58&C:+/F%blHb7");
      mockFile1.delete();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.getExternalSubset("58&C:+/F%blHb7", "x*uH54sJ1j4,F~WM");
      defaultHandler2_0.resolveEntity("58&C:+/F%blHb7", "lNb[)8N");
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      mockFile0.createNewFile();
      mockFile0.setExecutable(true, false);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-76);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream((byte)107);
      pipedInputStream1.markSupported();
      pipedInputStream1.skip((byte) (-76));
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream1.markSupported();
      pipedInputStream2.markSupported();
      pipedInputStream2.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream1, 14);
      bufferedInputStream0.available();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream1, 22);
      bufferedInputStream0.markSupported();
      SAXReader sAXReader0 = new SAXReader();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream1);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      sAXReader1.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      sAXReader0.setStringInternEnabled(true);
      try { 
        sAXReader0.setXMLReaderClassName("0x|x@");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class 0x|x@ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertNotNull(xMLReader0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.243951948479806
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.removeHandler("org.dom4j.jaxb.JAXBReader$PruningElementHandler");
      sAXReader0.resetHandlers();
      DispatchHandler dispatchHandler1 = new DispatchHandler();
      sAXReader0.addHandler("", dispatchHandler0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      dispatchHandler0.addHandler("No function context installed", dispatchHandler1);
      sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("B62cx9`t");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("//home/ubuntu/termite/projects/62_dom4j/lNb[)8N/5SC:zF%lbY2M9?)GIDs4$ws-+Wug", "4L7J,8");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      attributesImpl1.getType("92");
      AttributesImpl attributesImpl2 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl1);
      AttributesImpl attributesImpl3 = new AttributesImpl(attributesImpl1);
      attributesImpl0.getLength();
      attributesImpl3.getValue((-1));
      xMLFilterImpl4.startElement("<G5scy&+V;24D", (String) null, "<G5scy&+V;24D", attributesImpl3);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " : ");
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl9 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl8);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.getExternalSubset("'fR8V3+", "92");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_1.resolveEntity("92", "<W\"zmJ_#d,aB&Yn");
      SAXReader sAXReader1 = new SAXReader((String) null, false);
      try { 
        sAXReader1.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.238281776565859
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-76);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-76), (byte)107);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.reset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      pushbackInputStream0.mark(11);
      byteArrayInputStream0.markSupported();
      pushbackInputStream0.close();
      byteArrayInputStream0.markSupported();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream((byte)107);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.reset();
      pipedInputStream1.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      pipedInputStream1.skip((byte) (-76));
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream2.mark(2602);
      pipedInputStream1.markSupported();
      pipedInputStream2.markSupported();
      pipedInputStream2.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream1, 14);
      bufferedInputStream1.markSupported();
      SAXReader sAXReader0 = new SAXReader();
      InputSource inputSource0 = new InputSource(bufferedInputStream1);
      StringReader stringReader0 = new StringReader("org.dom4j.QName");
      inputSource0.setCharacterStream(stringReader0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-76);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-76), (byte)102);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.reset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      byteArrayInputStream0.markSupported();
      pushbackInputStream0.close();
      byteArrayInputStream0.markSupported();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream((byte)102);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.reset();
      pipedInputStream1.markSupported();
      pipedInputStream1.skip((byte) (-76));
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream1.markSupported();
      pipedInputStream2.markSupported();
      pipedInputStream2.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream1, 14);
      bufferedInputStream0.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream1, 22);
      bufferedInputStream0.markSupported();
      SAXReader sAXReader0 = new SAXReader();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream1);
      dataInputStream0.mark(15);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AttributesImpl attributesImpl0 = new AttributesImpl();
      attributesImpl0.getType("");
      attributesImpl0.getValue(2);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      attributesImpl0.setAttributes(attributesImpl1);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      AttributesImpl attributesImpl3 = new AttributesImpl(attributesImpl1);
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributesImpl2);
      AttributesImpl attributesImpl4 = new AttributesImpl(attributesImpl2);
      attributesImpl4.getValue("http://xml.org/sax/features/string-interning", "N'6M\"rMW!do");
      attributesImpl0.getURI((-363));
      Attributes2Impl attributes2Impl3 = new Attributes2Impl();
      attributes2Impl3.clear();
      attributesImpl4.getLength();
      AttributesImpl attributesImpl5 = new AttributesImpl();
      attributesImpl2.getLocalName(3257);
      attributesImpl0.getLength();
      AttributesImpl attributesImpl6 = new AttributesImpl();
      AttributesImpl attributesImpl7 = new AttributesImpl(attributesImpl1);
      attributesImpl0.getQName(0);
      attributes2Impl1.getQName(0);
      AttributesImpl attributesImpl8 = new AttributesImpl(attributesImpl4);
      Attributes2Impl attributes2Impl4 = new Attributes2Impl(attributesImpl8);
      Attributes2Impl attributes2Impl5 = new Attributes2Impl(attributes2Impl2);
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.3497427651978415
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-76);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-76), (byte)107);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.reset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      byteArrayInputStream0.markSupported();
      pushbackInputStream0.close();
      byteArrayInputStream0.markSupported();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream((byte)107);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.reset();
      pipedInputStream1.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      pipedInputStream1.skip((byte) (-76));
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream1.markSupported();
      pipedInputStream2.markSupported();
      pipedInputStream2.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream1, 14);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(pipedInputStream1, 22);
      bufferedInputStream0.markSupported();
      SAXReader sAXReader0 = new SAXReader();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DOMDocument dOMDocument0 = new DOMDocument(dOMDocumentType0);
      dOMDocument0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      File file0 = MockFile.createTempFile("()wQ>iAk])\"iQ!", "'tnQD?");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Warning: missing ramespace prefix ignored: ");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setIgnoreComments(false);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setMergeAdjacentText(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "//home/ubuntu/termite/projects/62_dom4j/lNb[)8N/lNb[)8N/58&C:+VF%lHbY3M9?)GIDs4$ws-+Wug");
      char[] charArray0 = new char[0];
      defaultHandler0.characters(charArray0, 1168, (-1451));
      defaultHandler0.resolveEntity("g3':zdk", "//home/ubuntu/termite/projects/62_dom4j/lNb[)8N/lNb[)8N/58&C:+VF%lHbY058&C:+VF%lHbY");
      StringReader stringReader0 = new StringReader(" userData: ");
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("ceiling");
      sAXReader_SAXEntityResolver0.resolveEntity(">'h<W4Qa9b", "file://");
      URI uRI0 = MockURI.create("ceiling");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("Uln_<I`X\"jkSe`BCO.");
      try { 
        sAXReader0.read((Reader) stringReader0, "Uln_<I`X\"jkSe`BCO.");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document Uln_<I`X\"jkSe`BCO. : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.createDefaultEntityResolver("The argument to the local-name function must be a node-set");
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte) (-76);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-76);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-76), (byte)107);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.reset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      byteArrayInputStream0.markSupported();
      pushbackInputStream0.close();
      byteArrayInputStream0.markSupported();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream((byte)107);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.reset();
      pipedInputStream1.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      pipedInputStream1.skip((byte) (-76));
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      Integer integer0 = new Integer((byte)107);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream1.mark((byte) (-76));
      pipedInputStream1.markSupported();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream2.connect(pipedOutputStream0);
      pipedInputStream2.close();
      pipedInputStream1.markSupported();
      pipedInputStream0.close();
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(pushbackInputStream0, (byte)107);
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(pipedInputStream2);
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.setXMLReaderClassName("//tmp/Bwb,tK+g8@0/tmp/tmp/home/ubuntu/termite/projects/62_dom4j/lNb[)8N/58&C:+VF%lHbY3M9?)GIDs4$ws-+Wug0=:9yHd3!}wvQ!0'tnQD?");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //tmp/Bwb,tK+g8@0/tmp/tmp/home/ubuntu/termite/projects/62_dom4j/lNb[)8N/58&C:+VF%lHbY3M9?)GIDs4$ws-+Wug0=:9yHd3!}wvQ!0'tnQD? not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXReader0.setDefaultHandler(sAXModifyElementHandler0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      AttributesImpl attributesImpl0 = new AttributesImpl();
      attributesImpl0.getType("");
      attributesImpl0.getValue(2);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      attributesImpl0.setAttributes(attributesImpl1);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      AttributesImpl attributesImpl3 = new AttributesImpl(attributesImpl1);
      AttributesImpl attributesImpl4 = new AttributesImpl(attributes2Impl0);
      attributesImpl1.getLength();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributesImpl3);
      attributes2Impl2.getLength();
      attributes2Impl0.getValue("N9w_DXf% !33", "TP5#YR,Sz)t-L}]!");
      Attributes2Impl attributes2Impl3 = new Attributes2Impl();
      attributesImpl0.getLength();
      AttributesImpl attributesImpl5 = new AttributesImpl();
      AttributesImpl attributesImpl6 = new AttributesImpl();
      attributesImpl5.getLocalName(0);
      attributesImpl5.getLength();
      AttributesImpl attributesImpl7 = new AttributesImpl();
      AttributesImpl attributesImpl8 = new AttributesImpl(attributesImpl7);
      attributesImpl2.getQName(0);
      attributesImpl1.getQName(0);
      AttributesImpl attributesImpl9 = new AttributesImpl(attributesImpl0);
      Attributes2Impl attributes2Impl4 = new Attributes2Impl(attributes2Impl1);
      Attributes2Impl attributes2Impl5 = new Attributes2Impl(attributes2Impl4);
      SAXReader sAXReader0 = new SAXReader(false);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[7];
          byteArray0[0] = (byte)79;
          byteArray0[1] = (byte)33;
          byteArray0[2] = (byte) (-76);
          byteArray0[3] = (byte)82;
          byteArray0[4] = (byte)107;
          byteArray0[5] = (byte)92;
          byteArray0[6] = (byte)2;
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-76), (byte)107);
          byteArrayInputStream0.reset();
          PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
          PushbackInputStream pushbackInputStream1 = new PushbackInputStream(byteArrayInputStream0, (byte)2);
          DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
          PipedInputStream pipedInputStream0 = new PipedInputStream((byte)79);
          PipedInputStream pipedInputStream1 = new PipedInputStream(58);
          BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream1);
          PipedInputStream pipedInputStream2 = new PipedInputStream();
          BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0, (byte)79);
          SAXReader sAXReader0 = new SAXReader();
          URL uRL0 = MockURL.getHttpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor316.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor316.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      attributesImpl1.getType("92");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl1);
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      attributesImpl2.getLength();
      attributesImpl0.getLength();
      xMLFilterImpl5.setParent(xMLFilterImpl4);
      attributesImpl2.getValue((String) null, "92");
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      attributes2Impl0.getLength();
      xMLFilterImpl2.startElement("92", "DN", "92", attributesImpl2);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl0);
      attributesImpl2.clear();
      AttributesImpl attributesImpl3 = new AttributesImpl();
      AttributesImpl attributesImpl4 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl7.startElement("92", "org.jaxen.saxpath.base.Token", (String) null, attributes2Impl0);
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl9 = new XMLFilterImpl(xMLFilterImpl3);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^&Nr]f4vF");
      sAXReader0.createContentHandler(xMLFilterImpl7);
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream0.mark(3337);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream2.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Integer integer0 = new Integer(26);
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      pipedInputStream3.mark(92);
      pipedInputStream3.markSupported();
      pipedInputStream3.markSupported();
      pipedInputStream3.close();
      SAXReader sAXReader1 = new SAXReader();
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertTrue(sAXReader1.isStringInternEnabled());
      
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = "//home/ubuntu/termite/projects/62_dom4j/lNb[)8N/lNb[)8N0lNb[)8N";
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      defaultDocumentFactory0.createQName("org.jaxen.expr.iter.IterableNamespaceAxis");
      namespaceStack0.getDefaultNamespace();
      QName qName0 = QName.get("//home/ubuntu/termite/projects/62_dom4j/lNb[)8N/lNb[)8N0lNb[)8N", (Namespace) null);
      qName0.getDocumentFactory();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      qName0.equals(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      defaultDocumentFactory0.createPattern("org.dom4j.DefaultDocumentFactory.singleton.strategy");
      defaultDocumentFactory0.createNamespace("org.dom4j.DefaultDocumentFactory.singleton.strategy", "//home/ubuntu/termite/projects/62_dom4j/lNb[)8N/lNb[)8N0lNb[)8N");
      sAXReader0.isIgnoreComments();
      sAXReader0.getXMLFilter();
      sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      sAXReader0.createXMLReader();
      StringReader stringReader0 = new StringReader("//home/ubuntu/termite/projects/62_dom4j/lNb[)8N/lNb[)8N0lNb[)8N");
      char[] charArray0 = null;
      try { 
        MockURL.URL("//home/ubuntu/termite/projects/62_dom4j/lNb[)8N/lNb[)8N0lNb[)8N", "org.jaxen.expr.iter.IterableNamespaceAxis", "org.jaxen.expr.iter.IterableNamespaceAxis");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: //home/ubuntu/termite/projects/62_dom4j/lnb[)8n/lnb[)8n0lnb[)8n
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      documentFactory0.createXPathFilter("comment");
      DefaultElement defaultElement0 = new DefaultElement("//home/ubuntu/termite/projects/62_dom4j/x*uH54sJ1j4,F~WM/home/ubuntu/termite/projects/62_dom4j/qsB:/vx6E1?4'hu(+!w>aPj'0N$-ida22h:\"1<!D(*f0x*uH54sJ1j4,F~WM");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-117);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-117);
      byteArray0[3] = (byte) (-113);
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      StringReader stringReader0 = new StringReader("comment");
      try { 
        sAXReader0.read((Reader) stringReader0, "\"{_J");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document \"{_J : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.409575915782529
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLReader();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.420295386033961
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-76), (byte)107);
      byteArrayInputStream0.reset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      byteArrayInputStream0.markSupported();
      pushbackInputStream0.skip((-2910L));
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      byteArrayInputStream0.markSupported();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream((byte)107);
      byteArrayInputStream0.reset();
      pipedInputStream1.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      pipedInputStream1.skip((byte) (-76));
      PipedInputStream pipedInputStream2 = new PipedInputStream((byte)107);
      pipedInputStream2.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream1, 14);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      try { 
        sAXReader0.read((InputStream) pushbackInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // -76 Nested exception: -76
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      Integer integer0 = new Integer(32);
      sAXReader0.setDocumentFactory(documentFactory0);
      try { 
        sAXReader0.setProperty("LA", integer0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'LA' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      attributesImpl1.getType("92");
      AttributesImpl attributesImpl2 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl1);
      AttributesImpl attributesImpl3 = new AttributesImpl(attributesImpl1);
      attributesImpl0.getLength();
      xMLFilterImpl5.setParent(xMLFilterImpl4);
      attributesImpl3.getValue((String) null, "org.dom4j.io.PruningDispatchHandler");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.getLength();
      xMLFilterImpl2.startElement("q6^ysv;", "http://xml.org/sax/features/namespaces", "92", attributesImpl3);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl0);
      AttributesImpl attributesImpl4 = new AttributesImpl();
      AttributesImpl attributesImpl5 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl7.startElement("92", "org.jaxen.saxpath.base.Token", (String) null, attributesImpl2);
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      MockFile mockFile0 = new MockFile("org.jaxen.saxpath.base.Token", "org.jaxen.function.ext.UpperFunction");
      File file0 = MockFile.createTempFile("s++Ot @|", "org.dom4j.io.PruningDispatchHandler", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "org.jaxen.saxpath.base.Token");
      URL uRL0 = mockFile1.toURL();
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "//home/ubuntu/termite/projects/62_dom4j/Vl~n}W0C/ : /Vl~n}W0C0Vl~n}W0C");
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader(">KhUHImD'`<?%'ZSRs+");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class >KhUHImD'`<?%'ZSRs+ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader(" : ", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  :  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      attributesImpl1.getType("92");
      attributesImpl0.getValue(60);
      attributesImpl1.setAttributes(attributesImpl0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl0);
      attributesImpl2.getLength();
      attributesImpl1.getLength();
      xMLFilterImpl1.setParent(xMLFilterImpl3);
      attributesImpl2.getValue((String) null, (String) null);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      attributes2Impl1.getLength();
      xMLFilterImpl1.startElement("java.version", "92", "class", attributes2Impl1);
      AttributesImpl attributesImpl3 = new AttributesImpl();
      AttributesImpl attributesImpl4 = new AttributesImpl();
      attributesImpl4.getQName(60);
      xMLFilterImpl4.startElement("java.version", "DN", "java.version", attributesImpl4);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl1);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      Object object0 = new Object();
      sAXReader0.installXMLFilter(xMLFilterImpl3);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, true);
      sAXReader0.setEncoding("M3J//wB:zwvR2fhh");
      sAXReader0.setEncoding("");
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      attributesImpl0.getType("");
      attributesImpl0.getValue(349);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.setAttributes(attributesImpl0);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      AttributesImpl attributesImpl1 = new AttributesImpl(attributesImpl0);
      attributes2Impl1.getLength();
      xMLFilterImpl1.setParent(xMLFilterImpl0);
      attributes2Impl0.getValue("//tmp/home/ubuntu/termite/projects/62_dom4j/lNb[)8N/58&C:+VF%lHbY058&C:+VF%lHbY0.tmp", ";mHXxJIdw$ta<Za#6F");
      Attributes2Impl attributes2Impl2 = new Attributes2Impl();
      attributesImpl0.getLength();
      AttributesImpl attributesImpl2 = new AttributesImpl();
      AttributesImpl attributesImpl3 = new AttributesImpl();
      AttributesImpl attributesImpl4 = new AttributesImpl(attributesImpl2);
      attributesImpl1.getQName((-3704));
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributes2Impl0);
      xMLFilterImpl0.startElement("_R#pan", "_R#pan", "http://xml.org/sax/features/use-locator2", attributesImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl2);
      Object object0 = new Object();
      Object object1 = new Object();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0, false);
      try { 
        sAXReader1.setProperty("//tmp/,(sSP@sVf{yt*0/home/ubuntu/termite/projects/62_dom4j/O0F[c9p>s/O0F[c9p>s0O0F[c9p>s", (Object) null);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: //tmp/,(sSP@sVf{yt*0/home/ubuntu/termite/projects/62_dom4j/O0F[c9p>s/O0F[c9p>s0O0F[c9p>s
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      attributesImpl1.getType("92");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl1);
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      attributesImpl2.getLength();
      attributesImpl0.getLength();
      xMLFilterImpl5.setParent(xMLFilterImpl4);
      attributesImpl2.getValue((String) null, "org.dom4j.io.PruningDispatchHandler");
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      attributes2Impl0.getLength();
      xMLFilterImpl2.startElement("org.dom4j.io.PruningDispatchHandler", "DN", "92", attributesImpl2);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl0);
      attributesImpl2.clear();
      AttributesImpl attributesImpl3 = new AttributesImpl();
      AttributesImpl attributesImpl4 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl7.startElement("92", "DN", (String) null, attributes2Impl0);
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl9 = new XMLFilterImpl(xMLFilterImpl3);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.resolveEntity((String) null, "org.dom4j.io.PruningDispatchHandler");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl4);
      try { 
        sAXReader0.setFeature("//home/ubuntu/termite/projects/62_dom4j/lNb[)8N/58&C:+/F%blHb7058&C:+/F%blHb7", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: //home/ubuntu/termite/projects/62_dom4j/lNb[)8N/58&C:+/F%blHb7058&C:+/F%blHb7
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.3087432950398514
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-76);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-76), (byte)107);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.reset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      pushbackInputStream0.mark(11);
      byteArrayInputStream0.markSupported();
      pushbackInputStream0.close();
      byteArrayInputStream0.markSupported();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      byteArrayInputStream0.reset();
      pipedInputStream1.mark(3337);
      byteArrayInputStream0.reset();
      pipedInputStream1.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      Integer integer0 = new Integer((byte) (-76));
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream2.mark(2602);
      pipedInputStream1.markSupported();
      pipedInputStream2.markSupported();
      pipedInputStream2.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream1, 34);
      bufferedInputStream1.markSupported();
      SAXReader sAXReader0 = new SAXReader();
      InputSource inputSource0 = new InputSource(bufferedInputStream1);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      DispatchHandler dispatchHandler1 = sAXReader0.getDispatchHandler();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertNotNull(dispatchHandler1);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      AttributesImpl attributesImpl0 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      attributesImpl0.getType("");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      attributesImpl0.setAttributes(attributesImpl1);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.startDocument();
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      AttributesImpl attributesImpl3 = new AttributesImpl(attributesImpl1);
      attributesImpl3.getLength();
      attributesImpl1.getLength();
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      attributesImpl3.getValue("n&),lF3%ny_VkQ", "n&),lF3%ny_VkQ");
      Attributes2Impl attributes2Impl2 = new Attributes2Impl();
      attributesImpl1.getLength();
      AttributesImpl attributesImpl4 = new AttributesImpl();
      AttributesImpl attributesImpl5 = new AttributesImpl();
      AttributesImpl attributesImpl6 = new AttributesImpl(attributesImpl0);
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributesImpl6);
      attributes2Impl3.getQName(0);
      Attributes2Impl attributes2Impl4 = new Attributes2Impl(attributesImpl4);
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read("n&),lF3%ny_VkQ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: n&),lF3%ny_VkQ Nested exception: no protocol: n&),lF3%ny_VkQ
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
