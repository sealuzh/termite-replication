/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 15:10:56 GMT 2019
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.InputMethodListener;
import java.awt.event.ItemListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.beans.PropertyChangeListener;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.Delayed;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.function.UnaryOperator;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JToolTip;
import javax.swing.border.AbstractBorder;
import javax.swing.border.BevelBorder;
import javax.swing.border.Border;
import javax.swing.plaf.basic.BasicSplitPaneUI;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultTreeCellRenderer;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAlias;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.client.util.ApplicationFileWrappersImpl;
import net.sourceforge.squirrel_sql.client.util.ApplicationFiles;
import net.sourceforge.squirrel_sql.fw.id.IIdentifier;
import net.sourceforge.squirrel_sql.fw.id.IntegerIdentifier;
import net.sourceforge.squirrel_sql.fw.id.UidIdentifier;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.PrimaryKeyInfo;
import net.sourceforge.squirrel_sql.fw.sql.SQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriver;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverPropertyCollection;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.fw.util.FileWrapper;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperFactoryImpl;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1015830955806851
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PriorityBlockingQueue<Locale> priorityBlockingQueue0 = new PriorityBlockingQueue<Locale>();
      PriorityBlockingQueue<Locale> priorityBlockingQueue1 = new PriorityBlockingQueue<Locale>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-117);
      byteArray0[7] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, (String) null, "|Q[1rfCiG?uu!X", "Encountered unexpected exception while attempting to determine if schemas are used in table definitions", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "Rs)Js7OF7", "Rs)Js7OF7");
      DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((DatabaseMetaData) null).when(connection0).getMetaData();
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(2000);
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = locale0.stripExtensions();
      locale0.getDisplayCountry(locale1);
      locale1.getDisplayVariant(locale0);
      JComponent.setDefaultLocale(locale0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFocusListeners();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getPasteToTableInfo((ISQLConnection) null, "Rs)Js7OF7", "Jw9");
      SQLAlias sQLAlias0 = new SQLAlias(integerIdentifier0);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = sQLAlias0.getDriverPropertiesClone();
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLConnection sQLConnection0 = new SQLConnection(connection0, sQLDriverPropertyCollection0, sQLDriver0);
      // Undeclared exception!
      try { 
        DBUtil.tableHasPrimaryKey(sQLConnection0, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      JScrollPane jScrollPane0 = new JScrollPane();
      jScrollPane0.getWidth();
      gridBagLayout0.invalidateLayout(jScrollPane0);
      GridBagConstraints gridBagConstraints0 = gridBagLayout0.getConstraints(jScrollPane0);
      gridBagConstraints0.clone();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JComponent.setDefaultLocale(locale0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("gE?b0?k+Wz!E", "", " CHAR(10) )", "gE?b0?k+Wz!E", (-1), (String) null, 539, (-511), 1045, (-1), (String) null, "", (-228), 2, "n");
      String string0 = DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DBUtil.typesAreEquivalent(16, (-7));
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getSQuirrelJarFile();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl0.getPluginsDirectory();
      FileWrapper fileWrapper1 = applicationFileWrappersImpl0.getUpdateDirectory();
      assertNotSame(fileWrapper1, fileWrapper0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JToolTip jToolTip0 = new JToolTip();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingQueue<Locale> linkedBlockingQueue0 = new LinkedBlockingQueue<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedBlockingQueue0);
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.JAPANESE;
      locale1.getDisplayCountry(locale0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, (String) null, (String) null);
      DBUtil.validateColumnNames((ITableInfo) null, dBCopyPlugin0);
      // Undeclared exception!
      try { 
        DBUtil.convertTableToObjectList((List<ITableInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      BevelBorder bevelBorder0 = new BevelBorder(410);
      Color color0 = Color.red;
      BevelBorder bevelBorder1 = new BevelBorder(410);
      bevelBorder1.getHighlightInnerColor();
      bevelBorder1.isBorderOpaque();
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) defaultTreeCellRenderer0, (Border) bevelBorder1, 410, 410, 410, (-3020));
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 406;
      floatArray0[2] = (-841.772F);
      floatArray0[3] = (-586.0F);
      floatArray0[4] = (float) (-3024);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-3172.812358), (-3020), 7.0, 2389.3);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      rectangle0.setLocation((-2147483635), 1853);
      Point point0 = gridBagLayout0.location((-2147483635), (-2147483635));
      rectangle2D_Double0.setFrameFromCenter((Point2D) point0, (Point2D) point0);
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createUnion(rectangle0);
      rectangle2D0.add((Rectangle2D) rectangle0);
      Rectangle2D.union(rectangle0, rectangle2D0, rectangle0);
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer1.getVetoableChangeListeners();
      defaultTreeCellRenderer1.computeVisibleRect(rectangle0);
      defaultTreeCellRenderer0.getFocusListeners();
      DefaultTreeCellRenderer defaultTreeCellRenderer2 = new DefaultTreeCellRenderer();
      // Undeclared exception!
      try { 
        DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, (-560));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SCHEMA;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, inputMethodListener1);
      defaultTreeCellRenderer0.removeInputMethodListener((InputMethodListener) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, "CREATE OR REPLACE TRIGGER $triggerName$ \nBEFORE INSERT ON $tableName$ \nFOR EACH ROW \nDECLARE \n    nextid number(8) := 0; \nBEGIN \n    SELECT $sequenceName$.nextval into nextid from dual; \n    :new.$columnName$ := nextid; \nEND; ", "Can't evaluate the year.", "tcb-82b~)j*j:", (-4), ":Kj", 1971, 2002, (-755), 2640, "+YC;$*iEPZ3", "Encountered unexpected exception when attempting to call schemaInfo.getTables with catalog = ", (-4), 4, "l,W4/st;,YHOLUpcy");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBUtil.typesAreEquivalent((-7), (-7));
      DBUtil.typesAreEquivalent((-7), 16);
      SQLAlias sQLAlias0 = new SQLAlias();
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier((-7));
      IIdentifier iIdentifier0 = null;
      SQLAlias sQLAlias1 = new SQLAlias((IIdentifier) null);
      BasicSplitPaneUI basicSplitPaneUI0 = new BasicSplitPaneUI();
      basicSplitPaneUI0.getDivider();
      sQLAlias0.addPropertyChangeListener((PropertyChangeListener) null);
      try { 
        sQLAlias1.assignFrom(sQLAlias0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Alias name field cannot be empty
         //
         verifyException("net.sourceforge.squirrel_sql.client.gui.db.SQLAlias", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBUtil.typesAreEquivalent(16, (-1618));
      SQLAlias sQLAlias0 = new SQLAlias();
      sQLAlias0.setUseDriverProperties(false);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = sQLAlias0.getDriverPropertiesClone();
      assertEquals(0, sQLDriverPropertyCollection0.size());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.FUNCTION;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-2);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType(".", (Icon) imageIcon0);
      databaseObjectType0.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType("objectFilterExclude");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "V_P(mih1J/(q", "k\"fb)]BV\" 8q", "V_P(mih1J/(q", (byte) (-2), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (byte) (-2), 2640, (-222), (-1204), ".", (String) null, 23505, 23505, "k\"fb)]BV\" 8q");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.FUNCTION;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      PriorityBlockingQueue<Locale> priorityBlockingQueue0 = new PriorityBlockingQueue<Locale>();
      arrayList0.add((Locale.LanguageRange) null);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) priorityBlockingQueue0);
      Locale.lookup(arrayList0, list0);
      JComponent.setDefaultLocale((Locale) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      defaultCaret0.setFrameFromDiagonal((Point2D) point0, (Point2D) point0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",");
      AWTEventMulticaster.remove((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("|rL<}`Y=T3IL-+", (String) null, (String) null, "", 19, "|rL<}`Y=T3IL-+", (-686), 0, 0, 0, (String) null, "|rL<}`Y=T3IL-+", 44, 0, "ZBz8JOZ.N`");
      String string0 = DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      assertNull(string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster2, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster3, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster2, (InputMethodListener) aWTEventMulticaster5);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster6, (InputMethodListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster6, (InputMethodListener) aWTEventMulticaster1);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster3, (InputMethodListener) aWTEventMulticaster7);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster9, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster8);
      AWTEventMulticaster.add((ItemListener) aWTEventMulticaster10, (ItemListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseMotionListener) aWTEventMulticaster0, (MouseMotionListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.remove((MouseMotionListener) aWTEventMulticaster11, (MouseMotionListener) aWTEventMulticaster7);
      AWTEventMulticaster.remove((MouseMotionListener) aWTEventMulticaster4, (MouseMotionListener) aWTEventMulticaster12);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "QO&|z(nZz.52j#", "QO&|z(nZz.52j#");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin1, (ITableInfo) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "DefaultPlugin.error.cannotcreate", "\t`OG7,i");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster2, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster3, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster2, (InputMethodListener) aWTEventMulticaster5);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster6, (InputMethodListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster5, (InputMethodListener) aWTEventMulticaster8);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster6, (InputMethodListener) aWTEventMulticaster1);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster3, (InputMethodListener) aWTEventMulticaster7);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster10, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster8);
      AWTEventMulticaster.add((ItemListener) aWTEventMulticaster11, (ItemListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseMotionListener) aWTEventMulticaster0, (MouseMotionListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.remove((MouseMotionListener) aWTEventMulticaster12, (MouseMotionListener) aWTEventMulticaster9);
      AWTEventMulticaster.remove((MouseMotionListener) aWTEventMulticaster4, (MouseMotionListener) aWTEventMulticaster13);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "QO&|z(nZz.52j#", "QO&|z(nZz.52j#");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin1, (ITableInfo) null, "~DZft$P=Nu", "DefaultPlugin.error.cannotcreate", "\t`OG7,i");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, " to 128.", "Session.commit");
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      arrayList0.add((ITableInfo) null);
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "S9jRbL", "?l3`kxjy;|xGOvo");
      arrayList0.add((ITableInfo) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(" from ", "uqsomG", "Encountered unexpected exception when attempting to call SQLDatabaseMetaData.getTables with catalog = ", "isStandardType: unable to getcvalue for java.sql.Types.", 2004, "?l3`kxjy;|xGOvo", (-309), (-309), 2001, 2004, (String) null, "?l3`kxjy;|xGOvo", 2001, 2004, "Tf\t");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDF;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-3);
      DBUtil.typesAreEquivalent(16, (-3));
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString() , anyInt() , anyInt());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      // Undeclared exception!
      try { 
        connectionWrapper0.prepareCall((String) null, 2550, 1039);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      dBCopyPlugin0.getWebSite();
      dBCopyPlugin0.getSourceSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, "!|v@i=mhy", "!@2cAWBt-KMN+yQM>_", "http://www.squirrelsql.org", 2235, "kI%{hol", (-2872), 32765, (-935), (-5), "jLmDj%D3`Y\"cA", "!|v@i=mhy", (-733), (-1723), "?l3`kxjy;|xGOvo");
      int int0 = DBUtil.replaceDistinctDataType(32765, tableColumnInfo0, (ISession) null);
      assertEquals(32765, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnaryOperator.identity();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      MouseMotionListener mouseMotionListener0 = AWTEventMulticaster.add((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      MouseMotionListener mouseMotionListener1 = AWTEventMulticaster.add(mouseMotionListener0, mouseMotionListener0);
      MouseMotionListener mouseMotionListener2 = AWTEventMulticaster.add((MouseMotionListener) null, mouseMotionListener0);
      AWTEventMulticaster.add((MouseMotionListener) null, mouseMotionListener1);
      AWTEventMulticaster.add(mouseMotionListener2, (MouseMotionListener) defaultCaret0);
      AWTEventMulticaster.remove((MouseMotionListener) null, (MouseMotionListener) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "Skipping FK (", "2`R0Gd&cUlRy5Q.Ux");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy";
      stringArray0[1] = "\t";
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("?l3`kxjy;|xGOvo", "bB#l_R$dndT\"8X", "MG$2B|", "bB#l_R$dndT\"8X", 20, "}PV 3L+d60Ny)(K;{^", 0, 124, 20, 0, "MG$2B|", "", 1111, 1947, "lib");
      dBCopyPlugin0.getDestSession();
      int int0 = DBUtil.replaceDistinctDataType(0, tableColumnInfo0, (ISession) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      defaultTreeCellRenderer0.getFocusListeners();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "null", "LsqvjPtWze /");
      DBUtil.validateColumnNames((ITableInfo) null, dBCopyPlugin0);
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[4];
      iDatabaseObjectInfoArray0[0] = (IDatabaseObjectInfo) null;
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject((IDatabaseObjectInfo) null, schemaInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = (-24);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getInsertSQL(dBCopyPlugin0, "(Jd!*ca]LdBs*\"b", (ITableInfo) null, (-24));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.replaceOtherDataType((TableColumnInfo) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = null;
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, " )", (String) null);
      // Undeclared exception!
      try { 
        DBUtil.getColumnNames((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.FUNCTION;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      DefaultCaret defaultCaret1 = new DefaultCaret();
      MouseMotionListener mouseMotionListener0 = AWTEventMulticaster.remove((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret1);
      MouseMotionListener mouseMotionListener1 = AWTEventMulticaster.add(mouseMotionListener0, (MouseMotionListener) defaultCaret0);
      AWTEventMulticaster.add(mouseMotionListener1, mouseMotionListener1);
      AWTEventMulticaster.remove((MouseMotionListener) null, (MouseMotionListener) defaultCaret1);
      DefaultCaret defaultCaret2 = new DefaultCaret();
      MouseMotionListener mouseMotionListener2 = AWTEventMulticaster.remove((MouseMotionListener) defaultCaret1, (MouseMotionListener) defaultCaret2);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultCaret defaultCaret3 = new DefaultCaret();
      MouseMotionListener mouseMotionListener3 = AWTEventMulticaster.remove(mouseMotionListener0, mouseMotionListener2);
      MouseMotionListener mouseMotionListener4 = AWTEventMulticaster.add((MouseMotionListener) defaultCaret1, mouseMotionListener3);
      AWTEventMulticaster.add((MouseMotionListener) defaultCaret3, mouseMotionListener4);
      defaultTreeCellRenderer0.addMouseMotionListener(mouseMotionListener4);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "replaceDistinctDataType: Unexpected exception - ", "replaceDistinctDataType: Unexpected exception - ");
      dBCopyPlugin0.getWebSite();
      // Undeclared exception!
      try { 
        DBUtil.getColumnName((ISQLConnection) null, (ITableInfo) null, 1913);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MouseMotionListener mouseMotionListener0 = AWTEventMulticaster.add((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      MouseMotionListener mouseMotionListener1 = AWTEventMulticaster.remove(mouseMotionListener0, (MouseMotionListener) defaultCaret0);
      AWTEventMulticaster.remove(mouseMotionListener1, mouseMotionListener1);
      AWTEventMulticaster.remove(mouseMotionListener1, mouseMotionListener1);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("org.jfree.data.time.TimePeriodValue", "S.|4RYMV", "org.jfree.data.time.TimePeriodValue", "org.jfree.data.time.TimePeriodValue", 0, "", (-815), (-512), 0, 5, " )", "HlkIwyN@Of?U@iqGrWJ", 0, 0, "Encountered unexpected exception when attempting to call SQLDatabaseMetaData.getTables with catalog = ");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(2, 2);
      DBUtil.typesAreEquivalent(2, 2);
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(2);
      boolean boolean1 = DBUtil.typesAreEquivalent(2, 59);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getFwJarFile();
      applicationFileWrappersImpl0.getDatabaseDriversFile();
      applicationFileWrappersImpl0.getWelcomeFile();
      applicationFileWrappersImpl0.getUpdateDirectory();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getEditWhereColsFile();
      applicationFileWrappersImpl1.getLibraryDirectory();
      applicationFileWrappersImpl1.getDatabaseAliasesTreeStructureFile();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      dBCopyPlugin0.getSourceSession();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      dBCopyPlugin0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-1459), "", (-1459), 2640, (-1459), (-7), "1", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 2640, (-7), "#RVE'0");
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("#RVE'0", "1", "1", "DBUtil.error.missingtable", 2002, "1", (-2343), (-7), (-2343), 3, "DBUtil.error.missingtable", "c", (-1459), 2640, "c");
      DBUtil.typesAreEquivalent(3, (-1459));
      System.setCurrentTimeMillis((-2343));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "getCatSep: Unexected Exception - ", "getCatSep: Unexected Exception - ");
      // Undeclared exception!
      try { 
        DBUtil.getSelectQuery(dBCopyPlugin0, "getCatSep: Unexected Exception - ", (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster2, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster3);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster4, (InputMethodListener) aWTEventMulticaster6);
      AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster2, (InputMethodListener) aWTEventMulticaster4);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster5);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster7, (InputMethodListener) null);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseMotionListener) defaultCaret0, (MouseMotionListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((MouseMotionListener) aWTEventMulticaster8, (MouseMotionListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((MouseMotionListener) aWTEventMulticaster7, (MouseMotionListener) aWTEventMulticaster7);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("b/cf<x&RV#x0", "sYQn>K.z#+", "b/cf<x&RV#x0", "Skipping FK (", (-1783), "com.jidesoft.plaf.vsnet.VsnetMenuItemUI$MenuKeyHandler", 0, (-557), 0, (-4002), "Skipping FK (", "Skipping FK (", 410, (-835), ")) from ");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      int int0 = DBUtil.replaceDistinctDataType(70, tableColumnInfo0, (ISession) null);
      assertEquals(70, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      JScrollPane jScrollPane0 = new JScrollPane();
      jScrollPane0.getViewportBorderBounds();
      jScrollPane0.getWidth();
      gridBagLayout0.invalidateLayout(jScrollPane0);
      GridBagConstraints gridBagConstraints0 = gridBagLayout0.getConstraints(jScrollPane0);
      gridBagLayout0.setConstraints(jScrollPane0, gridBagConstraints0);
      gridBagLayout0.location((-1340), 1606);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("6", "6AurT)P", "6", " schema = ", (-1), " and table_schema = ? ", (-1), 769, 930, 128, " schema = ", "?t.Rxmix{68", 1, (-995), "[U/obVBo`E/bSYu");
      int int0 = DBUtil.replaceDistinctDataType((-839), tableColumnInfo0, (ISession) null);
      assertEquals((-839), int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SCHEMA;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("1CYb/u)Z0j", ".", "", "oLbeNzxyjH}(ynSF", 27, "k\"fb)]BV\" 8q", 32765, (-148), 27, 32765, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-1215), 2640, "oLbeNzxyjH}(ynSF");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBUtil.isBinaryType(tableColumnInfo0);
      LinkedList<IDatabaseObjectInfo> linkedList0 = new LinkedList<IDatabaseObjectInfo>();
      List<ITableInfo> list0 = DBUtil.convertObjectToTableList(linkedList0);
      DBUtil.convertTableToObjectList(list0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      IDatabaseObjectInfo iDatabaseObjectInfo0 = DBUtil.getSchemaFromDbObject(tableColumnInfo0, schemaInfo0);
      assertEquals("", iDatabaseObjectInfo0.getSimpleName());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Stack<Locale> stack0 = new Stack<Locale>();
      stack0.stream();
      UnaryOperator.identity();
      Locale locale0 = Locale.GERMAN;
      stack0.push(locale0);
      UnaryOperator.identity();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getDatabaseDriversFile();
      applicationFileWrappersImpl0.getUpdateDirectory();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("j>Z3wu&ICYpuh");
      dBCopyPlugin0.getSourceSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("j>Z3wu&ICYpuh", "S-", "j>Z3wu&ICYpuh", "^\u0005STh", (-762), "^\u0005STh", 2000, 2104, (-762), (-762), " as the source for preferences - will save ", "bqz- w-b.D", 1600, (-1817), "bqz- w-b.D");
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(tableColumnInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.setSourceSession((ISession) null);
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      dBCopyPlugin0.getSourceSession();
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) null);
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl0);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getDestSession();
      dBCopyPlugin1.getDestSession();
      int int0 = 2640;
      String string0 = "h9;6 Jh";
      int int1 = 193;
      String string1 = "7eqjo(F)zuGRr";
      int int2 = 4054;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (String) null, "'2000-1-1'", "6gZ(,{P<n", 2640, "h9;6 Jh", 2640, 2640, 193, 2640, "DMb,PkLa,,8a,J1([XY", "7eqjo(F)zuGRr", 4054, 193, "' AND TABLE_OWNER = '");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DBUtil.isBinaryType(tableColumnInfo0);
      // Undeclared exception!
      try { 
        DBUtil.tableHasForeignKey("O=IE", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "pX#|}$J6G]xhtJncA]S", (ForeignKeyInfo) null, (SessionInfoProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getEditWhereColsFile();
      applicationFileWrappersImpl0.getDatabaseAliasesFile();
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFileWrappersImpl0.setApplicationFiles(applicationFiles0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getUpdateDirectory();
      applicationFileWrappersImpl2.getUpdateDirectory();
      applicationFileWrappersImpl0.getUpdateDirectory();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl2);
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("j>Z3wu&IYpuh");
      dBCopyPlugin0.getSourceSession();
      String string0 = DBUtil.fixCase((ISession) null, "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      String string0 = DBUtil.fixCase((ISession) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "vF>}_#d/[>ag4{'9\"8s";
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate((ISQLConnection) null, "long varchar(1073741823)", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SCHEMA;
      DatabaseObjectType.createNewDatabaseObjectType("oLbeNzxyjH}(ynSF");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(".", "SX)GZ{cM _M$O", (String) null, "k\"fb)]BV\" 8q", (-38), "SX)GZ{cM _M$O", 334, (-148), 2640, (-38), "SX)GZ{cM _M$O", "k\"fb)]BV\" 8q", (-38), 152, "1CYb/u)Z0j");
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultOpenIcon();
      DatabaseObjectType.createNewDatabaseObjectType("n", icon0);
      DatabaseObjectType.createNewDatabaseObjectType("1CYb/u)]0j");
      DatabaseObjectType.createNewDatabaseObjectType("");
      Stack<IDatabaseObjectInfo> stack0 = new Stack<IDatabaseObjectInfo>();
      stack0.setSize(2005);
      List<ITableInfo> list0 = DBUtil.convertObjectToTableList(stack0);
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      List<IDatabaseObjectInfo> list1 = DBUtil.convertTableToObjectList(list0);
      assertEquals(2005, list1.size());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UWnQCXs");
      ArrayDeque<PrimaryKeyInfo> arrayDeque0 = new ArrayDeque<PrimaryKeyInfo>();
      arrayList0.containsAll(arrayDeque0);
      arrayList0.spliterator();
      DBUtil.convertTableToObjectList(arrayList0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((DatabaseMetaData) null).when(connection0).getMetaData();
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = sQLAlias0.getDriverPropertiesClone();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLConnection sQLConnection0 = new SQLConnection(connectionWrapper0, sQLDriverPropertyCollection0, sQLDriver0);
      ITableInfo iTableInfo0 = null;
      // Undeclared exception!
      try { 
        DBUtil.getPKColumnString(sQLConnection0, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // metaData
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.DatabaseMetaDataWrapper", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[3];
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("nNGB$Ijx~o[T_f<1O\"T", "nNGB$Ijx~o[T_f<1O\"T", "replaceDistinctDataType: Unexpected exception - ", "K", 4, "B]SqtA~sqzU(T", 4, 4, (-2767), 142, "~e~Km0]i)v\"s%@-XTl#", "+^FH.Wg0~P%z0lD.]&", 4, 142, "B]SqtA~sqzU(T");
      tableColumnInfoArray0[0] = tableColumnInfo0;
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("replaceDistinctDataType: Unexpected exception - ", " xhat m>tvhed ", "VIEW", "", 4, "~e~Km0]i)v\"s%@-XTl#", (-1982292595), 135, (-1982292595), 142, "nNGB$Ijx~o[T_f<1O\"T", "Q|NO;(5 gBltVdZ$0f", (-2767), 2869, "B]SqtA~sqzU(T");
      tableColumnInfoArray0[1] = tableColumnInfo1;
      TableColumnInfo tableColumnInfo2 = new TableColumnInfo(" null", " from ", " xhat m>tvhed ", "s4", 142, "VIEW", (-1982292595), 2004, (-707), (-1982292595), "VIEW", "K", 875, 1645, "|Q[1rfCJG?!X");
      tableColumnInfoArray0[2] = tableColumnInfo2;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("K, , s4", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.OTHER;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-2);
      byteArray0[0] = (byte) (-2);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      DatabaseObjectType.createNewDatabaseObjectType("EX #AP%pFQz\"Zz", (Icon) imageIcon0);
      databaseObjectType0.getIcon();
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.OTHER;
      DatabaseObjectType.createNewDatabaseObjectType(".");
      DatabaseObjectType.createNewDatabaseObjectType(".", (Icon) imageIcon0);
      DatabaseObjectType.createNewDatabaseObjectType("getContextClassLoader");
      DatabaseObjectType.createNewDatabaseObjectType("1CYb/u)]0j");
      DatabaseObjectType.createNewDatabaseObjectType("I\"fe`grwh");
      DatabaseObjectType.createNewDatabaseObjectType((String) null, (Icon) null);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.UDT_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType(".");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[1];
      DatabaseObjectType.createNewDatabaseObjectType((String) null, (Icon) imageIcon0);
      // Undeclared exception!
      try { 
        DBUtil.getColumnList(tableColumnInfoArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.createToolTip();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingQueue<Locale> linkedBlockingQueue0 = new LinkedBlockingQueue<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedBlockingQueue0);
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.JAPANESE;
      locale0.getDisplayScript();
      locale1.toLanguageTag();
      locale1.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, (Locale.FilteringMode) null);
      locale1.getDisplayCountry(locale0);
      JComponent.setDefaultLocale(locale0);
      DefaultTreeCellRenderer defaultTreeCellRenderer2 = new DefaultTreeCellRenderer();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("VU'P!fZ~\"{d5])", "{7(7f7M", "Skipping FK (", "6 #KsPDy", 1000000, "1O59)", (-2755), (-1459), (-3569), 4178, "{a'3S", "{7(7f7M", 2907, 1000000, "{a'3S");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getEditWhereColsFile();
      applicationFileWrappersImpl0.getSquirrelHomeDir();
      applicationFileWrappersImpl0.getFAQFile();
      applicationFileWrappersImpl0.getUpdateDirectory();
      applicationFileWrappersImpl0.getEditWhereColsFile();
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getUserSpecificWikiConfigurationsFile();
      applicationFiles0.getFwJarFile();
      applicationFiles0.getSQuirrelJarFile();
      applicationFileWrappersImpl0.setApplicationFiles(applicationFiles0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getSquirrelHomeDir();
      applicationFileWrappersImpl2.getLicenceFile();
      applicationFileWrappersImpl1.getUserPreferencesFile();
      applicationFileWrappersImpl2.getUpdateDirectory();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl1);
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl3.getUpdateDirectory();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl3);
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (String) null, "md5", 1111, "org.jfree.data.time.TimePeriodValue", 0, 0, 875, (-1459), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "{7(7f7M", (-464), 2907, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      System.setCurrentTimeMillis((-464));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl1);
      applicationFileWrappersImpl1.getDatabaseAliasesTreeStructureFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.createFolder(evoSuiteFile0);
      applicationFileWrappersImpl1.getJDBCDebugLogFile();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl1);
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      fileWrapperFactoryImpl0.create("");
      dBCopyPlugin0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.client.session.mainpanel.SQLHistory");
      DBUtil.validateColumnNames((ITableInfo) null, dBCopyPlugin0);
      // Undeclared exception!
      try { 
        DBUtil.getColumnCount((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SCHEMA;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("1CYb/u)Z0j", ".", "", "oLbeNzxyjH}(ynSF", (-3), "k\"fb)]BV\" 8q", 32784, (-148), (-3), 32784, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "D$0xB\"", (-1215), 2640, "oLbeNzxyjH}(ynSF");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SCHEMA;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("R`V}.<VKJA(C}\"qPM^");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("1CYb/u)Z0j", ".", "R`V}.<VKJA(C}\"qPM^", "oLbeNzxyjH}(ynSF", (-3), "k\"fb)]BV\" 8q", 32784, (-148), (-3), 32784, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "D$0xB\"", (-1215), 2640, "oLbeNzxyjH}(ynSF");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Stack<Locale> stack0 = new Stack<Locale>();
      stack0.stream();
      UnaryOperator<Locale> unaryOperator0 = UnaryOperator.identity();
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = stack0.push(locale0);
      stack0.add(locale1);
      UnaryOperator<Delayed> unaryOperator1 = UnaryOperator.identity();
      stack0.replaceAll(unaryOperator0);
      stack0.removeElement(unaryOperator1);
      Stack<Locale.LanguageRange> stack1 = new Stack<Locale.LanguageRange>();
      stack1.clear();
      Locale.filter((List<Locale.LanguageRange>) stack1, (Collection<Locale>) stack0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Encountered unexpected exception while attempting to determine if schemas are used in table definitions", "'Q,AJkK@>+", "select count(*) from ", "", (-3607), (String) null, (-1094), (-1533), (-3607), 0, "{7(7f7M", "", (-2668), 116, "");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      System.setCurrentTimeMillis(1073741824L);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = DBUtil.getLastStatement();
      assertNull(string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Stack<Locale> stack0 = new Stack<Locale>();
      stack0.stream();
      UnaryOperator.identity();
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = stack0.push(locale0);
      Locale locale2 = Locale.JAPAN;
      Locale locale3 = Locale.JAPANESE;
      Locale locale4 = Locale.UK;
      locale2.toLanguageTag();
      locale2.toLanguageTag();
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      Vector<String> vector0 = new Vector<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale0.getDisplayCountry(locale1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale locale5 = Locale.JAPAN;
      locale1.getDisplayCountry(locale2);
      locale1.getDisplayVariant(locale0);
      JComponent.setDefaultLocale(locale1);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "ja-JP", "3", "E%@&m|(-O]QpR:", 766, "DBUtil.error.bindblobfailure", (-464), (-464), (-3904), (-3904), "", "|Q[1rfCJG?!X", (-3904), 16, "3");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      System.setCurrentTimeMillis(2851L);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[6];
      String string0 = "@$,}0o3{5=EU!:{AZ";
      int int0 = 2006;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string1 = null;
      String string2 = "select rdb$view_source from rdb$relations where rdb$relation_name = '";
      dBCopyPlugin0.getPluginAppSettingsFolder();
      String string3 = "bT^PzU$l %)d";
      String string4 = "/pR,QBZb_{";
      dBCopyPlugin0.setDestDatabaseObject((IDatabaseObjectInfo) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, "select rdb$view_source from rdb$relations where rdb$relation_name = '", "bT^PzU$l %)d", "/pR,QBZb_{", 2006, "@$,}0o3{5=EU!:{AZ", 2006, 2006, 2006, 2006, "select rdb$view_source from rdb$relations where rdb$relation_name = '", "/pR,QBZb_{", (-2841), 2006, "/pR,QBZb_{");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDF;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SYNONYM;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      // Undeclared exception!
      try { 
        DBUtil.getColumnSql(dBCopyPlugin0, tableColumnInfo0, "@$,}0o3{5=EU!:{AZ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      JProgressBar jProgressBar0 = new JProgressBar();
      GridBagConstraints gridBagConstraints0 = gridBagLayout0.getConstraints(jProgressBar0);
      gridBagConstraints0.clone();
      gridBagLayout0.setConstraints(jProgressBar0, gridBagConstraints0);
      GridBagLayout gridBagLayout1 = new GridBagLayout();
      gridBagLayout1.location(9999, (-1));
      // Undeclared exception!
      try { 
        DBUtil.deleteDataInExistingTable((ISession) null, "/t>H(SGH#l", "f", "6AurT)P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.FUNCTION;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      DatabaseObjectType.createNewDatabaseObjectType("1CYb/u)]0j", (Icon) imageIcon0);
      ImageIcon imageIcon1 = (ImageIcon)databaseObjectType0.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType("1CYb/u)]0j", (Icon) imageIcon1);
      DatabaseObjectType.createNewDatabaseObjectType("1CYb/u)]0j", (Icon) imageIcon0);
      imageIcon1.setDescription("1CYb/u)]0j");
      DatabaseObjectType.createNewDatabaseObjectType("1CYb/u)]0j", (Icon) imageIcon1);
      DatabaseObjectType.createNewDatabaseObjectType("NAFC`o");
      DatabaseObjectType.createNewDatabaseObjectType("1CYb/u)]0j", (Icon) imageIcon1);
      DatabaseObjectType.createNewDatabaseObjectType("1CYb/u)]0j", (Icon) imageIcon1);
      DatabaseObjectType.createNewDatabaseObjectType("Q)Y1sl6+~~B/+8^n#j");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.sameDatabaseType((ISession) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      String string0 = DBUtil.getLastStatementValues();
      assertNull(string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        DBUtil.executeQuery((ISession) null, "btNkTX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Stack<Locale> stack0 = new Stack<Locale>();
      UnaryOperator.identity();
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = stack0.push(locale0);
      Locale locale2 = Locale.JAPAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(linkedList0);
      Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) stack0);
      List<Locale> list0 = new Vector<Locale>();
      Locale locale3 = Locale.JAPAN;
      Locale locale4 = Locale.JAPANESE;
      locale4.toLanguageTag();
      locale4.getDisplayName(locale1);
      locale3.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Vector<String> vector1 = new Vector<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) vector1, locale_FilteringMode0);
      locale1.getDisplayCountry(locale3);
      locale0.getDisplayVariant(locale2);
      JComponent.setDefaultLocale(locale3);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer1.getFocusListeners();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "\u65E5\u672C\u8A9E", "BosT^<");
      // Undeclared exception!
      try { 
        DBUtil.getPKColumnString((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MouseMotionListener mouseMotionListener0 = AWTEventMulticaster.add((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      MouseMotionListener mouseMotionListener1 = AWTEventMulticaster.add((MouseMotionListener) defaultCaret0, mouseMotionListener0);
      MouseMotionListener mouseMotionListener2 = AWTEventMulticaster.remove(mouseMotionListener0, (MouseMotionListener) defaultCaret0);
      MouseMotionListener mouseMotionListener3 = AWTEventMulticaster.remove(mouseMotionListener1, (MouseMotionListener) defaultCaret0);
      DefaultCaret defaultCaret1 = new DefaultCaret();
      MouseMotionListener mouseMotionListener4 = AWTEventMulticaster.remove(mouseMotionListener2, mouseMotionListener1);
      AWTEventMulticaster.remove(mouseMotionListener3, mouseMotionListener3);
      MouseMotionListener mouseMotionListener5 = AWTEventMulticaster.add((MouseMotionListener) defaultCaret1, mouseMotionListener2);
      AWTEventMulticaster.remove((MouseMotionListener) null, mouseMotionListener1);
      AWTEventMulticaster.remove(mouseMotionListener1, mouseMotionListener4);
      DefaultCaret defaultCaret2 = new DefaultCaret();
      DefaultCaret defaultCaret3 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseMotionListener) null, (MouseMotionListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultCaret defaultCaret4 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseMotionListener) null, mouseMotionListener1);
      DefaultCaret defaultCaret5 = new DefaultCaret();
      MouseMotionListener mouseMotionListener6 = AWTEventMulticaster.add((MouseMotionListener) null, mouseMotionListener2);
      AWTEventMulticaster.remove((MouseMotionListener) null, (MouseMotionListener) null);
      AWTEventMulticaster.remove(mouseMotionListener5, (MouseMotionListener) defaultCaret5);
      DefaultCaret defaultCaret6 = new DefaultCaret();
      AWTEventMulticaster.add((MouseMotionListener) defaultCaret6, mouseMotionListener6);
      defaultTreeCellRenderer0.addMouseMotionListener(mouseMotionListener2);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "ALTER TABLE", 0, "]\"s", (-1396), 0, 337, 0, "ALTER TABLE", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 0, 0, "org.jfree.data.general.DatasetChangeEvent");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getMaxColumnLengthSQL((ISession) null, tableColumnInfo0, "]\"s", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      BevelBorder bevelBorder0 = new BevelBorder(1960);
      Color color0 = Color.red;
      BevelBorder bevelBorder1 = new BevelBorder(1960, color0, color0, color0, color0);
      bevelBorder0.getHighlightInnerColor();
      bevelBorder0.isBorderOpaque();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "z.&B_", "t~Idko", "z.&B_", 410);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PriorityBlockingQueue<Locale> priorityBlockingQueue0 = new PriorityBlockingQueue<Locale>();
      PriorityBlockingQueue<Locale> priorityBlockingQueue1 = new PriorityBlockingQueue<Locale>();
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, "(>86", "(>86", "`Gj!'HmO'[uh", 142);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.isBinaryType((TableColumnInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFileWrappersImpl0.setApplicationFiles(applicationFiles0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getUpdateDirectory();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl1);
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", "r1b#p", "net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", "$FIND", 3, "OT*+#]", (-789), 1739, (-1982292595), 6, "'2000-1-1'", "04b9", 93, 1739, "OT*+#]");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.setDestSession((ISession) null);
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.checkKeyword((ISession) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BevelBorder bevelBorder0 = new BevelBorder(963);
      Color color0 = Color.red;
      Color color1 = Color.getColor(", 19", 410);
      BevelBorder bevelBorder1 = new BevelBorder((-2), color1, color1, color0, color0);
      bevelBorder1.getHighlightInnerColor();
      bevelBorder0.isBorderOpaque();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.fixCase((ISession) null, "ZxhttjsiG2UOz`?|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DBUtil.setLastStatement("");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = "";
      String string1 = " tableName = ";
      int int0 = (-944);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "", " tableName = ", 0, "8ko\"[Pj3Bq%gi&m\"", (-944), 0, 0, (-944), "EAe}(c$", "8ko\"[Pj3Bq%gi&m\"", 6, 0, "quote_literal");
      String string2 = " NOT NULL";
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.CATALOG;
      DatabaseObjectType.createNewDatabaseObjectType("quote_literal");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      // Undeclared exception!
      try { 
        DBUtil.getColumnSql(dBCopyPlugin0, tableColumnInfo0, " NOT NULL", " NOT NULL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UnaryOperator.identity();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      MouseMotionListener mouseMotionListener0 = AWTEventMulticaster.add((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      MouseMotionListener mouseMotionListener1 = AWTEventMulticaster.add(mouseMotionListener0, mouseMotionListener0);
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseMotionListener) defaultCaret1, mouseMotionListener0);
      aWTEventMulticaster0.mouseExited((MouseEvent) null);
      AWTEventMulticaster.add((MouseMotionListener) null, mouseMotionListener1);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseMotionListener) aWTEventMulticaster0, (MouseMotionListener) defaultCaret0);
      AWTEventMulticaster.add((MouseMotionListener) aWTEventMulticaster1, mouseMotionListener1);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "Skhyippig FK (", "2`R0Gd&cUlRy5Q.Ux");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("e+0", "e+0", ")", "org.jfree.data.general.DatasetChangeEvent", 2001, "'AMdP)v{%<42", 2308, (-7), 1611, 2586, "'AMdP)v{%<42", ")", 2001, (-882), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      // Undeclared exception!
      try { 
        DBUtil.getSchemaNameFromDbObject((IDatabaseObjectInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("r9L%W", "AR<z,jqb", "fixCase: unexpected exception: ", "DBUtil.error.bindblobfailure", (-4961), "DBUtil.error.bindblobfailure", (-4294), (-4961), 50000, (-4294), " CHAR(10) )", "DBUtil.error.bindblobfailure", (-1645), 0, ".{,tyow{d");
      String string0 = DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      assertEquals("AR<z,jqb", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[1];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(" CHAR(10) )", "yjzh", (String) null, "#)cY_]>LKx", 3173, "#)cY_]>LKx", (-1645), 3173, 2005, 3173, "yjzh", " CHAR(10) )", (-349), 2000, "+(c{7XiMOBS\b");
      String string0 = DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      assertEquals("yjzh", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.OTHER;
      DatabaseObjectType.createNewDatabaseObjectType("1");
      byte[] byteArray0 = new byte[1];
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      DatabaseObjectType.createNewDatabaseObjectType("clob");
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.CATALOG;
      databaseObjectType0.getIcon();
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.OTHER;
      imageIcon0.getIconHeight();
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.TRIGGER;
      DatabaseObjectType.createNewDatabaseObjectType("LC@", (Icon) imageIcon0);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.TRIGGER;
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("", (Icon) imageIcon0);
      ImageIcon imageIcon1 = new ImageIcon("p.'3cy]).T4s4Z~", "k\"fb)]0OBV\" 8q");
      DatabaseObjectType.createNewDatabaseObjectType("", (Icon) imageIcon1);
      DatabaseObjectType.createNewDatabaseObjectType("k\"fb)]0OBV\" 8q", (Icon) imageIcon1);
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[0];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.FUNCTION;
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[1];
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("1CYb/u)]0j", "rF14- jN]K8|yTdZ'", "1CYb/u)]0j");
      iDatabaseObjectInfoArray0[0] = (IDatabaseObjectInfo) databaseObjectInfo0;
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Stack<Locale> stack0 = new Stack<Locale>();
      UnaryOperator.identity();
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = stack0.push(locale0);
      Locale locale2 = Locale.JAPAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(linkedList0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) stack0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale locale3 = Locale.JAPAN;
      Locale locale4 = Locale.JAPANESE;
      locale4.toLanguageTag();
      locale4.getDisplayName(locale1);
      locale3.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Vector<String> vector1 = new Vector<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) vector1, locale_FilteringMode0);
      locale1.getDisplayCountry(locale3);
      locale0.getDisplayVariant(locale2);
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList((IDatabaseObjectInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster2, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster3, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster2, (InputMethodListener) aWTEventMulticaster5);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster6, (InputMethodListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster5, (InputMethodListener) aWTEventMulticaster8);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster6, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster3, (InputMethodListener) aWTEventMulticaster7);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster10, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster8);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.add((ItemListener) aWTEventMulticaster12, (ItemListener) aWTEventMulticaster0);
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.forLanguageTag("0xNwKN*[NVBw1o");
      locale1.getDisplayVariant(locale0);
      JComponent.setDefaultLocale(locale1);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster13, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster11, (InputMethodListener) aWTEventMulticaster12);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster14, (InputMethodListener) aWTEventMulticaster9);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) aWTEventMulticaster11);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      DefaultCaret defaultCaret2 = new DefaultCaret();
      // Undeclared exception!
      try { 
        DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = Color.red;
      BevelBorder bevelBorder0 = new BevelBorder(410, color0, color0, color0, color0);
      bevelBorder0.getHighlightInnerColor();
      bevelBorder0.isBorderOpaque();
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) defaultTreeCellRenderer0, (Border) bevelBorder0, 410, 410, 3, (-3020));
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-3172.812358), (-3020), 7.0, 2389.3);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      rectangle0.setLocation(51, 1853);
      Point point0 = gridBagLayout0.location((-2147483635), 1035);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      gridBagLayout0.setConstraints(defaultTreeCellRenderer0, gridBagConstraints0);
      point0.move(51, 1727);
      rectangle2D_Double0.setFrameFromCenter((Point2D) point0, (Point2D) point0);
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createUnion(rectangle0);
      rectangle0.intersects((Rectangle2D) rectangle2D_Double0);
      Rectangle2D.union(rectangle0, rectangle2D0, rectangle0);
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getVetoableChangeListeners();
      defaultTreeCellRenderer1.computeVisibleRect(rectangle0);
      defaultTreeCellRenderer0.getFocusListeners();
      DefaultTreeCellRenderer defaultTreeCellRenderer2 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer2.setDisplayedMnemonic('t');
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      // Undeclared exception!
      try { 
        DBUtil.getForeignKeySQL(dBCopyPlugin0, (ITableInfo) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.isKeyword((ISession) null, "#A[SN4.rcuirYoCk&ax");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getTables((ISession) null, "\t", "\t", "2`R0Gd&cUlRy5Q.Ux");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>();
      vector0.parallelStream();
      String string0 = "]U4reTAiZ";
      DBUtil.setLastStatementValues("]U4reTAiZ");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      int int0 = 0;
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.dropTable("getContextClassLoader", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "]U4reTAiZ", (ISession) null, false, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(3, 3);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent((-7), 224);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      BevelBorder bevelBorder0 = new BevelBorder(374);
      Color color0 = Color.red;
      BevelBorder bevelBorder1 = new BevelBorder(374, color0, color0, color0, color0);
      bevelBorder1.getHighlightInnerColor();
      bevelBorder1.isBorderOpaque();
      AbstractBorder.getInteriorRectangle((Component) defaultTreeCellRenderer0, (Border) bevelBorder1, 374, 374, 3, (-3020));
      boolean boolean0 = DBUtil.typesAreEquivalent((-3198), (-2272));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.add(inputMethodListener1, inputMethodListener1);
      InputMethodListener inputMethodListener3 = AWTEventMulticaster.add(inputMethodListener2, (InputMethodListener) null);
      InputMethodListener inputMethodListener4 = AWTEventMulticaster.remove(inputMethodListener3, (InputMethodListener) null);
      InputMethodListener inputMethodListener5 = AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener4);
      InputMethodListener inputMethodListener6 = AWTEventMulticaster.add(inputMethodListener2, inputMethodListener5);
      InputMethodListener inputMethodListener7 = AWTEventMulticaster.remove(inputMethodListener6, inputMethodListener3);
      InputMethodListener inputMethodListener8 = AWTEventMulticaster.add((InputMethodListener) null, inputMethodListener1);
      InputMethodListener inputMethodListener9 = AWTEventMulticaster.remove(inputMethodListener1, (InputMethodListener) null);
      AWTEventMulticaster.add(inputMethodListener5, inputMethodListener9);
      InputMethodListener inputMethodListener10 = AWTEventMulticaster.remove(inputMethodListener6, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      InputMethodListener inputMethodListener11 = AWTEventMulticaster.add(inputMethodListener3, inputMethodListener8);
      InputMethodListener inputMethodListener12 = AWTEventMulticaster.remove(inputMethodListener11, (InputMethodListener) null);
      InputMethodListener inputMethodListener13 = AWTEventMulticaster.remove(inputMethodListener2, inputMethodListener12);
      InputMethodListener inputMethodListener14 = AWTEventMulticaster.add(inputMethodListener4, inputMethodListener13);
      AWTEventMulticaster.remove(inputMethodListener14, inputMethodListener12);
      AWTEventMulticaster.remove((InputMethodListener) null, inputMethodListener10);
      InputMethodListener inputMethodListener15 = AWTEventMulticaster.add((InputMethodListener) null, inputMethodListener3);
      AWTEventMulticaster.remove(inputMethodListener7, inputMethodListener15);
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DBUtil.typesAreEquivalent(1347, 2);
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = sQLAlias0.getDriverPropertiesClone();
      sQLDriverPropertyCollection0.getDriverProperties();
      sQLAlias0.setDriverProperties(sQLDriverPropertyCollection0);
      sQLAlias0.setUseDriverProperties(true);
      SQLDriverPropertyCollection sQLDriverPropertyCollection1 = sQLAlias0.getDriverPropertiesClone();
      assertNotSame(sQLDriverPropertyCollection1, sQLDriverPropertyCollection0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PriorityBlockingQueue<Locale> priorityBlockingQueue0 = new PriorityBlockingQueue<Locale>();
      PriorityBlockingQueue<Locale> priorityBlockingQueue1 = new PriorityBlockingQueue<Locale>();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(100.0, 2389.3, 2389.3, 0.0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      Point point0 = gridBagLayout0.location((-668), (-1597));
      rectangle2D_Double0.setFrameFromCenter((Point2D) point0, (Point2D) point0);
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangle2D_Double1.createUnion(rectangle0);
      Rectangle2D.union(rectangle2D0, rectangle0, rectangle2D_Double0);
      DBUtil dBUtil0 = new DBUtil();
      // Undeclared exception!
      try { 
        DBUtil.getTableInfo((ISession) null, ")eL7=Zs$T", "XME$^{Q/>706sI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CJl'@)g `cf");
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList((List<IDatabaseObjectInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster2, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster3, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster2, (InputMethodListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster6, (InputMethodListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster5, (InputMethodListener) aWTEventMulticaster9);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster6, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster3, (InputMethodListener) aWTEventMulticaster8);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster11, (InputMethodListener) null);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster9);
      AWTEventMulticaster.add((ItemListener) aWTEventMulticaster13, (ItemListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster10, (InputMethodListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster15 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster7, (InputMethodListener) aWTEventMulticaster12);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster15, (InputMethodListener) aWTEventMulticaster12);
      AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster11, (InputMethodListener) aWTEventMulticaster1);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster14, (InputMethodListener) aWTEventMulticaster6);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFocusListeners();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.sanityCheckPreferences((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }
}
