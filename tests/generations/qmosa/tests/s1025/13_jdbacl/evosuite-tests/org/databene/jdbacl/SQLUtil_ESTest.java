/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 15:04:16 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.store.raw.data.BaseDataFileFactoryJ4;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.command.dml.Select;
import org.h2.engine.Session;
import org.h2.engine.SessionRemote;
import org.h2.tools.Recover;
import org.h2.value.ValueLob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLUtil.isQuery("42X36");
      Integer integer0 = RawTransaction.ABORT;
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = "5iFe<!jdN8D n";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(";tVt1E}-U|k{");
      DBDataType dBDataType0 = DBDataType.getInstance(3, "BARBAR");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5iFe<!jdN8D n", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setNullable(false);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("G]W4u3Naaqt%#zyS", defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn2 = null;
      try {
        defaultDBColumn2 = new DefaultDBColumn("insert", defaultDBTable0, 4, "(b|hHgDu3#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (b|hHgDu3#
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.472753004351225
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLUtil.isQuery("42X36");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("drop materialized view", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index");
      DBDataType dBDataType0 = DBDataType.getInstance(48, "deletealter if>ndx");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "create unique index");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.divideUnsigned(2414, 3065);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized view", defaultDBTable0, dBDataType0, integer1);
      linkedList0.offer(defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      Integer.toUnsignedLong(48);
      linkedList0.removeFirstOccurrence("}-[m}EJT_uV)");
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      System.setCurrentTimeMillis(2414);
      SQLUtil.isDML("drop materialized view");
      SQLUtil.mutatesDataOrStructure("42X36");
      SQLUtil.isDDL("delte&2<ndu=$q/y");
      Boolean boolean0 = new Boolean("zLlZ.qPso)r");
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageFactory genericLanguageFactory1 = new GenericLanguageFactory();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      assertFalse(slaveDatabase0.isActive());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.127557121554711
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 16;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("w&('>v,b\"m", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",Xp11mUM%");
      SQLUtil.isDDL("d!xg={J?5OC`(");
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "AiUbl'Ma5RuQ[Q;R";
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("6M<Ki}NE");
      dBCatalog0.getSequences();
      dBCatalog0.equals((Object) null);
      dBCatalog0.setDoc("");
      dBCatalog0.getSequences();
      DBSchema dBSchema0 = new DBSchema(")z8&xx#h&d.#@6w,4*");
      dBCatalog0.getSchema(")z8&xx#h&d.#@6w,4*");
      dBSchema0.getSequences(false);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      dBSchema0.equals((Object) null);
      dBSchema0.getTables();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)3;
      ValueLob valueLob0 = ValueLob.createSmallLob((-1086486388), byteArray0);
      Reader reader0 = valueLob0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      StringReader stringReader0 = new StringReader("Cy:Ll~^vB'7m6`{");
      stringReader0.read();
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.888599504919186
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(40, "select1aavwz");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      DBDataType.getInstance((-504), "0vpV]");
      TableContainer tableContainer0 = new TableContainer("select1aavwz");
      tableContainer0.getTable("n/noccjmqp|");
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", (DBTable) null, dBDataType0, integer1, integer2);
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer4 = RawTransaction.COMMIT;
      Integer integer5 = RawTransaction.LOCK_ESCALATE;
      Integer.min((-504), (-3452));
      Integer integer6 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn0.toString();
      Integer integer7 = RawTransaction.COMMIT;
      defaultDBColumn0.setFractionDigits(integer7);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      SQLUtil.removeComments("update");
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9495745057165772
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = " as ";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "tF|$YIcxz_L";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " as ", true, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("JAXP");
      mockPrintWriter0.print(1L);
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 's';
      charArray0[4] = 's';
      mockPrintWriter0.write(charArray0);
      mockPrintWriter0.println(1L);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(9223372036854775807L);
      String string1 = "a$a=LgVo7g]";
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint(".", false, defaultDBTable0, "tF|$YIcxz_L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLUtil.isQuery("Eelect intlh");
      CompositeDBObject<DefaultDBColumn> compositeDBObject0 = (CompositeDBObject<DefaultDBColumn>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("80000000-00d3-e222-9920-000a0a0b1900");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      StringBuilder stringBuilder0 = new StringBuilder("&<n{Y;0Xu3G|?");
      stringBuilder0.append("");
      DBDataType dBDataType0 = DBDataType.getInstance((-1260), "&<n{Y;0Xu3G|?");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("80000000-00d3-e222-9920-000a0a0b1900", defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("&<n{Y;0Xu3G|?", defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("0h1U-^9Tx#<Y", defaultDBTable0, (-1260), "5.1");
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "p:dQ'3yY61";
      stringArray0[1] = "";
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.603605151516075
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(" = ");
      dBSchema0.setName("drop table");
      dBSchema0.toString();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "GmvNAiK";
      stringArray0[1] = "v=SPj";
      stringArray0[2] = "FKTABLE_SCHEM";
      stringArray0[3] = "drop table";
      stringArray0[4] = "v=SPj";
      stringArray0[5] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "UB8wCaI'WF3~>p", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      dBPrimaryKeyConstraint0.setName("v=SPj");
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT v=SPj ", string0);
      
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec1);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      byte[] byteArray0 = GDSHelper.BLOB_LENGTH_REQUEST;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-2372), 252645127);
      String[] stringArray0 = new String[6];
      streamTokenizer0.sval = "\n=========================\n";
      stringArray0[0] = "\n=========================\n";
      streamTokenizer0.eolIsSignificant(false);
      stringArray0[1] = "U";
      stringArray0[2] = "\n=========================\n";
      stringReader0.mark(52);
      streamTokenizer0.resetSyntax();
      stringArray0[3] = "]xWOde5'%B)s-QQ`8";
      stringArray0[4] = "\n=========================\n";
      stringArray0[5] = "";
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("ZhOJCiF.6>c<@rc,8m`", (String[]) null, "ZhOJCiF.6>c<@rc,8m`", "ZhOJCiF.6>c<@rc,8m`", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.809823966372262
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLUtil.isQuery("42X36");
      Integer integer0 = RawTransaction.ABORT;
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("create materializd viewalter if>ndx", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("42X36", dBSchema0);
      Integer.getInteger("42X36", 48);
      DBDataType dBDataType0 = DBDataType.getInstance(48, "drprindx");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create ", defaultDBTable0, dBDataType0, integer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "drprindx");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('t');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter2);
      mockPrintWriter0.print(" ADD ");
      mockPrintWriter0.println((long) 48);
      dBCatalog0.getComponents();
      charArrayWriter2.writeTo(mockPrintWriter0);
      mockPrintWriter0.println((-468L));
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(87, charArrayWriter2.size());
      
      SQLUtil.substituteMarkers("Ne\nLIMIT ", "drprindx", integer0);
      SQLUtil.mutatesDataOrStructure("42X36");
      boolean boolean0 = SQLUtil.isDML("create materializd viewalter if>ndx");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.442470333070849
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLUtil.isQuery("42X36");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("T,", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index");
      DBDataType dBDataType0 = DBDataType.getInstance(48, "deletealter if>ndx");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("T,", defaultDBTable0, dBDataType0, integer1);
      linkedList0.add((DBColumn) defaultDBColumn0);
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.toUnsignedLong(48);
      linkedList0.removeFirstOccurrence("a}-[m}EJT_4uV)");
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      System.setCurrentTimeMillis(2414);
      SQLUtil.isDML("T,");
      SQLUtil.mutatesDataOrStructure("42X36");
      SQLUtil.isDDL("delete&2<ndu=$q/y");
      StringBuilder stringBuilder0 = new StringBuilder("42X36");
      // Undeclared exception!
      try { 
        stringBuilder0.insert(1225, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1225
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4829024942517908
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.mutatesStructure("alter materialized viewselect into");
      SQLUtil.isProcedureCall("alter materialized viewselect into");
      SQLUtil.isQuery("select into");
      SQLUtil.mutatesDataOrStructure("3Lmx25k6pK)+~ >9s");
      System.setCurrentTimeMillis(17179869187L);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "alter materialized viewselect into";
      stringArray0[1] = "3Lmx25k6pK)+~ >9s";
      SQLUtil.join("alter session", "@,w~^EGA-'pN`", stringArray0, "1", ")x/e%bkxu)/A", stringArray0);
      System.setCurrentTimeMillis(1L);
      Random.setNextRandom((-1321));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "senectLintotlh";
      SQLUtil.isQuery("senectLintotlh");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("BDATA", 1024);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String string1 = "n6nfoccjmq";
      SQLUtil.parseColumnTypeAndSize("n6nfoccjmq");
      StringBuilder stringBuilder0 = new StringBuilder("create ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      Integer integer0 = RawTransaction.ABORT;
      Recover recover0 = new Recover();
      Integer.getInteger((String) null, 496);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint((String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns ()
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5077111044767726
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("v=SPj");
      dBSchema0.setName("GmvNAiK");
      dBSchema0.toString();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("mOcX|h|ST9`iND_#", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[1] = "mOcX|h|ST9`iND_#";
      stringArray0[2] = "alter if(ndex";
      stringArray0[3] = "FKTABLE_SCHEM";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "v=SPj", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      dBPrimaryKeyConstraint0.setName("qf");
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT qf ", string0);
      
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      boolean boolean0 = SQLUtil.isDDL("qf");
      assertFalse(boolean0);
      
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("CONSTRAINT qf PRIMARY KEY (, mOcX|h|ST9`iND_#, alter if(ndex, FKTABLE_SCHEM)", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6745460275183657
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CompositeDBObject<DefaultDBColumn> compositeDBObject0 = (CompositeDBObject<DefaultDBColumn>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("+FkrZ", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      StringBuilder stringBuilder0 = new StringBuilder("&<n{Y;0Xu3G|?");
      stringBuilder0.append("");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("callaltfr index", (DBSchema) null);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      defaultDBTable1.addUniqueConstraint(dBPrimaryKeyConstraint0);
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec1);
      assertEquals("&<n{Y;0Xu3G|?CONSTRAINT  ", stringBuilder0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)6;
      ValueLob valueLob0 = ValueLob.createSmallLob(2147483645, byteArray0);
      valueLob0.getReader();
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SessionRemote sessionRemote0 = new SessionRemote();
      ValueLob valueLob1 = ValueLob.open(1, sessionRemote0, 20, 204, 2, false);
      valueLob1.toString();
      ValueLob valueLob2 = ValueLob.createSmallLob((-77560185), byteArray0);
      valueLob2.getInputStream();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars(2, 0);
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L";
      stringArray0[1] = "select1aavwz";
      stringArray0[2] = "alter session1aavwz";
      stringArray0[3] = "select1aavwz";
      stringArray0[4] = "select1aavwz";
      SQLUtil.innerJoin("select1aavwz", stringArray0, "alter session1aavwz", "e%I|JMR6&?WFgKFnQE", stringArray0);
      Random.setNextRandom((-186));
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8386762979144713
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = '~';
      charArray0[2] = 'D';
      charArray0[3] = 'n';
      stringReader0.skip(1);
      stringReader0.read(charArray0, 1, 1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      stringReader0.read(charArray0);
      streamTokenizer0.sval = "N6NfOCCJMQp|OBw*u";
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars(42, 42);
      streamTokenizer0.nval = (double) 1;
      streamTokenizer0.parseNumbers();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("1", string0);
      
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.renderValue("");
      String string1 = SQLUtil.normalize("N6NfOCCJMQp|OBw*u", true);
      assertEquals("N6NfOCCJMQ  p | OBw * u", string1);
      
      SQLUtil.isDDL("N6NfOCCJMQp|OBw*u");
      Boolean boolean0 = SQLUtil.mutatesStructure("/`j2~q7[");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3419004922628597
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "drop tabledeletee8){p7!_! key~xee";
      SQLUtil.isQuery("drop tabledeletee8){p7!_! key~xee");
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(4398046512162L);
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      String string1 = "select into";
      SQLUtil.mutatesDataOrStructure("select into");
      BasicUUID basicUUID0 = new BasicUUID("drop tabledeletee8){p7!_! key~xee");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BaseDataFileFactoryJ4 baseDataFileFactoryJ4_0 = new BaseDataFileFactoryJ4();
      BaseDataFileFactoryJ4 baseDataFileFactoryJ4_1 = new BaseDataFileFactoryJ4();
      int int0 = (-3912);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-3912));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("FKTABLE_SCHEM");
      DBTrigger dBTrigger0 = new DBTrigger("^Vy\"FED.", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("<_WO[>)", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<_WO[>)";
      stringArray0[1] = "<_WO[>)";
      stringArray0[2] = "FKTABLE_SCHEM";
      stringArray0[3] = "<_WO[>)";
      stringArray0[4] = "<_WO[>)";
      stringArray0[5] = "<_WO[>)";
      stringArray0[6] = "FKTABLE_SCHEM";
      stringArray0[7] = "FKTABLE_SCHEM";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "<_WO[>)", false, stringArray0);
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT <_WO[>) PRIMARY KEY (<_WO[>), <_WO[>), FKTABLE_SCHEM, <_WO[>), <_WO[>), <_WO[>), FKTABLE_SCHEM, FKTABLE_SCHEM)", string0);
      
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT <_WO[>) ", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " as ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " as ");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("GyWI?M>03.H.s_", false, "org.apache.derby.impl.store.raw.xact.InternalXact", "execute");
      dBCheckConstraint0.setName((String) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK execute", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("FKTABLE_SCHEM");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("<_WO[>)", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<_WO[>)";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "<_WO[>)";
      stringArray0[5] = null;
      stringArray0[6] = "FKTABLE_SCHEM";
      stringArray0[7] = "FKTABLE_SCHEM";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("PRIMARY KEY (<_WO[>), , , , <_WO[>), , FKTABLE_SCHEM, FKTABLE_SCHEM)", string0);
      
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("IHLT\"pB{2", compositeDBObject0);
      tableContainer0.getTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("IHLT\"pB{2", (DBTable) null, (-1671), "H3$]0$[+ t+[");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("H3$]0$[+ T+[", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)109;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("Lk`f$t", (String[]) null, "truncatehfeu", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "AiUbl'Ma5RuQ[Q;R";
      DBCatalog dBCatalog0 = new DBCatalog("AiUbl'Ma5RuQ[Q;R");
      dBCatalog0.getSchema("6M<Ki}NE");
      dBCatalog0.getSequences();
      dBCatalog0.equals((Object) null);
      dBCatalog0.setDoc("");
      dBCatalog0.getSequences();
      DBSchema dBSchema0 = new DBSchema(")z8&xx#h&d.#@6w,4*");
      dBSchema0.getTables();
      dBSchema0.getTriggers();
      dBSchema0.setName("6M<Ki}NE");
      dBCatalog0.removeSchema(dBSchema0);
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog AiUbl'Ma5RuQ[Q;R", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6292591159430185
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLUtil.isQuery("seetL/ntoth");
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("seetL/ntoth");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      mockPrintWriter0.println("");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("gl6,aY");
      mockPrintWriter1.printf("hFEu", (Object[]) stringArray0);
      char[] charArray0 = new char[7];
      mockPrintWriter1.write("gl6,aY", (-923), (-2));
      charArray0[0] = '>';
      charArray0[1] = '>';
      mockPrintWriter1.println(1.0);
      charArray0[2] = ';';
      charArray0[3] = ')';
      mockPrintWriter1.print(1L);
      printWriter0.println((Object) "gl6,aY");
      mockPrintWriter0.print((-167.88803));
      charArray0[6] = '>';
      printWriter0.write(charArray0);
      mockPrintWriter1.println((long) '>');
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      System.setCurrentTimeMillis('>');
      SQLUtil.substituteMarkers("seetL/ntoth", "a$aP=KgVo{g]", defaultDBTable0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("hFEu");
      assertNull(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "fE?QzX*^(i]x";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      ValueLob valueLob0 = ValueLob.createSmallLob((-1611522464), byteArray0);
      byte[] byteArray1 = GDSHelper.BLOB_LENGTH_REQUEST;
      valueLob0.getInputStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(11, 487);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.resetSyntax();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4612915639290918
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select into");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "select into";
      stringArray0[1] = "select into";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select into", false, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      String string0 = dBUniqueConstraint0.toString();
      assertEquals("CONSTRAINT \"select into\" UNIQUE (select into, select into)", string0);
      
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("select into", true, dBUniqueConstraint0);
      String string1 = SQLUtil.normalize("select into", true);
      assertEquals("select into", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "alter index";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("BDATA", 1024);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.parseColumnTypeAndSize("f?&|,q{");
      StringBuilder stringBuilder0 = new StringBuilder("create ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "f?&|,q{", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      Integer integer0 = RawTransaction.ABORT;
      Recover recover0 = new Recover();
      Integer.getInteger("alter index", (-426));
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (alter index, , , )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = '~';
      charArray0[2] = 'D';
      charArray0[3] = 'n';
      StringBuilder stringBuilder0 = new StringBuilder("/2l}8/wldG/if )UUe");
      String string0 = "|`";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|`");
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.1044265378020057
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ",F~93,X";
      stringArray0[3] = "_Xv.y";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , ,F~93,X, _Xv.y, , , )", string0);
      
      DBSchema dBSchema0 = new DBSchema("RtZqrs@1jVz>-3sB{*%");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create ", dBSchema0);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      dBSchema0.getSequences(true);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop indexfilename", defaultDBTable0, 1008, "");
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals(" = '' AND  = '' AND ,F~93,X = ',F~93,X' AND _Xv.y = '_Xv.y' AND  = '' AND  = '' AND  = ''", string1);
      
      SQLUtil.parseColumnTypeAndSize("create ");
      String string2 = SQLUtil.join("=H79Bt~f'Qw", ",F~93,X", stringArray0, "fqRZx+(#pxr", "(, , ,F~93,X, _Xv.y, , , )", stringArray0);
      assertEquals("=H79Bt~f'Qw join fqRZx+(#pxr as (, , ,F~93,X, _Xv.y, , , ) on ,F~93,X. = (, , ,F~93,X, _Xv.y, , , ). and ,F~93,X. = (, , ,F~93,X, _Xv.y, , , ). and ,F~93,X.,F~93,X = (, , ,F~93,X, _Xv.y, , , ).,F~93,X and ,F~93,X._Xv.y = (, , ,F~93,X, _Xv.y, , , )._Xv.y and ,F~93,X. = (, , ,F~93,X, _Xv.y, , , ). and ,F~93,X. = (, , ,F~93,X, _Xv.y, , , ). and ,F~93,X. = (, , ,F~93,X, _Xv.y, , , ).", string2);
      
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("", stringBuilder1.toString());
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Eelect intlh";
      stringArray0[1] = "create materialized view";
      stringArray0[3] = "Eelect intlh";
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "AiUbl'Ma5RuQ[Q;R";
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("6M<Ki}NE");
      dBCatalog0.getSequences();
      dBCatalog0.equals((Object) null);
      dBCatalog0.setDoc("");
      dBCatalog0.getSequences();
      DBSchema dBSchema0 = new DBSchema(")z8&xx#h&d.#@6w,4*");
      dBCatalog0.getSchema(")z8&xx#h&d.#@6w,4*");
      dBSchema0.getSequences(false);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1294, threadPoolExecutor_AbortPolicy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "#x'w_dz4cuu,F8<zgq.");
      MockThread mockThread1 = new MockThread(mockThread0, "#x'w_dz4cuu,F8<zgq.");
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleWithFixedDelay(mockThread2, (-670L), 1294, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      delayQueue0.offer((Delayed) scheduledFuture0, (-670L), timeUnit1);
      Delayed delayed0 = delayQueue0.peek();
      dBSchema0.equals(delayed0);
      dBSchema0.getTables();
      dBSchema0.getTriggers();
      dBSchema0.setName("6M<Ki}NE");
      dBCatalog0.removeSchema(dBSchema0);
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertNotNull(string0);
      assertEquals("catalog null", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.922240039439781
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLUtil.isQuery("select intotlh");
      String[] stringArray0 = new String[0];
      CompositeDBObject<DefaultDBColumn> compositeDBObject0 = (CompositeDBObject<DefaultDBColumn>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("+FkrZ", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("&<n{Y;0Xu3G|?");
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("v.}=aV$Fj6Y", defaultDBTable0, 1008, "ALTER TABLE ");
      defaultDBColumn0.setDefaultValue("v.}=aV$Fj6Y");
      StringBuilder stringBuilder2 = stringBuilder0.append((Object) defaultDBColumn0);
      stringBuilder0.codePoints();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder3 = SQLUtil.addOptionalCondition("select intotlh", stringBuilder1);
      String[] stringArray1 = new String[0];
      SQLUtil.leftJoin("o[B8x;FW", stringArray0, "\u0001\u01DE", "K}S^q-L<Roq5ma", stringArray1);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CONSTRAINT  FOREIGN KEY () REFERENCES ()");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, mockPrintWriter0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder3);
      SQLUtil.addOptionalCondition("ALTER TABLE ", stringBuilder2);
      assertEquals("&<n{Y;0Xu3G|?truev.}=aV$Fj6Y : ALTER TABLE  or select intotlhALTER TABLE  or ALTER TABLE ", stringBuilder2.toString());
      assertEquals("&<n{Y;0Xu3G|?truev.}=aV$Fj6Y : ALTER TABLE  or select intotlhALTER TABLE  or ALTER TABLE ", stringBuilder0.toString());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "}Af*u|&g`AA%u{cSMk<";
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[5];
      charArray0[0] = '>';
      charArray0[2] = 'D';
      charArray0[3] = 'n';
      stringReader0.read(charArray0, 0, 0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      stringReader0.read(charArray0);
      SQLUtil.removeComments("");
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[24];
      stringArray0[0] = "select1aavwz";
      stringArray0[1] = "select1aavwz";
      stringArray0[4] = "alter session1aavz";
      stringArray0[3] = "select1aavwz";
      stringArray0[3] = "select1aavwz";
      Random.setNextRandom((-186));
      String[] stringArray1 = new String[6];
      stringArray1[0] = "alter session1aavz";
      stringArray1[1] = "e%I|JMR6&?WFgKFnQE";
      stringArray1[2] = "select1aavwz";
      stringArray1[3] = "$dN";
      stringArray1[4] = "e%I|JMR6&?WFgKFnQE";
      stringArray1[5] = "alter session1aavwz";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("selectaltfr index", stringArray0, "e%I|JMR6&?WFgKFnQE", "altfr index", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      float float0 = (-606.93F);
      StringBuilder stringBuilder1 = stringBuilder0.append((-606.93F));
      SQLUtil.addOptionalCondition("\u0007LHZn#F-w", stringBuilder1);
      StringBuilder stringBuilder2 = new StringBuilder(stringBuilder1);
      stringBuilder2.append(0.0F);
      stringBuilder2.append("F#XghAaW{qE");
      int int0 = 54;
      StringBuilder stringBuilder3 = new StringBuilder(54);
      StringBuilder stringBuilder4 = stringBuilder1.appendCodePoint(2000);
      int int1 = 40;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        stringBuilder4.insert(40, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 40
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLUtil.normalize("org.antlr.runtime.Token", false);
      Session session0 = null;
      Select select0 = null;
      try {
        select0 = new Select((Session) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.h2.command.Prepared", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L";
      stringArray0[1] = "select1aavwz";
      stringArray0[2] = "alter session1aavwz";
      stringArray0[3] = "select1aavwz";
      stringArray0[4] = "select1aavwz";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "L";
      stringArray1[1] = "alter session1aavwz";
      stringArray1[2] = "\n/* direct lookup */";
      stringArray1[3] = "e%I|JMR6&?WFgKFnQE";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("select1aavwz", stringArray0, "L", "\n/* direct lookup */", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte) (-121);
      ValueLob valueLob0 = ValueLob.createSmallLob(242, byteArray0);
      Reader reader0 = valueLob0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte) (-52);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      Random.setNextRandom(127);
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "w-J/%\"M0[?]y";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "w-J/%\"M0[?]y";
      stringArray0[8] = null;
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, stringArray0[4], "WIN874", stringArray0);
      assertEquals("null as WIN874 on null.null = WIN874.null and null.null = WIN874.null and null.w-J/%\"M0[?]y = WIN874.w-J/%\"M0[?]y and null.null = WIN874.null and null.null = WIN874.null and null.null = WIN874.null and null.null = WIN874.null and null.w-J/%\"M0[?]y = WIN874.w-J/%\"M0[?]y and null.null = WIN874.null", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[5];
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      Character character0 = new Character('L');
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar(2147483645);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6031846089083
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[1] = "42X04";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "executealter if(ndex");
      String[] stringArray1 = new String[4];
      stringArray1[0] = "<$";
      stringArray1[1] = "alter table";
      stringArray1[2] = "<$";
      stringArray1[3] = "<$";
      String string0 = SQLUtil.join("42X04", "L", stringArray1, "6Bja)*f58>VW", "*/", stringArray0);
      assertEquals("42X04 join 6Bja)*f58>VW as */ on L.<$ = */.L and L.alter table = */.42X04 and L.<$ = */.null and L.<$ = */.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(".eq d=loO8<=hd^N");
      assertNull(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("executealter if(ndex");
      assertFalse(boolean1);
      
      SQLUtil.isQuery("L");
      SQLUtil.isQuery("executealter if(ndex");
      SQLUtil.mutatesDataOrStructure("alter table");
      System.setCurrentTimeMillis(3318L);
      SQLUtil.substituteMarkers(".eq d=loO8<=hd^N", "create unique index", "alter table");
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("create unique index");
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      boolean boolean3 = SQLUtil.isDML("L");
      assertFalse(boolean3);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.1380326081781353
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)42;
      boolean boolean0 = SQLUtil.isDDL("create materialized view");
      Boolean boolean1 = SQLUtil.mutatesStructure("wWzx+{&9?:LJ02{r");
      assertFalse(boolean1.equals((Object)boolean0));
      
      boolean boolean2 = SQLUtil.isQuery("altfr in");
      assertFalse(boolean2);
      
      boolean boolean3 = SQLUtil.isDML("\u0001%\u000B\uFFFF\n%\u0007\uFFFF\b%\u0001\u00E6\t%\u0001\u00E5\u0007%\u0004\uFFFF\u0001%\u0001\uFFFF\u001A%");
      boolean boolean4 = SQLUtil.isProcedureCall("exec");
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.3309068333774414
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLUtil.isProcedureCall("Cannot update the ResultSet because it is either before the start or after the end of the results.");
      SQLUtil.mutatesDataOrStructure("callalter if>ndx");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("callalter if>ndx", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Cannot update the ResultSet because it is either before the start or after the end of the results.");
      DBDataType dBDataType0 = DBDataType.getInstance(1382, "hashKeyColumns[");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique index", defaultDBTable0, dBDataType0, integer0);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.toUnsignedLong(95);
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer.getInteger("callalter if>ndx", integer2);
      defaultDBColumn0.getForeignKeyConstraint();
      System.setCurrentTimeMillis(10000L);
      SQLUtil.isDML("a}-[m}EJT_4uV)");
      SQLUtil.mutatesDataOrStructure("|[j)j");
      StringBuilder stringBuilder0 = new StringBuilder("}G\"^O;)4va/");
      assertEquals("}G\"^O;)4va/", stringBuilder0.toString());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize("wK(&*9^k</H^>{NUz,_", true);
      assertEquals("wK (& * 9 ^ k < / H ^ > { NUz, _", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3450363141108999
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " as4");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "insertcreate materializd viewalter if>ndx";
      stringArray0[1] = null;
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      SQLUtil.renderColumnListWithTableName("insertcreate materializd viewalter if>ndx", stringArray0);
      SQLUtil.join("ALTER TABLE ", "1!>xh1):x}q+%", stringArray0, "e;a+kOA\"h~v", stringArray0[3], stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7G|q>c_w<bu+V7C0");
      defaultDBTable0.getPrimaryKeyConstraint();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("0h1U-^9Tx#<Y", defaultDBTable0, (DBDataType) null);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("m(.(NC J6n", defaultDBTable0, (DBDataType) null);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("7G|q>c_w<bu+V7C0", defaultDBTable0, 4, "0h1U-^9Tx#<Y");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      stringBuilder1.append(1303L);
      stringBuilder1.reverse();
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("IN-LINE", stringArray0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(36, (-2160.0839711128));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 36
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.derby.impl.io.DirFile";
      stringArray0[1] = "Tqo%lx`NB#\"U25'im";
      stringArray0[2] = "org.apache.derby.impl.io.DirFile";
      stringArray0[3] = "-5";
      stringArray0[4] = "-5";
      stringArray0[5] = "-5";
      String string0 = SQLUtil.normalize("/lL?M(eIC)S", true);
      assertEquals("/ lL ? M (eIC) S", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[2] = 'P';
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("}Af*u|&g_AA%u{cMk<", compositeDBObject0);
      tableContainer0.getTable("78|s");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      DBColumn dBColumn0 = null;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(588, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      dBDataType0.isAlpha();
      Integer.min(265, 65);
      Integer integer5 = RawTransaction.LOCK_ESCALATE;
      Integer.getInteger((String) null, 65);
      Integer integer6 = RawTransaction.COMMIT;
      Integer integer7 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer8 = new Integer(65);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(588, "exec");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      DBDataType.getInstance(184, "CHECK ");
      TableContainer tableContainer0 = new TableContainer("cannot upd");
      tableContainer0.getTable("0vpVu]");
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",", (DBTable) null, dBDataType0, integer0);
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer4 = RawTransaction.COMMIT;
      Integer integer5 = RawTransaction.LOCK_ESCALATE;
      dBDataType0.isAlpha();
      Integer.min(265, 65);
      Integer integer6 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(":#/.<l6qclZqS!Y", (DBTable) null, dBDataType0);
      defaultDBColumn1.toString();
      Integer integer7 = RawTransaction.COMMIT;
      Integer integer8 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer9 = new Integer((-663));
      Integer.getInteger("alter materialized viewadd", 573);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter indexadd");
      defaultDBColumn0.setFractionDigits(integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn1);
      assertEquals(":#/.<l6qclZqS!Y EXEC NULL", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.402886181440778
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(588, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      TableContainer tableContainer0 = new TableContainer("cannot upd");
      tableContainer0.getTable("0vpV]");
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",", (DBTable) null, dBDataType0, integer0);
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer5 = RawTransaction.LOCK_ESCALATE;
      dBDataType0.isAlpha();
      Integer.min(265, 65);
      Integer integer6 = RawTransaction.LOCK_ESCALATE;
      Integer.getInteger((String) null, 65);
      String string0 = defaultDBColumn0.toString();
      assertEquals(", : (3)", string0);
      
      Integer integer7 = RawTransaction.COMMIT;
      Integer integer8 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer9 = new Integer(65);
      Integer.getInteger("cannot upd", 65);
      defaultDBColumn0.setFractionDigits(integer9);
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.20788880850049
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select1aavwz");
      Boolean boolean0 = new Boolean("select1aavwz");
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      SQLUtil.mutatesDataOrStructure("select1aavwz");
      BasicUUID basicUUID0 = new BasicUUID("sUu~qM2");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.removeExtensionParams();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      // Undeclared exception!
      try { 
        internalTransactionCoordinator0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("exec");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "exec";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, exec)", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.075648180599498
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[2] = 'D';
      charArray0[3] = 'n';
      stringReader0.read(charArray0, 0, 0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("=CmuW)kJM-");
      String[] stringArray0 = new String[8];
      stringArray0[1] = "tF|$YIcxz_L";
      stringArray0[2] = "=CmuW)kJM-";
      stringArray0[3] = "IP8Lp${S,";
      stringArray0[4] = "N/NOCCJMQp|Ow*u";
      stringArray0[5] = null;
      stringArray0[6] = "tF|$YIcxz_L";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "IP8Lp${S,", true, stringArray0);
      dBUniqueConstraint0.isIdentical(dBUniqueConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[0], true, stringArray0);
      dBUniqueConstraint0.equals("=CmuW)kJM-");
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("PRIMARY KEY (, tF|$YIcxz_L, =CmuW)kJM-, IP8Lp${S,, N/NOCCJMQp|Ow*u, , tF|$YIcxz_L, )", string0);
      
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBUniqueConstraint0);
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND tF|$YIcxz_L = 'tF|$YIcxz_L' AND =CmuW)kJM- = '=CmuW)kJM-' AND IP8Lp${S, = 'IP8Lp${S,' AND N/NOCCJMQp|Ow*u = 'N/NOCCJMQp|Ow*u' AND null = null AND tF|$YIcxz_L = 'tF|$YIcxz_L' AND null = null", string1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder(625);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("- ", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(596.8723F);
      stringBuilder0.append((CharSequence) stringBuilder1);
      StringBuilder stringBuilder3 = new StringBuilder(stringBuilder2);
      SQLUtil.addRequiredCondition("NUMERIC_SCALE INT", stringBuilder1);
      stringBuilder3.append((StringBuffer) null);
      // Undeclared exception!
      try { 
        stringBuilder3.insert(625, (long) 625);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 625
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[2] = 'P';
      String string0 = SQLUtil.normalize("}Af*u|&g_AA%u{cSMk<", true);
      assertEquals("} Af * u | & g_AA % u { cSMk <", string0);
      
      String string1 = SQLUtil.normalize("", false);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter materialized view");
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = null;
      ValueLob valueLob0 = ValueLob.createSmallLob((-1293), (byte[]) null);
      // Undeclared exception!
      try { 
        valueLob0.getReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "deletee8){p7!_! key~xee";
      SQLUtil.mutatesDataOrStructure("deletee8){p7!_! key~xee");
      BasicUUID basicUUID0 = new BasicUUID("deletee8){p7!_! key~xee");
      basicUUID0.toANSIidentifier();
      // Undeclared exception!
      try { 
        ContextService.getFactory();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog("Uv){cGna");
      dBCatalog0.getSchema("rename");
      dBCatalog0.getComponents();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Uv){cGna", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.join("rename", "rename", (String[]) null, "cV-hHPqX", "n6nfoccjmq", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = null;
      TableContainer tableContainer0 = new TableContainer((String) null);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("Can't detach from db.", false);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        columnDescriptorList0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      TableContainer tableContainer0 = new TableContainer("cannot upd");
      tableContainer0.getTable("0vpV]");
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      Integer.min(265, 65);
      Integer integer5 = RawTransaction.LOCK_ESCALATE;
      Integer.getInteger((String) null, 65);
      Integer integer6 = RawTransaction.COMMIT;
      Integer integer7 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer8 = new Integer(65);
      Integer.getInteger("cannot upd", 65);
      boolean boolean0 = SQLUtil.isDML("delete");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = " join ";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex((String) null, true, defaultDBTable0, stringArray0);
      defaultDBTable0.addIndex(dBNonUniqueIndex0);
      String[] stringArray1 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "1>?I\"SUY'l", false, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, )", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "al/zr i(nex";
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "9<dJ\"mN>@";
      stringArray0[1] = "9<dJ\"mN>@";
      stringArray0[2] = "9<dJ\"mN>@";
      stringArray0[3] = "9<dJ\"mN>@";
      stringArray0[4] = "9<dJ\"mN>@";
      stringArray0[5] = "^}";
      LinkedBlockingDeque<DefaultDBColumn> linkedBlockingDeque0 = new LinkedBlockingDeque<DefaultDBColumn>();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>(linkedBlockingDeque0);
      Integer integer0 = new Integer(90013);
      linkedList0.removeFirstOccurrence(integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("[-J/%\"M?[]y", true);
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection((FBManagedConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.derby.impl.io.DirFile";
      stringArray0[1] = "org.apache.derby.impl.io.DirFile";
      stringArray0[2] = "org.apache.derby.impl.io.DirFile";
      stringArray0[3] = "org.apache.derby.impl.io.DirFile";
      stringArray0[4] = "org.apache.derby.impl.io.DirFile";
      stringArray0[5] = "org.apache.derby.impl.io.DirFile";
      stringArray0[6] = "org.apache.derby.impl.io.DirFile";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "org.apache.derby.impl.io.DirFile";
      stringArray1[1] = "Tqo%lx`NB#\"U25'im";
      stringArray1[2] = "org.apache.derby.impl.io.DirFile";
      stringArray1[3] = "-5";
      stringArray1[4] = "-5";
      stringArray1[5] = "-5";
      // Undeclared exception!
      try { 
        SQLUtil.join("org.apache.derby.impl.io.DirFile", "org.apache.derby.impl.io.DirFile", stringArray0, "-5", "org.apache.derby.impl.io.DirFile", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("alter indexn/noccjmqp|ow*u");
      dBSchema0.setName(" = ");
      dBSchema0.toString();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" = ", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "alter indexn/noccjmqp|ow*u";
      stringArray0[1] = "[^JD`Wfr*,x,k";
      stringArray0[2] = "[^JD`Wfr*,x,k";
      stringArray0[3] = "drop table";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "f~$T", false, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      dBPrimaryKeyConstraint0.setName("[^JD`Wfr*,x,k");
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.3447004957129813
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "tF|$YIcxz_L";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " as ", true, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "tF|$YIcxz_L", false, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBUniqueConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      dBPrimaryKeyConstraint0.setName("#j`I6g\u0001:X=O");
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec1);
      assertEquals("CONSTRAINT \" as \" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CompositeDBObject<DefaultDBColumn> compositeDBObject0 = (CompositeDBObject<DefaultDBColumn>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gl6,aY");
      PrintWriter printWriter0 = mockPrintWriter0.append('u');
      mockPrintWriter0.println(30000L);
      assertSame(mockPrintWriter0, printWriter0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.7638558576407304
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      DBPackage dBPackage0 = new DBPackage("", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure((String) null, dBPackage0);
      dBPackage0.setObjectType((String) null);
      dBProcedure0.setSubProgramId("");
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("", string0);
      
      String string1 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string1);
      
      Object object0 = new Object();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+@Nxa+K7", defaultDBTable1, (-1970259799), "execfilename");
      defaultDBColumn0.getNotNullConstraint();
      Character character0 = Character.valueOf('w');
      String string2 = SQLUtil.substituteMarkers("create tableclhk", "e}){p7!_", character0);
      assertEquals("create tableclhk", string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "create tableclhk";
      stringArray0[3] = "'pw";
      stringArray0[4] = "";
      stringArray0[5] = "execfilename";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("'pw", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string3 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 'pw FOREIGN KEY (, , create tableclhk, 'pw, , execfilename) REFERENCES null(, , create tableclhk, 'pw, , execfilename)", string3);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'C';
      charArray0[1] = '9';
      String[] stringArray0 = new String[2];
      stringArray0[0] = "- ";
      stringArray0[1] = "- ";
      String[] stringArray1 = new String[8];
      stringArray1[0] = null;
      stringArray1[1] = "- ";
      stringArray1[2] = null;
      stringArray1[3] = null;
      stringArray1[4] = "L<2b7<;_\\";
      stringArray1[5] = "hC$U3^Tw/v4%";
      stringArray1[6] = "- ";
      stringArray1[7] = "- ";
      String string0 = SQLUtil.leftJoin("hC$U3^Tw/v4%", stringArray0, "- ", "- ", stringArray1);
      assertEquals("left join -  as -  on hC$U3^Tw/v4%.-  = - .null and hC$U3^Tw/v4%.-  = - .- ", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "CHECK ";
      stringArray0[1] = "PRIMARY KEY ";
      stringArray0[2] = "PRIMARY KEY ";
      stringArray0[3] = "PRIMARY KEY ";
      stringArray0[4] = "PRIMARY KEY ";
      stringArray0[5] = "PRIMARY KEY ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "CHECK ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("PRIMARY KEY ", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("+b/0;y5l(y7", true, dBTable0, stringArray0, dBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (CHECK , PRIMARY KEY , PRIMARY KEY , PRIMARY KEY , PRIMARY KEY , PRIMARY KEY )", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1895);
      char[] charArray0 = new char[4];
      charArray0[1] = 'U';
      StringBuilder stringBuilder1 = stringBuilder0.append('C');
      int int0 = 5;
      stringBuilder0.appendCodePoint(5);
      char[] charArray1 = new char[5];
      stringBuilder1.append((CharSequence) "");
      charArray1[0] = 'C';
      charArray1[1] = 'f';
      charArray1[2] = 'f';
      charArray1[0] = 'f';
      DBCatalog dBCatalog0 = new DBCatalog();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      Object object0 = new Object();
      constraintDescriptorList0.add(object0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Eelect intlh";
      stringArray0[1] = "create materialized view";
      stringArray0[2] = "XSRS6.S";
      String[] stringArray1 = new String[17];
      stringArray1[0] = "create materialized view";
      stringArray1[1] = "insertaltfr index";
      SQLUtil.innerJoin("insertaltfr index", stringArray0, "insertaltfr index", "Kb/j@ph\"@5hEKc", stringArray1);
      Random.setNextRandom((-1106));
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.3882990261413932
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[^JD`Wfr*,x,k";
      stringArray0[1] = "[^JD`Wfr*,x,k";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[^JD`Wfr*,x,k", false, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      String string0 = dBUniqueConstraint0.toString();
      assertEquals("CONSTRAINT [^JD`Wfr*,x,k UNIQUE ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k)", string0);
      
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("[^JD`Wfr*,x,k", false, dBUniqueConstraint0);
      String string1 = SQLUtil.normalize("[^JD`Wfr*,x,k", false);
      assertEquals("[ ^ JD ` Wfr *, x, k", string1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.2623477045221727
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[^JD`Wfr*,x,k";
      stringArray0[1] = "[^JD`Wfr*,x,k";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[^JD`Wfr*,x,k", false, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      String string0 = dBUniqueConstraint0.toString();
      assertEquals("CONSTRAINT [^JD`Wfr*,x,k UNIQUE ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k)", string0);
      
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("[^JD`Wfr*,x,k", false, dBUniqueConstraint0);
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("[^JD`Wfr*,x,k = '[^JD`Wfr*,x,k' AND [^JD`Wfr*,x,k = '[^JD`Wfr*,x,k'", string1);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("S'mo@=9#+n0bu|?e>#", (DBCatalog) null);
      DBPackage dBPackage0 = new DBPackage("", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("'tG 0j'DsFvkr<p,k+", dBPackage0);
      dBPackage0.setObjectType("S'mo@=9#+n0bu|?e>#");
      dBProcedure0.setSubProgramId("");
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      String string0 = SQLUtil.ownerDotComponent(compositeDBObject0);
      assertEquals("S'mo@=9#+n0bu|?e>#.", string0);
      
      String string1 = SQLUtil.renderValue(dBPackage0);
      Object object0 = new Object();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execfilename");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execfilename", defaultDBTable0, 9999999, "LbNcB$0tw%1w1:.6");
      defaultDBColumn0.getNotNullConstraint();
      String string2 = SQLUtil.substituteMarkers("", "LbNcB$0tw%1w1:.6", (Object) null);
      assertTrue(string2.equals((Object)string1));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Boolean boolean0 = new Boolean("altfr index");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-121);
      ValueLob valueLob0 = ValueLob.createSmallLob(641, byteArray0);
      Reader reader0 = valueLob0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(reader0);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-KC)<cF-2*bNE";
      stringArray0[1] = "-KC)<cF-2*bNE";
      stringArray0[2] = "-KC)<cF-2*bNE";
      stringArray0[3] = "-KC)<cF-2*bNE";
      stringArray0[4] = "rzzp`=fyutipjtk4";
      stringArray0[5] = "-KC)<cF-2*bNE";
      stringArray0[6] = "-KC)<cF-2*bNE";
      String string0 = SQLUtil.leftJoin("-KC)<cF-2*bNE", stringArray0, "*`'(Z", (String) null, stringArray0);
      assertEquals("left join *`'(Z as null on -KC)<cF-2*bNE.-KC)<cF-2*bNE = null.-KC)<cF-2*bNE and -KC)<cF-2*bNE.-KC)<cF-2*bNE = null.-KC)<cF-2*bNE and -KC)<cF-2*bNE.-KC)<cF-2*bNE = null.-KC)<cF-2*bNE and -KC)<cF-2*bNE.-KC)<cF-2*bNE = null.-KC)<cF-2*bNE and -KC)<cF-2*bNE.rzzp`=fyutipjtk4 = null.rzzp`=fyutipjtk4 and -KC)<cF-2*bNE.-KC)<cF-2*bNE = null.-KC)<cF-2*bNE and -KC)<cF-2*bNE.-KC)<cF-2*bNE = null.-KC)<cF-2*bNE", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " as ");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "insertcreate materializd viewalter if>ndx";
      stringArray0[1] = null;
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      stringArray0[2] = null;
      stringArray0[3] = null;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(588, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      TableContainer tableContainer0 = new TableContainer("cannot upd");
      tableContainer0.getTable("0vpV]");
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",", (DBTable) null, dBDataType0, integer0);
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer5 = RawTransaction.LOCK_ESCALATE;
      dBDataType0.isAlpha();
      Integer.min(265, 65);
      Integer integer6 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger((String) null, 65);
      String string0 = defaultDBColumn0.toString();
      assertEquals(", : (3)", string0);
      
      Integer integer7 = RawTransaction.COMMIT;
      Integer integer8 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer9 = new Integer(65);
      Integer.getInteger("cannot upd", 65);
      defaultDBColumn0.setFractionDigits(integer9);
      Random.setNextRandom((-1350));
      Character character0 = Character.valueOf('$');
      String string1 = SQLUtil.renderValue(character0);
      assertEquals("'$'", string1);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      stringReader0.read(charArray0);
      charArray0[2] = 'P';
      stringReader0.mark(41);
      charArray0[3] = 'n';
      stringReader0.read(charArray0, 0, 0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      String string1 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("Cannot update the ResultSet because it is either before the start or after the end of the results.");
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "se lect intotlh";
      StringBuilder stringBuilder0 = new StringBuilder(2000);
      String string1 = "- ";
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("- ", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.3458240980466787
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "setParameterMode";
      stringArray0[1] = "80000000-00d1-15f7-ab70-000a0a0b1500";
      stringArray0[2] = ".@`4Zw*a";
      stringArray0[3] = "shYJfl1";
      stringArray0[4] = "smw,#uPb.KGrq+!T'fT";
      stringArray0[5] = "procedure";
      stringArray0[6] = " DEFAULT ";
      stringArray0[7] = "5B@4%$";
      stringArray0[8] = "CACHED ";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("0h1U-^9Tx#<Y", defaultDBTable0, (DBDataType) null);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("m(.(NC J6n", defaultDBTable0, (DBDataType) null);
      int int0 = 4;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("7G|q>c_w<bu+V7C0", defaultDBTable0, 4, "0h1U-^9Tx#<Y");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      defaultDBColumn2.equals("m(.(NC J6n");
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.8688245196701632
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L";
      stringArray0[1] = "42X04";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "executealter if(ndex");
      stringArray0[2] = "<$";
      stringArray0[3] = "42X04";
      stringArray0[4] = "42X04";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".lwALtI_&Z^`bxf^,");
      String[] stringArray1 = new String[2];
      stringArray1[0] = null;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("execute", false, stringArray1[0], "execute");
      dBCheckConstraint0.setName("42X04");
      dBCheckConstraint0.setName("org.antlr.runtime.");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT org.antlr.runtime. CHECK execute", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "<=r?";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "<=r?");
      int int0 = (-3);
      StringBuilder stringBuilder1 = stringBuilder0.append((-3));
      String string1 = "create unique indexalter materialized view";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexalter materialized view");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<=r?";
      stringArray0[1] = "<=r?";
      DBSchema dBSchema0 = new DBSchema("-g$eP@e?DXbJGQ#~B<");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("create unique indexalter materialized view", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable1, stringArray0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-3), (Object) dBForeignKeyConstraint0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.0992975938210185
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[^JD`Wfr*,x,k";
      stringArray0[1] = "[^JD`Wfr*,x,k";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[^JD`Wfr*,x,k", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("[^JD`Wfr*,x,k", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("[^JD`Wfr*,x,k", true, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT [^JD`Wfr*,x,k FOREIGN KEY ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k) REFERENCES null([^JD`Wfr*,x,k, [^JD`Wfr*,x,k)", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "}Af*u|&g`AA%u{cSMk<";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 784;
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("}Af*u|&g`AA%u{cSMk<", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.449792752728442
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "tF|$YIcxz_L";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " keys:", true, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      dBUniqueConstraint0.toString();
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("tF|$YIcxz_L", true, dBUniqueConstraint0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.ownerDotComponent(dBUniqueIndex0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("tF|$YIcxz_L = 'tF|$YIcxz_L'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[1] = "42X04";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "executealter if(ndex");
      stringArray0[3] = "<$";
      stringArray0[4] = "42X04";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".lwALtI_&Z^`bxf^,");
      String[] stringArray1 = new String[2];
      stringArray1[0] = null;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("execute", false, stringArray1[0], "execute");
      Boolean boolean0 = new Boolean("42X04");
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageFactory genericLanguageFactory1 = new GenericLanguageFactory();
      GenericLanguageFactory genericLanguageFactory2 = new GenericLanguageFactory();
      GenericLanguageFactory genericLanguageFactory3 = new GenericLanguageFactory();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      String string0 = SQLUtil.ownerDotComponent(dBCheckConstraint0);
      assertEquals("execute", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("tX\"2}'>");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("tX\"2}'>", "tX\"2}'>", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("tX\"2}'>", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("tX\"2}'>", dBCatalog0);
      dBSchema0.getTable("Gb[wiu2");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Gb[wiu2";
      stringArray0[1] = "tX\"2}'>";
      stringArray0[2] = "tX\"2}'>";
      stringArray0[3] = "tX\"2}'>";
      stringArray0[4] = "Gb[wiu2";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("al/zr i(nex");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: al/zr i(nex
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      byte[] byteArray0 = new byte[0];
      ValueLob valueLob0 = ValueLob.createSmallLob(2799, byteArray0);
      valueLob0.getObject();
      ValueLob valueLob1 = ValueLob.createSmallLob((-442), byteArray0);
      Reader reader0 = valueLob1.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      valueLob0.toString();
      ValueLob.createSmallLob((-2125), byteArray0);
      ValueLob valueLob2 = ValueLob.createSmallLob(12, byteArray0);
      valueLob2.getInputStream();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(reader0);
      streamTokenizer0.wordChars(461, (-1438050312));
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("Cannot update the ResultSet because it is either before the start or after the end ofrthe results.");
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(588, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      TableContainer tableContainer0 = new TableContainer("cannot upd");
      tableContainer0.getTable("alter materialized viewprocidurep_cat");
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",", (DBTable) null, dBDataType0, integer0);
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer5 = RawTransaction.LOCK_ESCALATE;
      dBDataType0.isAlpha();
      Integer.min(265, 65);
      Integer integer6 = RawTransaction.LOCK_ESCALATE;
      Integer.getInteger((String) null, 65);
      defaultDBColumn0.toString();
      Integer integer7 = RawTransaction.COMMIT;
      Integer integer8 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer9 = new Integer(65);
      Integer.getInteger("cannot upd", 65);
      defaultDBColumn0.setFractionDigits(integer9);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.9448468679826323
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.reset();
      constantActionActivation0.setMaxRows((-3029));
      constantActionActivation0.setMaxRows((-3029));
      constantActionActivation0.getMaxRows();
      constantActionActivation0.clearParentResultSets();
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      constantActionActivation1.getContextManager();
      SQLUtil.isDDL("alter index");
      SQLUtil.isDDL("alter session1aavwz");
      Boolean.valueOf("alter session1aavwz");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-25);
      ValueLob.createSmallLob(13, byteArray0);
      Random.setNextRandom(837);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = '~';
      charArray0[2] = 'D';
      charArray0[3] = 'n';
      charArray0[4] = '#';
      stringReader0.read(charArray0, 0, 0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.sval = "N6NfOCCJMQp|OBw*u";
      streamTokenizer0.parseNumbers();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "N6NfOCCJMQp|OBw*u";
      stringArray0[1] = "";
      stringArray0[2] = "script.sql";
      stringArray0[3] = "N6NfOCCJMQp|OBw*u";
      stringArray0[4] = "create table";
      String string0 = SQLUtil.join("@;Zm'", (String) null, stringArray0, "N6NfOCCJMQp|OBw*u", "", stringArray0);
      assertEquals("@;Zm' join N6NfOCCJMQp|OBw*u as  on null.N6NfOCCJMQp|OBw*u = .N6NfOCCJMQp|OBw*u and null. = . and null.script.sql = .script.sql and null.N6NfOCCJMQp|OBw*u = .N6NfOCCJMQp|OBw*u and null.create table = .create table", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isDML("ACTIVE");
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.clearHeapConglomerateController();
      String string0 = "/*";
      // Undeclared exception!
      try { 
        constantActionActivation0.getParameterValueSet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "Cannot update the ResultSet because it is either before the start or after the end of the results.";
      SQLUtil.mutatesDataOrStructure("Cannot update the ResultSet because it is either before the start or after the end of the results.");
      int int0 = 2243;
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }
}
