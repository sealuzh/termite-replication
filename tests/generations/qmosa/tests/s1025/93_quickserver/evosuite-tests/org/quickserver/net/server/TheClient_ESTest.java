/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 13:14:57 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.xmlreader.QuickServerConfig;
import org.quickserver.util.xmlreader.ServerHooks;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.970620935502287
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      QuickServer quickServer0 = new QuickServer("", 60000);
      QuickServerConfig quickServerConfig0 = quickServer0.getConfig();
      ServerHooks serverHooks0 = quickServer0.getServerHooks();
      quickServer0.setServerHooks(serverHooks0);
      quickServer0.initService(quickServerConfig0);
      theClient0.setServer(quickServer0);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientData((ClientData) null);
      theClient0.toString();
      theClient0.getClientBinaryHandler();
      System.setCurrentTimeMillis(0L);
      theClient0.getServer();
      theClient0.getSocket();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocket();
      theClient0.getSocket();
      theClient0.getAuthenticator();
      theClient0.getSocket();
      theClient0.getAuthenticator();
      theClient0.getClientObjectHandler();
      String string0 = theClient0.toString();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8836095585126564
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      mockSocket0.bind((SocketAddress) null);
      theClient1.setSocket(mockSocket0);
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      TheClient theClient2 = new TheClient();
      theClient1.getClientBinaryHandler();
      theClient2.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientWriteHandler();
      theClient2.getMaxAuthTryMsg();
      theClient1.getClientCommandHandler();
      theClient0.getMaxAuthTryMsg();
      Data data0 = new Data();
      data0.setUsername((String) null);
      data0.setPassword((byte[]) null);
      theClient1.getSocket();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocket();
      System.setCurrentTimeMillis((byte)48);
      theClient1.getClientWriteHandler();
      assertTrue(theClient1.getCommunicationLogging());
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      mockSocket0.close();
      theClient0.setSocket(mockSocket0);
      theClient0.toString();
      SocketChannel socketChannel0 = SocketChannel.open();
      theClient0.setSocketChannel(socketChannel0);
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocket();
      Data data0 = new Data();
      theClient0.getSocketChannel();
      theClient0.getClientExtendedEventHandler();
      // Undeclared exception!
      try { 
        socketChannel0.shutdownOutput();
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.681095545078155
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)0;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      QuickServer quickServer0 = new QuickServer();
      quickServer0.setMaxAuthTry((byte) (-66));
      theClient0.setServer(quickServer0);
      theClient0.getClientObjectHandler();
      theClient0.getSocketChannel();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("setSecure", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      System.setCurrentTimeMillis((byte)126);
      theClient0.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.getServer();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getSocket();
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      theClient0.setServer(quickServer0);
      QuickServer quickServer1 = new QuickServer();
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0506636431758234
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      ClientEvent clientEvent0 = ClientEvent.READ;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setMaxAuthTryMsg("");
      CommandHandler commandHandler1 = (CommandHandler)theClient0.getClientCommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      commandHandler1.closingConnection(blockingClientHandler0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:38>", blockingClientHandler0.getName());
      
      theClient0.setClientCommandHandler(commandHandler1);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.getAuthenticator();
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientObjectHandler();
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      //  // Unstable assertion: assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("/object-pool/client-handler-object-pool/max-idle", 13);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Data data0 = new Data();
      TheClient theClient0 = new TheClient();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient0.getTimeout();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 0);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      theClient0.setSocket(mockSocket0);
      MockInetSocketAddress.createUnresolved("\"Xfl:MS=", 1);
      theClient0.setSocket(mockSocket0);
      theClient0.getSocketChannel();
      theClient0.getSocket();
      theClient0.setSocketChannel((SocketChannel) null);
      SocketChannel socketChannel0 = SocketChannel.open();
      assertFalse(socketChannel0.isConnected());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.192898685950695
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setTimeoutMsg("3>@v]gt978>");
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.getClientCommandHandler();
      theClient0.getClientEvent();
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.324122434965307
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.toString();
      theClient0.setMaxAuthTry((-2808));
      theClient0.setTimeout((-2808));
      theClient0.getClientEvent();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getServer();
      theClient0.getAuthenticator();
      theClient0.getMaxAuthTryMsg();
      theClient0.getMaxAuthTry();
      theClient0.getSocket();
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientWriteHandler();
      theClient0.getMaxAuthTry();
      theClient0.getSocketChannel();
      theClient0.getMaxAuthTry();
      theClient0.getClientObjectHandler();
      theClient0.toString();
      theClient0.getClientEvent();
      theClient0.getClientObjectHandler();
      theClient0.getServer();
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      assertEquals((-2808), theClient0.getTimeout());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.196939089991099
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient0.setSocket((Socket) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientData();
      theClient1.setClientData((ClientData) null);
      theClient0.getClientWriteHandler();
      theClient1.getMaxAuthTryMsg();
      theClient0.getClientCommandHandler();
      theClient1.getMaxAuthTryMsg();
      Data data0 = new Data();
      data0.setUsername((String) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)85;
      data0.setPassword(byteArray0);
      theClient1.setClientData(data0);
      theClient1.getClientData();
      theClient1.getSocket();
      theClient0.getClientObjectHandler();
      theClient1.getAuthenticator();
      theClient1.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("MSq ^&cvs<K`");
      theClient0.getMaxAuthTryMsg();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "     -fullXML2File <file_name>\tDumps the Full XML configuration of the QuickServer loaded.\n");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "     -fullXML2File <file_name>\tDumps the Full XML configuration of the QuickServer loaded.\n");
      String string0 = theClient0.toString();
      assertFalse(theClient0.getTrusted());
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.196939089991099
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("x] zpBMD?{H2H,QK");
      theClient0.getClientBinaryHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:35>", nonBlockingClientHandler0.getName());
      
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setMaxConnectionMsg("74{NY8%Y");
      theClient0.getClientObjectHandler();
      theClient0.getMaxConnectionMsg();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.getClientObjectHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient1.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient1.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getClientCommandHandler();
      theClient0.getAuthenticator();
      theClient0.getClientExtendedEventHandler();
      //  // Unstable assertion: assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientObjectHandler();
      theClient0.getClientAuthenticationHandler();
      MockInetAddress.anyLocalAddress();
      MockSocket mockSocket0 = new MockSocket();
      Data data0 = new Data();
      Data data1 = new Data();
      Data data2 = new Data();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)0;
      data2.setPassword(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte)1, (byte)0, (byte)91, (byte)91, (byte) (-8), (byte)91, (byte)0}, byteArray0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout((byte)48);
      int int0 = theClient0.getTimeout();
      assertEquals(48, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.setMaxConnectionMsg("");
      theClient0.getMaxConnectionMsg();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<y1E`(H");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "     -fullXML2File <file_name>\tDumps the Full XML configuration of the QuickServer loaded.\n");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.261950424367441
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("x] [zpBMD?6H2H,QK");
      theClient0.getClientBinaryHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      commandHandler0.closingConnection(nonBlockingClientHandler0);
      theClient0.setMaxConnectionMsg("74{NY8%Y");
      theClient0.setTimeout(0);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      ClientEvent clientEvent0 = ClientEvent.READ;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setTimeout(0);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      TheClient theClient1 = new TheClient();
      theClient1.setClientAuthenticationHandler(authenticator0);
      theClient1.setClientEventHandler(commandHandler0);
      theClient1.setMaxAuthTry(202);
      theClient0.setMaxConnectionMsg((String) null);
      theClient1.getMaxAuthTry();
      theClient1.getClientWriteHandler();
      theClient1.getClientExtendedEventHandler();
      theClient1.getClientBinaryHandler();
      assertEquals(202, theClient1.getMaxAuthTry());
      
      theClient0.getClientWriteHandler();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      TheClient theClient0 = new TheClient();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      assertTrue(theClient0.getCommunicationLogging());
      
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      theClient0.setCommunicationLogging(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.122928297357194
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("");
      theClient0.getMaxAuthTryMsg();
      theClient0.getSocketChannel();
      theClient0.getServer();
      theClient0.setTrusted(false);
      theClient0.getMaxAuthTry();
      theClient0.getClientBinaryHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.toString();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setTimeoutMsg("");
      theClient0.getTimeoutMsg();
      theClient0.getSocketChannel();
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[9];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)125;
      int int0 = (-1634);
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, (int) (byte) (-52), (-1634));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout((-49));
      int int0 = theClient0.getTimeout();
      assertEquals((-49), int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1279462185041473
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("x] [zpBMD?6H2H,QK");
      theClient0.getClientBinaryHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      commandHandler0.closingConnection(nonBlockingClientHandler0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:11>", nonBlockingClientHandler0.getName());
      
      theClient0.setMaxConnectionMsg("74{NY8%Y");
      theClient0.setTimeout(0);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      ClientEvent clientEvent0 = ClientEvent.READ;
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientEvent(clientEvent0);
      theClient0.setTimeout(0);
      TheClient theClient1 = new TheClient();
      theClient1.setClientEventHandler(commandHandler0);
      theClient0.setMaxConnectionMsg((String) null);
      theClient1.getMaxAuthTry();
      theClient1.getClientWriteHandler();
      theClient1.getClientExtendedEventHandler();
      theClient1.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      //  // Unstable assertion: assertEquals(0, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("{}");
      theClient0.getTimeoutMsg();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      Object object0 = new Object();
      org.quickserver.net.qsadmin.Authenticator authenticator1 = new org.quickserver.net.qsadmin.Authenticator();
      // Undeclared exception!
      try { 
        authenticator1.askAuthentication((ClientHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.qsadmin.Authenticator", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getTimeoutMsg();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      int int0 = 125;
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket((String) null, (byte)56, inetAddress0, 125);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@5dfce53a
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(true);
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler0.closingConnection(nonBlockingClientHandler0);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler((-2285));
      commandHandler0.lostConnection(blockingClientHandler0);
      assertEquals("<ClientHandler-Pool#-2285-ID:1>", blockingClientHandler0.getName());
      
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getTrusted();
      theClient0.getAuthenticator();
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      Data data0 = new Data();
      theClient0.getClientEventHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      TheClient theClient0 = new TheClient();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      boolean boolean0 = theClient0.getTrusted();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(boolean0);
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      TheClient theClient0 = new TheClient();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      assertFalse(theClient0.getTrusted());
  }
}
