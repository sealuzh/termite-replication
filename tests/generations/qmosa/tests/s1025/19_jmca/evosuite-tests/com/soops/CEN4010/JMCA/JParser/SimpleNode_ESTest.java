/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 14:42:50 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vS%H50f ahA.f}");
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.identifiers = null;
      // Undeclared exception!
      try { 
        simpleNode0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.7842842883183225
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(1404);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h*&R90Eh(T");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.ensureCapacity((-3377));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      simpleNode0.id = 18;
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      predicate3.or(predicate2);
      predicate1.negate();
      Predicate<Object> predicate4 = predicate2.and(predicate1);
      predicate1.negate();
      predicate1.and(predicate3);
      predicate2.or(predicate4);
      predicate0.negate();
      CharBuffer.allocate(18);
      arrayList0.add("~");
      simpleNode0.setIdentifier(")");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("h*&R90Eh(T", stringWriter1);
      assertEquals("<VariableDeclaratorId>\n  <identifier>~</identifier>\n</VariableDeclaratorId>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(1404);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h*&R90Eh(T");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h*&R90Eh(T");
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.ensureCapacity((-3377));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      simpleNode0.id = 18;
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h*&R90Eh(T");
      arrayList0.add("&R%$zcfmGmBs/C&");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sWk1Q\"[3orKW");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wRn}m`{+x");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"for\"");
      simpleNode0.dump("InstanceOfExpression", stringWriter0);
      assertEquals("<VariableDeclaratorId>\n  <identifier>&R%$zcfmGmBs/C&</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(1404);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("2");
      arrayList0.ensureCapacity(18);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      simpleNode0.id = 18;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<identifier>Literal Value</identifier>\n");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<identifier>Literal Value</identifier>\n");
      arrayList0.add("<identifier>Literal Value</identifier>\n");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<identifier>Literal Value</identifier>\n");
      simpleNode0.dump("<identifier>Literal Value</identifier>\n", stringWriter0);
      assertEquals("<VariableDeclaratorId>\n  <identifier>2</identifier>\n  <identifier><identifier>Literal Value</identifier>\n</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(">");
      arrayList0.add("}");
      StringWriter stringWriter0 = new StringWriter();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, (InputStream) null);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, (InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream((InputStream) null);
      bufferedInputStream0.skip(0);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream((InputStream) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) null);
      pipedInputStream0.close();
      pushbackInputStream1.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(pipedInputStream0, pushbackInputStream1);
      simpleNode0.dump("Q_C=>P3xI+", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>*gt</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5402095130751898
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-46160863));
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.jjtSetParent(simpleNode0);
      simpleNode0.dump("MSI=E", stringWriter0);
      simpleNode0.jjtGetParent();
      simpleNode0.dump("*UDb>MD6^00Nh@5", stringWriter0);
      simpleNode0.jjtGetParent();
      Node node0 = simpleNode0.jjtGetParent();
      assertEquals(0, node0.jjtGetNumChildren());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5985152433458726
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-554));
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(">>");
      simpleNode0.id = 47;
      StringWriter stringWriter0 = new StringWriter();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate4.and(predicate0);
      predicate5.test("<OETTER>");
      predicate5.test(predicate3);
      Predicate<Object> predicate6 = predicate0.and(predicate2);
      predicate4.and(predicate6);
      Predicate<Object> predicate7 = predicate0.and(predicate0);
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate1.and(predicate0);
      predicate9.negate();
      predicate4.and(predicate0);
      predicate4.and(predicate9);
      predicate2.and(predicate1);
      predicate1.or(predicate4);
      predicate5.and(predicate7);
      predicate1.and(predicate4);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate11 = predicate10.and(predicate0);
      Predicate<Object> predicate12 = predicate10.or(predicate8);
      predicate12.negate();
      arrayList0.removeIf(predicate11);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      simpleNode0.dump(";", stringWriter0);
      assertEquals("<InstanceOfExpression>\n  <identifier>*rshft</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(1426);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-7GTTI@U<");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-7GTTI@U<");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-7GTTI@U<");
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("-7GTTI@U<");
      arrayList0.add("-7GTTI@U<");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-7GTTI@U<");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      simpleNode0.id = 37;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-7GTTI@U<");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      arrayList0.add(">=");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("Uv,nS,}(NG");
      simpleNode0.dump("Initializer", stringWriter0);
      assertEquals("<NameList>\n  <identifier>-7GTTI@U<</identifier>\n  <identifier>-7GTTI@U<</identifier>\n  <identifier>*ge</identifier>\n</NameList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(1426);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-7GTTI@U<");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-7GTTI@U<");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-7GTTI@U<");
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("-7GTTI@U<");
      arrayList0.add("-7GTTI@U<");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-7GTTI@U<");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      simpleNode0.id = 37;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-7GTTI@U<");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      arrayList0.add(">=");
      StringWriter stringWriter1 = new StringWriter(1426);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("Uv,nS,}(NG");
      simpleNode0.dump("Initializer", stringWriter0);
      assertEquals("<NameList>\n  <identifier>-7GTTI@U<</identifier>\n  <identifier>-7GTTI@U<</identifier>\n  <identifier>*ge</identifier>\n</NameList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(40);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(";");
      arrayList0.add("`'mpz!c%4M");
      StringWriter stringWriter0 = new StringWriter();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, bufferedInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, (InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream((InputStream) null);
      bufferedInputStream1.skip(0L);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream((InputStream) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(bufferedInputStream2);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, bufferedInputStream0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "W@1lEg8nK!KcMVmJs");
      simpleNode0.dump("W@1lEg8nK!KcMVmJs", stringWriter0);
      assertSame(stringWriter0, stringWriter1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("  <identifier>");
      arrayList0.add("s");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.or(predicate0);
      arrayList0.removeIf(predicate0);
      arrayList0.add("<<");
      Predicate<Object> predicate2 = Predicate.isEqual((Object) "  <identifier>");
      predicate2.or(predicate1);
      arrayList0.removeIf(predicate2);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.dump("Fc", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>s</identifier>\n  <identifier>*lshft</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("#<");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) simpleNode0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate0.and(predicate1);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      predicate3.or(predicate0);
      Predicate<Object> predicate7 = predicate3.or(predicate1);
      arrayList0.removeIf(predicate7);
      arrayList0.add("<=");
      Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate8 = predicate2.and(predicate3);
      predicate8.or(predicate4);
      Object object0 = new Object();
      predicate2.test(predicate6);
      arrayList0.removeIf(predicate3);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("&&", stringWriter1);
      assertEquals("<CompilationUnit>\n  <identifier>#<</identifier>\n  <identifier>*le</identifier>\n</CompilationUnit>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6134788277392043
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(">");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(0);
      StringWriter stringWriter3 = new StringWriter(1);
      arrayList0.add("*rshft");
      stringWriter3.write("Qqgl}aBj-hzaV&s':S");
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = 'L';
      charArray0[3] = '{';
      charArray0[4] = '{';
      charArray0[5] = '{';
      charArray0[6] = '{';
      stringWriter2.write(charArray0);
      arrayList0.add("&");
      stringWriter2.write((-1994155754));
      stringWriter1.getBuffer();
      stringWriter2.append((CharSequence) "Qqgl}aBj-hzaV&s':S");
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = stringWriter3.append((CharSequence) "C");
      simpleNode0.dump("*rshft", stringWriter5);
      simpleNode0.dump("}", stringWriter2);
      assertEquals("{{L{{{{\u9916Qqgl}aBj-hzaV&s':S<CompilationUnit>\n  <identifier>*gt</identifier>\n  <identifier>*rshft</identifier>\n  <identifier>*amp</identifier>\n</CompilationUnit>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.5985152433458726
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("<");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) simpleNode0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate2.and(predicate1);
      Predicate<Object> predicate5 = predicate0.and(predicate1);
      Predicate<Object> predicate6 = predicate0.negate();
      predicate3.and(predicate2);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate6);
      Predicate<Object> predicate8 = predicate7.or(predicate5);
      Predicate<Object> predicate9 = predicate8.and(predicate5);
      Predicate<Object> predicate10 = predicate1.and(predicate9);
      Predicate<Object> predicate11 = predicate1.or(predicate10);
      Predicate<Object> predicate12 = predicate5.or(predicate9);
      predicate4.and(predicate11);
      predicate11.and(predicate0);
      Predicate<Object> predicate13 = predicate0.or(predicate6);
      Predicate.isEqual((Object) predicate12);
      Predicate<Object> predicate14 = predicate12.negate();
      predicate11.and(predicate6);
      Predicate<Object> predicate15 = predicate13.negate();
      Predicate<Object> predicate16 = predicate8.or(predicate6);
      predicate16.negate();
      predicate4.and(predicate16);
      Predicate<Object> predicate17 = predicate10.and(predicate7);
      Predicate<Object> predicate18 = predicate4.or(predicate10);
      Predicate<Object> predicate19 = predicate18.negate();
      predicate17.or(predicate19);
      Predicate<Object> predicate20 = predicate4.negate();
      predicate20.and(predicate5);
      predicate17.and(predicate20);
      predicate3.and(predicate15);
      predicate14.negate();
      arrayList0.removeIf(predicate0);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("$sYaZ<%@yW&pi'VSgIj", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>*lt</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6587677962462284
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(59);
      Node node0 = simpleNode0.parent;
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = null;
      SystemInUtil.addInputLine("}g5U]*T~>[x");
      nodeArray0[2] = null;
      simpleNode0.toString("z*C`f}U@W)zr|_uxr");
      simpleNode0.children = nodeArray0;
      simpleNode0.parent = null;
      simpleNode0.toString();
      simpleNode0.jjtGetNumChildren();
      String string0 = "Expression";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "PrimaryExpression");
      stringWriter1.flush();
      simpleNode0.dump(string0, stringWriter1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("j");
      arrayList0.add("Pm\"F~ug-e]R_@");
      arrayList0.add("&&");
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      Object object1 = new Object();
      Predicate.isEqual(object1);
      arrayList0.removeIf(predicate4);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<String> arrayList2 = simpleNode0.identifiers;
      arrayList2.add("j");
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.dump("goto", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>j</identifier>\n  <identifier>Pm\"F~ug-e]R_@</identifier>\n  <identifier>*amp</identifier>\n  <identifier>j</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(">");
      arrayList0.add("{");
      StringWriter stringWriter0 = new StringWriter();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, (InputStream) null);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, (InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream((InputStream) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(pipedInputStream0, pushbackInputStream1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{");
      simpleNode0.dump(">", stringWriter1);
      assertEquals("{<CompilationUnit>\n  <identifier>*gt</identifier>\n</CompilationUnit>\n", stringWriter1.toString());
      assertEquals("{<CompilationUnit>\n  <identifier>*gt</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.684078211771424
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-549));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h*&RJMy0E(tT");
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("h*&RJMy0E(tT");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h*&RJMy0E(tT");
      arrayList0.add("Fc");
      simpleNode0.id = 47;
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      arrayList0.add("C");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter1 = new StringWriter();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer1);
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      arrayList0.forEach(consumer2);
      String string0 = ")M}'Fjo:3C;QyBn')+";
      simpleNode0.dump(string0, stringWriter0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5350813079469847
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(1404);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h*&RM0E(T");
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.ensureCapacity((-3377));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      simpleNode0.id = 18;
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      predicate0.or(predicate1);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate2.or(predicate1);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h*&RM0E(T");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&R%$zcfmGmBs/C&");
      SimpleNode simpleNode1 = new SimpleNode((-3377));
      simpleNode0.dump("||", stringWriter0);
      simpleNode1.dump("&Elquvvhf", stringWriter0);
      simpleNode1.jjtAddChild(simpleNode0, 18);
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild(1404);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1404
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6145591551764051
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(1404);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-7GTTI@sU<");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-7GTTI@sU<");
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("-7GTTI@sU<");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-7GTTI@sU<");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      arrayList0.add((String) null);
      simpleNode0.id = 37;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-7GTTI@sU<");
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-7GTTI@sU<");
      arrayList0.add(">");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-7GTTI@sU<");
      // Undeclared exception!
      try { 
        simpleNode0.dump("oc$T,<n", stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("!");
      arrayList0.add(">");
      StringReader stringReader0 = new StringReader(">");
      stringReader0.skip(1L);
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.chars();
      stringReader0.read(charBuffer0);
      StringReader stringReader1 = new StringReader(">");
      stringReader1.markSupported();
      stringReader1.close();
      Node node0 = simpleNode0.parent;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(1426);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-7GTTI@U<");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-7GTTI@U<");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-7GTTI@U<");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-7GTTI@U<");
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("-7GTTI@U<");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-7GTTI@U<");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-7GTTI@U<");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-7GTTI@U<");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*ge");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WTB");
      // Undeclared exception!
      try { 
        simpleNode0.dump("-7GTTI@U<", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[0] = (Node) simpleNode0;
      Node node0 = simpleNode0.parent;
      nodeArray0[2] = null;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetChild(1);
      simpleNode0.jjtAddChild(node0, 6);
      assertEquals(7, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.7046360973492382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter();
      Node[] nodeArray0 = new Node[1];
      simpleNode0.children = nodeArray0;
      StringWriter stringWriter1 = new StringWriter(0);
      StringWriter stringWriter2 = new StringWriter(0);
      StringWriter stringWriter3 = new StringWriter(0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      stringWriter3.write(charArray0);
      StringWriter stringWriter4 = new StringWriter(38);
      stringWriter1.getBuffer();
      StringWriter stringWriter5 = stringWriter3.append((CharSequence) null);
      StringWriter stringWriter6 = stringWriter1.append('m');
      stringWriter5.append((CharSequence) null);
      simpleNode0.dump("}", stringWriter6);
      assertEquals("m<CompilationUnit></CompilationUnit>\n", stringWriter6.toString());
      assertEquals("m<CompilationUnit></CompilationUnit>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[0] = (Node) simpleNode0;
      Node node0 = simpleNode0.parent;
      nodeArray0[2] = null;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetChild(1);
      simpleNode0.jjtAddChild((Node) null, 931);
      assertEquals(932, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) simpleNode0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate2 = predicate1.negate();
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate2.and(predicate1);
      Predicate<Object> predicate5 = predicate0.and(predicate1);
      Predicate<Object> predicate6 = predicate0.negate();
      predicate3.and(predicate2);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate6);
      Predicate<Object> predicate8 = predicate7.or(predicate5);
      Predicate<Object> predicate9 = predicate8.and(predicate5);
      Predicate<Object> predicate10 = predicate1.and(predicate9);
      Predicate<Object> predicate11 = predicate1.or(predicate10);
      Predicate<Object> predicate12 = predicate5.or(predicate9);
      predicate4.and(predicate11);
      predicate11.and(predicate0);
      Object object0 = new Object();
      Predicate<Object> predicate13 = predicate0.or(predicate6);
      Predicate.isEqual((Object) predicate12);
      Predicate<Object> predicate14 = predicate12.negate();
      predicate11.and(predicate6);
      Predicate<Object> predicate15 = predicate13.negate();
      Predicate<Object> predicate16 = predicate3.negate();
      predicate16.negate();
      predicate4.and(predicate16);
      Predicate<Object> predicate17 = predicate10.and(predicate7);
      Predicate<Object> predicate18 = predicate3.negate();
      predicate18.and(predicate5);
      predicate17.and(predicate18);
      predicate3.and(predicate15);
      predicate14.negate();
      arrayList0.removeIf(predicate0);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("$sYaZ<%@yW&pi'VSgIj", stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringReader stringReader0 = new StringReader(">");
      stringReader0.skip(1L);
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.chars();
      StringReader stringReader1 = new StringReader(">");
      stringReader1.close();
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, ',');
      simpleNode0.jjtAddChild((Node) null, 45);
      assertEquals(46, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter();
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      StringWriter stringWriter1 = new StringWriter(0);
      StringWriter stringWriter2 = new StringWriter(0);
      StringWriter stringWriter3 = new StringWriter(0);
      char[] charArray0 = new char[1];
      stringWriter3.write(charArray0);
      StringWriter stringWriter4 = new StringWriter(38);
      stringWriter1.getBuffer();
      StringWriter stringWriter5 = stringWriter3.append((CharSequence) null);
      stringWriter5.append((CharSequence) null);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-684));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -684
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h*&RM0E(T");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h*&RM0E(T");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h*&RM0E(T");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&R%$zcfmGmBs/C&");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d[+x>*k//^d4B$6(R");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V%R5_^8]is");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SimpleNode simpleNode0 = new SimpleNode((-851));
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -851
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-46160863));
      StringWriter stringWriter0 = new StringWriter();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, (InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      bufferedInputStream0.skip(0L);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(pushbackInputStream0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(bufferedInputStream1, bufferedInputStream1);
      // Undeclared exception!
      try { 
        simpleNode0.toString("+m4,Rj8u(Tb9XO");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -46160863
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.392317092923577
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-531));
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(">");
      simpleNode0.id = (-531);
      simpleNode0.identifiers = arrayList0;
      simpleNode0.jjtGetParent();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.jjtClose();
      simpleNode0.id = 88;
      StringWriter stringWriter1 = stringWriter0.append('$');
      StringWriter stringWriter2 = stringWriter1.append('\\');
      stringWriter2.append((CharSequence) ">");
      simpleNode0.toString(">");
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) ">ContinueStatement : >");
      StringWriter stringWriter4 = new StringWriter();
      simpleNode0.dump(";", stringWriter2);
      simpleNode0.dump("}", stringWriter3);
      assertEquals("$\\>>ContinueStatement : ><ContinueStatement>\n  <identifier>*gt</identifier>\n</ContinueStatement>\n<ContinueStatement>\n  <identifier>*gt</identifier>\n</ContinueStatement>\n", stringWriter3.toString());
      assertEquals("$\\>>ContinueStatement : ><ContinueStatement>\n  <identifier>*gt</identifier>\n</ContinueStatement>\n<ContinueStatement>\n  <identifier>*gt</identifier>\n</ContinueStatement>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Integer integer0 = new Integer(2650);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, pushbackInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, pushbackInputStream1);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1);
      bufferedInputStream1.available();
      bufferedInputStream2.skip(0);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(dataInputStream0, bufferedInputStream1);
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(pushbackInputStream0);
      bufferedInputStream3.available();
      bufferedInputStream0.skip((-1879L));
      BufferedInputStream bufferedInputStream4 = new BufferedInputStream(bufferedInputStream1);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(bufferedInputStream2);
      pipedInputStream1.close();
      pushbackInputStream0.close();
      pushbackInputStream2.read();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(bufferedInputStream0, sequenceInputStream2);
      pushbackInputStream2.close();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      JavaParser javaParser0 = new JavaParser("nj.60IP _6Tz=[;%Twv");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SimpleNode simpleNode0 = new SimpleNode((-870));
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(1404);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h*&RM0E(T");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h*&RM0E(T");
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      arrayList0.ensureCapacity((-3377));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      simpleNode0.id = 18;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h*&RM0E(T");
      arrayList0.add("&R%$zcfmGmBs/C&");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d[+x>*k//^d4B$6(R");
      arrayList0.add("*lshft");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&R%$zcfmGmBs/C&");
      CharBuffer.wrap((CharSequence) "h*&RM0E(T");
      arrayList0.add("&R%$zcfmGmBs/C&");
      String string0 = simpleNode0.toString();
      assertEquals("VariableDeclaratorId : &R%$zcfmGmBs/C& : *lshft : &R%$zcfmGmBs/C&", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) simpleNode0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate2.and(predicate1);
      Predicate<Object> predicate5 = predicate0.and(predicate1);
      Predicate<Object> predicate6 = predicate0.negate();
      predicate5.negate();
      Predicate<Object> predicate7 = predicate3.and(predicate2);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate6);
      Predicate<Object> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate9.and(predicate5);
      Predicate<Object> predicate11 = predicate1.and(predicate10);
      Predicate<Object> predicate12 = predicate5.or(predicate10);
      predicate4.and(predicate3);
      predicate8.and(predicate0);
      Predicate<Object> predicate13 = predicate0.or(predicate6);
      predicate8.and(predicate0);
      Predicate.isEqual((Object) predicate12);
      predicate12.negate();
      predicate0.and(predicate6);
      predicate13.negate();
      Predicate<Object> predicate14 = predicate9.or(predicate6);
      predicate14.negate();
      predicate4.and(predicate14);
      predicate11.and(predicate8);
      predicate0.or(predicate8);
      predicate0.negate();
      CharBuffer.allocate(0);
      arrayList0.add("~");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("VE/`Ve~aPaaaenz", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>~</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "^OR<]Amx1mEt\\rO*G";
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'D';
      charArray0[2] = 'b';
      charArray0[3] = 'c';
      charArray0[4] = ';';
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "^OR<]Amx1mEt\rO*G");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      predicate1.negate();
      Predicate<Object> predicate5 = predicate2.and(predicate3);
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate6.or(predicate5);
      Predicate<Object> predicate8 = predicate7.and(predicate4);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate2);
      predicate9.and(predicate2);
      predicate8.negate();
      predicate2.negate();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.removeIf(predicate1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      int int0 = (-1909054220);
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, (-1909054220));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      int int0 = (-2359);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-2359));
      simpleNode0.jjtOpen();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)70;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)70;
      byteArray1[2] = (byte)70;
      byteArray1[3] = (byte)70;
      byteArray1[4] = (byte)84;
      byteArray1[5] = (byte)70;
      byteArray1[6] = (byte)70;
      byteArray1[7] = (byte)70;
      byteArray1[8] = (byte)70;
      try { 
        sequenceInputStream0.read(byteArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, (InputStream) null);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, (InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream((InputStream) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) null);
      pipedInputStream0.close();
      pushbackInputStream1.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(pipedInputStream0, pushbackInputStream1);
      JavaParser javaParser0 = new JavaParser("}");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1106101594));
      SimpleNode simpleNode1 = (SimpleNode)javaParser0.currNode;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (-1106101594));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.562200162369491
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wf$0m<jJ6.P\r^");
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'D';
      charArray0[2] = 'b';
      charArray0[3] = 'c';
      charArray0[4] = ';';
      charArray0[5] = '`';
      charArray0[6] = '5';
      charArray0[7] = '&';
      char[] charArray1 = new char[0];
      stringReader0.read(charArray1);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      javaParser0.NameList();
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pushbackInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream1, bufferedInputStream1);
      sequenceInputStream1.skip((-1756L));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(bufferedInputStream1);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, dataInputStream0);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(sequenceInputStream0);
      bufferedInputStream0.available();
      bufferedInputStream1.skip((-1L));
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(pipedInputStream0, bufferedInputStream0);
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(bufferedInputStream2);
      bufferedInputStream0.available();
      bufferedInputStream3.skip(0);
      BufferedInputStream bufferedInputStream4 = new BufferedInputStream(pushbackInputStream1);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(sequenceInputStream1);
      pipedInputStream0.close();
      pushbackInputStream0.close();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(bufferedInputStream3, pipedInputStream0);
      pushbackInputStream0.close();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream2.markSupported();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(bufferedInputStream2, pipedInputStream2);
      JavaParser javaParser0 = new JavaParser("}");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-491));
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(349);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }
}
