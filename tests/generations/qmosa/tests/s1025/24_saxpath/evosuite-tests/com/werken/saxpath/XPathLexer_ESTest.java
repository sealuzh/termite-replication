/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 15:20:19 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1618379443468991
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.consume((-3746));
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer1.or();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7641258791655279
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifier();
      xPathLexer0.not();
      xPathLexer0.literal();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.plus();
      xPathLexer0.comma();
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7548830087436689
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.notEquals();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.identifier();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token10 = xPathLexer1.leftParen();
      assertEquals(1, token10.getTokenType());
      
      xPathLexer1.identifier();
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0642556362686086
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      XPathLexer xPathLexer1 = new XPathLexer(">+B56;0Aqv)LVd7=5");
      Token token0 = xPathLexer1.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer1.nextToken();
      Token token1 = xPathLexer0.slashes();
      assertEquals("X", token1.getTokenText());
      
      Token token2 = xPathLexer1.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("B", token2.getTokenText());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("^PU\r3dM>My", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer1.and();
      xPathLexer1.doubleColon();
      xPathLexer0.leftParen();
      xPathLexer1.nextToken();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("PU", token4.getTokenText());
      
      xPathLexer1.operatorName();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer1.minus();
      assertEquals("0", token7.getTokenText());
      assertEquals(6, token7.getTokenType());
      
      xPathLexer0.div();
      Token token8 = xPathLexer0.nextToken();
      assertEquals(30, token8.getTokenType());
      assertEquals("3", token8.getTokenText());
      
      xPathLexer1.pipe();
      Token token9 = xPathLexer1.pipe();
      assertEquals("q", token9.getTokenText());
      assertEquals(17, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token10 = xPathLexer1.star();
      assertEquals("v", token10.getTokenText());
      assertEquals(20, token10.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token11 = xPathLexer2.notEquals();
      assertEquals(22, token11.getTokenType());
      
      xPathLexer2.colon();
      Token token12 = xPathLexer0.dollar();
      assertEquals(26, token12.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      Token token13 = xPathLexer3.colon();
      assertEquals(18, token13.getTokenType());
      assertEquals("[", token13.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token14 = xPathLexer0.leftParen();
      assertEquals("M", token14.getTokenText());
      
      Token token15 = xPathLexer2.leftParen();
      assertEquals(1, token15.getTokenType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.158142751829036
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("X", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.plus();
      assertEquals("\r", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.identifier();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(">", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("My", token4.getTokenText());
      
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("X^PU\r3dM>My");
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer1.and();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer1.dollar();
      assertEquals("X", token6.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.colon();
      xPathLexer0.at();
      xPathLexer1.or();
      Token token7 = xPathLexer1.at();
      assertEquals("^", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("g_/`= QyZIp.");
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer2.leftParen();
      assertEquals("g", token10.getTokenText());
      assertEquals(1, token10.getTokenType());
      
      Token token11 = xPathLexer1.dots();
      assertEquals(13, token11.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.034073247852246
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@qE<JF?[P7<*.W8;.");
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.star();
      xPathLexer2.and();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.leftParen();
      xPathLexer2.nextToken();
      xPathLexer2.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer2.at();
      xPathLexer1.slashes();
      xPathLexer1.minus();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      xPathLexer2.relationalOperator();
      xPathLexer0.star();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.notEquals();
      xPathLexer2.colon();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.dollar();
      XPathLexer xPathLexer6 = new XPathLexer("@qE<JF?[P7<*.W8;.");
      XPathLexer xPathLexer7 = new XPathLexer("}Hb#AIN],F&");
      Token token0 = xPathLexer3.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.058151984955367
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("om", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(".", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer2.at();
      XPathLexer xPathLexer3 = new XPathLexer("<9t<EsIT`p{<=zIp[|;");
      Token token4 = xPathLexer1.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("com.werken.saxpath.XPathLexer", token4.getTokenText());
      
      Token token5 = xPathLexer2.notEquals();
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer3.nextToken();
      assertEquals(7, token6.getTokenType());
      assertEquals("<", token6.getTokenText());
      
      Token token7 = xPathLexer1.slashes();
      assertEquals(11, token7.getTokenType());
      
      xPathLexer2.pipe();
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      assertEquals("w", token8.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.star();
      assertEquals("e", token9.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token10 = xPathLexer3.leftBracket();
      assertEquals(3, token10.getTokenType());
      assertEquals("9", token10.getTokenText());
      
      xPathLexer0.or();
      Token token11 = xPathLexer2.at();
      assertEquals(16, token11.getTokenType());
      
      xPathLexer2.identifierOrOperatorName();
      Token token12 = xPathLexer5.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer0.plus();
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer1.star();
      assertEquals(20, token14.getTokenType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9571866835315883
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b5f{&c56a*uA sx`U");
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("&c", token0.getTokenText());
      
      xPathLexer0.colon();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("6", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("e:LCEresh");
      Token token2 = xPathLexer1.not();
      assertEquals("e", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      xPathLexer1.mod();
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer1.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals(":", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals("a", token4.getTokenText());
      
      Token token5 = xPathLexer0.colon();
      assertEquals("*", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.at();
      Token token6 = xPathLexer1.at();
      assertEquals("L", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("b5f{&c56a*uA sx`U");
      Token token7 = xPathLexer2.identifierOrOperatorName();
      assertNotNull(token7);
      
      XPathLexer xPathLexer3 = new XPathLexer("b5f{&c56a*uA sx`U");
      Token token8 = xPathLexer3.identifier();
      assertEquals(15, token8.getTokenType());
      assertEquals("b5f", token8.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("X&Q,y:reB?");
      Token token9 = xPathLexer4.whitespace();
      assertEquals((-2), token9.getTokenType());
      
      Token token10 = xPathLexer1.equals();
      assertEquals(21, token10.getTokenType());
      assertEquals("C", token10.getTokenText());
      
      Token token11 = xPathLexer4.plus();
      assertEquals("&", token11.getTokenText());
      assertEquals(5, token11.getTokenType());
      
      Token token12 = xPathLexer3.number();
      assertEquals(30, token12.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0142483438259635
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4n#]RcK)}j_6 ");
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer0.div();
      xPathLexer0.colon();
      xPathLexer0.minus();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.setXPath("4n#]RcK)}j_6 ");
      xPathLexer0.dots();
      xPathLexer0.or();
      xPathLexer0.literal();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4922238132276187
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer(">+B56;0Aqv)LVd7=5");
      xPathLexer1.whitespace();
      xPathLexer1.nextToken();
      xPathLexer1.plus();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer0.colon();
      String string0 = "g_/`= QyZIp.";
      XPathLexer xPathLexer2 = new XPathLexer("X^PU\r3dM>My");
      xPathLexer1.not();
      xPathLexer1.consume((-48));
      // Undeclared exception!
      try { 
        xPathLexer1.mod();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8869148461641796
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.consume(1442);
      xPathLexer0.plus();
      xPathLexer0.setXPath("qUF<)=wn]ay/Qam+");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer("l+aZ5PU#U0+");
      XPathLexer xPathLexer3 = new XPathLexer("E2Au");
      xPathLexer2.doubleColon();
      xPathLexer0.number();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.dollar();
      xPathLexer2.slashes();
      xPathLexer3.leftParen();
      xPathLexer3.nextToken();
      xPathLexer3.equals();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.rightParen();
      xPathLexer0.number();
      xPathLexer0.star();
      xPathLexer3.div();
      xPathLexer2.at();
      xPathLexer5.notEquals();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer6.minus();
      xPathLexer1.literal();
      xPathLexer2.number();
      xPathLexer2.star();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.047347295597058
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#;VMumC#8.");
      xPathLexer0.dots();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.comma();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("V", token1.getTokenText());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("M", token2.getTokenText());
      
      token0.toString();
      xPathLexer0.setXPath("#;VMumC#8.");
      xPathLexer0.leftParen();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(";", token3.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (32) (;)", string0);
      
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("#", token4.getTokenText());
      
      Token token5 = xPathLexer0.minus();
      assertEquals("8", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      xPathLexer0.rightBracket();
      int int0 = xPathLexer0.endPosition();
      assertEquals(10, int0);
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      xPathLexer0.mod();
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
      
      xPathLexer0.not();
      Token token11 = xPathLexer0.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      Token token12 = xPathLexer0.not();
      assertEquals(23, token12.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3540152605413993
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.dots();
      xPathLexer0.consume((-1950));
      XPathLexer xPathLexer1 = new XPathLexer("5 g]Ti<k|?RL0Ws|");
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6893324534452088
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("g_/`= QyZIp.");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      Token token1 = xPathLexer1.doubleColon();
      assertEquals("g_", token1.getTokenText());
      
      Token token2 = xPathLexer1.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer2.and();
      xPathLexer2.at();
      XPathLexer xPathLexer3 = new XPathLexer("4(_");
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token4 = xPathLexer3.number();
      assertEquals("4", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer1.star();
      assertEquals(20, token5.getTokenType());
      assertEquals("=", token5.getTokenText());
      
      Token token6 = xPathLexer3.equals();
      assertEquals("(", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer1.at();
      assertEquals(" ", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      xPathLexer0.notEquals();
      Token token8 = xPathLexer2.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer3.and();
      XPathLexer xPathLexer4 = new XPathLexer("");
      XPathLexer xPathLexer5 = new XPathLexer("@V0XT'j");
      Token token9 = xPathLexer5.notEquals();
      assertEquals(22, token9.getTokenType());
      assertEquals("@V", token9.getTokenText());
      
      Token token10 = xPathLexer3.dots();
      assertEquals("_", token10.getTokenText());
      assertEquals(13, token10.getTokenType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7128845562208435
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("X", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("^", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.equals();
      assertEquals("U", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals("\r", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals("3dM", token5.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(17, token2.getTokenType());
      assertEquals("P", token2.getTokenText());
      
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8531158677972224
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b5f{&c56a*uA sx`U");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.plus();
      assertEquals("{", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("&c56a*uA sx`U", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("&", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("c5", token4.getTokenText());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      assertEquals("6", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("g_/`= QyZIp.");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer1.mod();
      xPathLexer0.and();
      xPathLexer1.or();
      xPathLexer2.relationalOperator();
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      assertEquals("a", token7.getTokenText());
      
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer2.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer2.equals();
      assertEquals(21, token10.getTokenType());
      
      xPathLexer2.nextToken();
      Token token11 = xPathLexer2.doubleColon();
      assertEquals(19, token11.getTokenType());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.123051357452852
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("X", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(">+B56;0Aqv)LVd7=5");
      Token token1 = xPathLexer1.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer1.plus();
      assertEquals("B", token3.getTokenText());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("^PU\r3dM>My", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals("^", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token6 = xPathLexer0.colon();
      assertEquals("\r", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("3", token7.getTokenText());
      
      xPathLexer2.mod();
      xPathLexer2.and();
      xPathLexer2.or();
      xPathLexer1.relationalOperator();
      Token token8 = xPathLexer1.identifier();
      assertEquals(15, token8.getTokenType());
      assertEquals("56", token8.getTokenText());
      
      Token token9 = xPathLexer2.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer0.at();
      assertEquals("d", token10.getTokenText());
      assertEquals(16, token10.getTokenType());
      
      xPathLexer0.nextToken();
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(19, token11.getTokenType());
      assertEquals("M>", token11.getTokenText());
      
      char char0 = xPathLexer0.LA(105);
      assertEquals('\uFFFF', char0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1197850008378034
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.notEquals();
      xPathLexer0.consume((-1526));
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0760330235377107
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("X", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer(">+B56;0Aqv)LVd7=5");
      xPathLexer1.star();
      xPathLexer1.whitespace();
      Token token1 = xPathLexer1.nextToken();
      assertEquals("B56", token1.getTokenText());
      
      Token token2 = xPathLexer1.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals(";", token2.getTokenText());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("^P", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals("U", token5.getTokenText());
      
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("X^PU\r3dM>My");
      Token token6 = xPathLexer1.not();
      assertEquals("A", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      xPathLexer1.mod();
      xPathLexer2.and();
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer1.leftParen();
      assertEquals("q", token7.getTokenText());
      assertEquals(1, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      assertEquals("d", token9.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.number();
      XPathLexer xPathLexer4 = new XPathLexer("bD0wAL:7|e~d\"&h");
      Token token10 = xPathLexer4.star();
      assertEquals(20, token10.getTokenType());
      assertEquals("b", token10.getTokenText());
      
      Token token11 = xPathLexer3.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer3.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer3.colon();
      assertEquals(18, token13.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("X^PU\r3dM>My");
      Token token14 = xPathLexer5.identifierOrOperatorName();
      assertEquals(15, token14.getTokenType());
      
      Token token15 = xPathLexer3.whitespace();
      assertEquals((-2), token15.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6193545556217377
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals(19, token1.getTokenType());
      
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.056933985194322
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("X", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(">+B56;0Aqv)LVd7=5");
      xPathLexer1.whitespace();
      xPathLexer1.nextToken();
      xPathLexer1.plus();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("^PU\r3dM>My", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("^P", token2.getTokenText());
      
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = new XPathLexer("X^PU\r3dM>My");
      Token token3 = xPathLexer1.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("5", token3.getTokenText());
      
      xPathLexer1.mod();
      xPathLexer2.and();
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer2.dollar();
      assertEquals("X", token4.getTokenText());
      
      Token token5 = xPathLexer1.identifier();
      assertEquals("6", token5.getTokenText());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("\r", token6.getTokenText());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals("3d", token7.getTokenText());
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer2.at();
      assertEquals(16, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("g_/`= QyZIp.");
      Token token9 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      
      xPathLexer1.or();
      Token token10 = xPathLexer0.whitespace();
      assertEquals((-2), token10.getTokenType());
      
      xPathLexer0.equals();
      Token token11 = xPathLexer1.plus();
      assertEquals(";", token11.getTokenText());
      assertEquals(5, token11.getTokenType());
      
      Token token12 = xPathLexer2.leftParen();
      assertEquals("P", token12.getTokenText());
      
      Token token13 = xPathLexer1.equals();
      assertEquals("0", token13.getTokenText());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2222315419039678
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer1.mod();
      xPathLexer0.and();
      Token token3 = xPathLexer1.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("g_", token3.getTokenText());
      
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("/", token4.getTokenText());
      
      xPathLexer0.identifier();
      char char0 = xPathLexer0.LA(60);
      assertEquals('\uFFFF', char0);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("`", token5.getTokenText());
      
      Token token6 = xPathLexer1.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals(21, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token8 = xPathLexer1.equals();
      assertEquals(" ", token8.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token9 = xPathLexer1.colon();
      assertEquals("Q", token9.getTokenText());
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer1.at();
      assertEquals("y", token10.getTokenText());
      
      Token token11 = xPathLexer2.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer1.identifierOrOperatorName();
      assertEquals("ZIp.", token12.getTokenText());
      assertEquals(15, token12.getTokenType());
      
      xPathLexer1.or();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token13 = xPathLexer4.whitespace();
      assertEquals((-2), token13.getTokenType());
      
      xPathLexer3.equals();
      Token token14 = xPathLexer0.plus();
      assertEquals(5, token14.getTokenType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0968456978453207
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Rp+$fJ");
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("Rp+$fJ");
      xPathLexer1.relationalOperator();
      xPathLexer1.number();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer("Rp+$fJ");
      xPathLexer2.whitespace();
      xPathLexer0.leftParen();
      xPathLexer2.nextToken();
      xPathLexer1.relationalOperator();
      xPathLexer1.number();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer2.colon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.dollar();
      Token token0 = xPathLexer3.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.137555136521786
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.consume(1442);
      xPathLexer0.div();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.setXPath("qUF<)=wn]ay/Qam+");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer1.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("l+aZ5PU#U0+");
      XPathLexer xPathLexer3 = new XPathLexer("E2Au");
      Token token4 = xPathLexer3.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("E2", token4.getTokenText());
      
      xPathLexer0.number();
      Token token5 = xPathLexer0.rightParen();
      assertEquals("q", token5.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer4.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer2.slashes();
      assertEquals("l", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer3.leftParen();
      assertEquals("A", token8.getTokenText());
      
      Token token9 = xPathLexer3.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("u", token9.getTokenText());
      
      Token token10 = xPathLexer3.equals();
      assertEquals(21, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.relationalOperator();
      xPathLexer0.number();
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
      
      xPathLexer3.div();
      Token token12 = xPathLexer2.at();
      assertEquals("", token12.getTokenText());
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer5.notEquals();
      assertEquals(22, token13.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token14 = xPathLexer0.colon();
      assertEquals(18, token14.getTokenType());
      
      Token token15 = xPathLexer6.minus();
      assertEquals(6, token15.getTokenType());
      
      Token token16 = xPathLexer1.literal();
      assertNull(token16);
      
      Token token17 = xPathLexer2.number();
      assertEquals(30, token17.getTokenType());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.0368652017994893
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (22) (co)");
      xPathLexer1.star();
      xPathLexer1.and();
      xPathLexer0.doubleColon();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer("[ (22) (co)");
      xPathLexer2.identifier();
      xPathLexer0.doubleColon();
      xPathLexer2.operatorName();
      xPathLexer0.at();
      xPathLexer2.slashes();
      xPathLexer1.nextToken();
      xPathLexer2.pipe();
      xPathLexer1.dots();
      XPathLexer xPathLexer3 = new XPathLexer("[ (22) (co)");
      xPathLexer3.relationalOperator();
      xPathLexer3.equals();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.at();
      xPathLexer3.notEquals();
      Token token1 = xPathLexer1.or();
      assertNull(token1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1505105451750257
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Rp+$fJ");
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("Rp+$fJ");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer1.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("R", token1.getTokenText());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer1.at();
      assertEquals("p", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals("f", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer1.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals(26, token5.getTokenType());
      assertEquals("$", token5.getTokenText());
      
      Token token6 = xPathLexer1.pipe();
      assertEquals("f", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("No~<%K8Ly%sKN93");
      Token token7 = xPathLexer1.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer2.dots();
      assertEquals(13, token8.getTokenType());
      assertEquals("N", token8.getTokenText());
      
      Token token9 = xPathLexer2.whitespace();
      assertEquals((-2), token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("No~<%K8Ly%sKN93");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer0.nextToken();
      assertEquals(15, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer6.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token13.getTokenType());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0492318694341476
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.at();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7898720251657871
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.slashes();
      assertEquals(11, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("BRZnj574>");
      xPathLexer2.and();
      Token token2 = xPathLexer2.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer2.leftBracket();
      assertEquals(">", token3.getTokenText());
      
      xPathLexer1.doubleColon();
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("pz7)$p");
      xPathLexer2.and();
      xPathLexer1.doubleColon();
      Token token5 = xPathLexer3.leftBracket();
      assertEquals(3, token5.getTokenType());
      assertEquals("p", token5.getTokenText());
      
      Token token6 = xPathLexer1.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.at();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token7 = xPathLexer1.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      xPathLexer2.nextToken();
      Token token8 = xPathLexer0.pipe();
      assertEquals(">", token8.getTokenText());
      
      Token token9 = xPathLexer4.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer0.star();
      assertEquals("}", token10.getTokenText());
      assertEquals(20, token10.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer("=$G[Tlu0/N)egB");
      Token token11 = xPathLexer5.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer1.notEquals();
      assertEquals(22, token12.getTokenType());
      
      xPathLexer3.colon();
      Token token13 = xPathLexer5.colon();
      assertEquals(18, token13.getTokenType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.16779756840341
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.not();
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("m", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer1.nextToken();
      assertEquals("com.werken.saxpath.XPathLexer", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer1.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(13, token5.getTokenType());
      assertEquals(".", token5.getTokenText());
      
      xPathLexer1.at();
      Token token6 = xPathLexer0.slashes();
      assertEquals("w", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer1.minus();
      assertEquals(6, token7.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("No~<%K8Ly%sKN93");
      Token token8 = xPathLexer2.pipe();
      assertEquals(17, token8.getTokenType());
      assertEquals("N", token8.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.equals();
      Token token9 = xPathLexer0.at();
      assertEquals("r", token9.getTokenText());
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer3.not();
      assertEquals(23, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer2.notEquals();
      assertEquals("o~", token11.getTokenText());
      
      Token token12 = xPathLexer1.colon();
      assertEquals(18, token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("No~<%K8Ly%sKN93");
      Token token13 = xPathLexer1.notEquals();
      assertEquals(22, token13.getTokenType());
      
      xPathLexer3.dots();
      Token token14 = xPathLexer2.leftParen();
      assertEquals("<", token14.getTokenText());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.03925550217185
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z,KAHG");
      Token token0 = xPathLexer0.not();
      assertEquals("z", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.slashes();
      xPathLexer0.leftBracket();
      xPathLexer1.or();
      Token token1 = xPathLexer1.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer("z,KAHG");
      xPathLexer1.mod();
      Token token2 = xPathLexer2.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("z", token2.getTokenText());
      
      Token token3 = xPathLexer1.minus();
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.pipe();
      XPathLexer xPathLexer4 = new XPathLexer("z,KAHG");
      Token token4 = xPathLexer4.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      xPathLexer4.relationalOperator();
      Token token6 = xPathLexer1.star();
      assertEquals(20, token6.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token7 = xPathLexer4.equals();
      assertEquals(",", token7.getTokenText());
      
      Token token8 = xPathLexer5.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer4.nextToken();
      assertEquals("KAHG", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer4.notEquals();
      xPathLexer1.colon();
      XPathLexer xPathLexer7 = new XPathLexer("com.werken.saxpath.Token");
      Token token11 = xPathLexer3.equals();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer3.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer5.dots();
      assertEquals(13, token13.getTokenType());
      
      Token token14 = xPathLexer2.leftParen();
      assertEquals(",", token14.getTokenText());
      assertEquals(1, token14.getTokenType());
      
      Token token15 = xPathLexer2.leftBracket();
      assertEquals("K", token15.getTokenText());
      assertEquals(3, token15.getTokenType());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8969473928203942
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (22) (co)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (22) (co)");
      xPathLexer1.star();
      xPathLexer1.and();
      xPathLexer0.doubleColon();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer("[ (22) (co)");
      xPathLexer2.identifier();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("we", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      xPathLexer2.operatorName();
      xPathLexer0.at();
      Token token2 = xPathLexer2.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("[", token2.getTokenText());
      
      xPathLexer0.minus();
      xPathLexer2.div();
      Token token3 = xPathLexer1.nextToken();
      assertEquals(1, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("e", token4.getTokenText());
      
      Token token5 = xPathLexer1.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals("2", token5.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("n.saxpath.XPathLexer", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer1.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("2", token7.getTokenText());
      
      xPathLexer0.notEquals();
      xPathLexer0.or();
      Token token8 = xPathLexer1.minus();
      assertEquals(6, token8.getTokenType());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0713875828785997
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("[bq}_xsD3OO-\"by:O");
      xPathLexer0.div();
      Token token0 = xPathLexer0.plus();
      assertEquals("", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.setXPath("j|vDuS<sDU7%");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer1.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("l+aZ5PU#U0+");
      XPathLexer xPathLexer3 = new XPathLexer("j|vDuS<sDU7%");
      Token token3 = xPathLexer3.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("j|", token3.getTokenText());
      
      xPathLexer0.number();
      Token token4 = xPathLexer3.rightParen();
      assertEquals("v", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals("|", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer1.equals();
      assertEquals(21, token8.getTokenType());
      
      xPathLexer2.relationalOperator();
      Token token9 = xPathLexer2.number();
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer1.star();
      assertEquals(20, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer4.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer3.notEquals();
      assertEquals("Du", token12.getTokenText());
      assertEquals(22, token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token13 = xPathLexer1.colon();
      assertEquals(18, token13.getTokenType());
      
      Token token14 = xPathLexer0.literal();
      assertEquals("uS<s", token14.getTokenText());
      assertEquals(27, token14.getTokenType());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.037175739113356
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z,KAHG");
      Token token0 = xPathLexer0.colon();
      assertEquals("z", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(",", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token3 = xPathLexer0.plus();
      assertEquals("H", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("z,KAHG");
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      Token token7 = xPathLexer1.not();
      assertEquals("z", token7.getTokenText());
      
      xPathLexer2.mod();
      xPathLexer1.and();
      XPathLexer xPathLexer3 = new XPathLexer("z,KAHG");
      xPathLexer3.or();
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer2.identifier();
      assertEquals("com.werken.saxpath.Token", token8.getTokenText());
      
      Token token9 = xPathLexer2.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer1.nextToken();
      assertEquals(",", token11.getTokenText());
      
      Token token12 = xPathLexer3.doubleColon();
      assertEquals(19, token12.getTokenType());
      assertEquals("z,", token12.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token13 = xPathLexer4.nextToken();
      assertEquals((-1), token13.getTokenType());
      
      Token token14 = xPathLexer4.rightBracket();
      assertEquals(4, token14.getTokenType());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.77574821390426
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("5 g]Ti<k|?RL0Ws|");
      xPathLexer0.and();
      xPathLexer1.doubleColon();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer1.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.at();
      XPathLexer xPathLexer2 = new XPathLexer(" p=Jp?5?g9Q(5n>h");
      Token token5 = xPathLexer1.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("Ti", token5.getTokenText());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("<", token6.getTokenText());
      assertEquals(7, token6.getTokenType());
      
      Token token7 = xPathLexer2.pipe();
      assertEquals(" ", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer3.pipe();
      assertEquals(17, token8.getTokenType());
      
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer2.star();
      assertEquals("p", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer(" p=Jp?5?g9Q(5n>h");
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      
      xPathLexer5.notEquals();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.colon();
      XPathLexer xPathLexer8 = new XPathLexer("");
      Token token11 = xPathLexer8.colon();
      assertEquals(18, token11.getTokenType());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.521762280011892
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer("2^^mSz{gl");
      xPathLexer1.number();
      xPathLexer0.doubleColon();
      xPathLexer1.plus();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer1.leftBracket();
      xPathLexer1.doubleColon();
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer("2^^mSz{gl");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.and();
      xPathLexer0.doubleColon();
      xPathLexer2.doubleColon();
      xPathLexer2.leftBracket();
      xPathLexer2.doubleColon();
      xPathLexer0.rightBracket();
      String string0 = "com.werken.saxpath.Token";
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.Token");
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1050060925372915
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("^", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(2, token0.getTokenType());
      assertEquals("X", token0.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("P", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.equals();
      assertEquals("U", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals("\r", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals("3", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      char char0 = xPathLexer0.LA(93);
      assertEquals('\uFFFF', char0);
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.number();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("M>My", token7.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token8 = xPathLexer1.equals();
      assertEquals(21, token8.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token9 = xPathLexer1.number();
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer0.star();
      assertEquals("M", token10.getTokenText());
      assertEquals(20, token10.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("X^PU\r3dM>My");
      Token token11 = xPathLexer2.notEquals();
      assertEquals("X^", token11.getTokenText());
      assertEquals(22, token11.getTokenType());
      
      xPathLexer2.or();
      Token token12 = xPathLexer0.minus();
      assertEquals(6, token12.getTokenType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.0245432989862673
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer1.nextToken();
      xPathLexer0.rightParen();
      xPathLexer1.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer1.slashes();
      xPathLexer0.minus();
      xPathLexer1.nextToken();
      xPathLexer0.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      xPathLexer2.pipe();
      xPathLexer2.relationalOperator();
      xPathLexer2.star();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer2.notEquals();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.colon();
      Token token1 = xPathLexer2.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.044733710325417
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.setXPath("[q_xsD3OO-\"by}:O");
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("[q", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals("_", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("x", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      xPathLexer1.at();
      xPathLexer1.slashes();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("s", token6.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("No~<%K8Ly%sKN93");
      Token token7 = xPathLexer2.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("N", token7.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      assertEquals("3", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.at();
      Token token9 = xPathLexer2.notEquals();
      assertEquals(22, token9.getTokenType());
      assertEquals("o~", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer4.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer0.at();
      assertEquals("O", token11.getTokenText());
      assertEquals(16, token11.getTokenType());
      
      xPathLexer4.colon();
      Token token12 = xPathLexer1.leftParen();
      assertEquals(1, token12.getTokenType());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.642658712552768
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (22) (co)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.number();
      xPathLexer0.or();
      Token token1 = xPathLexer0.not();
      assertEquals("m", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("r", token2.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.dots();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(14, token4.getTokenType());
      assertEquals("n.", token4.getTokenText());
      
      xPathLexer0.number();
      Token token5 = xPathLexer0.dots();
      assertEquals("s", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.leftBracket();
      assertEquals("a", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals("xp", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      assertEquals("", token8.getTokenText());
      
      Token token9 = xPathLexer0.star();
      assertEquals("a", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token10 = xPathLexer1.colon();
      assertEquals(18, token10.getTokenType());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.113994296068289
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (22) (co)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.number();
      xPathLexer0.or();
      Token token1 = xPathLexer0.not();
      assertEquals("m", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.dots();
      Token token3 = xPathLexer0.pipe();
      assertEquals("e", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(14, token4.getTokenType());
      assertEquals("n.", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.dots();
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("a", token6.getTokenText());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals("xp", token7.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      assertEquals("a", token8.getTokenText());
      
      xPathLexer0.endPosition();
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      assertEquals("t", token9.getTokenText());
      
      Token token10 = xPathLexer0.literal();
      assertEquals(27, token10.getTokenType());
      assertEquals(".XPat", token10.getTokenText());
      assertNotNull(token10);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.988331093778688
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.star();
      xPathLexer0.and();
      xPathLexer2.doubleColon();
      xPathLexer0.leftParen();
      xPathLexer1.nextToken();
      xPathLexer1.doubleColon();
      xPathLexer2.operatorName();
      xPathLexer0.at();
      xPathLexer2.slashes();
      xPathLexer0.minus();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer1.pipe();
      xPathLexer1.relationalOperator();
      xPathLexer0.star();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer2.notEquals();
      xPathLexer2.colon();
      xPathLexer1.dollar();
      XPathLexer xPathLexer4 = new XPathLexer("X^PU\r3dM>My");
      xPathLexer0.colon();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token1 = xPathLexer5.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1256017700328256
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("l+aZ5PU#U0+");
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("l", token1.getTokenText());
      
      xPathLexer1.setXPath("9HUhozA-t1l}os");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer1.nextToken();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token4 = xPathLexer3.leftParen();
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer2.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer3.dots();
      assertEquals(13, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.setXPath("");
      xPathLexer2.relationalOperator();
      Token token7 = xPathLexer1.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("H", token7.getTokenText());
      
      Token token8 = xPathLexer1.rightParen();
      assertEquals("U", token8.getTokenText());
      assertEquals(2, token8.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token9 = xPathLexer1.nextToken();
      assertEquals("hozA-t1l}os", token9.getTokenText());
      
      Token token10 = xPathLexer4.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer1.notEquals();
      assertEquals("ho", token11.getTokenText());
      assertEquals(22, token11.getTokenType());
      
      xPathLexer4.or();
      Token token12 = xPathLexer2.minus();
      assertEquals(6, token12.getTokenType());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.196137468179611
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("[bq}_xsD3OO-\"by:O");
      xPathLexer0.not();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.mod();
      xPathLexer1.and();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.rightBracket();
      xPathLexer2.comma();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer1.div();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer1.pipe();
      xPathLexer2.dots();
      xPathLexer3.relationalOperator();
      xPathLexer0.equals();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.or();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.notEquals();
      Token token0 = xPathLexer7.and();
      assertNull(token0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.2595094392725215
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("O8*Tb");
      Token token1 = xPathLexer0.not();
      assertEquals("O", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("*", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("Tb", token4.getTokenText());
      
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer1.mod();
      xPathLexer0.doubleColon();
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      xPathLexer0.identifier();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      xPathLexer1.operatorName();
      Token token8 = xPathLexer0.minus();
      assertEquals(6, token8.getTokenType());
      
      xPathLexer1.div();
      xPathLexer0.operatorName();
      xPathLexer1.nextToken();
      xPathLexer0.pipe();
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("g_/`= QyZIp.");
      Token token10 = xPathLexer2.dots();
      assertEquals("g", token10.getTokenText());
      
      Token token11 = xPathLexer1.equals();
      assertEquals(21, token11.getTokenType());
      assertEquals("/", token11.getTokenText());
      
      xPathLexer2.leftParen();
      xPathLexer0.dots();
      Token token12 = xPathLexer2.leftParen();
      assertEquals("/", token12.getTokenText());
      assertEquals(1, token12.getTokenType());
      
      Token token13 = xPathLexer0.dots();
      assertEquals(13, token13.getTokenType());
      
      Token token14 = xPathLexer2.whitespace();
      assertEquals((-2), token14.getTokenType());
      
      xPathLexer2.and();
      Token token15 = xPathLexer2.colon();
      assertEquals("=", token15.getTokenText());
      
      xPathLexer2.relationalOperator();
      xPathLexer1.operatorName();
      Token token16 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token16.getTokenType());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0007910597952807
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("X", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("P", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("U", token3.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("\r3", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("rW%o3^");
      Token token5 = xPathLexer1.leftParen();
      assertEquals(1, token5.getTokenType());
      assertEquals("r", token5.getTokenText());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals("d", token7.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer1.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer1.star();
      assertEquals(20, token9.getTokenType());
      assertEquals("%", token9.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token10 = xPathLexer2.at();
      assertEquals(16, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.colon();
      Token token11 = xPathLexer3.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer3.slashes();
      assertEquals(11, token12.getTokenType());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8829323753946432
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.pipe();
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      xPathLexer0.plus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.pipe();
      xPathLexer0.relationalOperator();
      xPathLexer1.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.equals();
      xPathLexer0.at();
      xPathLexer2.not();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.notEquals();
      xPathLexer2.colon();
      XPathLexer xPathLexer4 = new XPathLexer("");
      String string0 = null;
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2124765320290973
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Dnj*(Av-eZ.");
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      assertEquals("Dnj", token0.getTokenText());
      
      xPathLexer0.setXPath("{G.7v< =cjf(!Y");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.nextToken();
      Token token2 = xPathLexer1.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("{G", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(".", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      xPathLexer1.setXPath("com.werken.saxpath.XPathLexer");
      Token token5 = xPathLexer2.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer2.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
      assertEquals("c", token7.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token8 = xPathLexer0.number();
      assertEquals("7", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertNotSame(token9, token1);
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token10 = xPathLexer1.slashes();
      assertEquals(11, token10.getTokenType());
      assertEquals("o", token10.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer5 = new XPathLexer("{G.7v< =cjf(!Y");
      xPathLexer2.div();
      XPathLexer xPathLexer6 = new XPathLexer("pJEo!_u");
      Token token11 = xPathLexer6.plus();
      assertEquals("p", token11.getTokenText());
      assertEquals(5, token11.getTokenType());
      
      Token token12 = xPathLexer2.number();
      assertEquals(30, token12.getTokenType());
      
      Token token13 = xPathLexer2.doubleColon();
      assertEquals(19, token13.getTokenType());
      
      xPathLexer2.getPreviousToken();
      Token token14 = xPathLexer3.not();
      assertEquals(23, token14.getTokenType());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6085114030876002
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("7");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.dots();
      xPathLexer2.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-3144));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      xPathLexer0.equals();
      xPathLexer0.consume((-136));
      xPathLexer0.rightBracket();
      xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        xPathLexer0.relationalOperator();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.9377157988929514
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z,KAHG");
      Token token0 = xPathLexer0.colon();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("z,KAHG");
      xPathLexer1.and();
      xPathLexer0.doubleColon();
      xPathLexer0.doubleColon();
      xPathLexer1.leftBracket();
      xPathLexer1.doubleColon();
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      xPathLexer1.star();
      xPathLexer0.equals();
      xPathLexer0.at();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer2.notEquals();
      Token token1 = xPathLexer0.identifier();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.2500740052710126
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.pipe();
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      xPathLexer0.slashes();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.relationalOperator();
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.1772651012083815
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      xPathLexer0.colon();
      Token token0 = xPathLexer0.number();
      assertEquals("", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.plus();
      assertEquals("{", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      xPathLexer1.and();
      xPathLexer0.nextToken();
      xPathLexer1.leftBracket();
      xPathLexer1.doubleColon();
      Token token2 = xPathLexer0.dots();
      assertEquals("@", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      xPathLexer2.and();
      xPathLexer0.doubleColon();
      xPathLexer0.doubleColon();
      Token token3 = xPathLexer2.leftBracket();
      assertEquals(".", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer1.doubleColon();
      assertEquals("{L", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer2.comma();
      assertEquals(32, token5.getTokenType());
      assertEquals(">", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("}&K?Il");
      Token token6 = xPathLexer1.nextToken();
      assertEquals("rm", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.nextToken();
      Token token7 = xPathLexer0.pipe();
      assertEquals("g", token7.getTokenText());
      
      Token token8 = xPathLexer3.pipe();
      assertEquals("}", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token9 = xPathLexer1.star();
      assertEquals(20, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer(") (");
      Token token10 = xPathLexer3.at();
      assertEquals("&", token10.getTokenText());
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer2.notEquals();
      assertEquals("}{", token11.getTokenText());
      assertEquals(22, token11.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer(") (");
      xPathLexer6.colon();
      Token token12 = xPathLexer5.colon();
      assertEquals(")", token12.getTokenText());
      assertEquals(18, token12.getTokenType());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.413142027497684
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.slashes();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      xPathLexer0.or();
      xPathLexer1.doubleColon();
      xPathLexer0.dots();
      XPathLexer xPathLexer2 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer1.operatorName();
      xPathLexer1.mod();
      xPathLexer1.colon();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer3.and();
      xPathLexer2.doubleColon();
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer3.doubleColon();
      assertEquals("co", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      xPathLexer2.operatorName();
      xPathLexer2.and();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("{", token4.getTokenText());
      
      xPathLexer3.operatorName();
      Token token5 = xPathLexer0.notEquals();
      assertEquals("Lr", token5.getTokenText());
      
      xPathLexer0.colon();
      XPathLexer xPathLexer4 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      Token token6 = xPathLexer4.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals(".>", token6.getTokenText());
      
      Token token7 = xPathLexer4.dots();
      assertEquals(13, token7.getTokenType());
      assertEquals("}", token7.getTokenText());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals("@", token8.getTokenText());
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer3.colon();
      assertEquals("m", token9.getTokenText());
      assertEquals(18, token9.getTokenType());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.112520718191709
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("l+aZ5PU#U0+");
      Token token1 = xPathLexer1.plus();
      assertEquals("l", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer1.setXPath("9HUhozA-t1l}os");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer1.nextToken();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token4 = xPathLexer2.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer3.dots();
      assertEquals(13, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.setXPath("");
      Token token6 = xPathLexer1.equals();
      assertEquals(21, token6.getTokenType());
      assertEquals("H", token6.getTokenText());
      
      Token token7 = xPathLexer1.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("U", token7.getTokenText());
      
      Token token8 = xPathLexer1.rightParen();
      assertEquals("h", token8.getTokenText());
      
      xPathLexer1.relationalOperator();
      xPathLexer4.number();
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer4.slashes();
      assertEquals(11, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      XPathLexer xPathLexer6 = new XPathLexer("%");
      xPathLexer6.div();
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token11 = xPathLexer7.number();
      assertEquals(30, token11.getTokenType());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.793146797879361
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("l+aZ5PU#U0+");
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("l", token1.getTokenText());
      
      xPathLexer1.setXPath("9HUhozA-t1l}os");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer1.nextToken();
      assertEquals("9", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.leftParen();
      Token token4 = xPathLexer2.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer3.dots();
      xPathLexer0.setXPath("");
      xPathLexer2.pipe();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer2.dots();
      assertEquals(13, token6.getTokenType());
      
      xPathLexer3.relationalOperator();
      Token token7 = xPathLexer3.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer4.at();
      assertEquals(16, token9.getTokenType());
      
      xPathLexer2.notEquals();
      xPathLexer2.or();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token10 = xPathLexer5.minus();
      assertEquals(6, token10.getTokenType());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.1040802023551857
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vh5qoF|cf(\"s%C0vv");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("v", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("h", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.comma();
      assertEquals("|", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("1");
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("cf", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("P+u2&=w{{`XnkG");
      xPathLexer0.number();
      xPathLexer1.rightParen();
      xPathLexer0.whitespace();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.whitespace();
      Token token5 = xPathLexer3.leftParen();
      assertEquals(1, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals("%", token7.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer2.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      assertEquals("C", token9.getTokenText());
      
      Token token10 = xPathLexer3.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer2.notEquals();
      assertEquals("P+", token11.getTokenText());
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer1.colon();
      assertEquals(18, token12.getTokenType());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.215880693855736
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.and();
      xPathLexer1.rightBracket();
      xPathLexer0.leftParen();
      xPathLexer1.nextToken();
      xPathLexer1.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer1.leftParen();
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer1.and();
      xPathLexer1.pipe();
      xPathLexer1.rightParen();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer("X^PU\r3dM>My");
      xPathLexer0.star();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.notEquals();
      xPathLexer1.colon();
      xPathLexer1.not();
      XPathLexer xPathLexer4 = new XPathLexer("NMFg?&;P.k");
      Token token0 = xPathLexer2.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.016636123867925
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      Token token0 = xPathLexer0.not();
      assertEquals("o", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.nextToken();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("m.werken.saxpath.XPathLexer", token1.getTokenText());
      
      xPathLexer1.at();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer1.minus();
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("No~<%K8Ly%sKN93");
      Token token4 = xPathLexer2.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.equals();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer3.not();
      assertEquals(23, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer2.notEquals();
      assertEquals("o~", token8.getTokenText());
      
      xPathLexer1.colon();
      XPathLexer xPathLexer5 = new XPathLexer("No~<%K8Ly%sKN93");
      Token token9 = xPathLexer5.equals();
      assertEquals(21, token9.getTokenType());
      assertEquals("N", token9.getTokenText());
      
      Token token10 = xPathLexer1.notEquals();
      assertEquals(22, token10.getTokenType());
      
      xPathLexer3.dots();
      Token token11 = xPathLexer2.leftParen();
      assertEquals("<", token11.getTokenText());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.146128321206562
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o.werken.saxpathfXPathLexer");
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("o", token0.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.not();
      Token token1 = xPathLexer0.dollar();
      assertEquals("w", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("o.werken.saxpathfXPathLexer");
      xPathLexer1.nextToken();
      Token token2 = xPathLexer1.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("erken.saxpathfXPathLexer", token3.getTokenText());
      
      xPathLexer1.at();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer1.minus();
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("No~<%K8Ly%sKN93");
      Token token6 = xPathLexer2.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("N", token6.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.and();
      Token token7 = xPathLexer3.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer3.not();
      assertEquals(23, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer2.notEquals();
      assertEquals("o~", token10.getTokenText());
      
      xPathLexer1.colon();
      XPathLexer xPathLexer5 = new XPathLexer("No~<%K8Ly%sKN93");
      Token token11 = xPathLexer2.plus();
      assertEquals("<", token11.getTokenText());
      
      Token token12 = xPathLexer5.rightBracket();
      assertEquals("N", token12.getTokenText());
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer1.notEquals();
      assertEquals(22, token13.getTokenType());
      
      Token token14 = xPathLexer3.dots();
      assertEquals(13, token14.getTokenType());
      
      xPathLexer2.leftParen();
      Token token15 = xPathLexer1.colon();
      assertEquals(18, token15.getTokenType());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.9111288294341509
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.setXPath("5 g]Ti<k|?RL0Ws|");
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("5", token2.getTokenText());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      Token token3 = xPathLexer0.pipe();
      assertEquals(" ", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.plus();
      assertEquals(5, token4.getTokenType());
      
      xPathLexer2.consume();
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      assertEquals("g", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      assertEquals("]", token6.getTokenText());
      
      char char0 = xPathLexer1.LA(105);
      assertEquals('\uFFFF', char0);
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      assertEquals("", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("i<k|?RL0Ws|", token8.getTokenText());
      assertNotSame(token8, token0);
      
      Token token9 = xPathLexer1.identifier();
      assertEquals(15, token9.getTokenType());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.600146405609343
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      xPathLexer0.doubleColon();
      xPathLexer0.not();
      Token token0 = xPathLexer0.plus();
      assertEquals("U", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("3", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("d", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("M>", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("}:<c`vw&1XKbB7");
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("}:<c`vw&1XKbB7");
      Token token5 = xPathLexer2.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("}", token5.getTokenText());
      
      xPathLexer0.div();
      xPathLexer2.nextToken();
      Token token6 = xPathLexer1.pipe();
      assertEquals(":", token6.getTokenText());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer2.relationalOperator();
      assertEquals(7, token8.getTokenType());
      assertEquals("<", token8.getTokenText());
      
      Token token9 = xPathLexer2.star();
      assertEquals("c", token9.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token10 = xPathLexer1.notEquals();
      assertEquals(22, token10.getTokenType());
      
      xPathLexer0.colon();
      Token token11 = xPathLexer2.dollar();
      assertEquals(26, token11.getTokenType());
      assertEquals("`", token11.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token12 = xPathLexer1.colon();
      assertEquals("`", token12.getTokenText());
      assertEquals(18, token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token13 = xPathLexer0.leftParen();
      assertEquals(1, token13.getTokenType());
      
      Token token14 = xPathLexer2.dots();
      assertEquals("v", token14.getTokenText());
      assertEquals(13, token14.getTokenType());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.1732946483164404
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      XPathLexer xPathLexer1 = new XPathLexer(">+B56;0Aqv)LVd7=5");
      xPathLexer1.whitespace();
      xPathLexer1.nextToken();
      xPathLexer1.plus();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer0.colon();
      xPathLexer1.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      XPathLexer xPathLexer2 = new XPathLexer(">+B56;0Aqv)LVd7=5");
      xPathLexer0.pipe();
      xPathLexer2.relationalOperator();
      xPathLexer2.star();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.equals();
      xPathLexer0.at();
      XPathLexer xPathLexer4 = new XPathLexer(">+B56;0Aqv)LVd7=5");
      xPathLexer4.not();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.notEquals();
      xPathLexer4.colon();
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer6.plus();
      Token token0 = xPathLexer1.equals();
      xPathLexer6.notEquals();
      xPathLexer5.dots();
      Token token1 = xPathLexer6.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3010371548716482
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>}{Lrm@[m>qw6x(Ht");
      XPathLexer xPathLexer1 = new XPathLexer("?/ELf5 ;#mm");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("?/ELf5 ;#mm", token0.getTokenText());
      
      xPathLexer1.pipe();
      Token token1 = xPathLexer1.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token2 = xPathLexer3.star();
      assertEquals(20, token2.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("HIA");
      Token token3 = xPathLexer5.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("H", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(".>", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      xPathLexer3.colon();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("}", token5.getTokenText());
      
      Token token6 = xPathLexer3.plus();
      assertEquals(5, token6.getTokenType());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.9775351334135736
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.dots();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("5 g]Ti<k|?RL0Ws|");
      xPathLexer1.doubleColon();
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer("5 g]Ti<k|?RL0Ws|");
      xPathLexer1.doubleColon();
      xPathLexer2.number();
      xPathLexer1.comma();
      xPathLexer1.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer2.at();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer1.nextToken();
      xPathLexer2.nextToken();
      xPathLexer2.pipe();
      xPathLexer0.pipe();
      xPathLexer3.relationalOperator();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.star();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("ML\"/.U _w");
      xPathLexer6.at();
      xPathLexer4.notEquals();
      xPathLexer0.colon();
      xPathLexer5.colon();
      xPathLexer6.and();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer6.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7753080896324296
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("g_/`= QyZIp.");
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      xPathLexer2.or();
      xPathLexer2.relationalOperator();
      xPathLexer2.identifier();
      xPathLexer0.colon();
      Token token4 = xPathLexer1.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("g", token4.getTokenText());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals("_", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("g_/`= QyZIp.");
      Token token6 = xPathLexer3.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("g", token6.getTokenText());
      
      Token token7 = xPathLexer3.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals("_/", token7.getTokenText());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.0865846556763255
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.slashes();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer1.doubleColon();
      xPathLexer0.dots();
      XPathLexer xPathLexer2 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer1.mod();
      xPathLexer0.slashes();
      xPathLexer1.minus();
      xPathLexer2.nextToken();
      xPathLexer0.pipe();
      XPathLexer xPathLexer3 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer0.pipe();
      xPathLexer2.relationalOperator();
      xPathLexer1.star();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.equals();
      xPathLexer1.at();
      xPathLexer2.not();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.identifierOrOperatorName();
      xPathLexer3.notEquals();
      xPathLexer2.colon();
      xPathLexer5.or();
      xPathLexer3.number();
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.9694486227041805
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z,KAHG");
      xPathLexer0.colon();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(",", token0.getTokenText());
      
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.plus();
      assertEquals("H", token1.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("z,KAHG");
      xPathLexer1.and();
      xPathLexer0.doubleColon();
      xPathLexer1.identifier();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer1.and();
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer2.nextToken();
      Token token4 = xPathLexer2.equals();
      assertEquals("/", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.number();
      xPathLexer2.star();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer2.number();
      assertEquals(30, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer2.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("=", token7.getTokenText());
      
      Token token8 = xPathLexer2.at();
      assertEquals(16, token8.getTokenType());
      assertEquals(" ", token8.getTokenText());
      
      Token token9 = xPathLexer2.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer1.colon();
      assertEquals("K", token10.getTokenText());
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer1.nextToken();
      assertEquals(15, token11.getTokenType());
      assertEquals("AHG", token11.getTokenText());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.3770677749031541
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.equals();
      String string0 = ".>}{Lrm@[m>qgw6x(Ht";
      XPathLexer xPathLexer1 = new XPathLexer();
      String string1 = "";
      xPathLexer1.setXPath("");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.leftBracket();
      xPathLexer3.consume(0);
      xPathLexer2.div();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.and();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer4.and();
      xPathLexer0.literal();
      xPathLexer1.or();
      XPathLexer xPathLexer6 = new XPathLexer(" /qa?2");
      xPathLexer6.consume((-2061));
      // Undeclared exception!
      try { 
        xPathLexer6.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.8864825849043672
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.slashes();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer1.doubleColon();
      xPathLexer0.dots();
      XPathLexer xPathLexer2 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer1.mod();
      xPathLexer0.slashes();
      xPathLexer1.minus();
      xPathLexer2.nextToken();
      xPathLexer0.pipe();
      XPathLexer xPathLexer3 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer0.pipe();
      xPathLexer2.relationalOperator();
      xPathLexer1.star();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.equals();
      xPathLexer1.at();
      xPathLexer2.not();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.notEquals();
      xPathLexer2.colon();
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.021094622468804
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z,KAHG");
      xPathLexer0.colon();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(",", token0.getTokenText());
      
      xPathLexer0.number();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("KA", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("H", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("G", token3.getTokenText());
      
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("z,KAHG");
      xPathLexer1.and();
      xPathLexer0.doubleColon();
      xPathLexer1.identifier();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      xPathLexer1.and();
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer2.nextToken();
      Token token6 = xPathLexer2.equals();
      assertEquals("/", token6.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer2.star();
      assertEquals(20, token8.getTokenType());
      assertEquals("`", token8.getTokenText());
      
      xPathLexer2.at();
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer2.at();
      assertEquals(" ", token11.getTokenText());
      assertEquals(16, token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("g_/`= QyZIp.");
      Token token12 = xPathLexer4.colon();
      assertEquals(18, token12.getTokenType());
      assertEquals("g", token12.getTokenText());
      
      Token token13 = xPathLexer3.leftParen();
      assertEquals(1, token13.getTokenType());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.9455766241302577
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (22) (co)");
      xPathLexer1.star();
      xPathLexer1.and();
      xPathLexer0.doubleColon();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer("[ (22) (co)");
      xPathLexer2.identifier();
      xPathLexer0.doubleColon();
      xPathLexer2.operatorName();
      xPathLexer0.at();
      xPathLexer2.slashes();
      xPathLexer2.div();
      xPathLexer1.nextToken();
      xPathLexer2.pipe();
      xPathLexer1.dots();
      XPathLexer xPathLexer3 = new XPathLexer("[ (22) (co)");
      xPathLexer3.relationalOperator();
      xPathLexer3.equals();
      xPathLexer0.star();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.at();
      xPathLexer1.or();
      xPathLexer4.minus();
      xPathLexer3.not();
      Token token1 = xPathLexer1.literal();
      assertNull(token1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7242798644501787
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("X^", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("P", token1.getTokenText());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("U", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("\r", token3.getTokenText());
      
      xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.dots();
      assertEquals("M", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("g_/`= QyZIp.");
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer1.mod();
      xPathLexer1.and();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer1.identifier();
      xPathLexer1.colon();
      Token token6 = xPathLexer0.colon();
      assertEquals("M", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("y", token7.getTokenText());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals("`= QyZIp.", token8.getTokenText());
      
      Token token9 = xPathLexer1.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.7001019151236083
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CVuB*X");
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("CVuB*X");
      Token token0 = xPathLexer1.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("C", token0.getTokenText());
      
      xPathLexer0.setXPath("y!(#b!v v,Su;");
      xPathLexer1.identifier();
      Token token1 = xPathLexer1.nextToken();
      assertEquals("*", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("y", token2.getTokenText());
      
      Token token3 = xPathLexer1.identifier();
      assertEquals("X", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer1.literal();
      assertNull(token4);
      
      XPathLexer xPathLexer2 = new XPathLexer("y!(#b!v v,Su;");
      Token token5 = xPathLexer0.leftBracket();
      assertEquals("!", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("(#", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      char char0 = xPathLexer1.LA(97);
      assertEquals('\uFFFF', char0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.538213152044384
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("?`al2w_Uqp5YD[>Uhn");
      XPathLexer xPathLexer2 = new XPathLexer("?`al2w_Uqp5YD[>Uhn");
      Token token0 = xPathLexer2.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("?", token0.getTokenText());
      
      xPathLexer2.rightParen();
      Token token1 = xPathLexer1.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("?", token1.getTokenText());
      
      Token token2 = xPathLexer1.pipe();
      assertEquals("`", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token3 = xPathLexer3.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer1.operatorName();
      xPathLexer3.identifierOrOperatorName();
      xPathLexer2.relationalOperator();
      xPathLexer3.star();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.at();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer2.identifierOrOperatorName();
      assertNotNull(token7);
      assertEquals(15, token7.getTokenType());
      assertEquals("al2w_Uqp5YD", token7.getTokenText());
      
      Token token8 = xPathLexer3.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer2.star();
      assertEquals("[", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.1547139407015417
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z,KAHG");
      xPathLexer0.colon();
      xPathLexer0.number();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(",K", token0.getTokenText());
      
      xPathLexer0.plus();
      xPathLexer0.and();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("z,KAHG");
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.number();
      XPathLexer xPathLexer2 = new XPathLexer("l6,aY7l");
      Token token4 = xPathLexer2.comma();
      assertEquals("l", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("l6,aY7l");
      Token token5 = xPathLexer3.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer3.dollar();
      assertEquals("6", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer3.slashes();
      assertEquals(",", token7.getTokenText());
      
      Token token8 = xPathLexer2.leftParen();
      assertEquals("6", token8.getTokenText());
      
      Token token9 = xPathLexer3.nextToken();
      assertEquals("aY7l", token9.getTokenText());
      
      Token token10 = xPathLexer1.equals();
      assertEquals(21, token10.getTokenType());
      assertEquals("z", token10.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token11 = xPathLexer3.number();
      assertEquals(30, token11.getTokenType());
      assertEquals("", token11.getTokenText());
      
      xPathLexer1.div();
      Token token12 = xPathLexer1.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer0.notEquals();
      assertEquals(22, token13.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("%");
      Token token14 = xPathLexer5.colon();
      assertEquals("%", token14.getTokenText());
      assertEquals(18, token14.getTokenType());
      
      Token token15 = xPathLexer4.minus();
      assertEquals(6, token15.getTokenType());
      
      Token token16 = xPathLexer4.literal();
      assertNull(token16);
      
      Token token17 = xPathLexer1.plus();
      assertEquals(5, token17.getTokenType());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.008537215289519
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#(Ig/oTO4uf?");
      xPathLexer0.consume();
      xPathLexer0.leftBracket();
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.consume(2045);
      xPathLexer0.dots();
      xPathLexer0.consume((-2978));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.9129167924178936
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("X^", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("P", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("U", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("3", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.leftBracket();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("X^PU\r3dM>My");
      xPathLexer1.nextToken();
      Token token4 = xPathLexer2.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("X", token4.getTokenText());
      
      Token token5 = xPathLexer2.nextToken();
      assertEquals("^PU\r3dM>My", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("M", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer(";qR");
      xPathLexer1.equals();
      xPathLexer3.relationalOperator();
      Token token7 = xPathLexer2.number();
      assertEquals("", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer2.star();
      assertEquals("^", token8.getTokenText());
      
      xPathLexer2.div();
      XPathLexer xPathLexer4 = new XPathLexer(";qR");
      Token token9 = xPathLexer4.at();
      assertEquals(";", token9.getTokenText());
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token11 = xPathLexer5.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer3.minus();
      assertEquals(";", token12.getTokenText());
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer2.literal();
      assertNull(token13);
      
      Token token14 = xPathLexer5.equals();
      assertEquals(21, token14.getTokenType());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      xPathLexer0.consume((-746));
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.7641229186043508
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "z,KAHG";
      XPathLexer xPathLexer0 = new XPathLexer("z,KAHG");
      xPathLexer0.colon();
      xPathLexer0.leftParen();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.minus();
      xPathLexer0.getPreviousToken();
      xPathLexer0.and();
      xPathLexer0.colon();
      xPathLexer0.at();
      int int0 = (-29);
      xPathLexer0.consume((-29));
      xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        xPathLexer0.operatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.142139684601787
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.dots();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("5 g]Ti<k|?RL0Ws|");
      xPathLexer1.doubleColon();
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer("5 g]Ti<k|?RL0Ws|");
      xPathLexer1.doubleColon();
      xPathLexer2.number();
      xPathLexer1.comma();
      xPathLexer1.rightParen();
      xPathLexer1.dollar();
      xPathLexer0.slashes();
      xPathLexer2.leftParen();
      xPathLexer2.nextToken();
      xPathLexer1.equals();
      XPathLexer xPathLexer3 = new XPathLexer("5 g]Ti<k|?RL0Ws|");
      xPathLexer3.relationalOperator();
      xPathLexer0.number();
      xPathLexer3.div();
      xPathLexer2.at();
      xPathLexer3.notEquals();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer3.minus();
      Token token0 = xPathLexer1.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.8768937504629128
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("X^", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("P", token1.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.star();
      Token token5 = xPathLexer0.dots();
      assertEquals(">", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("}:<c`vw&1XKbB7");
      Token token6 = xPathLexer2.not();
      assertEquals("}", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      
      xPathLexer1.div();
      Token token8 = xPathLexer0.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("y", token8.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.pipe();
      Token token9 = xPathLexer2.pipe();
      assertEquals(":", token9.getTokenText());
      assertEquals(17, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token10 = xPathLexer2.star();
      assertEquals(20, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token11 = xPathLexer5.notEquals();
      assertEquals(22, token11.getTokenType());
      
      xPathLexer1.colon();
      Token token12 = xPathLexer5.dollar();
      assertEquals(26, token12.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("}:<c`vw&1XKbB7");
      Token token13 = xPathLexer5.colon();
      assertEquals(18, token13.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token14 = xPathLexer3.leftParen();
      assertEquals("c", token14.getTokenText());
      assertEquals(1, token14.getTokenType());
      
      Token token15 = xPathLexer4.dots();
      assertEquals(13, token15.getTokenType());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.129872034408631
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.leftBracket();
      xPathLexer0.dollar();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.nextToken();
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer("nv-aE");
      xPathLexer1.doubleColon();
      xPathLexer0.number();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.at();
      xPathLexer1.div();
      xPathLexer2.nextToken();
      xPathLexer1.pipe();
      xPathLexer1.pipe();
      xPathLexer2.dots();
      xPathLexer3.relationalOperator();
      xPathLexer2.equals();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.or();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.nextToken();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer8 = null;
      try {
        xPathLexer8 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.0555398080995557
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer1.mod();
      xPathLexer0.and();
      Token token3 = xPathLexer1.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("g_", token3.getTokenText());
      
      Token token4 = xPathLexer1.leftParen();
      assertEquals("/", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.number();
      Token token6 = xPathLexer1.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer1.nextToken();
      Token token7 = xPathLexer1.equals();
      assertEquals(" ", token7.getTokenText());
      assertEquals(21, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer1.number();
      assertEquals("", token8.getTokenText());
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      
      xPathLexer0.at();
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.dollar();
      Token token11 = xPathLexer0.literal();
      assertNull(token11);
      
      Token token12 = xPathLexer1.colon();
      assertEquals("Q", token12.getTokenText());
      assertEquals(18, token12.getTokenType());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5406773919010242
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.not();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("b{g+56a)^");
      String string0 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.7160631143451957
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.slashes();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer1.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.dots();
      XPathLexer xPathLexer2 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      xPathLexer1.mod();
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer3.and();
      xPathLexer2.at();
      Token token4 = xPathLexer3.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("c", token4.getTokenText());
      
      xPathLexer1.div();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("{Lrm@[m>qgw6x(Ht", token5.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      Token token6 = xPathLexer4.pipe();
      assertEquals(".", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer4.dots();
      assertEquals(13, token7.getTokenType());
      assertEquals(">", token7.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer0.relationalOperator();
      xPathLexer1.equals();
      Token token8 = xPathLexer5.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      xPathLexer5.notEquals();
      xPathLexer0.or();
      Token token10 = xPathLexer3.minus();
      assertEquals("o", token10.getTokenText());
      assertEquals(6, token10.getTokenType());
      
      xPathLexer3.div();
      Token token11 = xPathLexer2.equals();
      assertEquals(21, token11.getTokenType());
      assertEquals(">", token11.getTokenText());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.247044884884591
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("b\"f{&c5Ea*uA sx`U");
      xPathLexer1.whitespace();
      Token token0 = xPathLexer1.nextToken();
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      xPathLexer1.mod();
      xPathLexer0.slashes();
      xPathLexer1.at();
      xPathLexer0.leftParen();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer("b\"f{&c5Ea*uA sx`U");
      xPathLexer3.number();
      Token token1 = xPathLexer1.rightParen();
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer1.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.leftParen();
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      xPathLexer2.nextToken();
      Token token4 = xPathLexer1.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer3.relationalOperator();
      Token token5 = xPathLexer2.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer3.nextToken();
      assertEquals("b", token6.getTokenText());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("b\"f{&c5Ea*uA sx`U");
      Token token8 = xPathLexer2.minus();
      assertEquals(6, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      xPathLexer1.or();
      Token token10 = xPathLexer2.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer4.at();
      assertEquals(16, token11.getTokenType());
      assertEquals("b", token11.getTokenText());
      
      Token token12 = xPathLexer5.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer4.doubleColon();
      assertEquals("\"f", token13.getTokenText());
      assertEquals(19, token13.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer6.notEquals();
      Token token14 = xPathLexer6.dots();
      assertEquals(13, token14.getTokenType());
      
      Token token15 = xPathLexer1.notEquals();
      assertEquals(22, token15.getTokenType());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.8470401489771346
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Rp+$fJ");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("R", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("p", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token2);
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("Rp+$fJ");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(5, token3.getTokenType());
      assertEquals("+", token3.getTokenText());
      
      Token token4 = xPathLexer1.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("R", token4.getTokenText());
      
      xPathLexer0.nextToken();
      Token token5 = xPathLexer1.at();
      assertEquals("p", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals("f", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer1.minus();
      assertEquals("+", token7.getTokenText());
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals(26, token8.getTokenType());
      assertEquals("$", token8.getTokenText());
      
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("No~<%K8Ly%sKN93");
      Token token9 = xPathLexer1.pipe();
      assertEquals(17, token9.getTokenType());
      assertEquals("J", token9.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token10 = xPathLexer0.star();
      assertEquals("J", token10.getTokenText());
      assertEquals(20, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer1.notEquals();
      assertEquals(22, token12.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token13 = xPathLexer0.colon();
      assertEquals(18, token13.getTokenType());
      
      Token token14 = xPathLexer2.leftParen();
      assertEquals(1, token14.getTokenType());
      assertEquals("N", token14.getTokenText());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.4152284531411885
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("?`al2w_Uqp5YD[>Uhn");
      XPathLexer xPathLexer2 = new XPathLexer("?`al2w_Uqp5YD[>Uhn");
      xPathLexer2.dots();
      Token token0 = xPathLexer2.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("`", token0.getTokenText());
      
      Token token1 = xPathLexer1.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("?", token1.getTokenText());
      
      xPathLexer1.pipe();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.not();
      xPathLexer1.operatorName();
      xPathLexer1.pipe();
      XPathLexer xPathLexer4 = new XPathLexer("ep.]Ij{0kxX;");
      Token token2 = xPathLexer1.pipe();
      assertEquals("l", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token3 = xPathLexer4.star();
      assertEquals("e", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.equals();
      Token token4 = xPathLexer2.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer5.not();
      assertEquals(23, token5.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token6 = xPathLexer2.notEquals();
      assertEquals("l2", token6.getTokenText());
      
      Token token7 = xPathLexer4.colon();
      assertEquals("p", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer7.and();
      Token token8 = xPathLexer1.equals();
      assertEquals("w", token8.getTokenText());
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer5.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer4.dots();
      assertEquals(13, token10.getTokenType());
      assertEquals(".", token10.getTokenText());
      
      Token token11 = xPathLexer7.leftParen();
      assertEquals("c", token11.getTokenText());
      
      Token token12 = xPathLexer0.leftParen();
      assertEquals(1, token12.getTokenType());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.9411222649953777
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>}{Lrm@[m>qw6x(Ht");
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("1DSn]");
      Token token0 = xPathLexer1.star();
      assertEquals("1", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer1.notEquals();
      assertEquals("DS", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer2.colon();
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer2.dollar();
      assertEquals(26, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("1DSn]");
      Token token4 = xPathLexer0.literal();
      assertEquals("}{Lrm@[m", token4.getTokenText());
      assertNotNull(token4);
      assertEquals(27, token4.getTokenType());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.0251860207209442
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("^", token1.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals("X", token0.getTokenText());
      
      xPathLexer0.pipe();
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.equals();
      Token token2 = xPathLexer0.colon();
      assertEquals("\r", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals("3", token3.getTokenText());
      
      char char0 = xPathLexer0.LA(93);
      assertEquals('\uFFFF', char0);
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("d", token4.getTokenText());
      
      xPathLexer0.at();
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.pipe();
      assertEquals("M", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals("y", token7.getTokenText());
      assertEquals(13, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.relationalOperator();
      Token token8 = xPathLexer1.equals();
      assertEquals("c", token8.getTokenText());
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token10 = xPathLexer1.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      
      xPathLexer0.or();
      Token token12 = xPathLexer2.minus();
      assertEquals(6, token12.getTokenType());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.875469442354523
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b5f{&c56a*uA sx`U");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("f", token1.getTokenText());
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("{", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("&c", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer2.mod();
      xPathLexer2.and();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.rightParen();
      assertEquals(2, token6.getTokenType());
      
      Token token7 = xPathLexer2.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      xPathLexer3.leftParen();
      Token token8 = xPathLexer2.nextToken();
      assertEquals("(", token8.getTokenText());
      assertEquals(1, token8.getTokenType());
      
      Token token9 = xPathLexer1.equals();
      assertEquals(21, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.at();
      Token token10 = xPathLexer0.notEquals();
      assertEquals("56", token10.getTokenText());
      assertEquals(22, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.slashes();
      Token token11 = xPathLexer5.at();
      assertEquals(16, token11.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("b5f{&c56a*uA sx`U");
      Token token12 = xPathLexer0.colon();
      assertEquals(18, token12.getTokenType());
      assertEquals("a", token12.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token13 = xPathLexer7.leftParen();
      assertEquals(1, token13.getTokenType());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.1539477680742043
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".t[`#zVh@X(u,|W$");
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer(".t[`#zVh@X(u,|W$");
      Token token0 = xPathLexer1.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
      
      xPathLexer1.and();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.colon();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("zVh@X(u,|W$", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("z", token4.getTokenText());
      
      xPathLexer2.literal();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.mod();
      xPathLexer3.and();
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer1.identifier();
      assertEquals("t", token6.getTokenText());
      
      xPathLexer3.colon();
      XPathLexer xPathLexer4 = new XPathLexer("2@.8Cts");
      xPathLexer4.at();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("h", token7.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer(".t[`#zVh@X(u,|W$");
      xPathLexer1.identifierOrOperatorName();
      xPathLexer5.notEquals();
      xPathLexer3.or();
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      assertEquals("@", token8.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("+CKnA[uK&Ajx(j");
      Token token9 = xPathLexer4.notEquals();
      assertEquals("@.", token9.getTokenText());
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer4.slashes();
      assertEquals("8", token11.getTokenText());
      assertEquals(11, token11.getTokenType());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.consume((-608));
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.9521270388781924
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".t)[`zVhX(u,|W$");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.not();
      assertEquals("[", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals(3, token1.getTokenType());
      assertEquals(")", token1.getTokenText());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.at();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.3342077065181743
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("[q_xsD3OO-\"by}:O");
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.and();
      xPathLexer1.doubleColon();
      xPathLexer1.leftParen();
      xPathLexer0.identifier();
      xPathLexer0.comma();
      xPathLexer0.doubleColon();
      xPathLexer1.operatorName();
      xPathLexer0.at();
      xPathLexer1.slashes();
      xPathLexer0.minus();
      xPathLexer1.div();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer1.pipe();
      xPathLexer0.relationalOperator();
      xPathLexer1.leftParen();
      xPathLexer1.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.notEquals();
      xPathLexer1.colon();
      xPathLexer0.dollar();
      XPathLexer xPathLexer3 = new XPathLexer("[q_xsD3OO-\"by}:O");
      xPathLexer3.literal();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.1210479224183576
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("X^", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("P", token1.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("\r", token2.getTokenText());
      
      xPathLexer0.doubleColon();
      Token token3 = xPathLexer0.dots();
      assertEquals("M", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("g_/`= QyZIp.");
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals(">", token4.getTokenText());
      
      xPathLexer1.mod();
      xPathLexer1.and();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer1.identifier();
      Token token5 = xPathLexer0.colon();
      assertEquals("M", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals("y", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals(11, token7.getTokenType());
      assertEquals("/", token7.getTokenText());
      
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals("QyZIp.", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer1.rightBracket();
      assertEquals(4, token10.getTokenType());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.164052103312072
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".t[`#zVh@X(u,|W$");
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.literal();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath("%q)]EV:%li5UJg]h");
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("%q)]EV:%li5UJg]h");
      xPathLexer1.nextToken();
      xPathLexer0.equals();
      xPathLexer1.relationalOperator();
      xPathLexer0.number();
      xPathLexer1.star();
      xPathLexer0.equals();
      xPathLexer1.at();
      xPathLexer0.notEquals();
      xPathLexer1.colon();
      xPathLexer1.rightParen();
      Token token0 = xPathLexer1.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.1941810993787376
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("l+aZ5PU#U0+");
      Token token1 = xPathLexer1.plus();
      assertEquals("l", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer2.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.doubleColon();
      Token token3 = xPathLexer1.dots();
      assertEquals("", token3.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer(")xTC^i=Fr+8");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.star();
      xPathLexer5.and();
      xPathLexer2.doubleColon();
      Token token4 = xPathLexer1.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      xPathLexer2.identifier();
      Token token5 = xPathLexer5.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.operatorName();
      xPathLexer0.at();
      xPathLexer1.pipe();
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer4.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals(")", token7.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("l+aZ5PU#U0+");
      xPathLexer7.div();
      Token token8 = xPathLexer7.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("l", token8.getTokenText());
      
      xPathLexer5.pipe();
      Token token9 = xPathLexer7.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer7.relationalOperator();
      Token token10 = xPathLexer3.number();
      assertEquals(30, token10.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.star();
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token11 = xPathLexer7.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer1.notEquals();
      assertEquals("5P", token12.getTokenText());
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer5.colon();
      assertEquals(18, token13.getTokenType());
      
      Token token14 = xPathLexer7.star();
      assertEquals("Z", token14.getTokenText());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.4516955695609535
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("?`al2w_Uqp5YD[>Uhn");
      XPathLexer xPathLexer2 = new XPathLexer("?`al2w_Uqp5YD[>Uhn");
      xPathLexer2.dots();
      xPathLexer2.rightParen();
      xPathLexer1.rightBracket();
      xPathLexer1.pipe();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.not();
      xPathLexer1.operatorName();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer3.identifierOrOperatorName();
      xPathLexer2.relationalOperator();
      xPathLexer3.star();
      xPathLexer0.colon();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer6.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.7928589003190254
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Dnj*(Av-eZ.");
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("Dnj*(Av-eZ.");
      xPathLexer0.leftParen();
      xPathLexer1.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer1.number();
      xPathLexer1.at();
      xPathLexer1.doubleColon();
      xPathLexer0.colon();
      xPathLexer1.colon();
      xPathLexer1.slashes();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.8068026514383941
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("m.werken.saxpath.XPathLexer", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.notEquals();
      assertEquals(22, token3.getTokenType());
      
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer("t|fLV6v^#-s'9");
      xPathLexer1.at();
      char char0 = xPathLexer1.LA((-1));
      assertEquals('\uFFFF', char0);
      
      Token token4 = xPathLexer2.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("t", token4.getTokenText());
      
      Token token5 = xPathLexer2.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("|", token5.getTokenText());
      
      xPathLexer2.div();
      char char1 = xPathLexer2.LA((-1));
      assertEquals('t', char1);
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer1.rightBracket();
      assertEquals(4, token7.getTokenType());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.6824942631259874
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".t[`#zVh@X(u,|W$");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("t", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.not();
      Token token3 = xPathLexer0.not();
      assertEquals("#", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("u", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(",", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token7 = xPathLexer1.minus();
      assertEquals(6, token7.getTokenType());
      
      xPathLexer1.div();
      xPathLexer0.nextToken();
      xPathLexer1.pipe();
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer1.star();
      assertEquals(20, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token10 = xPathLexer2.notEquals();
      assertEquals(22, token10.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer2.dollar();
      XPathLexer xPathLexer3 = new XPathLexer("xcQ");
      Token token11 = xPathLexer3.colon();
      assertEquals(18, token11.getTokenType());
      assertEquals("x", token11.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token12 = xPathLexer3.leftParen();
      assertEquals("c", token12.getTokenText());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.2504993081281657
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("[bq}_xsD3OO-\"by:O");
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("b", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("q}", token3.getTokenText());
      
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer1.mod();
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer2.rightBracket();
      Token token4 = xPathLexer2.comma();
      assertEquals(32, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer1.at();
      assertEquals("g", token5.getTokenText());
      
      xPathLexer3.div();
      Token token6 = xPathLexer3.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      xPathLexer1.div();
      xPathLexer3.identifier();
      xPathLexer3.pipe();
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer3.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer1.slashes();
      assertEquals(12, token10.getTokenType());
      assertEquals("_/", token10.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("g_/`= QyZIp.");
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
      assertEquals("\"", token11.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token12 = xPathLexer0.star();
      assertEquals(20, token12.getTokenType());
      assertEquals("b", token12.getTokenText());
      
      Token token13 = xPathLexer5.at();
      assertEquals(16, token13.getTokenType());
      
      Token token14 = xPathLexer3.colon();
      assertEquals(18, token14.getTokenType());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.181192373602483
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("1MTWk5Bi[?GSv}");
      xPathLexer1.notEquals();
      xPathLexer0.minus();
      xPathLexer0.star();
      xPathLexer0.mod();
      Token token0 = xPathLexer1.leftParen();
      assertEquals("T", token0.getTokenText());
      
      Token token1 = xPathLexer1.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer1.minus();
      assertEquals("k", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer1.whitespace();
      xPathLexer1.operatorName();
      xPathLexer1.and();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      
      xPathLexer0.div();
      Token token8 = xPathLexer0.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      xPathLexer0.pipe();
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("1MTWk5Bi[?GSv}");
      Token token10 = xPathLexer1.dots();
      assertEquals("B", token10.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.leftParen();
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer0.whitespace();
      assertEquals((-2), token12.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("1MTWk5Bi[?GSv}");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token13 = xPathLexer2.nextToken();
      assertEquals(30, token13.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token14 = xPathLexer3.notEquals();
      assertEquals("1M", token14.getTokenText());
      assertEquals(22, token14.getTokenType());
      
      Token token15 = xPathLexer3.colon();
      assertEquals("T", token15.getTokenText());
      
      Token token16 = xPathLexer4.identifierOrOperatorName();
      assertEquals(15, token16.getTokenType());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.9648891514403228
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("X^", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals("P", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("U", token2.getTokenText());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("d", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      assertEquals("M", token5.getTokenText());
      
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      assertEquals("y", token6.getTokenText());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("X^PU\r3dM>My");
      xPathLexer0.identifier();
      xPathLexer1.colon();
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer1.nextToken();
      assertEquals(15, token10.getTokenType());
      assertEquals("PU", token10.getTokenText());
      
      Token token11 = xPathLexer1.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer1.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      Token token13 = xPathLexer1.rightBracket();
      assertEquals(4, token13.getTokenType());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.800254607169943
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("P", token0.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.at();
      assertEquals("\r", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("3", token2.getTokenText());
      
      xPathLexer0.doubleColon();
      Token token3 = xPathLexer0.dots();
      assertEquals(">", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("g_/`= QyZIp.");
      Token token4 = xPathLexer1.pipe();
      assertEquals("g", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("M", token5.getTokenText());
      
      xPathLexer1.mod();
      xPathLexer1.and();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer1.identifier();
      Token token6 = xPathLexer0.identifier();
      assertEquals("y", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer1.doubleColon();
      assertEquals("`=", token10.getTokenText());
      assertEquals(19, token10.getTokenType());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.749536432149422
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z,KAHG");
      XPathLexer xPathLexer1 = new XPathLexer("q@y2*+{~S>K[>G 0n");
      xPathLexer0.not();
      xPathLexer1.nextToken();
      xPathLexer0.and();
      xPathLexer1.at();
      xPathLexer1.operatorName();
      xPathLexer1.minus();
      xPathLexer1.div();
      xPathLexer1.notEquals();
      xPathLexer0.colon();
      xPathLexer0.dollar();
      Token token0 = xPathLexer1.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.023162435186278
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("m.werken.saxpath.XPathLexer", token2.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.at();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("No~<%K8Ly%sKN93");
      Token token5 = xPathLexer1.pipe();
      assertEquals("N", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.equals();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer1.notEquals();
      assertEquals("o~", token8.getTokenText());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("No~<%K8Ly%sKN93");
      Token token10 = xPathLexer4.equals();
      assertEquals(21, token10.getTokenType());
      assertEquals("N", token10.getTokenText());
      
      xPathLexer0.notEquals();
      Token token11 = xPathLexer2.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer1.leftParen();
      assertEquals("<", token12.getTokenText());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.8150430485384126
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("[bq}_xsD3OO-\"by:O");
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer1.mod();
      xPathLexer0.and();
      xPathLexer1.doubleColon();
      xPathLexer0.identifier();
      xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer1.and();
      Token token0 = xPathLexer0.at();
      xPathLexer1.operatorName();
      xPathLexer0.minus();
      token0.toString();
      xPathLexer0.isIdentifierStartChar('h');
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer1.notEquals();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer2.consume((-1));
      xPathLexer2.hasMoreChars();
      // Undeclared exception!
      try { 
        xPathLexer2.or();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.555903537341231
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("Nr H$[6pld.;;cK");
      xPathLexer1.rightParen();
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.pipe();
      xPathLexer0.relationalOperator();
      xPathLexer1.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      xPathLexer2.equals();
      xPathLexer0.colon();
      xPathLexer2.at();
      XPathLexer xPathLexer3 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer3.LA((-732));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.6550653460500613
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      Token token0 = xPathLexer0.number();
      assertEquals(31, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.2708219056501795
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      XPathLexer xPathLexer2 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      Token token0 = xPathLexer2.pipe();
      assertEquals(".", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.relationalOperator();
      assertEquals(">", token1.getTokenText());
      assertEquals(9, token1.getTokenType());
      
      Token token2 = xPathLexer1.star();
      assertEquals(20, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer2.equals();
      assertEquals(">", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer3.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer3.not();
      assertEquals(23, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer0.notEquals();
      assertEquals("}{", token6.getTokenText());
      
      Token token7 = xPathLexer2.colon();
      assertEquals("}", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token8 = xPathLexer4.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer3.dots();
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer0.leftParen();
      assertEquals(1, token10.getTokenType());
      assertEquals("L", token10.getTokenText());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1616206026586093
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>}{Lrm@[m>qw6x(Ht");
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.0996758786923286
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("S#$jr#rXA(");
      xPathLexer0.consume(25);
      xPathLexer0.star();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.rightBracket();
      xPathLexer0.at();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.mod();
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.dots();
      xPathLexer0.rightParen();
      xPathLexer0.number();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.notEquals();
      xPathLexer0.literal();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.isIdentifierStartChar('3');
      xPathLexer0.div();
      xPathLexer0.pipe();
      xPathLexer0.at();
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      xPathLexer0.doubleColon();
      xPathLexer0.literal();
      xPathLexer0.plus();
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.8540248372441863
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b5f{&c56a*uA sx`U");
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      Token token0 = xPathLexer1.not();
      xPathLexer2.mod();
      xPathLexer2.and();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightParen();
      xPathLexer3.leftParen();
      xPathLexer2.nextToken();
      xPathLexer1.equals();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.at();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.slashes();
      xPathLexer5.at();
      XPathLexer xPathLexer6 = new XPathLexer("b5f{&c56a*uA sx`U");
      xPathLexer0.colon();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token1 = xPathLexer7.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.4536556525425497
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("1MTX$65Bi[?GSv}");
      xPathLexer1.notEquals();
      xPathLexer0.minus();
      xPathLexer0.star();
      xPathLexer1.identifier();
      xPathLexer1.leftParen();
      xPathLexer1.slashes();
      xPathLexer0.equals();
      xPathLexer0.star();
      xPathLexer0.not();
      xPathLexer1.whitespace();
      xPathLexer0.rightParen();
      xPathLexer1.not();
      xPathLexer0.slashes();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.pipe();
      xPathLexer1.mod();
      xPathLexer1.rightParen();
      xPathLexer0.number();
      xPathLexer1.isIdentifierChar('a');
      xPathLexer0.and();
      xPathLexer0.at();
      xPathLexer1.hasMoreChars();
      xPathLexer0.number();
      xPathLexer0.plus();
      Token token0 = xPathLexer1.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.3176878388681166
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.dollar();
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.colon();
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.649842128305761
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.div();
      xPathLexer0.operatorName();
      xPathLexer0.currentPosition();
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.consume();
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.leftParen();
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token9);
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      
      xPathLexer0.getXPath();
      char char0 = xPathLexer0.LA(2307);
      assertEquals('\uFFFF', char0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.2218840437453533
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Dnj*(Av-eZ.");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("*", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("(", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals("A", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("v", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals("-eZ.", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.div();
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.colon();
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.6198894484787085
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z,KAHG");
      xPathLexer0.colon();
      xPathLexer0.leftParen();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("#@NXs(m3FktIs\"\"J");
      xPathLexer0.leftBracket();
      xPathLexer1.notEquals();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-2587));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.694250975763108
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gn>?'S");
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("n", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals("?", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals("", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.minus();
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals("S", token4.getTokenText());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      char char0 = xPathLexer0.LA(36);
      assertEquals('\uFFFF', char0);
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.rightParen();
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer0.rightBracket();
      assertEquals(4, token11.getTokenType());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.9541739037611174
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.dots();
      xPathLexer0.doubleColon();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("]QZ`8?sn'z}G7f@?");
      xPathLexer1.nextToken();
      xPathLexer1.colon();
      xPathLexer1.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer1.nextToken();
      Token token1 = xPathLexer0.nextToken();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.2214181644267623
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer0.mod();
      xPathLexer0.star();
      xPathLexer0.slashes();
      xPathLexer0.consume((-2949));
      xPathLexer0.consume();
      xPathLexer0.plus();
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.3261228385027515
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Dnj*(Av-eZ.");
      Token token0 = xPathLexer0.identifier();
      assertEquals("Dnj", token0.getTokenText());
      
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("(", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("A", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("v", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      assertEquals("-eZ.", token4.getTokenText());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      xPathLexer0.div();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.265278123857383
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      Token token0 = xPathLexer0.identifier();
      assertEquals("X", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("^", token1.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      assertEquals("P", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals("U", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.equals();
      assertEquals("\r", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.div();
      Token token6 = xPathLexer0.not();
      assertEquals("d", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("A%A^@W~*#fR@5;*Z_");
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume((-950));
      xPathLexer0.consume((-950));
      xPathLexer0.comma();
      xPathLexer0.minus();
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.987027589650677
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("X^", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("P", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("U", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("\r", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("M", token4.getTokenText());
      
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      xPathLexer0.identifier();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.at();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("X^PU\r3dM>My");
      xPathLexer1.div();
      xPathLexer0.nextToken();
      xPathLexer1.pipe();
      Token token10 = xPathLexer1.pipe();
      assertEquals(17, token10.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token12 = xPathLexer2.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer1.colon();
      assertEquals(18, token13.getTokenType());
      assertEquals("P", token13.getTokenText());
      
      Token token14 = xPathLexer1.dollar();
      assertEquals("U", token14.getTokenText());
      assertEquals(26, token14.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("X^PU\r3dM>My");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token15 = xPathLexer4.literal();
      assertNull(token15);
      
      int int0 = xPathLexer3.endPosition();
      assertEquals(11, int0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.601869188441424
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LCX4TLDDDe|YQi@");
      xPathLexer0.div();
      Token token0 = xPathLexer0.dollar();
      assertEquals("L", token0.getTokenText());
      
      xPathLexer0.getXPath();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.comma();
      xPathLexer0.minus();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer1.consume();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.literal();
      xPathLexer0.minus();
      xPathLexer1.notEquals();
      xPathLexer1.dollar();
      XPathLexer xPathLexer3 = new XPathLexer("Y{");
      Token token7 = xPathLexer3.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("Y", token7.getTokenText());
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer3.comma();
      assertEquals(32, token9.getTokenType());
      assertEquals("{", token9.getTokenText());
      
      Token token10 = xPathLexer3.pipe();
      assertEquals(17, token10.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer3.minus();
      Token token11 = xPathLexer1.dollar();
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer1.minus();
      assertEquals(6, token12.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.div();
      xPathLexer3.relationalOperator();
      Token token13 = xPathLexer0.notEquals();
      assertEquals(22, token13.getTokenType());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.0086655301373963
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.dollar();
      xPathLexer0.getXPath();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.comma();
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.mod();
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer0.plus();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      xPathLexer0.or();
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      
      xPathLexer0.LA(1);
      Token token11 = xPathLexer0.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer0.plus();
      assertEquals(5, token12.getTokenType());
      
      xPathLexer0.div();
      char char0 = xPathLexer0.LA(1);
      assertEquals('\uFFFF', char0);
      
      Token token13 = xPathLexer0.comma();
      assertEquals(32, token13.getTokenType());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.294009662469878
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".t[`#zVh@X(u,|W$");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(".", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("t", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("[", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.literal();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.setXPath("%q)]EV:%li5UJg]h");
      xPathLexer0.mod();
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals(2, token8.getTokenType());
      assertEquals("q", token8.getTokenText());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      assertEquals(")", token9.getTokenText());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      assertEquals("]", token10.getTokenText());
      
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      Token token12 = xPathLexer0.pipe();
      assertEquals(":", token12.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("Pd.t3CTuthA*\\1");
      Token token13 = xPathLexer1.star();
      assertEquals(20, token13.getTokenType());
      assertEquals("P", token13.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("%q)]EV:%li5UJg]h");
      Token token14 = xPathLexer3.notEquals();
      assertEquals(22, token14.getTokenType());
      assertEquals("%q", token14.getTokenText());
      
      Token token15 = xPathLexer1.colon();
      assertEquals("d", token15.getTokenText());
      
      Token token16 = xPathLexer3.dollar();
      assertEquals(")", token16.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token17 = xPathLexer3.literal();
      assertEquals("EV:%li5UJg", token17.getTokenText());
      assertEquals(27, token17.getTokenType());
      assertNotNull(token17);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.148533336647433
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(">+B56;0Aqv)LVd7=5");
      Token token1 = xPathLexer1.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      xPathLexer1.nextToken();
      Token token2 = xPathLexer1.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("^P", token4.getTokenText());
      
      xPathLexer0.at();
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("\r", token5.getTokenText());
      
      Token token6 = xPathLexer1.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("5", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token8 = xPathLexer0.pipe();
      assertEquals("d", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer1.star();
      assertEquals(20, token9.getTokenType());
      assertEquals(";", token9.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.equals();
      Token token10 = xPathLexer1.at();
      assertEquals("0", token10.getTokenText());
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer1.not();
      assertEquals(23, token11.getTokenType());
      assertEquals("A", token11.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.notEquals();
      Token token12 = xPathLexer4.colon();
      assertEquals(18, token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer(">+B56;0Aqv)LVd7=5");
      Token token13 = xPathLexer0.equals();
      assertEquals("M", token13.getTokenText());
      assertEquals(21, token13.getTokenType());
      
      Token token14 = xPathLexer2.notEquals();
      assertEquals(22, token14.getTokenType());
      
      Token token15 = xPathLexer3.dots();
      assertEquals(13, token15.getTokenType());
      
      Token token16 = xPathLexer5.leftParen();
      assertEquals(">", token16.getTokenText());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.115358145630878
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".t[`#zVh@X(u,|W$");
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("[", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("#", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      xPathLexer0.or();
      xPathLexer0.literal();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("}K<(X!(pEV-w.^");
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer2.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer1.at();
      assertEquals(16, token11.getTokenType());
      assertEquals("}", token11.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("S',p$zhJpGvLW,7R");
      Token token12 = xPathLexer4.notEquals();
      assertEquals("S'", token12.getTokenText());
      
      Token token13 = xPathLexer1.colon();
      assertEquals("K", token13.getTokenText());
      assertEquals(18, token13.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("SpsqX5VG=gP`");
      Token token14 = xPathLexer1.notEquals();
      assertEquals(22, token14.getTokenType());
      
      Token token15 = xPathLexer1.dots();
      assertEquals(13, token15.getTokenType());
      assertEquals("X", token15.getTokenText());
      
      Token token16 = xPathLexer0.dollar();
      assertEquals(26, token16.getTokenType());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.83041643175485
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("5 g]Ti<k|?RL0Ws|");
      xPathLexer0.and();
      Token token3 = xPathLexer1.doubleColon();
      assertEquals("5 ", token3.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token4 = xPathLexer1.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.at();
      XPathLexer xPathLexer2 = new XPathLexer(" p=Jp?5?g9Q(5n>h");
      xPathLexer1.nextToken();
      Token token5 = xPathLexer2.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("p", token5.getTokenText());
      
      xPathLexer0.pipe();
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer3.star();
      assertEquals(20, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token8 = xPathLexer3.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer2.notEquals();
      assertEquals(22, token9.getTokenType());
      assertEquals("=J", token9.getTokenText());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.6719396618246374
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.star();
      xPathLexer0.and();
      xPathLexer2.doubleColon();
      xPathLexer0.leftParen();
      xPathLexer1.nextToken();
      xPathLexer1.doubleColon();
      xPathLexer2.operatorName();
      xPathLexer0.at();
      xPathLexer2.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.equals();
      xPathLexer3.at();
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.notEquals();
      xPathLexer3.colon();
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.243574070575514
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      Token token0 = xPathLexer0.equals();
      assertEquals("X", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("^", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("P", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("U", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token4);
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("\r3", token5.getTokenText());
      
      Token token6 = xPathLexer0.number();
      assertEquals("", token6.getTokenText());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals("d", token7.getTokenText());
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer0.whitespace();
      assertEquals("", token8.getTokenText());
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer0.leftParen();
      assertEquals(">", token9.getTokenText());
      
      Token token10 = xPathLexer0.minus();
      assertEquals(6, token10.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('a');
      assertTrue(boolean0);
      
      xPathLexer0.or();
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token12 = xPathLexer1.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      Token token13 = xPathLexer0.not();
      assertEquals(23, token13.getTokenType());
      
      Token token14 = xPathLexer0.plus();
      assertEquals(5, token14.getTokenType());
      
      xPathLexer1.mod();
      Token token15 = xPathLexer0.literal();
      assertNull(token15);
      
      Token token16 = xPathLexer1.pipe();
      assertEquals(17, token16.getTokenType());
      
      Token token17 = xPathLexer0.dots();
      assertEquals(13, token17.getTokenType());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.1316491075481054
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z,AHG");
      xPathLexer0.colon();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(",", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("AH", token2.getTokenText());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("G", token3.getTokenText());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("z,AHG");
      xPathLexer1.and();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer1.identifier();
      Token token8 = xPathLexer1.rightParen();
      assertEquals(2, token8.getTokenType());
      
      xPathLexer1.and();
      Token token9 = xPathLexer1.at();
      assertEquals("A", token9.getTokenText());
      
      xPathLexer0.operatorName();
      Token token10 = xPathLexer1.minus();
      assertEquals("H", token10.getTokenText());
      
      xPathLexer1.div();
      xPathLexer1.nextToken();
      xPathLexer1.pipe();
      Token token11 = xPathLexer0.pipe();
      assertEquals(17, token11.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token12 = xPathLexer0.number();
      assertEquals(30, token12.getTokenType());
      
      xPathLexer0.nextToken();
      Token token13 = xPathLexer0.slashes();
      assertEquals(11, token13.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("z,AHG");
      Token token14 = xPathLexer0.minus();
      assertEquals(6, token14.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("g_/`= QyZIp.");
      Token token15 = xPathLexer1.getPreviousToken();
      assertEquals(15, token15.getTokenType());
      
      Token token16 = xPathLexer3.at();
      assertEquals(16, token16.getTokenType());
      
      Token token17 = xPathLexer2.colon();
      assertEquals(18, token17.getTokenType());
      assertEquals("z", token17.getTokenText());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.2374985760834152
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      XPathLexer xPathLexer1 = new XPathLexer("X^PU\r3dM>My");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("X", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.0511722242605557
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".t[`#zVh@X(u,|W$");
      Token token0 = xPathLexer0.plus();
      assertEquals(".", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("t", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.not();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("`", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("#", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("z", token4.getTokenText());
      
      xPathLexer0.literal();
      Token token5 = xPathLexer0.identifier();
      assertEquals("", token5.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      xPathLexer0.nextToken();
      Token token9 = xPathLexer0.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.8379604688137445
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CVuB*X");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("CVuB", token0.getTokenText());
      
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.consume();
      xPathLexer0.literal();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.identifier();
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      xPathLexer1.or();
      Token token6 = xPathLexer1.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.div();
      Token token8 = xPathLexer1.not();
      assertEquals(23, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.colon();
      Token token9 = xPathLexer1.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer1.identifier();
      assertEquals(15, token10.getTokenType());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.76451251013669
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Rp+$fJ");
      Token token0 = xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      xPathLexer0.consume((-1));
      Token token2 = xPathLexer0.equals();
      assertEquals("p", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("$", token4.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      String string0 = token5.toString();
      assertEquals("[ (22) (fJ)", string0);
      
      token3.toString();
      String string1 = token3.toString();
      assertEquals("[ (18) (+)", string1);
      
      String string2 = token0.toString();
      assertEquals("[ (4) (R)", string2);
      
      xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("p", token1.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.at();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      Token token6 = xPathLexer1.rightParen();
      assertEquals(2, token6.getTokenType());
      
      Token token7 = xPathLexer1.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token8);
      assertEquals(15, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token9 = xPathLexer2.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.literal();
      assertNull(token10);
      
      xPathLexer0.comma();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token11 = xPathLexer3.slashes();
      assertEquals(11, token11.getTokenType());
      
      xPathLexer3.comma();
      xPathLexer3.or();
      xPathLexer2.relationalOperator();
      Token token12 = xPathLexer2.dollar();
      assertEquals(26, token12.getTokenType());
      
      Token token13 = xPathLexer2.comma();
      assertEquals(32, token13.getTokenType());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.8623398661735497
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.slashes();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.8726810303356993
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".t[`#zVh@X(u,|W$");
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer(".t[`#zVh@X(u,|W$");
      xPathLexer0.pipe();
      xPathLexer0.relationalOperator();
      xPathLexer1.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.at();
      xPathLexer2.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.colon();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer1.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.081106150883218
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".t[`#zVh@X(u,|W$");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(".", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("t", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("[", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("`", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("#", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.literal();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.doubleColon();
      xPathLexer0.doubleColon();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer(".t[`#zVh@X(u,|W$");
      Token token7 = xPathLexer1.nextToken();
      assertEquals(".", token7.getTokenText());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals("t[`#zVh@X(u,|W$", token8.getTokenText());
      
      Token token9 = xPathLexer1.pipe();
      assertEquals("t", token9.getTokenText());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token11 = xPathLexer1.star();
      assertEquals("[", token11.getTokenText());
      assertEquals(20, token11.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer(")");
      Token token12 = xPathLexer3.at();
      assertEquals(16, token12.getTokenType());
      assertEquals(")", token12.getTokenText());
      
      Token token13 = xPathLexer1.notEquals();
      assertEquals("`#", token13.getTokenText());
      assertEquals(22, token13.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer(".t[`#zVh@X(u,|W$");
      Token token14 = xPathLexer4.colon();
      assertEquals(".", token14.getTokenText());
      
      Token token15 = xPathLexer0.colon();
      assertEquals(18, token15.getTokenType());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.0314786847014132
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X^PU\r3dM>My");
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("P", token0.getTokenText());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("U", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("\r", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token3 = xPathLexer0.dots();
      assertEquals("M", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals(">M", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals("y", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("]QZ`8?sn'z}G7f@?");
      Token token6 = xPathLexer1.nextToken();
      assertEquals("]", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer1.colon();
      assertEquals("Q", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      xPathLexer1.nextToken();
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer1.comma();
      assertEquals(32, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer1.nextToken();
      assertEquals("`8?sn'z}G7f@?", token11.getTokenText());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.838621249663616
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("#@NXs(m3FktIs\"\"J");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.currentPosition();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer3.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer2.star();
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer3.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer1.minus();
      assertEquals(6, token8.getTokenType());
      assertEquals("#", token8.getTokenText());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.3635833615806687
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("1MTX$65Bi[?GSv}");
      Token token0 = xPathLexer1.notEquals();
      assertEquals("1M", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.star();
      xPathLexer1.identifier();
      Token token2 = xPathLexer1.leftParen();
      assertEquals("$", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer1.slashes();
      assertEquals("6", token3.getTokenText());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.not();
      Token token6 = xPathLexer1.whitespace();
      assertEquals("", token6.getTokenText());
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer0.rightParen();
      Token token7 = xPathLexer1.not();
      assertEquals("B", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      assertNotNull(token9);
      
      Token token10 = xPathLexer1.pipe();
      assertEquals(17, token10.getTokenType());
      
      xPathLexer1.mod();
      Token token11 = xPathLexer1.rightParen();
      assertEquals(2, token11.getTokenType());
      assertEquals("?", token11.getTokenText());
      
      xPathLexer0.number();
      xPathLexer1.isIdentifierChar('a');
      xPathLexer0.and();
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer1.number();
      assertEquals(30, token13.getTokenType());
      assertEquals("", token13.getTokenText());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.1663420188155196
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Dnj*(Av-eZ.");
      Token token0 = xPathLexer0.identifier();
      assertEquals("Dnj", token0.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("*", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("A", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals("v-eZ.", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.div();
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.colon();
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(16, int0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.3864644529630925
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("1MTX$65Bi[?GSv}");
      Token token0 = xPathLexer1.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("1M", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer1.identifier();
      assertEquals("TX", token3.getTokenText());
      
      Token token4 = xPathLexer1.leftParen();
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer1.equals();
      assertEquals("6", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("5", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("HokhY5/A!Oi[0ET4");
      Token token8 = xPathLexer3.pipe();
      assertEquals("H", token8.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.mod();
      Token token9 = xPathLexer4.rightParen();
      assertEquals(2, token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("1MTX$65Bi[?GSv}");
      Token token10 = xPathLexer5.number();
      assertEquals(30, token10.getTokenType());
      
      xPathLexer4.isIdentifierChar('?');
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer0.and();
      XPathLexer xPathLexer7 = new XPathLexer("[ (");
      Token token11 = xPathLexer7.at();
      assertEquals("[", token11.getTokenText());
      assertEquals(16, token11.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
      
      Token token12 = xPathLexer0.not();
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer7.plus();
      assertEquals(" ", token13.getTokenText());
      assertEquals(5, token13.getTokenType());
      
      xPathLexer1.div();
      char char1 = xPathLexer3.LA(0);
      assertEquals('H', char1);
      
      Token token14 = xPathLexer5.comma();
      assertEquals("M", token14.getTokenText());
      assertEquals(32, token14.getTokenType());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.7126423472168546
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.dots();
      xPathLexer0.equals();
      xPathLexer0.star();
      xPathLexer0.rightParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      xPathLexer0.whitespace();
      xPathLexer0.notEquals();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.588745524838977
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.identifier();
      xPathLexer0.not();
      xPathLexer0.literal();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.plus();
      Token token2 = xPathLexer0.and();
      assertNull(token2);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.750399701428935
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>}{Lrm@[m>qw6x(Ht");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(".", token0.getTokenText());
      assertNotNull(token0);
      assertEquals(15, token0.getTokenType());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.2580285898956216
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.star();
      assertEquals(".", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.equals();
      assertEquals(">", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      Token token2 = xPathLexer2.at();
      assertEquals(16, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("}", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer0.notEquals();
      assertEquals("{L", token4.getTokenText());
      
      Token token5 = xPathLexer3.colon();
      assertEquals(18, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      Token token6 = xPathLexer1.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer2.notEquals();
      assertEquals(">}", token7.getTokenText());
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer2.dots();
      assertEquals("{", token8.getTokenText());
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer4.leftParen();
      assertEquals(1, token9.getTokenType());
      assertEquals(".", token9.getTokenText());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.661285620954639
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z,KAHG");
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("q@y2*+{~S>K[>G 0n");
      xPathLexer1.number();
      xPathLexer0.relationalOperator();
      xPathLexer1.number();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals(",", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("KA", token1.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("q@y2*+{~S>K[>G 0n");
      Token token2 = xPathLexer3.not();
      assertEquals("q", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      xPathLexer3.or();
      Token token3 = xPathLexer3.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("@", token3.getTokenText());
      
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("q", token4.getTokenText());
      
      Token token5 = xPathLexer2.number();
      assertEquals(30, token5.getTokenType());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.9002589947729488
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(13, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
  }
}
