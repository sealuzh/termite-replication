/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 12:53:15 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3423901693012241
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.remove(object0);
      Spliterator spliterator0 = jSSubstitution1.spliterator();
      jSSubstitution1.add((Object) spliterator0);
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.stream();
      jSSubstitution0.add((Object) "%%%");
      jSSubstitution0.removeElement(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.cloneS();
      StringReader stringReader0 = new StringReader("9.0");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-2464), 1456);
      streamTokenizer0.pushBack();
      streamTokenizer0.slashSlashComments(true);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution3);
      jSSubstitution2.add((Object) jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution4);
      jSTerm0.listIterator();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Object> function0 = unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      Function<Integer, Object> function1 = unaryOperator1.compose((Function<? super Integer, ?>) unaryOperator0);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      jSTerm0.makeEval(true);
      function1.andThen((Function<? super Object, ? extends Integer>) function2);
      jSSubstitution1.ensureCapacity((-1115400981));
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      jSSubstitution1.replaceAll(unaryOperator0);
      Object object0 = new Object();
      jSSubstitution3.replaceAll(unaryOperator2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm0.print();
      Function.identity();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution3.add((Object) "UkG~\">tF8");
      jSSubstitution1.add(object0);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      Object object1 = new Object();
      jSSubstitution3.add((Object) function0);
      // Undeclared exception!
      try { 
        jSSubstitution3.standarizerSubs();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.15022055411895
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution2);
      jSSubstitution2.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) jSSubstitution2);
      jSSubstitution0.stream();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution3.sort(comparator0);
      jSSubstitution3.spliterator();
      jSSubstitution3.removeAllElements();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution6.replaceAll(unaryOperator0);
      jSSubstitution4.add((Object) jSSubstitution6);
      jSSubstitution5.removeAll(jSSubstitution4);
      jSTerm0.makeEval(true);
      jSSubstitution4.add((Object) jSSubstitution5);
      jSSubstitution2.add((Object) jSSubstitution4);
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution3.standarizerSubs();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution6);
      assertTrue(jSTerm0.isEval());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3126328398468408
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.removeAllElements();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9459959973559475
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(3704);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.quoteChar(3704);
      StringReader stringReader1 = new StringReader("e");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.resetSyntax();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate<Object> predicate5 = predicate3.or(predicate0);
      Predicate<Object> predicate6 = predicate4.and(predicate1);
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate2.negate();
      predicate8.negate();
      predicate2.and(predicate5);
      predicate8.and(predicate4);
      predicate1.negate();
      Predicate.isEqual((Object) predicate4);
      predicate0.and(predicate2);
      predicate6.negate();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) predicate4);
      System.setCurrentTimeMillis((-14L));
      predicate4.and(predicate7);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8611089903737643
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(3704);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.quoteChar(3704);
      StringReader stringReader1 = new StringReader("e");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.resetSyntax();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.matches(jSPredicateForm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate<Object> predicate5 = predicate3.or(predicate0);
      Predicate<Object> predicate6 = predicate4.and(predicate1);
      predicate5.negate();
      Predicate<Object> predicate7 = predicate2.negate();
      predicate7.negate();
      predicate2.and(predicate5);
      predicate7.and(predicate4);
      predicate1.negate();
      Predicate.isEqual((Object) predicate4);
      predicate0.and(predicate2);
      predicate6.negate();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) predicate4);
      System.setCurrentTimeMillis((-14L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$50/437807526 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.136920820622443
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0272885071730684
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StringReader stringReader1 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.quoteChar(3704);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSTerm jSTerm2 = new JSTerm();
      JSJshopVars.flagLevel = (-1415);
      char[] charArray0 = new char[2];
      charArray0[0] = ':';
      charArray0[1] = ':';
      stringReader1.read(charArray0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      jSTerm1.matches(jSTerm5);
      jSTerm5.matches(jSTerm1, jSSubstitution0);
      System.setCurrentTimeMillis(310L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1975L));
      JSSubstitution jSSubstitution2 = jSTerm5.matches(jSTerm1);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.544552382804742
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cLO5^4U| %'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate3.or(predicate6);
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate10 = predicate8.and(predicate9);
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate1.negate();
      Predicate<Object> predicate13 = predicate12.negate();
      Predicate.isEqual((Object) predicate13);
      predicate8.and(predicate13);
      predicate6.and(predicate4);
      Predicate<Object> predicate14 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate15 = predicate11.and(predicate2);
      Predicate<Object> predicate16 = predicate14.or(predicate15);
      predicate1.negate();
      predicate10.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution1);
      predicate7.and(predicate10);
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.removeIf(predicate16);
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeEval(true);
      jSTerm0.call();
      stringReader0.close();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("5a2");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7689192975524
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "e";
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(3704);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.quoteChar(3704);
      StringReader stringReader1 = new StringReader("e");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.resetSyntax();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.matches(jSPredicateForm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate<Object> predicate5 = predicate3.or(predicate0);
      Predicate<Object> predicate6 = predicate4.and(predicate1);
      predicate5.negate();
      Predicate<Object> predicate7 = predicate2.negate();
      predicate7.negate();
      predicate2.and(predicate5);
      predicate7.and(predicate4);
      predicate1.negate();
      Predicate.isEqual((Object) predicate4);
      predicate0.and(predicate2);
      predicate6.negate();
      jSTerm0.makeFunction();
      jSTerm0.add((Object) predicate4);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$50/437807526 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.stream();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution1);
      jSSubstitution2.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.removeElements(jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution5);
      jSSubstitution2.add((Object) jSSubstitution4);
      jSSubstitution0.stream();
      jSSubstitution2.iterator();
      jSSubstitution1.spliterator();
      StringReader stringReader0 = new StringReader("9(*gSP'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution4.replaceAll(unaryOperator0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.lessT = (-2);
      char[] charArray0 = new char[11];
      jSSubstitution0.spliterator();
      charArray0[2] = '\u0015';
      charArray0[3] = '\u0015';
      charArray0[4] = '?';
      charArray0[5] = 'e';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      stringReader0.reset();
      jSSubstitution4.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.stream();
      jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.iterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5611877090735962
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      JSJshopVars.rightBrac = 32;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.stream();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("9(*gSP'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "9(*gSP'";
      streamTokenizer0.quoteChar(32);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = (-2);
      streamTokenizer0.wordChars((-1321), (-1321));
      streamTokenizer0.sval = null;
      streamTokenizer0.wordChars(32, 32);
      JSJshopVars.exclamation = 32;
      JSJshopVars.greaterT = 32;
      jSSubstitution1.trimToSize();
      stringReader0.read();
      streamTokenizer0.ordinaryChars(32, 32);
      JSJshopVars.apostrophe = 32;
      streamTokenizer0.pushBack();
      JSJshopVars.equalT = 32;
      streamTokenizer0.slashSlashComments(false);
      JSJshopVars.semicolon = 92;
      JSJshopVars.backquote = 32;
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      Predicate<String> predicate0 = Predicate.isEqual((Object) null);
      StringReader stringReader0 = new StringReader("%oD1");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      predicate4.test(predicate3);
      Predicate<String> predicate5 = predicate0.or(predicate4);
      predicate0.and(predicate1);
      stringReader0.mark(63);
      jSTerm0.removeIf(predicate5);
      jSTerm0.removeAllElements();
      System.setCurrentTimeMillis((-2336L));
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4142880540958127
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.colon = 40;
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      jSSubstitution2.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) jSSubstitution2);
      jSSubstitution0.stream();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution3.sort(comparator0);
      Spliterator spliterator0 = jSSubstitution3.spliterator();
      jSSubstitution3.removeAllElements();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Object object0 = jSTerm0.lastElement();
      jSSubstitution5.add((Object) spliterator0);
      jSSubstitution4.add(object0);
      jSSubstitution5.removeAll(jSSubstitution4);
      jSSubstitution4.add((Object) jSSubstitution5);
      jSSubstitution2.add((Object) jSSubstitution4);
      jSSubstitution2.add((Object) jSSubstitution3);
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1531782505128936
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = jSTerm0.clone();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate3.or(predicate4);
      predicate1.or(predicate0);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate4.negate();
      Object object1 = jSTerm0.clone();
      Predicate.isEqual(object1);
      Predicate<Object> predicate8 = predicate5.or(predicate3);
      Predicate<Object> predicate9 = predicate7.or(predicate6);
      predicate0.negate();
      predicate9.negate();
      Predicate<Object> predicate10 = predicate2.or(predicate8);
      predicate10.negate();
      predicate2.and(predicate0);
      predicate9.and(predicate5);
      predicate6.and(predicate7);
      Predicate<Object> predicate11 = predicate5.or(predicate3);
      predicate9.negate();
      Predicate<Object> predicate12 = predicate6.negate();
      predicate3.or(predicate1);
      Predicate.isEqual((Object) predicate8);
      predicate7.and(predicate11);
      predicate12.or(predicate1);
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.removeIf(predicate7);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6682579102863673
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.containsAll(jSTerm0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[18];
      objectArray0[0] = (Object) jSTerm1;
      JSJshopVars.coma = 2;
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[4] = (Object) jSSubstitution0;
      jSTerm1.removeAll(jSTerm0);
      objectArray0[3] = (Object) stringReader0;
      jSTerm0.toArray(objectArray0);
      stringReader0.markSupported();
      streamTokenizer0.lowerCaseMode(true);
      JSJshopVars.dot = 2;
      jSTerm0.equals(jSTerm1);
      jSTerm0.equals(jSTerm0);
      jSTerm0.matches(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      streamTokenizer0.quoteChar(41);
      System.setCurrentTimeMillis((-465L));
      stringReader0.reset();
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1687174009500523
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.stream();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = jSSubstitution3.standarizerSubs();
      jSSubstitution5.listIterator();
      jSSubstitution2.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.retainAll(jSSubstitution5);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution7.standarizerSubs();
      jSSubstitution3.add((Object) jSSubstitution7);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution6.stream();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution3.stream();
      StringReader stringReader0 = new StringReader("9(*gS'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(47);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.wordChars((-2), (-1321));
      streamTokenizer0.wordChars(41, (-1321));
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      jSSubstitution12.cloneS();
      jSSubstitution12.containsAll(jSSubstitution10);
      jSSubstitution10.add((Object) jSSubstitution12);
      jSSubstitution10.add((Object) jSSubstitution11);
      jSSubstitution10.trimToSize();
      stringReader0.read();
      streamTokenizer0.pushBack();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.553594965028978
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "e");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate1);
      predicate3.or(predicate2);
      Predicate<Object> predicate6 = predicate2.negate();
      predicate5.negate();
      Predicate<Object> predicate7 = predicate5.and(predicate4);
      Object object0 = new Object();
      jSTerm1.firstElement();
      predicate1.test("%%%");
      predicate6.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution1);
      predicate5.negate();
      predicate7.negate();
      predicate0.or(predicate5);
      jSSubstitution0.add((Object) "e");
      jSSubstitution1.add((Object) predicate7);
      jSSubstitution1.add((Object) predicate6);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.toStr();
      jSTerm2.toStr();
      jSTerm0.toStr();
      jSTerm1.standardizerTerm();
      jSTerm0.cloneT();
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Stream stream0 = jSSubstitution1.stream();
      jSTerm0.add((Object) jSSubstitution1);
      UnaryOperator.identity();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution2);
      jSSubstitution2.add((Object) null);
      jSSubstitution1.stream();
      Object object0 = jSTerm0.lastElement();
      jSSubstitution1.add(object0);
      jSTerm0.add(object0);
      jSSubstitution0.removeElement(jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.cloneS();
      jSSubstitution1.iterator();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution0.containsAll(jSSubstitution5);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSSubstitution jSSubstitution6 = (JSSubstitution)jSTerm1.lastElement();
      jSTerm1.removeElement(jSSubstitution6);
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSSubstitution2.add((Object) jSTerm2);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution0.add((Object) stream0);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Spliterator spliterator0 = jSSubstitution1.spliterator();
      jSSubstitution1.add((Object) spliterator0);
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.stream();
      jSSubstitution0.add((Object) "%%%");
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.removeElement(jSSubstitution0);
      Object object1 = new Object();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution1.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.551431243427824
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "e");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate1);
      predicate2.or(predicate1);
      predicate0.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate3);
      Object object0 = new Object();
      jSTerm1.firstElement();
      predicate1.test("%%%");
      Predicate<Object> predicate7 = predicate1.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate8 = Predicate.isEqual((Object) jSSubstitution1);
      predicate4.negate();
      predicate6.negate();
      Predicate<Object> predicate9 = predicate0.or(predicate4);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate5);
      predicate9.and(predicate10);
      Predicate<Object> predicate11 = predicate1.and(predicate8);
      predicate11.and(predicate7);
      predicate0.or(predicate2);
      jSTerm1.cloneT();
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.431848439223888
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      int int0 = 40;
      JSJshopVars.colon = 40;
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      jSSubstitution2.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) jSSubstitution2);
      jSSubstitution0.stream();
      JSSubstitution jSSubstitution3 = (JSSubstitution)jSTerm0.firstElement();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution3.sort(comparator0);
      Spliterator spliterator0 = jSSubstitution3.spliterator();
      jSSubstitution3.removeAllElements();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) spliterator0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution5.add((Object) spliterator0);
      jSSubstitution4.add((Object) jSSubstitution6);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cLO5^4U| %'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.mark(62);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?[w*");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate1.negate();
      jSTerm0.listIterator();
      predicate4.negate();
      predicate1.negate();
      Predicate<Object> predicate5 = predicate1.negate();
      predicate2.negate();
      predicate5.test((Object) null);
      predicate0.negate();
      predicate0.and(predicate5);
      Predicate<Object> predicate6 = predicate3.negate();
      predicate3.negate();
      predicate6.test(predicate1);
      Predicate<Object> predicate7 = predicate6.negate();
      predicate7.and(predicate1);
      predicate7.and(predicate4);
      predicate7.test(predicate3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm0.setSize(55);
      JSJshopVars.percent = 55;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "5");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.lastElement();
      jSSubstitution0.add((Object) null);
      jSSubstitution1.add((Object) "5");
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.ordinaryChars((-4), 1527);
      streamTokenizer0.ordinaryChar(2968);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.ttype = 1;
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.quoteChar(60);
      streamTokenizer1.commentChar(1527);
      streamTokenizer0.quoteChar((-2815));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.quoteChar((-2815));
      stringReader0.markSupported();
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer0.wordChars(1, (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(4652);
      streamTokenizer3.commentChar(60);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.358992823761751
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?RQ~M+@iX|r)/X_");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.listIterator();
      jSTerm0.matches(jSTerm1);
      streamTokenizer0.resetSyntax();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9095872752319165
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "e");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate1);
      Predicate<Object> predicate6 = predicate3.or(predicate2);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate9 = predicate0.or(predicate6);
      predicate9.or(predicate7);
      predicate7.negate();
      predicate9.negate();
      predicate3.or(predicate9);
      predicate2.negate();
      predicate5.and(predicate4);
      predicate2.and(predicate7);
      Predicate<Object> predicate10 = predicate8.and(predicate0);
      Predicate<Object> predicate11 = predicate8.or(predicate0);
      Predicate<Object> predicate12 = predicate10.negate();
      predicate12.negate();
      predicate7.or(predicate2);
      Predicate.isEqual((Object) predicate11);
      predicate7.and(predicate12);
      predicate6.or(predicate1);
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.removeIf(predicate6);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.cloneT();
      jSTerm2.call();
      jSTerm2.standardizerTerm();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.481219380248591
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-1087));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.stream();
      jSTerm2.equals(jSTerm0);
      jSTerm2.toString();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.isEmpty();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.cloneT();
      jSTerm2.isGround();
      jSSubstitution0.removeElement(jSSubstitution1);
      System.setCurrentTimeMillis(5914L);
      // Undeclared exception!
      try { 
        jSTerm3.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.666131710298364
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.verticalL = (-3118);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm1.containsAll(jSTerm0);
      Object object0 = new Object();
      JSJshopVars.leftBrac = 1492;
      Object[] objectArray0 = new Object[18];
      objectArray0[0] = (Object) jSTerm2;
      JSJshopVars.coma = 2;
      JSTerm jSTerm3 = new JSTerm();
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[4] = (Object) jSSubstitution0;
      jSTerm2.removeAll(jSTerm0);
      objectArray0[3] = (Object) stringReader0;
      jSTerm1.toArray(objectArray0);
      stringReader0.markSupported();
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm4 = new JSTerm();
      JSJshopVars.dot = 2;
      jSTerm0.equals(jSTerm4);
      jSTerm4.equals(jSTerm4);
      JSTerm jSTerm5 = new JSTerm();
      streamTokenizer0.quoteChar(41);
      System.setCurrentTimeMillis((-465L));
      stringReader0.reset();
      // Undeclared exception!
      try { 
        jSTerm5.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0477604168384906
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeFunction();
      jSTerm1.spliterator();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.054156239727169
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.sort((Comparator) null);
      StringReader stringReader0 = new StringReader("in");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm3, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-1064), (-1438701430));
      stringReader0.reset();
      streamTokenizer0.commentChar(47);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm4.isEval());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6131190722623394
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = 41;
      jSTerm2.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.stream();
      jSTerm2.firstElement();
      Object object0 = jSTerm0.clone();
      jSSubstitution1.add(object0);
      jSTerm2.makeFunction();
      jSTerm1.isGround();
      System.setCurrentTimeMillis(0L);
      jSTerm2.cloneT();
      JSTerm jSTerm3 = new JSTerm();
      assertFalse(jSTerm3.equals((Object)jSTerm1));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7039917864324614
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(55);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      Predicate<Object> predicate5 = predicate4.and(predicate3);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate5);
      Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate8 = predicate0.negate();
      Predicate<Object> predicate9 = predicate7.and(predicate8);
      predicate9.and(predicate2);
      predicate0.and(predicate8);
      predicate6.or(predicate1);
      predicate5.and(predicate2);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.8576599329500976
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution4);
      jSSubstitution3.add((Object) jSSubstitution2);
      jSSubstitution3.stream();
      JSSubstitution jSSubstitution5 = (JSSubstitution)jSTerm0.firstElement();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution5.sort(comparator0);
      jSSubstitution5.removeAllElements();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution6);
      jSSubstitution2.add((Object) jSSubstitution5);
      jSTerm1.isGround();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.print();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm3.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.600952181477168
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      jSTerm1.standardizerTerm();
      Object[] objectArray0 = new Object[18];
      objectArray0[0] = (Object) jSSubstitution0;
      Iterator iterator0 = jSSubstitution0.iterator();
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) stringReader0;
      objectArray0[4] = (Object) jSTerm1;
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.add((Object) iterator0);
      jSTerm1.isConstant();
      Object object0 = new Object();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector$Itr cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.3754301107544618
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cLO5^4U| %'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(46);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.resetSyntax();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.containsAll(jSSubstitution0);
      Object object0 = new Object();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.standardizerTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm2.isConstant();
      Object object1 = new Object();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.listIterator();
      jSTerm1.toStr();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.addElement(stringReader0);
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm0.setSize(55);
      StringReader stringReader0 = new StringReader("9.0");
      stringReader0.close();
      jSTerm0.isEmpty();
      StringReader stringReader1 = new StringReader("b");
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.619997118136666
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.spliterator();
      stringReader0.skip((-1));
      jSTerm0.ensureCapacity((-1));
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm3.applySubstitutionPF(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.935505469390448
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StringReader stringReader1 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.quoteChar(3704);
      StringReader stringReader2 = new StringReader("%%%0");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader2);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate<Object> predicate5 = predicate3.or(predicate0);
      predicate4.and(predicate1);
      predicate3.test((Object) null);
      predicate3.or(predicate2);
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate6.or(predicate4);
      predicate1.negate();
      predicate6.or(predicate1);
      Predicate.isEqual((Object) predicate7);
      jSTerm0.makeFunction();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate5.and(predicate7);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm0.equals(jSTerm0);
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm1.isConstant());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5745935476096795
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Spliterator spliterator0 = jSSubstitution1.spliterator();
      jSSubstitution1.add((Object) spliterator0);
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.stream();
      jSSubstitution0.add((Object) "%%%");
      jSTerm0.add((Object) null);
      jSSubstitution0.removeElement(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSSubstitution2.cloneS();
      jSSubstitution2.iterator();
      jSSubstitution3.containsAll(jSSubstitution0);
      Iterator iterator0 = jSSubstitution3.iterator();
      jSSubstitution2.add((Object) iterator0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution4);
      jSSubstitution3.add((Object) jSTerm0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.stream();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.stream();
      jSSubstitution3.iterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.cloneS();
      jSSubstitution4.add((Object) unaryOperator0);
      jSSubstitution3.add((Object) jSSubstitution4);
      jSSubstitution3.clone();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator1);
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.3631322031433784
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.colon = 40;
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      jSSubstitution2.add((Object) jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.stream();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.removeElement(jSSubstitution0);
      char[] charArray0 = new char[8];
      charArray0[7] = 'p';
      charArray0[2] = '8';
      charArray0[4] = 'p';
      charArray0[5] = 'p';
      charArray0[6] = '?';
      charArray0[7] = '?';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap(charArray0);
      StringReader stringReader0 = new StringReader("fyIW0)9}26e)A-MkGY");
      stringReader0.read(charBuffer0);
      jSSubstitution0.removeAllElements();
      stringReader0.close();
      StringReader stringReader1 = new StringReader("fyIW0)9}26e)A-MkGY");
      stringReader1.reset();
      stringReader0.close();
      stringReader1.read(charArray0);
      stringReader1.skip(8);
      jSSubstitution0.add((Object) "fyIW0)9}26e)A-MkGY");
      jSSubstitution0.add((Object) charBuffer0);
      jSSubstitution0.add((Object) stringReader0);
      jSSubstitution0.trimToSize();
      stringReader1.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.commentChar(759);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6036051515160747
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.stream();
      jSSubstitution0.removeElement(jSSubstitution0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      charArray0[2] = '8';
      charArray0[4] = 'e';
      charArray0[5] = 'e';
      charArray0[6] = '?';
      charArray0[7] = '?';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer.wrap(charArray0);
      StringReader stringReader0 = new StringReader("fyIW0)9}26e)A-MkGY");
      stringReader0.read(charBuffer0);
      jSSubstitution0.removeAllElements();
      jSSubstitution0.standarizerSubs();
      stringReader0.reset();
      stringReader0.skip(8);
      jSSubstitution0.add((Object) "i()");
      StringReader stringReader1 = new StringReader("g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3447004957129813
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9ph}]z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(44, 2);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSJshopVars.leftBrac = 108;
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.724187360919323
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.stream();
      jSTerm1.equals(jSTerm0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.firstElement();
      JSJshopVars.dot = (-1);
      jSTerm2.toArray();
      jSSubstitution0.stream();
      jSTerm2.equals(jSTerm1);
      jSTerm2.toString();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.isEmpty();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      stringReader0.ready();
      jSTerm0.isGround();
      jSTerm3.isGround();
      streamTokenizer0.parseNumbers();
      jSSubstitution0.removeElement("e");
      System.setCurrentTimeMillis(0L);
      JSJshopVars.plus = 60;
      jSTerm2.cloneT();
      JSTerm jSTerm5 = new JSTerm();
      int int0 = 45;
      // Undeclared exception!
      try { 
        jSTerm1.addAll(45, (Collection) jSTerm4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 45
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.0739200498340806
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.setSize(47);
      jSTerm0.removeAllElements();
      jSTerm0.setSize(34);
      StringReader stringReader0 = new StringReader("9.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.665515979580288
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cLO5^4U| %'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.mark(62);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?[w*");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate4);
      ListIterator listIterator0 = jSTerm0.listIterator();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate0);
      Predicate<Object> predicate8 = predicate1.negate();
      predicate3.negate();
      predicate8.or(predicate2);
      predicate7.negate();
      predicate8.test((Object) null);
      Predicate<Object> predicate9 = predicate0.negate();
      Predicate.isEqual((Object) listIterator0);
      predicate0.negate();
      predicate0.and(predicate8);
      Predicate<Object> predicate10 = predicate7.negate();
      predicate10.and(predicate5);
      predicate3.negate();
      predicate10.test(predicate1);
      predicate9.and(predicate1);
      predicate5.and(predicate4);
      predicate6.test(predicate3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis((-1636L));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0134141622493718
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = 41;
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.isConstant();
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSTerm1;
      jSTerm2.toArray(objectArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-1), 1);
      jSTerm0.isVariable();
      jSTerm2.print();
      jSTerm1.isFunction();
      JSTerm jSTerm3 = jSTerm1.call();
      jSTerm3.equals(jSTerm1);
      jSTerm0.matches(jSTerm1);
      jSTerm3.isFunction();
      jSTerm3.isVariable();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm2.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.6918827769478546
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution3);
      jSSubstitution3.add((Object) jSSubstitution2);
      jSSubstitution3.stream();
      JSSubstitution jSSubstitution4 = (JSSubstitution)jSTerm0.firstElement();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution4.sort(comparator0);
      jSSubstitution4.removeAllElements();
      jSTerm1.retainAll(jSSubstitution4);
      StringReader stringReader0 = new StringReader("");
      jSTerm0.equals(jSTerm1);
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.312712123916135
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate.isEqual((Object) jSTerm0);
      jSTerm0.setSize(1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.spliterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.retainAll(jSTerm0);
      StringReader stringReader0 = new StringReader("");
      jSTerm0.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.162997098280668
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSSubstitution0.stream();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      jSSubstitution1.add((Object) jSSubstitution2);
      jSTerm0.retainAll(jSSubstitution2);
      jSTerm1.setSize(38);
      jSTerm0.setSize(2608);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.add((Object) jSSubstitution1);
      jSSubstitution4.add((Object) jSSubstitution5);
      jSSubstitution4.add((Object) jSSubstitution2);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution4);
      jSTerm0.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution7);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSSubstitution2.replaceAll(unaryOperator0);
      Object object0 = new Object();
      jSSubstitution0.removeElement(jSSubstitution3);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.lowerCaseMode(false);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[nil]", jSTerm1.toString());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 47;
      jSTerm0.makeEval(true);
      JSJshopVars.apostrophe = 47;
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "variable");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) ": ");
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<String> predicate3 = predicate0.and(predicate2);
      Predicate<String> predicate4 = predicate3.or(predicate1);
      predicate0.or(predicate4);
      predicate0.negate();
      predicate4.and(predicate2);
      StringReader stringReader0 = new StringReader("iJs LxG=a8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeIf(predicate1);
      jSTerm0.removeAllElements();
      System.setCurrentTimeMillis(32);
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSTerm0;
      jSTerm0.makeVariable();
      objectArray0[1] = (Object) jSTerm0;
      JSJshopVars.semicolon = (-2092);
      jSTerm0.toArray(objectArray0);
      JSJshopVars.leftBrac = 2179;
      JSJshopVars.coma = (-2092);
      JSJshopVars.VarCounter = 93;
      jSTerm0.isVariable();
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertTrue(jSTerm0.isVariable());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.315853451763105
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.stream();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.removeElement(jSSubstitution0);
      StringReader stringReader0 = new StringReader("fyIW0)9}26e)A-MkGY");
      jSSubstitution0.removeAllElements();
      JSTerm jSTerm1 = new JSTerm();
      Object object0 = jSTerm0.clone();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      predicate0.and(predicate3);
      predicate1.or(predicate3);
      predicate2.negate();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) "86ercQpmEOc]");
      Predicate<Object> predicate5 = predicate3.and(predicate1);
      Predicate<Object> predicate6 = predicate5.and(predicate4);
      predicate2.and(predicate4);
      Predicate<Object> predicate7 = predicate4.and(predicate1);
      Predicate<Object> predicate8 = predicate3.and(predicate2);
      predicate8.and(predicate7);
      predicate1.or(predicate0);
      predicate1.and(predicate6);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6384022039854766
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "e");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate1.or(predicate0);
      Predicate<Object> predicate5 = predicate2.or(predicate1);
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate.isEqual((Object) predicate1);
      predicate5.test(predicate6);
      predicate4.and(predicate3);
      predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate7.and(predicate0);
      Predicate<Object> predicate9 = predicate7.or(predicate0);
      Predicate<Object> predicate10 = predicate8.negate();
      predicate5.negate();
      predicate10.negate();
      predicate6.or(predicate1);
      Predicate.isEqual((Object) predicate9);
      predicate6.and(predicate10);
      predicate5.or(predicate0);
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.removeIf(predicate5);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.print();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.ordinaryChars((-4), 1527);
      streamTokenizer0.ordinaryChar(2968);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.ttype = 1;
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.commentChar(1527);
      streamTokenizer0.quoteChar(1);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.quoteChar((-2815));
      stringReader0.markSupported();
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer0.wordChars(1, (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(4652);
      streamTokenizer3.commentChar(60);
      streamTokenizer3.quoteChar(1527);
      streamTokenizer2.slashSlashComments(false);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer3);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5488235345316892
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = Function.identity();
      unaryOperator0.compose((Function<? super Object, ?>) function1);
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.removeAllElements();
      jSTerm0.setSize(34);
      StringReader stringReader0 = new StringReader("XE6zcOM ;PY6TaxOd~q");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.6678005749770657
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "e");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate2.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate1);
      Predicate<Object> predicate6 = predicate3.or(predicate2);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate5.negate();
      predicate4.test(predicate6);
      Predicate<Object> predicate9 = predicate5.and(predicate4);
      Object object0 = new Object();
      jSTerm1.firstElement();
      predicate1.test("%%%");
      Predicate<Object> predicate10 = predicate7.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate11 = Predicate.isEqual((Object) jSSubstitution1);
      predicate11.and(predicate3);
      predicate5.negate();
      predicate9.negate();
      Predicate<Object> predicate12 = predicate0.or(predicate5);
      Predicate<Object> predicate13 = Predicate.isEqual((Object) predicate8);
      predicate12.and(predicate13);
      Predicate<Object> predicate14 = predicate1.and(predicate11);
      predicate14.and(predicate10);
      predicate0.or(predicate3);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.call();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.8053415898278653
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(3704);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.quoteChar(3704);
      StringReader stringReader1 = new StringReader("e");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.resetSyntax();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate<Object> predicate5 = predicate3.or(predicate0);
      predicate4.and(predicate1);
      predicate5.negate();
      Predicate<Object> predicate6 = predicate2.negate();
      predicate6.negate();
      predicate2.and(predicate5);
      predicate6.and(predicate4);
      predicate1.negate();
      Predicate.isEqual((Object) predicate4);
      predicate0.and(predicate2);
      predicate6.or(predicate1);
      jSTerm0.makeFunction();
      jSTerm0.add((Object) predicate4);
      streamTokenizer0.ordinaryChars((-4), (-2843));
      stringReader0.reset();
      streamTokenizer1.slashSlashComments(false);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = Function.identity();
      unaryOperator0.compose((Function<? super Object, ?>) function1);
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.removeAllElements();
      jSTerm0.setSize(34);
      jSTerm0.isVariable();
      System.setCurrentTimeMillis(34);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar(2968);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.ttype = 1;
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.commentChar(1);
      streamTokenizer0.quoteChar(1);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.lowerCaseMode(false);
      stringReader0.markSupported();
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer2.parseNumbers();
      streamTokenizer0.wordChars(1, (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isFunction();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.412628790978395
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.stream();
      jSTerm0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.removeElement(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.stream();
      jSSubstitution4.iterator();
      jSTerm0.cloneT();
      StringReader stringReader0 = new StringReader("9(*gSP'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-1415));
      JSTerm jSTerm2 = new JSTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator0);
      jSSubstitution3.removeAllElements();
      JSTerm jSTerm3 = new JSTerm();
      char[] charArray0 = new char[2];
      charArray0[0] = ':';
      char[] charArray1 = new char[2];
      charArray1[0] = ':';
      charArray1[1] = ':';
      stringReader0.read(charArray1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm1.isFunction();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.7774035244144605
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cLO5^4U| %'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(46);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.resetSyntax();
      jSTerm0.isConstant();
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.lowerCaseMode(true);
      int int0 = (-2815);
      streamTokenizer2.quoteChar((-2815));
      stringReader0.markSupported();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.quoteChar(46);
      streamTokenizer1.slashSlashComments(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.094611328391615
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.stream();
      jSTerm1.isConstant();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.isConstant();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSTerm1;
      streamTokenizer0.ordinaryChars(0, 0);
      jSTerm0.isGround();
      jSTerm1.print();
      jSTerm1.isFunction();
      jSTerm0.spliterator();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm2.equals(jSTerm0);
      jSTerm2.matches(jSTerm1);
      jSTerm3.isFunction();
      jSTerm2.isVariable();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.4751119537296926
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.iterator();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = (Object) jSSubstitution0;
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(47);
      jSTerm0.removeAllElements();
      StringReader stringReader0 = new StringReader("Y&Sanm<&;u)rZ]");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertEquals(41, streamTokenizer0.ttype);
      assertTrue(jSTerm2.equals((Object)jSTerm1));
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5179872908529675
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.stream();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = jSSubstitution3.standarizerSubs();
      jSSubstitution5.listIterator();
      jSSubstitution2.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.retainAll(jSSubstitution5);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution6.add((Object) jSSubstitution7);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = jSSubstitution8.standarizerSubs();
      jSSubstitution3.add((Object) jSSubstitution8);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution6.stream();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSSubstitution3.stream();
      StringReader stringReader0 = new StringReader("9(*gS'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(47);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.wordChars(163, (-1321));
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution2.containsAll(jSTerm1);
      jSSubstitution9.iterator();
      jSSubstitution0.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      jSSubstitution13.add((Object) ") ");
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm2 = jSTerm0.call();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm2.isFunction());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.750318510890527
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.stream();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.removeElement(jSSubstitution0);
      StringReader stringReader0 = new StringReader("fyIW0)9}26e)A-MkGY");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      stringReader0.close();
      StringReader stringReader1 = new StringReader("fyIW0)9}26e)A-MkGY");
      stringReader1.read();
      stringReader1.reset();
      stringReader0.close();
      jSSubstitution0.add((Object) "fyIW0)9}26e)A-MkGY");
      jSTerm1.add((Object) stringReader1);
      System.setCurrentTimeMillis((-14L));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution2);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm2.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.307102025739417
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      jSSubstitution2.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) jSSubstitution2);
      jSSubstitution0.stream();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution3.sort(comparator0);
      jSSubstitution3.spliterator();
      jSSubstitution3.removeAllElements();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution6.replaceAll(unaryOperator0);
      jSSubstitution4.add((Object) jSSubstitution6);
      jSSubstitution5.removeAll(jSSubstitution4);
      jSSubstitution4.add((Object) jSSubstitution5);
      jSSubstitution2.add((Object) jSSubstitution4);
      jSSubstitution2.add((Object) jSSubstitution3);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution6);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(50);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.7646308653001805
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.stream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSSubstitution2.standarizerSubs();
      jSSubstitution4.listIterator();
      jSSubstitution1.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.retainAll(jSSubstitution4);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution5.removeElement(jSSubstitution2);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution6);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution5.stream();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution2.stream();
      StringReader stringReader0 = new StringReader("9(*gSP'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(47);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.wordChars(41, 163);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      jSSubstitution10.add((Object) jSSubstitution12);
      jSSubstitution10.add((Object) jSSubstitution11);
      jSSubstitution10.trimToSize();
      stringReader0.read();
      streamTokenizer0.pushBack();
      streamTokenizer0.commentChar(163);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm2.isFunction());
      assertEquals(1, jSTerm0.size());
      assertNotSame(jSTerm0, jSTerm2);
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = Function.identity();
      Function<String, Object> function2 = function1.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.compose((Function<? super Object, ?>) function1);
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.apply("ca");
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.cloneS();
      StringReader stringReader0 = new StringReader("g");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-1662), 1456);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSJshopVars.dot = (-4);
      stringReader0.reset();
      streamTokenizer0.lowerCaseMode(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      boolean boolean0 = false;
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.sval = "e";
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.slashSlashComments(true);
      stringReader0.reset();
      streamTokenizer0.parseNumbers();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = 55;
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm0.setSize(55);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate3 = predicate1.negate();
      predicate1.test(predicate3);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      StringReader stringReader0 = new StringReader("pLq*|");
      stringReader0.mark(2334);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate0);
      predicate1.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate3);
      Predicate<Object> predicate7 = predicate2.and(predicate4);
      Predicate<Object> predicate8 = predicate2.negate();
      jSTerm0.listIterator();
      predicate8.or(predicate7);
      predicate3.and(predicate2);
      predicate5.negate();
      predicate8.negate();
      Predicate<Object> predicate9 = predicate1.or(predicate5);
      Predicate<Object> predicate10 = predicate9.negate();
      predicate10.and(predicate4);
      Predicate<Object> predicate11 = predicate7.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate4.negate();
      Predicate<Object> predicate12 = predicate6.negate();
      predicate12.negate();
      Object object0 = jSTerm0.clone();
      Predicate<Object> predicate13 = Predicate.isEqual(object0);
      predicate13.test(predicate11);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      System.setCurrentTimeMillis((-1036L));
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "e");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.or(predicate2);
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate8 = predicate0.or(predicate5);
      predicate8.or(predicate6);
      predicate6.negate();
      predicate8.negate();
      predicate3.or(predicate8);
      predicate2.negate();
      predicate3.and(predicate4);
      predicate2.and(predicate6);
      Predicate<Object> predicate9 = predicate7.and(predicate0);
      Predicate<Object> predicate10 = predicate7.or(predicate0);
      predicate9.negate();
      Predicate<Object> predicate11 = predicate9.negate();
      predicate11.negate();
      predicate6.or(predicate2);
      Predicate.isEqual((Object) predicate10);
      predicate5.or(predicate1);
      jSSubstitution0.removeIf(predicate5);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("%%% ", stringBuffer0.toString());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = Function.identity();
      function1.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.compose((Function<? super Object, ?>) function1);
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      jSTerm0.isEmpty();
      StringReader stringReader0 = new StringReader("g");
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.7774035244144605
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cLO5^4U| %'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(46);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      streamTokenizer0.resetSyntax();
      stringReader0.ready();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.mark(63);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer2.parseNumbers();
      streamTokenizer2.slashSlashComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar(32);
      stringReader0.markSupported();
      streamTokenizer2.sval = null;
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer2.pushBack();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.commentChar(4652);
      streamTokenizer4.slashSlashComments(false);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.7774035244144605
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cLO5^4U| %'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(46);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      streamTokenizer0.resetSyntax();
      stringReader0.ready();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.mark(63);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer2.parseNumbers();
      streamTokenizer2.slashSlashComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar(32);
      stringReader0.markSupported();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer2.pushBack();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.commentChar(4652);
      streamTokenizer4.slashSlashComments(false);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cLO5^4U| %'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(46);
      streamTokenizer0.resetSyntax();
      stringReader0.ready();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.mark(63);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer2.parseNumbers();
      streamTokenizer2.slashSlashComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-2815));
      stringReader0.markSupported();
      streamTokenizer2.sval = null;
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer2.pushBack();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      JSJshopVars.slash = (-4);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar(2968);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.ttype = 1;
      streamTokenizer1.lowerCaseMode(false);
      stringReader0.skip(2599L);
      streamTokenizer1.commentChar(1);
      streamTokenizer0.quoteChar(1);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.lowerCaseMode(false);
      stringReader0.markSupported();
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer0.wordChars(1, (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer1.wordChars(58, 1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar(843);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = Function.identity();
      Function<String, Object> function2 = function1.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.compose((Function<? super Object, ?>) function1);
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.apply("call");
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator0.apply(function2);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.removeAllElements();
      int int0 = 34;
      jSTerm0.setSize(34);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.ordinaryChar(2968);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.quoteChar(60);
      streamTokenizer0.quoteChar((-2815));
      stringReader0.markSupported();
      streamTokenizer1.slashSlashComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer2.wordChars((-4), 2);
      StringReader stringReader1 = new StringReader("S.");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = Function.identity();
      function1.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.compose((Function<? super Object, ?>) function1);
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.removeAllElements();
      StringReader stringReader0 = new StringReader("(&#x%rz_Th%\"f");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = streamTokenizer1.sval;
      streamTokenizer0.resetSyntax();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.whitespaceChars(1991, 1991);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars(62, 62);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.pushBack();
      streamTokenizer4.whitespaceChars((-4), 43);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer4.nval = (double) (-4);
      streamTokenizer4.quoteChar((-4));
      streamTokenizer2.commentChar(1991);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer2.pushBack();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = 1991;
      streamTokenizer0.ttype = 675;
      streamTokenizer5.slashSlashComments(true);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = streamTokenizer1.sval;
      streamTokenizer0.resetSyntax();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.whitespaceChars(1991, 1991);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars(62, 62);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.whitespaceChars((-4), 43);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer4.nval = (double) (-4);
      streamTokenizer4.quoteChar((-4));
      streamTokenizer2.commentChar(1991);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer2.pushBack();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = 1991;
      streamTokenizer0.ttype = 675;
      streamTokenizer5.slashSlashComments(false);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = streamTokenizer1.sval;
      streamTokenizer0.resetSyntax();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.whitespaceChars(1991, 1991);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars(62, 62);
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.nval = (double) (-4);
      streamTokenizer4.quoteChar((-1973));
      streamTokenizer2.commentChar(1991);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer2.pushBack();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = (-1973);
      streamTokenizer0.ttype = 675;
      streamTokenizer5.slashSlashComments(false);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.wordChars((-1973), 62);
      streamTokenizer0.commentChar(675);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar(2968);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.lowerCaseMode(false);
      stringReader0.markSupported();
      streamTokenizer1.lowerCaseMode(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer2.commentChar((-6171));
      streamTokenizer2.resetSyntax();
      streamTokenizer0.wordChars(1, (-4));
      streamTokenizer1.wordChars((-2575), (-4));
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer1.wordChars(58, (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar(843);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
