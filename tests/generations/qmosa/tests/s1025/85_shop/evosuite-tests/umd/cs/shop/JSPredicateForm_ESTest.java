/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 14:33:29 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSJshopVars.greaterT = 60;
      JSJshopVars.greaterT = 1;
      JSJshopVars.plus = 3056;
      JSJshopVars.flagLevel = 1;
      JSJshopVars.verticalL = 1;
      JSJshopVars.verticalL = 1;
      JSJshopVars.leftPar = 1;
      JSJshopVars.leftPar = 46;
      jSPredicateForm0.addElement((Object) null);
      JSJshopVars.exclamation = 46;
      JSJshopVars.equalT = 46;
      JSJshopVars.interrogation = (-1756);
      JSJshopVars.coma = 46;
      JSJshopVars.lessT = 46;
      JSJshopVars.interrogation = 62;
      JSJshopVars.flagLevel = 46;
      JSJshopVars.verticalL = 1;
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6573186405438316
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kc3addb");
      StringReader stringReader1 = new StringReader("(HU7#)6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      stringReader0.read(charArray0);
      stringReader1.reset();
      streamTokenizer0.quoteChar(2922);
      stringReader0.reset();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
      assertEquals("[HU7]", jSPredicateForm0.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6858900691152602
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(ywlU)w(>1>Y5,Pm");
      System.setCurrentTimeMillis(358L);
      System.setCurrentTimeMillis(3062L);
      System.setCurrentTimeMillis(358L);
      System.setCurrentTimeMillis(2437L);
      System.setCurrentTimeMillis(2437L);
      System.setCurrentTimeMillis(4314L);
      System.setCurrentTimeMillis(3062L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-606L));
      System.setCurrentTimeMillis(1722L);
      System.setCurrentTimeMillis(1722L);
      System.setCurrentTimeMillis((-4036L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(3267L);
      System.setCurrentTimeMillis(2437L);
      StringReader stringReader0 = new StringReader("(ywlU)w(>1>Y5,Pm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1QXEwc?'>waczG@Y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) streamTokenizer0);
      UnaryOperator.identity();
      streamTokenizer0.eolIsSignificant(false);
      Integer integer0 = new Integer((-2));
      Integer integer1 = new Integer((-2));
      streamTokenizer0.wordChars(802, (-32813490));
      Integer integer2 = new Integer((-2));
      streamTokenizer0.eolIsSignificant(true);
      Integer integer3 = new Integer((-2892));
      UnaryOperator.identity();
      Integer integer4 = new Integer((-2));
      Integer integer5 = new Integer((-2892));
      Integer integer6 = new Integer((-2892));
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0721497016415948
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1QXEwc?<'>wcETzG@Y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.backquote = (-2);
      JSJshopVars.leftPar = (-2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("8Tt>i>AQ*rikpM7QTV ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Pancig(omain:vero");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Pancig(omain:vero");
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis(2262L);
      stringReader0.reset();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-1));
      StringReader stringReader1 = new StringReader("5OeNR'");
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSJshopVars.greaterT = 60;
      JSJshopVars.greaterT = 1;
      JSJshopVars.plus = 3056;
      JSJshopVars.flagLevel = 3056;
      JSJshopVars.verticalL = 1;
      jSPredicateForm0.toStr();
      JSJshopVars.verticalL = 1;
      JSJshopVars.leftPar = 1;
      JSJshopVars.leftPar = 46;
      JSJshopVars.exclamation = 46;
      JSJshopVars.equalT = 46;
      JSJshopVars.interrogation = (-1803);
      JSJshopVars.coma = 46;
      JSJshopVars.verticalL = 46;
      Object object0 = jSPredicateForm0.clone();
      jSPredicateForm0.add(object0);
      JSJshopVars.lessT = 46;
      JSJshopVars.flagLevel = 46;
      jSPredicateForm0.parallelStream();
      JSJshopVars.verticalL = 1;
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2.QV(h+Yo5+E");
      StringReader stringReader1 = new StringReader(": ");
      StringReader stringReader2 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3706001575399114
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(ywlU)w(>1>Y5,Pm");
      System.setCurrentTimeMillis(358L);
      System.setCurrentTimeMillis(3062L);
      System.setCurrentTimeMillis(358L);
      System.setCurrentTimeMillis(2437L);
      System.setCurrentTimeMillis(2437L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution1.iterator();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution8.containsAll(jSSubstitution3);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      jSSubstitution2.listIterator();
      JSSubstitution jSSubstitution15 = new JSSubstitution();
      JSSubstitution jSSubstitution16 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(ywlU)w(>1>Y5,Pm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4780709313740181
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1QXEwc?<'>wcETzG@Y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.clonePF();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      JSSubstitution jSSubstitution15 = new JSSubstitution();
      JSSubstitution jSSubstitution16 = new JSSubstitution();
      jSSubstitution10.addElement((Object) null);
      JSSubstitution jSSubstitution17 = new JSSubstitution();
      JSSubstitution jSSubstitution18 = new JSSubstitution();
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution19 = new JSSubstitution();
      JSSubstitution jSSubstitution20 = new JSSubstitution();
      JSSubstitution jSSubstitution21 = new JSSubstitution();
      jSSubstitution21.listIterator();
      jSSubstitution21.remove((Object) jSSubstitution10);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.428531408798452
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("82C1@i");
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.read();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      stringReader0.read(charBuffer0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      stringReader0.close();
      // Undeclared exception!
      try { 
        jSTerm1.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SystemInUtil.addInputLine("/NiKe|JyHaEw9zy&T");
      SystemInUtil.addInputLine("%%%");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("{r'y.no!;QZ4T[");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine(";;K|");
      SystemInUtil.addInputLine("{r'y.no!;QZ4T[");
      SystemInUtil.addInputLine("cW+poHEv+&T2L=kh");
      SystemInUtil.addInputLine(";;K|");
      SystemInUtil.addInputLine("huc");
      SystemInUtil.addInputLine("Y{");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(*yXlUx?>15,P@");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.setSize(62);
      System.setCurrentTimeMillis(358L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0265986860485126
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1QXEwc?<'>wcETzG@Y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution5);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution4.iterator();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSSubstitution0.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      jSSubstitution10.removeAllElements();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      jSSubstitution10.iterator();
      JSSubstitution jSSubstitution15 = new JSSubstitution();
      jSSubstitution10.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution16 = new JSSubstitution();
      JSSubstitution jSSubstitution17 = new JSSubstitution();
      JSSubstitution jSSubstitution18 = new JSSubstitution();
      JSSubstitution jSSubstitution19 = new JSSubstitution();
      jSSubstitution4.listIterator();
      jSTerm0.applySubstitutionPF(jSSubstitution4);
      JSSubstitution jSSubstitution20 = new JSSubstitution();
      JSSubstitution jSSubstitution21 = new JSSubstitution();
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      jSTerm1.applySubstitutionPF((JSSubstitution) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9007403405574514
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZEV# N0,t&-t8=]j{ps");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = jSTerm0.matches(jSPredicateForm0, jSSubstitution1);
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
      assertFalse(jSSubstitution8.fail());
      
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution7);
      assertNotSame(jSPredicateForm2, jSPredicateForm0);
      
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      assertTrue(jSPredicateForm3.equals((Object)jSPredicateForm1));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.01119387951663
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZEV# N0,t&-t8=]j{ps");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSPredicateForm jSPredicateForm3 = jSTerm0.applySubstitutionPF(jSSubstitution10);
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      JSSubstitution jSSubstitution15 = new JSSubstitution();
      boolean boolean0 = jSTerm1.equals(jSPredicateForm1);
      assertFalse(boolean0);
      assertNotSame(jSPredicateForm0, jSPredicateForm3);
      
      jSTerm1.applySubstitutionPF(jSSubstitution9);
      StringBuffer stringBuffer0 = jSPredicateForm2.toStr();
      assertEquals(9, stringBuffer0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SystemInUtil.addInputLine("%K(;PZ?");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSJshopVars.lessT = 60;
      JSJshopVars.greaterT = 60;
      JSJshopVars.dot = (-24);
      JSJshopVars.plus = (-24);
      JSJshopVars.flagLevel = 60;
      JSJshopVars.verticalL = 60;
      JSJshopVars.leftPar = 60;
      jSPredicateForm0.add((Object) "%K(;PZ?");
      JSJshopVars.equalT = 60;
      JSJshopVars.coma = 60;
      jSPredicateForm0.add((Object) null);
      JSJshopVars.percent = 60;
      JSJshopVars.flagLevel = 60;
      JSJshopVars.verticalL = 60;
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.201885493961075
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZEV# N0,t&-t8=]j{ps");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSSubstitution11.iterator();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution11);
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm3 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      boolean boolean0 = jSTerm0.equals(jSPredicateForm2);
      assertTrue(boolean0);
      
      JSPredicateForm jSPredicateForm4 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution15 = jSPredicateForm0.matches(jSPredicateForm1);
      assertTrue(jSPredicateForm0.equals((Object)jSPredicateForm4));
      assertFalse(jSSubstitution15.fail());
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
      assertNotSame(jSPredicateForm0, jSPredicateForm3);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "");
      jSTerm0.lastElement();
      jSTerm0.add((Object) "");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution6);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0029325035640073
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZEV# N0,t&-t8=]j{ps");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function5 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function6 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      Function<String, Integer> function7 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function8 = function6.andThen((Function<? super String, ? extends Integer>) function7);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function9 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function9);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Function.identity();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      Function.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function8);
      Function.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function10 = unaryOperator5.andThen((Function<? super Object, ? extends String>) function3);
      unaryOperator4.compose((Function<? super String, ?>) function10);
      UnaryOperator.identity();
      UnaryOperator.identity();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("(ZEVZEV )", stringBuffer0.toString());
      
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      jSPredicateForm0.print();
      assertTrue(jSPredicateForm0.equals((Object)jSPredicateForm1));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.455848709151796
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rfW)VL+bwF0(1oZ");
      UnaryOperator.identity();
      Integer integer0 = new Integer(234);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, Object> function2 = function1.andThen((Function<? super String, ?>) unaryOperator0);
      Function<Object, Object> function3 = Function.identity();
      jSTerm0.print();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Object> function4 = Function.identity();
      Function.identity();
      unaryOperator0.compose((Function<? super Object, ?>) function3);
      Function<String, String> function5 = function1.compose((Function<? super String, ?>) function4);
      Function<Object, Object> function6 = Function.identity();
      Function<String, String> function7 = Function.identity();
      Function<Object, String> function8 = function7.compose((Function<? super Object, ? extends String>) function1);
      function7.andThen((Function<? super String, ? extends String>) function5);
      Function<Object, Object> function9 = unaryOperator1.compose((Function<? super Object, ?>) function6);
      function2.apply("rfW)VL+bwF0(1oZ");
      unaryOperator1.compose((Function<? super String, ?>) function2);
      Function<Object, Object> function10 = unaryOperator0.andThen((Function<? super Object, ?>) function9);
      function1.apply((Object) null);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function8);
      unaryOperator0.compose((Function<? super String, ?>) function2);
      unaryOperator1.compose((Function<? super String, ?>) function10);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.add((Object) function10);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$50/871388566 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4048159937786893
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZEV# N0,t&-t8=]jps");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator0.compose((Function<? super Object, ?>) function1);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      function1.apply("ZEV# N0,t&-t8=]jps");
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      jSTerm0.clonePF();
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function5).apply(any());
      Function<Object, Integer> function6 = function4.andThen((Function<? super String, ? extends Integer>) function5);
      Function<Object, String> function7 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      function1.apply(unaryOperator0);
      function6.apply((Object) null);
      Function.identity();
      unaryOperator0.apply((Object) null);
      function4.andThen((Function<? super String, ? extends String>) function3);
      Function<Object, String> function8 = function6.andThen((Function<? super Integer, ? extends String>) function2);
      function7.andThen((Function<? super String, ? extends String>) function2);
      Function<Object, String> function9 = function2.andThen((Function<? super String, ? extends String>) function7);
      Function<Object, String> function10 = function9.compose((Function<? super Object, ?>) function3);
      Function.identity();
      function7.andThen((Function<? super String, ? extends String>) function1);
      function3.compose((Function<? super String, ?>) function6);
      Function.identity();
      Function<Object, Object> function11 = unaryOperator0.compose((Function<? super Object, ?>) function2);
      function10.compose((Function<? super Object, ?>) function11);
      Function.identity();
      Function<Object, Object> function12 = function9.andThen((Function<? super String, ?>) unaryOperator0);
      function2.apply(function4);
      function2.compose((Function<? super String, ?>) function12);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function8);
      Function.identity();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      assertTrue(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5946279448545542
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZEV# N0,t&-t8=]jps");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      JSSubstitution jSSubstitution15 = new JSSubstitution();
      JSSubstitution jSSubstitution16 = new JSSubstitution();
      JSSubstitution jSSubstitution17 = new JSSubstitution();
      JSSubstitution jSSubstitution18 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution19 = new JSSubstitution();
      JSSubstitution jSSubstitution20 = new JSSubstitution();
      JSSubstitution jSSubstitution21 = new JSSubstitution();
      jSSubstitution12.listIterator();
      JSTerm jSTerm3 = new JSTerm();
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution22 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution22);
      JSSubstitution jSSubstitution23 = new JSSubstitution();
      JSSubstitution jSSubstitution24 = new JSSubstitution();
      jSTerm2.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis((-70L));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rfW)VL+bwF0(1oZ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.listIterator();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSSubstitution0.add((Object) stringReader0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.removeAllElements();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSTerm0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution4.iterator();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      jSSubstitution7.listIterator();
      jSSubstitution8.listIterator();
      JSSubstitution jSSubstitution15 = new JSSubstitution();
      JSSubstitution jSSubstitution16 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rfW)VL+bwF0(1oZ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = function1.andThen((Function<? super String, ? extends String>) function2);
      function1.compose((Function<? super Integer, ?>) unaryOperator0);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Integer integer0 = new Integer((-64415823));
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) function4;
      objectArray0[1] = (Object) jSTerm0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      function3.compose((Function<? super Object, ?>) function1);
      objectArray0[3] = (Object) function4;
      objectArray0[4] = (Object) function3;
      jSTerm0.toArray(objectArray0);
      Integer integer1 = new Integer((-2));
      Integer integer2 = new Integer((-2));
      Integer integer3 = new Integer((-2733));
      UnaryOperator.identity();
      Integer integer4 = new Integer(47);
      Integer integer5 = new Integer(2125);
      jSTerm0.add(objectArray0[1]);
      Integer integer6 = new Integer(1732);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1QEEwc?'>waczG@Y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer((-1721));
      Integer integer1 = new Integer((-2733));
      Integer integer2 = new Integer((-844));
      Integer integer3 = new Integer(2125);
      Integer integer4 = new Integer(2125);
      UnaryOperator.identity();
      Integer integer5 = new Integer((-34));
      Integer integer6 = new Integer((-844));
      Integer integer7 = new Integer((-3491));
      Integer integer8 = new Integer((-34));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Object object0 = unaryOperator1.apply(unaryOperator0);
      Integer integer0 = new Integer(1);
      unaryOperator1.apply(jSPredicateForm0);
      unaryOperator0.apply(integer0);
      Integer integer1 = new Integer(61);
      unaryOperator1.apply(object0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer2 = new Integer((-4756));
      Integer integer3 = new Integer((-1082000390));
      unaryOperator1.apply(integer3);
      Integer integer4 = new Integer((-1082000390));
      UnaryOperator.identity();
      Integer integer5 = new Integer((-427));
      UnaryOperator.identity();
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3263269370134367
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(ywlU)w>1>Y5,Pm");
      UnaryOperator.identity();
      jSPredicateForm0.trimToSize();
      UnaryOperator.identity();
      Integer integer0 = new Integer((-1086056243));
      Integer integer1 = new Integer(1977);
      Integer integer2 = new Integer(1977);
      Integer integer3 = new Integer((-1));
      UnaryOperator.identity();
      Integer integer4 = new Integer((-1435095525));
      Integer integer5 = new Integer((-1));
      Integer integer6 = new Integer(4269);
      Integer integer7 = new Integer(4269);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Integer integer0 = new Integer((-37));
      Integer integer1 = new Integer(2099);
      Integer integer2 = new Integer((-136489555));
      Integer integer3 = new Integer(2099);
      Integer integer4 = new Integer(2099);
      UnaryOperator.identity();
      Integer integer5 = new Integer(2099);
      Integer integer6 = new Integer(1);
      Integer integer7 = new Integer((-108));
      Integer integer8 = new Integer(2099);
      Integer integer9 = new Integer((-1437821500));
      Integer integer10 = new Integer(2099);
      StringReader stringReader0 = new StringReader("tjty|>p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.remove((Object) null);
      JSJshopVars.lessT = 60;
      JSJshopVars.greaterT = 60;
      JSJshopVars.flagLevel = 60;
      JSJshopVars.verticalL = 60;
      JSJshopVars.leftPar = 60;
      JSJshopVars.leftPar = 46;
      JSJshopVars.coma = 60;
      JSJshopVars.flagLevel = 46;
      JSJshopVars.verticalL = 60;
      JSJshopVars.leftBrac = 125;
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4048159937786893
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZEV# N0,t&-t8=]jps");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator0.compose((Function<? super Object, ?>) function1);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      function1.apply("ZEV# N0,t&-t8=]jps");
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      jSTerm0.clonePF();
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function5).apply(any());
      Function<Object, Integer> function6 = function4.andThen((Function<? super String, ? extends Integer>) function5);
      Function<Object, String> function7 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      function1.apply(unaryOperator0);
      function6.apply((Object) null);
      Function.identity();
      function4.andThen((Function<? super String, ? extends String>) function3);
      Function<Object, String> function8 = function6.andThen((Function<? super Integer, ? extends String>) function2);
      function7.andThen((Function<? super String, ? extends String>) function2);
      Function<Object, String> function9 = function2.andThen((Function<? super String, ? extends String>) function7);
      Function<Object, String> function10 = function9.compose((Function<? super Object, ?>) function3);
      Function.identity();
      function3.compose((Function<? super String, ?>) function6);
      Function.identity();
      Function.identity();
      Function<Object, Object> function11 = unaryOperator0.compose((Function<? super Object, ?>) function2);
      function10.compose((Function<? super Object, ?>) function11);
      Function<Object, Object> function12 = function9.andThen((Function<? super String, ?>) unaryOperator0);
      function2.apply(function4);
      function2.compose((Function<? super String, ?>) function12);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function8);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      assertTrue(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "PlanningDomain: error";
      StringReader stringReader0 = new StringReader("PlanningDomain: error");
      stringReader0.mark(85);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-1084042545), (-1084042545));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PlanningDomain: error");
      stringReader0.mark(85);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(85);
      streamTokenizer0.whitespaceChars((-1084042545), (-1084042545));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FEV# N0,t&-8=]j{ps");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) "FEV# N0,t&-8=]j{ps");
      jSTerm1.isEmpty();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1064801542156266
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(ywlU)w(>1>Y5,Pm");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "(ywlU)w(>1>Y5,Pm");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate2.and(predicate1);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(6, stringBuffer0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.2346791997877273
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(ywlU)w(>1>Y5,Pm");
      assertFalse(jSPredicateForm0.isEmpty());
      
      System.setCurrentTimeMillis(358L);
      System.setCurrentTimeMillis(358L);
      System.setCurrentTimeMillis(358L);
      System.setCurrentTimeMillis(2431L);
      System.setCurrentTimeMillis(2431L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(358L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(358L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1902L));
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SystemInUtil.addInputLine("/NiKe|JyHaEw9zy&T");
      SystemInUtil.addInputLine("%%%");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine(";;K|");
      SystemInUtil.addInputLine("{x'y.o!;QZ4T[");
      SystemInUtil.addInputLine("cW+poHEv+&T2L=kh");
      SystemInUtil.addInputLine(";;K|");
      SystemInUtil.addInputLine("hu.");
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rfW)VL+bwF0(1oZ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.listIterator();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSSubstitution0.add((Object) stringReader0);
      jSSubstitution0.removeElements(jSSubstitution2);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution6.removeAllElements();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution2.iterator();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      jSSubstitution13.containsAll(jSSubstitution6);
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      JSSubstitution jSSubstitution15 = new JSSubstitution();
      JSSubstitution jSSubstitution16 = new JSSubstitution();
      JSSubstitution jSSubstitution17 = new JSSubstitution();
      jSSubstitution15.listIterator();
      jSSubstitution17.listIterator();
      JSSubstitution jSSubstitution18 = new JSSubstitution();
      JSSubstitution jSSubstitution19 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSJshopVars.greaterT = 60;
      JSJshopVars.greaterT = (-4);
      JSJshopVars.plus = 3056;
      JSJshopVars.flagLevel = (-4);
      JSJshopVars.verticalL = (-4);
      JSJshopVars.verticalL = (-4);
      JSJshopVars.rightBrac = 227;
      JSJshopVars.leftPar = (-4);
      JSJshopVars.leftPar = 46;
      JSJshopVars.exclamation = 46;
      JSJshopVars.astherisk = (-4);
      JSJshopVars.equalT = 46;
      JSJshopVars.interrogation = (-1756);
      JSJshopVars.coma = (-1756);
      JSJshopVars.verticalL = 46;
      JSJshopVars.lessT = (-1756);
      JSJshopVars.flagLevel = 46;
      JSJshopVars.verticalL = (-4);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1866837062454803
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1QEEwc?'>waczG@Y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer((-1721));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.removeAllElements();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution3.removeAllElements();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution6.iterator();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution4.containsAll(jSSubstitution2);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      jSSubstitution13.listIterator();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      JSSubstitution jSSubstitution15 = new JSSubstitution();
      jSSubstitution15.ensureCapacity((-237));
      jSSubstitution13.listIterator();
      JSSubstitution jSSubstitution16 = new JSSubstitution();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
      
      JSPredicateForm jSPredicateForm0 = jSTerm1.clonePF();
      jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution17 = jSTerm1.matches(jSPredicateForm0, jSSubstitution14);
      jSTerm1.applySubstitutionPF(jSSubstitution17);
      assertFalse(jSSubstitution17.fail());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1QEEwc^'>wVczG@i");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer((-1721));
      Integer integer1 = new Integer((-2733));
      Integer integer2 = new Integer((-844));
      Integer integer3 = new Integer(2125);
      Integer integer4 = new Integer(2125);
      Integer integer5 = new Integer((-2733));
      Integer integer6 = new Integer((-844));
      Integer integer7 = new Integer((-1721));
      Integer integer8 = new Integer(50);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSJshopVars.greaterT = 60;
      JSJshopVars.greaterT = (-4);
      JSJshopVars.plus = 3056;
      JSJshopVars.flagLevel = (-4);
      JSJshopVars.verticalL = (-4);
      JSJshopVars.verticalL = (-4);
      JSJshopVars.leftPar = (-4);
      JSJshopVars.leftPar = 46;
      JSJshopVars.exclamation = 46;
      JSJshopVars.equalT = 46;
      JSJshopVars.interrogation = (-1756);
      JSJshopVars.coma = 46;
      JSJshopVars.verticalL = 46;
      JSJshopVars.lessT = 46;
      JSJshopVars.flagLevel = 46;
      JSJshopVars.verticalL = (-4);
      System.setCurrentTimeMillis((-2327L));
      StringReader stringReader0 = new StringReader("-v:@Ns%H^$YkSqt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kc3addb");
      StringReader stringReader1 = new StringReader("(HU7#6");
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'p';
      charArray0[2] = 'j';
      charArray0[3] = '5';
      charArray0[4] = '<';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader1.read(charBuffer0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      char[] charArray1 = new char[2];
      charArray1[0] = 'B';
      charArray1[1] = 't';
      stringReader0.read(charArray1);
      stringReader1.reset();
      stringReader1.close();
      streamTokenizer0.quoteChar(2922);
      stringReader0.reset();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis(358L);
      System.setCurrentTimeMillis(3062L);
      System.setCurrentTimeMillis(358L);
      System.setCurrentTimeMillis(2437L);
      System.setCurrentTimeMillis(2437L);
      System.setCurrentTimeMillis(4314L);
      System.setCurrentTimeMillis(3062L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-606L));
      System.setCurrentTimeMillis(1722L);
      System.setCurrentTimeMillis(1722L);
      System.setCurrentTimeMillis((-4036L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(3267L);
      System.setCurrentTimeMillis(2437L);
      jSPredicateForm0.print();
      assertTrue(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1064801542156266
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(ywlU)w(>1>Y5,Pm");
      System.setCurrentTimeMillis(358L);
      jSPredicateForm0.print();
      System.setCurrentTimeMillis(3062L);
      System.setCurrentTimeMillis(358L);
      System.setCurrentTimeMillis(2431L);
      System.setCurrentTimeMillis(2431L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(180L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1541L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-2047L));
      System.setCurrentTimeMillis(2431L);
      System.setCurrentTimeMillis((-42L));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator0.compose((Function<? super String, ?>) function2);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      function4.compose((Function<? super String, ?>) function3);
      Function<Object, Object> function5 = Function.identity();
      Function<String, JSTerm> function6 = (Function<String, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, String> function7 = function3.compose((Function<? super String, ?>) function6);
      Function<Object, Object> function8 = function4.andThen((Function<? super String, ?>) function5);
      function4.compose((Function<? super String, ?>) function8);
      Function<String, Integer> function9 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function9).apply(anyString());
      Function<Object, Integer> function10 = function2.andThen((Function<? super String, ? extends Integer>) function9);
      function3.apply(function7);
      Function<Object, String> function11 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      function11.apply(function10);
      function10.apply(function4);
      Function.identity();
      function4.andThen((Function<? super String, ? extends String>) function11);
      Function<String, String> function12 = Function.identity();
      Function<Object, String> function13 = function11.andThen((Function<? super String, ? extends String>) function12);
      function11.andThen((Function<? super String, ? extends String>) function13);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSJshopVars.greaterT = 60;
      JSJshopVars.greaterT = 1;
      JSJshopVars.plus = 3056;
      JSJshopVars.flagLevel = 1;
      JSJshopVars.verticalL = 1;
      JSJshopVars.verticalL = 1;
      JSJshopVars.exclamation = 40;
      JSJshopVars.equalT = 40;
      JSJshopVars.interrogation = (-1756);
      JSJshopVars.coma = 40;
      JSJshopVars.lessT = 40;
      JSJshopVars.flagLevel = 40;
      JSJshopVars.verticalL = 40;
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm((String) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.containsAll(jSTerm0);
      jSTerm0.forEach(consumer0);
      jSTerm1.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Integer integer0 = new Integer((-37));
      Integer integer1 = new Integer(2099);
      Integer integer2 = new Integer((-136489555));
      Integer integer3 = new Integer(2099);
      Integer integer4 = new Integer(2099);
      UnaryOperator.identity();
      Integer integer5 = new Integer(2099);
      Integer integer6 = new Integer(1);
      Integer integer7 = new Integer((-108));
      Integer integer8 = new Integer(2099);
      Integer integer9 = new Integer((-958));
      Integer integer10 = new Integer(1);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SystemInUtil.addInputLine("/NiKe|JyHaEw9zy&T");
      SystemInUtil.addInputLine("%%%");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine(";;K|");
      SystemInUtil.addInputLine("{r'y.no!;QZ4T[");
      SystemInUtil.addInputLine("cWVpoHEv+&T2oL=kh");
      SystemInUtil.addInputLine("huc");
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6868359830561608
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cnd_db");
      StringReader stringReader1 = new StringReader("(vRU#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.skip((-1681L));
      stringReader0.reset();
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      stringReader0.read();
      charArray0[1] = ',';
      stringReader1.read(charArray0);
      charArray0[4] = '_';
      stringReader1.read(charArray0);
      charArray0[3] = 'N';
      charArray0[4] = 'N';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.codePoints();
      stringReader1.read();
      stringReader1.read(charBuffer0);
      stringReader0.read(charBuffer0);
      stringReader0.mark(5);
      stringReader1.ready();
      stringReader1.skip(242L);
      stringReader0.reset();
      streamTokenizer0.quoteChar((-1));
      stringReader1.read(charArray0);
      stringReader1.reset();
      StringReader stringReader2 = new StringReader("cnd_db");
      stringReader2.reset();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "(eZ],pU";
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator0.compose((Function<? super String, ?>) function2);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      function4.compose((Function<? super String, ?>) function3);
      Function<Object, Object> function5 = Function.identity();
      Function<String, JSTerm> function6 = (Function<String, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, String> function7 = function3.compose((Function<? super String, ?>) function6);
      Function<Object, Object> function8 = function4.andThen((Function<? super String, ?>) function5);
      function4.compose((Function<? super String, ?>) function8);
      Function<String, Integer> function9 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function9).apply(anyString());
      Function<Object, Integer> function10 = function2.andThen((Function<? super String, ? extends Integer>) function9);
      function3.apply(function7);
      Function<Object, String> function11 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      function11.apply(function10);
      Function.identity();
      function10.apply(function4);
      Function.identity();
      function4.andThen((Function<? super String, ? extends String>) function11);
      Function<String, String> function12 = Function.identity();
      Function<Object, String> function13 = function11.andThen((Function<? super String, ? extends String>) function12);
      function11.andThen((Function<? super String, ? extends String>) function13);
      function4.compose((Function<? super Object, ?>) function13);
      Function.identity();
      function2.compose((Function<? super String, ?>) function13);
      Function.identity();
      Function.identity();
      Function<Object, String> function14 = function11.compose((Function<? super Object, ?>) function8);
      function14.compose((Function<? super Integer, ?>) function13);
      function14.andThen((Function<? super String, ?>) function10);
      function14.apply((Object) null);
      function14.compose((Function<? super String, ?>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function11);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SystemInUtil.addInputLine("/NiKe|JyHaEw9zy&T");
      SystemInUtil.addInputLine("%%%");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("{r'y.no!;QZ4T[");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine(";;K|");
      SystemInUtil.addInputLine("{r'y.no!;QZ4T[");
      SystemInUtil.addInputLine("cW+poHEv+&T2L=kh");
      SystemInUtil.addInputLine(";;K|");
      SystemInUtil.addInputLine("huc");
      SystemInUtil.addInputLine("Y{");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis(913L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator0.compose((Function<? super String, ?>) function2);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      function4.compose((Function<? super String, ?>) function3);
      Function<Object, Object> function5 = Function.identity();
      Function<String, JSTerm> function6 = (Function<String, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, String> function7 = function3.compose((Function<? super String, ?>) function6);
      Function<Object, Object> function8 = function4.andThen((Function<? super String, ?>) function5);
      function4.compose((Function<? super String, ?>) function8);
      Function<String, Integer> function9 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function9).apply(anyString());
      Function<Object, Integer> function10 = function2.andThen((Function<? super String, ? extends Integer>) function9);
      function3.apply(function7);
      Function<Object, String> function11 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      function11.apply(function10);
      function10.apply(function4);
      Function.identity();
      function4.andThen((Function<? super String, ? extends String>) function11);
      Function<String, String> function12 = Function.identity();
      Function<Object, String> function13 = function11.andThen((Function<? super String, ? extends String>) function12);
      function11.andThen((Function<? super String, ? extends String>) function13);
      function4.compose((Function<? super Object, ?>) function13);
      Function.identity();
      function2.compose((Function<? super String, ?>) function13);
      Function.identity();
      Function.identity();
      Function<Object, String> function14 = function11.compose((Function<? super Object, ?>) function8);
      function14.andThen((Function<? super String, ?>) function10);
      function14.apply((Object) null);
      function14.compose((Function<? super String, ?>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function11);
      Function.identity();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(eZ],pU");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SystemInUtil.addInputLine("/NiKe|JyHaEw9zy&T");
      SystemInUtil.addInputLine("%%%");
      SystemInUtil.addInputLine("|&3xU");
      SystemInUtil.addInputLine("%%%");
      SystemInUtil.addInputLine("Tt>i>AQ*rikpM7QTV");
      SystemInUtil.addInputLine("Tt>i>AQ*rikpM7QTV");
      SystemInUtil.addInputLine("%%%");
      SystemInUtil.addInputLine(";;K|");
      SystemInUtil.addInputLine("_H77vs~.");
      SystemInUtil.addInputLine("+qQ");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("b^p?");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SystemInUtil.addInputLine("/NiKe|JyHaEw9zy&T");
      SystemInUtil.addInputLine("%%%");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine(";;K|");
      SystemInUtil.addInputLine("{r'y.no!;QZ4T[");
      SystemInUtil.addInputLine("U;5ym@sx4");
      SystemInUtil.addInputLine("cWVpoHEv+&T2oL=kh");
      SystemInUtil.addInputLine(") ");
      SystemInUtil.addInputLine(") ");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("%%%");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cnd_db");
      StringReader stringReader1 = new StringReader("(vRU#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.skip((-1681L));
      stringReader0.reset();
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      stringReader0.read();
      charArray0[1] = ',';
      charArray0[2] = '_';
      charArray0[3] = 'N';
      charArray0[4] = '+';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.codePoints();
      stringReader1.read();
      stringReader1.read(charBuffer0);
      stringReader0.read(charBuffer0);
      stringReader0.mark(1);
      stringReader1.ready();
      stringReader1.skip(242L);
      stringReader0.reset();
      streamTokenizer0.quoteChar((-1));
      stringReader1.read(charArray0);
      stringReader1.reset();
      StringReader stringReader2 = new StringReader("cnd_db");
      stringReader2.reset();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(0, stringBuffer0.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("{r'y.no!;QZ4T[");
      SystemInUtil.addInputLine("cWVpoHEv+&T2oL=kh");
      SystemInUtil.addInputLine("planningdmain:");
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SystemInUtil.addInputLine("/NiKe|JyHaEw9zy&T");
      SystemInUtil.addInputLine("%%%");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine(";;K|");
      SystemInUtil.addInputLine("{x'y.o!;QZ4T[");
      SystemInUtil.addInputLine("cW+poHEv+&T2L=kh");
      SystemInUtil.addInputLine(";;K|");
      SystemInUtil.addInputLine("hu.");
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
