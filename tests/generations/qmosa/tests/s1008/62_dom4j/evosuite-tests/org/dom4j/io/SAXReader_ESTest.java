/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 02:12:54 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sun.msv.datatype.xsd.XSDatatype;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.Attribute;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.QName;
import org.dom4j.Visitor;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultElement;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.UserDataElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.282784501919476
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument();
      BeanElement beanElement0 = new BeanElement("//home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k", "//home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endDocument();
      File file0 = MockFile.createTempFile("//home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k", "//home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k");
      xMLFilterImpl0.processingInstruction("//home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k", "//tmp/tmp/Oqx0_S0Invalid nGode type: 0org.dom4j.io.SAXReader$SAXEntityResolver");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEncoding("j18NR");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3671693709947967
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setEncoding("");
      URI uRI0 = MockURI.URI("");
      URI uRI1 = MockURI.normalize(uRI0);
      MockURI.parseServerAuthority(uRI1);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sAXReader0.createDefaultEntityResolver("");
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.isValidating();
      String string0 = "D_";
      try { 
        sAXReader0.setProperty("D_", defaultDocumentFactory0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'D_' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3922896470698074
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.isIncludeInternalDTDDeclarations();
      StringReader stringReader0 = new StringReader("@qk-\"");
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      stringReader0.read(charBuffer0);
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3886459900319466
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      sAXReader1.removeHandler("");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setEntityResolver(defaultHandler0);
      InputSource inputSource0 = new InputSource();
      sAXReader0.getXMLReader();
      inputSource0.setSystemId("");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.440140500251581
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      sAXReader1.removeHandler("");
      InputSource inputSource0 = new InputSource();
      inputSource0.setSystemId("");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(false);
      String string0 = "";
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/declaration-handler", "http://xml.org/sax/properties/declaration-handler");
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/declaration-handler' cannot be casted to org.xml.sax.ext.DeclHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2779074065716802
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      // Undeclared exception!
      try { 
        sAXReader0.read("P`.V xvQ;FJ");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3863046904967216
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl0);
      locator2Impl0.setXMLVersion("&Q5^C.?HUdjb<M");
      BeanElement beanElement0 = new BeanElement("&Q5^C.?HUdjb<M", "//home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      try { 
        sAXReader0.read((Reader) null, "39{ OH7?");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: 39{ OH7? Nested exception: no protocol: 39{ OH7?
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "na\\";
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter((XMLFilter) null);
      try { 
        sAXReader0.setProperty("wVS?pdm;+p6Rp!.8H", "na");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'wVS?pdm;+p6Rp!.8H' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      IndexedElement indexedElement0 = new IndexedElement("");
      defaultDocumentFactory0.createQName("");
      UserDataElement userDataElement0 = new UserDataElement("");
      userDataElement0.clone();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "gk";
      File file0 = MockFile.createTempFile("\"4xE+vvZBe+wk", "gk");
      MockFile mockFile0 = new MockFile(file0, "\"4xE+vvZBe+wk");
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("<c1:&ix");
      File file0 = mockFile0.getCanonicalFile();
      MockFile.createTempFile("<c1:&ix", "7lQ\\/!f", file0);
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.4383740327894543
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader(false);
          URI uRI0 = MockURI.aFTPURI;
          URI uRI1 = MockURI.normalize(uRI0);
          URI uRI2 = MockURI.parseServerAuthority(uRI1);
          URI uRI3 = MockURI.aHttpURI;
          URI uRI4 = MockURI.relativize(uRI2, uRI3);
          MockURI.toURL(uRI1);
          URI uRI5 = MockURI.aHttpURI;
          URI uRI6 = MockURI.parseServerAuthority(uRI5);
          MockURI.relativize(uRI4, uRI6);
          URL uRL0 = MockURI.toURL(uRI1);
          sAXReader0.setIncludeExternalDTDDeclarations(false);
          URI uRI7 = MockURI.aHttpURI;
          MockURI.toURL(uRI1);
          sAXReader0.setFeature("http://xml.org/sax/features/validation", false);
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor386.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor386.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl0);
      locator2Impl1.setXMLVersion("&Q5^C.?HUdjb<M");
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locator2Impl3.getPublicId();
      locator2Impl3.getPublicId();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "jz3wxHq]vQr\"";
      String string1 = "//tmp/foo.bar/dr+~-<zDf_<C0.tmp";
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.isIgnoreComments();
      try { 
        MockFile.createTempFile("jz3wxHq]vQr\"", "//tmp/foo.bar/dr+~-<zDf_<C0.tmp");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.443562101193705
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createElement("");
      QName.get("", "");
      UserDataElement userDataElement0 = new UserDataElement("");
      UserDataElement userDataElement1 = userDataElement0.clone();
      userDataElement1.getDocument();
      userDataElement0.addProcessingInstruction("", "");
      defaultDocumentFactory0.createDocument();
      defaultDocumentFactory0.createDocument((Element) userDataElement1);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.isIncludeExternalDTDDeclarations();
      PipedInputStream pipedInputStream0 = new PipedInputStream(485);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3809682098476954
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("64m3|jO_!ma%hhzC-~");
      InputSource inputSource0 = new InputSource();
      sAXReader_SAXEntityResolver0.resolveEntity("t%CqBHT", "");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      SAXParseException sAXParseException0 = new SAXParseException("t%CqBHT", locator2Impl0, (Exception) null);
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      sAXParseException0.getStackTrace();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.warning(sAXParseException0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl0.endDocument();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      MockFile.createTempFile("W-V", (String) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 3084);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      try { 
        sAXReader0.configureReader(xMLFilterImpl1, sAXContentHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@39f77c7f Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InputSource inputSource0 = new InputSource();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      SAXParseException sAXParseException0 = new SAXParseException("t%CqBHT", locator2Impl0, (Exception) null);
      locator2Impl2.getPublicId();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      locator2Impl0.setLineNumber(2716);
      sAXParseException0.getStackTrace();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.warning(sAXParseException0);
      xMLFilterImpl0.endElement("//home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~", (String) null, (String) null);
      SAXReader sAXReader0 = new SAXReader((String) null);
      try { 
        sAXReader0.read("//home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L Nested exception: no protocol: //home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setStringInternEnabled(false);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IndexedElement indexedElement0 = new IndexedElement("//home/ubuntu/termite/projects/62_dom4j/dr+~-<zDf_<C/org.dom4j.bean.BeanElement0org.jaxen.pattern.Pattern");
      QName qName0 = defaultDocumentFactory0.createQName("a}I%:|*c7Et(b4KM");
      UserDataElement userDataElement0 = new UserDataElement("//tmp/foo.bar/dr+~-<zDf_<C0.tmp");
      UserDataElement userDataElement1 = new UserDataElement(qName0);
      UserDataElement userDataElement2 = userDataElement1.clone();
      userDataElement2.getDocument();
      defaultDocumentFactory0.createDocument();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument((Element) userDataElement0);
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      URI uRI0 = MockURI.aHttpURI;
      DefaultDocumentFactory.getInstance();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.getXPathNamespaceURIs();
      defaultDocumentFactory0.createQName((String) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "a}I%:|*c7Et(b4KM";
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2665975060416996
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultElement defaultElement0 = new DefaultElement(":#o(Y,{L61@L");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(":#o(Y,{L61@L");
      sAXReader_SAXEntityResolver0.resolveEntity(":#o(Y,{L61@L", ":#o(Y,{L61@L");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      SAXParseException sAXParseException0 = new SAXParseException("^=nzPc7WJfFif<q7'y", locator2Impl1, (Exception) null);
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl3);
      locator2Impl4.getPublicId();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl5);
      locator2Impl2.setLineNumber(3655);
      sAXParseException0.getStackTrace();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl0.endElement("//home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~", "`4\"HST[}W)P", (String) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl2, true);
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@bcca9d0 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@bcca9d0 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      MockURL.getFileExample();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("yhhL#|tOrzW&X <%I");
      sAXReader_SAXEntityResolver0.resolveEntity("file://", "");
      Namespace namespace0 = Namespace.get("WCzkVBD4", "");
      namespace0.asXML();
      QName.get("ba[MuOruao`% t", namespace0);
      QName qName0 = QName.get("file://", namespace0, "org.dom4j.tree.DefaultText");
      QName.get("9h(Hu1up#_R?");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      DispatchHandler dispatchHandler1 = new DispatchHandler();
      dispatchHandler0.addHandler("java.util.concurrent.ConcurrentHashMap", dispatchHandler1);
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      sAXReader1.setDefaultHandler(dispatchHandler1);
      try { 
        sAXReader0.setFeature("http://xml.org/sax/features/use-locator2", true);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // Feature 'http://xml.org/sax/features/use-locator2' is read only.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      IndexedElement indexedElement0 = new IndexedElement("\";4");
      QName qName0 = defaultDocumentFactory0.createQName("\";4");
      UserDataElement userDataElement0 = new UserDataElement("\";4");
      UserDataElement userDataElement1 = new UserDataElement(qName0);
      UserDataElement userDataElement2 = new UserDataElement(qName0);
      userDataElement2.getPath();
      userDataElement2.getDocument();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      Visitor visitor0 = mock(Visitor.class, new ViolatedAssumptionAnswer());
      userDataElement1.accept(visitor0);
      try { 
        sAXReader0.read((InputStream) null, "/\";4");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: /\";4 Nested exception: no protocol: /\";4
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setMergeAdjacentText(false);
      String string0 = null;
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      MockFile mockFile0 = new MockFile((String) null, "<^");
      MockFile mockFile1 = new MockFile(mockFile0, "<^");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile1, "Caused by: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Caused by: \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3891188032707174
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getDTDHandler();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      String string0 = "}\"[(U";
      StringReader stringReader0 = new StringReader("}\"[(U");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("P`.V xvQ;FJ");
      InputSource inputSource0 = new InputSource();
      InputSource inputSource1 = new InputSource("");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      URI uRI0 = MockURI.aFTPURI;
      MockURI.parseServerAuthority(uRI0);
      sAXReader0.resetHandlers();
      PipedInputStream pipedInputStream0 = new PipedInputStream(482);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 482);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.278600407264681
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultDocumentFactory0.createDocument("Q7*bss4");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-44);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "http://xml.org/sax/handlers/LexicalHandler");
      defaultDocumentFactory0.createDocument();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " : ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "file://");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDocumentFactory0.createDocument("//home/ubuntu/termite/projects/62_dom4j/-W0rD8=h/home/ubuntu/termite/projects/62_dom4j/ZqZ7(_DhtCxG*bt/O+Go7Mmw)1@;h@/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/PxZ3}m0-W0rD8=h");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDocumentFactory0.createDocument();
      StringReader stringReader0 = new StringReader("");
      InputSource inputSource0 = new InputSource(stringReader0);
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.373752329685786
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("64m3|jO_!ma%hhzC-~");
      InputSource inputSource0 = new InputSource();
      sAXReader_SAXEntityResolver0.resolveEntity("t%CqBHT", "");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      SAXParseException sAXParseException0 = new SAXParseException("t%CqBHT", locator2Impl0, (Exception) null);
      locator2Impl0.setSystemId("64m3|jO_!ma%hhzC-~");
      locator2Impl2.getPublicId();
      locator2Impl1.setLineNumber(4293);
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      sAXParseException0.getLineNumber();
      sAXParseException0.getStackTrace();
      locator2Impl0.getPublicId();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.warning(sAXParseException0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl0.endElement("//home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~", (String) null, (String) null);
      xMLFilterImpl0.endDocument();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setEncoding("/@fka");
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@5113326f Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@5113326f Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.processingInstruction("{/", "{/");
      xMLFilterImpl0.getContentHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl2);
      xMLFilterImpl1.endElement("{/", "{/", "{/");
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl5, false);
      sAXReader0.installXMLFilter((XMLReader) null);
      try { 
        sAXReader0.setXMLReaderClassName("vK/]sbo");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class vK/]sbo not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl0);
      defaultDocumentFactory0.getXPathNamespaceURIs();
      defaultDocumentFactory0.createQName((String) null);
      SAXReader sAXReader0 = new SAXReader(false);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(boolean0);
      assertFalse(sAXReader0.isValidating());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      String string0 = "<^";
      sAXReader_SAXEntityResolver0.uriPrefix = "<^";
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 11;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 11);
      try { 
        pipedOutputStream0.connect(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      IndexedElement indexedElement0 = new IndexedElement("");
      QName qName0 = defaultDocumentFactory0.createQName("");
      UserDataElement userDataElement0 = new UserDataElement("");
      UserDataElement userDataElement1 = userDataElement0.clone();
      Class<String> class0 = String.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      userDataElement1.attributeValue(qName0);
      userDataElement0.getQualifiedName();
      BeanMetaData beanMetaData1 = new BeanMetaData(class0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList((BeanElement) null, beanMetaData1);
      userDataElement0.setAttributes((List<Attribute>) beanAttributeList0);
      userDataElement0.getDocument();
      UserDataElement userDataElement2 = new UserDataElement((String) null);
      UserDataElement userDataElement3 = new UserDataElement("");
      userDataElement3.getDocument();
      defaultDocumentFactory0.createDocument((Element) null);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      URI uRI0 = MockURI.aHttpURI;
      MockURI.toURL(uRI0);
      try { 
        sAXReader0.read((InputStream) null, "oICW9Ob:A~{");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unknown protocol: oicw9ob Nested exception: unknown protocol: oicw9ob
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Y]^PvuJ$<PAt:UV5H");
      InputSource inputSource0 = new InputSource();
      sAXReader_SAXEntityResolver0.uriPrefix = "org.jaxen.saxpath.XPathSyntaxException";
      sAXReader_SAXEntityResolver0.resolveEntity("org.jaxen.saxpath.XPathSyntaxException", "k~\"");
      String string0 = null;
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      SAXParseException sAXParseException0 = new SAXParseException("org.jaxen.saxpath.XPathSyntaxException", locator2Impl0, (Exception) null);
      locator2Impl2.getPublicId();
      Locator2Impl locator2Impl3 = null;
      try {
        locator2Impl3 = new Locator2Impl((Locator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.2572735276240543
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("64m3|jO_!ma%hhzC-~");
      InputSource inputSource0 = new InputSource();
      sAXReader_SAXEntityResolver0.resolveEntity("64m3|jO_!ma%hhzC-~", "m+:FE}cC|1'yCi");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl0);
      SAXParseException sAXParseException0 = new SAXParseException("&K*CqVVk*L'*.z>.ush", locator2Impl3, (Exception) null);
      locator2Impl3.setSystemId("m+:FE}cC|1'yCi");
      locator2Impl1.getPublicId();
      locator2Impl3.getSystemId();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl1);
      sAXParseException0.getStackTrace();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      locator2Impl5.getPublicId();
      locator2Impl5.getXMLVersion();
      locator2Impl3.setSystemId("t%CqBHT");
      locator2Impl5.getPublicId();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.warning(sAXParseException0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl0.endElement("", "t%CqBHT", (String) null);
      xMLFilterImpl1.endDocument();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      try { 
        sAXReader0.read("pCj4nGf1S+iB>+7aBn");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@a5c5e06 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@a5c5e06 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "vd=M}Vrduqn";
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.installXMLFilter(parserAdapter0);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.createContentHandler(xMLFilterImpl1);
      StringReader stringReader0 = new StringReader("a}I%:|*c7Et!b4KM");
      DefaultDocument defaultDocument0 = new DefaultDocument("a}I%:|*c7Et!b4KM");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[4];
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument();
      BeanElement beanElement0 = new BeanElement("//home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k", "//home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endDocument();
      xMLFilterImpl0.endDocument();
      MockFile.createTempFile("//home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k", "//home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("a}I%:|*c7Et(b4KM");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      IndexedElement indexedElement0 = new IndexedElement("");
      QName qName0 = defaultDocumentFactory0.createQName("");
      UserDataElement userDataElement0 = new UserDataElement("");
      UserDataElement userDataElement1 = userDataElement0.clone();
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      defaultDocumentFactory0.createAttribute((Element) userDataElement0, qName0, "//home/ubuntu/termite/projects/62_dom4j/dr+~-<zDf_<C/org.dom4j.bean.BeanElement0org.jaxen.pattern.Pattern");
      beanMetaData0.createAttributeList((BeanElement) null);
      userDataElement1.getQualifiedName();
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList((BeanElement) null);
      userDataElement1.setAttributes((List<Attribute>) beanAttributeList0);
      userDataElement1.getDocument();
      UserDataElement userDataElement2 = userDataElement0.clone();
      userDataElement0.getDocument();
      defaultDocumentFactory0.createDocument((Element) userDataElement2);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      URI uRI0 = MockURI.aHttpURI;
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      URI uRI2 = MockURI.resolve(uRI0, uRI1);
      URI uRI3 = MockURI.aHttpURI;
      URI uRI4 = MockURI.aFileURI;
      MockURI.relativize(uRI2, uRI0);
      MockURI.toURL(uRI0);
      URI uRI5 = MockURI.aHttpURI;
      URI uRI6 = MockURI.aHttpURI;
      URI uRI7 = MockURI.aHttpURI;
      MockFile.createTempFile("http://xml.org/sax/handlers/LexicalHandler", (String) null);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("Dfs=0S/", "Dfs=0S/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Dfs=0S/\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.490922603994677
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader((XMLReader) null, true);
          sAXReader0.setStripWhitespaceText(false);
          sAXReader0.setXMLReader((XMLReader) null);
          DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
          sAXReader0.setDocumentFactory(documentFactory0);
          FileSystemHandling.createFolder((EvoSuiteFile) null);
          DocumentFactory documentFactory1 = sAXReader0.getDocumentFactory();
          sAXReader0.setDocumentFactory(documentFactory1);
          sAXReader0.getXMLFilter();
          URL uRL0 = MockURL.getFtpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor386.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor386.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.isIncludeInternalDTDDeclarations();
      String string0 = "@qk-\"";
      CharBuffer.allocate(0);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("t%CqBHT", "9En%Ugvo v^");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SAXParseException sAXParseException0 = new SAXParseException((String) null, locator2Impl1, (Exception) null);
      locator2Impl0.setXMLVersion((String) null);
      locator2Impl0.getColumnNumber();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl2);
      Locator2Impl locator2Impl3 = new Locator2Impl();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl3);
      sAXParseException0.getStackTrace();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXParseException sAXParseException1 = new SAXParseException((String) null, (String) null, "WU<NUVFRYlD", 47, 47, sAXParseException0);
      xMLFilterImpl0.warning(sAXParseException1);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      xMLFilterImpl1.endDocument();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMNamespace dOMNamespace0 = new DOMNamespace("BZ", "ZC>[R8Q^:].ut7");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      QName.get("~wmti_s289r7D", (Namespace) dOMNamespace0);
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      defaultDocumentFactory0.getQNames();
      defaultDocumentFactory0.createDocument();
      defaultDocumentFactory0.createQName("");
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertNotNull(xMLReader0);
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      String string0 = "";
      defaultDocumentFactory1.createElement("");
      UserDataElement userDataElement0 = new UserDataElement("");
      UserDataElement userDataElement1 = userDataElement0.clone();
      userDataElement1.add((Node) userDataElement0);
      defaultDocumentFactory1.createDocument();
      defaultDocumentFactory1.createDocument((Element) userDataElement1);
      DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      sAXReader0.setValidation(true);
      String string0 = "";
      try { 
        sAXReader0.setProperty("", "");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      sAXReader0.getDocumentFactory();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)47;
      StringReader stringReader0 = new StringReader("");
      DOMDocument dOMDocument0 = new DOMDocument();
      assertFalse(dOMDocument0.supportsParent());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      IndexedElement indexedElement0 = new IndexedElement("");
      QName qName0 = defaultDocumentFactory0.createQName("");
      UserDataElement userDataElement0 = new UserDataElement("");
      UserDataElement userDataElement1 = userDataElement0.clone();
      Class<String> class0 = String.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      userDataElement1.attributeValue(qName0);
      userDataElement0.attributeValue(qName0, "");
      userDataElement0.getQualifiedName();
      BeanMetaData beanMetaData1 = new BeanMetaData(class0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList((BeanElement) null, beanMetaData1);
      userDataElement0.setAttributes((List<Attribute>) beanAttributeList0);
      userDataElement0.getDocument();
      UserDataElement userDataElement2 = new UserDataElement((String) null);
      UserDataElement userDataElement3 = new UserDataElement("");
      userDataElement3.getDocument();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      URI uRI0 = MockURI.aHttpURI;
      MockURI.toURL(uRI0);
      try { 
        sAXReader0.setXMLReaderClassName(";:s_@EQ~h`fXVqAZz");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class ;:s_@EQ~h`fXVqAZz not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("file://");
      UserDataElement userDataElement0 = new UserDataElement("file://");
      UserDataElement userDataElement1 = userDataElement0.clone();
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      userDataElement1.attributeValue(qName0);
      userDataElement1.getQualifiedName();
      Class<InputStream> class1 = InputStream.class;
      BeanMetaData beanMetaData1 = new BeanMetaData(class1);
      Class<Object> class2 = Object.class;
      BeanMetaData beanMetaData2 = new BeanMetaData(class2);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList((BeanElement) null, beanMetaData2);
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      userDataElement1.setAttributes((List<Attribute>) linkedList0);
      userDataElement1.getDocument();
      UserDataElement userDataElement2 = new UserDataElement("http://xml.org/sax/properties/declaration-handler");
      UserDataElement userDataElement3 = new UserDataElement("http://xml.org/sax/properties/declaration-handler");
      defaultDocumentFactory0.createDocument((Element) userDataElement2);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      URI uRI0 = MockURI.aHttpURI;
      MockURI.toURL(uRI0);
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.setXMLReaderClassName("c");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class c not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      sAXReader0.createDefaultEntityResolver(" n=U");
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("64m3|jO_!ma%hhzC-~");
      InputSource inputSource0 = new InputSource();
      sAXReader_SAXEntityResolver0.resolveEntity("t%CqBHT", "");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      SAXParseException sAXParseException0 = new SAXParseException("t%CqBHT", locator2Impl0, (Exception) null);
      locator2Impl2.getPublicId();
      BeanElement beanElement0 = new BeanElement("#", (Object) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("jZfplIaXy^Px$OKL");
      sAXReader_SAXEntityResolver0.resolveEntity("jZfplIaXy^Px$OKL", "jZfplIaXy^Px$OKL");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      SAXParseException sAXParseException0 = new SAXParseException("org.saxpath.driver", locator2Impl1, (Exception) null);
      locator2Impl1.setSystemId("a=#4cjx8");
      locator2Impl2.getPublicId();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl1);
      sAXParseException0.getStackTrace();
      locator2Impl0.getPublicId();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.warning(sAXParseException0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.endElement("b_P]_?o&9:N$>", "2", "org.saxpath.driver");
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl2.endDocument();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl2, false);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.2572735276240543
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("64m3|jO_!ma%hhzC-~");
      InputSource inputSource0 = new InputSource();
      sAXReader_SAXEntityResolver0.resolveEntity("64m3|jO_!ma%hhzC-~", "m+:FE}cC|1'yCi");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl0);
      SAXParseException sAXParseException0 = new SAXParseException("&K*CqVVk*L'*.z>.ush", locator2Impl3, (Exception) null);
      locator2Impl3.setSystemId("m+:FE}cC|1'yCi");
      locator2Impl1.getPublicId();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl1);
      sAXParseException0.getStackTrace();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      locator2Impl5.getXMLVersion();
      locator2Impl3.setSystemId("t%CqBHT");
      locator2Impl5.getPublicId();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.warning(sAXParseException0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl0.endElement("", "t%CqBHT", (String) null);
      xMLFilterImpl1.endDocument();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      try { 
        sAXReader0.read("pCj4nGf1S+iB>+7aBn");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@49c3c45c Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@49c3c45c Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.2631550402832814
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      locator2Impl2.getPublicId();
      locator2Impl0.setLineNumber((-52));
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      xMLFilterImpl3.endElement(" : ", "8", " : ");
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl2);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.uriPrefix = null;
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("a}I%:|*c7Et(b4KM");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("a}I%:|*c7Et(b4KM", "a}I%:|*c7Et(b4KM");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 20);
      byte byte0 = (byte)56;
      byte byte1 = (byte)109;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)0;
      pipedOutputStream0.write(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, (InputStream) null);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.getExternalSubset("IWSK+V):p", "M(ju\"5(O");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.processingInstruction("{/", "{/");
      xMLFilterImpl0.getContentHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl2);
      xMLFilterImpl1.endElement("{/", "{/", "{/");
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl5, false);
      sAXReader0.getXMLReader();
      sAXReader0.addHandler("%5fPkC", (ElementHandler) null);
      try { 
        sAXReader0.setXMLReaderClassName("vK/]sbo");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class vK/]sbo not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("yFlg7g@SVGPEb ", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class yFlg7g@SVGPEb  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createDocument();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory2);
      defaultDocumentFactory2.createQName("M`H5gscmu$J", "M`H5gscmu$J", "M`H5gscmu$J");
      try { 
        sAXReader0.read((Reader) null, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("<c1:&ix");
      mockFile0.getCanonicalFile();
      File file0 = MockFile.createTempFile("<c1:&ix", "", (File) mockFile0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      IndexedElement indexedElement0 = new IndexedElement("");
      defaultDocumentFactory0.createQName("");
      UserDataElement userDataElement0 = new UserDataElement("");
      UserDataElement userDataElement1 = userDataElement0.clone();
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      userDataElement1.getQualifiedName();
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList((BeanElement) null);
      userDataElement1.setAttributes((List<Attribute>) beanAttributeList0);
      userDataElement1.getDocument();
      UserDataElement userDataElement2 = userDataElement0.clone();
      userDataElement0.getDocument();
      defaultDocumentFactory0.createDocument((Element) userDataElement2);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      sAXReader0.createXMLReader();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.239095456210609
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      locator2Impl2.getPublicId();
      locator2Impl1.setLineNumber(10);
      xMLFilterImpl1.endElement("", "", (String) null);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl3, true);
      try { 
        sAXReader0.read("Op");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@1c5203a6 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@1c5203a6 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.465500503466095
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      dispatchHandler0.setDefaultHandler(sAXModifyElementHandler0);
      dispatchHandler0.removeHandler((String) null);
      dispatchHandler0.removeHandler((String) null);
      sAXReader0.addHandler((String) null, (ElementHandler) null);
      String string0 = null;
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL(uRL0, " attributes: ", uRLStreamHandler0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertNotNull(dispatchHandler0);
      
      sAXReader0.setDispatchHandler(dispatchHandler0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.startPrefixMapping("f&X y)`|#5}2'keO", "JvK1QGdME6awm");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertNotNull(dispatchHandler0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("<c:&iNx");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.removeHandler("//<c1:&ix/<c1:&ix0");
      sAXReader0.setDefaultHandler((ElementHandler) null);
      mockFile0.getCanonicalFile();
      mockFile0.toURL();
      MockFile.createTempFile("jz3wxHq]vQr\"", "jz3wxHq]vQr\"");
      String string0 = "@*";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "@*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"@*\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":I^r@sB");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.processingInstruction("{b", "{b");
      xMLFilterImpl0.setContentHandler(xMLFilterImpl0);
      xMLFilterImpl0.getContentHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = '\\';
      charArray0[2] = '(';
      charArray0[3] = '~';
      charArray0[4] = 'i';
      charArray0[5] = 'E';
      charArray0[6] = '8';
      charArray0[7] = 'E';
      charArray0[8] = '!';
      xMLFilterImpl1.ignorableWhitespace(charArray0, 47, 2090);
      xMLFilterImpl1.endElement("{b", "{b", "{b");
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl2.getParent();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl2, false);
      sAXReader0.setXMLReader(xMLFilterImpl1);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      try { 
        MockURL.URL("5[E_8_Na*:Vv2", "http://xml.org/sax/properties/declaration-handler", 574, "//home/ubuntu/termite/projects/62_dom4j/This Attribute is read only and cannot be changed/This Attribute is read only and cannot be changed/ Stack: 0 Stack: ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 5[e_8_na*:vv2
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIgnoreComments(false);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      URI uRI2 = MockURI.parseServerAuthority(uRI1);
      URI uRI3 = MockURI.aHttpURI;
      URI uRI4 = MockURI.aHttpURI;
      MockURI.relativize(uRI2, uRI0);
      MockURI.toURL(uRI0);
      URI uRI5 = MockURI.aHttpURI;
      URI uRI6 = MockURI.aHttpURI;
      MockURI.toURL(uRI5);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endDocument();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0, false);
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isValidating());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isMergeAdjacentText());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.setFeature("space", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'space' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      IndexedElement indexedElement0 = new IndexedElement("");
      defaultDocumentFactory0.createQName("");
      UserDataElement userDataElement0 = new UserDataElement("");
      UserDataElement userDataElement1 = userDataElement0.clone();
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList((BeanElement) null);
      userDataElement1.setAttributes((List<Attribute>) beanAttributeList0);
      userDataElement1.getDocument();
      userDataElement0.clone();
      userDataElement0.getDocument();
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader(")1j");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class )1j not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k");
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, true);
      BeanElement beanElement0 = new BeanElement("//home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k", "//home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.endDocument();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.getEntityResolver();
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl1.endElement("{b", "{b", "");
      xMLFilterImpl0.processingInstruction("", "{b");
      xMLFilterImpl2.endElement("nv\u0004Wp&z1%a%%Xu$L~", "", "");
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl1);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL("", "", 13, "", uRLStreamHandler0);
      DOMDocument dOMDocument0 = new DOMDocument();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl3);
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument();
      BeanElement beanElement0 = new BeanElement("//home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projectsQ62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^*!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im04MI*tMvWhg]7q4T>~1zDs(F7e%]k", "//home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertSame(documentFactory0, defaultDocumentFactory0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      IndexedElement indexedElement0 = new IndexedElement("\";4");
      QName qName0 = defaultDocumentFactory0.createQName("\";4");
      UserDataElement userDataElement0 = new UserDataElement("\";4");
      UserDataElement userDataElement1 = new UserDataElement(qName0);
      UserDataElement userDataElement2 = new UserDataElement(qName0);
      userDataElement2.getPath();
      defaultDocumentFactory0.createDocument();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      Visitor visitor0 = mock(Visitor.class, new ViolatedAssumptionAnswer());
      userDataElement1.accept(visitor0);
      try { 
        sAXReader0.read("qYl~n7%Kl>");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: qYl~n7%Kl> Nested exception: no protocol: qYl~n7%Kl>
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      IndexedElement indexedElement0 = new IndexedElement("");
      defaultDocumentFactory0.createQName("");
      UserDataElement userDataElement0 = new UserDataElement("");
      UserDataElement userDataElement1 = userDataElement0.clone();
      DefaultDocument defaultDocument0 = new DefaultDocument("");
      defaultDocumentFactory0.createDocument();
      defaultDocumentFactory0.createDocument((Element) userDataElement1);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      URI uRI0 = MockURI.aHttpURI;
      DefaultDocumentFactory.getInstance();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, (InputStream) null);
      bufferedInputStream0.close();
      sAXReader0.isValidating();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument();
      BeanElement beanElement0 = new BeanElement("//home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k", "//home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~/home/ubuntu/termite/projects/62_dom4j/:#o(Y,{L61@L/:#o(Y,{L61@L/:#o(Y,{L61@L0:#o(Y,{L61@L/64m3|jO_!ma%hhzC-~/dllg^W!_0/home/ubuntu/termite/projects/62_dom4j/*g%/d4MI*tMvWhg]7q4T>~/%>zUQ&@R?=im0d4MI*tMvWhg]7q4T>~1zDs(F7e%]k");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader0.read((Reader) null, "//home/ubuntu/termite/projects/62_dom4j/dr+~-<zDf_<C/64,m3|jO_!m%hzC-~/. Exception: 0dr+~-<zDf_<C");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //home/ubuntu/termite/projects/62_dom4j/dr+~-<zDf_<C/64,m3|jO_!m%hzC-~/. Exception: 0dr+~-<zDf_<C Nested exception: no protocol: //home/ubuntu/termite/projects/62_dom4j/dr+~-<zDf_<C/64,m3|jO_!m%hzC-~/. Exception: 0dr+~-<zDf_<C
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
