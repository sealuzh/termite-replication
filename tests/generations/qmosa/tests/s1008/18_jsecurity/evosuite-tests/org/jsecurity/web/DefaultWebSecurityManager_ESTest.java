/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 04:06:57 GMT 2019
 */

package org.jsecurity.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.function.Predicate;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletRequest;
import javax.servlet.ServletRequestWrapper;
import javax.servlet.ServletResponse;
import javax.servlet.ServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsecurity.authc.AuthenticationToken;
import org.jsecurity.authc.UsernamePasswordToken;
import org.jsecurity.authc.pam.ModularRealmAuthenticator;
import org.jsecurity.authz.ModularRealmAuthorizer;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.permission.AllPermission;
import org.jsecurity.authz.permission.WildcardPermission;
import org.jsecurity.authz.permission.WildcardPermissionResolver;
import org.jsecurity.cache.Cache;
import org.jsecurity.mgt.DefaultSecurityManager;
import org.jsecurity.realm.Realm;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.session.Session;
import org.jsecurity.session.mgt.eis.MemorySessionDAO;
import org.jsecurity.subject.DelegatingSubject;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.jsecurity.subject.Subject;
import org.jsecurity.web.DefaultWebSecurityManager;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultWebSecurityManager_ESTest extends DefaultWebSecurityManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7102476273485032
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      linkedList0.stream();
      char[] charArray0 = new char[2];
      MemorySessionDAO memorySessionDAO0 = new MemorySessionDAO();
      memorySessionDAO0.setActiveSessionsCacheName("&J e _+^FgH48y8R@");
      memorySessionDAO0.getActiveSessionsCache();
      simpleAccountRealm0.setAuthorizationCache((Cache) null);
      linkedHashSet0.add(simpleAccountRealm0);
      linkedHashSet0.add(simpleAccountRealm0);
      linkedList0.add((Realm) simpleAccountRealm0);
      linkedList0.add((Realm) simpleAccountRealm0);
      linkedList0.add((Realm) simpleAccountRealm0);
      linkedHashSet0.add(simpleAccountRealm0);
      LinkedList<Realm> linkedList1 = new LinkedList<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer(linkedHashSet0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      System.setCurrentTimeMillis(1032L);
      defaultWebSecurityManager0.newSessionManagerInstance();
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.080026147728218
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      Predicate<Object> predicate5 = Predicate.isEqual(object0);
      predicate3.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      predicate4.and(predicate3);
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      predicate7.negate();
      predicate7.or(predicate1);
      Object object1 = new Object();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(predicate7, "m(4'3U-!VyV^`=igWv");
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(simplePrincipalCollection0, false, inetAddress0, (Session) null, defaultSecurityManager0);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper1.removeAttribute(", which is enabled by default when the ");
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper1, servletResponseWrapper0);
      DelegatingSubject delegatingSubject1 = new DelegatingSubject(defaultSecurityManager0);
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(delegatingSubject0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4881075087522722
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getContentType();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager(simpleAccountRealm0);
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultSecurityManager0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper5);
      servletResponseWrapper1.setContentLength((-485));
      servletResponseWrapper4.getContentType();
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper5);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper7);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY", (char[]) null);
      servletRequestWrapper1.setAttribute("&y", "&y");
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper3);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DelegatingSubject delegatingSubject1 = new DelegatingSubject(simplePrincipalCollection0, true, inetAddress0, (Session) null, defaultSecurityManager0);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper6);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.bind(delegatingSubject1, servletRequestWrapper3, servletResponseWrapper10);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper5);
      defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper3, servletResponseWrapper7);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8107834294277172
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      Predicate.isEqual((Object) simpleAccountRealm1);
      linkedList0.add((Realm) simpleAccountRealm1);
      ModularRealmAuthorizer modularRealmAuthorizer1 = new ModularRealmAuthorizer(linkedList0);
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      defaultWebSecurityManager1.setSessionMode("jsecurity");
      defaultWebSecurityManager1.setSessionMode("jsecurity");
      assertEquals("jsecurity", defaultWebSecurityManager1.getSessionMode());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(servletRequest0).getLocale();
      doReturn((String) null).when(servletRequest0).getProtocol();
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper0.getLocale();
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper5);
      servletRequestWrapper1.getProtocol();
      servletRequestWrapper0.getRemoteHost();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      System.setCurrentTimeMillis(0L);
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper5);
      ServletRequestWrapper servletRequestWrapper8 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(simplePrincipalCollection0, true, inetAddress0, (Session) null, defaultWebSecurityManager0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper4, servletResponseWrapper0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.018703762168135
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      linkedList0.stream();
      char[] charArray0 = new char[2];
      charArray0[1] = '}';
      MemorySessionDAO memorySessionDAO0 = new MemorySessionDAO();
      memorySessionDAO0.getActiveSessionsCache();
      simpleAccountRealm0.setAuthorizationCache((Cache) null);
      linkedHashSet0.add(simpleAccountRealm0);
      linkedList0.add((Realm) simpleAccountRealm0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("&J e _+^FgH48y8R@", charArray0, false, (InetAddress) null);
      usernamePasswordToken0.setUsername("&J e _+^FgH48y8R@");
      usernamePasswordToken0.setPassword(charArray0);
      Predicate.isEqual((Object) usernamePasswordToken0);
      linkedList0.add((Realm) simpleAccountRealm0);
      linkedList0.add((Realm) simpleAccountRealm0);
      linkedHashSet0.add(simpleAccountRealm0);
      LinkedList<Realm> linkedList1 = new LinkedList<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer1 = new ModularRealmAuthorizer(linkedHashSet0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      System.setCurrentTimeMillis(1733L);
      System.setCurrentTimeMillis(1032L);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      Subject subject0 = defaultWebSecurityManager0.createSubject((PrincipalCollection) null, true, (Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) null);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(subject0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.156958459902444
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      linkedList0.stream();
      char[] charArray0 = new char[2];
      simpleAccountRealm0.init();
      simpleAccountRealm0.setAuthorizationCacheName("jsecurity");
      charArray0[1] = '}';
      MemorySessionDAO memorySessionDAO0 = new MemorySessionDAO();
      memorySessionDAO0.setActiveSessionsCacheName("&J e _+^FgH48y8R@");
      memorySessionDAO0.getActiveSessionsCache();
      simpleAccountRealm0.setAuthorizationCache((Cache) null);
      linkedHashSet0.add(simpleAccountRealm0);
      linkedList0.add((Realm) simpleAccountRealm0);
      linkedList0.add((Realm) simpleAccountRealm0);
      linkedList0.add((Realm) simpleAccountRealm0);
      linkedHashSet0.add(simpleAccountRealm0);
      LinkedList<Realm> linkedList1 = new LinkedList<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer(linkedHashSet0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      System.setCurrentTimeMillis(1032L);
      defaultWebSecurityManager0.setSessionIdCookieName("jsecurity-activeSessionCache");
      defaultWebSecurityManager0.setSessionIdCookieSecure(true);
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6910688711446102
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(servletRequest0).getLocale();
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper0.getLocale();
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequest servletRequest1 = servletRequestWrapper6.getRequest();
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper4);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      ServletRequestWrapper servletRequestWrapper8 = new ServletRequestWrapper(servletRequest1);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequestWrapper servletRequestWrapper9 = new ServletRequestWrapper(servletRequest1);
      defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper5, (ServletResponse) servletResponseWrapper0);
      defaultWebSecurityManager0.isAuthenticated((Session) null, servletRequestWrapper6, servletResponseWrapper0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("_PRINCIPALS_SESSION_KEY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [_PRINCIPALS_SESSION_KEY].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8834269408602102
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      linkedList0.stream();
      char[] charArray0 = new char[2];
      charArray0[1] = '}';
      MemorySessionDAO memorySessionDAO0 = new MemorySessionDAO();
      memorySessionDAO0.getActiveSessionsCache();
      simpleAccountRealm0.setAuthorizationCache((Cache) null);
      linkedHashSet0.add(simpleAccountRealm0);
      linkedList0.add((Realm) simpleAccountRealm0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("&J e _+^FgH48y8R@", charArray0, false, (InetAddress) null);
      usernamePasswordToken0.setUsername("&J e _+^FgH48y8R@");
      usernamePasswordToken0.setPassword(charArray0);
      Predicate.isEqual((Object) usernamePasswordToken0);
      linkedList0.add((Realm) simpleAccountRealm0);
      linkedList0.add((Realm) simpleAccountRealm0);
      linkedHashSet0.add(simpleAccountRealm0);
      LinkedList<Realm> linkedList1 = new LinkedList<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer1 = new ModularRealmAuthorizer(linkedHashSet0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager1.setSessionMode("jsecurity");
      defaultWebSecurityManager0.isHttpSessionMode();
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6120172700343436
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponse servletResponse0 = null;
      ServletRequest servletRequest1 = null;
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) null, (ServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0217997374003334
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      linkedList0.stream();
      char[] charArray0 = new char[14];
      charArray0[1] = '}';
      MemorySessionDAO memorySessionDAO0 = new MemorySessionDAO();
      memorySessionDAO0.getActiveSessionsCache();
      simpleAccountRealm0.setAuthorizationCache((Cache) null);
      linkedHashSet0.add(simpleAccountRealm0);
      linkedList0.add((Realm) simpleAccountRealm0);
      linkedList0.add((Realm) simpleAccountRealm0);
      linkedList0.add((Realm) simpleAccountRealm0);
      linkedHashSet0.add(simpleAccountRealm0);
      LinkedList<Realm> linkedList1 = new LinkedList<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer1 = new ModularRealmAuthorizer(linkedHashSet0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      System.setCurrentTimeMillis(1733L);
      System.setCurrentTimeMillis(1032L);
      defaultWebSecurityManager0.isHttpSessionMode();
      defaultWebSecurityManager0.setSessionIdCookieName("&J e _+^FgH48y8R@");
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.796328015521425
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      Predicate.isEqual((Object) simpleAccountRealm0);
      LinkedList<Realm> linkedList1 = new LinkedList<Realm>();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(servletRequest0).getAttribute(anyString());
      doReturn(0).when(servletRequest0).getContentLength();
      doReturn(0).when(servletRequest0).getServerPort();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper1.getAttribute("XWo/@iqpb^");
      servletRequestWrapper1.removeAttribute("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      servletRequestWrapper1.getContentLength();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "http");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      servletRequestWrapper1.getServerPort();
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      System.setCurrentTimeMillis(0);
      boolean boolean0 = defaultWebSecurityManager0.isAuthenticated((Session) null);
      assertFalse(boolean0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.156958459902444
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      Integer integer0 = new Integer((-3645));
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.setSessionIdCookieName("The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is ");
      defaultWebSecurityManager0.setSessionIdCookieMaxAge((-2507));
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0217997374003334
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      defaultWebSecurityManager0.destroy();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)71;
      defaultWebSecurityManager0.setRememberMeCipherKey(byteArray0);
      byte[] byteArray1 = new byte[0];
      defaultWebSecurityManager0.setRememberMeDecryptionCipherKey(byteArray1);
      Integer integer0 = new Integer((-3645));
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.setSessionIdCookiePath("method to use a better algorithm.");
      defaultWebSecurityManager0.isHttpSessionMode();
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      servletResponseWrapper1.setContentLength((-1));
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper0, servletResponseWrapper3);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      predicate3.or(predicate1);
      predicate3.negate();
      predicate1.and(predicate0);
      Boolean boolean0 = new Boolean(false);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate5 = predicate1.and(predicate2);
      Object object0 = new Object();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate7 = predicate4.or(predicate3);
      predicate7.negate();
      Predicate<Object> predicate8 = predicate5.and(predicate4);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate4);
      predicate8.and(predicate9);
      predicate0.and(predicate6);
      Predicate<Object> predicate10 = predicate4.negate();
      Predicate<Object> predicate11 = predicate7.or(predicate10);
      predicate11.or(predicate5);
      Object object1 = new Object();
      Object object2 = new Object();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind((Subject) null, servletRequestWrapper0, (ServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8686121260453956
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      Predicate.isEqual((Object) simpleAccountRealm0);
      linkedList0.add((Realm) simpleAccountRealm0);
      LinkedList<Realm> linkedList1 = new LinkedList<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer1 = new ModularRealmAuthorizer(linkedList0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      System.setCurrentTimeMillis(0L);
      defaultWebSecurityManager0.getSessionMode();
      assertFalse(defaultWebSecurityManager0.isHttpSessionMode());
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      Session session0 = null;
      ServletRequest servletRequest0 = null;
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      defaultWebSecurityManager0.getPrincipals((Session) null, (ServletRequest) null, servletResponseWrapper0);
      String string0 = ".g8H85M+,+%";
      servletResponseWrapper0.setContentType(".g8H85M+,+%");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((PrincipalCollection) null, false, (Session) null, (ServletRequest) null, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      linkedList0.stream();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8c;4\"3*D{VS<;\"A,");
      Predicate<Object> predicate4 = predicate2.negate();
      linkedList0.iterator();
      predicate1.and(predicate0);
      Boolean boolean0 = new Boolean(true);
      predicate4.and(predicate1);
      predicate1.and(predicate3);
      Predicate<Object> predicate5 = predicate3.or(predicate2);
      LinkedList<Realm> linkedList1 = new LinkedList<Realm>();
      Predicate<Object> predicate6 = predicate5.or(predicate4);
      linkedList1.removeIf(predicate6);
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      System.setCurrentTimeMillis((-1974L));
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      defaultWebSecurityManager0.getPrincipals((Session) null, servletRequestWrapper0, servletResponseWrapper0);
      WildcardPermission wildcardPermission0 = new WildcardPermission("java.util.LinkedHashMap");
      defaultWebSecurityManager0.isPermitted((PrincipalCollection) null, (Permission) wildcardPermission0);
      System.setCurrentTimeMillis(700L);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8083695164005986
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)118;
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      Permission permission0 = wildcardPermissionResolver0.resolvePermission("V_N\"#Z1?bB_#5$XaY(");
      Permission permission1 = wildcardPermissionResolver0.resolvePermission("V_N\"#Z1?bB_#5$XaY(");
      WildcardPermission wildcardPermission0 = new WildcardPermission("MD2");
      wildcardPermission0.implies(permission0);
      wildcardPermission0.implies(permission0);
      wildcardPermission0.implies(permission0);
      wildcardPermission0.implies(permission0);
      Boolean boolean0 = new Boolean("+V}F:P]^XM");
      wildcardPermission0.implies(wildcardPermission0);
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      wildcardPermission0.implies(permission0);
      wildcardPermissionResolver1.resolvePermission("4d8TW");
      wildcardPermission0.implies(permission1);
      wildcardPermissionResolver1.resolvePermission("4d8TW");
      WildcardPermission wildcardPermission1 = new WildcardPermission("ae@GSm9$TFz^EqW");
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      DefaultWebSecurityManager defaultWebSecurityManager2 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager2.createSubject((ServletRequest) null, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      Boolean boolean0 = new Boolean(false);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null).when(servletResponse0).getWriter();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      servletResponseWrapper3.getWriter();
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper3);
      servletResponseWrapper2.reset();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.getPrincipals((Session) null);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      predicate3.or(predicate1);
      predicate1.and(predicate0);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate5 = predicate1.and(predicate2);
      Object object0 = new Object();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate7 = predicate4.or(predicate3);
      predicate7.or(predicate3);
      predicate7.negate();
      Predicate<Object> predicate8 = predicate5.and(predicate4);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate4);
      predicate8.and(predicate9);
      predicate0.and(predicate6);
      predicate4.negate();
      System.setCurrentTimeMillis(0L);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("http");
      System.setCurrentTimeMillis(2L);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1612));
      Integer.max(740, (-183));
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(simpleAccountRealm0, "org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY");
      System.setCurrentTimeMillis(969L);
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      Locale locale0 = Locale.forLanguageTag("k=_");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      defaultWebSecurityManager0.hasAllRoles(simplePrincipalCollection1, set0);
      defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      Integer integer1 = new Integer(0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieMaxAge(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      String string0 = "net.sf.ehcache.store.DiskStore$SpoolAndExpiryThread";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "net.sf.ehcache.store.DiskStore$SpoolAndExpiryThread");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "h/<DC.AX] ");
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      modularRealmAuthenticator0.getModularAuthenticationStrategy();
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager((Realm) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realm argument cannot be null
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("d\"i}OH2/*KtjXkd");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookieMaxAge((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      simpleAccountRealm0.init();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookiePath("http");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      WildcardPermission wildcardPermission0 = new WildcardPermission("En%ou.}9&");
      AllPermission allPermission0 = new AllPermission();
      wildcardPermission0.implies(allPermission0);
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      wildcardPermissionResolver0.resolvePermission("En%ou.}9&");
      WildcardPermission wildcardPermission1 = new WildcardPermission("~HGM{_\"0yi[j", false);
      wildcardPermission1.implies(wildcardPermission0);
      WildcardPermission wildcardPermission2 = new WildcardPermission("vI'", false);
      AllPermission allPermission1 = new AllPermission();
      WildcardPermission wildcardPermission3 = new WildcardPermission("vI'");
      wildcardPermission1.implies(wildcardPermission3);
      wildcardPermission1.implies(allPermission1);
      wildcardPermission0.implies(wildcardPermission2);
      wildcardPermission1.implies(wildcardPermission2);
      wildcardPermissionResolver0.resolvePermission("f(");
      wildcardPermission0.implies(wildcardPermission2);
      wildcardPermission2.implies(wildcardPermission1);
      System.setCurrentTimeMillis(0L);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      Collection<Realm> collection0 = defaultWebSecurityManager0.getRealms();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(collection0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.setSessionIdCookieMaxAge(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(simpleAccountRealm0, "");
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      Class<Realm> class0 = Realm.class;
      simplePrincipalCollection1.byType(class0);
      MemorySessionDAO memorySessionDAO0 = new MemorySessionDAO();
      Class<AuthenticationToken> class1 = AuthenticationToken.class;
      simpleAccountRealm1.setAuthenticationTokenClass(class1);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm1);
      String string0 = defaultWebSecurityManager0.getSessionMode();
      assertEquals("http", string0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "5H");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "5H");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ignoring ehcache attribute ");
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [null].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      defaultWebSecurityManager0.setRememberMeCookiePath("].  Allowed values are ");
      String string0 = "i8z3";
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookiePath("i8z3");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(servletRequest0).getCharacterEncoding();
      doReturn(0).when(servletRequest0).getContentLength();
      doReturn((String[]) null).when(servletRequest0).getParameterValues(anyString());
      doReturn((RequestDispatcher) null).when(servletRequest0).getRequestDispatcher(anyString());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper0.getCharacterEncoding();
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper4.getCharacterEncoding();
      servletRequestWrapper5.getContentLength();
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper5);
      servletRequestWrapper5.getRequestDispatcher("u8?(l[|^Wrkoey[}0m|");
      servletRequestWrapper0.getRequest();
      servletRequestWrapper4.getParameterValues((String) null);
      int int0 = new Integer(0);
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper2);
      servletRequestWrapper7.getRequest();
      ServletRequestWrapper servletRequestWrapper8 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper9 = new ServletRequestWrapper(servletRequestWrapper8);
      servletRequestWrapper5.getRequest();
      ServletRequestWrapper servletRequestWrapper10 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletRequestWrapper servletRequestWrapper11 = new ServletRequestWrapper(servletRequestWrapper7);
      ServletRequestWrapper servletRequestWrapper12 = new ServletRequestWrapper(servletRequestWrapper5);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper13 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletRequestWrapper servletRequestWrapper14 = new ServletRequestWrapper(servletRequestWrapper6);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequestWrapper servletRequestWrapper15 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper16 = new ServletRequestWrapper(servletRequestWrapper15);
      ServletRequestWrapper servletRequestWrapper17 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletRequestWrapper servletRequestWrapper18 = new ServletRequestWrapper(servletRequestWrapper17);
      ServletRequestWrapper servletRequestWrapper19 = new ServletRequestWrapper(servletRequestWrapper10);
      ServletRequestWrapper servletRequestWrapper20 = new ServletRequestWrapper(servletRequestWrapper19);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) servletRequestWrapper0, servletResponse0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.servlet.ServletRequestWrapper cannot be cast to javax.servlet.http.HttpServletRequest
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4659497192528064
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.newSessionManagerInstance();
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4558487091517962
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.isHttpSessionMode();
      FileSystemHandling.shouldAllThrowIOExceptions();
      WildcardPermission wildcardPermission0 = new WildcardPermission("jsecurity");
      Permission permission0 = null;
      wildcardPermission0.implies((Permission) null);
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      String string0 = "!\"F]g?`;QM&qaF";
      // Undeclared exception!
      try { 
        wildcardPermissionResolver0.resolvePermission((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wildcard string cannot be null or empty. Make sure permission strings are properly formatted.
         //
         verifyException("org.jsecurity.authz.permission.WildcardPermission", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      predicate1.negate();
      predicate3.negate();
      predicate1.and(predicate0);
      Boolean boolean0 = new Boolean(false);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate5 = predicate1.and(predicate2);
      Object object0 = new Object();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate7 = predicate4.or(predicate3);
      predicate7.negate();
      Predicate<Object> predicate8 = predicate5.and(predicate4);
      Predicate<Object> predicate9 = predicate6.negate();
      predicate8.and(predicate9);
      predicate0.and(predicate6);
      Predicate<Object> predicate10 = predicate4.negate();
      Predicate<Object> predicate11 = predicate7.or(predicate10);
      predicate11.or(predicate5);
      Object object1 = new Object();
      Object object2 = new Object();
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realms collection argument cannot be empty.
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) linkedList0);
      predicate2.test(predicate1);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate4);
      Predicate<Object> predicate6 = predicate2.or(predicate5);
      Predicate<Object> predicate7 = predicate0.or(predicate5);
      Predicate<Object> predicate8 = predicate1.negate();
      MockInetAddress.getLoopbackAddress();
      Predicate<Object> predicate9 = predicate6.and(predicate5);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate8.and(predicate5);
      Object object0 = new Object();
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate13 = predicate4.or(predicate6);
      Predicate<Object> predicate14 = predicate5.or(predicate12);
      predicate14.and(predicate6);
      predicate9.or(predicate11);
      Predicate<Object> predicate15 = predicate13.negate();
      predicate6.test(linkedList0);
      predicate10.test(predicate12);
      predicate14.and(predicate15);
      predicate11.negate();
      predicate3.or(predicate8);
      Predicate.isEqual((Object) predicate9);
      predicate7.and(predicate10);
      predicate15.negate();
      Object object1 = new Object();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieName("?UG`OYZ2Uly[SM7t9v3");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320/org.jsecurity.realm.text.PropertiesRealm-0-accounts.index");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, " ]");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320/org.jsecurity.realm.text.PropertiesRealm-0-accounts.data");
      FileSystemHandling.createFolder(evoSuiteFile2);
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320/org.jsecurity.realm.text.PropertiesRealm-0-accounts.index");
      FileSystemHandling.createFolder(evoSuiteFile3);
      FileSystemHandling.createFolder(evoSuiteFile3);
      Integer integer0 = new Integer(654);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieSecure(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      predicate2.test(predicate1);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate4);
      Predicate<Object> predicate6 = predicate5.or(predicate4);
      Predicate<Object> predicate7 = predicate0.or(predicate5);
      predicate1.negate();
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("_2kD9w", "_2kD9w");
      Predicate.isEqual((Object) usernamePasswordToken0);
      Predicate<Object> predicate8 = predicate6.and(predicate5);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate8.negate();
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate12 = predicate4.or(predicate6);
      predicate10.and(predicate0);
      Predicate<Object> predicate13 = predicate5.or(predicate11);
      predicate13.and(predicate6);
      predicate8.or(predicate10);
      Predicate<Object> predicate14 = predicate12.negate();
      predicate6.test(linkedList0);
      predicate9.test(predicate11);
      predicate13.and(predicate14);
      predicate10.negate();
      predicate11.negate();
      Predicate.isEqual((Object) predicate8);
      predicate7.and(predicate9);
      predicate11.or(predicate13);
      Object object0 = new Object();
      Object object1 = new Object();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("jsecuwity");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [jsecuwity].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }
}
