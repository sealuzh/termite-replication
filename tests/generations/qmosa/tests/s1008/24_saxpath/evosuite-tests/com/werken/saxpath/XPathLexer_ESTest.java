/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 03:41:01 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.737728557343288
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.consume((-3548));
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0158421555805557
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}Pk%FS7F_H}Lq9");
      xPathLexer0.and();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("x", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("}", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("Pk", token2.getTokenText());
      
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.slashes();
      assertEquals("F", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals("S", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("\"mt}:%<Lw@l");
      xPathLexer4.setXPath("Jcy&!oZ");
      XPathLexer xPathLexer5 = new XPathLexer("Jcy&!oZ");
      Token token5 = xPathLexer1.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer2.plus();
      assertEquals(5, token6.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token7 = xPathLexer5.nextToken();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer1.slashes();
      assertEquals(11, token8.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer4.and();
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token9 = xPathLexer2.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer2.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer8.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer0.comma();
      assertEquals(32, token12.getTokenType());
      
      xPathLexer5.pipe();
      Token token13 = xPathLexer5.pipe();
      assertEquals(17, token13.getTokenType());
      assertEquals("!", token13.getTokenText());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9314426873811126
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.identifier();
      xPathLexer0.literal();
      xPathLexer0.comma();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("G2N1:");
      xPathLexer0.equals();
      xPathLexer0.doubleColon();
      xPathLexer1.nextToken();
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer3.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.slashes();
      xPathLexer0.rightBracket();
      xPathLexer3.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.colon();
      xPathLexer0.dots();
      xPathLexer2.equals();
      xPathLexer4.colon();
      xPathLexer4.star();
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer6.nextToken();
      xPathLexer5.mod();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.rightParen();
      XPathLexer xPathLexer8 = new XPathLexer("");
      xPathLexer2.at();
      xPathLexer7.doubleColon();
      Token token0 = xPathLexer5.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.922107920660104
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "IoxUAO&~U#";
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("IoxUAO&~U#");
      xPathLexer1.rightParen();
      xPathLexer1.dots();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.star();
      xPathLexer1.dollar();
      xPathLexer1.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer1.slashes();
      xPathLexer1.notEquals();
      xPathLexer0.mod();
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("ZB78oZsy]");
      xPathLexer1.equals();
      xPathLexer2.equals();
      xPathLexer2.consume((-2502));
      xPathLexer1.consume((-2502));
      xPathLexer0.setXPath("ZB78oZsy]");
      xPathLexer0.leftParen();
      xPathLexer2.plus();
      // Undeclared exception!
      try { 
        xPathLexer1.operatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9920971305912194
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      xPathLexer0.div();
      xPathLexer0.star();
      xPathLexer0.rightParen();
      xPathLexer0.notEquals();
      xPathLexer0.plus();
      xPathLexer0.notEquals();
      xPathLexer0.notEquals();
      xPathLexer0.dollar();
      xPathLexer0.consume((-942));
      xPathLexer0.leftBracket();
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2486807245575675
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      Token token0 = xPathLexer0.not();
      assertEquals("'", token0.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.plus();
      xPathLexer0.setXPath("'K yUnn/8V4;}F");
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.endPosition();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer1.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("y", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals("Un", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("9*QX|H");
      xPathLexer0.setXPath("");
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      Token token5 = xPathLexer3.equals();
      assertEquals("c", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      xPathLexer3.hasMoreChars();
      xPathLexer1.leftParen();
      Token token6 = xPathLexer3.dollar();
      assertEquals("o", token6.getTokenText());
      
      xPathLexer2.getPreviousToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer2.plus();
      assertEquals(5, token8.getTokenType());
      assertEquals("*", token8.getTokenText());
      
      Token token9 = xPathLexer2.star();
      assertEquals("Q", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      xPathLexer4.and();
      xPathLexer0.at();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer2.nextToken();
      assertEquals(15, token10.getTokenType());
      assertEquals("X", token10.getTokenText());
      
      Token token11 = xPathLexer5.number();
      assertEquals(30, token11.getTokenType());
      
      Token token12 = xPathLexer4.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      xPathLexer2.currentPosition();
      Token token13 = xPathLexer3.at();
      assertEquals("m", token13.getTokenText());
      assertEquals(16, token13.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.consume((-2654));
      xPathLexer0.rightBracket();
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.039793047491557
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("k8");
      xPathLexer1.setXPath("C!=jmKlN&y}1J");
      xPathLexer0.identifier();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer1.mod();
      xPathLexer1.rightParen();
      xPathLexer1.currentPosition();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.plus();
      XPathLexer xPathLexer3 = new XPathLexer("C!=jmKlN&y}1J");
      xPathLexer3.and();
      xPathLexer3.plus();
      Token token5 = xPathLexer1.nextToken();
      assertEquals("!=", token5.getTokenText());
      
      xPathLexer2.slashes();
      xPathLexer1.and();
      Token token6 = xPathLexer1.rightParen();
      assertEquals("j", token6.getTokenText());
      assertEquals(2, token6.getTokenType());
      
      Token token7 = xPathLexer3.plus();
      assertEquals("!", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals("mKlN", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer3.slashes();
      assertEquals("=", token9.getTokenText());
      assertEquals(11, token9.getTokenType());
      
      xPathLexer2.and();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer2.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer0.rightBracket();
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer1.pipe();
      assertEquals(17, token13.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9157914106430938
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}Pk%FS7F_H}Lq9");
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("*US`Q7>.7");
      xPathLexer0.at();
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer("!{4zqW`tF=}v;A-6`");
      xPathLexer2.or();
      xPathLexer2.mod();
      xPathLexer2.star();
      xPathLexer1.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.rightBracket();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.identifierOrOperatorName();
      xPathLexer4.relationalOperator();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer2.colon();
      xPathLexer6.and();
      xPathLexer4.not();
      XPathLexer xPathLexer7 = new XPathLexer("LfM");
      xPathLexer6.leftParen();
      Token token0 = xPathLexer6.dots();
      xPathLexer1.colon();
      xPathLexer4.colon();
      xPathLexer7.nextToken();
      xPathLexer5.star();
      xPathLexer4.notEquals();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer2.rightBracket();
      xPathLexer4.pipe();
      Token token1 = xPathLexer5.comma();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8737315577798597
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer(")");
      xPathLexer0.dots();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer1.dollar();
      xPathLexer1.relationalOperator();
      xPathLexer1.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.notEquals();
      xPathLexer1.mod();
      xPathLexer1.pipe();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.setXPath(")");
      xPathLexer1.equals();
      XPathLexer xPathLexer3 = new XPathLexer("@I$Qy");
      xPathLexer3.nextToken();
      xPathLexer3.slashes();
      xPathLexer2.and();
      xPathLexer3.comma();
      xPathLexer2.at();
      xPathLexer3.comma();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer2.notEquals();
      xPathLexer3.rightBracket();
      xPathLexer4.pipe();
      Token token0 = xPathLexer2.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7011164352760657
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%/zl,IY[~`");
      Token token0 = xPathLexer0.minus();
      assertEquals("%", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("z", token1.getTokenText());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("l", token2.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      Token token3 = xPathLexer0.slashes();
      assertEquals("Y", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.colon();
      assertEquals("[", token4.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.div();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.mod();
      char char0 = xPathLexer0.LA(67);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer0.getPreviousToken();
      assertEquals(",", token10.getTokenText());
      assertEquals(32, token10.getTokenType());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1745522020230785
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}Pk%FS7F_H}Lq9");
      xPathLexer0.and();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("x", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("}", token1.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(15, int0);
      
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("FS", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("7", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals("F", token6.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token7 = xPathLexer0.colon();
      assertEquals("_", token7.getTokenText());
      
      Token token8 = xPathLexer2.leftParen();
      assertEquals(1, token8.getTokenType());
      
      Token token9 = xPathLexer3.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer1.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer3.star();
      assertEquals(20, token11.getTokenType());
      
      xPathLexer0.nextToken();
      Token token12 = xPathLexer4.literal();
      assertNull(token12);
      
      Token token13 = xPathLexer1.rightParen();
      assertEquals(2, token13.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token14 = xPathLexer2.at();
      assertEquals(16, token14.getTokenType());
      
      Token token15 = xPathLexer4.notEquals();
      assertEquals(22, token15.getTokenType());
      
      Token token16 = xPathLexer1.rightBracket();
      assertEquals(4, token16.getTokenType());
      
      Token token17 = xPathLexer5.pipe();
      assertEquals(17, token17.getTokenType());
      
      Token token18 = xPathLexer0.comma();
      assertEquals(32, token18.getTokenType());
      assertEquals("H", token18.getTokenText());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.27553502821102
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V<c");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("V", token0.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.div();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      Token token2 = xPathLexer0.identifier();
      assertEquals("com.werken.saxpath.Token", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      Token token3 = xPathLexer1.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("co", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("K>h/r2QmX|%<IR-\"mt");
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer2.nextToken();
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("CngP^5.qmxH*FzLxK");
      xPathLexer3.mod();
      Token token6 = xPathLexer3.rightParen();
      assertEquals(2, token6.getTokenType());
      assertEquals("C", token6.getTokenText());
      
      xPathLexer2.currentPosition();
      Token token7 = xPathLexer3.colon();
      assertEquals("n", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      xPathLexer3.whitespace();
      Token token8 = xPathLexer2.leftBracket();
      assertEquals(">", token8.getTokenText());
      assertEquals(3, token8.getTokenType());
      
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer(")");
      Token token9 = xPathLexer3.leftParen();
      assertEquals("P", token9.getTokenText());
      assertEquals(1, token9.getTokenType());
      
      Token token10 = xPathLexer1.at();
      assertEquals("m", token10.getTokenText());
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer2.slashes();
      assertEquals(12, token11.getTokenType());
      assertEquals("h/", token11.getTokenText());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0153770776806397
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("IoxUAO&~U#");
      xPathLexer1.rightParen();
      Token token0 = xPathLexer1.dots();
      assertEquals("o", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertEquals("xUAO", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer1.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("&", token2.getTokenText());
      
      Token token3 = xPathLexer1.dollar();
      assertEquals("~", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer1.slashes();
      assertEquals("U", token5.getTokenText());
      
      Token token6 = xPathLexer1.notEquals();
      assertEquals(22, token6.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("ZB78oZsy]");
      XPathLexer xPathLexer3 = new XPathLexer("5ZHG9qaj");
      xPathLexer2.setXPath("\"tiim+C-");
      Token token7 = xPathLexer3.colon();
      assertEquals("5", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer1.plus();
      assertEquals(5, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("::37k");
      Token token9 = xPathLexer2.nextToken();
      assertEquals("", token9.getTokenText());
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.and();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token11 = xPathLexer5.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer6.rightBracket();
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer3.minus();
      assertEquals("Z", token13.getTokenText());
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer1.comma();
      assertEquals(32, token14.getTokenType());
      
      xPathLexer6.pipe();
      Token token15 = xPathLexer1.pipe();
      assertEquals(17, token15.getTokenType());
      
      Token token16 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token16);
      assertEquals(15, token16.getTokenType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5965210311435218
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.identifier();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      xPathLexer2.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer2.rightBracket();
      xPathLexer1.leftParen();
      xPathLexer3.dollar();
      xPathLexer2.rightParen();
      xPathLexer1.not();
      xPathLexer2.getPreviousToken();
      xPathLexer3.consume((-1332));
      xPathLexer1.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer3.operatorName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0235511776137014
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.slashes();
      xPathLexer0.plus();
      xPathLexer0.not();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.pipe();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("rf~}");
      xPathLexer0.and();
      Token token5 = xPathLexer1.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("r", token5.getTokenText());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("f", token6.getTokenText());
      
      xPathLexer0.slashes();
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer("rf~}");
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("0/TqIHuA6KZx(>>d");
      Token token8 = xPathLexer2.leftParen();
      assertEquals(1, token8.getTokenType());
      assertEquals("r", token8.getTokenText());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer1.slashes();
      assertEquals(11, token10.getTokenType());
      assertEquals("~", token10.getTokenText());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9515025825191716
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("k8");
      xPathLexer1.setXPath("C!=jmKlN&y}1J");
      xPathLexer0.identifier();
      xPathLexer0.doubleColon();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer1.mod();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer("YRIXqZ#7Cjo{");
      xPathLexer1.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.at();
      Token token4 = xPathLexer2.plus();
      assertEquals(5, token4.getTokenType());
      assertEquals("Y", token4.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer1.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer4.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer4.dollar();
      assertEquals(26, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("YRIXqZ#7Cjo{");
      Token token9 = xPathLexer2.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("RIXqZ", token9.getTokenText());
      
      xPathLexer1.mod();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer2.rightParen();
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer5.at();
      assertEquals("Y", token11.getTokenText());
      
      Token token12 = xPathLexer1.notEquals();
      assertEquals(22, token12.getTokenType());
      assertEquals("jm", token12.getTokenText());
      
      Token token13 = xPathLexer5.doubleColon();
      assertEquals("RI", token13.getTokenText());
      assertEquals(19, token13.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token14 = xPathLexer7.at();
      assertEquals(16, token14.getTokenType());
      
      Token token15 = xPathLexer5.minus();
      assertEquals("X", token15.getTokenText());
      assertEquals(6, token15.getTokenType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.148161075167889
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ps0%GJsHQ.+$X~MF");
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.comma();
      assertEquals("%", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("Q", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(".", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("+", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.equals();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("X", token5.getTokenText());
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.getPreviousToken();
      assertEquals("MF", token8.getTokenText());
      
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      assertEquals("MF", token9.getTokenText());
      
      xPathLexer0.operatorName();
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.plus();
      xPathLexer0.or();
      char char0 = xPathLexer0.LA(11);
      assertEquals('\uFFFF', char0);
      
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0710325866439976
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("!{4zqW`tF=}v;A-6`");
      Token token1 = xPathLexer1.at();
      assertEquals("!", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("o", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("=++FRVYH`y#|?}");
      xPathLexer0.or();
      Token token3 = xPathLexer0.identifier();
      assertEquals("m.werken.saxpath.Token", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer2.nextToken();
      assertEquals("=", token5.getTokenText());
      
      xPathLexer2.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer5.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer3.relationalOperator();
      xPathLexer2.rightBracket();
      xPathLexer4.leftParen();
      XPathLexer xPathLexer6 = new XPathLexer("2VF3\";4E,_");
      xPathLexer2.colon();
      xPathLexer4.leftParen();
      Token token7 = xPathLexer1.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer2.colon();
      assertEquals("F", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer6.nextToken();
      assertEquals("2", token9.getTokenText());
      assertEquals(30, token9.getTokenType());
      
      xPathLexer1.mod();
      Token token10 = xPathLexer0.rightParen();
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer4.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer6.rightBracket();
      assertEquals("V", token12.getTokenText());
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer0.pipe();
      assertEquals(17, token13.getTokenType());
      
      Token token14 = xPathLexer5.comma();
      assertEquals(32, token14.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7353838628075353
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#dl*vv!`v");
      XPathLexer xPathLexer1 = new XPathLexer("#dl*vv!`v");
      Token token0 = xPathLexer1.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("#", token0.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.setPreviousToken((Token) null);
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("#", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token2 = xPathLexer2.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.rightParen();
      assertEquals("*", token4.getTokenText());
      
      xPathLexer2.currentPosition();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer2.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.currentPosition();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer1.identifierOrOperatorName();
      assertEquals("", token5.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer3.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("c", token6.getTokenText());
      
      Token token7 = xPathLexer1.leftBracket();
      assertEquals("*", token7.getTokenText());
      assertEquals(3, token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer2.mod();
      xPathLexer4.mod();
      Token token8 = xPathLexer6.rightParen();
      assertEquals(2, token8.getTokenType());
      
      xPathLexer3.at();
      XPathLexer xPathLexer7 = new XPathLexer("`!6.?T");
      xPathLexer2.notEquals();
      XPathLexer xPathLexer8 = new XPathLexer("`!6.?T");
      Token token9 = xPathLexer1.at();
      assertEquals(16, token9.getTokenType());
      assertEquals("v", token9.getTokenText());
      
      Token token10 = xPathLexer6.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer4.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      Token token12 = xPathLexer5.pipe();
      assertEquals(17, token12.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1994150664117855
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.setXPath("'K yUnn/8V4;}F");
      Token token0 = xPathLexer0.slashes();
      assertEquals("'", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("K ", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      xPathLexer0.currentPosition();
      Token token3 = xPathLexer0.pipe();
      assertEquals("8", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("9#$;u*");
      XPathLexer xPathLexer2 = new XPathLexer("'K yUnn/8V4;}F");
      XPathLexer xPathLexer3 = new XPathLexer("ys?s9Tn");
      xPathLexer3.leftParen();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer3.colon();
      assertEquals("s", token5.getTokenText());
      
      Token token6 = xPathLexer2.star();
      assertEquals("'", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals(30, token7.getTokenType());
      assertEquals("9", token7.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer0.leftParen();
      assertEquals("4", token8.getTokenText());
      assertEquals(1, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.rightParen();
      XPathLexer xPathLexer7 = new XPathLexer("");
      xPathLexer7.currentPosition();
      Token token9 = xPathLexer1.plus();
      assertEquals(5, token9.getTokenType());
      assertEquals("#", token9.getTokenText());
      
      Token token10 = xPathLexer5.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer4.rightParen();
      assertEquals(2, token11.getTokenType());
      
      xPathLexer1.identifierOrOperatorName();
      xPathLexer5.or();
      Token token12 = xPathLexer0.at();
      assertEquals(";", token12.getTokenText());
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer5.colon();
      assertEquals(18, token13.getTokenType());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9161284086026007
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals("I", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token2 = xPathLexer1.plus();
      assertEquals("y", token2.getTokenText());
      
      xPathLexer1.identifier();
      XPathLexer xPathLexer2 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token3 = xPathLexer2.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("y$", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("a");
      Token token4 = xPathLexer1.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer3.nextToken();
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer0.mod();
      xPathLexer4.rightParen();
      xPathLexer1.currentPosition();
      Token token6 = xPathLexer0.colon();
      assertEquals("x", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer1.minus();
      assertEquals("$", token7.getTokenText());
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer4.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer3.nextToken();
      assertEquals("", token9.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.mod();
      Token token10 = xPathLexer2.star();
      assertEquals("u", token10.getTokenText());
      
      xPathLexer4.slashes();
      Token token11 = xPathLexer5.plus();
      assertEquals(5, token11.getTokenType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9401246978459337
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("W&l6X)LC(");
      Token token0 = xPathLexer0.minus();
      assertEquals("W", token0.getTokenText());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("W&l6X)LC(");
      Token token1 = xPathLexer1.at();
      assertEquals("W", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("l", token2.getTokenText());
      
      xPathLexer1.or();
      xPathLexer0.identifier();
      xPathLexer0.star();
      Token token3 = xPathLexer1.nextToken();
      assertEquals("&l6X)LC(", token3.getTokenText());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.rightParen();
      assertEquals(2, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer3.rightBracket();
      xPathLexer2.leftParen();
      xPathLexer1.relationalOperator();
      Token token5 = xPathLexer2.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer3.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer1.leftParen();
      assertEquals("&", token7.getTokenText());
      
      xPathLexer3.dots();
      xPathLexer3.colon();
      Token token8 = xPathLexer0.star();
      assertEquals("L", token8.getTokenText());
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(15, token9.getTokenType());
      
      xPathLexer2.mod();
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      assertEquals("(", token10.getTokenText());
      
      Token token11 = xPathLexer2.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer1.equals();
      assertEquals(21, token12.getTokenType());
      assertEquals("l", token12.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token13 = xPathLexer6.leftParen();
      assertEquals(1, token13.getTokenType());
      
      Token token14 = xPathLexer0.leftBracket();
      assertEquals(3, token14.getTokenType());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9404170738492708
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("IoxUAO&~U#");
      xPathLexer1.rightParen();
      xPathLexer1.dots();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.star();
      xPathLexer1.dollar();
      xPathLexer1.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer1.slashes();
      xPathLexer1.notEquals();
      xPathLexer0.mod();
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("ZB78oZsy]");
      XPathLexer xPathLexer3 = new XPathLexer("5ZHG9qaj");
      xPathLexer3.colon();
      xPathLexer1.plus();
      XPathLexer xPathLexer4 = new XPathLexer("::37k");
      xPathLexer2.nextToken();
      xPathLexer0.slashes();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.and();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer5.doubleColon();
      Token token0 = xPathLexer6.rightBracket();
      xPathLexer3.minus();
      xPathLexer1.comma();
      xPathLexer6.pipe();
      Token token1 = xPathLexer1.pipe();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.174448542749351
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V<c");
      xPathLexer0.not();
      xPathLexer0.at();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      Token token2 = xPathLexer0.identifier();
      assertEquals("com.werken.saxpath.Token", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      Token token3 = xPathLexer1.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("co", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("K>h/r2QmX|%<IR-\"mt");
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer2.nextToken();
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("CngP^5.qmxH*FzLxK");
      xPathLexer3.mod();
      Token token6 = xPathLexer3.rightParen();
      assertEquals("C", token6.getTokenText());
      assertEquals(2, token6.getTokenType());
      
      xPathLexer2.currentPosition();
      Token token7 = xPathLexer3.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals("n", token7.getTokenText());
      
      Token token8 = xPathLexer1.minus();
      assertEquals(6, token8.getTokenType());
      assertEquals("m", token8.getTokenText());
      
      Token token9 = xPathLexer2.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.mod();
      Token token10 = xPathLexer1.at();
      assertEquals(16, token10.getTokenType());
      assertEquals(".", token10.getTokenText());
      
      Token token11 = xPathLexer3.slashes();
      assertEquals("g", token11.getTokenText());
      assertEquals(11, token11.getTokenType());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.805045861896941
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ejT 2h|k1X");
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("'K yUnn/8V4;}F");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("j", token0.getTokenText());
      
      Token token1 = xPathLexer1.doubleColon();
      assertEquals("'K", token1.getTokenText());
      
      xPathLexer1.setXPath("w");
      Token token2 = xPathLexer1.star();
      assertEquals("w", token2.getTokenText());
      
      xPathLexer1.star();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer1.mod();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer1.relationalOperator();
      Token token4 = xPathLexer2.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(" ", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.colon();
      xPathLexer2.leftParen();
      Token token6 = xPathLexer3.dots();
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals("2", token7.getTokenText());
      
      Token token8 = xPathLexer3.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      xPathLexer1.mod();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token10 = xPathLexer3.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer0.notEquals();
      assertEquals("h", token11.getTokenText());
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer4.doubleColon();
      assertEquals(19, token12.getTokenType());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.000743342558271
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer0.star();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token2 = xPathLexer0.equals();
      assertEquals("U", token2.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer1.leftParen();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("/", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.equals();
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer3.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer3.rightBracket();
      Token token6 = xPathLexer2.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer3.relationalOperator();
      xPathLexer1.rightBracket();
      xPathLexer3.leftParen();
      Token token7 = xPathLexer2.pipe();
      assertEquals(17, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.leftParen();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer5.dots();
      assertEquals(13, token8.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token9 = xPathLexer3.colon();
      assertEquals(18, token9.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("'K yUnn/8V4;}F");
      Token token10 = xPathLexer1.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer2.leftParen();
      assertEquals(1, token11.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      assertEquals("8", token12.getTokenText());
      
      Token token13 = xPathLexer7.slashes();
      assertEquals(11, token13.getTokenType());
      
      xPathLexer8.relationalOperator();
      Token token14 = xPathLexer6.rightBracket();
      assertEquals(4, token14.getTokenType());
      
      Token token15 = xPathLexer0.identifier();
      assertEquals(15, token15.getTokenType());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7493174698982754
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("y$u-!D6[sBOCA");
      xPathLexer1.or();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer1.leftParen();
      Token token5 = xPathLexer1.leftParen();
      assertEquals("$", token5.getTokenText());
      assertEquals(1, token5.getTokenType());
      
      Token token6 = xPathLexer1.colon();
      assertEquals("u", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals(6, token7.getTokenType());
      assertEquals("-", token7.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.literal();
      assertNull(token8);
      
      xPathLexer0.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.at();
      Token token9 = xPathLexer3.rightParen();
      assertEquals(2, token9.getTokenType());
      
      Token token10 = xPathLexer1.at();
      assertEquals(16, token10.getTokenType());
      assertEquals("!", token10.getTokenText());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2197816449503556
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer0.not();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("o", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      xPathLexer1.at();
      Token token1 = xPathLexer1.plus();
      Token token2 = xPathLexer1.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("uM", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("y$uM-!D6[)sQBCA");
      xPathLexer2.or();
      xPathLexer1.setPreviousToken(token1);
      Token token3 = xPathLexer0.star();
      assertEquals("x", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      xPathLexer1.leftBracket();
      xPathLexer1.not();
      Token token4 = xPathLexer1.number();
      assertEquals("", token4.getTokenText());
      
      xPathLexer1.rightBracket();
      xPathLexer0.not();
      Token token5 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      assertEquals("6", token5.getTokenText());
      
      xPathLexer2.relationalOperator();
      Token token6 = xPathLexer1.rightBracket();
      assertEquals(4, token6.getTokenType());
      assertEquals("[", token6.getTokenText());
      
      Token token7 = xPathLexer2.not();
      assertEquals("y", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("Ra;yPC*\r'B!LrMFEK");
      Token token8 = xPathLexer3.at();
      assertEquals("R", token8.getTokenText());
      assertEquals(16, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.plus();
      Token token9 = xPathLexer1.whitespace();
      assertEquals((-2), token9.getTokenType());
      
      Token token10 = xPathLexer3.leftBracket();
      assertEquals("a", token10.getTokenText());
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer2.nextToken();
      assertEquals("$", token11.getTokenText());
      assertEquals(26, token11.getTokenType());
      
      xPathLexer1.mod();
      Token token12 = xPathLexer0.rightParen();
      assertEquals(2, token12.getTokenType());
      assertEquals("A", token12.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token13 = xPathLexer5.number();
      assertEquals(30, token13.getTokenType());
      
      Token token14 = xPathLexer0.plus();
      assertEquals(5, token14.getTokenType());
      assertEquals("A", token14.getTokenText());
      
      Token token15 = xPathLexer3.equals();
      assertEquals(21, token15.getTokenType());
      assertEquals(";", token15.getTokenText());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.337776594962198
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer0.not();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      xPathLexer1.at();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer("y$uM-!D6[)sQBCA");
      xPathLexer2.or();
      xPathLexer2.star();
      xPathLexer1.leftBracket();
      xPathLexer1.not();
      xPathLexer1.number();
      xPathLexer1.rightBracket();
      xPathLexer0.not();
      xPathLexer1.nextToken();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.currentPosition();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.minus();
      xPathLexer0.leftBracket();
      xPathLexer4.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.colon();
      xPathLexer2.colon();
      xPathLexer0.nextToken();
      xPathLexer2.mod();
      xPathLexer0.rightParen();
      xPathLexer4.notEquals();
      xPathLexer3.rightBracket();
      xPathLexer4.pipe();
      xPathLexer0.comma();
      xPathLexer5.rightParen();
      xPathLexer3.relationalOperator();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.077341048032247
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("I", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.at();
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer1.plus();
      assertEquals(5, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("y$uM-!D6[)sQBA");
      Token token3 = xPathLexer0.equals();
      assertEquals("o", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      xPathLexer1.identifier();
      Token token4 = xPathLexer2.comma();
      assertEquals("y", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightParen();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token5);
      
      Token token6 = xPathLexer3.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer2.rightBracket();
      assertEquals("$", token7.getTokenText());
      
      Token token8 = xPathLexer2.identifier();
      assertEquals("uM-", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.colon();
      Token token9 = xPathLexer0.leftParen();
      assertEquals("&", token9.getTokenText());
      
      xPathLexer2.dots();
      Token token10 = xPathLexer3.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer2.star();
      assertEquals("D", token11.getTokenText());
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer2.nextToken();
      assertEquals(30, token12.getTokenType());
      assertEquals("6", token12.getTokenText());
      
      xPathLexer4.mod();
      Token token13 = xPathLexer2.rightParen();
      assertEquals("[", token13.getTokenText());
      assertEquals(2, token13.getTokenType());
      
      xPathLexer2.leftParen();
      Token token14 = xPathLexer2.dollar();
      assertEquals("s", token14.getTokenText());
      assertEquals(26, token14.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token15 = xPathLexer5.rightBracket();
      assertEquals(4, token15.getTokenType());
      
      Token token16 = xPathLexer5.minus();
      assertEquals(6, token16.getTokenType());
      
      Token token17 = xPathLexer5.comma();
      assertEquals(32, token17.getTokenType());
      
      xPathLexer4.pipe();
      Token token18 = xPathLexer3.pipe();
      assertEquals(17, token18.getTokenType());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9397200876886496
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals("I", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("o", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token2 = xPathLexer1.at();
      assertEquals("y", token2.getTokenText());
      
      Token token3 = xPathLexer1.plus();
      assertEquals("$", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("x", token4.getTokenText());
      
      xPathLexer1.identifier();
      Token token5 = xPathLexer1.star();
      assertEquals("!", token5.getTokenText());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("D6", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer3.rightParen();
      assertEquals(2, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.identifierOrOperatorName();
      xPathLexer3.relationalOperator();
      Token token8 = xPathLexer2.rightBracket();
      assertEquals("y", token8.getTokenText());
      assertEquals(4, token8.getTokenType());
      
      xPathLexer3.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.colon();
      Token token9 = xPathLexer4.leftParen();
      assertEquals(1, token9.getTokenType());
      
      Token token10 = xPathLexer2.dots();
      assertEquals(13, token10.getTokenType());
      assertEquals("$", token10.getTokenText());
      
      Token token11 = xPathLexer3.colon();
      assertEquals(18, token11.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token12 = xPathLexer6.minus();
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer5.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      Token token14 = xPathLexer3.nextToken();
      assertEquals((-1), token14.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer3.mod();
      Token token15 = xPathLexer3.at();
      assertEquals(16, token15.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token16 = xPathLexer8.slashes();
      assertEquals(11, token16.getTokenType());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.124809827500187
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.minus();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.number();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.rightBracket();
      xPathLexer1.not();
      xPathLexer2.dollar();
      xPathLexer2.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer1.pipe();
      xPathLexer2.leftParen();
      xPathLexer2.dots();
      xPathLexer2.colon();
      xPathLexer2.star();
      xPathLexer0.nextToken();
      xPathLexer2.mod();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      xPathLexer0.equals();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.pipe();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.845102324585886
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("K", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(" ", token1.getTokenText());
      
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer1.or();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.not();
      Token token4 = xPathLexer2.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("V", token5.getTokenText());
      
      xPathLexer2.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer2.leftParen();
      xPathLexer2.pipe();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.leftParen();
      assertEquals(1, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer4.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
      assertEquals("'", token8.getTokenText());
      
      Token token9 = xPathLexer2.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals(";}F", token10.getTokenText());
      
      Token token11 = xPathLexer3.slashes();
      assertEquals(11, token11.getTokenType());
      
      xPathLexer2.and();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.at();
      Token token12 = xPathLexer2.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer1.rightBracket();
      assertEquals(4, token13.getTokenType());
      assertEquals("K", token13.getTokenText());
      
      Token token14 = xPathLexer4.pipe();
      assertEquals(17, token14.getTokenType());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0548475744684334
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer0.not();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer1.plus();
      xPathLexer1.or();
      xPathLexer1.star();
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.number();
      xPathLexer1.rightBracket();
      xPathLexer0.not();
      Token token0 = xPathLexer1.dollar();
      xPathLexer2.relationalOperator();
      xPathLexer1.rightBracket();
      xPathLexer2.pipe();
      xPathLexer2.leftParen();
      xPathLexer0.dots();
      xPathLexer2.colon();
      xPathLexer2.star();
      xPathLexer0.nextToken();
      xPathLexer1.mod();
      xPathLexer1.slashes();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer1.pipe();
      xPathLexer1.relationalOperator();
      Token token1 = xPathLexer2.rightBracket();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7618458960719592
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.plus();
      String string0 = "k8";
      XPathLexer xPathLexer1 = new XPathLexer("k8");
      xPathLexer1.setXPath("C!=jmKlN&y}1J");
      xPathLexer0.identifier();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer1.mod();
      xPathLexer1.rightParen();
      xPathLexer1.currentPosition();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.plus();
      XPathLexer xPathLexer3 = new XPathLexer("C!=jmKlN&y}1J");
      xPathLexer3.and();
      xPathLexer2.at();
      xPathLexer1.nextToken();
      xPathLexer0.consume((-750));
      xPathLexer3.setXPath("k8");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.leftParen();
      xPathLexer2.slashes();
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.024008655149249
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V<c");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.relationalOperator();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("V<c");
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("_7D]G");
      xPathLexer2.relationalOperator();
      Token token2 = xPathLexer2.identifierOrOperatorName();
      assertEquals("_7D", token2.getTokenText());
      
      Token token3 = xPathLexer2.identifierOrOperatorName();
      assertEquals("", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token5 = xPathLexer2.nextToken();
      assertEquals("]", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer1.plus();
      assertEquals("V", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token7 = xPathLexer3.slashes();
      assertEquals(11, token7.getTokenType());
      
      xPathLexer2.notEquals();
      Token token8 = xPathLexer2.identifierOrOperatorName();
      assertNull(token8);
      
      xPathLexer2.leftParen();
      Token token9 = xPathLexer3.plus();
      assertEquals(5, token9.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer3.and();
      XPathLexer xPathLexer4 = new XPathLexer(")");
      XPathLexer xPathLexer5 = new XPathLexer("V<c");
      Token token10 = xPathLexer3.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer1.notEquals();
      assertEquals("<c", token11.getTokenText());
      assertEquals(22, token11.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token12 = xPathLexer0.pipe();
      assertEquals(17, token12.getTokenType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1903250226933317
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.star();
      xPathLexer0.not();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer0.currentPosition();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.currentPosition();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.minus();
      xPathLexer2.leftBracket();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.mod();
      xPathLexer0.mod();
      xPathLexer2.rightParen();
      XPathLexer xPathLexer5 = new XPathLexer("`!6.?T");
      xPathLexer3.at();
      xPathLexer0.nextToken();
      xPathLexer5.mod();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.rightParen();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.notEquals();
      xPathLexer3.rightBracket();
      xPathLexer3.pipe();
      Token token0 = xPathLexer1.comma();
      Token token1 = xPathLexer3.rightParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.913290295636907
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "'K yUnn/8V4;}F";
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      Token token0 = xPathLexer0.number();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer0.currentPosition();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("'K yUnn/8V4;}F");
      String string1 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6709903265110293
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("j~.-;R");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("j", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("~", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(".", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("-", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(";", token4.getTokenText());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("R", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.currentPosition();
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer0.equals();
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.079832013283561
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}Pk%FS7F_H}Lq9");
      xPathLexer0.and();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("x", token0.getTokenText());
      
      xPathLexer0.plus();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Pk", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("%", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("F", token3.getTokenText());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals("S", token4.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("7F", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer0.plus();
      assertEquals("_", token7.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer1.and();
      Token token8 = xPathLexer3.plus();
      assertEquals(5, token8.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer4.slashes();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.and();
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("x}Pk%FS7F_H}Lq9");
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      assertEquals("}", token10.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token11 = xPathLexer7.leftParen();
      assertEquals(1, token11.getTokenType());
      
      Token token12 = xPathLexer4.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer7.slashes();
      assertEquals(11, token13.getTokenType());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8402886283604798
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V<c");
      Token token0 = xPathLexer0.not();
      assertEquals("V", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("<", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      Token token4 = xPathLexer1.doubleColon();
      assertEquals("co", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      xPathLexer0.pipe();
      Token token6 = xPathLexer1.dots();
      assertEquals(14, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals("werken.saxpath.Token", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer("mi 0?2?[q7lt`mj6");
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer3.notEquals();
      assertEquals(22, token12.getTokenType());
      
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token13 = xPathLexer4.pipe();
      assertEquals(17, token13.getTokenType());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8999798476621017
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("k8");
      xPathLexer1.setXPath("C!=jmKlN&y}1J");
      xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer1.mod();
      xPathLexer1.rightParen();
      xPathLexer1.currentPosition();
      Token token5 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.plus();
      XPathLexer xPathLexer3 = new XPathLexer("C!=jmKlN&y}1J");
      xPathLexer3.and();
      Token token6 = xPathLexer3.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("C", token6.getTokenText());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals("!=", token7.getTokenText());
      assertEquals(22, token7.getTokenType());
      
      xPathLexer2.slashes();
      xPathLexer1.and();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer("k8");
      Token token8 = xPathLexer4.rightParen();
      assertEquals("k", token8.getTokenText());
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer1.dollar();
      assertEquals(26, token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.leftParen();
      Token token10 = xPathLexer4.slashes();
      assertEquals(11, token10.getTokenType());
      assertEquals("8", token10.getTokenText());
      
      Token token11 = xPathLexer2.pipe();
      assertEquals(17, token11.getTokenType());
      
      xPathLexer3.relationalOperator();
      Token token12 = xPathLexer5.rightBracket();
      assertEquals(4, token12.getTokenType());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.9649330947168135
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("_Xq7sIv*+*r?:h4X");
      Token token3 = xPathLexer1.rightParen();
      assertEquals("_", token3.getTokenText());
      
      xPathLexer1.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("_Xq7sIv*+*r?:h4X");
      xPathLexer2.identifierOrOperatorName();
      xPathLexer2.dollar();
      xPathLexer2.relationalOperator();
      Token token4 = xPathLexer2.nextToken();
      assertEquals(5, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("_Xq7sIv*+*r?:h4X");
      xPathLexer3.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer("L bj=}}gfC+][Axa4!");
      Token token7 = xPathLexer4.leftParen();
      assertEquals("L", token7.getTokenText());
      assertEquals(1, token7.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer1.dollar();
      xPathLexer4.rightParen();
      Token token8 = xPathLexer1.not();
      assertEquals("q", token8.getTokenText());
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer4.nextToken();
      assertEquals(15, token10.getTokenType());
      assertEquals("bj", token10.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("_Xq7sIv*+*r?:h4X");
      xPathLexer6.mod();
      Token token11 = xPathLexer6.dollar();
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer1.rightParen();
      assertEquals(2, token12.getTokenType());
      
      int int0 = xPathLexer6.currentPosition();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.132572170317394
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("'", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("K", token1.getTokenText());
      
      xPathLexer0.at();
      Token token2 = xPathLexer0.plus();
      assertEquals("y", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.star();
      assertEquals("U", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("n", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("oX");
      xPathLexer1.identifier();
      Token token5 = xPathLexer1.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer0.currentPosition();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.plus();
      XPathLexer xPathLexer3 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer3.and();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer4.plus();
      assertEquals(5, token6.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token7 = xPathLexer5.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("com.werken.saxpath.XPathLexer", token7.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("'K yUnn/8V4;}F");
      Token token8 = xPathLexer6.slashes();
      assertEquals("'", token8.getTokenText());
      
      xPathLexer2.and();
      Token token9 = xPathLexer0.rightParen();
      assertEquals("8", token9.getTokenText());
      assertEquals(2, token9.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("oX");
      XPathLexer xPathLexer8 = new XPathLexer("'K yUnn/8V4;}F");
      Token token10 = xPathLexer8.dollar();
      assertEquals(26, token10.getTokenType());
      assertEquals("'", token10.getTokenText());
      
      XPathLexer xPathLexer9 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer4.leftParen();
      Token token11 = xPathLexer3.at();
      assertEquals("'", token11.getTokenText());
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer0.slashes();
      assertEquals("V", token12.getTokenText());
      assertEquals(11, token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals("4", token13.getTokenText());
      assertEquals(6, token13.getTokenType());
      
      int int0 = xPathLexer3.currentPosition();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.211322597045931
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer0.rightBracket();
      Token token5 = xPathLexer1.leftParen();
      assertEquals(1, token5.getTokenType());
      
      xPathLexer1.pipe();
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer1.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("IoxUAAO&~U#");
      Token token9 = xPathLexer2.nextToken();
      assertEquals("IoxUAAO", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      xPathLexer1.and();
      XPathLexer xPathLexer3 = new XPathLexer("IoxUAAO&~U#");
      XPathLexer xPathLexer4 = new XPathLexer("IoxUAAO&~U#");
      Token token11 = xPathLexer3.at();
      assertEquals(16, token11.getTokenType());
      assertEquals("I", token11.getTokenText());
      
      Token token12 = xPathLexer3.notEquals();
      assertEquals(22, token12.getTokenType());
      assertEquals("ox", token12.getTokenText());
      
      Token token13 = xPathLexer3.rightBracket();
      assertEquals(4, token13.getTokenType());
      
      Token token14 = xPathLexer1.pipe();
      assertEquals(17, token14.getTokenType());
      
      Token token15 = xPathLexer3.dollar();
      assertEquals("A", token15.getTokenText());
      assertEquals(26, token15.getTokenType());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7908622453209482
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V<c");
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("V<c");
      XPathLexer xPathLexer2 = new XPathLexer("_7D]G");
      xPathLexer0.relationalOperator();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer3.dollar();
      assertEquals(26, token0.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer(")");
      xPathLexer4.relationalOperator();
      Token token1 = xPathLexer1.nextToken();
      assertEquals(7, token1.getTokenType());
      assertEquals("<", token1.getTokenText());
      
      xPathLexer1.plus();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token2 = xPathLexer0.slashes();
      assertEquals("c", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      xPathLexer5.notEquals();
      Token token3 = xPathLexer5.identifierOrOperatorName();
      assertNotNull(token3);
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer2.plus();
      assertEquals("]", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      xPathLexer3.operatorName();
      XPathLexer xPathLexer6 = new XPathLexer("I5[o;");
      XPathLexer xPathLexer7 = new XPathLexer("$Wi5Fp|vLOG9c7PtIac");
      Token token5 = xPathLexer3.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer5.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer7.rightBracket();
      assertEquals(4, token7.getTokenType());
      assertEquals("$", token7.getTokenText());
      
      Token token8 = xPathLexer3.pipe();
      assertEquals(17, token8.getTokenType());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8500052943253806
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V<c");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.relationalOperator();
      assertEquals("<", token0.getTokenText());
      assertEquals(7, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("V<c");
      Token token1 = xPathLexer0.rightParen();
      assertEquals("c", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("_7D]G");
      xPathLexer2.relationalOperator();
      Token token2 = xPathLexer2.identifierOrOperatorName();
      assertEquals("_7D", token2.getTokenText());
      
      Token token3 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      assertNotNull(token3);
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token5 = xPathLexer2.nextToken();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer1.plus();
      assertEquals("V", token6.getTokenText());
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer1.slashes();
      assertEquals("<", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer1.equals();
      assertEquals(21, token8.getTokenType());
      assertEquals("c", token8.getTokenText());
      
      Token token9 = xPathLexer1.not();
      assertEquals(23, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token10 = xPathLexer2.leftParen();
      assertEquals("G", token10.getTokenText());
      
      xPathLexer3.dots();
      XPathLexer xPathLexer4 = new XPathLexer("V<c");
      Token token11 = xPathLexer4.dots();
      assertEquals(13, token11.getTokenType());
      assertEquals("V", token11.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer2.relationalOperator();
      Token token12 = xPathLexer5.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      Token token13 = xPathLexer1.rightParen();
      assertEquals(2, token13.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token14 = xPathLexer2.at();
      assertEquals(16, token14.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token15 = xPathLexer5.notEquals();
      assertEquals(22, token15.getTokenType());
      
      Token token16 = xPathLexer1.minus();
      assertEquals(6, token16.getTokenType());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.0184295659022853
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals("I", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token1 = xPathLexer1.at();
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer1.plus();
      assertEquals("$", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("y$uM-!D6[)sQBCA");
      xPathLexer1.identifier();
      xPathLexer0.doubleColon();
      Token token3 = xPathLexer1.slashes();
      assertEquals("!", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.notEquals();
      Token token4 = xPathLexer2.minus();
      assertEquals("y", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("|>zAx59");
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer("IoxUAAO&~U#");
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token5 = xPathLexer3.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer1.leftParen();
      assertEquals("D", token6.getTokenText());
      
      Token token7 = xPathLexer5.comma();
      assertEquals("c", token7.getTokenText());
      assertEquals(32, token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer6.literal();
      assertNull(token8);
      
      Token token9 = xPathLexer3.nextToken();
      assertEquals(">", token9.getTokenText());
      
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      assertEquals("O", token10.getTokenText());
      
      Token token11 = xPathLexer4.rightParen();
      assertEquals("I", token11.getTokenText());
      assertEquals(2, token11.getTokenType());
      
      xPathLexer6.leftParen();
      Token token12 = xPathLexer5.nextToken();
      assertEquals("om.werken.saxpath.XPathLexer", token12.getTokenText());
      assertEquals(15, token12.getTokenType());
      
      xPathLexer5.mod();
      Token token13 = xPathLexer4.dollar();
      assertEquals("o", token13.getTokenText());
      assertEquals(26, token13.getTokenType());
      
      Token token14 = xPathLexer0.notEquals();
      assertEquals(22, token14.getTokenType());
      assertEquals("&~", token14.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("|>zAx59");
      Token token15 = xPathLexer0.doubleColon();
      assertEquals(19, token15.getTokenType());
      
      Token token16 = xPathLexer4.minus();
      assertEquals(6, token16.getTokenType());
      
      Token token17 = xPathLexer4.pipe();
      assertEquals("U", token17.getTokenText());
      assertEquals(17, token17.getTokenType());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.035674280354326
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IxeO~U#");
      xPathLexer0.not();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      xPathLexer1.at();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer("y$uM-!D6[)sQBCA");
      xPathLexer2.or();
      xPathLexer2.star();
      xPathLexer1.leftBracket();
      xPathLexer1.not();
      xPathLexer1.number();
      xPathLexer1.rightBracket();
      xPathLexer0.not();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer2.relationalOperator();
      xPathLexer1.rightBracket();
      xPathLexer1.leftParen();
      Token token0 = xPathLexer2.pipe();
      xPathLexer2.leftParen();
      xPathLexer2.dots();
      xPathLexer1.colon();
      xPathLexer2.star();
      xPathLexer1.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.div();
      xPathLexer1.slashes();
      xPathLexer1.and();
      XPathLexer xPathLexer3 = new XPathLexer("!_*hB&JLY:wR4!J73h");
      xPathLexer3.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.or();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.notEquals();
      xPathLexer1.doubleColon();
      Token token1 = xPathLexer4.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8394026964694676
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.identifier();
      xPathLexer0.literal();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("IoxUAAO&~U#");
      XPathLexer xPathLexer2 = new XPathLexer("_7D]G");
      xPathLexer2.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.dollar();
      xPathLexer2.relationalOperator();
      xPathLexer2.nextToken();
      xPathLexer1.plus();
      XPathLexer xPathLexer3 = new XPathLexer("S^e$7}n");
      xPathLexer3.slashes();
      xPathLexer0.equals();
      xPathLexer1.nextToken();
      xPathLexer2.slashes();
      xPathLexer0.and();
      xPathLexer1.at();
      xPathLexer3.leftParen();
      xPathLexer2.dollar();
      xPathLexer3.minus();
      xPathLexer2.comma();
      xPathLexer3.pipe();
      xPathLexer2.pipe();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.9488508097573887
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer0.plus();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer("=++FRVYH`y#|?}");
      xPathLexer0.or();
      xPathLexer0.identifier();
      xPathLexer0.star();
      xPathLexer2.slashes();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer("=++FRVYH`y#|?}");
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer(".;e[0g6&E_~4`QeAyr");
      XPathLexer xPathLexer5 = new XPathLexer("8ekt");
      xPathLexer5.nextToken();
      xPathLexer3.colon();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer6 = new XPathLexer("8ekt");
      xPathLexer6.colon();
      xPathLexer5.leftParen();
      xPathLexer0.leftParen();
      xPathLexer0.dots();
      xPathLexer6.colon();
      xPathLexer2.colon();
      xPathLexer4.nextToken();
      xPathLexer5.equals();
      xPathLexer2.mod();
      XPathLexer xPathLexer7 = new XPathLexer(".;e[0g6&E_~4`QeAyr");
      xPathLexer2.notEquals();
      xPathLexer5.rightBracket();
      xPathLexer3.pipe();
      Token token0 = xPathLexer2.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.8640424017230504
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("!{4zqW`tF=}v;A-6`");
      xPathLexer1.at();
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer("=++FRVYH`y#|?}");
      xPathLexer0.or();
      xPathLexer1.mod();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer1.notEquals();
      xPathLexer0.notEquals();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer3.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.plus();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer3.and();
      xPathLexer2.plus();
      xPathLexer1.nextToken();
      xPathLexer1.slashes();
      xPathLexer1.and();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer6 = new XPathLexer("=++FRVYH`y#|?}");
      xPathLexer5.dollar();
      XPathLexer xPathLexer7 = new XPathLexer("iBorrc53qV`,Iw[Pl8w");
      xPathLexer1.leftParen();
      xPathLexer5.at();
      xPathLexer7.slashes();
      xPathLexer0.pipe();
      Token token0 = xPathLexer6.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.9279295651082913
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.comma();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.dots();
      xPathLexer0.star();
      xPathLexer1.getXPath();
      xPathLexer0.equals();
      xPathLexer1.operatorName();
      xPathLexer0.or();
      xPathLexer0.currentPosition();
      xPathLexer1.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.currentPosition();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.slashes();
      xPathLexer0.not();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightParen();
      xPathLexer1.star();
      xPathLexer0.at();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.notEquals();
      XPathLexer xPathLexer5 = new XPathLexer("<&!\".5#()]/5%");
      xPathLexer5.rightBracket();
      xPathLexer5.pipe();
      Token token0 = xPathLexer3.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.1344784956971043
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}Pk%FS7F_H}Lq9");
      xPathLexer0.and();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("x", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("}", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("P", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("k", token3.getTokenText());
      
      xPathLexer0.slashes();
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals("FS", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer3.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer3.plus();
      Token token7 = xPathLexer2.colon();
      assertEquals(18, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer1.and();
      Token token8 = xPathLexer2.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer3.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      xPathLexer4.slashes();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.and();
      XPathLexer xPathLexer6 = new XPathLexer("x}Pk%FS7F_H}Lq9");
      Token token10 = xPathLexer0.dollar();
      assertEquals("7", token10.getTokenText());
      assertEquals(26, token10.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token11 = xPathLexer4.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer7.slashes();
      assertEquals(11, token12.getTokenType());
      
      Token token13 = xPathLexer2.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer0.pipe();
      assertEquals(17, token14.getTokenType());
      assertEquals("F", token14.getTokenText());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.772787294504779
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}Pk%FS7F_H}Lq9");
      xPathLexer0.and();
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.plus();
      Token token2 = xPathLexer0.notEquals();
      assertEquals("Pk", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (2) (x)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (5) (})", string1);
      
      xPathLexer0.isIdentifierChar('?');
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.leftParen();
      Token token3 = xPathLexer0.leftParen();
      assertEquals("F", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("S", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(30, token5.getTokenType());
      assertEquals("7", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer1.literal();
      assertNull(token6);
      
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer0.at();
      assertEquals("F", token7.getTokenText());
      
      xPathLexer0.rightParen();
      Token token8 = xPathLexer2.at();
      assertEquals(16, token8.getTokenType());
      
      xPathLexer0.plus();
      Token token9 = xPathLexer1.rightBracket();
      assertEquals(4, token9.getTokenType());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.0983465861015542
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("!{4zqW`tF=}v;-6`");
      xPathLexer1.at();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("=++FRVYH`y#|?}");
      xPathLexer0.or();
      xPathLexer1.mod();
      xPathLexer2.pipe();
      xPathLexer1.div();
      xPathLexer2.mod();
      Token token2 = xPathLexer1.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer1.mod();
      xPathLexer2.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer3.currentPosition();
      xPathLexer1.identifierOrOperatorName();
      Token token3 = xPathLexer3.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("com.werken.saxpath.Token", token3.getTokenText());
      
      Token token4 = xPathLexer1.not();
      assertEquals("{", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer1.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer2.star();
      assertEquals("+", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      xPathLexer0.or();
      xPathLexer4.leftParen();
      Token token8 = xPathLexer2.dollar();
      assertEquals("F", token8.getTokenText());
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer2.minus();
      assertEquals(6, token9.getTokenType());
      assertEquals("R", token9.getTokenText());
      
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      assertEquals(".", token10.getTokenText());
      
      xPathLexer3.pipe();
      Token token11 = xPathLexer1.pipe();
      assertEquals(17, token11.getTokenType());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7664511275509396
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals("I", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("o", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      xPathLexer1.at();
      Token token2 = xPathLexer1.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("$", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token3 = xPathLexer1.identifier();
      assertEquals("uM-", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("xU", token4.getTokenText());
      
      xPathLexer1.slashes();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer("|>zAx59");
      xPathLexer3.pipe();
      Token token5 = xPathLexer3.dots();
      assertEquals(13, token5.getTokenType());
      assertEquals(">", token5.getTokenText());
      
      Token token6 = xPathLexer1.colon();
      assertEquals("D", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer1.star();
      assertEquals("6", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer2.nextToken();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      assertEquals("O", token9.getTokenText());
      
      xPathLexer1.and();
      XPathLexer xPathLexer4 = new XPathLexer("y$uM-!D6[)sQBCA");
      XPathLexer xPathLexer5 = new XPathLexer("|>zAx59");
      Token token10 = xPathLexer0.at();
      assertEquals("&", token10.getTokenText());
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer1.notEquals();
      assertEquals("[)", token11.getTokenText());
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer3.rightBracket();
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer3.pipe();
      assertEquals("A", token13.getTokenText());
      assertEquals(17, token13.getTokenType());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9618870518823903
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      Token token0 = xPathLexer0.slashes();
      assertEquals("'", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.star();
      Token token1 = xPathLexer0.pipe();
      assertEquals(" ", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.star();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals("n", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      assertEquals("/", token5.getTokenText());
      
      xPathLexer0.identifier();
      Token token6 = xPathLexer0.star();
      assertEquals(";", token6.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer3.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer3.rightBracket();
      assertEquals("'", token7.getTokenText());
      assertEquals(4, token7.getTokenType());
      
      xPathLexer2.leftParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.colon();
      xPathLexer4.leftParen();
      xPathLexer4.dots();
      Token token8 = xPathLexer4.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer4.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer3.nextToken();
      assertEquals("K", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      xPathLexer3.mod();
      Token token11 = xPathLexer0.rightParen();
      assertEquals("}", token11.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("9e");
      Token token12 = xPathLexer2.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer4.notEquals();
      assertEquals(22, token13.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token14 = xPathLexer5.doubleColon();
      assertEquals("9e", token14.getTokenText());
      assertEquals(19, token14.getTokenType());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8935823316602343
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("W&l6X)LC(");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("&", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("W&l6X)LC(");
      Token token2 = xPathLexer1.at();
      assertEquals("W", token2.getTokenText());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      xPathLexer1.or();
      xPathLexer2.identifier();
      xPathLexer0.pipe();
      xPathLexer0.mod();
      xPathLexer0.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.rightParen();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token4 = xPathLexer4.identifierOrOperatorName();
      assertNotNull(token4);
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer4.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer3.leftParen();
      XPathLexer xPathLexer6 = new XPathLexer(") (");
      Token token6 = xPathLexer6.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals(")", token6.getTokenText());
      
      xPathLexer3.leftParen();
      Token token7 = xPathLexer6.dots();
      assertEquals(13, token7.getTokenType());
      assertEquals(" ", token7.getTokenText());
      
      Token token8 = xPathLexer5.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer2.nextToken();
      assertEquals(2, token9.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer(") (");
      xPathLexer7.mod();
      Token token10 = xPathLexer7.rightParen();
      assertEquals(")", token10.getTokenText());
      
      Token token11 = xPathLexer3.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer6.pipe();
      assertEquals(17, token12.getTokenType());
      assertEquals("(", token12.getTokenText());
      
      Token token13 = xPathLexer7.notEquals();
      assertEquals(22, token13.getTokenType());
      assertEquals(" (", token13.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token14 = xPathLexer6.doubleColon();
      assertEquals(19, token14.getTokenType());
      
      Token token15 = xPathLexer4.leftParen();
      assertEquals(1, token15.getTokenType());
      
      Token token16 = xPathLexer6.slashes();
      assertEquals(11, token16.getTokenType());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.9439199854291904
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("woxUA;O&~U#");
      xPathLexer0.not();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("o", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("woxUA;O&~U#");
      xPathLexer1.at();
      Token token1 = xPathLexer1.plus();
      assertEquals("o", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("woxUA;O&~U#");
      xPathLexer2.or();
      Token token2 = xPathLexer2.star();
      assertEquals("w", token2.getTokenText());
      
      Token token3 = xPathLexer1.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("x", token3.getTokenText());
      
      xPathLexer1.not();
      Token token4 = xPathLexer1.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      xPathLexer1.rightBracket();
      xPathLexer0.not();
      xPathLexer2.relationalOperator();
      xPathLexer1.rightBracket();
      xPathLexer2.pipe();
      xPathLexer1.at();
      Token token5 = xPathLexer2.nextToken();
      assertEquals("xUA", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.slashes();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.and();
      XPathLexer xPathLexer4 = new XPathLexer("!_*hB&JLY:wR4!J73h");
      Token token6 = xPathLexer4.nextToken();
      assertEquals(23, token6.getTokenType());
      assertEquals("!", token6.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("woxUA;O&~U#");
      Token token7 = xPathLexer2.at();
      assertEquals(16, token7.getTokenType());
      assertEquals(";", token7.getTokenText());
      
      Token token8 = xPathLexer1.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.rightBracket();
      assertEquals(4, token9.getTokenType());
      assertEquals("A", token9.getTokenText());
      
      Token token10 = xPathLexer2.pipe();
      assertEquals("O", token10.getTokenText());
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer0.slashes();
      assertEquals(";", token11.getTokenText());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8098835152911383
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#dl*vv!`v");
      XPathLexer xPathLexer1 = new XPathLexer("#dl*vv!`v");
      xPathLexer1.comma();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.dots();
      assertEquals("#", token0.getTokenText());
      
      xPathLexer1.getXPath();
      xPathLexer0.equals();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("l*", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("vv", token2.getTokenText());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer3.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer2.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer1.leftParen();
      assertEquals("d", token7.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer0.colon();
      assertEquals("`", token8.getTokenText());
      
      Token token9 = xPathLexer2.leftParen();
      assertEquals(1, token9.getTokenType());
      
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer1.equals();
      assertEquals(21, token11.getTokenType());
      assertEquals("l", token11.getTokenText());
      
      Token token12 = xPathLexer4.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer1.star();
      assertEquals("*", token13.getTokenText());
      assertEquals(20, token13.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      Token token14 = xPathLexer2.rightParen();
      assertEquals(2, token14.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("#dl*vv!`v");
      Token token15 = xPathLexer3.at();
      assertEquals(16, token15.getTokenType());
      
      Token token16 = xPathLexer2.doubleColon();
      assertEquals(19, token16.getTokenType());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.063592004177854
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer0.star();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer2.comma();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.equals();
      xPathLexer3.number();
      xPathLexer3.rightBracket();
      xPathLexer2.not();
      xPathLexer3.relationalOperator();
      xPathLexer1.rightBracket();
      xPathLexer3.leftParen();
      xPathLexer2.pipe();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.leftParen();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer5.dots();
      XPathLexer xPathLexer7 = new XPathLexer("");
      xPathLexer3.colon();
      XPathLexer xPathLexer8 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer1.dollar();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer7.slashes();
      XPathLexer xPathLexer10 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer5.pipe();
      Token token0 = xPathLexer8.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.9002992672606402
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.at();
      xPathLexer1.plus();
      xPathLexer0.dots();
      XPathLexer xPathLexer2 = new XPathLexer("|.T");
      xPathLexer2.and();
      xPathLexer0.number();
      XPathLexer xPathLexer3 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer1.or();
      xPathLexer0.whitespace();
      xPathLexer3.colon();
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.doubleColon();
      xPathLexer3.mod();
      xPathLexer3.mod();
      xPathLexer3.rightParen();
      XPathLexer xPathLexer5 = new XPathLexer("~6'~o- <g:j");
      XPathLexer xPathLexer6 = new XPathLexer("~6'~o- <g:j");
      xPathLexer6.at();
      xPathLexer2.nextToken();
      xPathLexer2.slashes();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer1.and();
      XPathLexer xPathLexer8 = new XPathLexer("");
      XPathLexer xPathLexer9 = new XPathLexer("&mpBNLb1t!Wj");
      xPathLexer6.at();
      xPathLexer5.notEquals();
      xPathLexer2.rightBracket();
      Token token1 = xPathLexer2.pipe();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.095679790183041
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals("I", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token1 = xPathLexer1.minus();
      assertEquals("y", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("y$uM-!D6[)sQBCA");
      xPathLexer0.equals();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("UA", token2.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(26, token3.getTokenType());
      assertEquals("$", token3.getTokenText());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer3.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer2.rightBracket();
      assertEquals("y", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer2.colon();
      assertEquals("$", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      xPathLexer5.leftParen();
      xPathLexer0.dots();
      xPathLexer2.equals();
      Token token7 = xPathLexer1.leftParen();
      assertEquals("u", token7.getTokenText());
      
      Token token8 = xPathLexer5.dots();
      assertEquals(13, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer3.relationalOperator();
      Token token9 = xPathLexer1.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("M-", token9.getTokenText());
      
      Token token10 = xPathLexer5.rightParen();
      assertEquals(2, token10.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token11 = xPathLexer1.at();
      assertEquals("!", token11.getTokenText());
      assertEquals(16, token11.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token12 = xPathLexer8.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer2.minus();
      assertEquals(6, token13.getTokenType());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.8730733892056934
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("I", token0.getTokenText());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token1 = xPathLexer1.minus();
      assertEquals("y", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token2 = xPathLexer0.equals();
      assertEquals("x", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("UA", token3.getTokenText());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals("$", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer3.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer2.rightBracket();
      assertEquals("y", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
      
      xPathLexer3.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.colon();
      xPathLexer4.leftParen();
      xPathLexer2.dots();
      Token token7 = xPathLexer5.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.leftParen();
      assertEquals("A", token8.getTokenText());
      
      Token token9 = xPathLexer1.dots();
      assertEquals(13, token9.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("pv<{>,ZM )Kr?gN.)");
      xPathLexer0.relationalOperator();
      Token token10 = xPathLexer0.nextToken();
      assertEquals("O", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      xPathLexer4.rightParen();
      XPathLexer xPathLexer7 = new XPathLexer("pv<{>,ZM )Kr?gN.)");
      Token token11 = xPathLexer4.at();
      assertEquals(16, token11.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token12 = xPathLexer4.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer5.minus();
      assertEquals(6, token13.getTokenType());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.247625237724182
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("!{4zqW`tF=}v;A-6`");
      xPathLexer1.at();
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer("=++FRVYH`y#|?}");
      xPathLexer2.or();
      Token token0 = xPathLexer2.star();
      assertEquals("=", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      xPathLexer1.leftBracket();
      xPathLexer0.not();
      Token token1 = xPathLexer0.number();
      assertEquals(31, token1.getTokenType());
      
      Token token2 = xPathLexer1.rightBracket();
      assertEquals("4", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("erken.saxpath.Token", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer2.mod();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer1.currentPosition();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer1.minus();
      assertEquals("z", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer5.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      xPathLexer2.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.doubleColon();
      Token token7 = xPathLexer2.nextToken();
      assertEquals("+", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      xPathLexer1.mod();
      Token token8 = xPathLexer4.rightParen();
      assertEquals(2, token8.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("{ncwo8 =5>b<l1");
      Token token9 = xPathLexer1.at();
      assertEquals(16, token9.getTokenType());
      assertEquals("q", token9.getTokenText());
      
      Token token10 = xPathLexer7.notEquals();
      assertEquals(22, token10.getTokenType());
      assertEquals("{n", token10.getTokenText());
      
      Token token11 = xPathLexer4.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer5.rightBracket();
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer3.comma();
      assertEquals("c", token13.getTokenText());
      assertEquals(32, token13.getTokenType());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.249765193232158
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("W&l6X)LC(");
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("W&l6X)LC(");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      xPathLexer1.or();
      xPathLexer2.identifier();
      Token token1 = xPathLexer2.star();
      assertEquals(")", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer2.nextToken();
      assertEquals("(", token2.getTokenText());
      
      xPathLexer0.not();
      Token token3 = xPathLexer2.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer2.rightBracket();
      Token token4 = xPathLexer0.not();
      assertEquals("6", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      xPathLexer1.nextToken();
      xPathLexer0.mod();
      Token token5 = xPathLexer1.rightParen();
      assertEquals("&", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("W&l6X)LC(");
      xPathLexer0.currentPosition();
      Token token6 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      assertNotNull(token6);
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer0.minus();
      assertEquals("X", token7.getTokenText());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(")", token8.getTokenText());
      assertEquals(3, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.mod();
      xPathLexer3.mod();
      Token token9 = xPathLexer2.rightParen();
      assertEquals(2, token9.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("W&l6X)LC(");
      Token token10 = xPathLexer2.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer1.notEquals();
      assertEquals("l6", token11.getTokenText());
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer3.doubleColon();
      assertEquals("W&", token12.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token13 = xPathLexer7.dollar();
      assertEquals(26, token13.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("");
      Token token14 = xPathLexer4.doubleColon();
      assertEquals(19, token14.getTokenType());
      
      Token token15 = xPathLexer3.colon();
      assertEquals(18, token15.getTokenType());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.8534558735141948
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer0.not();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer1.at();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer2.or();
      Token token0 = xPathLexer2.star();
      xPathLexer1.leftBracket();
      xPathLexer1.not();
      xPathLexer1.number();
      xPathLexer1.rightBracket();
      xPathLexer0.not();
      xPathLexer2.relationalOperator();
      xPathLexer1.rightBracket();
      xPathLexer1.leftParen();
      xPathLexer2.pipe();
      xPathLexer2.leftParen();
      xPathLexer2.dots();
      xPathLexer0.colon();
      xPathLexer2.star();
      xPathLexer1.nextToken();
      xPathLexer2.mod();
      xPathLexer0.slashes();
      xPathLexer1.colon();
      xPathLexer1.equals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer3.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.0981177624821883
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("_6q7sIv*+*r?1<4X");
      Token token2 = xPathLexer1.rightParen();
      assertEquals(2, token2.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("_6q7sIv*+*r?1<4X");
      xPathLexer2.identifierOrOperatorName();
      xPathLexer2.dollar();
      xPathLexer2.relationalOperator();
      Token token3 = xPathLexer2.nextToken();
      assertEquals("+", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("_6q7sIv*+*r?1<4X");
      xPathLexer3.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer("L bj=}}gfC+][Axa4!");
      xPathLexer4.hasMoreChars();
      Token token6 = xPathLexer4.leftParen();
      assertEquals("L", token6.getTokenText());
      
      xPathLexer0.operatorName();
      Token token7 = xPathLexer1.dollar();
      assertEquals(26, token7.getTokenType());
      assertEquals("6", token7.getTokenText());
      
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer3.leftBracket();
      assertEquals(3, token9.getTokenType());
      assertEquals("*", token9.getTokenText());
      
      Token token10 = xPathLexer1.nextToken();
      assertEquals("q7sIv", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer0.number();
      assertEquals(30, token11.getTokenType());
      
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.025277446105591
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals("I", token0.getTokenText());
      
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.at();
      assertEquals("x", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("U", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("o.\"qs5ag$Mk_?");
      xPathLexer0.or();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("A", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer1.leftBracket();
      assertEquals("o", token4.getTokenText());
      
      xPathLexer0.not();
      Token token5 = xPathLexer1.number();
      assertEquals(31, token5.getTokenType());
      assertEquals(".", token5.getTokenText());
      
      xPathLexer1.rightBracket();
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.rightBracket();
      assertEquals("O", token7.getTokenText());
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.leftParen();
      assertEquals("&", token8.getTokenText());
      
      xPathLexer2.pipe();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.plus();
      Token token9 = xPathLexer1.nextToken();
      assertEquals("s5ag", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      xPathLexer2.slashes();
      XPathLexer xPathLexer5 = new XPathLexer("o.\"qs5ag$Mk_?");
      xPathLexer5.and();
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token10 = xPathLexer4.dollar();
      assertEquals(26, token10.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("IoxUAAO&~U#");
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.leftParen();
      Token token11 = xPathLexer2.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer0.slashes();
      assertEquals(11, token12.getTokenType());
      assertEquals("~", token12.getTokenText());
      
      Token token13 = xPathLexer6.minus();
      assertEquals("c", token13.getTokenText());
      
      Token token14 = xPathLexer8.pipe();
      assertEquals(17, token14.getTokenType());
      
      Token token15 = xPathLexer8.minus();
      assertEquals(6, token15.getTokenType());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.1166320918866166
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.dots();
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("_6q7sIv*+*r?1<4X");
      xPathLexer1.rightParen();
      xPathLexer1.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("_6q7sIv*+*r?1<4X");
      xPathLexer2.identifierOrOperatorName();
      xPathLexer2.dollar();
      xPathLexer2.relationalOperator();
      Token token0 = xPathLexer2.nextToken();
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("_6q7sIv*+*r?1<4X");
      Token token3 = xPathLexer3.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("L bj=}}gfC+][Axa4!");
      xPathLexer4.hasMoreChars();
      Token token4 = xPathLexer4.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals("L", token4.getTokenText());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer1.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("6", token5.getTokenText());
      
      Token token6 = xPathLexer4.rightParen();
      assertEquals(2, token6.getTokenType());
      assertEquals(" ", token6.getTokenText());
      
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer3.plus();
      assertEquals("*", token8.getTokenText());
      
      xPathLexer3.and();
      xPathLexer3.at();
      Token token9 = xPathLexer2.nextToken();
      assertEquals("*r?1<4X", token9.getTokenText());
      
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer3.at();
      assertEquals("", token11.getTokenText());
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer3.leftBracket();
      assertEquals(3, token12.getTokenType());
      assertEquals("*", token12.getTokenText());
      
      boolean boolean0 = xPathLexer2.hasMoreChars();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.01103213444149
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals("I", token0.getTokenText());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      Token token1 = xPathLexer0.equals();
      assertEquals("x", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      xPathLexer1.or();
      xPathLexer1.star();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("U", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer1.not();
      xPathLexer1.number();
      Token token3 = xPathLexer0.star();
      assertEquals("A", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("A", token5.getTokenText());
      
      xPathLexer0.leftParen();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer0.leftParen();
      assertEquals("~", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer0.dots();
      assertEquals("U", token8.getTokenText());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer1.plus();
      assertEquals(5, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("::37k");
      Token token11 = xPathLexer4.literal();
      assertEquals(27, token11.getTokenType());
      assertEquals("", token11.getTokenText());
      
      Token token12 = xPathLexer4.nextToken();
      assertEquals("37", token12.getTokenText());
      assertEquals(30, token12.getTokenType());
      
      Token token13 = xPathLexer0.slashes();
      assertEquals(11, token13.getTokenType());
      
      xPathLexer3.mod();
      xPathLexer2.rightParen();
      Token token14 = xPathLexer2.notEquals();
      assertEquals(22, token14.getTokenType());
      
      Token token15 = xPathLexer0.rightBracket();
      assertEquals(4, token15.getTokenType());
      
      Token token16 = xPathLexer1.pipe();
      assertEquals(17, token16.getTokenType());
      
      Token token17 = xPathLexer2.comma();
      assertEquals(32, token17.getTokenType());
      
      Token token18 = xPathLexer0.rightParen();
      assertEquals(2, token18.getTokenType());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.8718986776100612
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!{4zqW`tF=}v;A-6`");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("=++FRVYH`y#|?}");
      xPathLexer0.mod();
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token1 = xPathLexer4.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer2.relationalOperator();
      Token token2 = xPathLexer1.rightBracket();
      assertEquals("+", token2.getTokenText());
      
      xPathLexer0.not();
      XPathLexer xPathLexer5 = new XPathLexer("!{4zqW`tF=}v;A-6`");
      Token token3 = xPathLexer5.dots();
      assertEquals("!", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer1.colon();
      assertEquals("+", token4.getTokenText());
      
      Token token5 = xPathLexer4.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("4", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer2.star();
      assertEquals(20, token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer6.notEquals();
      assertEquals(22, token8.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.or();
      Token token9 = xPathLexer8.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer4.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer2.comma();
      assertEquals(32, token11.getTokenType());
      
      Token token12 = xPathLexer4.slashes();
      assertEquals(11, token12.getTokenType());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.200885725386791
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("I", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token1 = xPathLexer1.at();
      assertEquals("y", token1.getTokenText());
      
      Token token2 = xPathLexer1.plus();
      assertEquals(5, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("y$uM-!D6[)sQBCA");
      xPathLexer2.or();
      Token token3 = xPathLexer2.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("y", token3.getTokenText());
      
      xPathLexer1.leftBracket();
      xPathLexer1.not();
      Token token4 = xPathLexer1.number();
      assertEquals("", token4.getTokenText());
      
      xPathLexer2.rightBracket();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("o", token5.getTokenText());
      
      xPathLexer1.nextToken();
      xPathLexer0.mod();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.currentPosition();
      Token token6 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      assertNotNull(token6);
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.minus();
      xPathLexer4.at();
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      assertEquals("x", token7.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer0.mod();
      Token token8 = xPathLexer1.rightParen();
      assertEquals(2, token8.getTokenType());
      assertEquals("!", token8.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token9 = xPathLexer4.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer3.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer1.dots();
      assertEquals(13, token11.getTokenType());
      assertEquals("D", token11.getTokenText());
      
      Token token12 = xPathLexer6.pipe();
      assertEquals(17, token12.getTokenType());
      
      Token token13 = xPathLexer3.doubleColon();
      assertEquals(19, token13.getTokenType());
      
      Token token14 = xPathLexer6.colon();
      assertEquals("$", token14.getTokenText());
      assertEquals(18, token14.getTokenType());
      
      Token token15 = xPathLexer6.comma();
      assertEquals("u", token15.getTokenText());
      assertEquals(32, token15.getTokenType());
      
      Token token16 = xPathLexer6.slashes();
      assertEquals(11, token16.getTokenType());
      assertEquals("M", token16.getTokenText());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.8813292585549228
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("!{4zqW`tF=}v;AO-6`");
      Token token1 = xPathLexer1.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("!", token1.getTokenText());
      
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer("=++FRVYH`y#|?}");
      xPathLexer0.or();
      xPathLexer1.mod();
      xPathLexer0.star();
      xPathLexer1.div();
      xPathLexer2.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.identifierOrOperatorName();
      xPathLexer3.relationalOperator();
      xPathLexer2.rightBracket();
      Token token2 = xPathLexer1.not();
      assertEquals(23, token2.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("2VF3\";4E,_");
      xPathLexer2.colon();
      Token token3 = xPathLexer4.leftParen();
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer6.plus();
      assertEquals("2", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      xPathLexer2.colon();
      Token token5 = xPathLexer2.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("F", token5.getTokenText());
      
      Token token6 = xPathLexer6.nextToken();
      assertEquals("VF3", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      xPathLexer1.mod();
      Token token7 = xPathLexer0.star();
      assertEquals(".", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer4.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer6.rightBracket();
      assertEquals(4, token9.getTokenType());
      assertEquals("\"", token9.getTokenText());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      assertEquals("w", token10.getTokenText());
      
      Token token11 = xPathLexer5.comma();
      assertEquals(32, token11.getTokenType());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.299402340696452
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("IoxUAAO&~U#");
      Token token1 = xPathLexer1.rightParen();
      assertEquals("I", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals("oxUAAO", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer1.comma();
      assertEquals("~", token6.getTokenText());
      
      xPathLexer0.comma();
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertNull(token8);
      
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      xPathLexer1.leftParen();
      Token token10 = xPathLexer1.colon();
      assertEquals(18, token10.getTokenType());
      assertEquals("#", token10.getTokenText());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token11 = xPathLexer2.dots();
      assertEquals(13, token11.getTokenType());
      
      xPathLexer2.and();
      xPathLexer1.whitespace();
      xPathLexer2.or();
      Token token12 = xPathLexer1.whitespace();
      assertEquals((-2), token12.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.getXPath();
      Token token13 = xPathLexer1.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      Token token14 = xPathLexer1.comma();
      assertEquals(32, token14.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token15 = xPathLexer4.number();
      assertEquals(30, token15.getTokenType());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.8939838463723762
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer0.not();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer1.at();
      assertEquals("I", token0.getTokenText());
      
      xPathLexer0.equals();
      xPathLexer1.or();
      xPathLexer1.star();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("U", token1.getTokenText());
      
      xPathLexer1.not();
      Token token2 = xPathLexer1.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("A", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer1.not();
      assertEquals("U", token4.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("A", token5.getTokenText());
      
      xPathLexer0.leftParen();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      assertEquals("U", token7.getTokenText());
      
      Token token8 = xPathLexer1.equals();
      assertEquals("A", token8.getTokenText());
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer1.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer1.comma();
      assertEquals("O", token11.getTokenText());
      
      xPathLexer3.plus();
      Token token12 = xPathLexer2.comma();
      assertEquals(32, token12.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token13 = xPathLexer2.notEquals();
      assertEquals(22, token13.getTokenType());
      
      Token token14 = xPathLexer4.not();
      assertEquals(23, token14.getTokenType());
      
      Token token15 = xPathLexer4.rightBracket();
      assertEquals(4, token15.getTokenType());
      
      Token token16 = xPathLexer3.pipe();
      assertEquals(17, token16.getTokenType());
      
      xPathLexer4.mod();
      Token token17 = xPathLexer3.leftBracket();
      assertEquals(3, token17.getTokenType());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5956259069796617
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      String string0 = null;
      // Undeclared exception!
      try { 
        xPathLexer2.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.0184306786169417
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token1 = xPathLexer1.at();
      assertEquals("y", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer1.plus();
      assertEquals("$", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("y$uM-!D6[)sQBCA");
      xPathLexer1.identifier();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals("AA", token5.getTokenText());
      
      Token token6 = xPathLexer2.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("y", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("|>zAx59");
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer("IoxUAAO&~U#");
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer3.colon();
      Token token7 = xPathLexer1.leftParen();
      assertEquals("D", token7.getTokenText());
      
      Token token8 = xPathLexer4.colon();
      assertEquals("I", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token9 = xPathLexer6.literal();
      assertNull(token9);
      
      Token token10 = xPathLexer3.nextToken();
      assertEquals(">", token10.getTokenText());
      assertEquals(9, token10.getTokenType());
      
      xPathLexer3.mod();
      Token token11 = xPathLexer4.rightParen();
      assertEquals("o", token11.getTokenText());
      assertEquals(2, token11.getTokenType());
      
      Token token12 = xPathLexer5.nextToken();
      assertEquals("com.werken.saxpath.XPathLexer", token12.getTokenText());
      assertEquals(15, token12.getTokenType());
      
      xPathLexer5.mod();
      Token token13 = xPathLexer5.star();
      assertEquals(20, token13.getTokenType());
      
      Token token14 = xPathLexer3.notEquals();
      assertEquals(22, token14.getTokenType());
      
      xPathLexer6.rightBracket();
      Token token15 = xPathLexer2.pipe();
      assertEquals("$", token15.getTokenText());
      
      Token token16 = xPathLexer4.comma();
      assertEquals(32, token16.getTokenType());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.885959782454627
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("!{4zqW`tF=}v;A-6`");
      xPathLexer1.at();
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer("=++FRVYH`y#|?}");
      xPathLexer0.or();
      xPathLexer1.mod();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer1.notEquals();
      xPathLexer0.notEquals();
      xPathLexer0.relationalOperator();
      xPathLexer1.nextToken();
      xPathLexer2.plus();
      xPathLexer0.slashes();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer2.slashes();
      xPathLexer1.and();
      xPathLexer1.at();
      xPathLexer0.comma();
      xPathLexer1.leftParen();
      xPathLexer0.dollar();
      xPathLexer2.minus();
      xPathLexer1.comma();
      xPathLexer1.pipe();
      xPathLexer2.pipe();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.9369345111864833
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("c", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("!{4zqW`tF=}v;A-6`");
      Token token1 = xPathLexer1.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("!", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("o", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("=++FRVYH`y#|?}");
      xPathLexer0.or();
      xPathLexer1.mod();
      Token token3 = xPathLexer0.star();
      assertEquals("m", token3.getTokenText());
      
      xPathLexer2.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.rightBracket();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token4 = xPathLexer5.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer3.relationalOperator();
      Token token5 = xPathLexer2.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("+", token5.getTokenText());
      
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("{", token6.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("2VF3\";4E,_");
      xPathLexer4.leftParen();
      Token token7 = xPathLexer1.dots();
      assertEquals(13, token7.getTokenType());
      assertEquals("4", token7.getTokenText());
      
      xPathLexer2.colon();
      xPathLexer2.colon();
      Token token8 = xPathLexer6.nextToken();
      assertEquals(30, token8.getTokenType());
      assertEquals("2", token8.getTokenText());
      
      Token token9 = xPathLexer5.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer4.notEquals();
      assertEquals(22, token10.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("com.werken.saxpath.Token");
      Token token11 = xPathLexer7.dollar();
      assertEquals(26, token11.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("com.werken.saxpath.Token");
      Token token12 = xPathLexer1.doubleColon();
      assertEquals(19, token12.getTokenType());
      assertEquals("zq", token12.getTokenText());
      
      Token token13 = xPathLexer1.colon();
      assertEquals("W", token13.getTokenText());
      assertEquals(18, token13.getTokenType());
      
      Token token14 = xPathLexer5.comma();
      assertEquals(32, token14.getTokenType());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.0504571933931284
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.star();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("U", token0.getTokenText());
      
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      xPathLexer0.or();
      Token token1 = xPathLexer0.star();
      assertEquals("/", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      xPathLexer1.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer2.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("'K yUnn/8V4;}F");
      XPathLexer xPathLexer4 = new XPathLexer("z,");
      xPathLexer4.and();
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer0.leftParen();
      assertEquals("}", token10.getTokenText());
      
      Token token11 = xPathLexer2.dots();
      assertEquals(13, token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.relationalOperator();
      Token token12 = xPathLexer3.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      Token token13 = xPathLexer5.rightParen();
      assertEquals(2, token13.getTokenType());
      assertEquals("c", token13.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer3.at();
      Token token14 = xPathLexer6.pipe();
      assertEquals("c", token14.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token15 = xPathLexer6.notEquals();
      assertEquals(22, token15.getTokenType());
      assertEquals("om", token15.getTokenText());
      
      Token token16 = xPathLexer4.minus();
      assertEquals("z", token16.getTokenText());
      assertEquals(6, token16.getTokenType());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.1233348555882245
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}Pk%FS7F_H}Lq9");
      xPathLexer0.and();
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.plus();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("Pk", token2.getTokenText());
      
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (2) (x)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (5) (})", string1);
      
      xPathLexer0.isIdentifierChar('?');
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.and();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("%", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftBracket();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("S7F_H}Lq9", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer0.minus();
      assertEquals("S", token6.getTokenText());
      
      Token token7 = xPathLexer2.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.mod();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token10 = xPathLexer3.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer1.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer4.rightBracket();
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer0.pipe();
      assertEquals(17, token13.getTokenType());
      assertEquals("F", token13.getTokenText());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.1211489646428516
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}Pk%FS7F_H}Lq9");
      xPathLexer0.and();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.plus();
      Token token1 = xPathLexer0.plus();
      assertEquals("P", token1.getTokenText());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.minus();
      assertEquals("k", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer("x}Pk%FS7F_H}Lq9");
      xPathLexer2.leftParen();
      xPathLexer0.pipe();
      Token token5 = xPathLexer2.leftParen();
      assertEquals("}", token5.getTokenText());
      
      Token token6 = xPathLexer0.dots();
      assertEquals("7", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer1.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("_H", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer2.slashes();
      assertEquals("P", token10.getTokenText());
      assertEquals(11, token10.getTokenType());
      
      xPathLexer1.and();
      XPathLexer xPathLexer3 = new XPathLexer("!_*hB&JLY:wR4!J73h");
      XPathLexer xPathLexer4 = new XPathLexer("!_*hB&JLY:wR4!J73h");
      Token token11 = xPathLexer2.at();
      assertEquals("k", token11.getTokenText());
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer1.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer2.rightBracket();
      assertEquals(4, token13.getTokenType());
      assertEquals("%", token13.getTokenText());
      
      Token token14 = xPathLexer2.pipe();
      assertEquals("F", token14.getTokenText());
      assertEquals(17, token14.getTokenType());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.1215083499565655
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("!{4zqW`tF=}v;A-6`");
      Token token1 = xPathLexer1.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("!", token1.getTokenText());
      
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer("=++FRVYH`y#|?}");
      xPathLexer0.or();
      xPathLexer1.mod();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer1.notEquals();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer1.identifierOrOperatorName();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer3.or();
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer3.rightParen();
      assertEquals("c", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer3.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("o", token5.getTokenText());
      
      Token token6 = xPathLexer2.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.getPreviousToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("m.werken.saxpath.Token", token7.getTokenText());
      
      xPathLexer0.consume(0);
      xPathLexer0.setXPath("a\"Xvn|B4%{ssKRq%4Ry");
      xPathLexer1.leftParen();
      Token token8 = xPathLexer1.plus();
      assertEquals("t", token8.getTokenText());
      assertEquals(5, token8.getTokenType());
      
      xPathLexer2.operatorName();
      Token token9 = xPathLexer1.star();
      assertEquals("F", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      xPathLexer0.and();
      Token token10 = xPathLexer3.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer3.pipe();
      assertEquals(17, token11.getTokenType());
      assertEquals(".", token11.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token12 = xPathLexer3.rightBracket();
      assertEquals("w", token12.getTokenText());
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer1.identifier();
      assertEquals("", token13.getTokenText());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.296551851160517
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.identifier();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer1.rightParen();
      assertEquals("I", token0.getTokenText());
      
      Token token1 = xPathLexer1.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals("xUAAO", token2.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer1.dollar();
      assertEquals("&", token3.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer1.slashes();
      assertEquals("~", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      xPathLexer1.notEquals();
      xPathLexer1.notEquals();
      Token token6 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer1.leftParen();
      xPathLexer0.or();
      xPathLexer0.dollar();
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer1.not();
      assertEquals(23, token8.getTokenType());
      
      xPathLexer1.getPreviousToken();
      xPathLexer0.consume(0);
      xPathLexer1.setXPath("a\"Xvn|B4%{ssKRq%4Ry");
      Token token9 = xPathLexer0.leftParen();
      assertEquals(1, token9.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer1.operatorName();
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer0.and();
      Token token11 = xPathLexer1.notEquals();
      assertEquals(22, token11.getTokenType());
      assertEquals("a\"", token11.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token12 = xPathLexer1.rightBracket();
      assertEquals("X", token12.getTokenText());
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer0.pipe();
      assertEquals(17, token13.getTokenType());
      
      Token token14 = xPathLexer0.comma();
      assertEquals(32, token14.getTokenType());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.263707406318991
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#dl*vv!`v");
      XPathLexer xPathLexer1 = new XPathLexer("#dl*vv!`v");
      Token token0 = xPathLexer1.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("#", token0.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.setPreviousToken((Token) null);
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("#", token1.getTokenText());
      
      xPathLexer0.star();
      xPathLexer1.getXPath();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      xPathLexer1.operatorName();
      xPathLexer0.or();
      xPathLexer0.currentPosition();
      Token token3 = xPathLexer1.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.rightParen();
      assertEquals("v", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.currentPosition();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer1.slashes();
      assertEquals("*", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.not();
      assertEquals("!", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer3.rightParen();
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer1.star();
      assertEquals("v", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer1.pipe();
      xPathLexer2.setPreviousToken(token10);
      assertEquals(17, token10.getTokenType());
      assertEquals("v", token10.getTokenText());
      
      Token token11 = xPathLexer0.at();
      assertEquals("`", token11.getTokenText());
      assertEquals(16, token11.getTokenType());
      
      xPathLexer3.or();
      xPathLexer3.leftParen();
      Token token12 = xPathLexer2.dollar();
      assertEquals(26, token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
      
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token14 = xPathLexer4.rightBracket();
      assertEquals(4, token14.getTokenType());
      
      xPathLexer0.identifier();
      Token token15 = xPathLexer1.plus();
      assertEquals(5, token15.getTokenType());
      assertEquals("!", token15.getTokenText());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.000590855177546
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token0 = xPathLexer0.at();
      assertEquals("y", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("$", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      xPathLexer1.or();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("u", token2.getTokenText());
      
      xPathLexer0.not();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("-", token4.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.relationalOperator();
      Token token5 = xPathLexer1.leftParen();
      assertEquals("y", token5.getTokenText());
      
      xPathLexer1.leftParen();
      Token token6 = xPathLexer1.colon();
      assertEquals("u", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.literal();
      assertNull(token7);
      
      xPathLexer0.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer3.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer3.rightParen();
      assertEquals(2, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals("!", token10.getTokenText());
      assertEquals(23, token10.getTokenType());
      
      Token token11 = xPathLexer1.getPreviousToken();
      assertEquals(15, token11.getTokenType());
      assertEquals("M-", token11.getTokenText());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.8945073524586644
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.literal();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.dots();
      xPathLexer0.star();
      xPathLexer0.getXPath();
      xPathLexer0.equals();
      xPathLexer0.operatorName();
      xPathLexer0.plus();
      xPathLexer0.currentPosition();
      xPathLexer0.or();
      xPathLexer0.dots();
      xPathLexer0.comma();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      xPathLexer0.colon();
      xPathLexer1.leftParen();
      xPathLexer1.dots();
      xPathLexer1.dots();
      xPathLexer0.and();
      xPathLexer1.whitespace();
      xPathLexer0.or();
      xPathLexer0.whitespace();
      xPathLexer0.getXPath();
      xPathLexer0.leftBracket();
      xPathLexer0.comma();
      xPathLexer0.getPreviousToken();
      xPathLexer1.slashes();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.119893519557283
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}Pk%FS7F_H}Lq9");
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.plus();
      xPathLexer0.notEquals();
      token0.toString();
      Token token1 = xPathLexer0.identifier();
      token1.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token0);
      XPathLexer xPathLexer2 = new XPathLexer("[ (15) ()");
      xPathLexer2.plus();
      XPathLexer xPathLexer3 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer3.LA(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.186166441695612
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.minus();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      Token token1 = xPathLexer0.number();
      assertEquals(31, token1.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("e", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("r", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals("k", token4.getTokenText());
      
      xPathLexer0.pipe();
      Token token5 = xPathLexer0.dots();
      assertEquals("n.", token5.getTokenText());
      assertEquals(14, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals("a", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("xpath.XPathLexer", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("!_*hB&JLY:wR4!J73h");
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token10 = xPathLexer1.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer1.notEquals();
      assertEquals("_*", token11.getTokenText());
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer0.rightBracket();
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer1.pipe();
      assertEquals("h", token13.getTokenText());
      assertEquals(17, token13.getTokenType());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.138996139747585
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      xPathLexer0.literal();
      xPathLexer0.plus();
      xPathLexer0.consume((-1554));
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.2834402932990505
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.not();
      xPathLexer0.not();
      xPathLexer0.whitespace();
      xPathLexer0.doubleColon();
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume((-623));
      // Undeclared exception!
      try { 
        xPathLexer0.identifier();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.8842802123171847
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume((-3176));
      xPathLexer0.at();
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.2349844708067175
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}Pk%FS7F_H}Lq9");
      xPathLexer0.and();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("x", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(15, int0);
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("Pk", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals("%", token3.getTokenText());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.slashes();
      assertEquals("F", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals("S7", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("F", token6.getTokenText());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals("_", token7.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token8 = xPathLexer0.colon();
      assertEquals("H", token8.getTokenText());
      
      Token token9 = xPathLexer2.leftParen();
      assertEquals(1, token9.getTokenType());
      
      Token token10 = xPathLexer2.dots();
      assertEquals(13, token10.getTokenType());
      
      xPathLexer3.colon();
      Token token11 = xPathLexer1.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer3.star();
      assertEquals(20, token12.getTokenType());
      
      xPathLexer0.nextToken();
      Token token13 = xPathLexer4.literal();
      assertNull(token13);
      
      xPathLexer3.mod();
      Token token14 = xPathLexer1.rightParen();
      assertEquals(2, token14.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token15 = xPathLexer2.at();
      assertEquals(16, token15.getTokenType());
      
      Token token16 = xPathLexer4.notEquals();
      assertEquals(22, token16.getTokenType());
      
      Token token17 = xPathLexer1.rightBracket();
      assertEquals(4, token17.getTokenType());
      
      Token token18 = xPathLexer5.pipe();
      assertEquals(17, token18.getTokenType());
      
      Token token19 = xPathLexer0.comma();
      assertEquals(32, token19.getTokenType());
      assertEquals("}", token19.getTokenText());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.6661343331558909
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("W&l6X)LC(");
      Token token0 = xPathLexer0.at();
      assertEquals("W", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.star();
      assertEquals("&", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("l6X", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer2.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer1.leftParen();
      XPathLexer xPathLexer4 = new XPathLexer(") (");
      Token token5 = xPathLexer4.colon();
      assertEquals(")", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer1.leftParen();
      assertEquals(1, token6.getTokenType());
      
      Token token7 = xPathLexer3.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals(")", token8.getTokenText());
      assertEquals(2, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token9 = xPathLexer1.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer4.pipe();
      assertEquals(" ", token10.getTokenText());
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer3.notEquals();
      assertEquals(22, token11.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token12 = xPathLexer4.doubleColon();
      assertEquals(19, token12.getTokenType());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.1413970468280663
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals("I", token0.getTokenText());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("$uM-!D6[)sQBCA");
      Token token1 = xPathLexer1.at();
      assertEquals("$", token1.getTokenText());
      
      Token token2 = xPathLexer1.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("u", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("$uM-!D6[)sQBCA");
      xPathLexer2.or();
      Token token3 = xPathLexer2.star();
      assertEquals("$", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      xPathLexer1.leftBracket();
      Token token4 = xPathLexer1.notEquals();
      assertEquals("-!", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      xPathLexer1.not();
      Token token5 = xPathLexer1.number();
      assertEquals("6", token5.getTokenText());
      
      Token token6 = xPathLexer2.rightBracket();
      assertEquals("u", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.mod();
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.currentPosition();
      Token token10 = xPathLexer1.identifierOrOperatorName();
      assertEquals("", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer3.minus();
      assertEquals(6, token11.getTokenType());
      
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.dollar();
      Token token12 = xPathLexer1.slashes();
      assertEquals(")", token12.getTokenText());
      
      xPathLexer0.and();
      XPathLexer xPathLexer6 = new XPathLexer("$uM-!D6[)sQBCA");
      Token token13 = xPathLexer6.number();
      assertEquals(30, token13.getTokenType());
      
      Token token14 = xPathLexer4.dollar();
      assertEquals(26, token14.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("IoxUAAO&~U#");
      XPathLexer xPathLexer8 = new XPathLexer(") (");
      Token token15 = xPathLexer8.leftParen();
      assertEquals(")", token15.getTokenText());
      assertEquals(1, token15.getTokenType());
      
      Token token16 = xPathLexer3.at();
      assertEquals(16, token16.getTokenType());
      
      Token token17 = xPathLexer3.slashes();
      assertEquals(11, token17.getTokenType());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.894089417897583
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("EK#]$5:x|Tk5F");
      xPathLexer0.slashes();
      xPathLexer0.not();
      xPathLexer0.star();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.number();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.slashes();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-593));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.068663194070499
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token0 = xPathLexer0.equals();
      xPathLexer1.identifier();
      xPathLexer2.comma();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.identifierOrOperatorName();
      xPathLexer3.slashes();
      xPathLexer2.rightBracket();
      xPathLexer2.identifier();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.colon();
      xPathLexer4.leftParen();
      xPathLexer2.dots();
      xPathLexer3.colon();
      xPathLexer2.star();
      xPathLexer2.nextToken();
      xPathLexer5.mod();
      xPathLexer4.rightParen();
      XPathLexer xPathLexer6 = new XPathLexer("y$uM-!D6[)sQBCA");
      xPathLexer0.at();
      xPathLexer6.notEquals();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.doubleColon();
      xPathLexer2.identifier();
      xPathLexer1.getPreviousToken();
      Token token1 = xPathLexer5.comma();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.09125973917804
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer0.plus();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer("=++FRVYH`y#|?}");
      xPathLexer0.or();
      xPathLexer0.identifier();
      xPathLexer0.star();
      xPathLexer2.leftBracket();
      xPathLexer2.not();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.number();
      xPathLexer1.rightBracket();
      xPathLexer0.not();
      xPathLexer1.relationalOperator();
      xPathLexer3.rightBracket();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token0 = xPathLexer2.pipe();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.leftParen();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.dots();
      xPathLexer3.colon();
      xPathLexer5.star();
      xPathLexer3.nextToken();
      xPathLexer6.mod();
      xPathLexer6.slashes();
      xPathLexer1.colon();
      xPathLexer0.equals();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token1 = xPathLexer1.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.7900073731439456
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals("I", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token1 = xPathLexer1.minus();
      assertEquals("y", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("y$uM-!D6[)sQBCA");
      xPathLexer0.equals();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("xU", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(26, token3.getTokenType());
      assertEquals("$", token3.getTokenText());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer3.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer2.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("y", token5.getTokenText());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals("AA", token6.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token7 = xPathLexer3.colon();
      assertEquals(18, token7.getTokenType());
      
      xPathLexer4.leftParen();
      xPathLexer2.dots();
      Token token8 = xPathLexer5.equals();
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftParen();
      assertEquals(1, token9.getTokenType());
      
      Token token10 = xPathLexer1.dots();
      assertEquals(13, token10.getTokenType());
      assertEquals("u", token10.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("pv<{>,ZM )Kr?gN.)");
      xPathLexer0.relationalOperator();
      Token token11 = xPathLexer0.nextToken();
      assertEquals("&~U#", token11.getTokenText());
      
      Token token12 = xPathLexer4.rightParen();
      assertEquals(2, token12.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("pv<{>,ZM )Kr?gN.)");
      Token token13 = xPathLexer4.at();
      assertEquals(16, token13.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token14 = xPathLexer4.notEquals();
      assertEquals(22, token14.getTokenType());
      
      Token token15 = xPathLexer5.minus();
      assertEquals(6, token15.getTokenType());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.5422281851226725
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer0.not();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      xPathLexer1.leftParen();
      xPathLexer0.pipe();
      xPathLexer0.dots();
      xPathLexer1.at();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      xPathLexer2.slashes();
      xPathLexer1.and();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.9681457970565055
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("IoxUAO&~U#");
      Token token0 = xPathLexer1.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("I", token0.getTokenText());
      
      Token token1 = xPathLexer1.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer1.star();
      assertEquals("&", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer1.dollar();
      assertEquals("~", token3.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer1.slashes();
      assertEquals("U", token5.getTokenText());
      
      Token token6 = xPathLexer1.notEquals();
      assertEquals(22, token6.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("ZB78oZsy]");
      XPathLexer xPathLexer3 = new XPathLexer("5ZHG9qaj");
      Token token7 = xPathLexer3.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals("5", token7.getTokenText());
      
      Token token8 = xPathLexer1.plus();
      assertEquals(5, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("::37k");
      Token token9 = xPathLexer2.comma();
      assertEquals("Z", token9.getTokenText());
      
      Token token10 = xPathLexer4.leftParen();
      assertEquals(":", token10.getTokenText());
      
      Token token11 = xPathLexer2.nextToken();
      assertEquals("B78oZsy", token11.getTokenText());
      
      Token token12 = xPathLexer0.slashes();
      assertEquals(11, token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.and();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token13 = xPathLexer5.doubleColon();
      assertEquals(19, token13.getTokenType());
      
      Token token14 = xPathLexer6.rightBracket();
      assertEquals(4, token14.getTokenType());
      
      Token token15 = xPathLexer3.minus();
      assertEquals("Z", token15.getTokenText());
      assertEquals(6, token15.getTokenType());
      
      Token token16 = xPathLexer1.comma();
      assertEquals(32, token16.getTokenType());
      
      xPathLexer6.pipe();
      Token token17 = xPathLexer1.pipe();
      assertEquals(17, token17.getTokenType());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.4047904842556407
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.setXPath("<I:;ib8");
      xPathLexer0.not();
      xPathLexer0.notEquals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.literal();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.consume((-2964));
      xPathLexer0.plus();
      xPathLexer0.minus();
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.802315565968886
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("c", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer1.equals();
      xPathLexer1.doubleColon();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("om.werken.saxpath.XPathLexer", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token2 = xPathLexer1.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      xPathLexer3.leftParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      xPathLexer2.leftParen();
      Token token5 = xPathLexer1.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer4.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer3.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer3.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.mod();
      Token token10 = xPathLexer2.rightParen();
      assertEquals(2, token10.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("kH/;]<*\fPGqS9@;Ps7");
      Token token11 = xPathLexer1.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer4.doubleColon();
      assertEquals(19, token12.getTokenType());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.9427455347842268
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals("I", token0.getTokenText());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token1 = xPathLexer1.at();
      assertEquals("y", token1.getTokenText());
      
      Token token2 = xPathLexer1.plus();
      assertEquals(5, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("o.\"qs5ag$Mk_?");
      xPathLexer1.or();
      Token token3 = xPathLexer0.star();
      assertEquals("x", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer2.leftBracket();
      assertEquals("o", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer3.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer2.number();
      assertEquals(31, token6.getTokenType());
      
      xPathLexer2.rightBracket();
      Token token7 = xPathLexer2.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token8 = xPathLexer0.rightBracket();
      assertEquals("U", token8.getTokenText());
      assertEquals(4, token8.getTokenType());
      
      Token token9 = xPathLexer1.leftParen();
      assertEquals("u", token9.getTokenText());
      
      xPathLexer3.pipe();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.leftParen();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer2.rightParen();
      assertEquals("s", token10.getTokenText());
      assertEquals(2, token10.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("o.\"qs5ag$Mk_?");
      Token token11 = xPathLexer7.colon();
      assertEquals("o", token11.getTokenText());
      assertEquals(18, token11.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("o.\"qs5ag$Mk_?");
      Token token12 = xPathLexer8.dollar();
      assertEquals("o", token12.getTokenText());
      assertEquals(26, token12.getTokenType());
      
      xPathLexer3.leftParen();
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token13 = xPathLexer9.at();
      assertEquals(16, token13.getTokenType());
      
      Token token14 = xPathLexer8.literal();
      assertNull(token14);
      
      XPathLexer xPathLexer10 = new XPathLexer("IoxUAAO&~U#");
      Token token15 = xPathLexer10.pipe();
      assertEquals("I", token15.getTokenText());
      assertEquals(17, token15.getTokenType());
      
      xPathLexer6.relationalOperator();
      Token token16 = xPathLexer2.slashes();
      assertEquals("5", token16.getTokenText());
      
      Token token17 = xPathLexer9.slashes();
      assertEquals(11, token17.getTokenType());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.864171820848978
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals("I", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("o", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token2 = xPathLexer1.at();
      assertEquals("y", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token3 = xPathLexer0.equals();
      assertEquals("x", token3.getTokenText());
      
      xPathLexer0.doubleColon();
      xPathLexer1.nextToken();
      xPathLexer0.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.slashes();
      Token token4 = xPathLexer2.rightBracket();
      assertEquals("y", token4.getTokenText());
      
      xPathLexer3.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.colon();
      xPathLexer4.leftParen();
      Token token5 = xPathLexer2.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer5.equals();
      assertEquals(21, token6.getTokenType());
      
      xPathLexer3.colon();
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer2.nextToken();
      assertEquals("uM-", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer5.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer2.dollar();
      assertEquals("!", token10.getTokenText());
      assertEquals(26, token10.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token11 = xPathLexer0.doubleColon();
      assertEquals("O&", token11.getTokenText());
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer3.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer3.comma();
      assertEquals(32, token13.getTokenType());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.2269454381259775
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      xPathLexer0.or();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftBracket();
      xPathLexer1.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer2.rightBracket();
      xPathLexer1.not();
      xPathLexer0.colon();
      XPathLexer xPathLexer3 = new XPathLexer("'K yUnn/8V4;}F");
      XPathLexer xPathLexer4 = new XPathLexer("z,");
      xPathLexer4.and();
      xPathLexer3.doubleColon();
      XPathLexer xPathLexer5 = new XPathLexer("z,");
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.dots();
      XPathLexer xPathLexer7 = new XPathLexer("Z+sgh\"p3:D");
      xPathLexer2.colon();
      XPathLexer xPathLexer8 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer6.dollar();
      xPathLexer8.leftParen();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer5.slashes();
      XPathLexer xPathLexer10 = new XPathLexer("");
      xPathLexer4.pipe();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.7061822230115276
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.comma();
      xPathLexer0.or();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("k8");
      xPathLexer1.setXPath("C!=jmKlN&y}1J");
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer1.slashes();
      assertEquals("C", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer2.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      xPathLexer3.leftParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.colon();
      xPathLexer2.leftParen();
      Token token8 = xPathLexer2.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer4.equals();
      assertEquals(21, token9.getTokenType());
      
      xPathLexer1.colon();
      Token token10 = xPathLexer2.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer0.nextToken();
      Token token11 = xPathLexer4.pipe();
      assertEquals(17, token11.getTokenType());
      
      Token token12 = xPathLexer1.dollar();
      assertEquals("j", token12.getTokenText());
      assertEquals(26, token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("k8");
      Token token13 = xPathLexer3.doubleColon();
      assertEquals(19, token13.getTokenType());
      
      Token token14 = xPathLexer4.colon();
      assertEquals(18, token14.getTokenType());
      
      Token token15 = xPathLexer1.comma();
      assertEquals(32, token15.getTokenType());
      assertEquals("m", token15.getTokenText());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.978150741388939
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("W&l6X)LC(");
      Token token0 = xPathLexer0.minus();
      assertEquals("W", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("W&l6X)LC(");
      Token token1 = xPathLexer1.at();
      assertEquals("W", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("l", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      xPathLexer1.or();
      xPathLexer2.identifier();
      Token token3 = xPathLexer2.star();
      assertEquals(")", token3.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.rightParen();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token4 = xPathLexer4.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer4.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer3.leftParen();
      XPathLexer xPathLexer6 = new XPathLexer(") (");
      Token token6 = xPathLexer6.colon();
      assertEquals(")", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      xPathLexer3.leftParen();
      Token token7 = xPathLexer0.dots();
      assertEquals("6", token7.getTokenText());
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer5.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer2.nextToken();
      assertEquals(1, token9.getTokenType());
      assertEquals("(", token9.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer(") (");
      xPathLexer7.mod();
      Token token10 = xPathLexer7.rightParen();
      assertEquals(2, token10.getTokenType());
      assertEquals(")", token10.getTokenText());
      
      Token token11 = xPathLexer3.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer6.pipe();
      assertEquals(" ", token12.getTokenText());
      assertEquals(17, token12.getTokenType());
      
      Token token13 = xPathLexer7.notEquals();
      assertEquals(22, token13.getTokenType());
      assertEquals(" (", token13.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token14 = xPathLexer6.doubleColon();
      assertEquals(19, token14.getTokenType());
      
      xPathLexer4.leftParen();
      Token token15 = xPathLexer6.slashes();
      assertEquals(11, token15.getTokenType());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.9547713931890278
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      Token token0 = xPathLexer0.not();
      assertEquals("'", token0.getTokenText());
      
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
      
      xPathLexer0.plus();
      xPathLexer0.or();
      Token token2 = xPathLexer0.star();
      assertEquals("U", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("n", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.not();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      assertEquals(";", token7.getTokenText());
      
      Token token8 = xPathLexer0.leftParen();
      assertEquals("}", token8.getTokenText());
      assertEquals(1, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals("F", token9.getTokenText());
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("MGi+Alg_h'");
      Token token12 = xPathLexer1.slashes();
      assertEquals("M", token12.getTokenText());
      assertEquals(11, token12.getTokenType());
      
      Token token13 = xPathLexer1.dollar();
      assertEquals("G", token13.getTokenText());
      assertEquals(26, token13.getTokenType());
      
      xPathLexer1.isIdentifierStartChar('*');
      Token token14 = xPathLexer1.plus();
      assertEquals(5, token14.getTokenType());
      assertEquals("i", token14.getTokenText());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.7348862246943264
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      Token token0 = xPathLexer0.slashes();
      assertEquals("'", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      Token token2 = xPathLexer0.pipe();
      xPathLexer0.plus();
      Token token3 = xPathLexer0.notEquals();
      String string0 = token1.toString();
      assertEquals("[ (1) (K)", string0);
      
      Token token4 = xPathLexer0.rightParen();
      String string1 = token4.toString();
      assertEquals("[ (2) (n)", string1);
      
      String string2 = token3.toString();
      assertEquals("[ (22) (Un)", string2);
      
      xPathLexer0.isIdentifierChar('X');
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(" ", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals("/", token6.getTokenText());
      
      xPathLexer0.and();
      Token token7 = xPathLexer0.at();
      assertEquals("8", token7.getTokenText());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer1.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer1.plus();
      assertEquals(5, token11.getTokenType());
      
      Token token12 = xPathLexer0.leftBracket();
      assertEquals(3, token12.getTokenType());
      assertEquals("V", token12.getTokenText());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierChar('\'');
      assertFalse(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.853435716490984
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals("I", token0.getTokenText());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      Token token1 = xPathLexer0.equals();
      assertEquals("x", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer1.star();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("U", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer1.not();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("A", token4.getTokenText());
      
      xPathLexer1.not();
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("A", token5.getTokenText());
      
      xPathLexer0.leftParen();
      Token token6 = xPathLexer0.at();
      assertEquals("&", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer0.leftParen();
      assertEquals("~", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.consume(21);
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      assertEquals("U", token8.getTokenText());
      
      Token token9 = xPathLexer0.colon();
      assertEquals("#", token9.getTokenText());
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer1.plus();
      assertEquals(5, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("::37k");
      Token token11 = xPathLexer4.nextToken();
      assertEquals("::", token11.getTokenText());
      
      Token token12 = xPathLexer0.slashes();
      assertEquals(11, token12.getTokenType());
      
      xPathLexer1.and();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token13 = xPathLexer2.at();
      assertEquals(16, token13.getTokenType());
      
      Token token14 = xPathLexer0.notEquals();
      assertEquals(22, token14.getTokenType());
      
      Token token15 = xPathLexer5.rightBracket();
      assertEquals(4, token15.getTokenType());
      
      Token token16 = xPathLexer2.pipe();
      assertEquals(17, token16.getTokenType());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.1150418158058693
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals("I", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("XVF&ojrlBb%zI%7h|'");
      xPathLexer1.rightParen();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("&", token3.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("~U#", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.slashes();
      Token token5 = xPathLexer2.notEquals();
      assertEquals(22, token5.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.plus();
      XPathLexer xPathLexer4 = new XPathLexer("A");
      Token token6 = xPathLexer4.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("A", token6.getTokenText());
      
      Token token7 = xPathLexer3.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer4.and();
      Token token8 = xPathLexer1.rightParen();
      assertEquals(2, token8.getTokenType());
      assertEquals("o", token8.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("FTI}>2a_5Lp");
      Token token9 = xPathLexer2.dollar();
      assertEquals(26, token9.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("XVF&ojrlBb%zI%7h|'");
      Token token10 = xPathLexer0.leftParen();
      assertEquals("U", token10.getTokenText());
      assertEquals(1, token10.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token11 = xPathLexer8.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer1.slashes();
      assertEquals(11, token12.getTokenType());
      assertEquals("j", token12.getTokenText());
      
      Token token13 = xPathLexer0.minus();
      assertEquals("#", token13.getTokenText());
      assertEquals(6, token13.getTokenType());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.8821607583274338
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals("I", token0.getTokenText());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("x", token1.getTokenText());
      
      xPathLexer1.or();
      xPathLexer1.star();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("U", token2.getTokenText());
      
      xPathLexer1.not();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("A", token4.getTokenText());
      
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("A", token6.getTokenText());
      
      xPathLexer0.leftParen();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer0.leftParen();
      assertEquals("~", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      assertEquals("U", token9.getTokenText());
      
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer1.plus();
      assertEquals(5, token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("::37k");
      Token token12 = xPathLexer4.nextToken();
      assertEquals(19, token12.getTokenType());
      assertEquals("::", token12.getTokenText());
      
      Token token13 = xPathLexer0.slashes();
      assertEquals(11, token13.getTokenType());
      
      xPathLexer1.and();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer4.doubleColon();
      xPathLexer1.rightBracket();
      Token token14 = xPathLexer4.minus();
      assertEquals(6, token14.getTokenType());
      
      Token token15 = xPathLexer5.comma();
      assertEquals(32, token15.getTokenType());
      
      xPathLexer3.pipe();
      Token token16 = xPathLexer1.pipe();
      assertEquals(17, token16.getTokenType());
      
      char char0 = xPathLexer1.LA(29);
      assertEquals('\uFFFF', char0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('F');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.081122930636754
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x}Pk%FS7F_H}Lq9");
      xPathLexer0.and();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("x", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("}", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("Pk", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("FS7F_H}Lq9", token4.getTokenText());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals("F", token5.getTokenText());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("S7", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer3.star();
      assertEquals(20, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.plus();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token8 = xPathLexer5.equals();
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer3.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      
      xPathLexer3.relationalOperator();
      Token token10 = xPathLexer3.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer0.colon();
      assertEquals("F", token11.getTokenText());
      
      Token token12 = xPathLexer1.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer2.plus();
      assertEquals(5, token13.getTokenType());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.081596423930044
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer1.at();
      assertEquals("I", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer1.plus();
      assertEquals("o", token1.getTokenText());
      
      xPathLexer1.or();
      xPathLexer1.star();
      Token token2 = xPathLexer1.leftBracket();
      assertEquals("U", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer1.not();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer1.rightBracket();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("o", token4.getTokenText());
      
      xPathLexer1.relationalOperator();
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer1.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("O", token5.getTokenText());
      
      xPathLexer1.leftParen();
      Token token6 = xPathLexer1.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("~", token6.getTokenText());
      
      xPathLexer1.leftParen();
      Token token7 = xPathLexer1.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      assertEquals("x", token8.getTokenText());
      
      Token token9 = xPathLexer0.star();
      assertEquals("U", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer1.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      xPathLexer1.slashes();
      XPathLexer xPathLexer2 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer0.currentPosition();
      Token token11 = xPathLexer1.plus();
      assertEquals(5, token11.getTokenType());
      
      Token token12 = xPathLexer0.equals();
      assertEquals(21, token12.getTokenType());
      assertEquals("A", token12.getTokenText());
      
      Token token13 = xPathLexer1.rightParen();
      assertEquals(2, token13.getTokenType());
      
      Token token14 = xPathLexer2.identifierOrOperatorName();
      assertEquals("IoxUAAO", token14.getTokenText());
      assertEquals(15, token14.getTokenType());
      assertNotNull(token14);
      
      xPathLexer2.or();
      Token token15 = xPathLexer0.notEquals();
      assertEquals(22, token15.getTokenType());
      assertEquals("AO", token15.getTokenText());
      
      Token token16 = xPathLexer0.doubleColon();
      assertEquals(19, token16.getTokenType());
      assertEquals("&~", token16.getTokenText());
      
      Token token17 = xPathLexer1.leftParen();
      assertEquals(1, token17.getTokenType());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.117986700204553
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer0.not();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("o.\"qs5ag$Mk_?");
      xPathLexer0.or();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.leftBracket();
      xPathLexer0.not();
      xPathLexer1.number();
      xPathLexer1.rightBracket();
      xPathLexer1.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.leftParen();
      xPathLexer2.pipe();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.dots();
      XPathLexer xPathLexer6 = new XPathLexer("o.\"qs5ag$Mk_?");
      xPathLexer6.colon();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.dollar();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.at();
      xPathLexer0.slashes();
      XPathLexer xPathLexer9 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer9.pipe();
      xPathLexer5.relationalOperator();
      xPathLexer5.dollar();
      xPathLexer5.leftBracket();
      xPathLexer4.and();
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.5095039657669482
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals("I", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("o", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token2 = xPathLexer1.at();
      assertEquals("y", token2.getTokenText());
      
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token3 = xPathLexer1.identifier();
      assertEquals("uM-", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer1.slashes();
      Token token5 = xPathLexer0.notEquals();
      assertEquals("AA", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer2.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("y", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("|>zAx59");
      xPathLexer2.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      Token token7 = xPathLexer2.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals("$", token7.getTokenText());
      
      Token token8 = xPathLexer3.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      assertNotNull(token8);
      
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      assertEquals("&", token9.getTokenText());
      
      Token token10 = xPathLexer0.colon();
      assertEquals("~", token10.getTokenText());
      assertEquals(18, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer4.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer0.plus();
      assertEquals(5, token12.getTokenType());
      assertEquals("U", token12.getTokenText());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      char char0 = xPathLexer0.LA(8);
      assertEquals('k', char0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.7602406057198183
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("p0)Nc^");
      Token token0 = xPathLexer0.colon();
      assertEquals("p", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("0", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(")", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.2574934807928213
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("QW|");
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.equals();
      xPathLexer0.rightParen();
      xPathLexer0.at();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.0691290177471156
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals("I", token0.getTokenText());
      
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.at();
      assertEquals("x", token1.getTokenText());
      
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("o.\"qs5ag$Mk_?");
      xPathLexer0.or();
      Token token2 = xPathLexer0.star();
      assertEquals("A", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer1.leftBracket();
      assertEquals("o", token3.getTokenText());
      
      xPathLexer0.not();
      Token token4 = xPathLexer1.number();
      assertEquals(31, token4.getTokenType());
      assertEquals(".", token4.getTokenText());
      
      xPathLexer1.rightBracket();
      Token token5 = xPathLexer1.not();
      assertEquals("q", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      assertEquals("O", token6.getTokenText());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals("&", token7.getTokenText());
      
      xPathLexer2.pipe();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.div();
      xPathLexer4.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer1.dots();
      assertEquals("s", token8.getTokenText());
      assertEquals(13, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("o.\"qs5ag$Mk_?");
      Token token9 = xPathLexer6.colon();
      assertEquals(18, token9.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.dollar();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token10 = xPathLexer8.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer0.slashes();
      assertEquals(11, token11.getTokenType());
      assertEquals("~", token11.getTokenText());
      
      XPathLexer xPathLexer9 = new XPathLexer("IoxUAAO&~U#");
      Token token12 = xPathLexer9.pipe();
      assertEquals("I", token12.getTokenText());
      assertEquals(17, token12.getTokenType());
      
      xPathLexer5.relationalOperator();
      Token token13 = xPathLexer5.dollar();
      assertEquals(26, token13.getTokenType());
      
      Token token14 = xPathLexer5.leftBracket();
      assertEquals(3, token14.getTokenType());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.1119214619762476
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer0.not();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("o.\"qs5ag$Mk_?");
      xPathLexer1.pipe();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.leftBracket();
      xPathLexer0.not();
      xPathLexer2.minus();
      xPathLexer1.number();
      xPathLexer1.rightBracket();
      xPathLexer1.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer2.pipe();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer("o.\"qs5ag$Mk_?");
      xPathLexer1.dots();
      XPathLexer xPathLexer6 = new XPathLexer("o.\"qs5ag$Mk_?");
      xPathLexer6.consume();
      xPathLexer6.colon();
      XPathLexer xPathLexer7 = new XPathLexer("o.\"qs5ag$Mk_?");
      xPathLexer7.dollar();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.at();
      xPathLexer0.slashes();
      XPathLexer xPathLexer9 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer9.pipe();
      xPathLexer5.relationalOperator();
      Token token1 = xPathLexer4.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.98491345329859
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#dl*vv!`v");
      XPathLexer xPathLexer1 = new XPathLexer("#dl*vv!`v");
      Token token0 = xPathLexer1.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("#", token0.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.setPreviousToken((Token) null);
      Token token1 = xPathLexer0.dots();
      assertEquals("#", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("d", token2.getTokenText());
      
      xPathLexer1.getXPath();
      xPathLexer0.equals();
      xPathLexer1.operatorName();
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer1.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("d", token3.getTokenText());
      
      Token token4 = xPathLexer1.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals("v", token5.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer4.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer3.leftParen();
      xPathLexer0.dots();
      xPathLexer1.equals();
      xPathLexer2.leftParen();
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("pv<{>,ZM )Kr?gN.)");
      xPathLexer1.relationalOperator();
      Token token8 = xPathLexer3.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals("`", token9.getTokenText());
      assertEquals(2, token9.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      assertEquals("v", token10.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer5.minus();
      assertEquals("p", token12.getTokenText());
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer3.number();
      assertEquals(30, token13.getTokenType());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.70219378279006
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2Af#.CdO~");
      xPathLexer0.dots();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer1.getXPath();
      xPathLexer0.equals();
      xPathLexer0.operatorName();
      xPathLexer0.dots();
      xPathLexer1.plus();
      xPathLexer1.currentPosition();
      xPathLexer1.or();
      xPathLexer0.dots();
      xPathLexer0.comma();
      xPathLexer0.comma();
      xPathLexer1.not();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.leftParen();
      xPathLexer1.colon();
      xPathLexer1.notEquals();
      xPathLexer1.dots();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.slashes();
      Token token0 = xPathLexer2.and();
      assertNull(token0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.not();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.6035670756752602
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer0.not();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      xPathLexer1.at();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer("o.\"qs5ag$Mk_?");
      xPathLexer1.or();
      xPathLexer0.star();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.leftBracket();
      xPathLexer1.not();
      xPathLexer1.dollar();
      xPathLexer2.relationalOperator();
      xPathLexer2.nextToken();
      xPathLexer1.plus();
      xPathLexer3.slashes();
      xPathLexer1.equals();
      xPathLexer3.nextToken();
      xPathLexer1.slashes();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.and();
      xPathLexer4.at();
      xPathLexer2.comma();
      xPathLexer4.dots();
      xPathLexer0.leftParen();
      xPathLexer3.dollar();
      xPathLexer1.minus();
      xPathLexer2.comma();
      xPathLexer1.pipe();
      xPathLexer4.pipe();
      Token token0 = xPathLexer2.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.8051714528693814
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.not();
      assertEquals("I", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token1 = xPathLexer0.equals();
      assertEquals("x", token1.getTokenText());
      
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer1.nextToken();
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token3 = xPathLexer3.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer2.rightBracket();
      assertEquals("y", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      xPathLexer3.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.colon();
      xPathLexer4.leftParen();
      Token token5 = xPathLexer2.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer5.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer3.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      assertEquals("A", token8.getTokenText());
      
      Token token9 = xPathLexer2.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("uM-", token9.getTokenText());
      
      xPathLexer5.mod();
      Token token10 = xPathLexer4.rightParen();
      assertEquals(2, token10.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("y$uM-!D6[)sQBCA");
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
      assertEquals("O", token11.getTokenText());
      
      Token token12 = xPathLexer0.doubleColon();
      assertEquals(19, token12.getTokenType());
      assertEquals("&~", token12.getTokenText());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.040223288649532
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      xPathLexer0.not();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("y$uM-!D6[)sQBCA");
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer("y$uM-!D6[)sQBCA");
      xPathLexer0.equals();
      xPathLexer0.doubleColon();
      xPathLexer1.nextToken();
      xPathLexer0.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.slashes();
      xPathLexer2.rightBracket();
      xPathLexer4.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.colon();
      xPathLexer2.leftParen();
      xPathLexer4.dots();
      xPathLexer4.equals();
      xPathLexer4.colon();
      xPathLexer3.star();
      xPathLexer1.nextToken();
      xPathLexer1.pipe();
      xPathLexer0.dollar();
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.3938956877680435
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.minus();
      Token token0 = xPathLexer0.comma();
      assertEquals("o", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("m", token1.getTokenText());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("werken.saxpath.XPathLexer", token3.getTokenText());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      xPathLexer0.equals();
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      assertNotNull(token6);
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.9503748217465766
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Uhu`~<|Oc>m)IA1q;E");
      Token token0 = xPathLexer0.dollar();
      assertEquals("U", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("h", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("u", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("`", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("~", token4.getTokenText());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.1691796640526873
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.or();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (-2) ()", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.9772143420956936
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~C|aKW\u0007'z\"gkd=q");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("~", token0.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.and();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("C", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals("|", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("a", token3.getTokenText());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.4389111485813353
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.minus();
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("o", token1.getTokenText());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals(".", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals("werken.saxpath.XPathLexer", token4.getTokenText());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token7);
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer0.plus();
      assertEquals(5, token11.getTokenType());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.405198950492242
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L \"VLW=+");
      xPathLexer0.minus();
      Token token0 = xPathLexer0.plus();
      assertEquals(" ", token0.getTokenText());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("\"", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("V", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("LW", token3.getTokenText());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals("=", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token5 = xPathLexer0.equals();
      assertEquals("+", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token6);
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
  }
}
