/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 03:41:48 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8946551978436226
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isreplaceAll", 0L);
      jSONObject1.remove("isreplaceAll");
      Long long0 = new Long(0L);
      JSONObject jSONObject2 = jSONObject1.put("-G0#hNfF*h", false);
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      jSONObject2.put("isreplaceAll", (Map) hashMap0);
      jSONObject0.optInt("isreplaceAll", 47);
      jSONObject0.toString(47, (-213));
      jSONObject1.optJSONArray("fo");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("fo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of fo
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4218727188171356
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4_?A0 ##pwAy3", 0L);
      String string0 = "\\u";
      jSONObject1.optLong(string0);
      jSONObject1.optLong("NuYl key.", 0L);
      Double double0 = new Double((-312.0));
      Double double1 = new Double(0L);
      Double.min(0L, (-418.1245231));
      JSONObject.getNames((Object) double0);
      JSONObject jSONObject2 = jSONObject1.putOpt(",\n", jSONObject0);
      jSONObject2.optDouble("4_?A0 ##pwAy3");
      Double double2 = new Double(4171.404197);
      JSONObject.quote(",\n");
      Float float0 = new Float(0.0F);
      try { 
        jSONObject0.get("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4111628623122843
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      Short short0 = new Short((short)2);
      linkedList2.add(short0);
      linkedList2.parallelStream();
      linkedList0.containsAll(linkedList2);
      Short short1 = new Short((short) (-3180));
      Short short2 = new Short((short) (-3180));
      Short.toUnsignedInt((short) (-3180));
      linkedList2.offerFirst(short2);
      linkedList0.add(short1);
      linkedList2.offerFirst(short2);
      linkedList2.iterator();
      linkedList1.addAll((Collection<? extends Short>) linkedList2);
      StringWriter stringWriter0 = new StringWriter((short)2);
      JSONObject.valueToString(linkedList1, (-122), (short) (-3180));
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "[\njava.lang.Short@0000000002,\njava.lang.Short@0000000002,\njava.lang.Short@0000000003\n]", 34, 34);
      stringWriter1.append((CharSequence) "[\njava.lang.Short@0000000002,\njava.lang.Short@0000000002,\njava.lang.Short@0000000003\n]");
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      jSONObject0.optBoolean((String) null);
      String string1 = "fo";
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1134202517557954
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      Short short0 = new Short((short) (-2820));
      Short.compare((short) (-2820), (short) (-2820));
      linkedList1.add(short0);
      LinkedList<JSONArray> linkedList2 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList3 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("istoUpperCase", (Collection) linkedList3);
      Short.compare((short) (-2820), (short) (-2820));
      Byte byte0 = new Byte((byte) (-111));
      JSONObject jSONObject2 = jSONObject0.append(": ", byte0);
      jSONObject2.optJSONArray(": ");
      jSONObject2.optLong("", (long) 0);
      jSONObject1.put("sOq;zIt.Usb['yi_Wi", (-60523018));
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("istoUpperCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of istoUpperCase
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.718560411189189
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isreplaceAll", 0L);
      Long long0 = new Long(0L);
      JSONObject jSONObject2 = jSONObject1.put("-G0#hNfF*h", false);
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      hashMap0.put((String) null, jSONObject0);
      jSONObject2.put("isreplaceAll", (Map) hashMap0);
      jSONObject0.optInt("isreplaceAll", 47);
      // Undeclared exception!
      try { 
        jSONObject0.toString(47, (-213));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.718068714872836
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isreplaceAll", 0L);
      String string0 = "-G0#hNfF*h";
      Long long0 = new Long(0L);
      JSONObject jSONObject2 = jSONObject1.put("-G0#hNfF*h", false);
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      hashMap0.put("\"mzMs/6`Y3?SHuE%r", jSONObject0);
      jSONObject2.put("isreplaceAll", (Map) hashMap0);
      jSONObject0.optInt("isreplaceAll", 47);
      // Undeclared exception!
      jSONObject0.toString(47, (-213));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5170297238790513
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      Short.toUnsignedLong((short)6);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(104);
      CharBuffer.allocate(4);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-JK4o:";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("qmz>0O~");
      jSONObject0.optJSONArray("qmz>0O~");
      Byte byte0 = new Byte((byte)44);
      JSONObject jSONObject2 = jSONObject1.put("-JK4o:", (Object) byte0);
      Object object0 = new Object();
      JSONObject jSONObject3 = jSONObject1.putOpt("-JK4o:", "~NcL)2jr7esMOzC8V]");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject2.putOpt("3m)Cam6$\"W8;m", jSONArray0);
      try { 
        jSONObject3.getBoolean("-JK4o:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-JK4o:\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.626474976936421
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      Short short0 = new Short((short) (-2820));
      Short.compare((short) (-2820), (short) (-2820));
      linkedList1.add(short0);
      LinkedList<JSONArray> linkedList2 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      JSONObject jSONObject1 = jSONObject0.accumulate("val", short0);
      JSONObject jSONObject2 = jSONObject1.put("qG:L5flgdWqqqYJ!", true);
      jSONObject2.optBoolean("qG:L5flgdWqqqYJ!");
      JSONObject.getNames(jSONObject0);
      Short short1 = new Short((short) (-1315));
      try { 
        jSONObject1.getBoolean("val");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"val\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3423314221824505
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4_?A0 ##pwAy3", (-43L));
      jSONObject0.optLong("4_?A0 ##pwAy3");
      jSONObject1.optLong("NuYl key.", (-43L));
      Double double0 = new Double((-312.0));
      Double double1 = new Double((-43L));
      Double.sum((-43L), (-43L));
      Double.isFinite((-43L));
      Double.min((-43L), (-418.1245231));
      JSONObject.getNames((Object) double0);
      jSONObject1.putOpt(",\n", jSONObject0);
      Double double2 = new Double((-418.1245231));
      JSONObject.quote(",\n");
      Float float0 = new Float(0.0F);
      try { 
        jSONObject0.get("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = true;
      Boolean.valueOf(true);
      String[] stringArray0 = new String[6];
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("</91Qq#", (-603L));
      jSONObject0.getLong("</91Qq#");
      String string0 = "islongValue";
      Long.valueOf((-603L));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8197889022605986
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4_?A0 ##pwAy3", 0L);
      String string0 = "\\u";
      jSONObject1.optLong(string0);
      jSONObject1.optLong("Null key.", 0L);
      Double double0 = new Double((-312.0));
      Double.max(Double.NaN, (-312.0));
      Double.min(0L, (-418.1245231));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject2 = jSONObject1.putOpt(",\n", jSONObject0);
      Double double1 = new Double(4171.404197);
      JSONObject.quote(",\n");
      Float float0 = new Float(0.0F);
      jSONObject2.get("4_?A0 ##pwAy3");
      Float float1 = new Float(0.0);
      JSONObject jSONObject3 = new JSONObject(float1, stringArray0);
      jSONObject3.accumulate("getparseDouble", jSONObject2);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Float float2 = new Float((double) (short) (-1315));
      JSONObject jSONObject4 = new JSONObject(double1);
      jSONObject1.names();
      String string1 = JSONObject.numberToString(double1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.743206732606211
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4_?A0 ##pwAy3", 0L);
      String string0 = "\\u";
      long long0 = jSONObject1.optLong(string0);
      assertEquals(0L, long0);
      
      jSONObject1.optLong("Null key.", 0L);
      Double double0 = new Double((-312.0));
      Double.max(Double.NaN, (-312.0));
      Double.min(0L, (-418.1245231));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      jSONObject1.putOpt(",\n", jSONObject0);
      int int0 = jSONObject1.optInt("Null key.", 25);
      assertEquals(25, int0);
      
      Boolean boolean0 = Boolean.TRUE;
      Short.compare((short) (-1315), (short)46);
      JSONObject jSONObject2 = new JSONObject(boolean0, stringArray0);
      jSONObject2.optJSONArray("] is not a JSONObject.");
      long long1 = jSONObject1.optLong("[]", (-1L));
      assertEquals((-1L), long1);
      
      double double1 = jSONObject0.optDouble("4_?A0 ##pwAy3", (-520.2));
      assertEquals(0.0, double1, 0.01);
      
      int int1 = jSONObject2.optInt("#?&`rT7*N+NU;;");
      assertEquals(1, jSONObject2.length());
      assertEquals(0, int1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.882505283907115
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4_?A0 ##pwAy3", 0L);
      jSONObject0.getLong("4_?A0 ##pwAy3");
      Long long0 = Long.valueOf(0L);
      jSONObject1.getDouble("4_?A0 ##pwAy3");
      JSONObject jSONObject2 = jSONObject1.accumulate("`]A", long0);
      JSONObject jSONObject3 = jSONObject0.put("getdoubleToLongBits", false);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject3.toJSONArray(jSONArray0);
      JSONTokener jSONTokener0 = new JSONTokener("islongValue");
      jSONArray0.toJSONObject((JSONArray) null);
      Object object0 = new Object();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject2.has("getdoubleToLongBits");
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8698482695856518
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<JSONObject, Integer> hashMap1 = new HashMap<JSONObject, Integer>();
      Boolean.logicalAnd(false, false);
      Boolean.compare(false, false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "[/k#i/";
      stringArray0[2] = "]:$!$1xU^$E b4V";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = new JSONObject("", stringArray0);
      JSONObject jSONObject2 = jSONObject1.putOpt("H<PMgX=<Jssf/i\"@Bk", hashMap0);
      Long long0 = new Long((-1822L));
      JSONObject jSONObject3 = jSONObject2.accumulate(";SA", long0);
      jSONObject3.accumulate("", jSONObject0);
      jSONObject2.getJSONObject("");
      jSONObject3.append("ar", hashMap0);
      Object object0 = new Object();
      CharBuffer.allocate(0);
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "}}x\"YVNU";
      JSONTokener jSONTokener0 = new JSONTokener("}}x\"YVNU");
      jSONTokener0.next();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of }}x\"YVNU
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5761635263201197
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      int int0 = 129;
      JSONObject.valueToString("");
      jSONObject0.optJSONObject("");
      String string0 = "ik#^G/TSTZl,Kx";
      Float float0 = new Float(0.0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = new JSONObject("{}");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject2 = jSONObject1.put("ik#^G/TSTZl,Kx", (Collection) linkedList0);
      jSONObject2.getJSONArray("ik#^G/TSTZl,Kx");
      String string1 = "va";
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.756399072647103
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "</91Qq#";
      stringArray0[1] = "bNU2&<]";
      Boolean.logicalAnd(true, false);
      stringArray0[2] = "";
      stringArray0[3] = ".WDM,$";
      stringArray0[4] = "Null key.";
      Boolean.compare(true, false);
      stringArray0[5] = "]:$!$1xU^$E b4V";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("bNU2&<]", "</91Qq#");
      jSONObject1.toString(1, (-615));
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject2 = jSONObject1.accumulate("toL", "{\"java.lang.String@0000000002\": \"java.lang.String@0000000003\"}");
      jSONObject2.accumulate("bNU2&<]", "bNU2&<]");
      Integer integer0 = new Integer(1);
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Null key.", 0, 0);
      stringWriter1.flush();
      jSONObject0.write(stringWriter1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      jSONObject0.put("Null key.", (Collection) linkedList1);
      Boolean boolean1 = Boolean.TRUE;
      jSONObject2.opt("bNU2&<]");
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.612598927607961
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("~ Vp4+]Wd%5Na{iUE");
      JSONObject jSONObject1 = jSONObject0.put("C7", 2L);
      jSONObject0.getLong("C7");
      Long long0 = Long.valueOf(2L);
      jSONObject1.getDouble("C7");
      jSONObject1.accumulate("`]A", long0);
      jSONObject0.put("getdoubleToLongBits", false);
      Short short0 = new Short((short) (-1315));
      jSONObject1.getBoolean("getdoubleToLongBits");
      JSONObject jSONObject2 = jSONObject1.putOpt("islongValue", (Object) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject2.optBoolean("islongValue", false);
      Float.min((short) (-1315), 2L);
      jSONObject0.putOpt("islongValue", jSONObject2);
      assertEquals(4, jSONObject2.length());
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.674450479242588
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[6];
      String string0 = "</91Qq#";
      stringArray0[0] = "</91Qq#";
      stringArray0[1] = "bNU2&]";
      Boolean.logicalAnd(true, false);
      stringArray0[2] = "";
      stringArray0[3] = ".WDM,$";
      stringArray0[4] = "Null key.";
      Boolean.compare(true, false);
      stringArray0[5] = "]:$!$1xU^$E b4V";
      Boolean.compare(false, false);
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("bNU2&]", "</91Qq#");
      JSONObject jSONObject2 = jSONObject1.accumulate("toL", ".WDM,$");
      jSONObject2.accumulate("bNU2&]", "bNU2&]");
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.717542962035551
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4_?A0 ##pwAy3", 0L);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)2);
      Short short1 = new Short((short)112);
      linkedList0.add(short1);
      JSONObject jSONObject2 = jSONObject1.put("_U?na6<L-\"<V@,YU", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject1.names();
      jSONObject0.getJSONArray("_U?na6<L-\"<V@,YU");
      Boolean boolean0 = Boolean.TRUE;
      JSONArray jSONArray1 = jSONObject2.names();
      assertEquals(2, jSONArray1.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.407234285225986
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Boolean.valueOf(true);
      Short short0 = new Short((short)258);
      Short.compare((short)258, (short)258);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short1 = new Short((short) (-2820));
      boolean boolean0 = new Boolean(true);
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject(short0);
      Integer integer0 = new Integer(0);
      jSONObject0.accumulate("val", integer0);
      JSONObject jSONObject1 = jSONObject0.put("val", true);
      Short short2 = new Short((short)258);
      jSONObject0.getBoolean("val");
      String string0 = ",\n";
      Long long0 = new Long(0L);
      jSONObject1.putOpt(",\n", ",\n");
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-966));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.519175080830044
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = "4_?A0 ##pwAy3";
      long long0 = 0L;
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      String string1 = ",\n";
      String string2 = "\\u";
      jSONObject2.optLong(string2);
      JSONObject jSONObject3 = jSONObject2.put(",\n", false);
      jSONObject1.optInt("LE1");
      Integer integer0 = new Integer(47);
      Integer.getInteger("84Tr h'iiEb@Ym$;^", 128);
      jSONObject0.optLong("qu", (long) 47);
      jSONObject3.optInt("84Tr h'iiEb@Ym$;^", 47);
      try { 
        jSONObject1.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7906679823987566
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      Float float0 = new Float((-905.7));
      JSONObject jSONObject3 = jSONObject2.putOpt("", jSONObject1);
      Double double0 = new Double(0.0);
      jSONObject3.getJSONObject("");
      JSONObject jSONObject4 = jSONObject2.append("_BYL}|ZxRs1Wx\"", "Qm5*N TR#s2z7y)t");
      JSONObject jSONObject5 = jSONObject4.optJSONObject("/rbr;HwZhv~");
      assertNull(jSONObject5);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.920156880305893
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "</91Qq#";
      stringArray0[1] = "bNU2&<]";
      Boolean.logicalAnd(true, false);
      stringArray0[2] = "";
      stringArray0[3] = ".WDM,$";
      stringArray0[4] = "Null key.";
      Boolean.compare(true, false);
      stringArray0[5] = "]:$!$1xU^$E b4V";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.toString(1, (-615));
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      stringWriter0.append((CharSequence) "Null key.", 0, 0);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 97, 1);
      try { 
        jSONObject0.getLong("</91Qq#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<\\/91Qq#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.472320274220129
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "</91Qq#";
      stringArray0[1] = "bNU2&<]";
      Boolean.logicalAnd(true, false);
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[4] = "Null key.";
      Boolean.compare(true, false);
      stringArray0[5] = "]:$!$1xU^$E b4V";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("bNU2&<]", "</91Qq#");
      Boolean.logicalOr(true, true);
      jSONObject1.toString(1, (-615));
      try { 
        jSONObject0.getJSONArray("bNU2&<]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"bNU2&<]\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.36579407730189
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "";
      Float float0 = new Float(0.0);
      jSONObject0.putOpt("", "");
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject();
      String string1 = "iswait";
      jSONObject1.optDouble((String) null, 0.0);
      try { 
        jSONObject0.getDouble("]UZg?[`RW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]UZg?[`RW\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.95571359982777
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Boolean.logicalAnd(false, false);
      String string0 = ".W\\DM,$";
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject();
      String string1 = "o4/x]R";
      jSONObject0.put("o4/x]R", (long) 1262);
      StringWriter stringWriter0 = new StringWriter(1853);
      stringWriter0.append((CharSequence) ".WDM,$");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.948720592834763
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Boolean.valueOf(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "</91Qq#";
      stringArray0[1] = "bNU2&<]";
      Boolean.logicalAnd(false, false);
      stringArray0[2] = "";
      stringArray0[3] = ".WDM,$";
      stringArray0[4] = "NuHl key.";
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("bNU2&<]", (long) 1262);
      StringWriter stringWriter0 = new StringWriter(1262);
      stringWriter0.append((CharSequence) "bNU2&<]");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.144079967867772
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Double double0 = new Double(5685.7357479392085);
      Double.sum(365.5348794, 0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Float float0 = new Float(Double.NaN);
      JSONObject jSONObject1 = jSONObject0.putOpt("k-r5K#^", double0);
      Object object0 = new Object();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.getDouble("k-r5K#^");
      jSONObject1.put("\t", 0L);
      assertEquals(5, jSONObject1.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9576699287932238
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      Short short0 = new Short((short) (-2781));
      Short.compare((short) (-2781), (short) (-2781));
      linkedList1.add(short0);
      LinkedList<JSONArray> linkedList2 = new LinkedList<JSONArray>();
      String string0 = "istoUpperCase";
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList3 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("istoUpperCase", (Collection) linkedList3);
      try { 
        jSONObject1.getLong("istoUpperCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoUpperCase\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0158551955461084
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      Double.sum(767.0814069479546, 1203.95407);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      Float float0 = new Float(0.0);
      Short short0 = new Short((short) (-2972));
      jSONObject0.putOpt("k-r5K#^", short0);
      Object object0 = new Object();
      Boolean boolean0 = Boolean.TRUE;
      double double0 = jSONObject0.optDouble("k-r5K#^");
      assertEquals(3, jSONObject0.length());
      assertEquals((-2972.0), double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.4203044280116917
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4_?A0 ##pwAy3", 0L);
      long long0 = jSONObject0.optLong("istoUnsignedLong");
      assertEquals(0L, long0);
      
      long long1 = new Short((short) (-3841));
      int int0 = jSONObject1.optInt("_M,}{UJ{", (int) (short) (-3841));
      assertEquals((-3841), int0);
      
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.optJSONArray("4_?A0 ##pwAy3");
      long long2 = new Long((short) (-3841));
      double double0 = jSONObject0.optDouble("4_?A0 ##pwAy3", (double) (short) (-3841));
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5914258180806007
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      Short short0 = new Short((short) (-2820));
      Short.compare((short) (-2820), (short) (-2820));
      linkedList1.add(short0);
      LinkedList<JSONArray> linkedList2 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList3 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("istoUpperCase", (Collection) linkedList3);
      JSONObject jSONObject2 = jSONObject1.put("~0Lt", (Collection) linkedList1);
      jSONObject1.isNull("istoUpperCase");
      Boolean boolean0 = new Boolean((String) null);
      jSONObject1.append("~0Lt", boolean0);
      Object object0 = new Object();
      jSONObject2.putOpt((String) null, jSONObject1);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((short) (-2820));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4101033086732713
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getdoubleToLongBits", false);
      Short short0 = new Short((short) (-1315));
      jSONObject0.getBoolean("getdoubleToLongBits");
      Double double0 = new Double((short) (-1315));
      JSONObject jSONObject2 = jSONObject1.putOpt("getdoubleToLongBits", double0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONObject2.put("getdoubleToLongBits", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2337;
      Integer integer0 = new Integer((short) (-1315));
      JSONObject.valueToString(linkedList1);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject3 = new JSONObject();
      String string0 = "~kL^|DL&5";
      try { 
        jSONObject2.getDouble("~kL^|DL&5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~kL^|DL&5\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8856094967674246
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4_?A0 ##pwAy3", 0L);
      jSONObject0.getLong("4_?A0 ##pwAy3");
      Long.valueOf(0L);
      jSONObject1.getDouble("4_?A0 ##pwAy3");
      JSONObject jSONObject2 = jSONObject1.accumulate("`]A", jSONObject0);
      JSONObject jSONObject3 = jSONObject2.put("d/C+HD~n<z)q(Yj@2*`", false);
      Short short0 = new Short((short) (-1315));
      jSONObject3.getBoolean("d/C+HD~n<z)q(Yj@2*`");
      jSONObject2.putOpt("`]A", "4_?A0 ##pwAy3");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Float.min(0.0F, (short) (-1315));
      Object object0 = new Object();
      jSONObject0.putOpt("Substring bounds error", object0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.036736578414717
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short.toUnsignedLong((short)2577);
      HashMap<Short, Short> hashMap0 = new HashMap<Short, Short>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject1.optInt("{", 46);
      assertEquals(46, int0);
      
      Boolean boolean0 = Boolean.TRUE;
      Short.compare((short)108, (short) (-2740));
      jSONObject0.optJSONArray("{}");
      jSONObject0.optLong("~D0GBtfPi#9H", 0L);
      double double0 = jSONObject1.optDouble("~D0GBtfPi#9H", (-1946.558515069));
      assertEquals((-1946.558515069), double0, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      short short0 = (short) (-2820);
      Short short1 = new Short((short) (-2820));
      Short.compare((short) (-2820), (short) (-2820));
      linkedList1.add(short1);
      LinkedList<JSONArray> linkedList2 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0879635777887273
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      HashMap<JSONObject, Integer> hashMap2 = new HashMap<JSONObject, Integer>();
      HashMap<String, Byte> hashMap3 = new HashMap<String, Byte>();
      jSONObject0.optDouble((String) null, 3182.35);
      HashMap<JSONObject, Integer> hashMap4 = new HashMap<JSONObject, Integer>();
      Short.compare((short)55, (short)48);
      jSONObject0.optInt(",", (int) (short)48);
      Boolean boolean0 = Boolean.TRUE;
      Short.compare((short)46, (short)55);
      jSONObject0.optJSONArray("java.lang.Long@0000000006.");
      jSONObject0.optLong(",", 0L);
      jSONObject0.optDouble("}vz(# >!97n;BM", 1163.761927);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.913904866892985
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Long long0 = new Long(0L);
      Short short0 = new Short((short) (-1315));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2337);
      JSONObject.valueToString(integer0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONArray0, 44, 160);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(916.266088);
      Object object0 = new Object();
      Boolean boolean0 = Boolean.TRUE;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6393407194148675
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "</91Qq#";
      stringArray0[1] = "bNU2&<]";
      Boolean.logicalAnd(true, false);
      stringArray0[2] = "";
      stringArray0[3] = ".WDM,$";
      stringArray0[4] = "Null key.";
      Boolean.compare(true, false);
      stringArray0[5] = "]:$!$1xU^$E b4V";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("bNU2&<]", "</91Qq#");
      JSONObject jSONObject2 = jSONObject1.accumulate("toL", ".WDM,$");
      jSONObject2.accumulate("bNU2&<]", "bNU2&<]");
      JSONObject jSONObject3 = jSONObject2.put(",\n", (long) 1262);
      StringWriter stringWriter0 = new StringWriter(8448);
      stringWriter0.append('%');
      stringWriter0.append((CharSequence) "Null key.");
      jSONObject3.write(stringWriter0);
      jSONObject0.putOpt(",", "bNU2&<]");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      Double double0 = new Double(0.0);
      hashMap0.clear();
      HashMap<JSONArray, Integer> hashMap2 = new HashMap<JSONArray, Integer>();
      hashMap0.putAll(hashMap2);
      hashMap0.keySet();
      hashMap0.values();
      hashMap0.putAll(hashMap2);
      JSONObject.doubleToString(0.0);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.403523524088269
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("bNU2&<]", 0.0);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject(object1);
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      int int0 = (-74023248);
      Byte byte0 = new Byte((byte)2);
      hashMap0.put(byte0, (Object) null);
      JSONObject.valueToString(hashMap0, 1008, (-74023248));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "&G$E`n>AR2O,/QcQ", (-74023248), (-74023248));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.043740520670585
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      hashMap0.clear();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      hashMap0.putAll(hashMap1);
      hashMap0.keySet();
      Collection<Integer> collection0 = hashMap0.values();
      JSONObject jSONObject0 = new JSONObject(collection0);
      Boolean boolean0 = Boolean.TRUE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("e$s3^&eiZ|Jw]1aSKhA", (Collection) linkedList0);
      try { 
        jSONObject1.getDouble("e$s3^&eiZ|Jw]1aSKhA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"e$s3^&eiZ|Jw]1aSKhA\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "bNU2&<]";
      Boolean.logicalAnd(true, false);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)34);
      linkedList0.add((Short) null);
      Short.toUnsignedLong((short)17);
      linkedList0.add(short0);
      linkedList0.toArray();
      linkedList0.addLast(short0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray1, stringArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Boolean.valueOf(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "</91Qq#";
      stringArray0[1] = "bNU2&<]";
      JSONObject jSONObject0 = new JSONObject((Map) null);
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      HashMap<String, Byte> hashMap1 = new HashMap<String, Byte>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.4581263542556275
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4_?A0 ##pwAy3", 0L);
      jSONObject0.getLong("4_?A0 ##pwAy3");
      jSONObject1.getDouble("4_?A0 ##pwAy3");
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject1.put("4_?A0 ##pwAy3", (Collection) linkedList0);
      jSONObject1.isNull("wgUu%$:UX?Zql`16r>.");
      try { 
        jSONObject1.getInt("4_?A0 ##pwAy3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4_?A0 ##pwAy3\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.158802829592288
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("] is not a number.", (Map) hashMap0);
      BiFunction<String, Short, Short> biFunction0 = (BiFunction<String, Short, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , anyShort());
      hashMap0.compute("Expected '", biFunction0);
      Short.compare((short)0, (short)2574);
      JSONObject.valueToString(hashMap0);
      hashMap0.put("Expected '", (Short) null);
      hashMap0.put("flo", (Short) null);
      try { 
        jSONObject0.get("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.0654440751560816
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      short short0 = (short)111;
      Short short1 = new Short((short)111);
      Short short2 = new Short((short)44);
      linkedList0.add(short2);
      Short short3 = new Short((short)111);
      linkedList0.add(short3);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("PB,", (Object) null);
      jSONObject0.accumulate("PB,", short2);
      String string0 = "]_aS0";
      try { 
        jSONObject1.getJSONObject("]_aS0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]_aS0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      BiFunction<String, Short, Short> biFunction0 = (BiFunction<String, Short, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      Double double0 = new Double(0.0);
      Double.min(766.9, 0.0);
      Integer integer0 = new Integer(1178);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "#hD:,V6HCrFv";
      stringArray0[2] = "(+E";
      stringArray0[3] = "2\"xGLQz*d[Y5$Q0";
      stringArray0[4] = "#hD:,V6HCrFv";
      stringArray0[5] = "LuBa";
      stringArray0[6] = "2\"xGLQz*d[Y5$Q0";
      stringArray0[8] = "";
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      HashMap<Integer, Float> hashMap2 = new HashMap<Integer, Float>();
      boolean boolean0 = jSONObject0.isNull("* qno7lNcr4P^%*I");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.8456769116279887
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4_?A0 ##pwAy3", 0L);
      String string0 = "\\u";
      jSONObject1.optLong(string0);
      JSONObject jSONObject2 = jSONObject1.put(",\n", false);
      jSONObject0.optInt("4_?A0 ##pwAy3", 47);
      jSONObject0.toString(0, (-213));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "{\n\"java.lang.String@0000000002\": java.lang.Long@0000000003,\n\"java.lang.String@0000000005\": java.lang.Boolean@0000000006\n}", 0, 78);
      jSONObject0.optInt("{\n\"java.lang.String@0000000002\": java.lang.Long@0000000003,\n\"java.lang.String@0000000005\": java.lang.Boolean@0000000006\n}", 19);
      Short.toUnsignedInt((short)20);
      jSONObject0.optString(",\n", "false");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject2.put("ZUB_/Y.06<Uj3RbYQ", (Collection) linkedList0);
      JSONTokener jSONTokener0 = new JSONTokener("toU");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of toU
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.539365799097672
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      String string0 = ",\n";
      String string1 = "\\u";
      jSONObject2.optLong(string1);
      jSONObject2.put(",\n", false);
      Integer integer0 = new Integer(47);
      String string2 = ",mU;$++sy-0v#pgJeMT";
      jSONObject0.optLong(",mU;$++sy-0v#pgJeMT", (long) 47);
      short short0 = (short) (-1315);
      Integer.max(91, (short) (-1315));
      Short short1 = new Short((short) (-1315));
      Double double0 = new Double(0L);
      jSONObject2.putOpt(",\n", double0);
      Double double1 = new Double(0L);
      Float float0 = new Float((float) integer0);
      JSONObject.numberToString(short1);
      jSONObject2.optDouble("s!4LNO&4'oup]OkZT`W");
      int int0 = 32;
      try { 
        jSONObject0.getLong("s!4LNO&4'oup]OkZT`W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"s!4LNO&4'oup]OkZT`W\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.829663325545587
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4_?A0 ##pwAy3", 0L);
      String string0 = "\\u";
      jSONObject1.optLong(string0);
      Short short0 = new Short((short) (-1315));
      Double double0 = new Double((-312.0));
      Double.max(Double.NaN, (-312.0));
      Double.min(0L, (-418.1245231));
      JSONObject.getNames((Object) double0);
      jSONObject1.putOpt("l", jSONObject0);
      String string1 = "";
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("", (Collection) linkedList0);
      String string2 = "va";
      jSONObject0.get("");
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 1;
      stringWriter0.write((int) (short) (-1315));
      StringWriter stringWriter1 = stringWriter0.append('#');
      StringWriter stringWriter2 = new StringWriter(81);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      stringWriter2.append((CharSequence) stringBuffer0);
      // Undeclared exception!
      jSONObject1.write(stringWriter0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.410620073821899
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Boolean.valueOf(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "</91Qq#";
      Boolean.logicalAnd(false, false);
      stringArray0[2] = "";
      stringArray0[3] = "</91Qq#";
      stringArray0[4] = "NuHl key.";
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("bNU2&<]", (long) 1262);
      StringWriter stringWriter0 = new StringWriter(1262);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>(5);
      jSONObject0.put("</91Qq#", (Map) hashMap0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "bNU2&<]");
      Writer writer0 = jSONObject0.write(stringWriter1);
      // Undeclared exception!
      try { 
        writer0.write("", (-110), 1262);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      HashMap<JSONObject, Integer> hashMap2 = new HashMap<JSONObject, Integer>();
      HashMap<Short, JSONArray> hashMap3 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap3);
      hashMap3.clear();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.put((String) null, (Object) hashMap3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.7058972266186156
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      BiFunction<String, Short, Short> biFunction0 = (BiFunction<String, Short, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      Double double0 = new Double(0.0);
      Double.min(766.9, 0.0);
      Integer integer0 = new Integer(1178);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "#hD:,V6HCrFv";
      stringArray0[2] = "(+E";
      JSONObject jSONObject0 = new JSONObject((Object) "#hD:,V6HCrFv");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("(+E", (Collection) linkedList0);
      jSONObject0.isNull("(+E");
      Boolean boolean0 = new Boolean("#0tl.LbYlJs,Id#@");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Long long0 = Long.valueOf(0L);
      JSONObject jSONObject2 = jSONObject1.append("#hD:,V6HCrFv", long0);
      Object object0 = new Object();
      Boolean boolean1 = Boolean.TRUE;
      // Undeclared exception!
      jSONObject2.toString(1178);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject.quote("Ja}shKM2ul0|>-~}(7K");
      JSONObject.quote("\"Ja}shKM2ul0|>-~}(7K\"");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      linkedList2.iterator();
      linkedList2.addAll((Collection<? extends Short>) linkedList0);
      JSONObject.quote("\"Ja}shKM2ul0|>-~}(7K\"");
      Object object0 = new Object();
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.564764818721591
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "(EQ&<G0}R-\\z";
      Short short0 = new Short((short) (-211));
      jSONObject0.toString((int) (short) (-1315), 1998);
      Float float0 = new Float((double) (short) (-211));
      JSONObject jSONObject1 = new JSONObject((Object) "(EQ&<G0}R-z");
      jSONObject1.opt("p8^_");
      JSONObject jSONObject2 = jSONObject1.put("iscompare", (int) (short) (-211));
      jSONObject2.optString("iscompare");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject2.put("{}", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject3 = new JSONObject();
      Short short1 = new Short((short) (-780));
      JSONObject.valueToString(short1, (short) (-1315), 70);
      try { 
        jSONArray0.getJSONObject(62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[62] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.2271977806088614
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.sum(767.0814069479546, 767.0814069479546);
      JSONObject jSONObject0 = new JSONObject(double0);
      Float float0 = new Float(907.1);
      String string0 = "\\u";
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject1 = jSONObject0.put(string0, (Collection) linkedList0);
      Short short0 = new Short((short)41);
      linkedList0.add(short0);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2337;
      Integer integer0 = new Integer(1243);
      JSONObject.valueToString(jSONArray0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject1.getDouble("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toS\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.4592045174343244
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      Short short0 = new Short((short) (-2820));
      Short.compare((short) (-2820), (short) (-2820));
      linkedList1.add(short0);
      LinkedList<JSONArray> linkedList2 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList3 = new LinkedList<JSONObject>();
      jSONObject0.put("~0Lt", (Collection) linkedList1);
      jSONObject0.isNull("istoUpperCase");
      Boolean boolean0 = new Boolean("~0Lt");
      jSONObject0.append("~0Lt", boolean0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CharBuffer.allocate((short) (-2820));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.9119357913729087
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      HashMap<JSONObject, Integer> hashMap2 = new HashMap<JSONObject, Integer>();
      HashMap<String, Byte> hashMap3 = new HashMap<String, Byte>();
      HashMap<JSONObject, Integer> hashMap4 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap4);
      HashMap<JSONObject, Integer> hashMap5 = new HashMap<JSONObject, Integer>();
      HashMap<JSONObject, Integer> hashMap6 = new HashMap<JSONObject, Integer>();
      Object object0 = new Object();
      jSONObject1.append("\"uU'{w", object0);
      int int0 = (-2379);
      jSONObject0.put(": ", (-2379));
      String string0 = "0";
      jSONObject0.get(": ");
      try { 
        jSONObject1.get("sh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sh\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.269093869707675
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Short short0 = new Short((short) (-633));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.optLong("[A5Q:`rN>-XJa=L");
      Short.toUnsignedLong((short)0);
      jSONObject0.optInt("", (int) (short)0);
      Short.toUnsignedInt((short)0);
      JSONObject.quote("");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject0.getInt("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      Integer integer0 = new Integer(43);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ";;vgH3|2ax]";
      String string0 = " at character ";
      stringArray0[1] = " at character ";
      stringArray0[2] = "gethashCode";
      stringArray0[3] = "pa";
      stringArray0[4] = "getdoubleToLongBits";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.818063313482769
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("@Os$`ld&rdKLj7wJ", 2381);
      assertEquals(2381, int0);
      
      Short.toUnsignedInt((short)32);
      jSONObject0.optString("", "");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(32);
      Double double1 = new Double(1763.411856219095);
      linkedList0.add(double1);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      long long0 = jSONObject0.optLong("-q6AW$MO[2+kQ/Sl.g", 2264L);
      assertEquals(2264L, long0);
      
      double double2 = jSONObject0.optDouble("-q6AW$MO[2+kQ/Sl.g", 0.0);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.3738694764797295
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      String string0 = ",\n";
      String string1 = "\\u";
      jSONObject2.optLong(string1);
      jSONObject2.put(",\n", false);
      Integer integer0 = new Integer(47);
      jSONObject0.optLong(",\n", (long) 47);
      short short0 = (short) (-1315);
      Integer.max(91, (short) (-1315));
      Short.toUnsignedLong((short) (-1315));
      Double double0 = new Double(0L);
      jSONObject2.putOpt(",\n", double0);
      Double double1 = new Double(0L);
      Float float0 = new Float((float) integer0);
      jSONObject2.optDouble("s!4LNO&4'oup]OkZT`W");
      int int0 = 32;
      try { 
        jSONObject0.getLong("s!4LNO&4'oup]OkZT`W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"s!4LNO&4'oup]OkZT`W\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.0954579187426967
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.sum(767.0814069479546, 767.0814069479546);
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray1);
      assertEquals(3, stringArray1.length);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.002352516187265
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Ja}shKM2ul0|>-~}(7K");
      jSONObject0.toString();
      int int0 = 129;
      jSONObject0.toString(129);
      jSONObject0.optJSONObject("");
      String string0 = "ik#^G/TSTZl,Kx";
      Float float0 = new Float(0.0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000004\":[java.lang.Byte@0000000048,java.lang.Byte@0000000049,java.lang.Byte@0000000050,java.lang.Byte@0000000051,java.lang.Byte@0000000052,java.lang.Byte@0000000053,java.lang.Byte@0000000054,java.lang.Byte@0000000055,java.lang.Byte@0000000056,java.lang.Byte@0000000057,java.lang.Byte@0000000058,java.lang.Byte@0000000059,java.lang.Byte@0000000060,java.lang.Byte@0000000061,java.lang.Byte@0000000062,java.lang.Byte@0000000063,java.lang.Byte@0000000064,java.lang.Byte@0000000065,java.lang.Byte@0000000066],\"java.lang.String@0000000045\":\"java.lang.Class@0000000046\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject2 = jSONObject1.put("ik#^G/TSTZl,Kx", (Collection) linkedList0);
      jSONObject2.getJSONArray("ik#^G/TSTZl,Kx");
      String string1 = "va";
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte) (-22));
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((byte) (-22));
      Float float0 = new Float(0.0);
      Float.min(0.0F, (-1.0F));
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = jSONObject0.putOpt("X>[(m\"5", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      Short short0 = new Short((short)1646);
      Short.toUnsignedInt((short) (-2049));
      linkedList0.add(short0);
      linkedList1.iterator();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, linkedList0);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      Float float0 = new Float((float) (short)1646);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, linkedList0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.898653058925091
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      jSONObject0.putOpt("Expected a ':' after a key", "Expected a ':' after a key");
      Double double0 = new Double(0.0);
      try { 
        jSONObject0.getJSONObject("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0);
      Double double0 = new Double(916.266088162671);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      Object object0 = new Object();
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.2484044136220875
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      short short0 = (short)1646;
      Boolean.logicalAnd(false, false);
      Boolean.compare(true, true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "]:$!$1xU^$E b4V";
      stringArray0[1] = "";
      JSONObject jSONObject0 = new JSONObject("Null key.", stringArray0);
      Byte byte0 = new Byte((byte)102);
      Byte.toUnsignedLong((byte) (-80));
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, byte0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("", jSONArray0);
      jSONObject1.accumulate("bNU2&<]", (Object) null);
      try { 
        jSONObject1.getJSONObject(".WDM,$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".WDM,$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.5684132580539654
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("get", 0L);
      jSONObject0.getLong("get");
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      hashMap0.clear();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      hashMap0.putAll(hashMap1);
      hashMap0.values();
      HashMap<JSONArray, Integer> hashMap2 = new HashMap<JSONArray, Integer>();
      HashMap<JSONArray, Integer> hashMap3 = new HashMap<JSONArray, Integer>();
      hashMap2.putAll(hashMap3);
      Boolean.valueOf(true);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of gettoString
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.4382641006644548
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Short short0 = new Short((short) (-633));
      JSONObject jSONObject0 = new JSONObject(short0);
      long long0 = new Short((short) (-633));
      Short.toUnsignedLong((short)740);
      jSONObject0.optInt("", (int) (short)0);
      Short.toUnsignedInt((short)0);
      jSONObject0.optString("-q6AW$MO[2+kQ/Sl.g", "-q6AW$MO[2+kQ/Sl.g");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(0);
      linkedList0.add(double0);
      linkedList0.forEach(consumer0);
      jSONObject0.put("-q6AW$MO[2+kQ/Sl.g", (Collection) linkedList0);
      jSONObject0.optLong("-q6AW$MO[2+kQ/Sl.g", 0L);
      jSONObject0.optDouble("[A5Q:`rN>-XJa=L", (double) 740L);
      try { 
        jSONObject0.getLong("gethashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gethashCode\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      BiFunction<String, Short, Short> biFunction0 = (BiFunction<String, Short, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      Double double0 = new Double(0.0);
      Double.min(766.9, 0.0);
      Integer integer0 = new Integer(1178);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "#hD:,V6HCrFv";
      stringArray0[2] = "(+E";
      HashMap<JSONArray, Integer> hashMap2 = new HashMap<JSONArray, Integer>();
      hashMap0.putAll(hashMap2);
      hashMap0.keySet();
      hashMap0.values();
      hashMap0.putAll(hashMap2);
      String[] stringArray1 = JSONObject.getNames((Object) null);
      assertNull(stringArray1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.3441310922546514
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Boolean.valueOf(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "</91Qq#";
      stringArray0[1] = "bNU2&<]";
      Boolean.logicalAnd(false, false);
      stringArray0[2] = "";
      stringArray0[3] = ".WDM,$";
      String string0 = "NuHl key.";
      stringArray0[4] = "NuHl key.";
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("bNU2&<]", (long) 1262);
      jSONObject1.put("</91Qq#", 1262);
      jSONObject1.put("", (Object) "</91Qq#");
      StringWriter stringWriter0 = new StringWriter(1262);
      stringWriter0.write(",:]}/\"[{;=#");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "bNU2&<]");
      Writer writer0 = jSONObject0.write(stringWriter1);
      // Undeclared exception!
      try { 
        writer0.write("", (-110), 1262);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.581339553590254
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)80);
      JSONObject jSONObject1 = new JSONObject(short0);
      Short.toUnsignedLong((short)80);
      int int0 = jSONObject0.optInt((String) null, (int) (short)80);
      assertEquals(80, int0);
      
      Short.toUnsignedInt((short)14);
      jSONObject0.optString((String) null, (String) null);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(5062.0);
      linkedList0.add(double0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      long long0 = jSONObject1.optLong((String) null, 1L);
      assertEquals(1L, long0);
      
      double double1 = jSONObject1.optDouble("num", (double) 1L);
      assertEquals(1, jSONObject1.length());
      assertEquals(1.0, double1, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.9323469378605727
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      jSONObject0.accumulate("istoUpperCase", double0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.4734490505387448
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Short short0 = new Short((short) (-633));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.optLong("[A5Q:`rN>-XJa=L");
      Short.toUnsignedLong((short)740);
      jSONObject0.optInt("", (int) (short)0);
      Short.toUnsignedInt((short)0);
      jSONObject0.optString("-q6AW$MO[2+kQ/Sl.g", "-q6AW$MO[2+kQ/Sl.g");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      int int0 = new Integer((short)0);
      jSONObject0.opt("-zCfWxz1}");
      JSONObject jSONObject1 = jSONObject0.put(";9><q6Rm<Bw>]", 32);
      String string0 = "\\u";
      String string1 = jSONObject1.optString(string0);
      assertEquals(2, jSONObject0.length());
      assertEquals("", string1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.4125898814030986
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      long long0 = jSONObject0.optLong("{");
      assertEquals(0L, long0);
      
      Short.toUnsignedLong((short)92);
      int int0 = jSONObject0.optInt("", (-2410));
      assertEquals((-2410), int0);
      
      Short.toUnsignedInt((short)740);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Integer integer0 = new Integer(0);
      jSONObject1.opt((String) null);
      assertEquals(1, jSONObject1.length());
      
      String string0 = jSONObject0.optString("'");
      assertEquals("", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean.valueOf(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "</91Qq#";
      stringArray0[1] = "</91Qq#";
      Boolean.logicalAnd(true, false);
      stringArray0[2] = "";
      stringArray0[3] = ".WDM,$";
      stringArray0[4] = "Null key.";
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, (long) 1262);
      assertEquals(1262L, long0);
      
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject1.optDouble("</91Qq#", (double) 1262);
      assertEquals(1262.0, double0, 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      BiFunction<String, Short, Short> biFunction0 = (BiFunction<String, Short, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      Double double0 = new Double((-1.3737250237869985));
      Integer integer0 = new Integer(1178);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "#hD:,V6HCrFv";
      stringArray0[2] = "(+E";
      stringArray0[3] = "2\"xGLQz*d[Y5$Q0";
      stringArray0[4] = "#hD:,V6HCrFv";
      stringArray0[5] = "LuBa";
      stringArray0[6] = "2\"xGLQz*d[Y5$Q0";
      stringArray0[8] = "";
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      HashMap<Integer, Float> hashMap2 = new HashMap<Integer, Float>();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Object object0 = new Object();
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Boolean.valueOf(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "</91Qq#";
      stringArray0[1] = "bNU2&<]";
      JSONObject.quote("</91Qq#");
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.5744899860435098
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      String string0 = "\\u";
      jSONObject2.optLong(string0);
      JSONObject jSONObject3 = jSONObject2.put(",\n", false);
      Integer integer0 = new Integer(47);
      jSONObject0.optLong(",mU;$++sy-0v#pgJeMT", (long) 47);
      Integer.max(91, (short) (-1315));
      Short short0 = new Short((short) (-1315));
      Short.compare((short)1502, (short)1502);
      Double double0 = new Double(0L);
      jSONObject2.putOpt(",\n", double0);
      Double double1 = new Double(0L);
      Float float0 = new Float((float) integer0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject4 = jSONObject3.put("4_?A0 ##pwAy3", (Collection) linkedList0);
      jSONObject0.put(",mU;$++sy-0v#pgJeMT", (Collection) linkedList0);
      jSONObject4.isNull("~0Lt");
      jSONObject4.getInt(",\n");
      Boolean boolean0 = Boolean.TRUE;
      try { 
        jSONObject0.getLong("~0Lt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~0Lt\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.0694603678729133
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("kf&tId/u.1");
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "kf&tId/u.1";
      stringArray0[1] = "kf&tId/u.1";
      stringArray0[2] = "] is not a Boolean.";
      stringArray0[3] = "kf&tId/u.1";
      stringArray0[4] = "kf&tId/u.1";
      JSONObject jSONObject1 = jSONObject0.put("istoUnsignedInt", (Object) null);
      jSONObject1.optDouble("istoUnsignedInt");
      try { 
        jSONObject1.getString("gAp8w2ku(_gM)HQP.[=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gAp8w2ku(_gM)HQP.[=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.9007452539070404
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)111);
      Short short1 = new Short((short)44);
      linkedList0.add(short1);
      Short short2 = new Short((short)111);
      linkedList0.add(short2);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      jSONArray1.toJSONObject(jSONArray0);
      CharBuffer.allocate(1196);
      CharBuffer charBuffer0 = CharBuffer.allocate((short)44);
      assertEquals(44, charBuffer0.capacity());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.402886181440778
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      Double double0 = new Double(3045.31243547);
      Double.min((-1180.06133379161), 766.9);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      HashMap<JSONObject, Integer> hashMap2 = new HashMap<JSONObject, Integer>();
      HashMap<String, Byte> hashMap3 = new HashMap<String, Byte>();
      CharBuffer.allocate(257);
      CharBuffer.allocate(257);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "</91Qq#";
      stringArray0[1] = "bNU2&<]";
      Boolean.logicalAnd(true, false);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)34);
      Short short1 = new Short((short)17);
      Short.toUnsignedLong((short)17);
      linkedList0.add(short1);
      linkedList0.toArray();
      linkedList0.addLast(short1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray1, stringArray0);
      try { 
        jSONObject0.append((String) null, short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.9396044253565505
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      jSONObject0.putOpt("", float0);
      Double double0 = new Double(4347.0);
      try { 
        jSONObject0.append("", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.021569481260394
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.sum(767.0814069479546, 767.0814069479546);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject.valueToString((Object) null);
      jSONObject0.put("null", true);
      Long long0 = new Long(0L);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.putOpt("M", "null");
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Float float0 = new Float(0.0);
      Boolean boolean0 = Boolean.TRUE;
      int int0 = 2887;
      Integer integer0 = new Integer(2887);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Ja}shKM2ul0|>-~}(7K";
      stringArray0[1] = "LuBa";
      stringArray0[2] = "LuBa";
      stringArray0[3] = "2\"xGLQz*d[Y5$Q0";
      stringArray0[4] = "";
      stringArray0[5] = "LuBa";
      stringArray0[6] = "ik#^G/TSTZl,Kx";
      stringArray0[7] = "\b";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("cp=$9z;s*{<%VJu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"cp=$9z;s*{<%VJu\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.6085962936622185
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Boolean.valueOf(true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      linkedList1.parallelStream();
      linkedList0.containsAll(linkedList1);
      Short short0 = new Short((short) (-3180));
      Short short1 = new Short((short) (-3180));
      Short.toUnsignedInt((short)4615);
      linkedList1.offerFirst(short0);
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      linkedList2.add(short0);
      linkedList2.offerFirst(short0);
      linkedList2.iterator();
      linkedList2.addAll((Collection<? extends Short>) linkedList1);
      Object object0 = new Object();
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.4486863412371913
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Short short0 = new Short((short) (-633));
      JSONObject jSONObject0 = new JSONObject(short0);
      long long0 = jSONObject0.optLong("[AQW:`rN-XJa=L");
      assertEquals(0L, long0);
      
      long long1 = new Long((short) (-633));
      int int0 = jSONObject0.optInt("FYo}Yx>}_|0k$.>)", (int) (short) (-633));
      assertEquals((-633), int0);
      
      Boolean boolean0 = Boolean.TRUE;
      Short.compare((short) (-393), (short)55);
      Short.toUnsignedInt((short) (-2650));
      Short.toUnsignedInt((short) (-2650));
      long long2 = new Short((short)55);
      double double0 = jSONObject0.optDouble("rg;V?t<IgIDR4DfX", (double) 0L);
      assertEquals(0.0, double0, 0.01);
      
      int int1 = jSONObject0.length();
      assertEquals(1, int1);
      
      double double1 = jSONObject0.optDouble("8H-RWd=VrG{x");
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      HashMap<JSONObject, Integer> hashMap2 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<JSONObject, Integer> hashMap3 = new HashMap<JSONObject, Integer>();
      HashMap<JSONObject, Integer> hashMap4 = new HashMap<JSONObject, Integer>();
      HashMap<JSONObject, Integer> hashMap5 = new HashMap<JSONObject, Integer>();
      hashMap5.clone();
      hashMap5.putAll(hashMap3);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      BiFunction<String, Short, Short> biFunction0 = (BiFunction<String, Short, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      HashMap<String, Byte> hashMap2 = new HashMap<String, Byte>();
      HashMap<JSONObject, Integer> hashMap3 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap3);
      HashMap<JSONObject, Integer> hashMap4 = new HashMap<JSONObject, Integer>();
      HashMap<JSONObject, Integer> hashMap5 = new HashMap<JSONObject, Integer>();
      HashMap<JSONObject, Integer> hashMap6 = new HashMap<JSONObject, Integer>();
      hashMap4.clone();
      HashMap<JSONObject, Integer> hashMap7 = new HashMap<JSONObject, Integer>();
      hashMap3.putAll(hashMap6);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.472681055949122
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Null key.";
      Short short0 = new Short((short)48);
      Short.compare((short)1646, (short)48);
      linkedList0.add(short0);
      stringArray0[3] = "(trvU::";
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      jSONObject0.put("Null key.", (-3051L));
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<Short> linkedList3 = new LinkedList<Short>();
      linkedList0.iterator();
      LinkedList<Short> linkedList4 = new LinkedList<Short>();
      CharBuffer.allocate((short)1646);
      CharBuffer.allocate(59);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-2658));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      Double double0 = new Double(0.0);
      hashMap0.clear();
      HashMap<JSONArray, Integer> hashMap2 = new HashMap<JSONArray, Integer>();
      hashMap0.putAll(hashMap2);
      hashMap0.keySet();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1186L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.7098232388451553
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Boolean.logicalAnd(true, false);
      String string0 = "Null key.";
      Boolean.compare(true, false);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "</91Qq#";
      stringArray0[1] = "";
      stringArray0[2] = "5 =1.`Z";
      stringArray0[3] = "iscompareTo";
      stringArray0[4] = ".WDM,$";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      Object object1 = new Object();
      JSONObject jSONObject2 = jSONObject0.putOpt("iscompareTo", object1);
      jSONObject0.toString(1, 1);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject3 = jSONObject0.accumulate("</91Qq#", "{\n  \"java.lang.String@0000000005\": \"java.lang.Object@0000000006\",\n  \"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n }");
      jSONObject3.accumulate("iscompareTo", "5 =1.`Z");
      try { 
        jSONObject2.getJSONObject("5 =1.`Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5 =1.`Z\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.2391997573006275
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      HashMap<JSONObject, Integer> hashMap2 = new HashMap<JSONObject, Integer>();
      HashMap<String, Byte> hashMap3 = new HashMap<String, Byte>();
      HashMap<JSONObject, Integer> hashMap4 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap4);
      HashMap<JSONObject, Integer> hashMap5 = new HashMap<JSONObject, Integer>();
      HashMap<JSONObject, Integer> hashMap6 = new HashMap<JSONObject, Integer>();
      hashMap4.putAll(hashMap6);
      try { 
        jSONObject0.getInt("z4{zx8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"z4{zx8\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.600482781402273
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "</91Qq#";
      stringArray0[1] = "bNU2&<]";
      Boolean.logicalAnd(true, false);
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = ".WDM,$";
      stringArray0[4] = "Null key.";
      Boolean.compare(true, false);
      stringArray0[5] = "]:$!$1xU^$E b4V";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("bNU2&<]", "</91Qq#");
      jSONObject1.toString(1, (-615));
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject2 = jSONObject1.accumulate("toL", "{\"java.lang.String@0000000002\": \"java.lang.String@0000000003\"}");
      JSONObject jSONObject3 = jSONObject2.accumulate("bNU2&<]", "bNU2&<]");
      try { 
        jSONObject3.getJSONObject("]_aS0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]_aS0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.2542831205729428
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      linkedList0.parallelStream();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList0.containsAll(linkedList1);
      Short short0 = new Short((short) (-3180));
      Short short1 = new Short((short)112);
      Short short2 = new Short((short)92);
      linkedList0.offerFirst(short2);
      linkedList0.add(short0);
      linkedList0.iterator();
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      Short short3 = new Short((short)4177);
      linkedList2.add(short3);
      linkedList0.addAll((Collection<? extends Short>) linkedList2);
      Boolean boolean0 = Boolean.TRUE;
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString(65);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.9617529698211404
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = "4_?A0 ##pwAy3";
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      String string1 = "\\u";
      jSONObject2.optLong(string1);
      JSONObject jSONObject3 = jSONObject2.put(",\n", false);
      Integer integer0 = new Integer(47);
      Integer.getInteger("84Tj h'iiE@Ym$;^", 128);
      jSONObject0.optLong("qu", (long) 47);
      jSONObject3.optInt("84Tj h'iiE@Ym$;^", 47);
      Double double0 = new Double(0L);
      jSONObject2.putOpt(",\n", double0);
      Double double1 = new Double(0L);
      Float float0 = new Float((float) integer0);
      jSONObject2.optDouble("s!4LNO&4'oup]OkZT`W");
      int int0 = 32;
      JSONObject.valueToString(jSONObject1, 32, 47);
      try { 
        jSONObject0.getLong("s!4LNO&4'oup]OkZT`W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"s!4LNO&4'oup]OkZT`W\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.4736391589096276
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      linkedList2.parallelStream();
      linkedList0.containsAll(linkedList2);
      Short short0 = new Short((short) (-3180));
      Short short1 = new Short((short) (-3180));
      linkedList2.offerFirst(short1);
      linkedList0.add(short0);
      linkedList2.iterator();
      linkedList1.addAll((Collection<? extends Short>) linkedList2);
      Object object0 = new Object();
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      jSONObject0.toString(10);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.9749540746744716
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<JSONObject, Integer> hashMap1 = new HashMap<JSONObject, Integer>();
      HashMap<String, Byte> hashMap2 = new HashMap<String, Byte>();
      HashMap<JSONObject, Integer> hashMap3 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap3);
      HashMap<JSONObject, Integer> hashMap4 = new HashMap<JSONObject, Integer>();
      HashMap<JSONObject, Integer> hashMap5 = new HashMap<JSONObject, Integer>();
      hashMap3.putAll(hashMap5);
      try { 
        jSONObject0.get("lY_@J*.NeJ\"/j]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lY_@J*.NeJ\\\"/j]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.299048881340881
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.sum(767.0814069479546, 767.0814069479546);
      JSONObject jSONObject0 = new JSONObject(double0);
      Float float0 = new Float(907.1);
      Integer integer0 = new Integer(58);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONArray jSONArray0 = new JSONArray();
      Integer integer1 = new Integer(58);
      hashMap0.put(jSONArray0, integer1);
      jSONObject0.put("wheel.json.JSONObject$Null", 1534.1628138959093);
      jSONObject0.optLong("k-r5K#^");
      JSONObject.valueToString((Object) null, 123, 58);
      try { 
        jSONObject0.getLong("toL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toL\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject.quote(">3r_4");
      Short short0 = new Short((short) (-3444));
      Short.toUnsignedLong((short) (-3444));
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(101);
      CharBuffer.allocate(59);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((short) (-3444));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.157280995708096
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double.sum(0.0, 0.0);
      Byte byte0 = new Byte((byte) (-23));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = ",\n";
      JSONObject jSONObject1 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.put("getgetBytes", (int) (byte) (-23));
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.3689252197238684
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = 0L;
      JSONObject jSONObject1 = jSONObject0.put("4_?A0 ##pwAy3", 0L);
      jSONObject0.getLong("4_?A0 ##pwAy3");
      String string0 = "islongValue";
      Long long1 = Long.valueOf(0L);
      jSONObject1.getDouble("4_?A0 ##pwAy3");
      jSONObject1.accumulate("`]A", long1);
      jSONObject0.put("getdoubleToLongBits", false);
      short short0 = (short) (-1315);
      Short short1 = new Short((short) (-1315));
      try { 
        jSONObject0.getBoolean("4_?A0 ##pwAy3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4_?A0 ##pwAy3\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("NgzNK(-#y");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of NgzNK(-#y
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.9580929304994463
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      hashMap1.clear();
      hashMap1.putAll(hashMap0);
      hashMap0.values();
      hashMap0.putAll(hashMap1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      JSONObject jSONObject0 = new JSONObject(hashMap1, stringArray0);
      HashMap<Integer, Float> hashMap2 = new HashMap<Integer, Float>();
      HashMap<Integer, Float> hashMap3 = new HashMap<Integer, Float>();
      Float float0 = new Float(1675.5059809524);
      Float float1 = new Float(2556.129F);
      JSONObject jSONObject1 = new JSONObject(float1);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(916.266088162671);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject1.getDouble("[A``PY%;P8Bzt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[A``PY%;P8Bzt\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.760750468781551
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      Double double0 = new Double(0.0);
      hashMap0.clear();
      HashMap<JSONArray, Integer> hashMap2 = new HashMap<JSONArray, Integer>();
      hashMap0.putAll(hashMap2);
      hashMap0.keySet();
      hashMap0.values();
      hashMap0.putAll(hashMap2);
      JSONObject.getNames((Object) hashMap1);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ] is not a number.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("iv`}G*y])Ie", true);
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.452253376470317
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Null key.";
      Short short0 = new Short((short)48);
      Short.compare((short)1646, (short)48);
      linkedList0.add(short0);
      stringArray0[3] = "(trvU::";
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<Short> linkedList3 = new LinkedList<Short>();
      linkedList0.iterator();
      LinkedList<Short> linkedList4 = new LinkedList<Short>();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 1598, (-2642));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.79618048451919
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      Short short0 = new Short((short)2);
      Short.toUnsignedLong((short)2);
      linkedList2.add(short0);
      linkedList2.parallelStream();
      linkedList0.containsAll(linkedList2);
      Short short1 = new Short((short) (-3180));
      Short short2 = new Short((short) (-3180));
      Short.toUnsignedInt((short) (-3180));
      Short.toUnsignedInt((short) (-3180));
      linkedList2.offerFirst(short2);
      linkedList0.add(short1);
      linkedList2.offerFirst(short2);
      linkedList2.iterator();
      linkedList2.addAll((Collection<? extends Short>) linkedList1);
      Object object0 = new Object();
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Boolean boolean1 = Boolean.TRUE;
      LinkedList<String> linkedList3 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("_M\"Xh", (Collection) linkedList2);
      jSONObject1.put("", (double) 62356);
      assertEquals(6, jSONObject1.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.751899083808096
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "iv`}G*y])Ie";
      jSONObject0.optBoolean("iv`}G*y])Ie", true);
      Boolean.logicalAnd(true, true);
      Boolean.compare(false, true);
      Short short0 = new Short((short)8192);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "]:$!$1xU^$E b4V";
      stringArray0[1] = "";
      JSONObject jSONObject1 = new JSONObject(short0, stringArray0);
      Object object0 = new Object();
      String string1 = "";
      try { 
        jSONObject0.getString("17'7:3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"17'7:3\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.7304774269690175
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4_?A0 ##pwAy3", 0L);
      jSONObject1.put(",\n", true);
      long long0 = jSONObject0.optLong(",\n");
      assertEquals(0L, long0);
      
      Short.toUnsignedLong((short)44);
      Short.compare((short) (-22890), (short)0);
      int int0 = jSONObject0.optInt("r", (-6339));
      assertEquals((-6339), int0);
      
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.optDouble("", (double) 44L);
      Short.compare((short)1139, (short)0);
      jSONObject1.optJSONArray(")AMMEg!!{fj\"Q`}e|");
      jSONObject1.optLong(",\n", 0L);
      double double0 = jSONObject1.optDouble("", 1.0);
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean1 = jSONObject0.optBoolean("<SKR^4YB");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.7385727210046005
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",\n", false);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<JSONObject, Integer> hashMap1 = new HashMap<JSONObject, Integer>();
      HashMap<String, Byte> hashMap2 = new HashMap<String, Byte>();
      HashMap<JSONObject, Integer> hashMap3 = new HashMap<JSONObject, Integer>();
      HashMap<JSONObject, Integer> hashMap4 = new HashMap<JSONObject, Integer>();
      HashMap<JSONObject, Integer> hashMap5 = new HashMap<JSONObject, Integer>();
      hashMap3.putAll(hashMap5);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap3);
      try { 
        jSONObject0.getJSONObject("tr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tr\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.3085781000463086
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.optLong("e/+sf8f7j#Z%PD}Xjy", (-1L));
      Object object0 = new Object();
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject.quote((String) null);
      Short.toUnsignedLong((short)1);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate((short)1);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((short) (-3444));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.5490230514048333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      BiFunction<String, Short, Short> biFunction0 = (BiFunction<String, Short, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Double double0 = new Double(0.0);
      Double.min(766.9, 0.0);
      Integer integer0 = new Integer(1178);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "#hD:,V6HCrFv";
      stringArray0[2] = "(+E";
      stringArray0[3] = "2\"xGLQz*d[Y5$Q0";
      stringArray0[4] = "#hD:,V6HCrFv";
      stringArray0[5] = "LuBa";
      stringArray0[6] = "2\"xGLQz*d[Y5$Q0";
      stringArray0[8] = "";
      JSONObject jSONObject1 = new JSONObject(hashMap0, stringArray0);
      HashMap<Integer, Float> hashMap2 = new HashMap<Integer, Float>();
      HashMap<Integer, Float> hashMap3 = new HashMap<Integer, Float>(hashMap2);
      try { 
        jSONObject1.getLong("2\"xGLQz*d[Y5$Q0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2\\\"xGLQz*d[Y5$Q0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.1262965263520615
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      Short short0 = new Short((short)2);
      linkedList2.add(short0);
      linkedList2.parallelStream();
      linkedList0.containsAll(linkedList2);
      Short short1 = new Short((short) (-3180));
      Short short2 = new Short((short) (-3180));
      Short.toUnsignedInt((short) (-3180));
      linkedList2.offerFirst(short2);
      linkedList0.add(short1);
      linkedList2.offerFirst(short2);
      linkedList2.iterator();
      linkedList0.pollFirst();
      linkedList1.addAll((Collection<? extends Short>) linkedList2);
      Object object0 = new Object();
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      Boolean boolean1 = Boolean.TRUE;
      int int0 = jSONObject0.optInt("M%2MneD(I<");
      assertEquals(4, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.7653327875937666
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      BiFunction<String, Short, Short> biFunction0 = (BiFunction<String, Short, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      Double double0 = new Double(0.0);
      Double.min(766.9, 0.0);
      Integer integer0 = new Integer(1178);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "#hD:,V6HCrFv";
      stringArray0[2] = "(+E";
      stringArray0[3] = "2\"xGLQz*d[Y5$Q0";
      stringArray0[4] = "#hD:,V6HCrFv";
      stringArray0[5] = "LuBa";
      stringArray0[6] = "2\"xGLQz*d[Y5$Q0";
      stringArray0[8] = "";
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      HashMap<Integer, Float> hashMap2 = new HashMap<Integer, Float>();
      HashMap<Integer, Float> hashMap3 = new HashMap<Integer, Float>(hashMap2);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("2\"xGLQz*d[Y5$Q0", object0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.3033823167117924
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalAnd(true, true);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Double double0 = new Double(758.827138589714);
      JSONObject jSONObject1 = jSONObject0.put("-", (Object) double0);
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getString("-");
      jSONObject0.optBoolean("'");
      String string0 = jSONObject1.optString("'", "-");
      assertEquals("-", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.271512871834892
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Short short0 = new Short((short) (-633));
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.toUnsignedLong((short)0);
      int int0 = jSONObject0.optInt("", (int) (short)0);
      assertEquals(0, int0);
      
      Short.toUnsignedInt((short)0);
      jSONObject0.optString("-q6AW$MO[2+kQ/Sl.g", "-q6AW$MO[2+kQ/Sl.g");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(0);
      linkedList0.add(double0);
      linkedList0.forEach(consumer0);
      jSONObject0.optLong("-q6AW$MO[2+kQ/Sl.g", 0L);
      double double1 = jSONObject0.optDouble("[A5Q:`rN>-XJa=L", (double) 0L);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject.quote("ik#^G/TSTZl,Kx");
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(59);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      assertFalse(stringWriter2.equals((Object)stringWriter1));
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      Short short0 = new Short((short) (-3444));
      Short.toUnsignedLong((short)4993);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate((short)4993);
      CharBuffer.allocate(101);
      CharBuffer.allocate(59);
      Byte byte0 = new Byte((byte)53);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Ioee/'{&";
      stringArray0[1] = "9$qZHAZb0zS0jg>lt ";
      stringArray0[2] = "to";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      String string0 = jSONObject0.optString("to");
      assertEquals("", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.0662466844869494
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Null key.";
      Short short0 = new Short((short)48);
      Short.compare((short)1646, (short)48);
      linkedList0.add(short0);
      stringArray0[3] = "(trvU::";
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      jSONObject0.optBoolean("Null key.", false);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<Short> linkedList3 = new LinkedList<Short>();
      linkedList0.iterator();
      LinkedList<Short> linkedList4 = new LinkedList<Short>();
      CharBuffer.allocate((short)1646);
      CharBuffer.allocate(59);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-2658));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.550435126428319
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Short short0 = new Short((short) (-633));
      JSONObject jSONObject0 = new JSONObject(short0);
      long long0 = jSONObject0.optLong("[A5Q:`rN>-XJa=L");
      assertEquals(0L, long0);
      
      Short.toUnsignedLong((short) (-3265));
      Short.compare((short)1139, (short) (-3265));
      int int0 = jSONObject0.optInt("FYo}Yx>}_|0k$.>)", (int) (short) (-633));
      assertEquals((-633), int0);
      
      Boolean boolean0 = Boolean.TRUE;
      Short.compare((short) (-633), (short)46);
      jSONObject0.optJSONArray("rg;V?t<IgIDR4DfX");
      jSONObject0.optLong("", 0L);
      double double0 = jSONObject0.optDouble("rg;V?t<IgIDR4DfX", 1163.761927);
      assertEquals(1163.761927, double0, 0.01);
      
      boolean boolean1 = jSONObject0.optBoolean("isreplace");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.4000482756371975
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      BiFunction<String, Short, Short> biFunction0 = (BiFunction<String, Short, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      HashMap<String, Byte> hashMap2 = new HashMap<String, Byte>();
      HashMap<JSONObject, Integer> hashMap3 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap3);
      HashMap<JSONObject, Integer> hashMap4 = new HashMap<JSONObject, Integer>();
      Boolean.compare(true, false);
      Boolean.compare(true, true);
      Double double0 = new Double(0);
      JSONObject jSONObject1 = new JSONObject(double0);
      jSONObject1.putOpt("\\OU}9'$&o(", jSONObject0);
      Byte byte0 = new Byte((byte)87);
      JSONObject jSONObject2 = jSONObject0.accumulate("toL", byte0);
      jSONObject0.accumulate("toL", double0);
      jSONObject1.getJSONObject("\\OU}9'$&o(");
      Short short0 = new Short((short) (-2250));
      jSONObject2.append("false", short0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      hashMap0.putAll(hashMap1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "istoUnsignedInt";
      stringArray0[1] = "(+E";
      stringArray0[2] = "(+E";
      JSONObject jSONObject0 = new JSONObject("(+E", stringArray0);
      HashMap<Integer, Float> hashMap2 = new HashMap<Integer, Float>();
      HashMap<Integer, Float> hashMap3 = new HashMap<Integer, Float>(hashMap2);
      Float float0 = new Float((-298.97978836));
      try { 
        jSONObject0.getBoolean("istoUnsignedInt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoUnsignedInt\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      Short short0 = new Short((short) (-2820));
      int int0 = Short.compare((short) (-2820), (short) (-2820));
      linkedList1.add(short0);
      LinkedList<JSONArray> linkedList2 = new LinkedList<JSONArray>();
      LinkedList<JSONObject> linkedList3 = new LinkedList<JSONObject>();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int1 = jSONObject0.length();
      assertTrue(int1 == int0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.5632188574589243
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("4_?A0 ##pwAy3", 0L);
      jSONObject2.optLong("^");
      jSONObject2.optBoolean(",\n", false);
      Short.toUnsignedInt((short) (-1315));
      JSONObject jSONObject3 = jSONObject2.putOpt(",\n", jSONObject1);
      jSONObject1.optString("^", "^");
      jSONObject1.optLong("UkCbZ{clrRzp_3rQ@N;", 0L);
      JSONObject jSONObject4 = new JSONObject("UkCbZ{clrRzp_3rQ@N;", stringArray0);
      jSONObject3.accumulate("Expected a ',' or '}'", jSONObject4);
      jSONObject0.has("Expected a ',' or '}'");
      jSONObject3.optLong("HKols\"r0BD/g'K");
      assertEquals(3, jSONObject3.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      hashMap1.clear();
      hashMap1.putAll(hashMap0);
      hashMap0.values();
      hashMap0.putAll(hashMap1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      JSONObject jSONObject0 = new JSONObject(hashMap1, stringArray0);
      HashMap<Integer, Float> hashMap2 = new HashMap<Integer, Float>();
      HashMap<Integer, Float> hashMap3 = new HashMap<Integer, Float>();
      Float float0 = new Float(1675.4002534702986);
      Float float1 = new Float(2556.129F);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      BiFunction<String, Short, Short> biFunction0 = (BiFunction<String, Short, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      Double double0 = new Double(0.0);
      Double.min(766.9, 0.0);
      Integer integer0 = new Integer(1178);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "#hD:,V6HCrFv";
      stringArray0[2] = "(+E";
      stringArray0[3] = "2\"xGLQz*d[Y5$Q0";
      stringArray0[4] = "#hD:,V6HCrFv";
      stringArray0[5] = "LuBa";
      stringArray0[6] = "2\"xGLQz*d[Y5$Q0";
      stringArray0[8] = "";
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      HashMap<Integer, Float> hashMap2 = new HashMap<Integer, Float>();
      HashMap<Integer, Float> hashMap3 = new HashMap<Integer, Float>(hashMap2);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Boolean.valueOf(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "</91Qq#";
      stringArray0[1] = "bNU2&<]";
      Boolean.logicalAnd(true, false);
      stringArray0[2] = "getgetBytes";
      stringArray0[3] = ".WDM,$";
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-4130));
      Short.toUnsignedInt((short) (-4130));
      linkedList0.add(short0);
      Short short1 = new Short((short)47);
      Short.compare((short)1, (short)2);
      Short.toUnsignedInt((short)47);
      Short.toUnsignedLong((short)46);
      linkedList0.add(short1);
      Short short2 = new Short((short)2);
      Short.toUnsignedLong((short)2);
      Short.compare((short)46, (short) (-2419));
      linkedList0.add(short2);
      Short short3 = new Short((short)1956);
      Short.toUnsignedInt((short) (-2049));
      Boolean boolean0 = new Boolean(".WDM,$");
      Boolean boolean1 = Boolean.TRUE;
      Boolean boolean2 = Boolean.valueOf("IKk_");
      String string0 = JSONObject.valueToString(boolean2, 92, 59);
      assertNotNull(string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.486476853275102
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Short short0 = Short.valueOf((short)55);
      Short.compare((short)94, (short) (-957));
      JSONObject.valueToString(short0);
      Long long0 = new Long((-9L));
      CharBuffer.allocate((short)55);
      CharBuffer.allocate(2);
      CharBuffer charBuffer0 = CharBuffer.allocate((short)55);
      assertEquals(55, charBuffer0.length());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      BiFunction<String, Short, Short> biFunction0 = (BiFunction<String, Short, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      Double double0 = new Double(0.0);
      Double.min(766.9, 766.9);
      Integer integer0 = new Integer(1178);
      HashMap<Integer, Float> hashMap2 = new HashMap<Integer, Float>();
      HashMap<Integer, Float> hashMap3 = new HashMap<Integer, Float>(hashMap2);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }
}
