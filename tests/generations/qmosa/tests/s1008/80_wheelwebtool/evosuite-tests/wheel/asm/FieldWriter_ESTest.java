/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 02:22:37 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.URISyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Item;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4127277756300949
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      classWriter0.addUninitializedType("wheel.asm.ClassReader", 12);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "wheel.asm.ClassReader", "wheel.asm.ClassReader", "wheel.asm.ClassReader", (Object) null);
      fieldWriter0.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      classWriter0.version = 16;
      byteVector0.put11(2, 1);
      classWriter0.newFloat(1);
      fieldWriter0.put(byteVector0);
      classWriter0.index = (-2400);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-2400), "wheel.asm.ClassReader", "wheel.asm.ClassReader", "wheel.asm.ClassReader", "wheel.asm.ClassReader");
      fieldWriter1.put(byteVector0);
      fieldWriter1.getSize();
      fieldWriter1.put(byteVector0);
      byte[] byteArray0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RuntimeInvisibleAnnotations");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String string0 = "4l2d:rW";
      Object object0 = new Object();
      FieldWriter fieldWriter2 = null;
      try {
        fieldWriter2 = new FieldWriter(classWriter0, 1, "4l2d:rW", "$YeIl`", "RuntimeInvisibleAnnotations", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@b4cf1cc
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.055308746499338
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-13));
      classWriter0.index = (-13);
      String string0 = "7l{!|(O|GK>HcH8t!_S";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "7l{!|(O|GK>HcH8t!_S", "7l{!|(O|GK>HcH8t!_S", "7l{!|(O|GK>HcH8t!_S", (Object) null);
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      try { 
        MockURI.URI("7l{!|(O|GK>HcH8t!_S", "7l{!|(O|GK>HcH8t!_S", "7l{!|(O|GK>HcH8t!_S", "7l{!|(O|GK>HcH8t!_S");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 7l{!|(O|GK>HcH8t!_S://7l{!|(O|GK>HcH8t!_S7l%7B!%7C(O%7CGK%3EHcH8t!_S#7l%7B!%7C(O%7CGK%3EHcH8t!_S
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9104437014054871
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Deprecated");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ClassWriter classWriter0 = new ClassWriter((-2281));
      classWriter0.index = (-2281);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BZxr");
      classWriter0.addUninitializedType("", (-2281));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", (Object) null);
      ByteVector byteVector0 = new ByteVector(1);
      ByteVector byteVector1 = byteVector0.put12((-2281), 1);
      ByteVector byteVector2 = byteVector0.putUTF8("");
      byteVector1.putLong(1);
      fieldWriter0.put(byteVector0);
      fieldWriter0.put(byteVector0);
      fieldWriter0.put(byteVector2);
      Attribute attribute0 = new Attribute("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)13;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0427140330297018
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "Signature", "Signature", "Signature", "Signature");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
      
      Item[] itemArray0 = new Item[9];
      Item item0 = classWriter0.newFieldItem("Signature", "Signature", "Signature");
      itemArray0[0] = item0;
      Item item1 = new Item();
      itemArray0[5] = item0;
      Item item2 = new Item(2, item0);
      itemArray0[1] = item1;
      itemArray0[0] = item2;
      Item item3 = new Item();
      itemArray0[3] = item3;
      Item item4 = classWriter0.newClassItem("Signature");
      itemArray0[8] = item4;
      item0.intVal = 1206;
      item2.strVal2 = "Signature";
      Item item5 = new Item(24, item4);
      itemArray0[6] = item5;
      item0.strVal1 = "Signature";
      item1.set(24);
      item2.longVal = (-1L);
      item5.hashCode = 1206;
      item0.set(1206, "Signature", "", "wheel.asm.Handler");
      item5.set(0);
      Item item6 = new Item(1206, item2);
      item6.set(24);
      item6.strVal3 = "Signature";
      item6.strVal1 = "Signature";
      item6.set(24);
      itemArray0[7] = item6;
      classWriter0.version = 1206;
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-2400), "Signature", "Signature", "Signature", "Signature");
      int int1 = fieldWriter1.getSize();
      assertEquals(30, int1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.343193896232072
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-23));
      classWriter0.version = (-1787);
      String string0 = "";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2900), "", "", "", "");
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      String string1 = "RuntimeInvisibleAnnotations";
      try { 
        MockURI.URI("", "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://RuntimeInvisibleAnnotations#RuntimeInvisibleAnnotations
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.putByte((-822));
      Object object0 = new Object();
      long long0 = 0L;
      ByteVector byteVector1 = byteVector0.putLong(0L);
      byte[] byteArray0 = new byte[1];
      byteVector0.length = 271;
      byteArray0[0] = (byte) (-24);
      byteVector1.data = byteArray0;
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 311, "SourceDebugExtension", "I", (String) null, "SourceDebugExtension");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0225955941538991
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1q~3");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dep%|cte");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dep%|cte");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dep%|cte");
      ClassWriter classWriter0 = new ClassWriter(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1q~3");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dep%|cte");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-36);
      byteArray0[0] = (byte)23;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dep%|cte");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T%.");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "T%.", "Dep%|cte", (String) null, (Object) null);
      Attribute attribute0 = new Attribute("Signature");
      fieldWriter0.visitAttribute(attribute0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray1 = new byte[19];
      byteArray1[0] = (byte)8;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T%.");
      ByteVector byteVector0 = new ByteVector();
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5556157757596902
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newInteger(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "wheel.asm.ClassReader";
      stringArray0[1] = "wheel.asm.ClassReader";
      stringArray0[2] = "wheel.asm.ClassReader";
      stringArray0[3] = "wheel.asm.ClassReader";
      stringArray0[4] = "wheel.asm.ClassReader";
      stringArray0[5] = "wheel.asm.ClassReader";
      stringArray0[6] = "wheel.asm.ClassReader";
      classWriter0.visitMethod(3, "wheel.asm.ClassReader", "wheel.asm.ClassReader", "wheel.asm.ClassReader", stringArray0);
      classWriter0.addUninitializedType("", 0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", (Object) null);
      fieldWriter0.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.putByte(1);
      classWriter0.newFloat(1);
      fieldWriter0.put(byteVector0);
      ByteVector byteVector1 = byteVector0.putByte(1);
      fieldWriter0.visitAnnotation("wheel.asm.ClassReader", false);
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitAnnotation("", true);
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector1);
      fieldWriter0.put(byteVector1);
      assertSame(byteVector0, byteVector1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1852));
      classWriter0.newLong((-1852));
      classWriter0.newInteger(153);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 60, "d", "9Z[* XHh", "0", "0");
      Attribute attribute0 = new Attribute("0");
      attribute0.next = null;
      Attribute attribute1 = attribute0.next;
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-22));
      ByteVector byteVector0 = new ByteVector(1);
      byteVector0.putByte((-22));
      byteVector0.putInt(2);
      classWriter0.newMethod("%j/1R1Q&}", "C#r5LD9KzWz0|", "", false);
      byteVector0.putByte((-813));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "ipuMzcg 6deF{Z#^pq", "I", (String) null, "ipuMzcg 6deF{Z#^pq");
      byteVector0.length = (-846);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5584824180400552
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newInteger(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "wheel.asm.ClassReader";
      stringArray0[1] = "wheel.asm.ClassReader";
      stringArray0[2] = "wheel.asm.ClassReader";
      stringArray0[3] = "wheel.asm.ClassReader";
      stringArray0[4] = "wheel.asm.ClassReader";
      stringArray0[5] = "wheel.asm.ClassReader";
      stringArray0[6] = "wheel.asm.ClassReader";
      classWriter0.visitMethod(3, "wheel.asm.ClassReader", "wheel.asm.ClassReader", "wheel.asm.ClassReader", stringArray0);
      classWriter0.addUninitializedType("", 0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", (Object) null);
      fieldWriter0.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putByte(1);
      classWriter0.newFloat(1);
      fieldWriter0.put(byteVector0);
      ByteVector byteVector2 = byteVector0.putByte(1);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-2400), "wheel.asm.ClassReader", "C&X8H1", "wheel.asm.ClassReader", "C&X8H1");
      fieldWriter1.visitAnnotation("wheel.asm.ClassReader", false);
      fieldWriter1.put(byteVector0);
      fieldWriter0.getSize();
      fieldWriter1.getSize();
      fieldWriter1.put(byteVector0);
      fieldWriter0.visitAnnotation("", true);
      fieldWriter0.getSize();
      fieldWriter1.put(byteVector2);
      assertSame(byteVector2, byteVector1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.218839396646019
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4193);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4193, "/P_=n&6o}j)OL`MAfMl", "Deprecated", "Deprecated", "Deprecated");
      Attribute attribute0 = new Attribute("Deprecated");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0208265110693377
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-32));
      Item[] itemArray0 = new Item[9];
      Item item0 = new Item();
      itemArray0[0] = item0;
      Item item1 = classWriter0.key;
      itemArray0[5] = item1;
      Item item2 = classWriter0.newClassItem("*&$el.asm.ClasReGk");
      itemArray0[1] = item2;
      item2.intVal = 1199;
      itemArray0[3] = item2;
      Item item3 = new Item();
      itemArray0[3] = item3;
      Item item4 = new Item(1, item1);
      itemArray0[8] = item2;
      item4.set(1199);
      item3.longVal = (long) 1199;
      item0.intVal = 1199;
      item2.strVal2 = "*&$el.asm.ClasReGk";
      Item item5 = new Item(24, item2);
      itemArray0[6] = item5;
      item0.strVal1 = "*&$el.asm.ClasReGk";
      Item item6 = classWriter0.newFieldItem("*&$el.asm.ClasReGk", "*&$el.asm.ClasReGk", "*&$el.asm.ClasReGk");
      item6.strVal3 = "*&$el.asm.ClasReGk";
      item6.strVal1 = "*&$el.asm.ClasReGk";
      item6.set(1199);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2400), "*&$el.asm.ClasReGk", "*&$el.asm.ClasReGk", "*&$el.asm.ClasReGk", "*&$el.asm.ClasReGk");
      ByteVector byteVector0 = new ByteVector(24);
      byteVector0.put11(24, (-32));
      ByteVector byteVector1 = new ByteVector(24);
      fieldWriter0.put(byteVector1);
      fieldWriter0.visitAnnotation("*&$el.asm.ClasReGk", true);
      fieldWriter0.put(byteVector1);
      assertNotSame(byteVector1, byteVector0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.517893963159828
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-32));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "*&$el.asm.ClasReGk", "*&$el.asm.ClasReGk", "*&$el.asm.ClasReGk", "*&$el.asm.ClasReGk");
      fieldWriter0.getSize();
      Item[] itemArray0 = new Item[9];
      Item item0 = new Item();
      itemArray0[0] = item0;
      itemArray0[5] = item0;
      Item item1 = classWriter0.newClassItem("*&$el.asm.ClasReGk");
      itemArray0[1] = item1;
      item1.intVal = 1199;
      itemArray0[3] = item1;
      Item item2 = new Item();
      itemArray0[3] = item2;
      Item item3 = new Item(1, item0);
      itemArray0[8] = item1;
      item3.set(1199);
      item2.longVal = (long) 1199;
      item0.intVal = 1199;
      item1.strVal2 = "*&$el.asm.ClasReGk";
      item3.set(24);
      Item item4 = new Item(24, item1);
      itemArray0[6] = item4;
      item0.strVal1 = "*&$el.asm.ClasReGk";
      item0.set(24);
      Item item5 = classWriter0.newFieldItem("*&$el.asm.ClasReGk", "*&$el.asm.ClasReGk", "*&$el.asm.ClasReGk");
      item5.strVal3 = "*&$el.asm.ClasReGk";
      item5.strVal1 = "*&$el.asm.ClasReGk";
      item5.set(1199);
      classWriter0.version = 24;
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-2400), "*&$el.asm.ClasReGk", "*&$el.asm.ClasReGk", "*&$el.asm.ClasReGk", "*&$el.asm.ClasReGk");
      ByteVector byteVector0 = new ByteVector(24);
      ByteVector byteVector1 = byteVector0.put11(24, (-32));
      fieldWriter1.visitAnnotation("ut6", false);
      ByteVector byteVector2 = new ByteVector(24);
      fieldWriter1.put(byteVector2);
      assertNotSame(byteVector2, byteVector1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.addUninitializedType("", 0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", (Object) null);
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 2, "", "*M8v<[=8:W:Yd*mJV4N", "", (Object) null);
      Attribute attribute0 = new Attribute((String) null);
      fieldWriter1.visitAttribute(attribute0);
      Attribute attribute1 = new Attribute("*M8v<[=8:W:Yd*mJV4N");
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = (-4308);
      ClassWriter classWriter0 = new ClassWriter((-4308));
      String string0 = "V h\\Ir:GRz)";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "@+L~ta7[kP7>zynp", ")hK$;{zMi$-HHo1r f", "V hIr:GRz)", ")hK$;{zMi$-HHo1r f");
      String string1 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9859526183035509
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      Item[] itemArray0 = new Item[19];
      Item item0 = classWriter0.newClassItem("Signature");
      itemArray0[0] = item0;
      Item item1 = new Item();
      itemArray0[5] = item0;
      Item item2 = new Item(2, item0);
      itemArray0[1] = item1;
      item2.intVal = 1206;
      itemArray0[3] = item2;
      Item item3 = new Item();
      itemArray0[3] = item3;
      Item item4 = new Item(1, item1);
      itemArray0[8] = item4;
      item3.longVal = (long) 1;
      item0.intVal = 1206;
      item2.strVal2 = "Signature";
      Item item5 = new Item(24, item4);
      itemArray0[6] = item5;
      item0.strVal1 = "Signature";
      item2.longVal = (-1L);
      item5.set(1206);
      Item item6 = new Item(1206, item2);
      item6.strVal3 = "Signature";
      item6.strVal1 = "Signature";
      itemArray0[7] = item6;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2400), "Signature", "Signature", "Signature", "Signature");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.2621084966131715
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      ClassReader classReader0 = new ClassReader("wheel.asm.FieldWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 2);
      classReader0.accept((ClassVisitor) classWriter0, 2);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 1734);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, 1734, "wheel.asm.FieldWriter", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter");
      fieldWriter0.put(byteVector0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 864);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.8659992569610426
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1q~3");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dep%ected");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dep%ected");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dep%ected");
      ClassWriter classWriter0 = new ClassWriter(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=n:+z*iyAMWos");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Code");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "Code", "Dep%ected", (String) null, (Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.2885387096069334
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String string0 = "";
      classWriter0.addUninitializedType("", 0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", (Object) null);
      fieldWriter0.getSize();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-45);
      byteArray0[3] = (byte) (-20);
      byteArray0[3] = (byte) (-56);
      fieldWriter0.visitEnd();
      byteArray0[4] = (byte) (-56);
      byteArray0[6] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)75;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 4096);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-1558);
      ClassWriter classWriter0 = new ClassWriter((-1558));
      int int1 = (-503);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-503), "Mh", "jL:.dq`tdBeDjnOfM", "Mh", "Mh");
      fieldWriter0.next = fieldWriter0;
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, 13, "=fAy t5", "StackMap", "", "=fAy t5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.8361623253853443
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("LocalVariableTable0M^ }`");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "E~lUIPtq.NmWw");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2900), "", "", "", "");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      Object object0 = new Object();
      String string1 = "LocalVariableTable";
      MockFile mockFile0 = new MockFile("");
      String string2 = "M^ }`";
      MockFile.createTempFile("LocalVariableTable", "M^ }`", (File) mockFile0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", (String) null, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1957);
      String string0 = ".s.IFJDCS";
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 2, ".s.IFJDCS", ".s.IFJDCS", (String) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@4e4093
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0108643020548935
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(30);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 297, "SourceDebugExtension", "SourceDebugExtension", (String) null, "SourceDebugExtension");
      fieldWriter0.getSize();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
}
