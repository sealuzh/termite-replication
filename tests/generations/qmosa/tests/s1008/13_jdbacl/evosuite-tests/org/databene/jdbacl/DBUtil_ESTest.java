/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 16:02:51 GMT 2020
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Proxy;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.List;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.regex.PatternSyntaxException;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.sql.depend.ProviderList;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.sql.compile.FromBaseTable;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.compile.HasVariantValueNodeVisitor;
import org.apache.derby.impl.sql.compile.InsertNode;
import org.apache.derby.impl.sql.compile.QueryTreeNode;
import org.apache.derby.impl.sql.compile.TableName;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.store.raw.xact.TransactionTable;
import org.databene.commons.ErrorHandler;
import org.databene.commons.Level;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.DBExecutionResult;
import org.databene.jdbacl.DBUtil;
import org.databene.jdbacl.JDBCConnectData;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.databene.jdbacl.model.TableContainerSupport;
import org.databene.jdbacl.model.TableHolder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.jni.EmbeddedGDSImpl;
import org.firebirdsql.gds.impl.jni.NativeGDSImpl;
import org.firebirdsql.gds.impl.jni.isc_db_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.FBArray;
import org.firebirdsql.jdbc.FBConnection;
import org.h2.Driver;
import org.h2.engine.ConnectionInfo;
import org.h2.engine.SessionRemote;
import org.h2.tools.Csv;
import org.h2.tools.Recover;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGPooledConnection;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "_A";
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      assertNotNull(jdbcConnection0);
      assertFalse(jdbcConnection0.isClosed());
      
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate("_A", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-74);
      Recover recover0 = new Recover();
      assertNotNull(recover0);
      assertNull(recover0.getDatabasePath());
      
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqlscale);
      
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      assertNotNull(xSQLVAR1);
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqlscale);
      
      XSQLVAR xSQLVAR2 = xSQLVAR0.deepCopy();
      assertNotNull(xSQLVAR2);
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR1));
      assertNotSame(xSQLVAR0, xSQLVAR2);
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR2, xSQLVAR0);
      assertNotSame(xSQLVAR2, xSQLVAR1);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR2.sqlsubtype);
      assertEquals(0, xSQLVAR2.sqllen);
      assertEquals(0, xSQLVAR2.sqltype);
      assertEquals(0, xSQLVAR2.sqlscale);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null.env.properties");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "Kh|@`gZDTWvu |Y");
      assertTrue(boolean0);
      
      xSQLVAR1.copyFrom(xSQLVAR0);
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR2));
      assertNotSame(xSQLVAR0, xSQLVAR2);
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertNotSame(xSQLVAR1, xSQLVAR2);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqlscale);
      
      try { 
        DBUtil.getMetaData((String) null, true, true, true, true, "6qOnT'89-", true, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9495936677167384
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-35);
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      
      MockThread mockThread0 = new MockThread(thread0);
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(thread0, "select count(*) from ");
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotSame(mockThread0, mockThread1);
      assertEquals(3, stackTraceElementArray0.length);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, "XSDB4.D", (-3739L));
      assertNotNull(mockThread2);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      StackTraceElement[] stackTraceElementArray1 = mockThread0.getStackTrace();
      assertNotNull(stackTraceElementArray1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray1.length);
      
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread3 = new MockThread(threadGroup1, mockThread0, "COW_77)m.+!^+PB3AH");
      assertNotNull(mockThread3);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread1));
      
      Driver driver0 = new Driver();
      assertNotNull(driver0);
      assertTrue(driver0.jdbcCompliant());
      assertEquals(1, driver0.getMajorVersion());
      assertEquals(2, driver0.getMinorVersion());
      
      DBUtil.assertAllDbResourcesClosed(false);
      int int0 = DBUtil.getOpenStatementCount();
      assertEquals(0, int0);
      
      int int1 = DBUtil.getOpenConnectionCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9495936677167384
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HasVariantValueNodeVisitor hasVariantValueNodeVisitor0 = new HasVariantValueNodeVisitor();
      assertNotNull(hasVariantValueNodeVisitor0);
      assertFalse(hasVariantValueNodeVisitor0.stopTraversal());
      assertFalse(hasVariantValueNodeVisitor0.hasVariant());
      
      InsertNode insertNode0 = new InsertNode();
      assertNotNull(insertNode0);
      assertFalse(insertNode0.requiresDeferredProcessing());
      assertNull(insertNode0.executeStatementName());
      assertTrue(insertNode0.isPrivilegeCollectionRequired());
      assertEquals("INSERT", insertNode0.statementToString());
      assertEquals((-1), insertNode0.getBeginOffset());
      assertNull(insertNode0.executeSchemaName());
      assertEquals(0L, insertNode0.getRowEstimate());
      assertTrue(insertNode0.isAtomic());
      assertEquals("", insertNode0.toString());
      assertEquals((-1), insertNode0.getEndOffset());
      assertTrue(insertNode0.needsSavepoint());
      assertFalse(insertNode0.deferred);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      
      InsertNode insertNode1 = (InsertNode)insertNode0.accept(hasVariantValueNodeVisitor0);
      assertNotNull(insertNode1);
      assertFalse(hasVariantValueNodeVisitor0.stopTraversal());
      assertFalse(hasVariantValueNodeVisitor0.hasVariant());
      assertFalse(insertNode0.requiresDeferredProcessing());
      assertNull(insertNode0.executeStatementName());
      assertTrue(insertNode0.isPrivilegeCollectionRequired());
      assertEquals("INSERT", insertNode0.statementToString());
      assertEquals((-1), insertNode0.getBeginOffset());
      assertNull(insertNode0.executeSchemaName());
      assertEquals(0L, insertNode0.getRowEstimate());
      assertTrue(insertNode0.isAtomic());
      assertEquals("", insertNode0.toString());
      assertEquals((-1), insertNode0.getEndOffset());
      assertTrue(insertNode0.needsSavepoint());
      assertNull(insertNode1.executeStatementName());
      assertNull(insertNode1.executeSchemaName());
      assertTrue(insertNode1.isPrivilegeCollectionRequired());
      assertEquals("INSERT", insertNode1.statementToString());
      assertFalse(insertNode1.requiresDeferredProcessing());
      assertEquals(0L, insertNode1.getRowEstimate());
      assertEquals((-1), insertNode1.getBeginOffset());
      assertTrue(insertNode1.isAtomic());
      assertEquals("", insertNode1.toString());
      assertEquals((-1), insertNode1.getEndOffset());
      assertTrue(insertNode1.needsSavepoint());
      assertSame(insertNode0, insertNode1);
      assertSame(insertNode1, insertNode0);
      assertFalse(insertNode0.deferred);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      assertFalse(insertNode1.deferred);
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      
      DBUtil.assertAllDbResourcesClosed(false);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9495936677167384
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FromVTI fromVTI0 = new FromVTI();
      assertNotNull(fromVTI0);
      assertFalse(fromVTI0.isTargetTable());
      assertFalse(fromVTI0.forUpdate());
      assertTrue(fromVTI0.needsSpecialRCLBinding());
      assertFalse(fromVTI0.isDerbyStyleTableFunction());
      assertTrue(fromVTI0.isCompileTime());
      assertEquals(0L, fromVTI0.getRowEstimate());
      assertNull(fromVTI0.getName());
      assertFalse(fromVTI0.isOneRowScan());
      assertTrue(fromVTI0.supportsMultipleInstantiations());
      assertFalse(fromVTI0.markAsCursorTargetTable());
      assertEquals(0, fromVTI0.getLevel());
      assertEquals(1003, fromVTI0.getResultSetType());
      assertEquals((-1), fromVTI0.getEndOffset());
      assertTrue(fromVTI0.hasTableNumber());
      assertNull(fromVTI0.getCorrelationName());
      assertEquals(0, fromVTI0.getTableNumber());
      assertEquals("", fromVTI0.getBaseTableName());
      assertFalse(fromVTI0.isNotExists());
      assertEquals(0, fromVTI0.initialCapacity());
      assertFalse(fromVTI0.isMaterializable());
      assertEquals((-1), fromVTI0.getBeginOffset());
      assertFalse(fromVTI0.isOneRowResultSet());
      assertEquals(0.0F, fromVTI0.loadFactor(), 0.01F);
      assertTrue(fromVTI0.isPrivilegeCollectionRequired());
      assertFalse(fromVTI0.isConstructor());
      assertEquals("", fromVTI0.toString());
      assertNull(fromVTI0.getExposedName());
      assertEquals(0, fromVTI0.getResultSetNumber());
      assertEquals(7, fromVTI0.updateTargetLockMode());
      assertFalse(fromVTI0.isFlattenableJoinNode());
      assertFalse(fromVTI0.considerSortAvoidancePath());
      assertFalse(fromVTI0.isBaseTable());
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      
      Driver driver0 = Driver.load();
      assertNotNull(driver0);
      assertEquals(2, driver0.getMinorVersion());
      assertTrue(driver0.jdbcCompliant());
      assertEquals(1, driver0.getMajorVersion());
      
      DBUtil.assertAllDbResourcesClosed(false);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      assertNotNull(errorMessages0);
      
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      assertNotNull(xSQLVAR1);
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      
      xSQLVAR1.sqllen = 0;
      xSQLVAR1.copyFrom(xSQLVAR0, true);
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      
      xSQLVAR1.sqllen = 0;
      xSQLVAR0.relname = null;
      xSQLVAR1.aliasname = "g2";
      xSQLVAR1.copyFrom(xSQLVAR0, true);
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      
      xSQLVAR1.sqldata = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Synonym");
      assertFalse(boolean0);
      
      xSQLVAR1.copyFrom(xSQLVAR0);
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      
      DBUtil.checkReadOnly(",aW^4gQY$EUQVA", false);
      try { 
        DBUtil.parseResultRow(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      assertNotNull(tableContainer0);
      assertNull(tableContainer0.getDoc());
      assertNull(tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      
      int int0 = 90026;
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData((String) null, (String) null, (String) null, "Error closing connection");
      assertNotNull(jDBCConnectData0);
      
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC URL specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      assertNotNull(errorMessages0);
      
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      assertNotNull(xSQLVAR1);
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqlscale);
      
      byte[] byteArray0 = xSQLVAR0.encodeString((byte[]) null, (String) null, " readVersion: ");
      assertNull(byteArray0);
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR1));
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      
      xSQLVAR1.sqllen = 0;
      xSQLVAR1.sqllen = 0;
      // Undeclared exception!
      try { 
        DBUtil.closeResultSetAndStatement(errorMessages0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error getting statement from result set
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ProviderList providerList0 = new ProviderList();
      assertNotNull(providerList0);
      assertEquals(0, providerList0.size());
      assertTrue(providerList0.isEmpty());
      
      TableContainer tableContainer0 = new TableContainer("D7~O]t_Z&3;,R");
      assertNotNull(tableContainer0);
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals("D7~O]t_Z&3;,R", tableContainer0.getName());
      assertNull(tableContainer0.getDoc());
      
      DBTable dBTable0 = tableContainer0.getTable("D7~O]t_Z&3;,R");
      assertNull(dBTable0);
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals("D7~O]t_Z&3;,R", tableContainer0.getName());
      assertNull(tableContainer0.getDoc());
      
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      assertNotNull(columnDescriptorList0);
      assertTrue(columnDescriptorList0.isEmpty());
      assertEquals(0, columnDescriptorList0.size());
      
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0);
      assertNotNull(versionNumber0);
      assertTrue(columnDescriptorList0.isEmpty());
      assertEquals(0, columnDescriptorList0.size());
      
      VersionNumber versionNumber1 = VersionNumber.valueOf((String) null);
      assertNotNull(versionNumber1);
      assertFalse(versionNumber1.equals((Object)versionNumber0));
      assertNotSame(versionNumber1, versionNumber0);
      
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("2>P/10 H-R_BB6M", "iLj;OG,XjVV*/]", versionNumber1);
      assertNotNull(defaultDatabase0);
      assertFalse(versionNumber1.equals((Object)versionNumber0));
      assertFalse(defaultDatabase0.isImportedUKs());
      assertNull(defaultDatabase0.getDoc());
      assertFalse(defaultDatabase0.isImportedChecks());
      assertEquals("database", defaultDatabase0.getObjectType());
      assertNull(defaultDatabase0.getTableInclusionPattern());
      assertFalse(defaultDatabase0.isImportedIndexes());
      assertEquals("iLj;OG,XjVV*/]", defaultDatabase0.getDatabaseProductName());
      assertNull(defaultDatabase0.getUser());
      assertEquals("2>P/10 H-R_BB6M", defaultDatabase0.getName());
      assertNull(defaultDatabase0.getTableExclusionPattern());
      assertFalse(defaultDatabase0.isImportedSequences());
      
      // Undeclared exception!
      try { 
        DBUtil.getConnectData("iLj;OG,XjVV*/]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'iLj;OG,XjVV*_/].env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-74);
      Recover recover0 = new Recover();
      assertNotNull(recover0);
      assertNull(recover0.getDatabasePath());
      
      Connection connection0 = recover0.getLobConnection();
      assertNull(connection0);
      assertNull(recover0.getDatabasePath());
      
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate("P-+Uz", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      
      xSQLVAR0.sqlscale = 0;
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      assertNotNull(xSQLVAR1);
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqltype);
      
      xSQLVAR1.sqllen = 0;
      xSQLVAR1.sqlname = null;
      XSQLVAR xSQLVAR2 = xSQLVAR1.deepCopy();
      assertNotNull(xSQLVAR2);
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR0));
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertNotSame(xSQLVAR1, xSQLVAR2);
      assertNotSame(xSQLVAR2, xSQLVAR1);
      assertNotSame(xSQLVAR2, xSQLVAR0);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR2.sqlsubtype);
      assertEquals(0, xSQLVAR2.sqlscale);
      assertEquals(0, xSQLVAR2.sqllen);
      assertEquals(0, xSQLVAR2.sqltype);
      
      XSQLVAR xSQLVAR3 = xSQLVAR2.deepCopy();
      assertNotNull(xSQLVAR3);
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR3.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR3.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR3.equals((Object)xSQLVAR2));
      assertNotSame(xSQLVAR1, xSQLVAR3);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertNotSame(xSQLVAR1, xSQLVAR2);
      assertNotSame(xSQLVAR2, xSQLVAR3);
      assertNotSame(xSQLVAR2, xSQLVAR1);
      assertNotSame(xSQLVAR2, xSQLVAR0);
      assertNotSame(xSQLVAR3, xSQLVAR1);
      assertNotSame(xSQLVAR3, xSQLVAR0);
      assertNotSame(xSQLVAR3, xSQLVAR2);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR2.sqlsubtype);
      assertEquals(0, xSQLVAR2.sqlscale);
      assertEquals(0, xSQLVAR2.sqllen);
      assertEquals(0, xSQLVAR2.sqltype);
      assertEquals(0, xSQLVAR3.sqllen);
      assertEquals(0, xSQLVAR3.sqltype);
      assertEquals(0, xSQLVAR3.sqlscale);
      assertEquals(0, xSQLVAR3.sqlsubtype);
      
      xSQLVAR2.sqlname = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      xSQLVAR0.copyFrom(xSQLVAR2);
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR3));
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR3));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR3));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR0));
      assertNotSame(xSQLVAR0, xSQLVAR3);
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR0, xSQLVAR2);
      assertNotSame(xSQLVAR1, xSQLVAR3);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertNotSame(xSQLVAR1, xSQLVAR2);
      assertNotSame(xSQLVAR2, xSQLVAR3);
      assertNotSame(xSQLVAR2, xSQLVAR1);
      assertNotSame(xSQLVAR2, xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR2.sqlsubtype);
      assertEquals(0, xSQLVAR2.sqlscale);
      assertEquals(0, xSQLVAR2.sqllen);
      assertEquals(0, xSQLVAR2.sqltype);
      
      // Undeclared exception!
      try { 
        DBUtil.getMetaData((String) null, true, true, false, true, (String) null, false, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'null.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      assertNotNull(jdbcConnection0);
      assertFalse(jdbcConnection0.isClosed());
      
      Class<Driver> class0 = Driver.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("--COSH(double)", class0, (Connection) jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      assertNotNull(tableContainer0);
      assertNull(tableContainer0.getDoc());
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getName());
      
      TableContainerSupport tableContainerSupport0 = new TableContainerSupport();
      assertNotNull(tableContainerSupport0);
      
      List<DBTable> list0 = tableContainer0.getTables(false);
      assertNotNull(list0);
      assertNull(tableContainer0.getDoc());
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<DBTable> list1 = tableContainerSupport0.getTables();
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list1, list0);
      
      DBTable dBTable0 = tableContainer0.getTable("D7~O]t_Z&3;,R");
      assertNull(dBTable0);
      assertNull(tableContainer0.getDoc());
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getName());
      
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      assertNotNull(columnDescriptorList0);
      assertEquals(0, columnDescriptorList0.size());
      assertTrue(columnDescriptorList0.isEmpty());
      
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0);
      assertNotNull(versionNumber0);
      assertEquals(0, columnDescriptorList0.size());
      assertTrue(columnDescriptorList0.isEmpty());
      
      VersionNumber versionNumber1 = VersionNumber.valueOf("Wr");
      assertNotNull(versionNumber1);
      assertFalse(versionNumber1.equals((Object)versionNumber0));
      assertNotSame(versionNumber1, versionNumber0);
      
      // Undeclared exception!
      try { 
        DBUtil.assertAllDbResourcesClosed(true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // There are unclosed database resources: 1 result set(s)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      assertNotNull(tableContainer0);
      assertNull(tableContainer0.getDoc());
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals("", tableContainer0.getName());
      
      DBSchema dBSchema0 = tableContainer0.getSchema();
      assertNull(dBSchema0);
      assertNull(tableContainer0.getDoc());
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals("", tableContainer0.getName());
      
      TableContainerSupport tableContainerSupport0 = new TableContainerSupport();
      assertNotNull(tableContainerSupport0);
      
      List<DBTable> list0 = tableContainer0.getTables(false);
      assertNotNull(list0);
      assertNull(tableContainer0.getDoc());
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals("", tableContainer0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      TableContainer tableContainer1 = new TableContainer("", (CompositeDBObject<? extends DBObject>) null);
      assertNotNull(tableContainer1);
      assertTrue(tableContainer1.equals((Object)tableContainer0));
      assertNull(tableContainer1.getDoc());
      assertEquals("", tableContainer1.getName());
      assertEquals("container", tableContainer1.getObjectType());
      
      List<DBTable> list1 = tableContainer1.getTables(false);
      assertNotNull(list1);
      assertTrue(tableContainer1.equals((Object)tableContainer0));
      assertTrue(list1.equals((Object)list0));
      assertNull(tableContainer1.getDoc());
      assertEquals("", tableContainer1.getName());
      assertEquals("container", tableContainer1.getObjectType());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(tableContainer1, tableContainer0);
      assertNotSame(list1, list0);
      
      TableContainer tableContainer2 = new TableContainer("prepareCall(");
      assertNotNull(tableContainer2);
      assertFalse(tableContainer2.equals((Object)tableContainer0));
      assertFalse(tableContainer2.equals((Object)tableContainer1));
      assertEquals("container", tableContainer2.getObjectType());
      assertEquals("prepareCall(", tableContainer2.getName());
      assertNull(tableContainer2.getDoc());
      
      DBTable dBTable0 = tableContainer2.getTable("D7~O]t_Z&3;,R");
      assertNull(dBTable0);
      assertFalse(tableContainer2.equals((Object)tableContainer0));
      assertFalse(tableContainer2.equals((Object)tableContainer1));
      assertEquals("container", tableContainer2.getObjectType());
      assertEquals("prepareCall(", tableContainer2.getName());
      assertNull(tableContainer2.getDoc());
      assertNotSame(tableContainer2, tableContainer0);
      assertNotSame(tableContainer2, tableContainer1);
      
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      assertNotNull(columnDescriptorList0);
      assertEquals(0, columnDescriptorList0.size());
      assertTrue(columnDescriptorList0.isEmpty());
      
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0);
      assertNotNull(versionNumber0);
      assertEquals(0, columnDescriptorList0.size());
      assertTrue(columnDescriptorList0.isEmpty());
      
      VersionNumber versionNumber1 = VersionNumber.valueOf("prepareCall(");
      assertNotNull(versionNumber1);
      assertFalse(versionNumber1.equals((Object)versionNumber0));
      assertNotSame(versionNumber1, versionNumber0);
      
      SessionRemote sessionRemote0 = new SessionRemote();
      assertNotNull(sessionRemote0);
      assertEquals(6, sessionRemote0.getClientVersion());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      
      Connection connection0 = sessionRemote0.getLobConnection();
      assertNull(connection0);
      assertEquals(6, sessionRemote0.getClientVersion());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      
      Class<FBConnection> class0 = FBConnection.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      assertNotNull(errorHandler0);
      assertTrue(errorHandler0.isLoggingStackTrace());
      assertEquals(Level.fatal, errorHandler0.getDefaultLevel());
      assertEquals(Level.fatal, errorHandler0.getLevel());
      
      // Undeclared exception!
      try { 
        DBUtil.runScript("prepareCall(", "", (Connection) null, false, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: prepareCall(
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Recover recover0 = new Recover();
      assertNotNull(recover0);
      assertNull(recover0.getDatabasePath());
      
      Recover recover1 = new Recover();
      assertNotNull(recover1);
      assertFalse(recover1.equals((Object)recover0));
      assertNull(recover1.getDatabasePath());
      
      Recover recover2 = new Recover();
      assertNotNull(recover2);
      assertFalse(recover2.equals((Object)recover0));
      assertFalse(recover2.equals((Object)recover1));
      assertNull(recover2.getDatabasePath());
      
      Connection connection0 = recover2.getLobConnection();
      assertNull(connection0);
      assertFalse(recover2.equals((Object)recover0));
      assertFalse(recover2.equals((Object)recover1));
      assertNull(recover2.getDatabasePath());
      assertNotSame(recover2, recover0);
      assertNotSame(recover2, recover1);
      
      Connection connection1 = recover2.getLobConnection();
      assertNull(connection1);
      assertFalse(recover2.equals((Object)recover0));
      assertFalse(recover2.equals((Object)recover1));
      assertNull(recover2.getDatabasePath());
      assertNotSame(recover2, recover0);
      assertNotSame(recover2, recover1);
      
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("=j\"z8y$?%W(7ElNJoy", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      assertNotNull(sessionRemote0);
      assertFalse(sessionRemote0.isClustered());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      
      String string0 = "Ihc;/oN";
      // Undeclared exception!
      try { 
        DBUtil.connect("Fx~r```p47\"cA", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'Fx~r```p47\"cA.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      assertNotNull(sessionRemote0);
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      
      boolean boolean0 = sessionRemote0.autoReconnect((-1788));
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertFalse(boolean0);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      
      Connection connection0 = sessionRemote0.getLobConnection();
      assertNull(connection0);
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      
      boolean boolean1 = sessionRemote0.autoReconnect((-561));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertFalse(boolean1);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      
      SessionRemote sessionRemote1 = new SessionRemote();
      assertNotNull(sessionRemote1);
      assertFalse(sessionRemote1.equals((Object)sessionRemote0));
      assertEquals("", sessionRemote1.getDatabasePath());
      assertEquals(0, sessionRemote1.getLastReconnect());
      assertEquals(65536, sessionRemote1.getMaxLengthInplaceLob());
      assertEquals(0, sessionRemote1.getCurrentId());
      assertFalse(sessionRemote1.isClustered());
      assertEquals(6, sessionRemote1.getClientVersion());
      assertEquals(0, sessionRemote1.getPowerOffCount());
      assertTrue(sessionRemote1.isClosed());
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      
      sessionRemote0.autoCommitIfCluster();
      assertFalse(sessionRemote0.equals((Object)sessionRemote1));
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertNotSame(sessionRemote0, sessionRemote1);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      
      // Undeclared exception!
      try { 
        DBUtil.query("--", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Recover recover0 = new Recover();
      assertNotNull(recover0);
      assertNull(recover0.getDatabasePath());
      
      Recover recover1 = new Recover();
      assertNotNull(recover1);
      assertFalse(recover1.equals((Object)recover0));
      assertNull(recover1.getDatabasePath());
      
      Recover recover2 = new Recover();
      assertNotNull(recover2);
      assertFalse(recover2.equals((Object)recover0));
      assertFalse(recover2.equals((Object)recover1));
      assertNull(recover2.getDatabasePath());
      
      Connection connection0 = recover2.getLobConnection();
      assertNull(connection0);
      assertFalse(recover2.equals((Object)recover0));
      assertFalse(recover2.equals((Object)recover1));
      assertNull(recover2.getDatabasePath());
      assertNotSame(recover2, recover0);
      assertNotSame(recover2, recover1);
      
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly("No JDBC URL specified", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: No JDBC URL specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-74);
      ProviderList providerList0 = new ProviderList();
      assertNotNull(providerList0);
      assertEquals(0, providerList0.size());
      assertTrue(providerList0.isEmpty());
      
      InsertNode insertNode0 = new InsertNode();
      assertNotNull(insertNode0);
      assertEquals("", insertNode0.toString());
      assertTrue(insertNode0.isPrivilegeCollectionRequired());
      assertEquals((-1), insertNode0.getEndOffset());
      assertTrue(insertNode0.needsSavepoint());
      assertFalse(insertNode0.requiresDeferredProcessing());
      assertTrue(insertNode0.isAtomic());
      assertEquals("INSERT", insertNode0.statementToString());
      assertEquals((-1), insertNode0.getBeginOffset());
      assertNull(insertNode0.executeStatementName());
      assertEquals(0L, insertNode0.getRowEstimate());
      assertNull(insertNode0.executeSchemaName());
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      assertFalse(insertNode0.deferred);
      
      long[] longArray0 = new long[18];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 1;
      IndexRowGenerator[] indexRowGeneratorArray0 = new IndexRowGenerator[6];
      IndexRowGenerator indexRowGenerator0 = new IndexRowGenerator();
      assertNotNull(indexRowGenerator0);
      assertEquals(268, indexRowGenerator0.getTypeFormatId());
      
      indexRowGeneratorArray0[0] = indexRowGenerator0;
      boolean boolean0 = DBUtil.available("wa ({r]W!", "+AvLF5q7N6C}?n'xCNk", "XBCM4.S", "Ex");
      assertFalse(boolean0);
      
      Proxy proxy0 = (Proxy)DBUtil.createLoggingStatementHandler((Statement) null, false);
      assertNotNull(proxy0);
      
      // Undeclared exception!
      try { 
        DBUtil.close((Statement) proxy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal exception in method: public void org.databene.jdbacl.proxy.LoggingStatementHandler.close() throws java.sql.SQLException
         //
         verifyException("org.databene.commons.ExceptionMapper", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FromVTI fromVTI0 = new FromVTI();
      assertNotNull(fromVTI0);
      assertFalse(fromVTI0.isMaterializable());
      assertEquals(0, fromVTI0.getResultSetNumber());
      assertEquals(0, fromVTI0.getTableNumber());
      assertEquals(1003, fromVTI0.getResultSetType());
      assertTrue(fromVTI0.hasTableNumber());
      assertNull(fromVTI0.getCorrelationName());
      assertEquals((-1), fromVTI0.getBeginOffset());
      assertFalse(fromVTI0.isBaseTable());
      assertFalse(fromVTI0.isDerbyStyleTableFunction());
      assertEquals(7, fromVTI0.updateTargetLockMode());
      assertFalse(fromVTI0.isTargetTable());
      assertEquals("", fromVTI0.toString());
      assertFalse(fromVTI0.considerSortAvoidancePath());
      assertFalse(fromVTI0.forUpdate());
      assertFalse(fromVTI0.isFlattenableJoinNode());
      assertFalse(fromVTI0.isOneRowResultSet());
      assertTrue(fromVTI0.supportsMultipleInstantiations());
      assertFalse(fromVTI0.markAsCursorTargetTable());
      assertNull(fromVTI0.getExposedName());
      assertTrue(fromVTI0.needsSpecialRCLBinding());
      assertFalse(fromVTI0.isNotExists());
      assertTrue(fromVTI0.isCompileTime());
      assertEquals(0L, fromVTI0.getRowEstimate());
      assertNull(fromVTI0.getName());
      assertTrue(fromVTI0.isPrivilegeCollectionRequired());
      assertFalse(fromVTI0.isOneRowScan());
      assertEquals(0, fromVTI0.getLevel());
      assertEquals(0.0F, fromVTI0.loadFactor(), 0.01F);
      assertEquals("", fromVTI0.getBaseTableName());
      assertEquals((-1), fromVTI0.getEndOffset());
      assertFalse(fromVTI0.isConstructor());
      assertEquals(0, fromVTI0.initialCapacity());
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = DBUtil.getOpenResultSetCount();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FromVTI fromVTI0 = new FromVTI();
      assertNotNull(fromVTI0);
      assertFalse(fromVTI0.markAsCursorTargetTable());
      assertFalse(fromVTI0.isNotExists());
      assertEquals((-1), fromVTI0.getEndOffset());
      assertEquals(0, fromVTI0.getLevel());
      assertNull(fromVTI0.getExposedName());
      assertEquals("", fromVTI0.getBaseTableName());
      assertTrue(fromVTI0.supportsMultipleInstantiations());
      assertFalse(fromVTI0.isOneRowScan());
      assertNull(fromVTI0.getName());
      assertEquals(7, fromVTI0.updateTargetLockMode());
      assertFalse(fromVTI0.isDerbyStyleTableFunction());
      assertTrue(fromVTI0.isCompileTime());
      assertFalse(fromVTI0.considerSortAvoidancePath());
      assertFalse(fromVTI0.forUpdate());
      assertFalse(fromVTI0.isTargetTable());
      assertFalse(fromVTI0.isBaseTable());
      assertFalse(fromVTI0.isFlattenableJoinNode());
      assertFalse(fromVTI0.isConstructor());
      assertFalse(fromVTI0.isMaterializable());
      assertEquals(0, fromVTI0.getResultSetNumber());
      assertEquals(1003, fromVTI0.getResultSetType());
      assertEquals("", fromVTI0.toString());
      assertEquals(0, fromVTI0.initialCapacity());
      assertEquals(0L, fromVTI0.getRowEstimate());
      assertEquals((-1), fromVTI0.getBeginOffset());
      assertNull(fromVTI0.getCorrelationName());
      assertTrue(fromVTI0.needsSpecialRCLBinding());
      assertEquals(0, fromVTI0.getTableNumber());
      assertTrue(fromVTI0.isPrivilegeCollectionRequired());
      assertEquals(0.0F, fromVTI0.loadFactor(), 0.01F);
      assertTrue(fromVTI0.hasTableNumber());
      assertFalse(fromVTI0.isOneRowResultSet());
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      
      boolean boolean0 = fromVTI0.isAtomic();
      assertFalse(fromVTI0.markAsCursorTargetTable());
      assertFalse(fromVTI0.isNotExists());
      assertEquals((-1), fromVTI0.getEndOffset());
      assertEquals(0, fromVTI0.getLevel());
      assertNull(fromVTI0.getExposedName());
      assertEquals("", fromVTI0.getBaseTableName());
      assertTrue(fromVTI0.supportsMultipleInstantiations());
      assertFalse(fromVTI0.isOneRowScan());
      assertNull(fromVTI0.getName());
      assertEquals(7, fromVTI0.updateTargetLockMode());
      assertFalse(fromVTI0.isDerbyStyleTableFunction());
      assertTrue(fromVTI0.isCompileTime());
      assertFalse(fromVTI0.considerSortAvoidancePath());
      assertFalse(fromVTI0.forUpdate());
      assertFalse(fromVTI0.isTargetTable());
      assertFalse(fromVTI0.isBaseTable());
      assertFalse(fromVTI0.isFlattenableJoinNode());
      assertFalse(fromVTI0.isConstructor());
      assertFalse(fromVTI0.isMaterializable());
      assertEquals(0, fromVTI0.getResultSetNumber());
      assertEquals(1003, fromVTI0.getResultSetType());
      assertEquals("", fromVTI0.toString());
      assertEquals(0, fromVTI0.initialCapacity());
      assertEquals(0L, fromVTI0.getRowEstimate());
      assertEquals((-1), fromVTI0.getBeginOffset());
      assertNull(fromVTI0.getCorrelationName());
      assertTrue(fromVTI0.needsSpecialRCLBinding());
      assertEquals(0, fromVTI0.getTableNumber());
      assertTrue(fromVTI0.isPrivilegeCollectionRequired());
      assertEquals(0.0F, fromVTI0.loadFactor(), 0.01F);
      assertTrue(fromVTI0.hasTableNumber());
      assertFalse(fromVTI0.isOneRowResultSet());
      assertFalse(boolean0);
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      
      FBArray fBArray0 = new FBArray();
      assertNotNull(fBArray0);
      assertNull(fBArray0.getBaseTypeName());
      
      ResultSet resultSet0 = fBArray0.getResultSet();
      assertNull(resultSet0);
      assertNull(fBArray0.getBaseTypeName());
      
      Proxy proxy0 = (Proxy)DBUtil.createLoggingResultSet((ResultSet) null, (Statement) null);
      assertNotNull(proxy0);
      
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "w=g?\"ncg)0$Q", false, (-3092), 0, 90026);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      assertNotNull(errorMessages0);
      
      SessionRemote sessionRemote0 = new SessionRemote();
      assertNotNull(sessionRemote0);
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      
      Connection connection0 = sessionRemote0.getLobConnection();
      assertNull(connection0);
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      
      sessionRemote0.autoCommitIfCluster();
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      
      try { 
        DBUtil.nextLine(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      assertNotNull(errorMessages0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "pa0R%W@v!QuB:jb0?X2", (-742L));
      assertNotNull(mockThread0);
      
      MockThread.dumpStack();
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "pa0R%W@v!QuB:jb0?X2");
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1092);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      int int0 = scheduledThreadPoolExecutor0.getLargestPoolSize();
      assertEquals(0, int0);
      
      MockThread mockThread2 = new MockThread("----des not have a property");
      assertNotNull(mockThread2);
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) mockThread2, (-2292L), timeUnit0);
      assertNotNull(scheduledFuture0);
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null.env.properties");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "----des not have a property");
      assertTrue(boolean0);
      
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      assertNotNull(xSQLVAR1);
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqltype);
      
      xSQLVAR1.copyFrom(xSQLVAR0);
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqltype);
      
      try { 
        DBUtil.getMetaData((String) null, true, true, true, false, "org.firebirdsql.jdbc.field.FBCachedBlobField", false, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      assertNotNull(xSQLVAR1);
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqlscale);
      
      xSQLVAR1.sqllen = 0;
      xSQLVAR1.sqlname = null;
      XSQLVAR xSQLVAR2 = xSQLVAR1.deepCopy();
      assertNotNull(xSQLVAR2);
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR1));
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertNotSame(xSQLVAR1, xSQLVAR2);
      assertNotSame(xSQLVAR2, xSQLVAR0);
      assertNotSame(xSQLVAR2, xSQLVAR1);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR2.sqltype);
      assertEquals(0, xSQLVAR2.sqllen);
      assertEquals(0, xSQLVAR2.sqlsubtype);
      assertEquals(0, xSQLVAR2.sqlscale);
      
      XSQLVAR xSQLVAR3 = xSQLVAR2.deepCopy();
      assertNotNull(xSQLVAR3);
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR3.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR3.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR3.equals((Object)xSQLVAR1));
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertNotSame(xSQLVAR1, xSQLVAR3);
      assertNotSame(xSQLVAR1, xSQLVAR2);
      assertNotSame(xSQLVAR2, xSQLVAR3);
      assertNotSame(xSQLVAR2, xSQLVAR0);
      assertNotSame(xSQLVAR2, xSQLVAR1);
      assertNotSame(xSQLVAR3, xSQLVAR0);
      assertNotSame(xSQLVAR3, xSQLVAR2);
      assertNotSame(xSQLVAR3, xSQLVAR1);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR2.sqltype);
      assertEquals(0, xSQLVAR2.sqllen);
      assertEquals(0, xSQLVAR2.sqlsubtype);
      assertEquals(0, xSQLVAR2.sqlscale);
      assertEquals(0, xSQLVAR3.sqlsubtype);
      assertEquals(0, xSQLVAR3.sqllen);
      assertEquals(0, xSQLVAR3.sqltype);
      assertEquals(0, xSQLVAR3.sqlscale);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null.env.properties");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "' found");
      assertTrue(boolean0);
      
      xSQLVAR3.copyFrom(xSQLVAR2);
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR3));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR3));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR3.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR3.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR3.equals((Object)xSQLVAR1));
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertNotSame(xSQLVAR1, xSQLVAR3);
      assertNotSame(xSQLVAR1, xSQLVAR2);
      assertNotSame(xSQLVAR2, xSQLVAR3);
      assertNotSame(xSQLVAR2, xSQLVAR0);
      assertNotSame(xSQLVAR2, xSQLVAR1);
      assertNotSame(xSQLVAR3, xSQLVAR0);
      assertNotSame(xSQLVAR3, xSQLVAR2);
      assertNotSame(xSQLVAR3, xSQLVAR1);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR2.sqltype);
      assertEquals(0, xSQLVAR2.sqllen);
      assertEquals(0, xSQLVAR2.sqlsubtype);
      assertEquals(0, xSQLVAR2.sqlscale);
      assertEquals(0, xSQLVAR3.sqlsubtype);
      assertEquals(0, xSQLVAR3.sqllen);
      assertEquals(0, xSQLVAR3.sqltype);
      assertEquals(0, xSQLVAR3.sqlscale);
      
      // Undeclared exception!
      try { 
        DBUtil.getMetaData((String) null, false, false, true, false, "=~K&ER2]|*d2", false, false);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 9
         // =~K&ER2]|*d2
         //          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      assertNotNull(errorMessages0);
      
      Level level0 = Level.warn;
      ErrorHandler errorHandler0 = new ErrorHandler("Y9ih_jOpb) ", level0);
      assertNotNull(errorHandler0);
      assertEquals(Level.fatal, errorHandler0.getDefaultLevel());
      assertEquals(Level.warn, errorHandler0.getLevel());
      assertTrue(errorHandler0.isLoggingStackTrace());
      
      Level level1 = Level.ignore;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Y9ih_jOpb) .env.properties");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "Y9ih_jOpb) ");
      assertTrue(boolean0);
      
      ErrorHandler.setDefaultLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      
      Level level2 = Level.info;
      ErrorHandler.setDefaultLevel(level2);
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      ErrorHandler.setDefaultLevel(level2);
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      JDBCConnectData jDBCConnectData0 = DBUtil.getConnectData("Y9ih_jOpb) ");
      assertNotNull(jDBCConnectData0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      
      SessionRemote sessionRemote0 = new SessionRemote();
      assertNotNull(sessionRemote0);
      assertFalse(sessionRemote0.isClustered());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      
      Connection connection0 = sessionRemote0.getLobConnection();
      assertNull(connection0);
      assertFalse(sessionRemote0.isClustered());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      assertNotNull(xSQLVAR1);
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqlscale);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null.env.properties");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "Database query did not return a result: ");
      assertTrue(boolean0);
      
      xSQLVAR1.copyFrom(xSQLVAR0);
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqlscale);
      
      boolean boolean1 = DBUtil.existsEnvironment((String) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      assertNotNull(xSQLVAR1);
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      
      xSQLVAR1.sqllen = 0;
      xSQLVAR1.sqlname = null;
      XSQLVAR xSQLVAR2 = xSQLVAR1.deepCopy();
      assertNotNull(xSQLVAR2);
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR1));
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertNotSame(xSQLVAR1, xSQLVAR2);
      assertNotSame(xSQLVAR2, xSQLVAR0);
      assertNotSame(xSQLVAR2, xSQLVAR1);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR2.sqlsubtype);
      assertEquals(0, xSQLVAR2.sqltype);
      assertEquals(0, xSQLVAR2.sqllen);
      assertEquals(0, xSQLVAR2.sqlscale);
      
      XSQLVAR xSQLVAR3 = xSQLVAR2.deepCopy();
      assertNotNull(xSQLVAR3);
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR3.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR3.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR3.equals((Object)xSQLVAR0));
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertNotSame(xSQLVAR1, xSQLVAR3);
      assertNotSame(xSQLVAR1, xSQLVAR2);
      assertNotSame(xSQLVAR2, xSQLVAR0);
      assertNotSame(xSQLVAR2, xSQLVAR3);
      assertNotSame(xSQLVAR2, xSQLVAR1);
      assertNotSame(xSQLVAR3, xSQLVAR2);
      assertNotSame(xSQLVAR3, xSQLVAR1);
      assertNotSame(xSQLVAR3, xSQLVAR0);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR2.sqlsubtype);
      assertEquals(0, xSQLVAR2.sqltype);
      assertEquals(0, xSQLVAR2.sqllen);
      assertEquals(0, xSQLVAR2.sqlscale);
      assertEquals(0, xSQLVAR3.sqlsubtype);
      assertEquals(0, xSQLVAR3.sqllen);
      assertEquals(0, xSQLVAR3.sqltype);
      assertEquals(0, xSQLVAR3.sqlscale);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null.env.properties");
      xSQLVAR2.sqlname = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "' found");
      assertTrue(boolean0);
      
      xSQLVAR0.copyFrom(xSQLVAR2);
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR3));
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR3));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR3));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR1));
      assertNotSame(xSQLVAR0, xSQLVAR3);
      assertNotSame(xSQLVAR0, xSQLVAR2);
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertNotSame(xSQLVAR1, xSQLVAR3);
      assertNotSame(xSQLVAR1, xSQLVAR2);
      assertNotSame(xSQLVAR2, xSQLVAR0);
      assertNotSame(xSQLVAR2, xSQLVAR3);
      assertNotSame(xSQLVAR2, xSQLVAR1);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR2.sqlsubtype);
      assertEquals(0, xSQLVAR2.sqltype);
      assertEquals(0, xSQLVAR2.sqllen);
      assertEquals(0, xSQLVAR2.sqlscale);
      
      try { 
        DBUtil.getMetaData((String) null, true, true, false, true, (String) null, false, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      assertNotNull(jdbcConnection0);
      assertFalse(jdbcConnection0.isClosed());
      
      ProviderList providerList0 = new ProviderList();
      assertNotNull(providerList0);
      assertEquals(0, providerList0.size());
      assertTrue(providerList0.isEmpty());
      
      InsertNode insertNode0 = new InsertNode();
      assertNotNull(insertNode0);
      assertNull(insertNode0.executeSchemaName());
      assertEquals(0L, insertNode0.getRowEstimate());
      assertTrue(insertNode0.isAtomic());
      assertTrue(insertNode0.isPrivilegeCollectionRequired());
      assertEquals("INSERT", insertNode0.statementToString());
      assertFalse(insertNode0.requiresDeferredProcessing());
      assertNull(insertNode0.executeStatementName());
      assertEquals("", insertNode0.toString());
      assertEquals((-1), insertNode0.getEndOffset());
      assertTrue(insertNode0.needsSavepoint());
      assertEquals((-1), insertNode0.getBeginOffset());
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      assertFalse(insertNode0.deferred);
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      
      IndexRowGenerator indexRowGenerator0 = new IndexRowGenerator();
      assertNotNull(indexRowGenerator0);
      assertEquals(268, indexRowGenerator0.getTypeFormatId());
      
      int[] intArray0 = new int[0];
      IndexRowGenerator indexRowGenerator1 = new IndexRowGenerator("qC8@X)F\"u8pr", true, false, intArray0, (boolean[]) null, (byte) (-74));
      assertNotNull(indexRowGenerator1);
      assertFalse(indexRowGenerator1.equals((Object)indexRowGenerator0));
      assertEquals(268, indexRowGenerator1.getTypeFormatId());
      assertTrue(indexRowGenerator1.isUnique());
      assertEquals("qC8@X)F\"u8pr", indexRowGenerator1.indexType());
      assertEquals((-74), indexRowGenerator1.numberOfOrderedColumns());
      assertFalse(indexRowGenerator1.isUniqueWithDuplicateNulls());
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      IndexRowGenerator indexRowGenerator2 = new IndexRowGenerator(indexRowGenerator0);
      assertNotNull(indexRowGenerator2);
      assertEquals(268, indexRowGenerator0.getTypeFormatId());
      assertEquals(268, indexRowGenerator2.getTypeFormatId());
      
      IndexRowGenerator indexRowGenerator3 = new IndexRowGenerator();
      assertNotNull(indexRowGenerator3);
      assertEquals(268, indexRowGenerator3.getTypeFormatId());
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1;
      intArray1[1] = 2;
      intArray1[2] = (int) (byte) (-74);
      IndexRowGenerator indexRowGenerator4 = new IndexRowGenerator("--RuUY{", false, intArray1, (boolean[]) null, 0);
      assertNotNull(indexRowGenerator4);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(indexRowGenerator4.equals((Object)indexRowGenerator2));
      assertFalse(indexRowGenerator4.equals((Object)indexRowGenerator3));
      assertFalse(indexRowGenerator4.equals((Object)indexRowGenerator1));
      assertFalse(indexRowGenerator4.equals((Object)indexRowGenerator0));
      assertFalse(indexRowGenerator4.isUniqueWithDuplicateNulls());
      assertEquals("--RuUY{", indexRowGenerator4.indexType());
      assertEquals(268, indexRowGenerator4.getTypeFormatId());
      assertEquals(0, indexRowGenerator4.numberOfOrderedColumns());
      assertFalse(indexRowGenerator4.isUnique());
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {1, 2, (-74)}, intArray1);
      
      IndexRowGenerator indexRowGenerator5 = new IndexRowGenerator("yqD8", true, intArray1, (boolean[]) null, 1003);
      assertNotNull(indexRowGenerator5);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(indexRowGenerator5.equals((Object)indexRowGenerator0));
      assertFalse(indexRowGenerator5.equals((Object)indexRowGenerator3));
      assertFalse(indexRowGenerator5.equals((Object)indexRowGenerator4));
      assertFalse(indexRowGenerator5.equals((Object)indexRowGenerator2));
      assertFalse(indexRowGenerator5.equals((Object)indexRowGenerator1));
      assertTrue(indexRowGenerator5.isUnique());
      assertFalse(indexRowGenerator5.isUniqueWithDuplicateNulls());
      assertEquals("yqD8", indexRowGenerator5.indexType());
      assertEquals(268, indexRowGenerator5.getTypeFormatId());
      assertEquals(1003, indexRowGenerator5.numberOfOrderedColumns());
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {1, 2, (-74)}, intArray1);
      
      // Undeclared exception!
      try { 
        DBUtil.queryScalar("yqD8", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ProviderList providerList0 = new ProviderList();
      assertNotNull(providerList0);
      assertEquals(0, providerList0.size());
      assertTrue(providerList0.isEmpty());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/databene/w\\ 7#(+!5/+#.env.properties");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DBUtil.getConnectData("w 7#(+!5/+#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'w 7#(+!5/+#.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      assertNotNull(sessionRemote0);
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      
      Connection connection0 = sessionRemote0.getLobConnection();
      assertNull(connection0);
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      
      // Undeclared exception!
      try { 
        DBUtil.parseAndSimplifyResultSet((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(session0).isAutoCommit();
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      assertNotNull(jdbcConnection0);
      assertFalse(jdbcConnection0.isClosed());
      
      boolean boolean0 = jdbcConnection0.getAutoCommit();
      assertFalse(jdbcConnection0.isClosed());
      assertFalse(boolean0);
      
      try { 
        DBUtil.prepareStatement((Connection) jdbcConnection0, ":x", false, 111, 111, 111);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // java.lang.String@0000000002
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.2206072645530173
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      assertNotNull(errorMessages0);
      
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      assertNotNull(xSQLVAR1);
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqltype);
      
      xSQLVAR1.sqllen = 0;
      xSQLVAR1.sqllen = 0;
      xSQLVAR0.relname = null;
      xSQLVAR1.aliasname = "g2";
      xSQLVAR1.copyFrom(xSQLVAR0, true);
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqltype);
      
      xSQLVAR1.sqldata = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Synonym");
      assertFalse(boolean0);
      
      xSQLVAR1.copyFrom(xSQLVAR0);
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqltype);
      
      Boolean boolean1 = new Boolean("Synonym");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      try { 
        DBUtil.format(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Level level0 = Level.warn;
      ErrorHandler errorHandler0 = new ErrorHandler("j\"6!33f", level0);
      assertNotNull(errorHandler0);
      assertTrue(errorHandler0.isLoggingStackTrace());
      assertEquals(Level.fatal, errorHandler0.getDefaultLevel());
      assertEquals(Level.warn, errorHandler0.getLevel());
      
      ErrorHandler.setDefaultLevel(level0);
      Level level1 = Level.ignore;
      ErrorHandler.setDefaultLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      
      Level level2 = Level.error;
      Level level3 = Level.ignore;
      ErrorHandler.setDefaultLevel(level3);
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level0));
      assertNotSame(level3, level2);
      assertSame(level3, level1);
      assertNotSame(level3, level0);
      
      ErrorHandler.setDefaultLevel(level2);
      assertFalse(level2.equals((Object)level3));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotSame(level2, level3);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      Level level4 = Level.info;
      ErrorHandler.setDefaultLevel(level4);
      assertFalse(level4.equals((Object)level1));
      assertFalse(level4.equals((Object)level2));
      assertFalse(level4.equals((Object)level0));
      assertFalse(level4.equals((Object)level3));
      assertNotSame(level4, level1);
      assertNotSame(level4, level2);
      assertNotSame(level4, level0);
      assertNotSame(level4, level3);
      
      // Undeclared exception!
      try { 
        DBUtil.runScript("null", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      assertNotNull(errorMessages0);
      
      SessionRemote sessionRemote0 = new SessionRemote();
      assertNotNull(sessionRemote0);
      assertEquals(6, sessionRemote0.getClientVersion());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertEquals(0, sessionRemote0.getCurrentId());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      
      // Undeclared exception!
      try { 
        DBUtil.closeResultSetAndStatement(errorMessages0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error getting statement from result set
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      assertNotNull(errorMessages0);
      
      System.setCurrentTimeMillis(2803L);
      DBUtil.close((ResultSet) errorMessages0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9554471413937666
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Level level0 = Level.fatal;
      ErrorHandler.setDefaultLevel((Level) null);
      Class<PGPooledConnection> class0 = PGPooledConnection.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      assertNotNull(errorHandler0);
      assertNull(errorHandler0.getDefaultLevel());
      assertEquals(Level.fatal, errorHandler0.getLevel());
      assertTrue(errorHandler0.isLoggingStackTrace());
      
      Level level1 = Level.warn;
      ErrorHandler.setDefaultLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      
      ErrorHandler.setDefaultLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      
      ErrorHandler.setDefaultLevel(level0);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      
      // Undeclared exception!
      try { 
        DBUtil.runScript("y;", (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      assertNotNull(simpleResultSet0);
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(0, simpleResultSet0.getColumnCount());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertFalse(simpleResultSet0.isClosed());
      assertEquals(0, simpleResultSet0.getRow());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertFalse(simpleResultSet0.wasNull());
      
      Object[] objectArray0 = DBUtil.nextLine(simpleResultSet0);
      assertNull(objectArray0);
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertEquals(0, simpleResultSet0.getRow());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertFalse(simpleResultSet0.wasNull());
      assertTrue(simpleResultSet0.isClosed());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      assertNotNull(errorHandler0);
      assertEquals(Level.fatal, errorHandler0.getLevel());
      assertTrue(errorHandler0.isLoggingStackTrace());
      assertEquals(Level.fatal, errorHandler0.getDefaultLevel());
      
      Level level0 = Level.ignore;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.databene.commons.converter.ArrayConverter");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      boolean boolean1 = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "MlZ*o&-Cs5t3P3gp0");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Level level1 = Level.warn;
      ErrorHandler.setDefaultLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      
      ErrorHandler.setDefaultLevel(level0);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      
      try { 
        DBUtil.runScript("org.databene.commons.converter.ArrayConverter", "y;", (Connection) null, true, errorHandler0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ProviderList providerList0 = new ProviderList();
      assertNotNull(providerList0);
      assertTrue(providerList0.isEmpty());
      assertEquals(0, providerList0.size());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("y;");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "GW=I-}/zsJUN<dR3");
      assertTrue(boolean0);
      
      Level level0 = Level.ignore;
      ErrorHandler errorHandler0 = new ErrorHandler("TRANSACTION_TABLE", level0);
      assertNotNull(errorHandler0);
      assertEquals(Level.fatal, errorHandler0.getDefaultLevel());
      assertEquals(Level.ignore, errorHandler0.getLevel());
      assertTrue(errorHandler0.isLoggingStackTrace());
      
      Level level1 = Level.trace;
      Level level2 = Level.info;
      errorHandler0.setLoggingStackTrace(true);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertEquals(Level.fatal, errorHandler0.getDefaultLevel());
      assertEquals(Level.ignore, errorHandler0.getLevel());
      assertTrue(errorHandler0.isLoggingStackTrace());
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      
      ErrorHandler.setDefaultLevel(level2);
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      Level level3 = Level.debug;
      ErrorHandler.setDefaultLevel(level3);
      assertFalse(level3.equals((Object)level1));
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level0));
      assertNotSame(level3, level1);
      assertNotSame(level3, level2);
      assertNotSame(level3, level0);
      
      ErrorHandler.setDefaultLevel(level1);
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level3));
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level1, level3);
      
      try { 
        DBUtil.runScript("y;", "y;", (Connection) null, false, errorHandler0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0549201679861442
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      assertNotNull(errorMessages0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("K6dlx", "sO", (String) null, "L>6+BhpN~{45", (String) null, "K6dlx");
      assertNotNull(jDBCConnectData0);
      
      JDBCConnectData jDBCConnectData1 = new JDBCConnectData("K6dlx", "K6dlx", "user", "K6dlx", (String) null, "L>6+BhpN~{45");
      assertNotNull(jDBCConnectData1);
      assertFalse(jDBCConnectData1.equals((Object)jDBCConnectData0));
      
      DBUtil.close((Statement) null);
      try { 
        DBUtil.parseResultSet(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ProviderList providerList0 = new ProviderList();
      assertNotNull(providerList0);
      assertEquals(0, providerList0.size());
      assertTrue(providerList0.isEmpty());
      
      Level level0 = Level.trace;
      ErrorHandler errorHandler0 = new ErrorHandler("y;", level0);
      assertNotNull(errorHandler0);
      assertEquals(Level.fatal, errorHandler0.getDefaultLevel());
      assertEquals(Level.trace, errorHandler0.getLevel());
      assertTrue(errorHandler0.isLoggingStackTrace());
      
      Level level1 = Level.debug;
      ErrorHandler.setDefaultLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      
      errorHandler0.setLoggingStackTrace(false);
      assertFalse(level0.equals((Object)level1));
      assertEquals(Level.debug, errorHandler0.getDefaultLevel());
      assertFalse(errorHandler0.isLoggingStackTrace());
      assertEquals(Level.trace, errorHandler0.getLevel());
      assertNotSame(level0, level1);
      
      ErrorHandler.setDefaultLevel(level0);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, "w 7#(+!5/+#", (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      assertNotNull(simpleResultSet0);
      assertEquals(0, simpleResultSet0.getRow());
      assertFalse(simpleResultSet0.isClosed());
      assertEquals(0, simpleResultSet0.getColumnCount());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertFalse(simpleResultSet0.wasNull());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertEquals(0, simpleResultSet0.getFetchSize());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      Object[] objectArray0 = DBUtil.currentLine(simpleResultSet0);
      assertNotNull(objectArray0);
      assertEquals(0, simpleResultSet0.getRow());
      assertFalse(simpleResultSet0.isClosed());
      assertEquals(0, simpleResultSet0.getColumnCount());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertFalse(simpleResultSet0.wasNull());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(0, objectArray0.length);
      
      Statement statement0 = DBUtil.getStatement(simpleResultSet0);
      assertNull(statement0);
      assertEquals(0, simpleResultSet0.getRow());
      assertFalse(simpleResultSet0.isClosed());
      assertEquals(0, simpleResultSet0.getColumnCount());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertFalse(simpleResultSet0.wasNull());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertEquals(0, simpleResultSet0.getFetchSize());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      assertNotNull(tableContainer0);
      assertNull(tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getDoc());
      
      List<DBTable> list0 = tableContainer0.getTables(false);
      assertNotNull(list0);
      assertNull(tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getDoc());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      DBTable dBTable0 = tableContainer0.getTable("qh+[Pxb{GSm");
      assertNull(dBTable0);
      assertNull(tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getDoc());
      
      // Undeclared exception!
      try { 
        DBUtil.dependencyOrderedTables((TableHolder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ProviderList providerList0 = new ProviderList();
      assertNotNull(providerList0);
      assertTrue(providerList0.isEmpty());
      assertEquals(0, providerList0.size());
      
      long[] longArray0 = new long[6];
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("iLj;OG,XjVV*/]", "--CK--Expected a row.", (VersionNumber) null);
      assertNotNull(defaultDatabase0);
      assertFalse(defaultDatabase0.isImportedChecks());
      assertNull(defaultDatabase0.getUser());
      assertEquals("database", defaultDatabase0.getObjectType());
      assertFalse(defaultDatabase0.isImportedSequences());
      assertEquals("--CK--Expected a row.", defaultDatabase0.getDatabaseProductName());
      assertNull(defaultDatabase0.getTableInclusionPattern());
      assertNull(defaultDatabase0.getTableExclusionPattern());
      assertNull(defaultDatabase0.getDoc());
      assertFalse(defaultDatabase0.isImportedUKs());
      assertFalse(defaultDatabase0.isImportedIndexes());
      assertEquals("iLj;OG,XjVV*/]", defaultDatabase0.getName());
      
      List<DBTable> list0 = DBUtil.dependencyOrderedTables(defaultDatabase0);
      assertNotNull(list0);
      assertFalse(defaultDatabase0.isImportedChecks());
      assertNull(defaultDatabase0.getUser());
      assertEquals("database", defaultDatabase0.getObjectType());
      assertFalse(defaultDatabase0.isImportedSequences());
      assertEquals("--CK--Expected a row.", defaultDatabase0.getDatabaseProductName());
      assertNull(defaultDatabase0.getTableInclusionPattern());
      assertNull(defaultDatabase0.getTableExclusionPattern());
      assertNull(defaultDatabase0.getDoc());
      assertFalse(defaultDatabase0.isImportedUKs());
      assertFalse(defaultDatabase0.isImportedIndexes());
      assertEquals("iLj;OG,XjVV*/]", defaultDatabase0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      assertNotNull(jdbcConnection0);
      assertFalse(jdbcConnection0.isClosed());
      
      ErrorHandler errorHandler0 = null;
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("--COSH(double)", 'V', (Connection) jdbcConnection0, false, (ErrorHandler) null);
      assertNotNull(dBExecutionResult0);
      assertFalse(jdbcConnection0.isClosed());
      
      String string0 = null;
      char char0 = 'K';
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DBUtil.runScript("--y;_^N<3+dGWN 6p1Lw", (String) null, '$', (Connection) jdbcConnection0, true, (ErrorHandler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: --y;_^N<3+dGWN 6p1Lw
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      assertNotNull(constraintDescriptorList0);
      assertEquals(0, constraintDescriptorList0.size());
      assertFalse(constraintDescriptorList0.getScanned());
      assertTrue(constraintDescriptorList0.isEmpty());
      
      String string0 = "CALL DATABASE()";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CALL DATABASE()");
      assertNotNull(defaultDBTable0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("CALL DATABASE()", defaultDBTable0.getName());
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = defaultDBTable0.getPrimaryKeyConstraint();
      assertNull(dBPrimaryKeyConstraint0);
      assertNull(defaultDBTable0.getDoc());
      assertEquals("table", defaultDBTable0.getObjectType());
      assertEquals("CALL DATABASE()", defaultDBTable0.getName());
      
      // Undeclared exception!
      try { 
        DBUtil.containsMandatoryColumn((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Recover recover0 = new Recover();
      assertNotNull(recover0);
      assertNull(recover0.getDatabasePath());
      
      String[] stringArray0 = new String[0];
      recover0.runTool(stringArray0);
      assertNull(recover0.getDatabasePath());
      assertEquals(0, stringArray0.length);
      
      Connection connection0 = recover0.getLobConnection();
      assertNull(connection0);
      assertNull(recover0.getDatabasePath());
      
      Csv csv0 = Csv.getInstance();
      assertNotNull(csv0);
      assertNull(csv0.getRowSeparatorWrite());
      assertEquals('\"', csv0.getEscapeCharacter());
      assertEquals(",", csv0.getFieldSeparatorWrite());
      assertEquals("", csv0.getNullString());
      assertEquals(',', csv0.getFieldSeparatorRead());
      assertEquals('\"', csv0.getFieldDelimiter());
      
      Csv csv1 = Csv.getInstance();
      assertNotNull(csv1);
      assertFalse(csv1.equals((Object)csv0));
      assertEquals(",", csv1.getFieldSeparatorWrite());
      assertEquals(',', csv1.getFieldSeparatorRead());
      assertEquals('\"', csv1.getFieldDelimiter());
      assertEquals("", csv1.getNullString());
      assertNull(csv1.getRowSeparatorWrite());
      assertEquals('\"', csv1.getEscapeCharacter());
      assertNotSame(csv1, csv0);
      
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv1);
      assertNotNull(simpleResultSet0);
      assertFalse(csv1.equals((Object)csv0));
      assertEquals(",", csv1.getFieldSeparatorWrite());
      assertEquals(',', csv1.getFieldSeparatorRead());
      assertEquals('\"', csv1.getFieldDelimiter());
      assertEquals("", csv1.getNullString());
      assertNull(csv1.getRowSeparatorWrite());
      assertEquals('\"', csv1.getEscapeCharacter());
      assertFalse(simpleResultSet0.wasNull());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertEquals(0, simpleResultSet0.getColumnCount());
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(0, simpleResultSet0.getRow());
      assertTrue(simpleResultSet0.isClosed());
      
      DBUtil.closeResultSetAndStatement(simpleResultSet0);
      assertFalse(csv1.equals((Object)csv0));
      assertEquals(",", csv1.getFieldSeparatorWrite());
      assertEquals(',', csv1.getFieldSeparatorRead());
      assertEquals('\"', csv1.getFieldDelimiter());
      assertEquals("", csv1.getNullString());
      assertNull(csv1.getRowSeparatorWrite());
      assertEquals('\"', csv1.getEscapeCharacter());
      assertFalse(simpleResultSet0.wasNull());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(0, simpleResultSet0.getRow());
      assertTrue(simpleResultSet0.isClosed());
      assertNotSame(csv1, csv0);
      
      List<Object[]> list0 = DBUtil.parseResultSet(simpleResultSet0);
      assertNotNull(list0);
      assertFalse(csv1.equals((Object)csv0));
      assertEquals(",", csv1.getFieldSeparatorWrite());
      assertEquals(',', csv1.getFieldSeparatorRead());
      assertEquals('\"', csv1.getFieldDelimiter());
      assertEquals("", csv1.getNullString());
      assertNull(csv1.getRowSeparatorWrite());
      assertEquals('\"', csv1.getEscapeCharacter());
      assertFalse(simpleResultSet0.wasNull());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(0, simpleResultSet0.getRow());
      assertTrue(simpleResultSet0.isClosed());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(csv1, csv0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Database query did not return a result: ");
      assertFalse(boolean0);
      
      boolean boolean1 = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "--+fI1D3f]");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      assertNotNull(simpleResultSet0);
      assertFalse(simpleResultSet0.wasNull());
      assertFalse(simpleResultSet0.isClosed());
      assertEquals(0, simpleResultSet0.getColumnCount());
      assertEquals(0, simpleResultSet0.getRow());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      
      Object object0 = DBUtil.parseAndSimplifyResultSet(simpleResultSet0);
      assertNotNull(object0);
      assertFalse(simpleResultSet0.wasNull());
      assertTrue(simpleResultSet0.isClosed());
      assertEquals(0, simpleResultSet0.getRow());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0549201679861442
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      assertNotNull(errorMessages0);
      
      try { 
        DBUtil.parseAndSimplifyResultSet(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      assertNotNull(tableContainer0);
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals("", tableContainer0.getName());
      assertNull(tableContainer0.getDoc());
      
      DBSchema dBSchema0 = tableContainer0.getSchema();
      assertNull(dBSchema0);
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals("", tableContainer0.getName());
      assertNull(tableContainer0.getDoc());
      
      TableContainerSupport tableContainerSupport0 = new TableContainerSupport();
      assertNotNull(tableContainerSupport0);
      
      List<DBTable> list0 = tableContainer0.getTables(false);
      assertNotNull(list0);
      assertEquals("container", tableContainer0.getObjectType());
      assertEquals("", tableContainer0.getName());
      assertNull(tableContainer0.getDoc());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      TableContainer tableContainer1 = new TableContainer("%V?[f%[$69HCfulg8", (CompositeDBObject<? extends DBObject>) null);
      assertNotNull(tableContainer1);
      assertFalse(tableContainer1.equals((Object)tableContainer0));
      assertNull(tableContainer1.getDoc());
      assertEquals("%V?[f%[$69HCfulg8", tableContainer1.getName());
      assertEquals("container", tableContainer1.getObjectType());
      
      List<DBTable> list1 = tableContainer1.getTables(false);
      assertNotNull(list1);
      assertFalse(tableContainer1.equals((Object)tableContainer0));
      assertTrue(list1.equals((Object)list0));
      assertNull(tableContainer1.getDoc());
      assertEquals("%V?[f%[$69HCfulg8", tableContainer1.getName());
      assertEquals("container", tableContainer1.getObjectType());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(tableContainer1, tableContainer0);
      assertNotSame(list1, list0);
      
      TableContainer tableContainer2 = new TableContainer("prepareCall(");
      assertNotNull(tableContainer2);
      assertFalse(tableContainer2.equals((Object)tableContainer1));
      assertFalse(tableContainer2.equals((Object)tableContainer0));
      assertNull(tableContainer2.getDoc());
      assertEquals("container", tableContainer2.getObjectType());
      assertEquals("prepareCall(", tableContainer2.getName());
      
      DBTable dBTable0 = tableContainer2.getTable("D7~O]t_Z&3;,R");
      assertNull(dBTable0);
      assertFalse(tableContainer2.equals((Object)tableContainer1));
      assertFalse(tableContainer2.equals((Object)tableContainer0));
      assertNull(tableContainer2.getDoc());
      assertEquals("container", tableContainer2.getObjectType());
      assertEquals("prepareCall(", tableContainer2.getName());
      assertNotSame(tableContainer2, tableContainer1);
      assertNotSame(tableContainer2, tableContainer0);
      
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      assertNotNull(columnDescriptorList0);
      assertEquals(0, columnDescriptorList0.size());
      assertTrue(columnDescriptorList0.isEmpty());
      
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0);
      assertNotNull(versionNumber0);
      assertEquals(0, columnDescriptorList0.size());
      assertTrue(columnDescriptorList0.isEmpty());
      
      VersionNumber versionNumber1 = VersionNumber.valueOf("prepareCall(");
      assertNotNull(versionNumber1);
      assertFalse(versionNumber1.equals((Object)versionNumber0));
      assertNotSame(versionNumber1, versionNumber0);
      
      SessionRemote sessionRemote0 = new SessionRemote();
      assertNotNull(sessionRemote0);
      assertTrue(sessionRemote0.isClosed());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(1, SessionRemote.STATUS_OK);
      
      Connection connection0 = sessionRemote0.getLobConnection();
      assertNull(connection0);
      assertTrue(sessionRemote0.isClosed());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(1, SessionRemote.STATUS_OK);
      
      Class<FBConnection> class0 = FBConnection.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      assertNotNull(errorHandler0);
      assertEquals(Level.fatal, errorHandler0.getLevel());
      assertTrue(errorHandler0.isLoggingStackTrace());
      assertEquals(Level.fatal, errorHandler0.getDefaultLevel());
      
      // Undeclared exception!
      try { 
        DBUtil.runScript("prepareCall(", "", (Connection) null, false, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: prepareCall(
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Recover recover0 = new Recover();
      assertNotNull(recover0);
      assertNull(recover0.getDatabasePath());
      
      Recover recover1 = new Recover();
      assertNotNull(recover1);
      assertFalse(recover1.equals((Object)recover0));
      assertNull(recover1.getDatabasePath());
      
      Recover recover2 = new Recover();
      assertNotNull(recover2);
      assertFalse(recover2.equals((Object)recover1));
      assertFalse(recover2.equals((Object)recover0));
      assertNull(recover2.getDatabasePath());
      
      Connection connection0 = recover2.getLobConnection();
      assertNull(connection0);
      assertFalse(recover2.equals((Object)recover1));
      assertFalse(recover2.equals((Object)recover0));
      assertNull(recover2.getDatabasePath());
      assertNotSame(recover2, recover1);
      assertNotSame(recover2, recover0);
      
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("Database query failed: ", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      assertNotNull(sessionRemote0);
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      
      Connection connection0 = sessionRemote0.getLobConnection();
      assertNull(connection0);
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      
      FromVTI fromVTI0 = new FromVTI();
      assertNotNull(fromVTI0);
      assertEquals(0, fromVTI0.initialCapacity());
      assertEquals("", fromVTI0.toString());
      assertTrue(fromVTI0.isPrivilegeCollectionRequired());
      assertNull(fromVTI0.getExposedName());
      assertFalse(fromVTI0.isConstructor());
      assertEquals("", fromVTI0.getBaseTableName());
      assertEquals((-1), fromVTI0.getEndOffset());
      assertFalse(fromVTI0.isNotExists());
      assertFalse(fromVTI0.isOneRowResultSet());
      assertEquals(0, fromVTI0.getTableNumber());
      assertEquals(0.0F, fromVTI0.loadFactor(), 0.01F);
      assertTrue(fromVTI0.needsSpecialRCLBinding());
      assertNull(fromVTI0.getCorrelationName());
      assertTrue(fromVTI0.hasTableNumber());
      assertEquals((-1), fromVTI0.getBeginOffset());
      assertEquals(0L, fromVTI0.getRowEstimate());
      assertTrue(fromVTI0.isCompileTime());
      assertNull(fromVTI0.getName());
      assertFalse(fromVTI0.considerSortAvoidancePath());
      assertFalse(fromVTI0.isBaseTable());
      assertFalse(fromVTI0.isOneRowScan());
      assertEquals(7, fromVTI0.updateTargetLockMode());
      assertFalse(fromVTI0.isTargetTable());
      assertFalse(fromVTI0.forUpdate());
      assertEquals(0, fromVTI0.getLevel());
      assertEquals(1003, fromVTI0.getResultSetType());
      assertEquals(0, fromVTI0.getResultSetNumber());
      assertFalse(fromVTI0.isMaterializable());
      assertFalse(fromVTI0.markAsCursorTargetTable());
      assertTrue(fromVTI0.supportsMultipleInstantiations());
      assertFalse(fromVTI0.isFlattenableJoinNode());
      assertFalse(fromVTI0.isDerbyStyleTableFunction());
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      
      Properties properties0 = fromVTI0.getProperties();
      assertNull(properties0);
      assertEquals(0, fromVTI0.initialCapacity());
      assertEquals("", fromVTI0.toString());
      assertTrue(fromVTI0.isPrivilegeCollectionRequired());
      assertNull(fromVTI0.getExposedName());
      assertFalse(fromVTI0.isConstructor());
      assertEquals("", fromVTI0.getBaseTableName());
      assertEquals((-1), fromVTI0.getEndOffset());
      assertFalse(fromVTI0.isNotExists());
      assertFalse(fromVTI0.isOneRowResultSet());
      assertEquals(0, fromVTI0.getTableNumber());
      assertEquals(0.0F, fromVTI0.loadFactor(), 0.01F);
      assertTrue(fromVTI0.needsSpecialRCLBinding());
      assertNull(fromVTI0.getCorrelationName());
      assertTrue(fromVTI0.hasTableNumber());
      assertEquals((-1), fromVTI0.getBeginOffset());
      assertEquals(0L, fromVTI0.getRowEstimate());
      assertTrue(fromVTI0.isCompileTime());
      assertNull(fromVTI0.getName());
      assertFalse(fromVTI0.considerSortAvoidancePath());
      assertFalse(fromVTI0.isBaseTable());
      assertFalse(fromVTI0.isOneRowScan());
      assertEquals(7, fromVTI0.updateTargetLockMode());
      assertFalse(fromVTI0.isTargetTable());
      assertFalse(fromVTI0.forUpdate());
      assertEquals(0, fromVTI0.getLevel());
      assertEquals(1003, fromVTI0.getResultSetType());
      assertEquals(0, fromVTI0.getResultSetNumber());
      assertFalse(fromVTI0.isMaterializable());
      assertFalse(fromVTI0.markAsCursorTargetTable());
      assertTrue(fromVTI0.supportsMultipleInstantiations());
      assertFalse(fromVTI0.isFlattenableJoinNode());
      assertFalse(fromVTI0.isDerbyStyleTableFunction());
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      
      int int0 = sessionRemote0.getNextId();
      assertEquals(1, sessionRemote0.getCurrentId());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(0, int0);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      assertNotNull(errorHandler0);
      assertTrue(errorHandler0.isLoggingStackTrace());
      assertEquals(Level.fatal, errorHandler0.getLevel());
      assertEquals(Level.fatal, errorHandler0.getDefaultLevel());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      boolean boolean0 = DBUtil.available("org.apache.derby.impl.sql.execute.rts.RealMaterializedResultSetStatistics", "org.apache.derby.impl.sql.execute.rts.RealMaterializedResultSetStatistics", "#WRqQk4?UN2", "One-row database query returned multiple rows: ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.9554471413937666
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FromVTI fromVTI0 = new FromVTI();
      assertNotNull(fromVTI0);
      assertFalse(fromVTI0.isOneRowResultSet());
      assertTrue(fromVTI0.supportsMultipleInstantiations());
      assertEquals((-1), fromVTI0.getEndOffset());
      assertNull(fromVTI0.getExposedName());
      assertFalse(fromVTI0.isNotExists());
      assertEquals(0, fromVTI0.initialCapacity());
      assertFalse(fromVTI0.markAsCursorTargetTable());
      assertEquals("", fromVTI0.getBaseTableName());
      assertFalse(fromVTI0.isBaseTable());
      assertFalse(fromVTI0.isDerbyStyleTableFunction());
      assertFalse(fromVTI0.considerSortAvoidancePath());
      assertFalse(fromVTI0.isOneRowScan());
      assertEquals(0, fromVTI0.getLevel());
      assertFalse(fromVTI0.forUpdate());
      assertTrue(fromVTI0.isCompileTime());
      assertEquals(7, fromVTI0.updateTargetLockMode());
      assertFalse(fromVTI0.isTargetTable());
      assertFalse(fromVTI0.isFlattenableJoinNode());
      assertEquals(0, fromVTI0.getResultSetNumber());
      assertEquals(0, fromVTI0.getTableNumber());
      assertFalse(fromVTI0.isMaterializable());
      assertNull(fromVTI0.getCorrelationName());
      assertFalse(fromVTI0.isConstructor());
      assertEquals(0L, fromVTI0.getRowEstimate());
      assertEquals(1003, fromVTI0.getResultSetType());
      assertNull(fromVTI0.getName());
      assertEquals("", fromVTI0.toString());
      assertTrue(fromVTI0.isPrivilegeCollectionRequired());
      assertEquals(0.0F, fromVTI0.loadFactor(), 0.01F);
      assertTrue(fromVTI0.hasTableNumber());
      assertTrue(fromVTI0.needsSpecialRCLBinding());
      assertEquals((-1), fromVTI0.getBeginOffset());
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      
      Level level0 = Level.warn;
      ErrorHandler errorHandler0 = new ErrorHandler("' found", level0);
      assertNotNull(errorHandler0);
      assertTrue(errorHandler0.isLoggingStackTrace());
      assertEquals(Level.warn, errorHandler0.getLevel());
      assertEquals(Level.fatal, errorHandler0.getDefaultLevel());
      
      ErrorHandler.setDefaultLevel(level0);
      Level level1 = Level.fatal;
      ErrorHandler.setDefaultLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      
      Level level2 = Level.ignore;
      ErrorHandler.setDefaultLevel(level2);
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      Level level3 = Level.error;
      Level level4 = Level.error;
      ErrorHandler.setDefaultLevel(level4);
      assertFalse(level4.equals((Object)level2));
      assertFalse(level4.equals((Object)level1));
      assertFalse(level4.equals((Object)level0));
      assertNotSame(level4, level2);
      assertSame(level4, level3);
      assertNotSame(level4, level1);
      assertNotSame(level4, level0);
      
      Level level5 = Level.info;
      ErrorHandler.setDefaultLevel(level5);
      assertFalse(level5.equals((Object)level3));
      assertFalse(level5.equals((Object)level1));
      assertFalse(level5.equals((Object)level0));
      assertFalse(level5.equals((Object)level2));
      assertFalse(level5.equals((Object)level4));
      assertNotSame(level5, level3);
      assertNotSame(level5, level1);
      assertNotSame(level5, level0);
      assertNotSame(level5, level2);
      assertNotSame(level5, level4);
      
      ErrorHandler.setDefaultLevel(level3);
      assertFalse(level3.equals((Object)level1));
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level5));
      assertFalse(level3.equals((Object)level0));
      assertSame(level3, level4);
      assertNotSame(level3, level1);
      assertNotSame(level3, level2);
      assertNotSame(level3, level5);
      assertNotSame(level3, level0);
      
      // Undeclared exception!
      try { 
        DBUtil.runScript("' found", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Level level0 = Level.ignore;
      ErrorHandler errorHandler0 = new ErrorHandler("TRANSACTION_TABLE", level0);
      assertNotNull(errorHandler0);
      assertEquals(Level.fatal, errorHandler0.getDefaultLevel());
      assertEquals(Level.ignore, errorHandler0.getLevel());
      assertTrue(errorHandler0.isLoggingStackTrace());
      
      Level level1 = Level.info;
      ErrorHandler.setDefaultLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      
      Level level2 = Level.error;
      ErrorHandler.setDefaultLevel(level2);
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      Level level3 = Level.fatal;
      ErrorHandler.setDefaultLevel(level3);
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level1));
      assertNotSame(level3, level0);
      assertNotSame(level3, level2);
      assertNotSame(level3, level1);
      
      ErrorHandler.setDefaultLevel(level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level3));
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level0, level3);
      
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("--Expected a row.", (Connection) null, true, errorHandler0);
      assertNotNull(dBExecutionResult0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level3));
      assertEquals(Level.ignore, errorHandler0.getLevel());
      assertTrue(errorHandler0.isLoggingStackTrace());
      assertEquals(Level.ignore, errorHandler0.getDefaultLevel());
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level0, level3);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      assertNotNull(jdbcConnection0);
      assertFalse(jdbcConnection0.isClosed());
      
      String string0 = ".#~:}";
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, 'A', (Connection) jdbcConnection0, false, (ErrorHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      assertNotNull(tableContainer0);
      assertEquals("", tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getDoc());
      
      FBArray fBArray0 = new FBArray();
      assertNotNull(fBArray0);
      assertNull(fBArray0.getBaseTypeName());
      
      ResultSet resultSet0 = fBArray0.getResultSet((-4672L), 3846);
      assertNull(resultSet0);
      assertNull(fBArray0.getBaseTypeName());
      
      // Undeclared exception!
      try { 
        DBUtil.format((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      assertNotNull(simpleResultSet0);
      assertEquals(0, simpleResultSet0.getColumnCount());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(0, simpleResultSet0.getRow());
      assertFalse(simpleResultSet0.isClosed());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertFalse(simpleResultSet0.wasNull());
      assertEquals(1, simpleResultSet0.getHoldability());
      
      String string0 = DBUtil.format(simpleResultSet0);
      assertNotNull(string0);
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(0, simpleResultSet0.getRow());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertTrue(simpleResultSet0.isClosed());
      assertFalse(simpleResultSet0.wasNull());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertEquals("", string0);
      
      FBArray fBArray0 = new FBArray();
      assertNotNull(fBArray0);
      assertNull(fBArray0.getBaseTypeName());
      
      GDSType gDSType0 = GDSType.getType("");
      assertNull(gDSType0);
      
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl((GDSType) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.parseResultRow((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-74);
      ProviderList providerList0 = new ProviderList();
      assertNotNull(providerList0);
      assertEquals(0, providerList0.size());
      assertTrue(providerList0.isEmpty());
      
      InsertNode insertNode0 = new InsertNode();
      assertNotNull(insertNode0);
      assertEquals(0L, insertNode0.getRowEstimate());
      assertTrue(insertNode0.isAtomic());
      assertEquals("", insertNode0.toString());
      assertEquals((-1), insertNode0.getEndOffset());
      assertTrue(insertNode0.needsSavepoint());
      assertEquals("INSERT", insertNode0.statementToString());
      assertEquals((-1), insertNode0.getBeginOffset());
      assertTrue(insertNode0.isPrivilegeCollectionRequired());
      assertFalse(insertNode0.requiresDeferredProcessing());
      assertNull(insertNode0.executeSchemaName());
      assertNull(insertNode0.executeStatementName());
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      assertFalse(insertNode0.deferred);
      
      long[] longArray0 = new long[18];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 1;
      IndexRowGenerator[] indexRowGeneratorArray0 = new IndexRowGenerator[6];
      IndexRowGenerator indexRowGenerator0 = new IndexRowGenerator();
      assertNotNull(indexRowGenerator0);
      assertEquals(268, indexRowGenerator0.getTypeFormatId());
      
      indexRowGeneratorArray0[0] = indexRowGenerator0;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-74);
      intArray0[1] = (int) (byte) (-115);
      intArray0[2] = (int) (byte) (-115);
      intArray0[5] = (int) (byte) (-35);
      intArray0[6] = (int) (byte)24;
      IndexRowGenerator indexRowGenerator1 = new IndexRowGenerator("yqD8", false, true, intArray0, (boolean[]) null, 125);
      assertNotNull(indexRowGenerator1);
      assertFalse(indexRowGenerator1.equals((Object)indexRowGenerator0));
      assertEquals("yqD8", indexRowGenerator1.indexType());
      assertEquals(268, indexRowGenerator1.getTypeFormatId());
      assertEquals(125, indexRowGenerator1.numberOfOrderedColumns());
      assertTrue(indexRowGenerator1.isUniqueWithDuplicateNulls());
      assertFalse(indexRowGenerator1.isUnique());
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-74), (-115), (-115), 0, 0, (-35), 24}, intArray0);
      
      indexRowGeneratorArray0[1] = indexRowGenerator1;
      IndexRowGenerator indexRowGenerator2 = new IndexRowGenerator(indexRowGenerator1);
      assertNotNull(indexRowGenerator2);
      assertFalse(indexRowGenerator1.equals((Object)indexRowGenerator0));
      assertFalse(indexRowGenerator2.equals((Object)indexRowGenerator0));
      assertFalse(indexRowGenerator2.equals((Object)indexRowGenerator1));
      assertEquals("yqD8", indexRowGenerator1.indexType());
      assertEquals(268, indexRowGenerator1.getTypeFormatId());
      assertEquals(125, indexRowGenerator1.numberOfOrderedColumns());
      assertTrue(indexRowGenerator1.isUniqueWithDuplicateNulls());
      assertFalse(indexRowGenerator1.isUnique());
      assertEquals(268, indexRowGenerator2.getTypeFormatId());
      assertTrue(indexRowGenerator2.isUniqueWithDuplicateNulls());
      assertEquals("yqD8", indexRowGenerator2.indexType());
      assertFalse(indexRowGenerator2.isUnique());
      assertEquals(125, indexRowGenerator2.numberOfOrderedColumns());
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-74), (-115), (-115), 0, 0, (-35), 24}, intArray0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)24, (byte) (-115), (byte) (-35), (byte) (-74)}, byteArray0);
      
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("yqD8", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      assertNotNull(jdbcConnection0);
      assertFalse(jdbcConnection0.isClosed());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-17);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte) (-17), (byte) (-17)}, byteArray0);
      
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("c+^7A9s!?|U4<?{?+O", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("--gTW", 12345);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("+|Qed3$.", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      assertNotNull(simpleResultSet0);
      assertEquals(0, simpleResultSet0.getColumnCount());
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(0, simpleResultSet0.getRow());
      assertFalse(simpleResultSet0.isClosed());
      assertFalse(simpleResultSet0.wasNull());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertEquals(1, simpleResultSet0.getHoldability());
      
      // Undeclared exception!
      try { 
        DBUtil.currentLine((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.9257019111219666
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Level level0 = Level.warn;
      Level level1 = Level.error;
      Level level2 = Level.debug;
      ErrorHandler.setDefaultLevel(level2);
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      Level level3 = Level.warn;
      ErrorHandler.setDefaultLevel(level3);
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level1));
      assertSame(level3, level0);
      assertNotSame(level3, level2);
      assertNotSame(level3, level1);
      
      ErrorHandler.setDefaultLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level3));
      assertFalse(level1.equals((Object)level2));
      assertNotSame(level1, level0);
      assertNotSame(level1, level3);
      assertNotSame(level1, level2);
      
      ErrorHandler errorHandler0 = new ErrorHandler("Connecting ", level0);
      assertNotNull(errorHandler0);
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertEquals(Level.error, errorHandler0.getDefaultLevel());
      assertTrue(errorHandler0.isLoggingStackTrace());
      assertEquals(Level.warn, errorHandler0.getLevel());
      
      // Undeclared exception!
      try { 
        DBUtil.runScript("R?G8 9n6VvNHx,x4[3", (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9257019111219666
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      assertNotNull(errorMessages0);
      
      Level level0 = Level.ignore;
      ErrorHandler errorHandler0 = new ErrorHandler("g#", level0);
      assertNotNull(errorHandler0);
      assertTrue(errorHandler0.isLoggingStackTrace());
      assertEquals(Level.ignore, errorHandler0.getLevel());
      assertEquals(Level.fatal, errorHandler0.getDefaultLevel());
      
      Level level1 = Level.fatal;
      ErrorHandler.setDefaultLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      
      Level level2 = Level.warn;
      ErrorHandler.setDefaultLevel(level2);
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      Level level3 = Level.fatal;
      Level level4 = Level.ignore;
      ErrorHandler.setDefaultLevel(level4);
      assertFalse(level4.equals((Object)level1));
      assertFalse(level4.equals((Object)level2));
      assertFalse(level4.equals((Object)level3));
      assertNotSame(level4, level1);
      assertSame(level4, level0);
      assertNotSame(level4, level2);
      assertNotSame(level4, level3);
      
      ErrorHandler.setDefaultLevel(level3);
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level4));
      assertNotSame(level3, level0);
      assertNotSame(level3, level2);
      assertNotSame(level3, level4);
      assertSame(level3, level1);
      
      // Undeclared exception!
      try { 
        DBUtil.runScript("PURGE_ROWS", (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.9257019111219666
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      assertNotNull(jdbcConnection0);
      assertFalse(jdbcConnection0.isClosed());
      
      String string0 = ".#~:}";
      // Undeclared exception!
      try { 
        DBUtil.runScript(".#~:}", 'A', (Connection) jdbcConnection0, true, (ErrorHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.7774621319109288
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ProviderList providerList0 = new ProviderList();
      assertNotNull(providerList0);
      assertEquals(0, providerList0.size());
      assertTrue(providerList0.isEmpty());
      
      InsertNode insertNode0 = new InsertNode();
      assertNotNull(insertNode0);
      assertNull(insertNode0.executeStatementName());
      assertNull(insertNode0.executeSchemaName());
      assertEquals("INSERT", insertNode0.statementToString());
      assertFalse(insertNode0.requiresDeferredProcessing());
      assertTrue(insertNode0.isPrivilegeCollectionRequired());
      assertEquals(0L, insertNode0.getRowEstimate());
      assertEquals("", insertNode0.toString());
      assertEquals((-1), insertNode0.getEndOffset());
      assertTrue(insertNode0.isAtomic());
      assertEquals((-1), insertNode0.getBeginOffset());
      assertTrue(insertNode0.needsSavepoint());
      assertFalse(insertNode0.deferred);
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 3;
      longArray0[5] = (long) 3;
      insertNode0.indexConglomerateNumbers = longArray0;
      assertNull(insertNode0.executeStatementName());
      assertNull(insertNode0.executeSchemaName());
      assertEquals("INSERT", insertNode0.statementToString());
      assertFalse(insertNode0.requiresDeferredProcessing());
      assertTrue(insertNode0.isPrivilegeCollectionRequired());
      assertEquals(0L, insertNode0.getRowEstimate());
      assertEquals("", insertNode0.toString());
      assertEquals((-1), insertNode0.getEndOffset());
      assertTrue(insertNode0.isAtomic());
      assertEquals((-1), insertNode0.getBeginOffset());
      assertTrue(insertNode0.needsSavepoint());
      
      ErrorHandler errorHandler0 = new ErrorHandler("NfC~;x");
      assertNotNull(errorHandler0);
      assertTrue(errorHandler0.isLoggingStackTrace());
      assertEquals(Level.fatal, errorHandler0.getLevel());
      assertEquals(Level.fatal, errorHandler0.getDefaultLevel());
      
      // Undeclared exception!
      try { 
        DBUtil.runScript("Expected a row.", '`', (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData((String) null, "131", "h?", "131", "h?", "131");
      assertNotNull(jDBCConnectData0);
      
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC driver class name specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqlscale);
      
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      assertNotNull(simpleResultSet0);
      assertFalse(simpleResultSet0.wasNull());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertEquals(0, simpleResultSet0.getColumnCount());
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(0, simpleResultSet0.getRow());
      assertFalse(simpleResultSet0.isClosed());
      
      Object[] objectArray0 = DBUtil.currentLine(simpleResultSet0);
      assertNotNull(objectArray0);
      assertFalse(simpleResultSet0.wasNull());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertEquals(0, simpleResultSet0.getColumnCount());
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(0, simpleResultSet0.getRow());
      assertFalse(simpleResultSet0.isClosed());
      assertEquals(0, objectArray0.length);
      
      Object[] objectArray1 = DBUtil.parseResultRow(simpleResultSet0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(simpleResultSet0.wasNull());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertEquals(0, simpleResultSet0.getColumnCount());
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(0, simpleResultSet0.getRow());
      assertFalse(simpleResultSet0.isClosed());
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      assertNotNull(errorMessages0);
      
      try { 
        DBUtil.currentLine(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Connection connection0 = null;
      Level level0 = Level.fatal;
      ErrorHandler.setDefaultLevel((Level) null);
      Class<PGPooledConnection> class0 = PGPooledConnection.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      assertNotNull(errorHandler0);
      assertTrue(errorHandler0.isLoggingStackTrace());
      assertEquals(Level.fatal, errorHandler0.getLevel());
      assertNull(errorHandler0.getDefaultLevel());
      
      Level level1 = Level.warn;
      ErrorHandler.setDefaultLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      
      ErrorHandler.setDefaultLevel(level0);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      
      // Undeclared exception!
      try { 
        DBUtil.executeQuery((String) null, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Recover recover0 = new Recover();
      assertNotNull(recover0);
      assertNull(recover0.getDatabasePath());
      
      Connection connection0 = recover0.getLobConnection();
      assertNull(connection0);
      assertNull(recover0.getDatabasePath());
      
      int int0 = DBUtil.executeUpdate("", (Connection) null);
      assertEquals(0, int0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer1 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer1);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer1.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBuffer1.equals((Object)databaseParameterBuffer0));
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer1);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer1, databaseParameterBufferImp0);
      assertNotSame(databaseParameterBuffer1, databaseParameterBuffer0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertNull(isc_db_handle_impl0);
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp1);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBuffer1));
      
      DatabaseParameterBuffer databaseParameterBuffer2 = databaseParameterBufferImp0.deepCopy();
      assertNotNull(databaseParameterBuffer2);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBufferImp1));
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer1));
      assertTrue(databaseParameterBuffer2.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBuffer2.equals((Object)databaseParameterBuffer1));
      assertTrue(databaseParameterBuffer2.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer2.equals((Object)databaseParameterBufferImp1));
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer1);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer2);
      assertNotSame(databaseParameterBuffer2, databaseParameterBuffer1);
      assertNotSame(databaseParameterBuffer2, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBuffer2, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer2, databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer3 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer3);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer2));
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBufferImp1));
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer1));
      assertTrue(databaseParameterBuffer3.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer3.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBuffer3.equals((Object)databaseParameterBufferImp1));
      assertTrue(databaseParameterBuffer3.equals((Object)databaseParameterBuffer1));
      assertTrue(databaseParameterBuffer3.equals((Object)databaseParameterBuffer2));
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer1);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer3);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer2);
      assertNotSame(databaseParameterBuffer3, databaseParameterBuffer2);
      assertNotSame(databaseParameterBuffer3, databaseParameterBuffer1);
      assertNotSame(databaseParameterBuffer3, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBuffer3, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer3, databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer4 = databaseParameterBuffer1.deepCopy();
      assertNotNull(databaseParameterBuffer4);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer3));
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer2));
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBufferImp1));
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer1));
      assertTrue(databaseParameterBuffer1.equals((Object)databaseParameterBuffer2));
      assertTrue(databaseParameterBuffer1.equals((Object)databaseParameterBuffer3));
      assertTrue(databaseParameterBuffer1.equals((Object)databaseParameterBufferImp1));
      assertTrue(databaseParameterBuffer1.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBuffer1.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer4.equals((Object)databaseParameterBuffer1));
      assertTrue(databaseParameterBuffer4.equals((Object)databaseParameterBuffer2));
      assertTrue(databaseParameterBuffer4.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBuffer4.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer4.equals((Object)databaseParameterBuffer3));
      assertTrue(databaseParameterBuffer4.equals((Object)databaseParameterBufferImp1));
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer1);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer4);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer3);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer2);
      assertNotSame(databaseParameterBuffer1, databaseParameterBufferImp0);
      assertNotSame(databaseParameterBuffer1, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer1, databaseParameterBuffer3);
      assertNotSame(databaseParameterBuffer1, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBuffer1, databaseParameterBuffer4);
      assertNotSame(databaseParameterBuffer1, databaseParameterBuffer2);
      assertNotSame(databaseParameterBuffer4, databaseParameterBuffer3);
      assertNotSame(databaseParameterBuffer4, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBuffer4, databaseParameterBuffer2);
      assertNotSame(databaseParameterBuffer4, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer4, databaseParameterBufferImp0);
      assertNotSame(databaseParameterBuffer4, databaseParameterBuffer1);
      
      DatabaseParameterBuffer databaseParameterBuffer5 = databaseParameterBufferImp1.removeExtensionParams();
      assertNotNull(databaseParameterBuffer5);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBuffer3));
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBuffer1));
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBuffer2));
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBuffer4));
      assertTrue(databaseParameterBuffer5.equals((Object)databaseParameterBuffer3));
      assertTrue(databaseParameterBuffer5.equals((Object)databaseParameterBufferImp1));
      assertTrue(databaseParameterBuffer5.equals((Object)databaseParameterBuffer2));
      assertTrue(databaseParameterBuffer5.equals((Object)databaseParameterBuffer1));
      assertTrue(databaseParameterBuffer5.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBuffer5.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer5.equals((Object)databaseParameterBuffer4));
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer5);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer4);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer2);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer3);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer1);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBufferImp0);
      assertNotSame(databaseParameterBuffer5, databaseParameterBufferImp0);
      assertNotSame(databaseParameterBuffer5, databaseParameterBuffer2);
      assertNotSame(databaseParameterBuffer5, databaseParameterBuffer1);
      assertNotSame(databaseParameterBuffer5, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer5, databaseParameterBuffer3);
      assertNotSame(databaseParameterBuffer5, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBuffer5, databaseParameterBuffer4);
      
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-74);
      Recover recover0 = new Recover();
      assertNotNull(recover0);
      assertNull(recover0.getDatabasePath());
      
      Connection connection0 = recover0.getLobConnection();
      assertNull(connection0);
      assertNull(recover0.getDatabasePath());
      
      int int0 = DBUtil.executeUpdate((String) null, (Connection) null);
      assertEquals(0, int0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp1);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp1.deepCopy();
      assertNotNull(databaseParameterBuffer0);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp1));
      assertNotSame(databaseParameterBufferImp1, databaseParameterBufferImp0);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp1);
      
      DatabaseParameterBuffer databaseParameterBuffer1 = databaseParameterBufferImp1.removeExtensionParams();
      assertNotNull(databaseParameterBuffer1);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBuffer1.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBuffer1.equals((Object)databaseParameterBufferImp1));
      assertTrue(databaseParameterBuffer1.equals((Object)databaseParameterBuffer0));
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer1);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBufferImp0);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer1, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer1, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBuffer1, databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer2 = databaseParameterBufferImp1.removeExtensionParams();
      assertNotNull(databaseParameterBuffer2);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBuffer1));
      assertTrue(databaseParameterBuffer2.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBuffer2.equals((Object)databaseParameterBuffer1));
      assertTrue(databaseParameterBuffer2.equals((Object)databaseParameterBufferImp1));
      assertTrue(databaseParameterBuffer2.equals((Object)databaseParameterBuffer0));
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer1);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBufferImp0);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer2);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer2, databaseParameterBufferImp0);
      assertNotSame(databaseParameterBuffer2, databaseParameterBuffer1);
      assertNotSame(databaseParameterBuffer2, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBuffer2, databaseParameterBuffer0);
      
      DatabaseParameterBuffer databaseParameterBuffer3 = databaseParameterBufferImp1.deepCopy();
      assertNotNull(databaseParameterBuffer3);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBuffer2));
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBuffer1));
      assertTrue(databaseParameterBuffer3.equals((Object)databaseParameterBuffer1));
      assertTrue(databaseParameterBuffer3.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBuffer3.equals((Object)databaseParameterBufferImp1));
      assertTrue(databaseParameterBuffer3.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer3.equals((Object)databaseParameterBuffer2));
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer1);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer3);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBufferImp0);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer2);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer3, databaseParameterBufferImp0);
      assertNotSame(databaseParameterBuffer3, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBuffer3, databaseParameterBuffer1);
      assertNotSame(databaseParameterBuffer3, databaseParameterBuffer2);
      assertNotSame(databaseParameterBuffer3, databaseParameterBuffer0);
      
      DatabaseParameterBuffer databaseParameterBuffer4 = databaseParameterBufferImp1.removeExtensionParams();
      assertNotNull(databaseParameterBuffer4);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBuffer2));
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBuffer3));
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBuffer1));
      assertTrue(databaseParameterBuffer4.equals((Object)databaseParameterBuffer3));
      assertTrue(databaseParameterBuffer4.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer4.equals((Object)databaseParameterBuffer2));
      assertTrue(databaseParameterBuffer4.equals((Object)databaseParameterBuffer1));
      assertTrue(databaseParameterBuffer4.equals((Object)databaseParameterBufferImp1));
      assertTrue(databaseParameterBuffer4.equals((Object)databaseParameterBufferImp0));
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer1);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer3);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBufferImp0);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer2);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer4);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer4, databaseParameterBuffer1);
      assertNotSame(databaseParameterBuffer4, databaseParameterBufferImp0);
      assertNotSame(databaseParameterBuffer4, databaseParameterBuffer2);
      assertNotSame(databaseParameterBuffer4, databaseParameterBuffer3);
      assertNotSame(databaseParameterBuffer4, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer4, databaseParameterBufferImp1);
      
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      assertNotNull(constantActionActivation0);
      assertFalse(constantActionActivation0.getScrollable());
      assertEquals("Activation", constantActionActivation0.getClassType());
      assertEquals(Integer.MAX_VALUE, constantActionActivation0.getStalePlanCheckInterval());
      assertFalse(constantActionActivation0.isValid());
      assertFalse(constantActionActivation0.isPersistent());
      assertEquals(0, constantActionActivation0.getExecutionCount());
      assertNull(constantActionActivation0.getObjectName());
      
      long long0 = constantActionActivation0.getIndexConglomerateNumber();
      assertFalse(constantActionActivation0.getScrollable());
      assertEquals("Activation", constantActionActivation0.getClassType());
      assertEquals(Integer.MAX_VALUE, constantActionActivation0.getStalePlanCheckInterval());
      assertFalse(constantActionActivation0.isValid());
      assertFalse(constantActionActivation0.isPersistent());
      assertEquals(0, constantActionActivation0.getExecutionCount());
      assertNull(constantActionActivation0.getObjectName());
      assertEquals((-1L), long0);
      
      constantActionActivation0.clearWarnings();
      assertFalse(constantActionActivation0.getScrollable());
      assertEquals("Activation", constantActionActivation0.getClassType());
      assertEquals(Integer.MAX_VALUE, constantActionActivation0.getStalePlanCheckInterval());
      assertFalse(constantActionActivation0.isValid());
      assertFalse(constantActionActivation0.isPersistent());
      assertEquals(0, constantActionActivation0.getExecutionCount());
      assertNull(constantActionActivation0.getObjectName());
      
      int int0 = constantActionActivation0.getMaxDynamicResults();
      assertFalse(constantActionActivation0.getScrollable());
      assertEquals("Activation", constantActionActivation0.getClassType());
      assertEquals(Integer.MAX_VALUE, constantActionActivation0.getStalePlanCheckInterval());
      assertFalse(constantActionActivation0.isValid());
      assertFalse(constantActionActivation0.isPersistent());
      assertEquals(0, constantActionActivation0.getExecutionCount());
      assertNull(constantActionActivation0.getObjectName());
      assertEquals(0, int0);
      
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      assertNotNull(constantActionActivation1);
      assertFalse(constantActionActivation1.equals((Object)constantActionActivation0));
      assertFalse(constantActionActivation1.getScrollable());
      assertFalse(constantActionActivation1.isValid());
      assertNull(constantActionActivation1.getObjectName());
      assertEquals(0, constantActionActivation1.getExecutionCount());
      assertFalse(constantActionActivation1.isPersistent());
      assertEquals("Activation", constantActionActivation1.getClassType());
      assertEquals(Integer.MAX_VALUE, constantActionActivation1.getStalePlanCheckInterval());
      
      SQLWarning sQLWarning0 = constantActionActivation1.getWarnings();
      assertNull(sQLWarning0);
      assertFalse(constantActionActivation1.equals((Object)constantActionActivation0));
      assertFalse(constantActionActivation1.getScrollable());
      assertFalse(constantActionActivation1.isValid());
      assertNull(constantActionActivation1.getObjectName());
      assertEquals(0, constantActionActivation1.getExecutionCount());
      assertFalse(constantActionActivation1.isPersistent());
      assertEquals("Activation", constantActionActivation1.getClassType());
      assertEquals(Integer.MAX_VALUE, constantActionActivation1.getStalePlanCheckInterval());
      assertNotSame(constantActionActivation1, constantActionActivation0);
      
      ResultSet resultSet0 = constantActionActivation0.getTargetVTI();
      assertNull(resultSet0);
      assertFalse(constantActionActivation0.equals((Object)constantActionActivation1));
      assertFalse(constantActionActivation0.getScrollable());
      assertEquals("Activation", constantActionActivation0.getClassType());
      assertEquals(Integer.MAX_VALUE, constantActionActivation0.getStalePlanCheckInterval());
      assertFalse(constantActionActivation0.isValid());
      assertFalse(constantActionActivation0.isPersistent());
      assertEquals(0, constantActionActivation0.getExecutionCount());
      assertNull(constantActionActivation0.getObjectName());
      assertNotSame(constantActionActivation0, constantActionActivation1);
      
      // Undeclared exception!
      try { 
        DBUtil.nextLine((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Connection connection0 = null;
      SessionRemote sessionRemote0 = new SessionRemote();
      assertNotNull(sessionRemote0);
      assertFalse(sessionRemote0.isClustered());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertTrue(sessionRemote0.isClosed());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      
      int int0 = sessionRemote0.getNextId();
      assertFalse(sessionRemote0.isClustered());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(1, sessionRemote0.getCurrentId());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(0, int0);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      
      boolean boolean0 = sessionRemote0.autoReconnect((-1788));
      assertFalse(sessionRemote0.isClustered());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(1, sessionRemote0.getCurrentId());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertFalse(boolean0);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      
      Connection connection1 = sessionRemote0.getLobConnection();
      assertNull(connection1);
      assertFalse(sessionRemote0.isClustered());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(1, sessionRemote0.getCurrentId());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      
      SessionRemote sessionRemote1 = new SessionRemote();
      assertNotNull(sessionRemote1);
      assertFalse(sessionRemote1.equals((Object)sessionRemote0));
      assertEquals(0, sessionRemote1.getCurrentId());
      assertEquals(6, sessionRemote1.getClientVersion());
      assertEquals("", sessionRemote1.getDatabasePath());
      assertEquals(65536, sessionRemote1.getMaxLengthInplaceLob());
      assertTrue(sessionRemote1.isClosed());
      assertEquals(0, sessionRemote1.getPowerOffCount());
      assertFalse(sessionRemote1.isClustered());
      assertEquals(0, sessionRemote1.getLastReconnect());
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      
      sessionRemote0.autoCommitIfCluster();
      assertFalse(sessionRemote0.equals((Object)sessionRemote1));
      assertFalse(sessionRemote0.isClustered());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(1, sessionRemote0.getCurrentId());
      assertEquals("", sessionRemote0.getDatabasePath());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertNotSame(sessionRemote0, sessionRemote1);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(9, SessionRemote.CHANGE_ID);
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      
      String string0 = "--";
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "--", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: --
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FromVTI fromVTI0 = new FromVTI();
      assertNotNull(fromVTI0);
      assertEquals(0, fromVTI0.getTableNumber());
      assertEquals(0, fromVTI0.getResultSetNumber());
      assertEquals(1003, fromVTI0.getResultSetType());
      assertTrue(fromVTI0.hasTableNumber());
      assertEquals(7, fromVTI0.updateTargetLockMode());
      assertFalse(fromVTI0.isFlattenableJoinNode());
      assertFalse(fromVTI0.isConstructor());
      assertFalse(fromVTI0.isMaterializable());
      assertTrue(fromVTI0.needsSpecialRCLBinding());
      assertTrue(fromVTI0.isPrivilegeCollectionRequired());
      assertEquals("", fromVTI0.toString());
      assertEquals((-1), fromVTI0.getBeginOffset());
      assertNull(fromVTI0.getCorrelationName());
      assertFalse(fromVTI0.isNotExists());
      assertTrue(fromVTI0.supportsMultipleInstantiations());
      assertNull(fromVTI0.getExposedName());
      assertEquals((-1), fromVTI0.getEndOffset());
      assertEquals("", fromVTI0.getBaseTableName());
      assertFalse(fromVTI0.isOneRowResultSet());
      assertEquals(0, fromVTI0.initialCapacity());
      assertEquals(0.0F, fromVTI0.loadFactor(), 0.01F);
      assertFalse(fromVTI0.forUpdate());
      assertFalse(fromVTI0.considerSortAvoidancePath());
      assertFalse(fromVTI0.isTargetTable());
      assertEquals(0, fromVTI0.getLevel());
      assertFalse(fromVTI0.isOneRowScan());
      assertFalse(fromVTI0.isBaseTable());
      assertEquals(0L, fromVTI0.getRowEstimate());
      assertNull(fromVTI0.getName());
      assertFalse(fromVTI0.markAsCursorTargetTable());
      assertFalse(fromVTI0.isDerbyStyleTableFunction());
      assertTrue(fromVTI0.isCompileTime());
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DBUtil.connect((JDBCConnectData) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      assertNotNull(jdbcConnection0);
      assertFalse(jdbcConnection0.isClosed());
      
      TableContainer tableContainer0 = new TableContainer("--st");
      assertNotNull(tableContainer0);
      assertEquals("--st", tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getDoc());
      
      List<DBTable> list0 = tableContainer0.getTables(true);
      assertNotNull(list0);
      assertEquals("--st", tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getDoc());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      DBTable dBTable0 = tableContainer0.getTable("--st");
      assertNull(dBTable0);
      assertEquals("--st", tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getDoc());
      
      // Undeclared exception!
      try { 
        DBUtil.getMetaData((Connection) jdbcConnection0, "--st", "--st", false, true, true, true, "--st", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcDatabaseMetaData", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = null;
      TableContainer tableContainer0 = new TableContainer((String) null);
      assertNotNull(tableContainer0);
      assertNull(tableContainer0.getDoc());
      assertNull(tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      
      List<DBTable> list0 = tableContainer0.getTables(true);
      assertNotNull(list0);
      assertNull(tableContainer0.getDoc());
      assertNull(tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string1 = "-&cfBrk";
      DBTable dBTable0 = tableContainer0.getTable("-&cfBrk");
      assertNull(dBTable0);
      assertNull(tableContainer0.getDoc());
      assertNull(tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      
      try { 
        DBUtil.getMetaData((Connection) null, (String) null, (String) null, true, false, false, true, (String) null, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl0);
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      
      SessionRemote sessionRemote0 = new SessionRemote();
      assertNotNull(sessionRemote0);
      assertEquals("", sessionRemote0.getDatabasePath());
      assertEquals(0, sessionRemote0.getCurrentId());
      assertEquals(0, sessionRemote0.getLastReconnect());
      assertFalse(sessionRemote0.isClustered());
      assertEquals(0, sessionRemote0.getPowerOffCount());
      assertEquals(6, sessionRemote0.getClientVersion());
      assertEquals(65536, sessionRemote0.getMaxLengthInplaceLob());
      assertTrue(sessionRemote0.isClosed());
      assertEquals(12, SessionRemote.SESSION_SET_ID);
      assertEquals(4, SessionRemote.COMMAND_CLOSE);
      assertEquals(3, SessionRemote.COMMAND_EXECUTE_UPDATE);
      assertEquals(1, SessionRemote.SESSION_CLOSE);
      assertEquals(1, SessionRemote.STATUS_OK);
      assertEquals(0, SessionRemote.SESSION_PREPARE);
      assertEquals(2, SessionRemote.STATUS_CLOSED);
      assertEquals(14, SessionRemote.SESSION_CHECK_KEY);
      assertEquals(10, SessionRemote.COMMAND_GET_META_DATA);
      assertEquals(11, SessionRemote.SESSION_PREPARE_READ_PARAMS);
      assertEquals(2, SessionRemote.COMMAND_EXECUTE_QUERY);
      assertEquals(8, SessionRemote.COMMAND_COMMIT);
      assertEquals(6, SessionRemote.RESULT_RESET);
      assertEquals(3, SessionRemote.STATUS_OK_STATE_CHANGED);
      assertEquals(13, SessionRemote.SESSION_CANCEL_STATEMENT);
      assertEquals(0, SessionRemote.STATUS_ERROR);
      assertEquals(7, SessionRemote.RESULT_CLOSE);
      assertEquals(5, SessionRemote.RESULT_FETCH_ROWS);
      assertEquals(9, SessionRemote.CHANGE_ID);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl1);
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      
      TimeZone timeZone0 = TimeZone.getTimeZone(";_|h:@t5");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, true);
      assertNotNull(proxy0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl2);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl1));
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.getRsrId());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl3);
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl2));
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl1));
      assertEquals(0, isc_stmt_handle_impl3.size());
      assertEquals(0, isc_stmt_handle_impl3.getRsrId());
      assertEquals(0, isc_stmt_handle_impl3.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl3.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl3.getInsertCount());
      assertFalse(isc_stmt_handle_impl3.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl3.getStatementType());
      assertEquals(0, isc_stmt_handle_impl3.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl3.isSingletonResult());
      assertNull(isc_stmt_handle_impl3.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl3.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl3.isValid());
      assertEquals(0, isc_stmt_handle_impl3.getDeleteCount());
      
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      assertNotNull(tableContainer0);
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getDoc());
      assertEquals("", tableContainer0.getName());
      
      DBSchema dBSchema0 = tableContainer0.getSchema();
      assertNull(dBSchema0);
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getDoc());
      assertEquals("", tableContainer0.getName());
      
      TableContainerSupport tableContainerSupport0 = new TableContainerSupport();
      assertNotNull(tableContainerSupport0);
      
      List<DBTable> list0 = tableContainer0.getTables(false);
      assertNotNull(list0);
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getDoc());
      assertEquals("", tableContainer0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<DBSequence> list1 = tableContainer0.getSequences(false);
      assertNotNull(list1);
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getDoc());
      assertEquals("", tableContainer0.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      TableContainer tableContainer1 = new TableContainer("Fj6");
      assertNotNull(tableContainer1);
      assertFalse(tableContainer1.equals((Object)tableContainer0));
      assertNull(tableContainer1.getDoc());
      assertEquals("container", tableContainer1.getObjectType());
      assertEquals("Fj6", tableContainer1.getName());
      
      List<DBTable> list2 = tableContainer0.getTables(true);
      assertNotNull(list2);
      assertFalse(tableContainer0.equals((Object)tableContainer1));
      assertTrue(list2.equals((Object)list0));
      assertEquals("container", tableContainer0.getObjectType());
      assertNull(tableContainer0.getDoc());
      assertEquals("", tableContainer0.getName());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotSame(tableContainer0, tableContainer1);
      assertNotSame(list2, list0);
      
      TableContainer tableContainer2 = new TableContainer("prepareCall(");
      assertNotNull(tableContainer2);
      assertFalse(tableContainer2.equals((Object)tableContainer1));
      assertFalse(tableContainer2.equals((Object)tableContainer0));
      assertEquals("container", tableContainer2.getObjectType());
      assertNull(tableContainer2.getDoc());
      assertEquals("prepareCall(", tableContainer2.getName());
      
      TableContainer tableContainer3 = new TableContainer("XCXA0.S", tableContainer2);
      assertNotNull(tableContainer3);
      assertFalse(tableContainer2.equals((Object)tableContainer1));
      assertFalse(tableContainer2.equals((Object)tableContainer0));
      assertFalse(tableContainer3.equals((Object)tableContainer1));
      assertFalse(tableContainer3.equals((Object)tableContainer2));
      assertFalse(tableContainer3.equals((Object)tableContainer0));
      assertEquals("container", tableContainer2.getObjectType());
      assertNull(tableContainer2.getDoc());
      assertEquals("prepareCall(", tableContainer2.getName());
      assertEquals("XCXA0.S", tableContainer3.getName());
      assertEquals("container", tableContainer3.getObjectType());
      assertNull(tableContainer3.getDoc());
      
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      assertNotNull(jdbcConnection0);
      assertFalse(jdbcConnection0.isClosed());
      
      // Undeclared exception!
      try { 
        DBUtil.query("prepareCall(", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.1595888143086257
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      assertNotNull(tableContainer0);
      assertNull(tableContainer0.getDoc());
      assertNull(tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      
      TableContainerSupport tableContainerSupport0 = new TableContainerSupport();
      assertNotNull(tableContainerSupport0);
      
      List<DBTable> list0 = tableContainer0.getTables(false);
      assertNotNull(list0);
      assertNull(tableContainer0.getDoc());
      assertNull(tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<DBTable> list1 = tableContainer0.getTables(false);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertNull(tableContainer0.getDoc());
      assertNull(tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list1, list0);
      
      DBTable dBTable0 = tableContainer0.getTable("D7~O]t_Z&3;,R");
      assertNull(dBTable0);
      assertNull(tableContainer0.getDoc());
      assertNull(tableContainer0.getName());
      assertEquals("container", tableContainer0.getObjectType());
      
      DBUtil.assertAllDbResourcesClosed(false);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.908908734898781
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FromVTI fromVTI0 = new FromVTI();
      assertNotNull(fromVTI0);
      assertEquals(0, fromVTI0.getResultSetNumber());
      assertEquals(1003, fromVTI0.getResultSetType());
      assertTrue(fromVTI0.hasTableNumber());
      assertNull(fromVTI0.getCorrelationName());
      assertTrue(fromVTI0.isCompileTime());
      assertEquals(0L, fromVTI0.getRowEstimate());
      assertEquals((-1), fromVTI0.getBeginOffset());
      assertFalse(fromVTI0.isOneRowScan());
      assertEquals(0, fromVTI0.getLevel());
      assertNull(fromVTI0.getName());
      assertEquals(0.0F, fromVTI0.loadFactor(), 0.01F);
      assertEquals((-1), fromVTI0.getEndOffset());
      assertEquals("", fromVTI0.getBaseTableName());
      assertTrue(fromVTI0.isPrivilegeCollectionRequired());
      assertEquals(0, fromVTI0.getTableNumber());
      assertFalse(fromVTI0.isConstructor());
      assertEquals(0, fromVTI0.initialCapacity());
      assertFalse(fromVTI0.isMaterializable());
      assertTrue(fromVTI0.supportsMultipleInstantiations());
      assertFalse(fromVTI0.markAsCursorTargetTable());
      assertNull(fromVTI0.getExposedName());
      assertFalse(fromVTI0.isOneRowResultSet());
      assertTrue(fromVTI0.needsSpecialRCLBinding());
      assertFalse(fromVTI0.isNotExists());
      assertFalse(fromVTI0.isDerbyStyleTableFunction());
      assertEquals(7, fromVTI0.updateTargetLockMode());
      assertFalse(fromVTI0.considerSortAvoidancePath());
      assertFalse(fromVTI0.isBaseTable());
      assertEquals("", fromVTI0.toString());
      assertFalse(fromVTI0.forUpdate());
      assertFalse(fromVTI0.isFlattenableJoinNode());
      assertFalse(fromVTI0.isTargetTable());
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      
      FromBaseTable fromBaseTable0 = new FromBaseTable();
      assertNotNull(fromBaseTable0);
      assertEquals(0, fromBaseTable0.getResultSetNumber());
      assertFalse(fromBaseTable0.forUpdate());
      assertFalse(fromBaseTable0.isTargetTable());
      assertTrue(fromBaseTable0.hasTableNumber());
      assertEquals((-1), fromBaseTable0.getEndOffset());
      assertFalse(fromBaseTable0.needsSpecialRCLBinding());
      assertEquals((-1), fromBaseTable0.initialCapacity());
      assertEquals((-1.0F), fromBaseTable0.loadFactor(), 0.01F);
      assertFalse(fromBaseTable0.isNotExists());
      assertNull(fromBaseTable0.getCorrelationName());
      assertTrue(fromBaseTable0.isMaterializable());
      assertEquals("", fromBaseTable0.toString());
      assertFalse(fromBaseTable0.considerSortAvoidancePath());
      assertEquals(0, fromBaseTable0.getLevel());
      assertEquals(0L, fromBaseTable0.getRowEstimate());
      assertTrue(fromBaseTable0.isBaseTable());
      assertEquals((-1), fromBaseTable0.getBeginOffset());
      assertTrue(fromBaseTable0.supportsMultipleInstantiations());
      assertTrue(fromBaseTable0.isPrivilegeCollectionRequired());
      assertFalse(fromBaseTable0.isFlattenableJoinNode());
      assertEquals(0, fromBaseTable0.getTableNumber());
      assertEquals(2, FromBaseTable.DELETE);
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      assertEquals(1, FromBaseTable.UPDATE);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      
      TableName tableName0 = fromBaseTable0.getTableNameField();
      assertNull(tableName0);
      assertEquals(0, fromBaseTable0.getResultSetNumber());
      assertFalse(fromBaseTable0.forUpdate());
      assertFalse(fromBaseTable0.isTargetTable());
      assertTrue(fromBaseTable0.hasTableNumber());
      assertEquals((-1), fromBaseTable0.getEndOffset());
      assertFalse(fromBaseTable0.needsSpecialRCLBinding());
      assertEquals((-1), fromBaseTable0.initialCapacity());
      assertEquals((-1.0F), fromBaseTable0.loadFactor(), 0.01F);
      assertFalse(fromBaseTable0.isNotExists());
      assertNull(fromBaseTable0.getCorrelationName());
      assertTrue(fromBaseTable0.isMaterializable());
      assertEquals("", fromBaseTable0.toString());
      assertFalse(fromBaseTable0.considerSortAvoidancePath());
      assertEquals(0, fromBaseTable0.getLevel());
      assertEquals(0L, fromBaseTable0.getRowEstimate());
      assertTrue(fromBaseTable0.isBaseTable());
      assertEquals((-1), fromBaseTable0.getBeginOffset());
      assertTrue(fromBaseTable0.supportsMultipleInstantiations());
      assertTrue(fromBaseTable0.isPrivilegeCollectionRequired());
      assertFalse(fromBaseTable0.isFlattenableJoinNode());
      assertEquals(0, fromBaseTable0.getTableNumber());
      assertEquals(2, FromBaseTable.DELETE);
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      assertEquals(1, FromBaseTable.UPDATE);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      
      fromVTI0.setOrigTableName((TableName) null);
      assertEquals(0, fromVTI0.getResultSetNumber());
      assertEquals(1003, fromVTI0.getResultSetType());
      assertTrue(fromVTI0.hasTableNumber());
      assertNull(fromVTI0.getCorrelationName());
      assertTrue(fromVTI0.isCompileTime());
      assertEquals(0L, fromVTI0.getRowEstimate());
      assertEquals((-1), fromVTI0.getBeginOffset());
      assertFalse(fromVTI0.isOneRowScan());
      assertEquals(0, fromVTI0.getLevel());
      assertNull(fromVTI0.getName());
      assertEquals(0.0F, fromVTI0.loadFactor(), 0.01F);
      assertEquals((-1), fromVTI0.getEndOffset());
      assertEquals("", fromVTI0.getBaseTableName());
      assertTrue(fromVTI0.isPrivilegeCollectionRequired());
      assertEquals(0, fromVTI0.getTableNumber());
      assertFalse(fromVTI0.isConstructor());
      assertEquals(0, fromVTI0.initialCapacity());
      assertFalse(fromVTI0.isMaterializable());
      assertTrue(fromVTI0.supportsMultipleInstantiations());
      assertFalse(fromVTI0.markAsCursorTargetTable());
      assertNull(fromVTI0.getExposedName());
      assertFalse(fromVTI0.isOneRowResultSet());
      assertTrue(fromVTI0.needsSpecialRCLBinding());
      assertFalse(fromVTI0.isNotExists());
      assertFalse(fromVTI0.isDerbyStyleTableFunction());
      assertEquals(7, fromVTI0.updateTargetLockMode());
      assertFalse(fromVTI0.considerSortAvoidancePath());
      assertFalse(fromVTI0.isBaseTable());
      assertEquals("", fromVTI0.toString());
      assertFalse(fromVTI0.forUpdate());
      assertFalse(fromVTI0.isFlattenableJoinNode());
      assertFalse(fromVTI0.isTargetTable());
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      
      Properties properties0 = fromVTI0.getProperties();
      assertNull(properties0);
      assertEquals(0, fromVTI0.getResultSetNumber());
      assertEquals(1003, fromVTI0.getResultSetType());
      assertTrue(fromVTI0.hasTableNumber());
      assertNull(fromVTI0.getCorrelationName());
      assertTrue(fromVTI0.isCompileTime());
      assertEquals(0L, fromVTI0.getRowEstimate());
      assertEquals((-1), fromVTI0.getBeginOffset());
      assertFalse(fromVTI0.isOneRowScan());
      assertEquals(0, fromVTI0.getLevel());
      assertNull(fromVTI0.getName());
      assertEquals(0.0F, fromVTI0.loadFactor(), 0.01F);
      assertEquals((-1), fromVTI0.getEndOffset());
      assertEquals("", fromVTI0.getBaseTableName());
      assertTrue(fromVTI0.isPrivilegeCollectionRequired());
      assertEquals(0, fromVTI0.getTableNumber());
      assertFalse(fromVTI0.isConstructor());
      assertEquals(0, fromVTI0.initialCapacity());
      assertFalse(fromVTI0.isMaterializable());
      assertTrue(fromVTI0.supportsMultipleInstantiations());
      assertFalse(fromVTI0.markAsCursorTargetTable());
      assertNull(fromVTI0.getExposedName());
      assertFalse(fromVTI0.isOneRowResultSet());
      assertTrue(fromVTI0.needsSpecialRCLBinding());
      assertFalse(fromVTI0.isNotExists());
      assertFalse(fromVTI0.isDerbyStyleTableFunction());
      assertEquals(7, fromVTI0.updateTargetLockMode());
      assertFalse(fromVTI0.considerSortAvoidancePath());
      assertFalse(fromVTI0.isBaseTable());
      assertEquals("", fromVTI0.toString());
      assertFalse(fromVTI0.forUpdate());
      assertFalse(fromVTI0.isFlattenableJoinNode());
      assertFalse(fromVTI0.isTargetTable());
      assertEquals(0, QueryTreeNode.AUTOINCREMENT_START_INDEX);
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
      assertEquals(1, QueryTreeNode.AUTOINCREMENT_INC_INDEX);
      assertEquals(3, QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY);
      
      // Undeclared exception!
      try { 
        DBUtil.assertAllDbResourcesClosed(true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // There are unclosed database resources: 2 result set(s)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "pa0R%W@v!QuB:jb0?X2", (-742L));
      MockThread.dumpStack();
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "pa0R%W@v!QuB:jb0?X2");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1092);
      scheduledThreadPoolExecutor0.getLargestPoolSize();
      MockThread mockThread2 = new MockThread("----does not have a property");
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      scheduledThreadPoolExecutor0.schedule((Runnable) mockThread2, (-2292L), timeUnit0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null.env.properties");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "----does not have a property");
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      xSQLVAR1.copyFrom(xSQLVAR0);
      try { 
        DBUtil.getMetaData((String) null, false, true, true, false, "org.firebirdsql.jdbc.field.FBCachedBlobField", false, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(";x", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String string0 = "org.h2.index.PageDataLeaf";
      DBUtil.escape("org.h2.index.PageDataLeaf");
      ConnectionInfo connectionInfo0 = new ConnectionInfo("Y");
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      TransactionTable transactionTable0 = null;
      try {
        transactionTable0 = new TransactionTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.store.raw.xact.TransactionTable", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[3];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SessionRemote sessionRemote0 = new SessionRemote();
      // Undeclared exception!
      try { 
        DBUtil.escape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "^z4`uso`2S*fb+:", true, 50, 6, 46);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: ^z4`uso`2S*fb+:
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FromVTI fromVTI0 = new FromVTI();
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "w=g?\"ncg)0$Q", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-74);
      Recover recover0 = new Recover();
      Recover.execute("sU!~7Js0>#t h", "e8PvXODJ-,[.");
      recover0.getLobConnection();
      String string0 = "P-+Uz";
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate("P-+Uz", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      xSQLVAR1.sqllen = 0;
      XSQLVAR xSQLVAR2 = xSQLVAR1.deepCopy();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null.env.properties");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "' found");
      xSQLVAR0.copyFrom(xSQLVAR2);
      try { 
        DBUtil.getMetaData((String) null, true, true, false, true, (String) null, false, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("]|aJ1W >0st<u_)j_", "aEV~7blZ5djC1", "]|aJ1W >0st<u_)j_", (String) null, (String) null, "setClob(String, Clob)");
      // Undeclared exception!
      try { 
        DBUtil.getMetaData((Connection) null, "setClob(String, Clob)", (String) null, false, false, false, false, "xjBiVje-gP_B'[.$Im", true);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 17
         // xjBiVje-gP_B'[.$Im
         //                  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVAR0.sqlscale = 0;
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      xSQLVAR1.sqllen = 0;
      xSQLVAR1.sqlname = null;
      XSQLVAR xSQLVAR2 = xSQLVAR1.deepCopy();
      xSQLVAR2.deepCopy();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null.env.properties");
      xSQLVAR2.sqlname = null;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "' found");
      xSQLVAR0.copyFrom(xSQLVAR2);
      try { 
        DBUtil.getMetaData((String) null, true, true, false, true, (String) null, false, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVAR0.deepCopy();
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("i@j$#^*Yx8Mg_", (String) null, "Z6p8NWMZnj`[q", "Z6p8NWMZnj`[q", "", "");
      try { 
        DBUtil.getMetaData((Connection) null, (String) null, (String) null, false, true, false, true, (String) null, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("]|aJ1W >0st<u_)j_", "aEV~ublZ5djC1", "]|aJ1W >0st<u_)j_", (String) null, (String) null, "setClob(String, Clob)");
      // Undeclared exception!
      try { 
        DBUtil.getMetaData((Connection) null, "setClob(String, Clob)", (String) null, false, false, false, false, "xjBiVje-gP_B'[.$Im", true);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 17
         // xjBiVje-gP_B'[.$Im
         //                  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DBUtil.close((ResultSet) null);
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.deepCopy();
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DBUtil.countRows((String) null, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      TableContainerSupport tableContainerSupport0 = new TableContainerSupport();
      tableContainer0.getTables(false);
      tableContainer0.getTables(false);
      boolean boolean0 = DBUtil.available("--x\"HY.Xv+", (String) null, "x\"HY.Xv+", "x\"HY.Xv+");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pa0R%W@v!QuB:jb0?X2");
      ErrorHandler errorHandler0 = new ErrorHandler("pa0R%W@v!QuB:jb0?X2");
      // Undeclared exception!
      try { 
        DBUtil.getStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      Class<Driver> class0 = Driver.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray((String) null, class0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("W[=G");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "W[=G";
      stringArray0[1] = "W[=G";
      stringArray0[2] = "W[=G";
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        DBUtil.equivalent((DBUniqueConstraint) null, (DBPrimaryKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("W[=G");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "W[=G";
      stringArray0[1] = "W[=G";
      stringArray0[2] = "W[=G";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "W[=G", true, stringArray0);
      boolean boolean0 = DBUtil.equivalent(dBPrimaryKeyConstraint0, dBPrimaryKeyConstraint0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ProviderList providerList0 = new ProviderList();
      FBArray fBArray0 = new FBArray();
      fBArray0.getResultSet();
      // Undeclared exception!
      try { 
        DBUtil.closeResultSetAndStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DBUtil.getOpenPreparedStatementCount();
      Driver driver0 = new Driver();
      DBUtil.getOpenResultSetCount();
      DBUtil.resetMonitors();
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.connect(".env.properties", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '.env.properties.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("--_,KNPH", "--_,KNPH", "TablePrivilege", "--*;", "--*;", "TablePrivilege");
      try { 
        DBUtil.connect(jDBCConnectData0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting --_,KNPH failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("", "", "org.datab]ene.JDBC", "", "", "org.datab]ene.JDBC");
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC URL specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/databene/.env.properties.env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Property '");
      // Undeclared exception!
      try { 
        DBUtil.connect(".env.properties", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC URL specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FBArray fBArray0 = new FBArray();
      fBArray0.getResultSet((long) (-856), 806);
      // Undeclared exception!
      try { 
        DBUtil.parseResultSet((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      DBUtil.format(simpleResultSet0);
      FBArray fBArray0 = new FBArray();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertNull(isc_db_handle_impl0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Recover recover0 = new Recover();
      Recover recover1 = new Recover();
      int int0 = DBUtil.getOpenConnectionCount();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.queryLong("c-", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DBUtil.close((Connection) null);
      NativeGDSImpl nativeGDSImpl0 = null;
      try {
        nativeGDSImpl0 = new NativeGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 11);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Recover recover0 = new Recover();
      recover0.openFile(";i|_ZG(W", ";i|_ZG(W", true);
      recover0.getLobConnection();
      try { 
        DBUtil.connect("15AFzL=[", "15AFzL=[", "15AFzL=[", "15AFzL=[", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting 15AFzL=[ failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      try { 
        DBUtil.connect((String) null, (String) null, "Gs}p)0ey", "!R3})Bns>5=dE", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-74);
      ProviderList providerList0 = new ProviderList();
      InsertNode insertNode0 = new InsertNode();
      long[] longArray0 = new long[18];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 1;
      IndexRowGenerator[] indexRowGeneratorArray0 = new IndexRowGenerator[6];
      IndexRowGenerator indexRowGenerator0 = new IndexRowGenerator();
      indexRowGeneratorArray0[0] = indexRowGenerator0;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-74);
      intArray0[1] = (int) (byte) (-115);
      intArray0[2] = (int) (byte) (-115);
      intArray0[5] = (int) (byte) (-35);
      intArray0[6] = (int) (byte)24;
      IndexRowGenerator indexRowGenerator1 = new IndexRowGenerator("yqD8", false, true, intArray0, (boolean[]) null, 125);
      indexRowGeneratorArray0[1] = indexRowGenerator1;
      IndexRowGenerator indexRowGenerator2 = new IndexRowGenerator(indexRowGenerator1);
      indexRowGeneratorArray0[2] = indexRowGenerator2;
      IndexRowGenerator indexRowGenerator3 = new IndexRowGenerator();
      indexRowGeneratorArray0[3] = indexRowGenerator3;
      // Undeclared exception!
      try { 
        DBUtil.queryAndSimplify("BoE,kL&#", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Recover recover0 = new Recover();
      Recover recover1 = new Recover();
      Recover recover2 = new Recover();
      recover2.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("=j\"z8y$?%W(7ElNJoy", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      TableContainerSupport tableContainerSupport0 = new TableContainerSupport();
      List<DBSequence> list0 = tableContainerSupport0.getSequences(false);
      tableContainer0.getSequences(false, list0);
      // Undeclared exception!
      try { 
        DBUtil.queryAndSimplify("No >DBC driver class name provided", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly("pa0R%W@v!QuB:jb0?X2", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: pa0R%W@v!QuB:jb0?X2
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Recover recover0 = new Recover();
      Recover recover1 = new Recover();
      recover0.getLobConnection();
      boolean boolean0 = DBUtil.existsEnvironment((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean.valueOf("]|aJ1W >0st<u_)j_");
      int int0 = DBUtil.getOpenStatementCount();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = new Boolean("");
      int int0 = DBUtil.getOpenStatementCount();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-179381889), "CALL DATABASE()");
      Random.setNextRandom((-179381889));
      SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone(1085, "");
      TimeZone timeZone0 = TimeZone.getTimeZone(")18lA");
      TimeZone timeZone1 = TimeZone.getTimeZone("CALL DATABASE()");
      ZoneId zoneId0 = timeZone0.toZoneId();
      TimeZone.getTimeZone(zoneId0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1085);
      TimeZone.getTimeZone((ZoneId) zoneOffset0);
      MockCalendar.getInstance(timeZone1);
      // Undeclared exception!
      try { 
        DBUtil.getMetaData("TABLE_TYPE", true, false, true, true, (String) null, true, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'TABLE_TYPE.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.908908734898781
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InsertNode insertNode0 = new InsertNode();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("Database query did not return a result: ");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(510);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "Database query did not return a result: ");
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, "--u+[Fp{C&iBB{{4", 0);
      MockThread mockThread3 = new MockThread(threadGroup0, mockThread2, "Database query did not return a result: ");
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) mockThread3, (-2292L), timeUnit0);
      Driver driver0 = new Driver();
      insertNode0.init((Object) jMXPrincipal0, (Object) scheduledFuture0, (Object) driver0);
      DBUtil.assertAllDbResourcesClosed(false);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        DBUtil.getConnectData("ix'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'ix'.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }
}
