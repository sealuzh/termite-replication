/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 03:01:10 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1;
      SimpleNode simpleNode0 = new SimpleNode(1);
      simpleNode0.identifiers = null;
      simpleNode0.jjtGetParent();
      // Undeclared exception!
      try { 
        simpleNode0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "?QGsD3kJ:5K";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?QGsD3kJ:5K");
      int int0 = 0;
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      simpleNode0.jjtSetParent(nodeArray0[1]);
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.toString((String) null);
      simpleNode0.jjtGetParent();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = (-2791);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(nodeArray0[5], (-2791));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2791
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList1.add("}");
      FileSystemHandling fileSystemHandling7 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling8 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling9 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling10 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling11 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList3.sort(comparator0);
      FileSystemHandling fileSystemHandling12 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling13 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling14 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling15 = new FileSystemHandling();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      ArrayList<String> arrayList5 = new ArrayList<String>();
      ArrayList<String> arrayList6 = new ArrayList<String>();
      FileSystemHandling fileSystemHandling16 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling17 = new FileSystemHandling();
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("}", stringWriter1);
      assertEquals("<InstanceOfExpression>\n</InstanceOfExpression>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.iterator();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("u3x9:J&!");
      arrayList1.add("u3x9:J&!");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      Integer integer0 = new Integer((-1844344819));
      linkedList1.add(integer0);
      arrayList0.removeAll(linkedList1);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter1 = new StringWriter(37);
      stringWriter1.append('Y');
      StringWriter stringWriter2 = new StringWriter();
      arrayList0.add("&&");
      stringWriter1.flush();
      arrayList0.add("u3x9:J&!");
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      simpleNode0.dump(">", stringWriter0);
      assertEquals("<NameList>\n  <identifier>*amp</identifier>\n  <identifier>u3x9:J&!</identifier>\n</NameList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(3049);
      JavaParser javaParser0 = new JavaParser("q<v?yr]");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 3049);
      ArrayList<String> arrayList0 = simpleNode1.identifiers;
      simpleNode0.identifiers = arrayList0;
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      simpleNode1.jjtGetParent();
      nodeArray0[3] = null;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode1;
      simpleNode0.children = nodeArray0;
      SimpleNode simpleNode2 = new SimpleNode((-171));
      simpleNode0.jjtSetParent(simpleNode2);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetParent();
      simpleNode2.jjtGetParent();
      simpleNode2.id = 1785;
      // Undeclared exception!
      try { 
        simpleNode2.jjtGetChild((-1969330372));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*lshft");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1));
      SimpleNode simpleNode1 = (SimpleNode)javaParser0.currNode;
      simpleNode0.jjtAddChild(simpleNode1, 1);
      simpleNode0.jjtGetParent();
      simpleNode1.jjtGetChild(1);
      assertEquals(2, simpleNode1.jjtGetNumChildren());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6270866719173012
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 72;
      SimpleNode simpleNode0 = new SimpleNode(72);
      StringWriter stringWriter0 = new StringWriter(72);
      StringWriter stringWriter1 = new StringWriter();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      Integer integer0 = new Integer(72);
      Integer integer1 = new Integer(979);
      Integer integer2 = new Integer((-1480));
      Integer integer3 = new Integer(979);
      Integer integer4 = new Integer(72);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer2;
      integerArray0[2] = integer4;
      integerArray0[3] = integer3;
      integerArray0[4] = integer0;
      Integer integer5 = new Integer(int0);
      Integer[] integerArray1 = new Integer[4];
      integerArray1[1] = integer0;
      integerArray1[2] = integer3;
      integerArray1[3] = integer3;
      arrayList1.toArray(integerArray1);
      arrayList1.add(">=");
      simpleNode0.dump("?Dl?/T4r7%w", stringWriter1);
      simpleNode0.dump("8ciK>)<", stringWriter0);
      assertEquals("<LabeledStatement>\n  <identifier>*ge</identifier>\n</LabeledStatement>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.spliterator();
      arrayList0.add("}");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("<");
      arrayList0.add("<=");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList2.sort(comparator0);
      FileSystemHandling fileSystemHandling7 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling8 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling9 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling10 = new FileSystemHandling();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      ArrayList<String> arrayList5 = new ArrayList<String>();
      FileSystemHandling fileSystemHandling11 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling12 = new FileSystemHandling();
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("4.nE", stringWriter1);
      assertEquals("<InstanceOfExpression>\n  <identifier>*le</identifier>\n</InstanceOfExpression>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9242880785278214
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(66);
      simpleNode0.jjtSetParent(simpleNode0);
      SimpleNode simpleNode1 = new SimpleNode(66);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier(">");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) simpleNode1;
      simpleNode0.children = nodeArray0;
      stringWriter0.close();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      simpleNode0.jjtSetParent(simpleNode0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.write(28);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      stringWriter0.write(">");
      simpleNode1.toString();
      StringWriter stringWriter3 = stringWriter2.append('\'');
      stringWriter3.write(">");
      StringWriter stringWriter4 = stringWriter2.append((CharSequence) ">");
      StringWriter stringWriter5 = new StringWriter();
      simpleNode1.dump(">", stringWriter2);
      Node node0 = simpleNode0.jjtGetChild(0);
      node0.jjtAddChild(nodeArray0[0], 28);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.jjtGetParent();
      // Undeclared exception!
      simpleNode1.dump("v69$a-q", stringWriter4);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.5985152433458726
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(41);
      ArrayList<String> arrayList0 = new ArrayList<String>(41);
      arrayList0.add("~");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Locale locale0 = new Locale("~", "~", "~");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<String> arrayList2 = simpleNode0.identifiers;
      Integer integer0 = new Integer(41);
      Integer integer1 = new Integer(2831);
      Integer integer2 = new Integer(2831);
      Integer integer3 = new Integer(52);
      Integer integer4 = new Integer(987);
      Integer integer5 = new Integer(41);
      Integer[] integerArray0 = new Integer[19];
      integerArray0[0] = integer2;
      integerArray0[1] = integer0;
      arrayList1.toArray(integerArray0);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.close();
      arrayList2.add("<<");
      StringWriter stringWriter1 = new StringWriter();
      arrayList0.add("U");
      simpleNode0.dump("BlockStatement", stringWriter1);
      assertEquals("<ConditionalOrExpression>\n  <identifier>*lshft</identifier>\n</ConditionalOrExpression>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.5985152433458726
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<");
      Object object0 = new Object();
      arrayList0.add("<");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      arrayList1.sort((Comparator<? super String>) null);
      FileSystemHandling fileSystemHandling7 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling8 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling9 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling10 = new FileSystemHandling();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      FileSystemHandling fileSystemHandling11 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling12 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("", stringWriter0);
      assertEquals("<NameList>\n  <identifier>*lt</identifier>\n</NameList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("<");
      arrayList0.add("LJKYY$uCYtZO}#q1");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList1.sort(comparator0);
      FileSystemHandling fileSystemHandling7 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling8 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling9 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling10 = new FileSystemHandling();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      FileSystemHandling fileSystemHandling11 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling12 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("*rshft", stringWriter0);
      assertEquals("<InstanceOfExpression>\n  <identifier>*lt</identifier>\n  <identifier>LJKYY$uCYtZO}#q1</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.5985152433458726
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      objectArray0[2] = objectArray0[0];
      arrayList0.toArray(objectArray0);
      arrayList0.add(">");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling7 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling8 = new FileSystemHandling();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      FileSystemHandling fileSystemHandling9 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling10 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("s`C/_Q=/L@;@ },", stringWriter0);
      assertEquals("<NameList>\n  <identifier>*gt</identifier>\n</NameList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringWriter stringWriter0 = new StringWriter();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(";");
      simpleNode0.dump("\"...\"", stringWriter0);
      StringReader stringReader0 = new StringReader("(hLO[G$oBVIlio.N~1g");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      Token token0 = new Token();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      try { 
        pipedOutputStream0.write(byteArray0, (-961), 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6061920506332319
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "";
      objectArray0[3] = (Object) "<";
      arrayList0.toArray(objectArray0);
      arrayList0.add("&");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling7 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling8 = new FileSystemHandling();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<String> arrayList2 = simpleNode0.identifiers;
      FileSystemHandling fileSystemHandling9 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling10 = new FileSystemHandling();
      ArrayList<String> arrayList3 = simpleNode0.identifiers;
      FileSystemHandling fileSystemHandling11 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("DoStatement", stringWriter0);
      assertEquals("<NameList>\n  <identifier>*amp</identifier>\n</NameList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.identifiers = null;
      simpleNode0.id = 9;
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1411461439556105
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(72);
      simpleNode0.toString();
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 512);
      simpleNode0.jjtGetChild(72);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtAddChild((Node) null, 513);
      simpleNode0.jjtGetChild(512);
      simpleNode0.toString("VariableDeclaratorId");
      assertEquals(514, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.7250829733914482
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(73);
      StringWriter stringWriter0 = new StringWriter();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.iterator();
      arrayList0.add("{");
      stringWriter0.write(73);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      simpleNode0.dump("{", stringWriter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      int int0 = (-2186);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream1, (-2186));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6200155105291458
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      StringWriter stringWriter0 = new StringWriter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.iterator();
      arrayList0.add(">>");
      stringWriter0.write((-1));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      arrayList0.add("BooleanLiteral");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      simpleNode0.dump("BooleanLiteral", stringWriter0);
      simpleNode0.dump("7z%.0_w'lH5]tgw==", stringWriter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream2);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.5965155763056016
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(54);
      StringWriter stringWriter0 = new StringWriter();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.iterator();
      simpleNode0.dump("z*#1hAx'sp}IlI5k|Ie", stringWriter0);
      arrayList0.add("*lshft");
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add("");
      simpleNode0.dump((String) null, stringWriter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 2197;
      int int1 = 47;
      try { 
        pipedOutputStream0.write((byte[]) null, 47, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.384882588644445
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "M=)+]{;9z[}R*5v";
      JavaParser javaParser0 = new JavaParser("M=)+]{;9z[}R*5v");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 77);
      SimpleNode simpleNode1 = (SimpleNode)javaParser0.currNode;
      simpleNode0.jjtAddChild(simpleNode1, 27);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      simpleNode0.dump("M=)+]{;9z[}R*5v", stringWriter0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.7046360973492382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(59);
      Node[] nodeArray0 = new Node[1];
      simpleNode0.children = nodeArray0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}hw.v");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8wf:H/aM%gf$%B");
      int int0 = 1005;
      StringWriter stringWriter0 = new StringWriter(1005);
      simpleNode0.dump("</", stringWriter0);
      InputStream inputStream0 = null;
      PipedInputStream pipedInputStream1 = new PipedInputStream(1005);
      try { 
        pipedInputStream1.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<");
      Object[] objectArray0 = new Object[4];
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "<";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "<";
      arrayList0.toArray(objectArray0);
      arrayList0.add("<");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      arrayList1.sort((Comparator<? super String>) null);
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling7 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling8 = new FileSystemHandling();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      FileSystemHandling fileSystemHandling9 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling10 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("<", stringWriter0);
      assertEquals("<NameList>\n  <identifier>*lt</identifier>\n</NameList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SystemInUtil.addInputLine(">.DuI;I");
      SimpleNode simpleNode0 = new SimpleNode(63);
      SystemInUtil.addInputLine("*lt");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "*lt");
      stringWriter1.write(63);
      StringWriter stringWriter2 = new StringWriter(1564);
      StringWriter stringWriter3 = new StringWriter(2674);
      stringWriter3.append((CharSequence) "*lt");
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = new StringWriter(1564);
      stringWriter1.close();
      StringWriter stringWriter6 = new StringWriter();
      StringWriter stringWriter7 = new StringWriter(1470);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList1.add((String) null);
      stringWriter5.close();
      arrayList1.add("u");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter8 = new StringWriter();
      StringWriter stringWriter9 = new StringWriter();
      simpleNode0.dump(">=", stringWriter0);
      assertEquals("*lt?<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      StringWriter stringWriter0 = new StringWriter();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.iterator();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate2.negate();
      arrayList0.removeIf(predicate0);
      arrayList0.add((String) null);
      // Undeclared exception!
      try { 
        simpleNode0.dump("</", stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4048159937786893
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1006);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      pipedOutputStream0.write(byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('b');
      StringReader stringReader0 = new StringReader("j;e+");
      JavaParser javaParser0 = new JavaParser("j;e+");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 1006);
      simpleNode1.jjtAddChild(nodeArray0[0], 1006);
      simpleNode0.jjtAddChild(simpleNode1, 65);
      assertEquals(66, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(571);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(54);
      SystemInUtil.addInputLine("*lt");
      StringWriter stringWriter0 = new StringWriter();
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      stringWriter0.write(10);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      simpleNode0.dump("{", stringWriter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3379);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 59;
      SimpleNode simpleNode0 = new SimpleNode(59);
      Node[] nodeArray0 = new Node[1];
      simpleNode0.children = nodeArray0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int int1 = 1005;
      StringWriter stringWriter0 = new StringWriter(471);
      // Undeclared exception!
      try { 
        simpleNode0.dump("</", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5963725988408393
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("D%_7?U\"wn");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)109;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      stringReader0.reset();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      javaParser0.InclusiveOrExpression();
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 2829);
      simpleNode0.parser = javaParser0;
      // Undeclared exception!
      try { 
        simpleNode0.toString(">");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2829
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*lshft");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-97);
      byteArray0[8] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 558);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Integer integer0 = new Integer(558);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(21);
      Integer integer3 = new Integer(558);
      Integer integer4 = new Integer(1);
      Integer integer5 = new Integer((-1480));
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer3;
      integerArray0[2] = integer5;
      integerArray0[3] = integer1;
      integerArray0[4] = integer3;
      Integer integer6 = new Integer(1);
      integerArray0[6] = integer6;
      integerArray0[7] = integer1;
      integerArray0[8] = integer2;
      arrayList0.toArray(integerArray0);
      arrayList0.add((String) null);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump("*lshft", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1106823794));
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      arrayList0.add((Locale.LanguageRange) null);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList2 = simpleNode0.identifiers;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList2, locale_FilteringMode0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList2, locale_FilteringMode0);
      ArrayList<String> arrayList3 = new ArrayList<String>(list0);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = null;
      int int0 = 2197;
      int int1 = 846;
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      SimpleNode simpleNode0 = new SimpleNode((-3773));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3773
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.5985152433458726
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(91);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList0, locale_FilteringMode0);
      arrayList0.addAll((Collection<? extends String>) list0);
      arrayList0.add("v&");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.write((-3504));
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "v&");
      StringWriter stringWriter3 = stringWriter2.append('c');
      stringWriter2.append('c');
      stringWriter1.append('W');
      stringWriter1.write("v&");
      stringWriter1.append((CharSequence) "");
      StringWriter stringWriter4 = new StringWriter();
      simpleNode0.dump("|1h#g%i`\"{pV'L~Ps5C", stringWriter3);
      assertEquals("v&ccWv&<SynchronizedStatement>\n  <identifier>v&</identifier>\n</SynchronizedStatement>\n", stringWriter3.toString());
      assertEquals("v&ccWv&<SynchronizedStatement>\n  <identifier>v&</identifier>\n</SynchronizedStatement>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("M=\")+]{.;9z[}R*5v");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      simpleNode0.jjtOpen();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      SimpleNode simpleNode1 = new SimpleNode(8);
      simpleNode0.parent = (Node) simpleNode1;
      simpleNode0.jjtClose();
      assertNotSame(simpleNode0, simpleNode1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.576903470613846
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9vDu5<K");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 75, 75);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 75);
      javaParser0.ConditionalAndExpression();
      int int0 = 77;
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(77);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6270866719173012
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 72;
      SimpleNode simpleNode0 = new SimpleNode(72);
      StringWriter stringWriter0 = new StringWriter(72);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.close();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      Integer integer0 = new Integer(72);
      Integer integer1 = new Integer(979);
      Integer integer2 = new Integer((-1480));
      Integer integer3 = new Integer(979);
      Integer integer4 = new Integer(72);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer2;
      integerArray0[2] = integer4;
      integerArray0[3] = integer3;
      integerArray0[4] = integer0;
      Integer integer5 = new Integer(int0);
      Integer[] integerArray1 = new Integer[4];
      integerArray1[1] = integer0;
      integerArray1[2] = integer3;
      integerArray1[3] = integer3;
      arrayList1.toArray(integerArray1);
      arrayList1.add(">=");
      simpleNode0.dump("?Dl?/T4r7%w", stringWriter1);
      simpleNode0.dump("8ciK>)<", stringWriter0);
      assertEquals("<LabeledStatement>\n  <identifier>*ge</identifier>\n</LabeledStatement>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("M-=\")+]{.;9z}R5v");
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      SimpleNode simpleNode0 = new SimpleNode((-12437164));
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      nodeArray0[7] = (Node) simpleNode0;
      nodeArray0[8] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-12437164));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -12437164
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wl");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 50, (-1517));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 43);
      String string0 = simpleNode0.toString("wl");
      assertEquals("wlInclusiveOrExpression", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling fileSystemHandling7 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling8 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling9 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      FileSystemHandling fileSystemHandling10 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling11 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling12 = new FileSystemHandling();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      FileSystemHandling fileSystemHandling13 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling14 = new FileSystemHandling();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      ArrayList<String> arrayList5 = new ArrayList<String>();
      FileSystemHandling fileSystemHandling15 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling16 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode((-1683));
      // Undeclared exception!
      try { 
        simpleNode0.toString("0Hg&KvZflW99");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1683
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("5nL;sR_=G(<?0%U");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "?# \"~j?";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "<";
      arrayList0.toArray(objectArray0);
      String string0 = simpleNode0.toString();
      assertEquals("NameList : 5nL;sR_=G(<?0%U", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 47;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(2674);
      StringWriter stringWriter1 = new StringWriter(47);
      StringWriter stringWriter2 = new StringWriter();
      stringWriter1.close();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Integer integer0 = new Integer(47);
      Integer integer1 = new Integer(978);
      Integer integer2 = new Integer((-1074787335));
      Integer integer3 = new Integer(978);
      Integer integer4 = new Integer(47);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer2;
      integerArray0[2] = integer4;
      integerArray0[3] = integer3;
      integerArray0[4] = integer0;
      Integer integer5 = new Integer(int0);
      arrayList0.toArray(integerArray0);
      StringWriter stringWriter3 = new StringWriter(int0);
      stringWriter1.close();
      StringWriter stringWriter4 = new StringWriter();
      arrayList0.add(">=");
      SimpleNode simpleNode0 = new SimpleNode((int) integerArray0[3]);
      SimpleNode simpleNode1 = new SimpleNode(10);
      Node node0 = simpleNode1.parent;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-226));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }
}
