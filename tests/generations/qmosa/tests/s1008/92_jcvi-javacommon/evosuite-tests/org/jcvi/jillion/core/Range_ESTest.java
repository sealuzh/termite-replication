/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 03:59:13 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.ToIntFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.8846588254570746
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of((-476L), (-144L));
      Range range1 = Range.of((-476L));
      boolean boolean0 = range1.isSubRangeOf(range0);
      Range range2 = Range.of((-476L));
      range0.startsBefore(range1);
      Range range3 = Range.of((-144L), (-144L));
      range3.startsBefore(range1);
      Long long0 = new Long(2629L);
      range3.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range3.getEnd(range_CoordinateSystem0);
      assertEquals((-143L), long1);
      
      boolean boolean1 = range0.equals(range3);
      assertFalse(boolean1 == boolean0);
      
      range3.complement(range1);
      assertSame(range1, range2);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4135501314628676
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4683888057490586
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = (-1477L);
      Range.of((-1477L));
      Range range0 = Range.of((-2147483648L));
      range0.equals(range0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1263L, (-3274L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.76835091734426
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.of(255L);
      Range.of((-136L));
      Long long0 = new Long(4045L);
      Range range0 = Range.of(3163L, 9223372036854775807L);
      range0.equals(long0);
      Range.of(3163L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, (-136L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -136 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.7225441226913065
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = 127L;
      Range range0 = Range.ofLength(127L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerLast(range0);
      range0.complementFrom(linkedList0);
      Range.Builder range_Builder0 = new Range.Builder(861L);
      range_Builder0.contractEnd(861L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(861L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.6793086999930327
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(1862L);
      range0.getLength();
      range0.split(1L);
      Range range1 = Range.ofLength(729L);
      Range range2 = Range.of(848L);
      Object object0 = new Object();
      range1.equals(range2);
      Range range3 = Range.ofLength(2775L);
      range0.equals(range2);
      range2.intersection(range3);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.6556383792019322
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.of((-1477L));
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L), (-1477L));
      range1.intersection(range0);
      range1.equals(range0);
      long long0 = (-3274L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1263L, (-3274L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-32768L), (-32768L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.113493331924921
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-144L));
      range_Builder0.contractBegin((-476L));
      Range.Builder range_Builder2 = range_Builder1.expandEnd((-144L));
      range_Builder2.contractBegin((-3272L));
      range_Builder2.copy();
      range_Builder0.expandEnd((-476L));
      Range range0 = Range.of((-144L));
      Range range1 = Range.ofLength(255L);
      Range range2 = range1.intersection(range0);
      range1.spliterator();
      Range.of(1389L);
      Long long0 = new Long((-2572L));
      range2.equals((Object) null);
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range2));
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4254785740497224
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(9223372036854775793L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range0.intersection(range1);
      range1.equals((Object) null);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(2147479771L, 65544L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.916135436777176
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(861L);
      Range range0 = Range.of(3877L, 2147483647L);
      Long long0 = new Long(2147483647L);
      Range range1 = range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(7);
      int int0 = (-24);
      Integer integer1 = new Integer((-24));
      linkedList1.add(integer1);
      linkedList0.retainAll(linkedList1);
      range1.complement(range0);
      range0.complementFrom(linkedList0);
      range1.isSubRangeOf(range0);
      Range.Comparators.values();
      range_Builder1.build();
      range0.intersection(range1);
      range1.equals((Object) null);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(2147483647L, 3877L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.879710268466587
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      range0.spliterator();
      Range range1 = Range.of(255L, 1856L);
      long long0 = range1.getLength();
      assertEquals(1602L, long0);
      
      range1.split(2740L);
      Range range2 = Range.ofLength(1856L);
      Range.of(4294967294L);
      Long long1 = new Long(255L);
      Object object0 = new Object();
      range2.equals(long1);
      Range range3 = Range.ofLength(1856L);
      range0.equals("org.jcvi.jillion.internal.core.util.JillionUtil");
      assertTrue(range0.isEmpty());
      
      Range range4 = range3.intersection(range2);
      assertSame(range4, range3);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.646617307924534
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = (-144L);
      Range range0 = Range.of((-476L), (-144L));
      Range range1 = Range.of((-476L));
      range1.isSubRangeOf(range0);
      Range.of((-476L));
      range0.startsBefore(range1);
      Range range2 = Range.of((-144L), (-144L));
      Long long1 = new Long(2629L);
      range2.equals(range0);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("(d+)s*-s*(d+)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.(d+)s*-s*(d+)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.6231561685200617
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(2147483687L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(range0);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.ofLength(65535L);
      range0.intersection(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("@oFR3;)4=^G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse @oFR3;)4=^G into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.6173434981978514
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854775806L);
      Long long0 = new Long((-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder(243L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      range_Builder1.expandEnd(861L);
      range0.intersection(range0);
      range0.spliterator();
      Long long1 = new Long((-2147483648L));
      range0.equals((Object) null);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(368L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.674812656656668
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.of((-128L));
      Range.of(2147483647L, 9223372036854775807L);
      Range range0 = Range.of(2147483647L, 9223372032559808514L);
      Object object4 = new Object();
      range0.equals(object4);
      Range range1 = Range.of((-1759L), (-1759L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2906336047011515
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object1);
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.756021812977256
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.ofLength(311L);
      Range range0 = Range.of(1471L);
      Long long0 = new Long(270L);
      Range.of((-117L), 127L);
      range0.equals(long0);
      Range.of(311L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 311L, (-117L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.561393487008475
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 1279L, 4168L);
      Range range1 = Range.of(2196L, 65534L);
      range0.equals(range1);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(0L, (-1328L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.705997250553697
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = 255L;
      Range.of(255L);
      Range.of((-136L));
      Long long1 = new Long(4045L);
      Range range0 = Range.of(3163L, 9223372036854775807L);
      range0.equals(long1);
      Long long2 = new Long(4045L);
      range0.equals((Object) null);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(9223372036854775807L, 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.5163141664947517
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(32767L);
      Range range1 = Range.of(2227L, 4168L);
      range0.equals(range1);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(32767L, (-1328L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.9927264258212554
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.of((-9223372036854775808L));
      range0.startsBefore(range1);
      range0.complement(range1);
      boolean boolean0 = range0.intersects(range1);
      Range range2 = Range.of((-9223372036854775808L));
      List<Range> list0 = range2.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      range2.intersects(range0);
      range1.equals(range0);
      Range range3 = Range.of((-1092L), 1753L);
      Range range4 = range0.intersection(range0);
      Range range5 = Range.ofLength(127L);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
      
      boolean boolean1 = range2.isSubRangeOf(range0);
      //  // Unstable assertion: assertTrue(boolean1);
      
      range1.spliterator();
      boolean boolean2 = range4.startsBefore(range2);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(range4.equals((Object)range3));
      //  // Unstable assertion: assertFalse(boolean2);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.520127359417306
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.6108870487162728
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(list0.contains(range1));
      
      Range.of(1470L, 9223372036854775807L);
      Range range2 = range0.intersection(range0);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.884367954230403
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      range0.equals((Object) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(619L);
      Range range2 = range1.intersection(range0);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.151798682372979
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=4.101957537213915
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(861L);
      Range range0 = Range.of((-1630L), 2147483647L);
      Long long0 = new Long(2147483647L);
      Range.Builder range_Builder2 = range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder3 = range_Builder1.copy();
      Range.Builder range_Builder4 = range_Builder3.expandEnd((-2543L));
      Range range1 = Range.of((-1630L));
      Range range2 = Range.ofLength(2147483647L);
      long long1 = range2.getLength();
      assertEquals(2147483647L, long1);
      
      Range range3 = range1.intersection(range2);
      assertTrue(range3.isEmpty());
      
      range2.spliterator();
      range_Builder2.copy();
      Long long2 = new Long((-2543L));
      range0.equals(range_Builder2);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      Range.Builder range_Builder6 = new Range.Builder(997L);
      Range range4 = range_Builder5.build();
      assertNotSame(range4, range2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2408048579200104
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = Range.of(1360L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.5166859938424406
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.of((-1477L));
      Range range0 = Range.of((-1477L));
      Range range1 = Range.of((-1477L), 897L);
      range1.equals(range0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1263L, (-3274L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.7795123323193676
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-366L), 2457L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-528L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.shift((-366L));
      range_Builder1.contractEnd((-528L));
      range_Builder2.expandEnd((-1118L));
      Range range0 = Range.of(1922L);
      Range range1 = Range.of((-9223372036854775298L));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775298 would make range [1922 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.7373615467335672
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = 2147483647L;
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.contractEnd(861L);
      Range range0 = Range.of(3877L, 2147483647L);
      Long long1 = new Long(2147483647L);
      range0.equals(long1);
      Range range1 = Range.of(2147483647L);
      range1.spliterator();
      range0.getLength();
      // Undeclared exception!
      range0.split(127L);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.5676595905085806
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483687L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.shift(2147483687L);
      Range.Builder range_Builder2 = range_Builder1.contractEnd(2147483687L);
      Range.of(2147483687L);
      Range range0 = range_Builder2.build();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("C{.^a!lW4^ua");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.C{.^a!lW4^ua
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.6447702087468468
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.copy();
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.contractEnd(0L);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.retainAll(linkedList0);
      Object object0 = new Object();
      Range range0 = Range.of(0L);
      Integer integer0 = new Integer((-2145374134));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.710721101924456
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range0 = Range.of(9223372036854775807L);
      Range.of(2147483647L, 9223372036854775807L);
      Object object4 = new Object();
      range0.equals(object4);
      Range.of((-1759L), (-1759L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.250819827202611
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of((-1306L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.8224817026661952
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483687L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder0.expandEnd(2147483687L);
      Range range0 = Range.of(2147483687L);
      Range range1 = Range.ofLength(2147483687L);
      Range range2 = range0.intersection(range1);
      range1.spliterator();
      Range.of(2147483687L);
      Long long0 = new Long((-9223372036854775307L));
      range2.equals(range_Builder2);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-9223372036854775307L), 2147483687L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.951498675599464
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-136L));
      Long long0 = new Long(4045L);
      Range range2 = Range.of(3163L, 9223372036854775807L);
      boolean boolean0 = range2.equals(long0);
      assertFalse(boolean0);
      
      Range range3 = Range.of(3163L);
      Range range4 = range1.intersection(range3);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=4.008364503055308
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(861L);
      Range range0 = Range.of(3877L, 2147483647L);
      Long long0 = new Long(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder2 = range_Builder1.copy();
      range_Builder2.expandEnd((-2543L));
      Range range1 = Range.of(3877L);
      Range range2 = Range.ofLength(2147483647L);
      range1.intersection(range2);
      range2.spliterator();
      Long long1 = new Long((-2543L));
      range0.equals(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder((-2543L), 255L);
      Range.Builder range_Builder4 = new Range.Builder(997L);
      Range range3 = range_Builder3.build();
      assertFalse(range3.equals((Object)range0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.560886944925731
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 32767L);
      range0.spliterator();
      long long0 = range0.getLength();
      assertEquals(32513L, long0);
      
      range0.split(32767L);
      Range range1 = Range.ofLength(32513L);
      Range.Builder range_Builder0 = new Range.Builder(4168L);
      Range.Builder range_Builder1 = new Range.Builder();
      Long long1 = new Long(4168L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range2 = Range.ofLength(738L);
      range0.equals(range2);
      Long long2 = new Long(2565L);
      boolean boolean0 = range2.equals(object0);
      assertFalse(boolean0);
      
      Range.Builder range_Builder2 = new Range.Builder(32513L, 9223372036854775807L);
      Range range3 = Range.ofLength(738L);
      assertFalse(range3.equals((Object)range1));
      assertSame(range3, range2);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.270003601443391
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(255L);
      range0.getLength();
      Range range1 = Range.ofLength(255L);
      Range.of(255L);
      Long long0 = new Long(4294967294L);
      Object object0 = new Object();
      range0.equals(range1);
      Range.ofLength(1L);
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.util.JillionUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.util.JillionUtil into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.763070581766341
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 32767L);
      range0.spliterator();
      range0.getLength();
      range0.split(32767L);
      Range range1 = Range.ofLength(32513L);
      range0.intersection(range1);
      range1.spliterator();
      Range.of(2147483647L);
      Range.ofLength(9223372036854772645L);
      Long long0 = new Long(255L);
      range1.equals(range0);
      long long1 = (-2147483648L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-979L), (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.145998322976767
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.340986344011985
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = (-2147483648L);
      Range.of(9223372036854775793L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775793L, (-1670L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1671 would make range [9223372036854775792 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.5101969188949544
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 352L, 4124L);
      Range.of(2147483647L, 2147483647L);
      Range.of(352L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-3159L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3159 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.8622008487117947
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 8589934588L, 8589934588L);
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      range0.isEmpty();
      Range range1 = Range.of(8589934588L, 8589934588L);
      Range.of(8589934588L);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      long long0 = 389L;
      range1.split(389L);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(4294967294L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.859018308710516
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483685L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandEnd(2147483685L);
      range_Builder1.shift(2147483685L);
      range_Builder1.contractEnd(2147483685L);
      range_Builder0.expandEnd((-1118L));
      Range range0 = Range.of(2147483685L);
      Range.of((-1453L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.82817615252765
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 1L);
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(1L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, 863L, 2870L);
      Range.Builder range_Builder0 = new Range.Builder(626L);
      Range.Builder range_Builder1 = new Range.Builder(863L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.build();
      Range.Builder range_Builder3 = range_Builder0.shift(626L);
      Object object0 = new Object();
      Range.Builder range_Builder4 = new Range.Builder();
      Long long1 = new Long(1L);
      range0.equals(range1);
      assertFalse(range1.isEmpty());
      
      range_Builder3.copy();
      Range range3 = Range.ofLength(1L);
      assertFalse(range3.isEmpty());
      
      long long2 = range2.getLength();
      assertEquals(2008L, long2);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.30273127777412
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.9583597279940266
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.contractEnd(861L);
      Range range0 = Range.of(3877L, 2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(32767L);
      Range range1 = Range.ofLength(1469L);
      range_Builder1.contractBegin(1274L);
      Range range2 = range1.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.retainAll(linkedList1);
      List<Range> list0 = range2.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      boolean boolean0 = range0.intersects(range2);
      //  // Unstable assertion: assertFalse(boolean0);
      
      range2.intersection(range0);
      linkedList0.listIterator();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      List<Range> list2 = range2.complementFrom(list1);
      //  // Unstable assertion: assertEquals(1, list2.size());
      
      Range.Builder range_Builder2 = new Range.Builder(3877L);
      Range range3 = range_Builder2.build();
      //  // Unstable assertion: assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.9291187836249652
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483647L);
      range_Builder0.contractEnd(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range0 = Range.of(0L);
      Range range1 = Range.ofLength(0L);
      range0.intersection(range1);
      range1.spliterator();
      Range range2 = Range.of(4294967295L);
      Long long0 = new Long(2586L);
      range2.equals((Object) null);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(9223372036854774936L, 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.546342754847472
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 352L, 4124L);
      Range.of((-1400L), 2147483647L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775802L, (-3159L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3159 would make range [9223372036854775802 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.8253596105127916
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483687L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandEnd(2147483687L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder0.expandEnd(2147483687L);
      Range range0 = Range.of(2147483687L);
      Range range1 = Range.ofLength(2147483687L);
      range0.intersection(range1);
      range1.spliterator();
      Range.of(2147483687L);
      range1.equals((Object) null);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(2147483687L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.5242518164990475
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of((-1344L));
      Range range1 = Range.of((-1344L), 255L);
      range0.equals(range1);
      long long0 = (-213L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-10L), (-213L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.7785945186015857
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.contractEnd(861L);
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483647L);
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range0.intersection(range1);
      range1.spliterator();
      Range.Builder range_Builder2 = new Range.Builder();
      Long long0 = new Long(127L);
      range2.equals(range2);
      range_Builder1.copy();
      // Undeclared exception!
      try { 
        Range.ofLength((-972L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.5115756829542675
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Object object0 = new Object();
      Range range0 = Range.of(range_CoordinateSystem0, 175L, 175L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1L), 2051L);
      Range range2 = range1.intersection(range0);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.8238145379986537
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483687L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.expandEnd(2147483687L);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(2147483687L, 2147483687L);
      Range range1 = Range.of(2147483687L);
      Range range2 = Range.ofLength(2147483687L);
      Range range3 = range1.intersection(range2);
      range_Builder0.contractBegin(4294967295L);
      Range range4 = range3.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.retainAll(linkedList1);
      boolean boolean0 = range1.intersects(range3);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range.Comparators.values();
      range_Builder2.build();
      range4.intersection(range0);
      //  // Unstable assertion: assertNotSame(range4, range1);
      //  // Unstable assertion: assertTrue(range4.equals((Object)range1));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.9538235508351427
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483647L);
      range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.expandEnd(1L);
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(718L);
      Range range2 = range1.intersection(range0);
      range0.spliterator();
      Range range3 = Range.of(32767L);
      assertFalse(range3.isEmpty());
      
      Long long0 = new Long(32767L);
      Integer integer0 = new Integer(2130706432);
      boolean boolean0 = range2.equals(integer0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder3 = new Range.Builder(32767L, 2147483647L);
      Range range4 = range_Builder1.build();
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.6003873248038456
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of((-1L), 9223372036854775553L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.retainAll(linkedList1);
      Object object0 = new Object();
      Range range1 = Range.of((-1L));
      Integer integer0 = new Integer(16);
      boolean boolean0 = range1.equals(integer0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=4.09641568396407
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483662L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(861L);
      Range range0 = Range.of(3873L, 2147483662L);
      Long long0 = new Long(2147483662L);
      range_Builder0.expandEnd(2147483662L);
      Range.Builder range_Builder2 = range_Builder1.contractEnd(0L);
      Range range1 = Range.ofLength(861L);
      Range.Builder range_Builder3 = range_Builder2.contractBegin(518L);
      Range range2 = range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.retainAll(linkedList1);
      List<Range> list0 = range1.complement(range0);
      range2.complementFrom(list0);
      range1.intersects(range0);
      range_Builder1.expandBegin(731L);
      Range.Comparators.values();
      Range range3 = range_Builder3.build();
      range3.intersection(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      range0.complementFrom(linkedList2);
      Range range4 = range_Builder1.build();
      assertFalse(range4.equals((Object)range1));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=4.180792453856083
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(2147483648L);
      Range range1 = Range.ofLength(2147483648L);
      range1.spliterator();
      List<Range> list0 = range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1470L, 65535L);
      Range.of(2147483648L, 2147483647L);
      Range.of(2147483648L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-1699L), 2147483647L);
      range0.intersection(range1);
      List<Range> list1 = range2.complementFrom(list0);
      assertFalse(range0.isEmpty());
      assertEquals(2, list1.size());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.9042391130774003
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483647L);
      range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder0.expandEnd(2147483647L);
      range_Builder0.contractEnd(0L);
      Range range0 = Range.ofLength(1274L);
      range_Builder2.contractBegin(2147483647L);
      Range range1 = range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      linkedList1.retainAll(linkedList0);
      linkedList1.sort(comparator0);
      linkedList0.retainAll(linkedList1);
      range0.complementFrom(linkedList0);
      range1.intersects(range0);
      Range.Comparators.values();
      Range range2 = range_Builder1.build();
      range2.split(2147483647L);
      range0.intersection(range2);
      Range range3 = Range.ofLength(0L);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.536193506804362
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = 2147483687L;
      Range.Builder range_Builder0 = new Range.Builder(2147483687L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.expandEnd(2147483687L);
      Long long1 = new Long(2147483687L);
      range_Builder1.expandEnd(2147483687L);
      range_Builder2.contractEnd(1498L);
      Range.ofLength(4294967295L);
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=4.0161146530111305
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      range1.spliterator();
      assertFalse(range1.isEmpty());
      
      Range.of(2147483647L);
      Range range3 = Range.of(255L, 255L);
      range3.complement(range0);
      Range range4 = range3.intersection(range0);
      assertFalse(range3.isEmpty());
      assertFalse(range0.isEmpty());
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.2367238040740407
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.of(255L);
      Range range0 = Range.of(255L);
      Long long0 = new Long(4045L);
      Range range1 = Range.of(4045L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.356389889160809
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Range range0 = Range.of(range_CoordinateSystem0, 157L, 157L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 861L, 9223372034707292121L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.2671143019073323
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.of(861L, 2147483662L);
      Long long0 = new Long(2147483662L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.4239283527108557
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.of((-1477L));
      Range range0 = Range.of((-2147483648L));
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-1477L), (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.3976800595209387
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of((-800L), (-800L));
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.347430086352175
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1897L), (-476L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-1699L), 1778L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=4.160857953486718
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range0.iterator();
      range0.spliterator();
      range_Builder0.contractBegin((-917L));
      range_Builder0.expandBegin(1L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 1L);
      Range range2 = range1.intersection(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range range3 = Range.of(1L);
      range_Builder1.expandEnd(1L);
      range2.isSubRangeOf(range0);
      Range range4 = Range.of((-32768L), 21L);
      range0.complement(range4);
      range0.intersects(range2);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem2);
      range_Builder1.shift(0L);
      Range range5 = Range.parseRange("[ 1 .. 1 ]/0B", range_CoordinateSystem1);
      range5.startsBefore(range3);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range3.toString(range_CoordinateSystem3);
      // Undeclared exception!
      try { 
        Range.parseRange("MCTP+a", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse MCTP+a into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.511760216548634
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.of((-800L), (-800L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-800L), 2147479771L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.3613762333382993
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(2147482786L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(object2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.601317482832059
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = (-1477L);
      Range.of((-1477L));
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L), (-1477L));
      range0.isSubRangeOf(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1263L, (-1477L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.822530240465006
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = 2147483687L;
      Range.Builder range_Builder0 = new Range.Builder(2147483687L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandEnd(2147483687L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(2147483687L, 2147483687L);
      Range range0 = Range.of(2147483687L);
      Range range1 = Range.ofLength(2147483687L);
      range0.intersection(range1);
      range1.spliterator();
      Long long1 = new Long((-9223372036854775307L));
      range1.equals(">0D3");
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-1L), (-2125L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.6973187615586744
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = 435L;
      Range range0 = Range.of(435L);
      range0.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 435L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=4.057692393995577
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-2908L));
      Range range1 = Range.of((-2956L));
      range0.startsBefore(range1);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      range1.intersects(range0);
      Range range2 = Range.of(731L);
      range2.intersects(range0);
      Range range3 = Range.of((-1092L), 1753L);
      Range range4 = range2.intersection(range0);
      Range.ofLength(1753L);
      boolean boolean0 = range0.isSubRangeOf(range4);
      assertFalse(boolean0);
      
      range3.spliterator();
      boolean boolean1 = range3.startsBefore(range1);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=4.044634492026049
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(861L);
      Range range0 = Range.of(3877L, 2147483647L);
      Long long0 = new Long(2147483647L);
      range0.equals(long0);
      Range range1 = Range.of(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range2 = Range.of(2147483647L, 2147483647L);
      range1.isSubRangeOf(range1);
      Range range3 = Range.ofLength(3171L);
      range2.startsBefore(range0);
      range2.complement(range3);
      range3.getBegin();
      range2.intersects(range1);
      Range.of(731L);
      range3.intersects(range1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.of(3171L, 2147483647L);
      range3.intersection(range0);
      Range.ofLength(3877L);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(3171L, 693L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.6932756245743037
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 2147483647L, 2147483647L);
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem3);
      range1.split(2147483647L);
      range0.intersection(range1);
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(127L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.813878430026849
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483600L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandEnd(2147483600L);
      range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range0 = Range.of(2147483600L);
      Range range1 = Range.ofLength(2147483600L);
      Range range2 = range0.intersection(range1);
      Spliterator<Long> spliterator0 = range1.spliterator();
      Range.of(2147483600L);
      Long long0 = new Long(340L);
      range2.equals(spliterator0);
      Range.Builder range_Builder3 = new Range.Builder(2147483600L, 2147483600L);
      assertFalse(range_Builder3.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.8791844874547894
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(861L);
      Range range0 = Range.of(3903L, 2147483647L);
      Long long0 = new Long(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Range.of((-1853L), 373L);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertSame(range2, range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.5799719882803336
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(9223372036854775794L);
      Range range1 = Range.of((-542L));
      long long0 = 519L;
      Range range2 = Range.of(519L);
      range2.startsBefore(range0);
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -542 would make range [9223372036854775794 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.330264478399572
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-476L));
      range0.equals(range0);
      Range range1 = range0.intersection(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.672068209926527
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 32767L);
      range0.spliterator();
      range0.getLength();
      range0.split(32767L);
      Range range1 = Range.ofLength(32513L);
      Range range2 = Range.of(872L);
      Object object0 = new Object();
      range0.equals(range1);
      Range range3 = Range.ofLength(32513L);
      range1.equals(range3);
      range2.intersection(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.111534645219026
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.606832254743034
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = (-1477L);
      Range range0 = Range.of((-1477L));
      Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L), (-1477L));
      range1.isSubRangeOf(range0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1263L, (-479L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.601317482832059
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = (-1477L);
      Range range0 = Range.of((-1477L));
      Range range1 = Range.of((-2147483648L));
      Range.of((-2147483648L), (-1477L));
      range0.isSubRangeOf(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1263L, (-1477L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.1786334995603744
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(1862L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.6507933984078407
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.copy();
      range_Builder0.expandEnd(2147483647L);
      long long0 = 0L;
      range_Builder0.contractEnd(0L);
      Range range0 = Range.of(0L, 0L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.688280093110263
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.of((-1L), 9223372036854775553L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.retainAll(linkedList1);
      Object object0 = new Object();
      Range range0 = Range.of(1944L);
      Integer integer0 = new Integer(16);
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.18195858203324
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(1862L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.5399485751584927
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(1862L, 1862L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of(4294967295L, 9223372036854775793L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.8473473908005835
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.of((-800L), 1L);
      Range.of((-800L));
      Range range1 = Range.of(range_CoordinateSystem0, (-800L), 2147483647L);
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertTrue(range2.equals((Object)range0));
      //  // Unstable assertion: assertNotSame(range2, range0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.6018162273740018
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(1862L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of(4294967295L, 9223372036854775793L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=4.022190555909937
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483687L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandEnd(2147483687L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder0.expandEnd(2147483687L);
      Range range0 = Range.of(2147483687L, 2147483687L);
      Range range1 = Range.ofLength(2147483687L);
      Range range2 = range0.intersection(range1);
      range1.isSubRangeOf(range2);
      range0.spliterator();
      Range range3 = Range.of(2147483687L);
      Range range4 = Range.of(2294L, 2294L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range4.intersects(range3);
      Range range5 = Range.of(2296L);
      range5.intersection(range3);
      range_Builder2.copy();
      range1.endsBefore(range5);
      // Undeclared exception!
      try { 
        Range.ofLength((-1027L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.6472363395377645
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 1L, 1L);
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 65535L);
      Range range2 = range0.intersection(range1);
      range2.endsBefore(range0);
      Range range3 = Range.of(1L);
      Range.of(804L, 1675L);
      Range range4 = Range.of(65535L);
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.7414332962998857
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = 65535L;
      Range range0 = Range.of(65535L, 65535L);
      Range range1 = Range.of((-2147483648L));
      range1.endsBefore(range0);
      Range range2 = Range.of((-2147483648L), 65535L);
      range1.intersects(range2);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1263L, (-3274L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.5464666292396805
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = 1862L;
      Range.of(1862L, 1862L);
      long long1 = 861L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 685L, 2226L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(685L);
      range0.getBegin(range_CoordinateSystem1);
      Range.ofLength(348L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, (-136L), (-3938L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=4.137279531118313
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(861L);
      long long0 = 3877L;
      Range range0 = Range.of(3877L, 2147483647L);
      Long long1 = new Long(2147483647L);
      range0.equals(long1);
      Range range1 = Range.of(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = Range.of(2147483647L, 2147483647L);
      range1.isSubRangeOf(range1);
      Range range3 = Range.ofLength(3171L);
      range2.startsBefore(range0);
      range2.complement(range3);
      range2.intersects(range1);
      long long2 = 731L;
      Range range4 = Range.of(731L);
      range4.toString();
      range3.intersects(range1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.of(3171L, 2147483647L);
      range3.intersection(range0);
      Range.ofLength(3877L);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(3171L, 693L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.819661349743511
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(1862L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of(4294967295L, 9223372036854775793L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Zero Based", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.6864701695341253
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.of(2147483687L);
      Range.of((-1409L), 4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      linkedList1.sort(comparator0);
      linkedList0.retainAll(linkedList1);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483687L, (-1912L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.951226403046946
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 2295L);
      Range range1 = range0.asRange();
      Range.Builder range_Builder0 = new Range.Builder((-1L), (-1L));
      range_Builder0.contractEnd(1L);
      Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-1768L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range2.getEnd(range_CoordinateSystem2);
      long long0 = 127L;
      Range range3 = Range.ofLength(127L);
      range1.intersection(range3);
      range2.spliterator();
      Range.of(1018L);
      Long long1 = new Long(127L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(2473L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.4735065440667636
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.of((-9223372036854775323L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.5693958135323665
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of(1862L);
      range0.getLength();
      range0.split(1L);
      Range.ofLength(729L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.458433506269885
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-156L), 861L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.ofLength((-156L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-3413L), (-3413L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.5463981021224007
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(2147483687L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(object0);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = range0.getBegin();
      assertEquals(2147483687L, long0);
      
      Range range1 = Range.ofLength(65535L);
      assertFalse(range1.isEmpty());
      
      Range range2 = range0.intersection(range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=4.091177529523451
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.ofLength(2147483687L);
      Range.Builder range_Builder0 = new Range.Builder(2147483687L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483687L);
      Range range1 = Range.ofLength(0L);
      range_Builder1.contractBegin(518L);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.Builder range_Builder3 = range_Builder2.expandEnd(2147483686L);
      Range range2 = Range.of((-9223372036854775299L));
      range2.getBegin();
      Range range3 = Range.ofLength(1851L);
      range3.intersection(range0);
      range1.spliterator();
      Long long0 = new Long(0L);
      range3.equals(range_Builder3);
      Range.Builder range_Builder4 = new Range.Builder(1522L, 2147483686L);
      Range.Builder range_Builder5 = new Range.Builder(1522L);
      Range range4 = range_Builder0.build();
      assertFalse(range4.equals((Object)range1));
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.4991158039839374
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-32767L), long0);
      
      Range.of(1878L);
      range0.spliterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.982552096148346
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483687L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandEnd(2147483687L);
      Range.of((-9223372036854775316L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775299L), (-9223372036854775299L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.split(2147483687L);
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 2147483687L);
      Range.of(range_CoordinateSystem0, (-2202L), 2147483647L);
      Range range2 = Range.of(range_CoordinateSystem1, (-9223372036854775304L), (-508L));
      Range range3 = range0.intersection(range1);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.isEmpty());
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.8505466539445234
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      range0.spliterator();
      Range range1 = Range.of(range_CoordinateSystem0, 1856L, 1856L);
      range1.getLength();
      range1.split(2740L);
      Range.ofLength(1856L);
      Range range2 = Range.of((-3092L));
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.4383390014962365
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range0 = Range.of((-128L));
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(9223372036854772645L);
      range1.equals(object1);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      boolean boolean0 = range1.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.931363808568712
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.equals(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Range range1 = Range.ofLength(255L);
      Range range2 = range1.intersection(range0);
      boolean boolean0 = range1.equals(range2);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=4.079362885739987
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.of((-9223372036854775808L));
      range0.startsBefore(range1);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      boolean boolean0 = range0.intersects(range1);
      Range range2 = Range.of((-9223372036854775808L));
      range2.intersects(range0);
      Range.of((-1092L), 1753L);
      Range range3 = range0.intersection(range0);
      Range range4 = Range.ofLength(127L);
      boolean boolean1 = range2.isSubRangeOf(range0);
      //  // Unstable assertion: assertTrue(boolean1);
      
      range1.spliterator();
      boolean boolean2 = range3.startsBefore(range2);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      
      List<Range> list1 = range4.complement(range1);
      //  // Unstable assertion: assertSame(range1, range0);
      //  // Unstable assertion: assertTrue(list1.contains(range4));
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.3895530195104047
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      range_Builder0.shift(0L);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("bitset can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.bitset can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.427449109702051
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Comparators.values();
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 1198L, 9223372036854775807L);
      range0.getEnd();
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.826023763097401
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483687L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandEnd(2147483687L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(2147483687L, 2147483687L);
      Range range1 = Range.of(2147483687L);
      Range range2 = Range.ofLength(2147483687L);
      range1.intersection(range2);
      Range range3 = Range.ofLength(2147483687L);
      Range.of(1258L, 1258L);
      range0.intersection(range3);
      // Undeclared exception!
      try { 
        range2.split((-9223372036854775299L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.820008754511865
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 32767L);
      long long0 = range0.getLength();
      assertEquals(32513L, long0);
      
      range0.split(32767L);
      Range range1 = Range.ofLength(32513L);
      Range.of(872L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-119L), 0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, 1820L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem3, (-2202L), 32767L);
      Range range3 = range2.intersection(range0);
      assertFalse(range3.isEmpty());
      assertSame(range3, range0);
      assertNotSame(range0, range1);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.568474510904921
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder1.contractEnd(2147483647L);
      Range.of(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder();
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder2.build();
      assertFalse(range1.isEmpty());
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.7884357811307567
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483662L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(861L);
      Range range0 = Range.of(3873L, 2147483662L);
      Long long0 = new Long(2147483662L);
      range_Builder0.expandEnd(2147483662L);
      Range.Builder range_Builder2 = range_Builder1.contractEnd(0L);
      Range range1 = Range.ofLength(861L);
      range_Builder2.contractBegin(518L);
      Range range2 = range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2674);
      linkedList2.add(integer0);
      linkedList1.retainAll(linkedList2);
      linkedList0.retainAll(linkedList1);
      Range.ofLength(2438L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem0);
      Range range3 = range2.asRange();
      Range range4 = range2.asRange();
      assertSame(range4, range3);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.490434247289807
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Comparators.values();
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 1198L, 9223372036854775807L);
      long long0 = range0.getEnd();
      assertEquals(1L, long0);
      
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2L, long1);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.33975614019308
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(690L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.ofLength(1L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483687L, (-1083L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.578262582222994
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483687L);
      range_Builder0.expandBegin(2147483647L);
      range_Builder0.shift((-3973L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775338L), 175L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.7079412746456586
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.ofLength(9223372034707292121L);
      Range range1 = Range.of(9223372034707292121L);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1470L;
      long long1 = 65535L;
      long long2 = 3873L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.601317482832059
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = (-1477L);
      Range.of((-1477L));
      Range.of((-2147483648L));
      Range range0 = Range.of((-2147483648L), 897L);
      range0.isSubRangeOf(range0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1263L, (-3274L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=4.052253189781345
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 255L;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 32767L);
      range0.spliterator();
      range0.getLength();
      List<Range> list0 = range0.split(32767L);
      range0.toString();
      Range range1 = Range.parseRange("[ 255 .. 32767 ]/0B");
      range1.getBegin();
      range0.complementFrom(list0);
      Range.of(32767L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("invalid startOffset %d: file is only %d bytes", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse invalid startOffset %d: file is only %d bytes into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.1133442736467214
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.retainAll(linkedList1);
      Range.of(2033L);
      linkedList0.listIterator();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      assertTrue(linkedList2.equals((Object)linkedList0));
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.637837761761649
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.expandBegin(0L);
      range_Builder0.build();
      Range.of(0L);
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertFalse(range_ComparatorsArray1.equals((Object)range_ComparatorsArray0));
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.7215441943673495
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder2 = range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1374L, 4124L);
      range_Builder0.build();
      range_Builder2.contractBegin(1702L);
      range_Builder1.shift(1704L);
      Object object0 = new Object();
      Range range1 = Range.of(127L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.478598753780158
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483687L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.shift(2147483687L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.of(2147483687L);
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.3808049226749004
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.contractEnd(861L);
      Range range0 = Range.of(481L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range range1 = range_Builder2.build();
      assertSame(range1, range0);
      
      Range range2 = range_Builder0.build();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.7624790752123456
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = (-476L);
      Range range0 = Range.of((-476L), (-144L));
      Range range1 = Range.of((-476L));
      Range range2 = range0.intersection(range1);
      range1.isSubRangeOf(range0);
      Range.of(21L);
      range0.startsBefore(range2);
      Range range3 = Range.of((-144L), 21L);
      Long long1 = new Long(2629L);
      range3.isEmpty();
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("(d+)s*-s*(d+)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.(d+)s*-s*(d+)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.3810476749268705
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of((-2908L));
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.retainAll(linkedList1);
      Object object0 = new Object();
      Range range1 = range0.intersection(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.5515526013056062
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.contractBegin(0L);
      range_Builder0.shift((-3734L));
      range_Builder0.copy();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.688793684890876
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.of((-9223372036854775808L));
      range0.complement(range1);
      range0.intersects(range1);
      Range.of((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 272L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.4914577323656517
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of(3190L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      range1.intersects(range0);
      Range.Comparators.values();
      Range range2 = range_Builder0.build();
      Range range3 = range0.intersection(range1);
      assertSame(range3, range2);
      assertTrue(range3.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.9174848191153497
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.ofLength(2147483687L);
      Range.Builder range_Builder0 = new Range.Builder(2147483687L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483687L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = Range.ofLength(0L);
      range_Builder1.contractBegin(518L);
      Range range2 = range1.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2146716415);
      linkedList1.add(integer0);
      linkedList0.retainAll(linkedList1);
      range1.complement(range0);
      range0.complementFrom(linkedList0);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range.Comparators.values();
      Range range3 = range_Builder1.build();
      Range range4 = range2.intersection(range0);
      range4.equals("XH`fSpTboE@4E");
      Range.Builder range_Builder3 = new Range.Builder();
      range2.iterator();
      range3.iterator();
      range0.intersection(range4);
      assertTrue(range2.isEmpty());
      
      Range range5 = range_Builder0.build();
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.6606656045182184
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(0L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.789668104827576
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.ofLength(9223372034707292121L);
      Range range1 = Range.of(9223372034707292121L);
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1470L;
      long long1 = 65535L;
      long long2 = 3873L;
      Range.of(range_CoordinateSystem0, 1470L, 3873L);
      Range.of(65535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 3873L, (-2853L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.5125169912124776
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(1L);
      range0.startsBefore(range1);
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.contractBegin(0L);
      range_Builder1.shift(0L);
      Object object0 = new Object();
      Range.Builder range_Builder2 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.of(1L, (-9223372036854774729L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.335609100963315
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1699L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of((-1L), (-1L));
      Object object2 = new Object();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.6737996253908394
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.of((-128L));
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range.of((-128L), 9223372032559808514L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("gkww]1GnK^6vDsR!}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.gkww]1GnK^6vDsR!}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.30273127777412
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.add((Object) linkedList1);
      List<Object> list0 = linkedList0.subList(1, 1);
      linkedList1.retainAll(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-2632L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = (-2147483648L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.listIterator();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-4815L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.551292387930639
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483687L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandEnd(2147483687L);
      range_Builder1.shift(2147483687L);
      range_Builder1.contractEnd(2147483687L);
      range_Builder0.expandEnd((-1118L));
      Range range0 = Range.of((-1118L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.3986677638769924
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.of((-1L), 9223372036854775553L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.retainAll(linkedList1);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(1227L, 9223372036854775553L);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.5187860274995773
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 821L, 5809L);
      Range.of((-46L));
      Range.of(range_CoordinateSystem0, (-1L), 2147483647L);
      Range.of((-475L));
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.686656612849355
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L);
      range_Builder0.contractEnd(255L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(861L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.copy();
      range_Builder1.expandEnd(15L);
      Range range0 = Range.ofLength(2147483647L);
      assertFalse(range0.isEmpty());
      
      Long long0 = new Long(861L);
      range_Builder2.copy();
      Range range1 = Range.ofLength(0L);
      assertTrue(range1.isEmpty());
  }
}
