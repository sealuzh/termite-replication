/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 02:46:25 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3156347260180934
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      linkedList1.add(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Strong;
      linkedList1.add(nucleotide1);
      linkedList1.parallelStream();
      Nucleotide nucleotide2 = Nucleotide.Gap;
      linkedList1.add(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec2.isGap(byteArray0, 2);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getUngappedOffsetFor(byteArray0, (-1578));
      Integer integer0 = new Integer((-1578));
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec4.encode((Collection<Nucleotide>) linkedList2);
      defaultNucleotideCodec4.getUngappedOffsetFor(byteArray1, (int) integer0);
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertEquals(1, int0);
      
      defaultNucleotideCodec2.getNumberOfGaps(byteArray1);
      Nucleotide nucleotide3 = Nucleotide.Strong;
      linkedList0.add(nucleotide3);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean1 = defaultNucleotideCodec5.isGap(byteArray1, (-2024));
      assertFalse(boolean1 == boolean0);
      
      defaultNucleotideCodec2.getNumberOfGaps(byteArray1);
      DefaultNucleotideCodec.values();
      int int1 = defaultNucleotideCodec3.getUngappedOffsetFor(byteArray0, (byte) (-88));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)59, (byte)0}, byteArray0);
      assertEquals((-88), int1);
      
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      DefaultNucleotideCodec.valueOf("INSTANCE");
      int int2 = defaultNucleotideCodec3.getNumberOfGaps(byteArray1);
      assertEquals(0, int2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)115;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 4294967295L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483645
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.200603043118146
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      Nucleotide nucleotide0 = Nucleotide.Amino;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Set<Nucleotide> set1 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec0.isGap(byteArray1, (byte) (-88));
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-88));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Nucleotide) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-9);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-42);
      byteArray1[1] = (byte)51;
      byteArray1[2] = (byte) (-42);
      byteArray1[3] = (byte)126;
      byteArray1[4] = (byte) (-9);
      byteArray1[5] = (byte)126;
      byteArray1[6] = (byte) (-9);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte) (-9), iterator0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2178580881394128
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      linkedList0.add(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Cytosine;
      linkedList0.add(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec.values();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList2.forEach(consumer0);
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) linkedList2);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getUngappedOffsetFor(byteArray0, (byte) (-88));
      defaultNucleotideCodec1.getNumberOfGaps(byteArray1);
      linkedList2.add(nucleotide0);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.encode(2147040593, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2544868001530403
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      linkedList1.add(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Strong;
      linkedList1.add(nucleotide1);
      Nucleotide nucleotide2 = Nucleotide.Gap;
      linkedList1.add(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) linkedList2);
      boolean boolean0 = defaultNucleotideCodec2.isGap(byteArray0, (-2146504848));
      assertFalse(boolean0);
      
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, (-3293));
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList2);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec3.getNumberOfGaps(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)59, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(1, int0);
      
      int int1 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (-3293));
      assertEquals(0, int1);
      assertEquals(4, byteArray1.length);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.327629171975629
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      Nucleotide nucleotide0 = Nucleotide.Amino;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Set<Nucleotide> set1 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec0.isGap(byteArray1, (byte) (-88));
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-88));
      defaultNucleotideCodec0.encode(nucleotide0);
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray2, 96);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte) (-88);
      byteArray3[1] = (byte) (-88);
      byteArray3[2] = (byte) (-88);
      byteArray3[3] = (byte) (-88);
      byteArray3[4] = (byte) (-88);
      byteArray3[5] = (byte) (-88);
      byteArray3[6] = (byte) (-88);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray3, (byte) (-88));
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray4 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) linkedList2);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getNumberOfGaps(byteArray4);
      Nucleotide nucleotide1 = Nucleotide.Thymine;
      defaultNucleotideCodec1.encode(nucleotide1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec4.getGappedOffsetFor((byte[]) null, 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.4541803401720945
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide1 = Nucleotide.Adenine;
      linkedList0.add(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      linkedList0.add(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.isGap(byteArray1, 14);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray1, 45);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, (byte) (-88));
      defaultNucleotideCodec0.isGap(byteArray1, 45);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-88);
      byteArray2[1] = (byte) (-88);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getNumberOfGapsUntil(byteArray2, 4);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getUngappedOffsetFor(byteArray1, (byte) (-88));
      defaultNucleotideCodec4.getGappedOffsetFor(byteArray2, (byte) (-88));
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, 45);
      byte[] byteArray3 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.decode((byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.45126227595883
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of(1661L, 1661L);
      byte[] byteArray0 = new byte[4];
      Range range1 = Range.ofLength(4L);
      Range range2 = range0.intersection(range1);
      range0.getLength();
      range0.spliterator();
      defaultNucleotideCodec0.isGap(byteArray0, 1717986918);
      range1.split(1L);
      Range range3 = Range.of(1L, 710L);
      Range.ofLength(4701L);
      range0.startsBefore(range2);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.iterator(byteArray0, range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range3.getBegin(range_CoordinateSystem0);
      range3.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("XyC", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse XyC into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-88));
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 127);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.503390790212646
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Gap;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray2, 2536);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray2);
      DefaultNucleotideCodec.values();
      Nucleotide nucleotide2 = Nucleotide.Unknown;
      linkedList0.add(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getGappedOffsetFor(byteArray0, 111);
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray2, 111);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)29;
      byteArray3[1] = (byte) (-88);
      Nucleotide nucleotide3 = Nucleotide.Strong;
      linkedList0.add(nucleotide3);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getGappedOffsetFor(byteArray1, (-2989));
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.getUngappedOffsetFor(byteArray2, 0);
      defaultNucleotideCodec4.encode(nucleotide0);
      defaultNucleotideCodec5.encode((Collection<Nucleotide>) linkedList0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.4624710517973507
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)7, (byte) (-9), (byte)104, (byte) (-53), (byte)80}, byteArray1);
      
      Nucleotide nucleotide1 = Nucleotide.Gap;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      byte[] byteArray3 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray3, 2536);
      assertEquals(2535, int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray2);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray3);
      assertEquals(0L, long0);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedLength(byteArray0);
      defaultNucleotideCodec2.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec3.getGappedOffsetFor(byteArray3, (-2054));
      assertEquals(1, int1);
      
      String string0 = defaultNucleotideCodec0.toString(byteArray3);
      assertEquals(5, byteArray3.length);
      assertEquals("-", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.5565833889049916
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      Nucleotide nucleotide0 = Nucleotide.Amino;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Set<Nucleotide> set1 = nucleotide0.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec0.isGap(byteArray1, (byte) (-88));
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-88));
      assertEquals(0, int0);
      
      byte[] byteArray3 = defaultNucleotideCodec0.encode(nucleotide0);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray1);
      assertEquals(0L, long0);
      
      String string0 = defaultNucleotideCodec0.toString(byteArray2);
      assertEquals("AC", string0);
      
      String string1 = defaultNucleotideCodec0.toString(byteArray3);
      assertEquals("M", string1);
      
      Nucleotide nucleotide1 = defaultNucleotideCodec0.decode(byteArray3, 0L);
      assertEquals(Nucleotide.Amino, nucleotide1);
      
      byte[] byteArray4 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertEquals(4, byteArray4.length);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2103654138501687
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      linkedList1.add(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Strong;
      linkedList1.add(nucleotide1);
      Nucleotide nucleotide2 = Nucleotide.Gap;
      linkedList1.add(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide3 = Nucleotide.Amino;
      linkedList1.offer(nucleotide3);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((byte) (-88));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      linkedList0.toArray(integerArray0);
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.isGap(byteArray0, 5);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getUngappedOffsetFor(byteArray0, (-1578));
      DefaultNucleotideCodec.values();
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 5019);
      assertEquals(1, int0);
      
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec4.encode((Collection<Nucleotide>) linkedList2);
      int int1 = defaultNucleotideCodec4.getUngappedOffsetFor(byteArray1, 1);
      int int2 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertTrue(int2 == int1);
      
      Nucleotide nucleotide4 = Nucleotide.Strong;
      linkedList0.add(nucleotide4);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec5.isGap(byteArray1, (-2024));
      assertFalse(boolean0);
      
      defaultNucleotideCodec2.getNumberOfGaps(byteArray1);
      assertEquals(4, byteArray1.length);
      
      DefaultNucleotideCodec.values();
      int int3 = defaultNucleotideCodec3.getUngappedOffsetFor(byteArray0, (byte) (-88));
      assertEquals((-88), int3);
      
      DefaultNucleotideCodec.values();
      List<Integer> list0 = defaultNucleotideCodec1.getGapOffsets(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)4, (byte)59, (byte)10}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      long long0 = 4L;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.decode(byteArray0, 1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("inputstream can not be null", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse inputstream can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3326432961196986
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)7, (byte) (-9), (byte)104, (byte) (-53), (byte)80}, byteArray1);
      
      Nucleotide nucleotide1 = Nucleotide.Gap;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray2, 2536);
      assertEquals(2535, int0);
      
      Nucleotide nucleotide2 = Nucleotide.Unknown;
      Nucleotide nucleotide3 = Nucleotide.NotAdenine;
      linkedList0.add(nucleotide3);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set2 = nucleotide2.getAllPossibleAmbiguities();
      byte[] byteArray3 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set2);
      boolean boolean0 = defaultNucleotideCodec1.isGap(byteArray3, (-265));
      assertFalse(boolean0);
      assertEquals(4, byteArray3.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2427374013006207
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      Nucleotide nucleotide0 = Nucleotide.Amino;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Set<Nucleotide> set1 = nucleotide0.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      byte[] byteArray3 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec0.isGap(byteArray1, (byte) (-88));
      byte[] byteArray4 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec0.isGap(byteArray3, (byte) (-88));
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray4, (byte) (-88));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Object object0 = new Object();
      Object object1 = new Object();
      defaultNucleotideCodec1.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec0.getUngappedLength(byteArray2);
      byte[] byteArray5 = new byte[1];
      byteArray5[0] = (byte) (-88);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray5);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)13;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      long long0 = 22L;
      Range range0 = Range.of(22L, 22L);
      byte[] byteArray0 = new byte[1];
      range0.intersection(range0);
      range0.getLength();
      range0.spliterator();
      Range.of(1L);
      int int0 = 1717986914;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 1717986914);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.808463885562474
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)28;
      byteArray0[0] = (byte)28;
      byte byte1 = (byte)1;
      byteArray0[1] = (byte)1;
      byte byte2 = (byte) (-62);
      byteArray0[2] = (byte) (-62);
      byte byte3 = (byte) (-76);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)78;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(1754, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1958550791509905
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.toString(byteArray1);
      int int0 = 2020;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, 2020);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor((byte[]) null, 1717986918);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of(22L, 22L);
      byte[] byteArray0 = new byte[4];
      Range range1 = range0.intersection(range0);
      range0.getLength();
      Range.of(1L, 1L);
      range0.split(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.ofLength(1L);
      range1.intersects(range2);
      range1.isSubRangeOf(range0);
      Range.of(range_CoordinateSystem1, 22L, 23L);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1717986918);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8214302816273404
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)8;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)107;
      defaultNucleotideCodec0.isGap(byteArray0, (byte) (-79));
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-124));
      byte[] byteArray1 = new byte[5];
      byteArray0[4] = (byte)8;
      byteArray1[1] = (byte) (-79);
      byteArray1[2] = (byte) (-124);
      byteArray1[3] = (byte) (-124);
      byteArray1[4] = (byte) (-91);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (-3005));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6439556568820564
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)0;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.decode(byteArray0, (byte)102);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 102 corresponds to encodedIndex 55  encodedglyph length is 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-32);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 5);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range.of(1L);
      byte[] byteArray0 = new byte[4];
      Range.of(1L, 1L);
      byte byte0 = (byte)116;
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-73);
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      defaultNucleotideCodec0.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of((-88L));
      Range.of(1L, 1L);
      byte byte0 = (byte) (-73);
      byte byte1 = (byte)33;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)33;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte) (-29);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.050751606586606
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("AT", string0);
      
      Nucleotide nucleotide1 = defaultNucleotideCodec0.decode(byteArray1, 0L);
      assertEquals(Nucleotide.Adenine, nucleotide1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)30}, byteArray1);
      
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertTrue(set0.contains(nucleotide1));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.072151657525716
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Integer integer0 = new Integer(10);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("", string0);
      
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Purine;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)18}, byteArray1);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide2 = Nucleotide.Guanine;
      Set<Nucleotide> set2 = nucleotide2.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)32}, byteArray2);
      
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8136605216916037
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)62;
      byteArray1[5] = (byte)41;
      byteArray1[6] = (byte)113;
      byteArray1[7] = (byte)6;
      byteArray1[8] = (byte)122;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.3217888362136048
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Purine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Unknown;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 1838);
      Nucleotide nucleotide2 = Nucleotide.Cytosine;
      Set<Nucleotide> set2 = nucleotide2.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set2);
      defaultNucleotideCodec1.getUngappedLength(byteArray2);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer(1838);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (-3589));
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)58;
      byteArray3[1] = (byte)58;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.iterator(byteArray3);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.924886245768638
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-16L);
      long long1 = (-10L);
      Range range0 = Range.of(range_CoordinateSystem1, (-16L), (-10L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem2);
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = null;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.654864747791147
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Amino;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4219598892239973
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)107;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-79);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-79);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, 31);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5683304305687247
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-79);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1));
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (-1));
      assertFalse(boolean0);
      
      int int1 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.035694343321428
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-88);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Strong;
      linkedList0.add(nucleotide0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.retainAll(linkedList1);
      Nucleotide nucleotide1 = Nucleotide.Unknown;
      linkedList0.add(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList2);
      defaultNucleotideCodec0.isGap(byteArray1, (byte) (-88));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-88));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5231918705451206
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-25);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1248);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.103491478302883
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-88);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Strong;
      linkedList0.add(nucleotide0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.retainAll(linkedList1);
      Nucleotide nucleotide1 = Nucleotide.Unknown;
      linkedList0.add(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      linkedList2.add(nucleotide0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList2);
      defaultNucleotideCodec0.isGap(byteArray1, (byte) (-88));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-88));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of(22L, 22L);
      byte[] byteArray0 = new byte[4];
      range0.intersection(range0);
      range0.getLength();
      range0.spliterator();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-101);
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)2;
      range0.getLength();
      byteArray1[3] = (byte)93;
      byteArray1[4] = (byte) (-74);
      byteArray1[5] = (byte) (-66);
      byteArray1[6] = (byte)11;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of(1L, 1L);
      Range range1 = Range.ofLength(4L);
      range0.intersection(range1);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.spliterator();
      Range range2 = Range.of(range_CoordinateSystem0, (-3026L), (-3026L));
      Range range3 = Range.of(1L, 1L);
      Range.ofLength(2080L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)116;
      defaultNucleotideCodec0.iterator(byteArray0, range3);
      range2.getBegin(range_CoordinateSystem0);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange(",*E3)?8A%CL!kPs'L:>", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ,*E3)?8A%CL!kPs'L:> into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of(22L, 22L);
      byte[] byteArray0 = new byte[4];
      Range range1 = range0.intersection(range0);
      range0.getLength();
      range0.spliterator();
      Range range2 = Range.of(1L);
      range1.equals(range2);
      Range.ofLength(1L);
      defaultNucleotideCodec0.isGap(byteArray0, 1717986918);
      range0.split(1L);
      String string0 = "54=cRn";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.ofLength(1L);
      range3.toString();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 1 .. 1 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-16L);
      long long1 = (-1L);
      Range range0 = Range.of(range_CoordinateSystem1, (-16L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem2);
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -16 .. -1 ]/0B is out of range of sequence which is only [ 0 .. 0 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of(1L, 1L);
      byte[] byteArray0 = new byte[4];
      Range range1 = Range.ofLength(4L);
      range0.intersection(range1);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.spliterator();
      Range.of(range_CoordinateSystem0, (-3026L), (-3026L));
      Range.of(1L, 1L);
      byteArray0[0] = (byte)116;
      Range range2 = Range.ofLength(710L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.520805078028692
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)125;
      byteArray0[0] = (byte)125;
      byte byte1 = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.2653546087401497
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Amino;
      nucleotide0.getAllPossibleAmbiguities();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.add(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Weak;
      linkedList0.add(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      linkedList0.add((int) (byte)0, nucleotide1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)3;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 1L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 1 corresponds to encodedIndex 4  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.4045403310125617
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-73);
      byteArray0[8] = (byte) (-88);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.510404533308129
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      long long0 = 22L;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte) (-102);
      byteArray0[8] = (byte)27;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(397, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of(1L, 1L);
      byte[] byteArray0 = new byte[4];
      range0.spliterator();
      Range.of(1L);
      range0.split(4L);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-2522));
      long long0 = (-1L);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 2185);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-1L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -1
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte)60;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)45;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (-792));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-2113396604), (Iterator<Nucleotide>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.383329504375038
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, 4L);
      assertEquals(Nucleotide.Gap, nucleotide0);
      
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec2.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec.values();
      int int0 = defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, (byte)0);
      assertEquals(0, int0);
      
      byte[] byteArray1 = defaultNucleotideCodec3.encode(0, (Iterator<Nucleotide>) null);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.4323966355417994
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-41));
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-116);
      byte byte0 = (byte)5;
      byteArray0[4] = (byte)5;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-41));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-119);
      byteArray1[1] = (byte) (-116);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-117);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte) (-117), (Iterator<Nucleotide>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, 1992);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.403763330235561
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)90;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.6205643331111412
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-31);
      byte byte0 = (byte) (-105);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.419913659591561
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of(22L, 22L);
      byte[] byteArray0 = new byte[4];
      range0.intersection(range0);
      range0.getLength();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)109;
      byteArray1[2] = (byte) (-8);
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)119;
      byteArray1[5] = (byte) (-19);
      byteArray1[6] = (byte) (-94);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, 1353);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.decode(byteArray0, 4L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$Builder", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$Builder into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.1756600944093183
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Amino;
      nucleotide0.getAllPossibleAmbiguities();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.add(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Weak;
      linkedList0.add(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 14);
      assertFalse(boolean0);
      
      DefaultNucleotideCodec.values();
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 2285);
      assertEquals(0, int0);
      
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Object object0 = new Object();
      linkedList1.removeFirstOccurrence(object0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Integer integer0 = new Integer(2285);
      Predicate.isEqual((Object) integer0);
      linkedList0.removeIf(predicate3);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.iterator(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-92)}, byteArray0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.228884646714877
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      linkedList0.add(nucleotide0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      ListIterator<Nucleotide> listIterator0 = linkedList1.listIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(10004888, (Iterator<Nucleotide>) listIterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }
}
