/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 01:56:43 GMT 2019
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URI;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcvi.jillion.core.util.FileIterator;
import org.jcvi.jillion.core.util.MultipleFileFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileIterator_ESTest extends FileIterator_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.573122205416985
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile("", "");
      MockFile mockFile2 = new MockFile(mockFile1, ".8h6se");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder0.fileFilter((FileFilter) null);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      mockFile2.createNewFile();
      fileIterator0.spliterator();
      mockFile0.setWritable(false);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "h$>NZt}Gh?*AU!";
      try { 
        MockFile.createTempFile("h$>NZt}Gh?*AU!", "", (File) mockFile1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.727739551694725
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      MockFile mockFile2 = new MockFile(mockFile1, "A'\"hfd'bCq\"Z %UiW");
      mockFile2.createNewFile();
      mockFile2.setWritable(false);
      mockFile0.setWritable(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile2);
      mockFile2.delete();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      MockFile mockFile3 = new MockFile("h$>NZt}Gh?*AU!");
      mockFile0.setWritable(true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile4 = new MockFile(uRI0);
      MockFile.createTempFile("w@f", "");
      MockFile.createTempFile("~:Gx{uF_,l/Aqxn'", "=i!c~N'JY1\"kC0sE");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.getNextFile();
      MockFile mockFile5 = new MockFile(uRI0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile5);
      fileIterator0.next();
      File file0 = MockFile.createTempFile("org.jcvi.jillion.internal.core.util.AbstractFOQueue", "w@f");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      assertNotSame(fileIterator_FileIteratorBuilder2, fileIterator_FileIteratorBuilder0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.749680260766172
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      String string1 = "";
      MockFile mockFile1 = new MockFile("", "");
      MockFile mockFile2 = new MockFile(mockFile1, "A'\"hfd'bCq\"Z %UiW");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder0.fileFilter((FileFilter) null);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      mockFile2.setWritable(false);
      mockFile0.setWritable(false);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile2);
      mockFile2.delete();
      File file0 = MockFile.createTempFile("h$>NZt}Gh?*AU!", "", (File) mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      fileIterator0.iterator();
      MockFile mockFile3 = new MockFile("h$>NZt}Gh?*AU!");
      mockFile0.setWritable(false);
      file0.setExecutable(false);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator1.next();
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder0.build();
      fileIterator2.next();
      // Undeclared exception!
      try { 
        fileIterator1.setUpInitialState((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator$RecursiveFileIterator", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.8230433726684336
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      MockFile mockFile2 = new MockFile(mockFile1, "A'\"hfd'bCq\"Z %UiW");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder0.build();
      fileIterator_FileIteratorBuilder0.fileFilter((FileFilter) null);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      mockFile2.setWritable(false);
      mockFile0.setWritable(false);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile2);
      mockFile2.delete();
      File file0 = MockFile.createTempFile("h$>NZt}Gh?*AU!", "", (File) mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      fileIterator0.iterator();
      MockFile mockFile3 = new MockFile("h$>NZt}Gh?*AU!");
      mockFile0.setWritable(false);
      file0.setExecutable(false);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      File file1 = fileIterator1.next();
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder0.build();
      fileIterator2.next();
      fileIterator1.setUpInitialState(file1);
      fileIterator1.iterator();
      fileIterator2.iterator();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      MockFile mockFile4 = new MockFile(mockFile3, "");
      fileIterator1.getNextFile();
      file1.getAbsolutePath();
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.7279735439012853
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      mockFile0.mkdirs();
      MockFile mockFile2 = new MockFile(mockFile1, "A'\"hfd'bCq\"Z %UiW");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder0.fileFilter((FileFilter) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.fileFilter((FileFilter) null);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      mockFile2.setExecutable(false);
      mockFile2.setWritable(true);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      MockFile mockFile3 = new MockFile("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      mockFile1.getAbsoluteFile();
      MockFile mockFile4 = new MockFile(mockFile0, "org.jcvi.jillion.core.util.FileIterator$RecursiveFileIterator$DirectoryFileFilter");
      mockFile4.setExecutable(true);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile2);
      fileIterator0.getNextFile();
      fileIterator0.getNextFile();
      fileIterator0.iterator();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.5707035491661756
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter((FileFilter) null);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.hasNext();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder2.includeDirectories(false);
      mockFile1.delete();
      fileIterator0.setUpInitialState(mockFile1);
      MockFile mockFile2 = null;
      // Undeclared exception!
      try { 
        fileIterator0.updateFileIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3358345715656292
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("}#<g6V2Otby6>o~");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile("", "");
      FileFilter[] fileFilterArray0 = new FileFilter[8];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      linkedList1.add(fileFilterArray0[1]);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[5] = (FileFilter) multipleFileFilter5;
      multipleFileFilter3.accept(mockFile0);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[6] = (FileFilter) multipleFileFilter6;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[7] = (FileFilter) multipleFileFilter7;
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      MockFile mockFile1 = new MockFile("");
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.next();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder1));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.219002851929821
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "");
      mockFile0.setWritable(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/92_jcvi-javacommon");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      mockFile1.setExecutable(true);
      mockFile1.setWritable(false);
      MockFile mockFile2 = new MockFile("", "Fd/pCv/xdK9");
      mockFile2.setExecutable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(mockFile2);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile2);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "%,vc[K=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.7281800609233935
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("zY-IF", "");
      mockFile1.setReadOnly();
      MockFile mockFile2 = new MockFile(mockFile1, "A'\"hfd'bCq\"Z %UiW");
      mockFile2.createNewFile();
      mockFile2.setWritable(false);
      mockFile0.setWritable(false);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile2);
      mockFile2.delete();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      MockFile mockFile3 = new MockFile("h$>NZt}Gh?*AU!");
      mockFile0.setWritable(true);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile4 = new MockFile(uRI0);
      MockFile.createTempFile("w@f", "");
      MockFile.createTempFile("~:Gx{uF_,l/Aqxn'", "=i!c~N'JY1\"kC0sE");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.getNextFile();
      File file0 = fileIterator0.next();
      assertTrue(file0.canWrite());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.518110438902386
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      linkedList0.add((FileFilter) multipleFileFilter0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      linkedList0.add((FileFilter) multipleFileFilter1);
      MockFile.createTempFile("IhOnq", "");
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      linkedList0.parallelStream();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      linkedList1.removeLastOccurrence(multipleFileFilter1);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList0);
      linkedList1.add((FileFilter) multipleFileFilter4);
      LinkedList<FileFilter> linkedList2 = null;
      MultipleFileFilter multipleFileFilter7 = null;
      try {
        multipleFileFilter7 = new MultipleFileFilter((List<FileFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3927214432007964
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("");
      mockFile0.setWritable(false);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      mockFile1.setExecutable(true);
      mockFile1.setWritable(false);
      MockFile mockFile2 = new MockFile("", "Fd/pCv/xdK9");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.setUpInitialState(mockFile2);
      fileIterator0.iterator();
      try { 
        MockFile.createTempFile("", "%,vc[K=");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.4997162563198803
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.hasNext();
      mockFile1.setWritable(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      File file0 = fileIterator0.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      mockFile1.delete();
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      fileIterator0.setUpInitialState(mockFile1);
      fileIterator0.updateFileIterator(mockFile1);
      try { 
        MockFile.createTempFile("<V ip+0H!nf", "<V ip+0H!nf", (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.286157762190457
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      mockFile0.delete();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.spliterator();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      assertNotSame(fileIterator_FileIteratorBuilder1, fileIterator_FileIteratorBuilder0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.5578333474731183
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile((File) null, "");
      mockFile1.setWritable(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/92_jcvi-javacommon");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(false);
      MockFile mockFile2 = new MockFile(mockFile1, "");
      fileIterator_FileIteratorBuilder2.includeDirectories(false);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      mockFile2.setExecutable(true);
      mockFile2.setWritable(true);
      URI uRI0 = MockURI.create("org.jcvi.jillion.core.util.FileIterator$RecursiveFileIterator");
      assertNull(uRI0.getRawAuthority());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.639159372172343
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.hasNext();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder2.includeDirectories(false);
      mockFile1.delete();
      fileIterator0.setUpInitialState(mockFile1);
      fileIterator0.updateFileIterator(mockFile1);
      MockFile mockFile2 = new MockFile("x,L>+`z]U");
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile2);
      mockFile0.setExecutable(true);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile2);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator0.getNextFile();
      fileIterator0.getNextFile();
      // Undeclared exception!
      try { 
        fileIterator0.iterator();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.505305350746804
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      MockFile mockFile1 = null;
      String string0 = "A'\"hfd'bCq\"Z %UiW";
      MockFile mockFile2 = new MockFile((File) null, "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile2);
      FileFilter fileFilter0 = null;
      fileIterator_FileIteratorBuilder0.fileFilter((FileFilter) null);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      mockFile0.setWritable(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile2);
      mockFile2.delete();
      MockFile mockFile3 = new MockFile("h$>NZt}Gh?*AU!");
      mockFile2.getAbsolutePath();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile2);
      // Undeclared exception!
      try { 
        fileIterator0.iterator();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.481697617019537
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.spliterator();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = new FileFilter[2];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      FileFilter[] fileFilterArray1 = new FileFilter[1];
      fileFilterArray1[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray1);
      linkedList0.add(fileFilterArray1[0]);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      linkedList0.push(multipleFileFilter3);
      assertEquals(2, linkedList0.size());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.765608412062858
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(false, false);
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder0.fileFilter((FileFilter) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      mockFile1.setExecutable(true);
      mockFile1.setWritable(true);
      MockFile mockFile2 = new MockFile("", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile1.getAbsoluteFile();
      File file0 = fileIterator0.next();
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      fileIterator0.getNextFile();
      FileSystemHandling.shouldAllThrowIOExceptions();
      fileIterator0.getNextFile();
      fileIterator0.iterator();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      linkedList0.push((FileFilter) null);
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile3 = null;
      try {
        mockFile3 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.6750014577196786
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      MockFile mockFile2 = new MockFile(mockFile1, "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      mockFile2.mkdir();
      mockFile2.mkdir();
      mockFile2.delete();
      File file0 = MockFile.createTempFile("h$>NZt}Gh?*AU!", "", (File) mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      fileIterator0.iterator();
      MockFile mockFile3 = new MockFile("h$>NZt}Gh?*AU!");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile4 = new MockFile(uRI0);
      file0.mkdir();
      MockFile.createTempFile("h$>NZt}Gh?*AU!", "");
      MockFile.createTempFile("~:Gx{uF_,l/Aqxn'", "=i!c~N'JY1\"kC0sE");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(file0);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder1));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.6017461544002676
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      linkedList0.add((FileFilter) multipleFileFilter0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      linkedList0.add((FileFilter) multipleFileFilter2);
      linkedList0.add((FileFilter) multipleFileFilter1);
      MockFile.createTempFile("Ihnq", "");
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      linkedList0.parallelStream();
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      linkedList1.removeLastOccurrence(multipleFileFilter1);
      FileFilter[] fileFilterArray0 = new FileFilter[7];
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList0);
      linkedList1.add((FileFilter) multipleFileFilter5);
      LinkedList<FileFilter> linkedList2 = null;
      MultipleFileFilter multipleFileFilter8 = null;
      try {
        multipleFileFilter8 = new MultipleFileFilter((List<FileFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9941742404633964
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile((File) null, "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      fileIterator0.getNextFile();
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.5557429990414833
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.432757197408911
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      linkedList0.add((FileFilter) multipleFileFilter0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      linkedList0.add((FileFilter) multipleFileFilter1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      linkedList1.removeLastOccurrence(multipleFileFilter5);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      fileIterator_FileIteratorBuilder0.build();
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList0);
      linkedList1.removeLastOccurrence(multipleFileFilter0);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList1);
      linkedList0.add((FileFilter) multipleFileFilter6);
      LinkedList<FileFilter> linkedList2 = null;
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter12 = null;
      try {
        multipleFileFilter12 = new MultipleFileFilter((List<FileFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9338399234319037
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PY#I@(");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PY#I@(");
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PY#I@(");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        fileIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.525891768175958
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("A'\"hfd'bCq\"Z %UiW", "A'\"hfd'bCq\"Z %UiW");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(mockFile0);
      mockFile1.setWritable(false);
      mockFile0.setWritable(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      assertNotSame(fileIterator_FileIteratorBuilder3, fileIterator_FileIteratorBuilder2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.4933417866195544
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "");
      mockFile0.setLastModified(0L);
      File file0 = MockFile.createTempFile("5so", "5so");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.build();
      fileIterator0.getNextFile();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      assertFalse(fileIterator_FileIteratorBuilder3.equals((Object)fileIterator_FileIteratorBuilder2));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.850407589770435
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "");
      mockFile0.setLastModified(0L);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      MockFile mockFile1 = new MockFile(mockFile0, "kc]>Z-#F7N,m74g_|,#");
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      mockFile0.renameTo(mockFile1);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.setUpInitialState(mockFile1);
      fileIterator0.updateFileIterator(mockFile0);
      MockFile mockFile2 = null;
      try {
        mockFile2 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.928226451098303
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.add((FileFilter) multipleFileFilter5);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList0);
      linkedList0.removeLastOccurrence(fileFilterArray0[3]);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder0.fileFilter(fileFilterArray0[0]);
      fileIterator_FileIteratorBuilder0.build();
      mockFile0.setReadOnly();
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile1.setWritable(true);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(linkedList1);
      linkedList1.add((FileFilter) multipleFileFilter9);
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter13 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      assertEquals(0, linkedList2.size());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ae", "Ae");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      linkedList0.add((FileFilter) multipleFileFilter0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      linkedList0.add((FileFilter) multipleFileFilter1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      linkedList1.removeLastOccurrence(multipleFileFilter5);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.4459311899497576
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      FileFilter[] fileFilterArray0 = new FileFilter[9];
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[5] = (FileFilter) multipleFileFilter5;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[6] = (FileFilter) multipleFileFilter6;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[7] = (FileFilter) multipleFileFilter7;
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[8] = (FileFilter) multipleFileFilter8;
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.add((FileFilter) multipleFileFilter9);
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(linkedList0);
      fileIterator_FileIteratorBuilder1.fileFilter(multipleFileFilter10);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4428352147175594
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      File file0 = null;
      MockFile mockFile0 = new MockFile((File) null, "oZM,EqXNg");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      linkedList0.add((FileFilter) multipleFileFilter0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      linkedList0.add((FileFilter) null);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      linkedList1.removeLastOccurrence(multipleFileFilter5);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.432757197408911
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[3];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      linkedList0.add((FileFilter) multipleFileFilter0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter3);
      fileIterator_FileIteratorBuilder0.build();
      mockFile0.setReadOnly();
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.setWritable(false);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList1);
      linkedList1.add((FileFilter) multipleFileFilter4);
      FileFilter[] fileFilterArray1 = new FileFilter[9];
      fileFilterArray1[0] = (FileFilter) multipleFileFilter1;
      fileFilterArray1[1] = (FileFilter) multipleFileFilter4;
      FileFilter[] fileFilterArray2 = new FileFilter[8];
      fileFilterArray2[0] = (FileFilter) multipleFileFilter4;
      fileFilterArray2[1] = (FileFilter) multipleFileFilter2;
      fileFilterArray2[2] = (FileFilter) multipleFileFilter4;
      fileFilterArray2[3] = (FileFilter) multipleFileFilter3;
      fileFilterArray2[4] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray1);
      fileFilterArray2[5] = (FileFilter) multipleFileFilter5;
      fileFilterArray2[6] = (FileFilter) multipleFileFilter3;
      fileFilterArray2[7] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray2);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      assertEquals(0, linkedList2.size());
  }
}
