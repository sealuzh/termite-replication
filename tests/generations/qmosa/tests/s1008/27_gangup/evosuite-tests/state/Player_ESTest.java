/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 01:32:39 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URISyntaxException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(1676L);
      Player player0 = new Player(4919, (String) null, "F#-W", 4919, 1);
      String string0 = player0.getIP();
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(4919, player0.getPictureId());
      assertNull(string0);
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile((String) null, ",6;p+4\"");
      mockFile0.mkdir();
      mockFile0.delete();
      Player player0 = new Player((-1893), "module.ModuleBrowserDialog$ModuleFilter", "ESz$lE1mb%:", (-5433), (-1633));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",6;p+4\"");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.886399031304604
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(5, "Player.unpack(): *** WARNING *** data is not of proper type!", 5);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-33);
      player0.setX((byte) (-33));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Player player1 = new Player(2633, "Player.unpack(): *** WARNING *** data is not of proper type!", "5", (short)4919);
      player0.setJoinOK(player1, true);
      player1.pack();
      player1.setConnected(true);
      player0.isJoinOK(player1, true);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.markSupported();
      player1.prev = (Party) player0;
      byteArrayInputStream1.mark(78);
      player0.reset(true);
      player0.getX();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream1);
      try { 
        dataInputStream0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7518685126965625
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player(2315);
      player0.getIP();
      System.setCurrentTimeMillis((-2046L));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)1;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)73;
      player0.unpack(byteArray0);
      player0.setZ((byte) (-64));
      player0.gangStrength();
      player0.setY(10.0F);
      player0.gangStrength();
      System.setCurrentTimeMillis((-2046L));
      player0.getZ();
      player0.type();
      player0.getX();
      float float0 = player0.getZ();
      assertEquals(10.0F, player0.getY(), 0.01F);
      assertEquals((-64.0F), float0, 0.01F);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9440256153973703
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(5, "Player.unpack(): *** WARNING *** data i not of proper type!", "Player.unpack(): *** WARNING *** data i not of proper type!", 5, 5);
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      byte[] byteArray0 = new byte[3];
      player0.setX(0.1F);
      player0.setY((byte)0);
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      player0.setZ((byte)0);
      Player player1 = new Player(5, "module.ModuleBrowserDialog$ModuleFilter", "|\")4Q&~ycY{lHjgIv", 5, (byte)0);
      player1.setJoinOK(player0, true);
      player0.prev = (Party) player1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|\")4Q&~ycY{lHjgIv");
      player1.gangStrength();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      player0.isJoinOK(player1, false);
      player0.reset(false);
      float float0 = Player.MOVE_DISTANCE;
      player0.setY((byte)0);
      assertEquals(5, player0.getStrength());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9924694780979046
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(5, "Player.unpack(): *** WARNING *** data is not of proper type!", 5);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Player player1 = new Player(2633, "Player.unpack(): *** WARNING *** data is not of proper type!", "5", (short)4919);
      player0.id = 2633;
      player0.setJoinOK(player1, true);
      player1.getSubparty();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5");
      player0.gangStrength();
      player0.setZ(0.2F);
      player1.pack();
      player0.isJoinOK(player1, false);
      player0.reset(false);
      player0.getX();
      player0.setY((-258.0F));
      player1.pack();
      System.setCurrentTimeMillis(2633);
      player0.isJoinOK(player1, true);
      System.setCurrentTimeMillis(1L);
      player0.getZ();
      assertEquals((-258.0F), player0.getY(), 0.01F);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)1;
      player0.getSubparty();
      assertTrue(player0.isConnected());
      
      player0.setConnected(false);
      player0.type();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = player0.isConnected();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.507254572487286
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player();
      player0.isDead();
      player0.setDead();
      Player player1 = new Player(4919, "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", "gWs(Z8P8r>.s", (short)4919, (short)4919);
      player1.setMoney(0.0F);
      player1.setMoney(0.0F);
      player1.getX();
      player1.getX();
      Player player2 = new Player((short)4919);
      player1.setJoinOK(player0, false);
      Player player3 = new Player(4919, "gWs(Z8P8r>.s", "h0u3nw\")", (short)4919);
      player1.gangStrength();
      player3.isJoinOK(player0, false);
      player3.getMoney();
      player3.setJoinOK(player2, false);
      player2.getSubparty();
      player2.pack();
      player0.gangStrength();
      player0.setX(3146.0F);
      player2.getIP();
      player2.getZ();
      boolean boolean0 = player0.isDead();
      assertEquals(3146.0F, player0.getX(), 0.01F);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.258303007954067
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(1861, "#^u!B1x/lh-*M,)6", "#^u!B1x/lh-*M,)6", (-484), 1861);
      player0.getX();
      Party party0 = new Party();
      player0.prev = party0;
      Player player1 = new Player();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)1;
      player1.getSubparty();
      player1.setConnected(false);
      byteArray0[3] = (byte)3;
      player0.setMoney((-484));
      byteArray0[4] = (byte) (-65);
      player1.unpack(byteArray0);
      player0.isJoinOK(player1, true);
      player0.getMoney();
      player0.setX(470.03104F);
      player0.getIP();
      player1.getZ();
      player1.toString();
      System.setCurrentTimeMillis((byte)60);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player();
      byte[] byteArray0 = player0.pack();
      player0.setConnected(true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      player0.pack();
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1250548729467176
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(5, "Player.unpack(): *** WARNING *** data is not of proper type!", "Player.unpack(): *** WARNING *** data is not of proper type!", 5, 5);
      byte[] byteArray0 = new byte[3];
      player0.setX(0.1F);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Player.unpack(): *** WARNING *** data is not of proper type!");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) player0;
      objectArray0[2] = (Object) player0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) player0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      player0.pack(dataOutputStream0);
      player0.setY((byte)0);
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      player0.setZ((byte)0);
      player0.setJoinOK(player0, true);
      player0.add(player0);
      int int0 = Packable.GAME_STATE;
      byte[] byteArray1 = player0.pack();
      byteArrayInputStream0.read(byteArray1, 5, 5);
      player0.isJoinOK(player0, false);
      player0.unpack(byteArray1);
      byteArrayInputStream0.mark((byte)0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, (short)4919);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1271454652812123
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(5, "Player.unpack(): *** WARNING *** data is not of proper type!", "Player.unpack(): *** WARNING *** data is not of proper type!", 5, 5);
      byte[] byteArray0 = new byte[3];
      player0.setX(0.1F);
      player0.setY((byte)0);
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      player0.setZ((byte)0);
      Player player1 = new Player((byte)0, "5", "5", (byte)0, (byte)0);
      player0.setJoinOK(player1, true);
      player0.add(player1);
      int int0 = Packable.GAME_STATE;
      byte[] byteArray1 = player1.pack();
      byteArrayInputStream0.read(byteArray1, 5, 5);
      player1.unpack(byteArray1);
      player0.isJoinOK(player1, false);
      byteArrayInputStream0.mark((byte)0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, (short)4919);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)102;
      Player player0 = new Player(1, "omK[m4;UFZo", (String) null, (-452), 2147340491);
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.4710457339600724
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(14);
      player0.getSubparty();
      player0.add((Party) null);
      player0.pack();
      player0.pack();
      player0.add((Party) null);
      player0.setMoney(14);
      player0.getX();
      player0.getX();
      player0.prev = null;
      player0.setJoinOK(player0, true);
      Player player1 = new Player((short)4919, "\u0000Hv_i]f60", "\u0000Hv_i]f60", 14);
      player1.gangStrength();
      player1.setDead((long) (short)4919);
      player1.setDead((-1644L), false);
      player0.isJoinOK(player1, false);
      player0.isConnected();
      player1.getName();
      player0.getStrength();
      player0.type();
      player0.getMoney();
      player1.gangStrength();
      player1.isJoinOK(player0, false);
      player1.isConnected();
      player1.pack();
      player0.getZ();
      Player player2 = new Player();
      player0.isJoinOK(player2, true);
      int int0 = player0.type();
      assertEquals(14.0F, player0.getMoney(), 0.01F);
      assertEquals(5, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.5209868197862835
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = player0.gangBoss();
      player0.add(party0);
      player0.pack();
      Party party1 = new Party(321);
      player0.add(party1);
      player0.setMoney(0.0F);
      player0.getX();
      player0.getX();
      Player player1 = new Player(321);
      player0.setJoinOK(player1, false);
      Player player2 = new Player(5, "\u0000Hv_i]f60", "\u0000Hv_i]f60", (short)4919);
      Player player3 = new Player(5, "\u0000Hv_i]f60", "module.ModuleBrowserDialog$ModuleFilter", (short)4919, (-3302));
      player3.prev = (Party) player1;
      player3.gangStrength();
      player0.setDead((long) (-3302));
      Player player4 = new Player(507, "\u0000Hv_i]f60", "\u0000Hv_i]f60", 5);
      player2.isJoinOK(player4, false);
      player0.isConnected();
      player1.setX(0.0F);
      player3.getName();
      player3.getStrength();
      player0.type();
      player4.getMoney();
      player4.gangStrength();
      player0.isJoinOK(player0, false);
      player0.isConnected();
      player0.pack();
      assertEquals((-3302L), player0.getTimeOfDeath());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[+E");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[+E");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!'%{@-?HpD5j");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      int int0 = Packable.GAME_EVENT;
      Player player0 = new Player();
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player(0, "state.Player$JoinInfo", "", (-826), 5);
      player0.reset(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      player0.setY((-180.2F));
      player0.getMoney();
      player0.getPictureId();
      player0.getY();
      // Undeclared exception!
      try { 
        player0.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player(10, "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", 5);
      System.setCurrentTimeMillis(10);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)30;
      byteArray0[8] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-17), 4919);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.969755134636486
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player(0, "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", "~}(7KrBJK", 0, 0);
      Player player1 = new Player(4919, "A*SrOJ1Wzgb0}HMd", "CP`kJ\"zTu", (-1316));
      player0.next = (Party) player1;
      player0.setDead((long) 0, false);
      assertTrue(player0.isDead());
      
      player0.reset(false);
      player0.getIP();
      player0.getMoney();
      player0.getY();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)0;
      player0.unpack(byteArray0);
      player0.getTimeOfDeath();
      float float0 = player0.getMoney();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "G-r*2i FI";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G-r*2i FI");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G-r*2i FI");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$GB");
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G-r*2i FI");
      Player player0 = new Player(98, "G-r*2i FI", (-2566));
      Player player1 = null;
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player(1963, "f c7)'", "", 10);
      Party party0 = player0.gangBoss();
      party0.boss = (Party) player0;
      player0.add(party0);
      String string0 = player0.getIP();
      assertEquals("f c7)'", string0);
      
      player0.toString();
      player0.getName();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      player0.pack(dataOutputStream0);
      float float0 = player0.getX();
      assertEquals(10.0F, float0, 0.01F);
      
      float float1 = player0.getMoney();
      assertEquals(0.0F, float1, 0.01F);
      
      player0.getName();
      player0.type();
      int int0 = player0.type();
      assertEquals(10, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(5, int0);
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9687776175299367
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player(0, "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", "~}(7KrBJK", 0, 0);
      player0.setDead((long) 0, false);
      player0.reset(true);
      player0.getIP();
      Party party0 = player0.gangBoss();
      player0.remove(party0);
      player0.getMoney();
      player0.getY();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)47;
      player0.setY((byte)47);
      player0.setDead(0L, true);
      player0.getMoney();
      player0.getPictureId();
      player0.getY();
      int int0 = player0.getStrength();
      assertEquals(47.0F, player0.getY(), 0.01F);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player(5, "", 5);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertFalse(boolean0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(5, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1771733948452265
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(5, "Player.unpack(): *** WARNING *** data is not of proper type!", "Player.unpack(): *** WARNING *** data is not of proper type!", 5, 5);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Player player1 = new Player();
      Player player2 = new Player((-977), "", "", 1, 1437);
      player2.setX(0.0F);
      player2.setJoinOK(player0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "module.ModuleBrowserDialog$ModuleFilter");
      Player player3 = new Player();
      player3.gangStrength();
      player3.pack();
      player1.isJoinOK(player2, false);
      player0.reset(true);
      player2.getX();
      Player player4 = new Player((-248), "", "W", 5002, (-1));
      player4.setY(5);
      player2.pack();
      assertEquals(0.0F, player2.getX(), 0.01F);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis((-928L));
      Player player0 = new Player((-1), "bw{", 4919);
      Party party0 = new Party();
      player0.add(party0);
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      Player player0 = new Player((-1536));
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)47;
      Player player0 = new Player(828, "", "\"rStB)?FRr]X_", 1064, (byte)47);
      String string0 = player0.getIP();
      assertEquals(47, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals("", string0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(1064, player0.getPictureId());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player(2);
      player0.setDead();
      player0.getTimeOfDeath();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)102;
      player0.unpack(byteArray0);
      assertEquals(1392409281320L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(4919, "module.ModuleBrowserDialog$ModuleFilter", 321);
      int int0 = player0.type();
      assertEquals(321, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(5, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player((-1), "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", (-1));
      Party party0 = new Party();
      party0.next = (Party) player0;
      player0.remove(party0);
      party0.getSubparty();
      party0.add(player0);
      party0.remove(player0);
      party0.id = 0;
      player0.setDead((-1864L));
      player0.setY((-1));
      player0.setDead();
      player0.add(party0);
      player0.setX(1417.3F);
      player0.setX(1417.3F);
      player0.setDead((long) (-1), true);
      player0.getTimeOfDeath();
      player0.setDead((long) (-1));
      player0.setDead((long) (-1), true);
      player0.setY(1417.3F);
      player0.setConnected(true);
      assertEquals(1417.3F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player((-21051), "", "", (-172), (-172));
      float float0 = player0.getZ();
      assertFalse(player0.isDead());
      assertEquals((-172), player0.getStrength());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals((-172), player0.getPictureId());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(14);
      player0.getSubparty();
      player0.boss = null;
      player0.remove((Party) null);
      player0.remove((Party) null);
      player0.add((Party) null);
      player0.pack();
      player0.add((Party) null);
      player0.setMoney(14);
      Party party0 = player0.prev;
      player0.add((Party) null);
      player0.getY();
      player0.getX();
      player0.prev = null;
      Player player1 = new Player((short)4919);
      System.setCurrentTimeMillis(1392409281320L);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(14);
      player0.boss = null;
      player0.remove((Party) null);
      player0.remove((Party) null);
      player0.add((Party) null);
      player0.pack();
      player0.add((Party) null);
      player0.setMoney(14);
      player0.setY(14);
      player0.getY();
      player0.getX();
      player0.prev = null;
      assertEquals(14.0F, player0.getMoney(), 0.01F);
      
      Player player1 = new Player((short)4919);
      assertEquals("0.0.0.0", player1.getIP());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(5, "Player.unpack(): *** WARNING *** data is not of proper type!", "Player.unpack(): *** WARNING *** data is not of proper type!", 5, 5);
      byte[] byteArray0 = new byte[3];
      player0.setX(0.1F);
      player0.setY((byte)0);
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      player0.setZ((byte)0);
      Player player1 = new Player((byte)0, "5", "5", (byte)0, (byte)0);
      player0.setJoinOK(player1, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player1.setConnected(true);
      Player player2 = new Player(2, "(8i", "", (short)4919, (short)4919);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(891L);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = Packable.GAME_STATE;
      byteArrayInputStream0.mark((byte)0);
      Player player0 = new Player(10);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      byte[] byteArray1 = new byte[6];
      byteArray1[2] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream0.read();
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      DataOutputStream dataOutputStream2 = new DataOutputStream(pipedOutputStream0);
      Player player0 = new Player((byte)0, "", (-15904));
      player0.pack(dataOutputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedInputStream pipedInputStream2 = null;
      try {
        pipedInputStream2 = new PipedInputStream(pipedOutputStream0, 5);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      Player player0 = new Player(3, "module.ModuleBrowserDialog$ModuleFilter", 1186);
      player0.toString();
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(1, player0.getStrength());
      assertEquals(1186, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player((-1196), (String) null, (-4129));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-74);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Player player0 = new Player((-2126), (String) null, 773);
      player0.toString();
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(773, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G-r*2i FI");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$GB");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G-r*2i FI");
      Player player0 = new Player((-2566), "4Dv3H.]Cd5SY", (-2566));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)4;
      player0.unpack(byteArray0);
      player0.setJoinOK(player0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = Packable.GAME_STATE;
      boolean boolean0 = player0.isJoinOK(player0, false);
      assertFalse(boolean0);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals((-2566), player0.getPictureId());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G-r*2i FI");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G-r*2i FI");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G-r*2i FI");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G-r*2i FI");
      String string0 = "4Dv3H.]Cd5SY";
      Player player0 = new Player((-2566), "4Dv3H.]Cd5SY", (-2566));
      player0.setJoinOK(player0, true);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player(5, "Player.unpack(): *** WARNING *** data is not of proper type!", 5);
      player0.setY((byte) (-17));
      player0.setZ((byte) (-33));
      boolean boolean0 = true;
      String string0 = "state.Player$JoinInfo";
      try { 
        MockURI.URI("W`<kj!+3qv#~+)QLB", "state.Player$JoinInfo", "state.Party");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 1: W`<kj!+3qv#~+)QLB:state.Player$JoinInfo#state.Party
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player((-749), (String) null, (String) null, (-749), (-749));
      player0.setDead((-720L), true);
      assertEquals((-720L), player0.getTimeOfDeath());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.855868606181163
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player((-257), "", 0);
      player0.setDead();
      Player player1 = new Player((-257), "", (short)4919);
      player1.gangStrength();
      player1.setZ((short)4919);
      player0.remove(player1);
      player0.setDead((long) 0);
      player0.getIP();
      player0.getIP();
      player0.getX();
      player0.gangStrength();
      player1.getPictureId();
      player1.setDead(3091L, false);
      int int0 = player1.getStrength();
      assertEquals(3091L, player1.getTimeOfDeath());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player();
      player0.reset(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player0.unpack(dataInputStream0);
      player0.setY(4347.184F);
      player0.getMoney();
      player0.getPictureId();
      assertEquals(4347.184F, player0.getY(), 0.01F);
      
      Player player1 = new Player(4919, "5Yrf63sFB", "*#}BB^}k49&I%V", (-1169));
      float float0 = player1.getY();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player((-1941), "state.Player$JoinInfo", "state.Player$JoinInfo", (-1941), (-826));
      player0.reset(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)45;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player0.setY(0.0F);
      float float0 = player0.getMoney();
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = player0.getPictureId();
      assertEquals((-1941), int0);
      
      float float1 = player0.getY();
      assertTrue(player0.isConnected());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals((-826), player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, float1, 0.01F);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player(4919, "module.ModuleBrowserDialog$ModuleFilter", 321);
      player0.setMoney(321);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 830);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Player player0 = new Player(5, "", "", 5, 5);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5");
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 2633);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pipedInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(pushbackInputStream1);
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream1);
      DataInputStream dataInputStream3 = new DataInputStream(pipedInputStream0);
      try { 
        dataInputStream2.readUTF();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player((-1196), (String) null, (-4129));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-74);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream1);
      assertEquals(4, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)47;
      Player player0 = new Player();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      pushbackInputStream0.mark((byte)47);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-1", player0.getName());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertFalse(boolean0);
      assertEquals(1, player0.getStrength());
  }
}
