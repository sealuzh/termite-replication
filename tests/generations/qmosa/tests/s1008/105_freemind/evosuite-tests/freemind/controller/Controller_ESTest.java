/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 02:16:02 GMT 2019
 */

package freemind.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import freemind.controller.Controller;
import freemind.main.FreeMindMain;
import freemind.modes.filemode.FileMode;
import freemind.preferences.FreemindPropertyListener;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.Window;
import java.awt.event.ContainerEvent;
import java.awt.event.FocusEvent;
import java.awt.event.WindowEvent;
import javax.swing.JComboBox;
import javax.swing.JRadioButtonMenuItem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import plugins.collaboration.database.DatabaseConnectionHook;
import plugins.collaboration.database.DatabaseStarter;
import plugins.collaboration.database.UpdateThread;
import plugins.collaboration.socket.SocketConnectionHook;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Controller_ESTest extends Controller_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)3;
      byteArray0[5] = (byte)56;
      byteArray0[3] = (byte)4;
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FocusEvent focusEvent0 = new FocusEvent(jRadioButtonMenuItem0, 1048576, false, jRadioButtonMenuItem0);
      Controller.DisposeOnClose controller_DisposeOnClose0 = new Controller.DisposeOnClose();
      ContainerEvent containerEvent0 = new ContainerEvent(jRadioButtonMenuItem0, (byte)56, jRadioButtonMenuItem0);
      containerEvent0.setSource(controller_DisposeOnClose0);
      // Undeclared exception!
      try { 
        controller_DisposeOnClose0.componentHidden(containerEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$DisposeOnClose", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        Controller.addPropertyChangeListenerAndPropagate((FreemindPropertyListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Controller controller0 = null;
      Controller.CloseAction controller_CloseAction0 = null;
      try {
        controller_CloseAction0 = new Controller.CloseAction((Controller) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$CloseAction", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OZv7-_E7X~5{");
      FileMode fileMode0 = new FileMode();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "plugins/collaboration/socket/socket_master_plugin");
      DatabaseStarter[] databaseStarterArray0 = new DatabaseStarter[6];
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      databaseStarterArray0[0] = databaseStarter0;
      DatabaseStarter databaseStarter1 = new DatabaseStarter();
      databaseStarterArray0[1] = databaseStarter1;
      DatabaseStarter databaseStarter2 = new DatabaseStarter();
      databaseStarterArray0[2] = databaseStarter2;
      DatabaseStarter databaseStarter3 = new DatabaseStarter();
      databaseStarterArray0[3] = databaseStarter3;
      DatabaseStarter databaseStarter4 = new DatabaseStarter();
      databaseStarterArray0[4] = databaseStarter4;
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      databaseConnectionHook0.getUpdateThread();
      databaseStarter1.setUpdateThread((UpdateThread) null);
      DatabaseStarter databaseStarter5 = new DatabaseStarter();
      databaseStarterArray0[5] = databaseStarter5;
      JComboBox<DatabaseStarter> jComboBox0 = new JComboBox<DatabaseStarter>(databaseStarterArray0);
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      try { 
        Controller.showCommonJColorChooserDialog(jComboBox0, "plugins/collaboration/database/database_slave_starter_plugin", systemColor0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int int0 = (-3127);
      Controller controller0 = null;
      try {
        controller0 = new Controller((FreeMindMain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
      Controller controller0 = null;
      try {
        controller0 = new Controller((FreeMindMain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Controller.Closer controller_Closer0 = new Controller.Closer();
      WindowEvent windowEvent0 = null;
      try {
        windowEvent0 = new WindowEvent((Window) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }
}
