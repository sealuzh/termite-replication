/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 02:48:09 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.BrowseMode;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyEvent;
import java.awt.geom.AffineTransform;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.text.Format;
import java.time.format.ResolverStyle;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.SynchronousQueue;
import javax.swing.AbstractButton;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JMenuBar;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.TransferHandler;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import org.apache.batik.apps.svgbrowser.JSVGViewerFrame;
import org.apache.batik.gvt.ImageNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.ImageHandler;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFColorSpace;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFEncryptionParams;
import org.apache.fop.pdf.PDFFunction;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.pdf.PDFObject;
import org.apache.fop.pdf.PDFResourceContext;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.pdf.PDFShading;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xalan.templates.ElemCopy;
import org.apache.xerces.parsers.XML11NonValidatingConfiguration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2163681839652893
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "~R6p{-GA=";
      stringArray0[1] = "$_N";
      stringArray0[2] = "g}Ee)2``Vf_";
      stringArray0[3] = "org.apache.batik.dom.svg.SGOMAltGlyphElement";
      stringArray0[4] = "";
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate(9, 9, (-4586), (-4586), 2);
      jDayChooser0.setMinSelectableDate(mockDate0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDay((-2084));
      jDayChooser0.setWeekOfYearVisible(false);
      System.setCurrentTimeMillis((-2084));
      jDayChooser0.setMonth(2);
      jDayChooser0.getDaysInMonth();
      int int0 = jDayChooser0.getDay();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.227591469185737
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      PDFDocument pDFDocument0 = pDFDocumentGraphics2D0.getPDFDocument();
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      Color color0 = Color.MAGENTA;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.177193323614304
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.desktop;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 4, 4, 14, 38, '[', (MenuElement[]) null, menuSelectionManager1);
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser0, (-3767), 1484L, (-3769), (-3767), '\"', (MenuElement[]) null, menuSelectionManager0);
      Object[][] objectArray0 = new Object[1][1];
      objectArray0[0] = (Object[]) null;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, (Object[]) null);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.drawDays();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2742235611440127
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setFocus();
      Vector<Calendar> vector0 = new Vector<Calendar>();
      JTable jTable0 = new JTable(vector0, vector0);
      jDayChooser0.setYear(1412);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockDate mockDate0 = new MockDate(433, 1412, 1412, 1412, 1412, 1412);
      MockDate mockDate1 = new MockDate((-728), 1412, 1412, 1815, (-728));
      MockDate mockDate2 = new MockDate(1412, (-728), 433, (-728), 1491);
      jDayChooser0.setMinSelectableDate(mockDate0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1598120680605626
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.desktop;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 4, 4, 14, 38, '[', (MenuElement[]) null, menuSelectionManager1);
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser0, (-3767), 1484L, (-3769), (-3767), '\"', (MenuElement[]) null, menuSelectionManager0);
      Object[][] objectArray0 = new Object[1][1];
      objectArray0[0] = (Object[]) null;
      Cursor cursor0 = JSVGViewerFrame.DEFAULT_CURSOR;
      jDayChooser0.setCursor(cursor0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, (Object[]) null);
      KeyStroke.getKeyStroke("*dcip!EU)Q#");
      JDayChooser jDayChooser1 = new JDayChooser(true);
      int int0 = jDayChooser1.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser1.drawDays();
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.32566553916646
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, (-1L), 39, 39, ';');
      KeyStroke.getKeyStroke("Ref|}C%~3Rauk8s");
      AWTKeyStroke.getAWTKeyStroke(2, (-766), true);
      KeyStroke.getKeyStroke("accessories.plugins.time.JDayChooser$1");
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke((-1018), (-1018), true);
      keyEvent0.setSource(aWTKeyStroke0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setEnabled(true);
      jDayChooser0.setMaxDayCharacters(39);
      jDayChooser0.drawDays();
      assertEquals(15, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.313569141445688
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setFocus();
      Vector<Calendar> vector0 = new Vector<Calendar>();
      JTable jTable0 = new JTable(vector0, vector0);
      jDayChooser0.setYear(1412);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockDate mockDate0 = new MockDate((-728), 1412, 1412, 1815, (-728));
      MockDate mockDate1 = new MockDate(1412, (-728), (byte)2, (-728), 1491);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getSelectedObjects();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDay(1412);
      jDayChooser0.setWeekOfYearVisible(true);
      System.setCurrentTimeMillis((byte)117);
      jDayChooser0.setMonth(16);
      jDayChooser0.getDaysInMonth();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (byte)2, 0L, 37, 12, '0');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1648359379136126
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SystemColor systemColor0 = SystemColor.desktop;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockDate mockDate0 = new MockDate((-1227), 0, (-728), (-617), (-617));
      MockDate mockDate1 = new MockDate((-1408), 1751474532, 5, (-728), 5);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getSelectedObjects();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDay((-1408));
      jDayChooser0.setWeekOfYearVisible(false);
      System.setCurrentTimeMillis((byte)2);
      jDayChooser0.setMonth(0);
      jDayChooser0.getDaysInMonth();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1408), (-1408), 31, (-1227), '0');
      KeyEvent keyEvent1 = null;
      try {
        keyEvent1 = new KeyEvent(jDayChooser0, 293, 12, 16, (-1105), '0', 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.15101540116743
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth((-127));
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4240961573107196
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.list();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.drawDays();
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.updateUI();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.setForeground(color0);
      jDayChooser0.setYear(1412);
      jDayChooser0.setFocus();
      MockDate mockDate0 = new MockDate(229632, 229632, 1412);
      mockDate0.clone();
      MockDate mockDate1 = new MockDate(0, 1412, 229632, 63718, 229632);
      jDayChooser0.setMinSelectableDate(mockDate1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getSelectedObjects();
      FontInfo fontInfo0 = new FontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("21");
      PDFResources pDFResources0 = new PDFResources(63718);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo0, pDFDocument0, pDFResourceContext0, "ISO-8859-1", "21", 63718);
      jDayChooser_DecoratorButton0.paint(pDFGraphics2D0);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1723432531256153
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "~R6p{-GA=";
      stringArray0[1] = "$_N";
      stringArray0[2] = "g}Ee)2``Vf_";
      stringArray0[3] = "org.apache.batik.dom.svg.SVGOMAltGlyphElement";
      stringArray0[4] = "";
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getDockingColor();
      jDayChooser0.setWeekdayForeground((Color) null);
      jDayChooser0.setEnabled(true);
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1700652055920755
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FontInfo fontInfo0 = new FontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFResources pDFResources0 = new PDFResources(210);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFEncryptionParams pDFEncryptionParams0 = new PDFEncryptionParams();
      PDFObject.encode("28");
      PDFColorSpace pDFColorSpace0 = pDFDocument0.getPDFColorSpace();
      SynchronousQueue<AWTKeyStroke> synchronousQueue0 = new SynchronousQueue<AWTKeyStroke>();
      PDFEncryptionParams pDFEncryptionParams1 = new PDFEncryptionParams();
      pDFEncryptionParams1.setAllowEditAnnotations(true);
      pDFDocument0.setEncryption(pDFEncryptionParams1);
      pDFResources0.toPDFString();
      pDFResources0.getObjectID();
      Vector<AWTKeyStroke> vector0 = new Vector<AWTKeyStroke>(synchronousQueue0);
      ImageNode imageNode0 = new ImageNode();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      PDFFunction pDFFunction0 = new PDFFunction((-1431655763), imageNode0, vector0, stringBuffer0);
      stringBuffer0.append(100L);
      PDFShading pDFShading0 = new PDFShading(210, pDFColorSpace0, vector0, vector0, false, 2, 2, (-3048), vector0, pDFFunction0);
      pDFResourceContext0.addShading(pDFShading0);
      pDFDocument0.setEncryption(pDFEncryptionParams0);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo0, pDFDocument0, pDFResourceContext0, "ISO-8859-1", "ISO-8859-1", 210);
      jDayChooser_DecoratorButton0.paint(pDFGraphics2D0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMonth(3);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2021264500326914
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SystemColor systemColor0 = SystemColor.desktop;
      Color color0 = Color.ORANGE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fQbYqdfb';");
      Object[][] objectArray0 = new Object[3][0];
      Object[] objectArray1 = new Object[0];
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[7];
      objectArray2[0] = (Object) color0;
      objectArray2[1] = (Object) color0;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) null;
      objectArray2[4] = (Object) null;
      objectArray2[5] = (Object) "fQbYqdfb';";
      objectArray2[6] = (Object) color0;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[8];
      objectArray3[0] = (Object) color0;
      objectArray3[1] = (Object) systemColor0;
      objectArray3[2] = (Object) jDayChooser0;
      jDayChooser0.getClientProperty(color0);
      objectArray3[3] = null;
      objectArray3[4] = (Object) jDayChooser0;
      objectArray3[5] = (Object) "fQbYqdfb';";
      objectArray3[6] = (Object) color0;
      objectArray3[7] = (Object) "fQbYqdfb';";
      objectArray0[2] = objectArray3;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray2);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.164789965657869
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.defaultMinSelectableDate = null;
      jDayChooser0.removeAncestorListener(ancestorListener0);
      jDayChooser0.getToolkit();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setDay(1013);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.34092338689532
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.updateUI();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setForeground(color0);
      jDayChooser0.setFocus();
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.removeContainerListener((ContainerListener) null);
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setFont((Font) null);
      jDayChooser0.getMinSelectableDate();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      FocusEvent focusEvent0 = new FocusEvent(jYearChooser0, 16, false);
      JDayChooser jDayChooser1 = new JDayChooser();
      FocusEvent focusEvent1 = new FocusEvent(jYearChooser0, (-1534), false);
      jDayChooser1.focusLost(focusEvent1);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0966040333564617
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMouseMotionListeners();
      MenuSelectionManager.defaultManager();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener(hierarchyListener1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*jM4");
      jDayChooser0.setMonth(38);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.300779430028327
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setFocus();
      Vector<Calendar> vector0 = new Vector<Calendar>();
      JTable jTable0 = new JTable(vector0, vector0);
      jDayChooser0.setYear(1412);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-108);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1815, 1412, (byte)117, 14, 'e');
      KeyStroke.getKeyStroke("9]uq*u}32v");
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters((byte)2);
      jDayChooser0.drawDays();
      jDayChooser0.getMaxDayCharacters();
      java.sql.Date date0 = new java.sql.Date(2);
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInsets();
      jDayChooser0.decorationBackgroundVisible = true;
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2961131469217424
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getComponents();
      Color color0 = Color.darkGray;
      Color color1 = color0.darker();
      jDayChooser0.decorationBackgroundColor = color1;
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.addListeners(0);
      float[] floatArray0 = new float[3];
      jDayChooser0.getActionMap();
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      color0.getColorComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(color1);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setDay((-2147));
      jDayChooser0.getSelectedDay();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getMinSelectableDate();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.208396411649886
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.addListeners(12);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, 7058L, 3, 40, 'Z');
      KeyStroke.getKeyStroke("9]uq*u}32v");
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke((-726), 0, false);
      keyEvent0.setSource(aWTKeyStroke0);
      jDayChooser0.keyPressed(keyEvent0);
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection((HsqlProperties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcConnection", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0966166083347697
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth((-127));
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(30, int0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.263968367694618
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponents();
      Color color0 = Color.darkGray;
      Color color1 = color0.darker();
      jDayChooser0.decorationBackgroundColor = color1;
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.addListeners(0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true);
      float[] floatArray0 = new float[3];
      jDayChooser0.getActionMap();
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      color0.getColorComponents(floatArray0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setDecorationBackgroundColor(color1);
      assertEquals(14, jDayChooser0.getDay());
      
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setDay((-2147));
      jDayChooser0.getSelectedDay();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.16477807491006
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponents();
      Color color0 = Color.darkGray;
      Color color1 = color0.darker();
      jDayChooser0.decorationBackgroundColor = color1;
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.addListeners(0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true);
      float[] floatArray0 = new float[3];
      jDayChooser0.getActionMap();
      Color.RGBtoHSB(37, (-45), (-45), floatArray0);
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      color0.getColorComponents(floatArray0);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2193), 0, (-1863), 37, 605, (-387));
      mockGregorianCalendar0.clear();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.desktop;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 4, 4, 14, 38, '[', (MenuElement[]) null, menuSelectionManager1);
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser0, (-3767), 1484L, (-3769), (-3767), '\"', (MenuElement[]) null, menuSelectionManager0);
      Object[][] objectArray0 = new Object[1][1];
      objectArray0[0] = (Object[]) null;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, (Object[]) null);
      ActionEvent actionEvent0 = new ActionEvent(defaultTableModel0, (-3769), "%9VT}`;i!bftXdL", 41);
      jDayChooser0.setDay(14);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.175592593151128
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 4, 0L, 38, (-1289), '[', (MenuElement[]) null, menuSelectionManager0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 867, 10, 10, (-1289), 'g');
      menuSelectionManager0.processKeyEvent(keyEvent0);
      MenuSelectionManager.defaultManager();
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser0, 91, 867, (-1353), 23, 'g', (MenuElement[]) null, menuSelectionManager1);
      MenuKeyEvent menuKeyEvent2 = new MenuKeyEvent(jDayChooser0, (-84), 4, 867, 30, '\"', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.paramString();
      menuKeyEvent1.getMenuSelectionManager();
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(3537);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "~R6p{-GA=";
      stringArray0[1] = "$_N";
      stringArray0[3] = "org.apache.batik.dom.svg.SVGOMAltGlyphElement";
      stringArray0[4] = "";
      stringArray0[5] = "2";
      stringArray0[6] = "[W4~dgs[]V-bO";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1287280798819306
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(14, jDayChooser0.getDay());
      
      FontInfo fontInfo0 = new FontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFResources pDFResources0 = new PDFResources(210);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFEncryptionParams pDFEncryptionParams0 = new PDFEncryptionParams("day", "ISO-8859-1", false, false, true, false);
      pDFDocument0.getPDFColorSpace();
      SynchronousQueue<AWTKeyStroke> synchronousQueue0 = new SynchronousQueue<AWTKeyStroke>();
      PDFEncryptionParams pDFEncryptionParams1 = new PDFEncryptionParams();
      pDFEncryptionParams1.setAllowEditAnnotations(true);
      pDFDocument0.setEncryption(pDFEncryptionParams1);
      Vector<AWTKeyStroke> vector0 = new Vector<AWTKeyStroke>(synchronousQueue0);
      StringBuffer stringBuffer0 = new StringBuffer(15);
      pDFDocument0.setEncryption(pDFEncryptionParams0);
      jDayChooser0.setDay(0);
      jDayChooser0.setDayBordersVisible(true);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1700300170400846
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange("9xj<SM]uu$j0Q%!?AxF", (-923.8780265887796), (-923.8780265887796));
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(false);
      MockDate mockDate0 = new MockDate(0, 49, (-440), 0, 3039, 210);
      mockDate0.clone();
      mockDate0.clone();
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getSelectedObjects();
      jDayChooser_DecoratorButton0.setFocusCycleRoot(true);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.initDecorations();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-3289), (-3289), 1278, (-2636), '}', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.getMenuSelectionManager();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2402706067587856
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = JComponent.getDefaultLocale();
      locale0.getDisplayName(locale1);
      jDayChooser0.setLocale(locale0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 349, 0, 7, 0);
      focusEvent0.setSource(mockGregorianCalendar0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setLocale(locale0);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getSundayForeground();
      Color color0 = Color.white;
      jDayChooser0.setForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.1337783790681435
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.BLACK;
      jDayChooser0.setSundayForeground(color0);
      Locale locale0 = new Locale("day");
      locale0.clone();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setForeground(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1336666818916004
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setDayBordersVisible(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.196255230930651
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMouseMotionListeners();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MenuElement[] menuElementArray0 = new MenuElement[1];
      JMenuBar jMenuBar0 = new JMenuBar();
      menuElementArray0[0] = (MenuElement) jMenuBar0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-84), (-84), 38, 14, 'g', menuElementArray0, menuSelectionManager0);
      menuSelectionManager0.processKeyEvent(menuKeyEvent0);
      MenuSelectionManager.defaultManager();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, 14, 14, 30, 'U');
      KeyStroke.getKeyStroke("9]uq*u}32v");
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters(7);
      jDayChooser0.drawDays();
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1144257212092703
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.ORANGE;
      Color.getColor("15", (-658));
      color0.brighter();
      jDayChooser0.setMaxDayCharacters((-1487));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.0586049119161527
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBordersVisible(false);
      boolean boolean1 = false;
      jDayChooser0.getMaximumSize();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"tN[=}");
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(3256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAutoscrolls(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1920, 1920, 10, (-826), 'N');
      KeyEvent.getExtendedKeyCodeForChar(1920);
      int int0 = 430;
      keyEvent0.setKeyChar('|');
      keyEvent0.setKeyCode(430);
      jDayChooser0.keyTyped(keyEvent0);
      ElemCopy elemCopy0 = new ElemCopy();
      ImageHandler imageHandler0 = null;
      // Undeclared exception!
      try { 
        elemCopy0.getDocumentElement();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.2054733035890117
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.darkGray;
      color0.darker();
      jDayChooser0.getMaxDayCharacters();
      boolean boolean0 = true;
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.addListeners(0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 28, false, jDayChooser0);
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.X;
      jDayChooser0.getTreeLock();
      ResolverStyle resolverStyle0 = ResolverStyle.SMART;
      ActionEvent actionEvent0 = new ActionEvent(resolverStyle0, (-556), "28");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.230902641664856
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      HashMap<Format.Field, Integer> hashMap0 = new HashMap<Format.Field, Integer>();
      Font font0 = new Font(hashMap0);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.0, 1742.1, 0.0, 1.0);
      affineTransform0.shear(508.80553270627826, 0.8);
      Font font1 = font0.deriveFont(affineTransform0);
      font1.getTransform();
      jDayChooser0.setFont(font1);
      Locale locale0 = Locale.CHINESE;
      XmlDocument xmlDocument0 = new XmlDocument();
      Locale.getISOLanguages();
      xmlDocument0.getLocale();
      jDayChooser0.setLocale(locale0);
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      jDayChooser0.setMaxDayCharacters(3278);
      jDayChooser0.getMaxSelectableDate();
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "$rNU-", 56320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.240211948163542
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      jDayChooser0.getToolkit();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMinSelectableDate();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1848, 1848, 21, (-3347), ')');
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1848, true);
      focusEvent0.paramString();
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 39, true, jDayChooser0);
      focusEvent1.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.TEXTPATH;
      jDayChooser0.getTreeLock();
      JButton jButton0 = new JButton((String) null, (Icon) null);
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 10102, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.164716064020948
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JYearChooser jYearChooser0 = new JYearChooser();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FocusEvent focusEvent0 = new FocusEvent(jYearChooser0, 1815, true);
      FocusEvent focusEvent1 = new FocusEvent(jYearChooser0, 1815, false);
      String string0 = AbstractButton.MODEL_CHANGED_PROPERTY;
      focusEvent1.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.TEXTPATH;
      jDayChooser0.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_NONE, "model", (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_TTB);
      jDayChooser0.setDay((int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_SPACING);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.205435033889684
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      JYearChooser jYearChooser0 = new JYearChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 4129, true);
      FocusEvent focusEvent1 = new FocusEvent(jYearChooser0, 1815, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      focusEvent0.paramString();
      focusEvent0.paramString();
      focusEvent1.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.TEXTPATH;
      jDayChooser0.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent(focusEvent0, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED, "year");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.event.FocusEvent cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1700652055920755
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FontInfo fontInfo0 = new FontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFResources pDFResources0 = new PDFResources(210);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFEncryptionParams pDFEncryptionParams0 = new PDFEncryptionParams("day", "ISO-8859-1", false, false, true, false);
      pDFDocument0.setEncryption(pDFEncryptionParams0);
      jDayChooser_DecoratorButton0.setFocusCycleRoot(false);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.initDecorations();
      jDayChooser0.setMonth((-1645));
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Locale locale0 = Locale.TAIWAN;
      locale0.toLanguageTag();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1700652055920755
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFResources pDFResources0 = new PDFResources(210);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFEncryptionParams pDFEncryptionParams0 = new PDFEncryptionParams();
      byte[] byteArray0 = PDFObject.encode("28");
      PDFColorSpace pDFColorSpace0 = pDFDocument0.getPDFColorSpace();
      SynchronousQueue<AWTKeyStroke> synchronousQueue0 = new SynchronousQueue<AWTKeyStroke>();
      PDFEncryptionParams pDFEncryptionParams1 = new PDFEncryptionParams();
      pDFEncryptionParams1.setAllowEditAnnotations(true);
      pDFDocument0.setEncryption(pDFEncryptionParams1);
      pDFResources0.toPDFString();
      pDFResources0.getObjectID();
      Vector<AWTKeyStroke> vector0 = new Vector<AWTKeyStroke>(synchronousQueue0);
      pDFColorSpace0.setICCProfile(byteArray0);
      ImageNode imageNode0 = new ImageNode();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      PDFFunction pDFFunction0 = new PDFFunction((-1431655763), imageNode0, vector0, stringBuffer0);
      stringBuffer0.append(100L);
      PDFShading pDFShading0 = new PDFShading(210, pDFColorSpace0, vector0, vector0, false, 2, 2, (-3048), vector0, pDFFunction0);
      pDFResourceContext0.addShading(pDFShading0);
      pDFDocument0.setEncryption(pDFEncryptionParams0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMonth(3);
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1677452551206233
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.desktop;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 38, 4, 10, (-84), 'g', (MenuElement[]) null, menuSelectionManager0);
      menuSelectionManager0.processKeyEvent(menuKeyEvent0);
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser0, 4, 4, 14, 38, '[', (MenuElement[]) null, menuSelectionManager1);
      MenuKeyEvent menuKeyEvent2 = new MenuKeyEvent(jDayChooser0, 'g', 1484L, (-3769), 'g', '\"', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.208313128881091
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.desktop;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 4, 4, 14, 38, '[', (MenuElement[]) null, menuSelectionManager1);
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser0, (-3767), 1484L, (-3769), (-3767), '\"', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.paramString();
      menuKeyEvent1.getMenuSelectionManager();
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.removePropertyChangeListener("28", (PropertyChangeListener) null);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.2255162461239815
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.darkGray;
      color0.darker();
      jDayChooser0.getMaxDayCharacters();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      jDayChooser0.getTransferHandler();
      jDayChooser0.setTransferHandler((TransferHandler) null);
      jDayChooser0.getToolkit();
      assertEquals(14, jDayChooser0.getDay());
      
      Color color1 = Color.lightGray;
      jDayChooser0.setDay(0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1018, 187, 1018, 187, 32);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      Date date2 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange(date1, date2);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.0587048806759154
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.1963261152120612
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getHierarchyBoundsListeners();
      jDayChooser0.init();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.addListeners(12);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "14");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, 7058L, 3, 40, 'Z');
      KeyStroke.getKeyStroke("9]uq*u}32v");
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters(14);
      jDayChooser0.drawDays();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      Style style0 = defaultStyledDocument0.addStyle("jA", styleContext_NamedStyle0);
      Font font0 = styleContext0.getFont((AttributeSet) style0);
      jDayChooser0.setFont(font0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.2255162461239815
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.darkGray;
      Color color1 = Color.orange;
      jDayChooser0.getMaxDayCharacters();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      jDayChooser0.getTransferHandler();
      jDayChooser0.setTransferHandler((TransferHandler) null);
      jDayChooser0.getToolkit();
      assertEquals(14, jDayChooser0.getDay());
      
      Color color2 = Color.lightGray;
      jDayChooser0.setDay(2552);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1018, 187, 1018, 187, 32);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      Date date2 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange(date1, date2);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FontInfo fontInfo0 = new FontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("day");
      int int0 = 210;
      PDFResources pDFResources0 = new PDFResources(210);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.firePropertyChange((String) null, 210, 210);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.firePropertyChange("ISO-8859-1", false, true);
      BrowseMode browseMode0 = new BrowseMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInheritsPopupMenu();
      int int0 = 10161;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-3992L), 916, 10161, '\"');
      KeyEvent.getKeyText((-5399));
      jDayChooser0.keyReleased(keyEvent0);
      MockInstant.now();
      ComponentOrientation componentOrientation0 = ComponentOrientation.UNKNOWN;
      String string0 = "X;R[f!MOiA1\"?Q#~C4r";
      XML11NonValidatingConfiguration xML11NonValidatingConfiguration0 = null;
      try {
        xML11NonValidatingConfiguration0 = new XML11NonValidatingConfiguration();
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // fRecognizedFeatures
         //
         verifyException("org.apache.xerces.parsers.XML11NonValidatingConfiguration", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.0966040333564617
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMouseMotionListeners();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener2 = AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener1);
      HierarchyListener hierarchyListener3 = AWTEventMulticaster.add(hierarchyListener2, hierarchyListener2);
      HierarchyListener hierarchyListener4 = AWTEventMulticaster.add(hierarchyListener3, hierarchyListener3);
      HierarchyListener hierarchyListener5 = AWTEventMulticaster.add(hierarchyListener4, hierarchyListener4);
      AWTEventMulticaster.remove(hierarchyListener5, hierarchyListener4);
      jDayChooser0.removeHierarchyListener(hierarchyListener5);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "21");
      jDayChooser0.setMonth(12);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }
}
