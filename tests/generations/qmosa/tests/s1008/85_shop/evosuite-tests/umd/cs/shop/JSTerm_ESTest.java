/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 03:43:51 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.732455352119542
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;B=6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function4 = unaryOperator1.compose((Function<? super Object, ? extends String>) function3);
      unaryOperator2.compose((Function<? super Object, ? extends String>) function4);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      function7.compose((Function<? super Integer, ?>) unaryOperator0);
      Function<String, String> function8 = function2.compose((Function<? super String, ?>) function1);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, Integer> function9 = unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function6);
      function7.andThen((Function<? super Integer, ? extends Integer>) function9);
      Function<Object, Object> function10 = Function.identity();
      function10.compose((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator3.apply("%%%");
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.add(2, (Object) function8);
      jSTerm2.print();
      // Undeclared exception!
      try { 
        jSTerm3.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(o1bB?L");
      StringReader stringReader1 = new StringReader("(o1bB?L");
      char[] charArray0 = new char[5];
      charArray0[2] = '9';
      charArray0[4] = '9';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.wordChars('9', '9');
      streamTokenizer0.slashStarComments(true);
      stringReader1.skip((-492L));
      streamTokenizer0.whitespaceChars((-4), '9');
      streamTokenizer0.wordChars((-4), 192);
      stringReader1.skip(0L);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.pushBack();
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer2.ttype = (-4);
      streamTokenizer2.slashSlashComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      stringReader1.markSupported();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.parseNumbers();
      streamTokenizer1.whitespaceChars(1263, 192);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.8668956051232284
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(47);
      StringReader stringReader0 = new StringReader(" 4hO)6DI;B=6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.firstElement();
      Predicate<String> predicate0 = Predicate.isEqual((Object) ".");
      jSTerm3.removeIf(predicate0);
      jSTerm3.setSize(43);
      jSSubstitution0.add((Object) jSTerm3);
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm1.equals(jSTerm2);
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm2.replaceAll(unaryOperator0);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm6 = jSTerm4.cloneT();
      jSTerm5.makeVariable();
      jSTerm6.add(2, (Object) jSTerm5);
      jSTerm6.print();
      assertEquals("[., [4.0], [6.0], [., [hO], [nil]]]", jSTerm6.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3105624464720997
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      jSTerm0.makeVariable();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      function2.compose((Function<? super String, ?>) unaryOperator0);
      Object object0 = new Object();
      unaryOperator0.apply(object0);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      System.setCurrentTimeMillis(1272L);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.182653957255736
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" 4hO)6DI;B=6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate.isEqual((Object) predicate0);
      jSTerm0.removeIf(predicate3);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.firstElement();
      Predicate<String> predicate4 = Predicate.isEqual((Object) "4.0");
      Predicate.isEqual((Object) "4.0");
      predicate4.or(predicate0);
      predicate4.or(predicate3);
      Predicate.isEqual((Object) null);
      jSTerm1.removeIf(predicate4);
      int int0 = 58;
      jSTerm0.setSize(58);
      jSTerm1.isEmpty();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0096447422837604
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(47);
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;B=6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm1.equals(jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm1.addElement(jSSubstitution1);
      System.setCurrentTimeMillis(0L);
      jSTerm4.toStr();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm4.matches(jSTerm2, jSSubstitution1);
      jSTerm5.equals(jSTerm3);
      jSSubstitution4.add((Object) 41);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8001645567741105
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(47);
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;B=6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm3);
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm1.equals(jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution1);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      streamTokenizer0.eolIsSignificant(true);
      jSTerm2.replaceAll(unaryOperator0);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      jSTerm5.setElementAt(jSTerm4, 0);
      JSTerm jSTerm6 = jSTerm4.cloneT();
      jSTerm6.add(2, (Object) jSTerm5);
      jSSubstitution0.removeAllElements();
      // Undeclared exception!
      try { 
        jSTerm6.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5054513218768513
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%U>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(1vBG?");
      StringReader stringReader1 = new StringReader("(1vBG?");
      char[] charArray0 = new char[5];
      charArray0[2] = '9';
      charArray0[4] = '9';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.wordChars('9', '9');
      streamTokenizer0.slashStarComments(true);
      stringReader1.skip((-492L));
      streamTokenizer0.whitespaceChars((-4), '9');
      streamTokenizer0.wordChars((-4), 192);
      stringReader0.reset();
      stringReader1.skip(0L);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.pushBack();
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ttype = (-4);
      streamTokenizer2.slashSlashComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      stringReader1.markSupported();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.parseNumbers();
      streamTokenizer1.whitespaceChars(1263, 192);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.678056398722555
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;BQ6.P8");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(94);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      streamTokenizer1.ordinaryChar(4127);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm4 = jSTerm3.cloneT();
      JSJshopVars.leftBrac = (-2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.standardizerTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars((-1445421684), 4595);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer2);
      streamTokenizer2.nval = 0.0;
      jSTerm4.matches(jSTerm5, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4259101490553134
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?g>=0ctFji/HA%wu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSSubstitution0.addElement(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.407570012629077
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;BQ6.P8");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(94);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.ensureCapacity((-1));
      assertEquals(41, streamTokenizer0.ttype);
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm1.print();
      jSTerm2.isConstant();
      assertNotSame(jSTerm2, jSTerm3);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8406522007318005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?g>=0ctFji/HA%wu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm2.parallelStream();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "?g>=0ctFji/HA%wu");
      JSTerm jSTerm4 = jSTerm0.cloneT();
      stringReader0.reset();
      jSTerm0.remove((Object) "?g>=0ctFji/HA%wu");
      jSSubstitution0.addElement(jSTerm3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm4.matches(jSTerm0, jSSubstitution1);
      JSTerm jSTerm5 = jSTerm4.call();
      JSTerm jSTerm6 = new JSTerm(streamTokenizer0);
      jSTerm2.add(0, (Object) jSTerm6);
      jSTerm2.isGround();
      assertEquals("[[?%%%], ?%%%]", jSTerm2.toString());
      
      jSTerm6.equals(jSTerm0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm5.applySubstitutionT(jSSubstitution2);
      jSTerm6.applySubstitutionT(jSSubstitution1);
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution2));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.60103441799728
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(47);
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;B=6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm3);
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm1.applySubstitutionT(jSSubstitution0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm2.replaceAll(unaryOperator0);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      jSTerm4.add(2, (Object) jSTerm5);
      jSSubstitution0.removeAllElements();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.887962637349974
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;BQ6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      UnaryOperator<JSSubstitution> unaryOperator4 = UnaryOperator.identity();
      Function<Object, JSSubstitution> function4 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSSubstitution> function5 = unaryOperator4.compose((Function<? super Object, ? extends JSSubstitution>) function4);
      unaryOperator2.andThen((Function<? super Object, ? extends JSSubstitution>) function5);
      JSJshopVars.dot = 33;
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, Integer> function6 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      function1.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      Function<String, Integer> function7 = unaryOperator0.compose((Function<? super String, ? extends Integer>) function6);
      function1.compose((Function<? super JSTerm, ?>) function3);
      Function<Object, Integer> function8 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function6);
      function1.compose((Function<? super Object, ?>) function8);
      Function<Object, String> function9 = unaryOperator3.compose((Function<? super Object, ? extends String>) function3);
      function6.compose((Function<? super Object, ?>) function9);
      jSTerm1.replaceAll(unaryOperator1);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.compose((Function<? super String, ? extends Integer>) function7);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.matches(jSTerm2, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.standardizerTerm();
      jSTerm2.cloneT();
      jSTerm2.applySubstitutionT(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.014227378368836
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" 4hO)6DI;B=6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.firstElement();
      Predicate<String> predicate0 = Predicate.isEqual((Object) ".");
      Predicate.isEqual((Object) ".");
      jSTerm1.removeIf(predicate0);
      jSTerm0.setSize(67);
      jSTerm1.isEmpty();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm1.equals(jSTerm2);
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm2.replaceAll(unaryOperator0);
      JSTerm jSTerm5 = jSTerm4.cloneT();
      jSTerm5.add(2, (Object) jSTerm2);
      jSTerm5.print();
      jSTerm4.replaceAll(unaryOperator0);
      jSTerm3.standardizerTerm();
      jSTerm3.isGround();
      System.setCurrentTimeMillis(3235L);
      // Undeclared exception!
      try { 
        jSTerm4.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.650933424098314
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("EmT");
      StringReader stringReader1 = new StringReader("(;1bB?L");
      char[] charArray0 = new char[5];
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '9';
      stringReader1.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function4 = unaryOperator1.compose((Function<? super Object, ? extends String>) function3);
      function4.compose((Function<? super String, ?>) function2);
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      function6.compose((Function<? super Integer, ?>) unaryOperator0);
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      function4.compose((Function<? super Integer, ?>) unaryOperator2);
      unaryOperator2.compose((Function<? super String, ? extends Integer>) function2);
      function6.compose((Function<? super JSTerm, ?>) function1);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Integer, ? extends Integer>) function2);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.replaceAll(unaryOperator4);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[?%%%0]", jSTerm1.toString());
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(5, stringBuffer0.length());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertNotSame(jSTerm2, jSTerm0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7588066055703457
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?g>=0ctFji/HA%wu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.containsAll(jSSubstitution0);
      jSSubstitution0.addElement(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      jSSubstitution1.setSize(279);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSSubstitution4.add((Object) jSTerm2);
      jSTerm2.equals(jSTerm0);
      jSTerm2.matches(jSTerm1, jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6814376716614063
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(47);
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;B=6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator2.compose((Function<? super Object, ? extends String>) function2);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function4 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function3);
      Function.identity();
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function5);
      UnaryOperator.identity();
      function1.compose((Function<? super String, ?>) unaryOperator2);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      function4.compose((Function<? super Integer, ?>) function3);
      unaryOperator4.compose((Function<? super String, ? extends Integer>) function8);
      function7.compose((Function<? super JSTerm, ?>) function4);
      unaryOperator4.compose((Function<? super Integer, ? extends Integer>) function8);
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator5);
      System.setCurrentTimeMillis(41);
      jSTerm2.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm3.isFunction();
      assertEquals(41, streamTokenizer0.ttype);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6882195383828993
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" 4hO)6DI;B=6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate.isEqual((Object) predicate0);
      jSTerm0.removeIf(predicate3);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.firstElement();
      Predicate<String> predicate4 = Predicate.isEqual((Object) ".");
      Predicate.isEqual((Object) ".");
      predicate4.or(predicate0);
      predicate4.or(predicate3);
      predicate1.negate();
      jSTerm1.removeIf(predicate4);
      jSTerm2.setSize(45);
      jSTerm0.isEmpty();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.equals(jSTerm1);
      jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8526474576798604
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?g>=0ctFji/HA%wu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSSubstitution0.addElement(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      jSSubstitution1.setSize(279);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ?>) function3);
      UnaryOperator.identity();
      Function<Object, String> function4 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function7 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function8 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, String> function9 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      function4.compose((Function<? super Integer, ?>) function9);
      function7.compose((Function<? super JSTerm, ?>) unaryOperator3);
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ? extends Integer>) function8);
      unaryOperator4.compose((Function<? super Integer, ? extends Integer>) function8);
      jSTerm1.replaceAll(unaryOperator4);
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9093700271290897
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;BQ6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      UnaryOperator<JSSubstitution> unaryOperator4 = UnaryOperator.identity();
      function1.compose((Function<? super Object, ?>) function3);
      Function<Object, JSSubstitution> function4 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSSubstitution> function5 = unaryOperator4.compose((Function<? super Object, ? extends JSSubstitution>) function4);
      unaryOperator2.andThen((Function<? super Object, ? extends JSSubstitution>) function5);
      JSJshopVars.dot = 33;
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, Integer> function6 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<String, Integer> function7 = unaryOperator0.compose((Function<? super String, ? extends Integer>) function6);
      function1.compose((Function<? super JSTerm, ?>) function3);
      Function<Object, Integer> function8 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function6);
      function1.compose((Function<? super Object, ?>) function8);
      Function<Object, String> function9 = unaryOperator3.compose((Function<? super Object, ? extends String>) function3);
      function6.compose((Function<? super Object, ?>) function9);
      jSTerm1.replaceAll(unaryOperator1);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.compose((Function<? super String, ? extends Integer>) function7);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.matches(jSTerm2, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.standardizerTerm();
      jSTerm2.cloneT();
      jSTerm2.applySubstitutionT(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9349735238835706
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?g>=0ctFji/HA%wu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSSubstitution0.addElement(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      Object object0 = jSTerm1.clone();
      jSSubstitution2.add(object0);
      jSSubstitution1.setSize(279);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSSubstitution4.add((Object) jSTerm2);
      jSTerm0.applySubstitutionT(jSSubstitution3);
      jSTerm0.standardizerTerm();
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution5.removeElement(jSSubstitution6);
      jSSubstitution2.add((Object) jSSubstitution4);
      jSSubstitution3.add((Object) jSSubstitution5);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      JSJshopVars.semicolon = 469;
      StringReader stringReader0 = new StringReader("(EQ&<G0}R-z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.isEval();
      stringReader0.skip(574L);
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.setSize((-2140));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2140
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5664329266250583
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(47);
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;BQ6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(60);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.makeEval(true);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.matches(jSTerm1);
      assertEquals(41, streamTokenizer0.ttype);
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.301608716407634
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      String string0 = "(EQ&<G0}R-\\z";
      int int0 = 469;
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8716348454186327
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(47);
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;B=6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertEquals(47, jSTerm0.capacity());
      
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Integer, Integer> function3 = function2.compose((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function.identity();
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ? extends Integer>) function2);
      function2.compose((Function<? super JSTerm, ?>) unaryOperator2);
      unaryOperator3.compose((Function<? super Integer, ? extends Integer>) function3);
      UnaryOperator.identity();
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'j';
      charArray0[2] = '&';
      charArray0[3] = 'T';
      charArray0[4] = '_';
      charArray0[5] = '=';
      charArray0[6] = '6';
      charArray0[7] = '-';
      stringReader0.read(charArray0);
      streamTokenizer0.slashStarComments(true);
      jSTerm2.replaceAll(unaryOperator1);
      System.setCurrentTimeMillis(41);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution1);
      jSTerm2.equals(jSTerm1);
      jSTerm0.matches(jSTerm3);
      assertTrue(jSTerm1.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5130011049762864
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;B=6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("%%%");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      JSTerm jSTerm2 = jSTerm1.call();
      Function<Object, String> function4 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function5 = unaryOperator0.compose((Function<? super Object, ? extends String>) function4);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      unaryOperator0.compose((Function<? super JSSubstitution, ? extends String>) function5);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function7 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function6);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, Integer> function8 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function7);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.apply((Object) null);
      Function<Object, Integer> function9 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function8);
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function9);
      UnaryOperator.identity();
      System.setCurrentTimeMillis(41);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      System.setCurrentTimeMillis((-3881L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2, jSSubstitution0);
      assertEquals(41, streamTokenizer0.ttype);
      assertNotSame(jSSubstitution0, jSSubstitution1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      function2.compose((Function<? super String, ?>) unaryOperator0);
      Object object0 = new Object();
      unaryOperator0.apply(object0);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      System.setCurrentTimeMillis(1272L);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" 4hO)6DI;B=6.P8");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate.isEqual((Object) predicate0);
      jSTerm0.removeIf(predicate3);
      predicate3.and(predicate0);
      predicate0.or(predicate3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.setSize(58);
      JSJshopVars.VarCounter = (-687);
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.906608533631256
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;B=6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function4 = unaryOperator1.compose((Function<? super Object, ? extends String>) function3);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function4);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Integer, Integer> function8 = function7.compose((Function<? super Integer, ?>) unaryOperator0);
      function2.compose((Function<? super String, ?>) function1);
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, Integer> function10 = unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Object> function11 = Function.identity();
      function11.compose((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator2.apply("%%%");
      function9.compose((Function<? super Integer, ?>) function11);
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      function1.compose((Function<? super Integer, ?>) unaryOperator4);
      unaryOperator4.compose((Function<? super String, ? extends Integer>) function7);
      function6.compose((Function<? super JSTerm, ?>) function10);
      unaryOperator4.compose((Function<? super Integer, ? extends Integer>) function8);
      UnaryOperator.identity();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm3.print();
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      assertTrue(jSTerm4.equals((Object)jSTerm3));
      
      boolean boolean0 = jSTerm1.isGround();
      assertEquals("[., [4.0], [., [hO], [nil]]]", jSTerm1.toString());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.539650203083285
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("U70)rFb ~]fG)s2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("%%%");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      JSTerm jSTerm2 = jSTerm1.call();
      Function<Object, String> function4 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function5 = unaryOperator0.compose((Function<? super Object, ? extends String>) function4);
      Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function5);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      unaryOperator0.compose((Function<? super JSSubstitution, ? extends String>) function5);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function7 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function6);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, Integer> function8 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function7);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      function7.andThen((Function<? super Integer, ?>) unaryOperator3);
      unaryOperator1.apply((Object) null);
      Function<Object, Integer> function9 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function8);
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function9);
      UnaryOperator.identity();
      System.setCurrentTimeMillis(41);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm1.matches(jSTerm2);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals("[., [U70], [nil]]", jSTerm1.toString());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isFunction();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.651083037943501
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?g>=0ctFji/HA%wu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.iterator();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSSubstitution0.addElement(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      jSSubstitution1.setSize(279);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSJshopVars.minus = 62;
      jSTerm2.isGround();
      jSSubstitution3.add((Object) jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6136612349145874
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(47);
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;B=Q.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator2.compose((Function<? super Object, ? extends String>) function2);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function4 = unaryOperator4.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Integer, Integer> function7 = function6.compose((Function<? super Integer, ?>) unaryOperator0);
      function1.compose((Function<? super String, ?>) unaryOperator3);
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      function9.compose((Function<? super Integer, ?>) function7);
      Function<Object, Integer> function10 = function1.andThen((Function<? super String, ? extends Integer>) function8);
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      function4.compose((Function<? super Integer, ?>) function3);
      unaryOperator5.compose((Function<? super String, ? extends Integer>) function9);
      UnaryOperator.identity();
      unaryOperator5.compose((Function<? super Integer, ? extends Integer>) function10);
      UnaryOperator.identity();
      jSTerm2.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6420116569070915
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(47);
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;BQ6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(60);
      stringReader0.skip((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.makeEval(true);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.print();
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.7083707330041467
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;B=6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator2.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, Object> function4 = Function.identity();
      function1.compose((Function<? super String, ?>) function4);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) function3);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function5 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function3);
      Function.identity();
      Function.identity();
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function7 = unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function6);
      function3.compose((Function<? super String, ?>) function1);
      Function<Object, Integer> function8 = unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, Integer> function9 = unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Integer, Integer> function10 = function7.compose((Function<? super Integer, ?>) function1);
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Integer, ? extends Integer>) function10);
      function5.compose((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator4.compose((Function<? super String, ? extends Integer>) function9);
      function9.compose((Function<? super JSTerm, ?>) function8);
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super Integer, ? extends Integer>) unaryOperator5);
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator2);
      jSTerm1.standardizerTerm();
      jSTerm1.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "(";
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5488235345316892
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("1%.t-&w9-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;BQ6.P8");
      stringReader0.reset();
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[2] = 's';
      charArray0[3] = 't';
      charArray0[4] = '*';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader("<");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = new StringReader("<");
      stringReader2.ready();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(74);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.533344419789668
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("u)2}.ckU}L`<Ch");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[nil]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8821103874851657
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.greaterT = (-1);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?g>=0ctFji/HA%wu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.setSize(279);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSSubstitution3.add((Object) jSTerm0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution4);
      JSJshopVars.rightPar = (-2477);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      predicate0.and(predicate1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.612268195351382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(47);
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;B=6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator2.compose((Function<? super Object, ? extends String>) function2);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function4 = unaryOperator4.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Integer, Integer> function7 = function6.compose((Function<? super Integer, ?>) unaryOperator0);
      function1.compose((Function<? super String, ?>) unaryOperator3);
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      function9.compose((Function<? super Integer, ?>) function7);
      function1.andThen((Function<? super String, ? extends Integer>) function8);
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      function4.compose((Function<? super Integer, ?>) function3);
      unaryOperator5.compose((Function<? super String, ? extends Integer>) function9);
      unaryOperator5.compose((Function<? super Integer, ? extends Integer>) function9);
      UnaryOperator<String> unaryOperator6 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator6);
      System.setCurrentTimeMillis(41);
      jSTerm2.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0431659883041893
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" 4hO)6DI;B=6.P8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.firstElement();
      Predicate<String> predicate0 = Predicate.isEqual((Object) ".");
      Predicate.isEqual((Object) ".");
      Predicate.isEqual((Object) null);
      jSTerm1.removeIf(predicate0);
      jSTerm0.setSize(22);
      jSTerm1.isEmpty();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm1.equals(jSTerm2);
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm5 = jSTerm4.cloneT();
      jSTerm5.add(2, (Object) jSTerm2);
      jSTerm5.print();
      jSTerm3.standardizerTerm();
      jSTerm1.remove((Object) " 4hO)6DI;B=6.P8");
      JSTerm jSTerm6 = new JSTerm(streamTokenizer0);
      jSTerm6.clear();
      jSTerm6.call();
      JSTerm jSTerm7 = jSTerm5.call();
      JSTerm jSTerm8 = new JSTerm();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSTerm2;
      // Undeclared exception!
      try { 
        jSTerm7.elementAt((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.2870308122191503
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      int int0 = 469;
      JSJshopVars.semicolon = 469;
      StringReader stringReader0 = new StringReader("(EQ&<G0}R-z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.matches(jSTerm0);
      jSTerm0.makeConstant();
      jSTerm0.call();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("U70)rFb ~]fG)s2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("%%%");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      jSTerm1.call();
      Function<Object, String> function4 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function5 = unaryOperator0.compose((Function<? super Object, ? extends String>) function4);
      Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function5);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      unaryOperator0.compose((Function<? super JSSubstitution, ? extends String>) function5);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function7 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function8 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function7);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      function7.andThen((Function<? super Integer, ?>) unaryOperator3);
      unaryOperator1.apply(unaryOperator0);
      Function<Object, Integer> function9 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function8);
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function9);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      assertSame(unaryOperator5, unaryOperator4);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fs@h;e@FSway()5mV");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.isEval();
      stringReader0.skip((-2527L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.addElement("fs@h;e@FSway()5mV");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      assertEquals(10, jSSubstitution4.capacity());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      jSTerm0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(o1bB?L");
      StringReader stringReader1 = new StringReader("(o1bB?L");
      char[] charArray0 = new char[5];
      charArray0[4] = '9';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.wordChars('9', '9');
      streamTokenizer0.whitespaceChars((-4), '9');
      streamTokenizer0.wordChars((-4), 192);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.pushBack();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.ordinaryChar(41);
      stringReader1.markSupported();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.ordinaryChars((-4), (-1216));
      streamTokenizer0.ordinaryChars((-4), (-2030));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer0.whitespaceChars(1263, 192);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;B=6.P8");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, Object> function3 = Function.identity();
      function1.compose((Function<? super String, ?>) function3);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) function2);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      UnaryOperator.identity();
      Function.identity();
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function5);
      function2.compose((Function<? super String, ?>) function1);
      Function<Object, Integer> function7 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function8 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Integer, Integer> function9 = function6.compose((Function<? super Integer, ?>) function1);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      function4.compose((Function<? super Integer, ?>) unaryOperator3);
      unaryOperator3.andThen((Function<? super Integer, ? extends Integer>) function9);
      function4.compose((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator3.compose((Function<? super String, ? extends Integer>) function8);
      function8.compose((Function<? super JSTerm, ?>) function7);
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Integer, ? extends Integer>) unaryOperator4);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.061093750171824
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[2] = '\u0080';
      charArray0[3] = 't';
      charArray0[4] = '*';
      CharBuffer.wrap(charArray0);
      System.setCurrentTimeMillis(2040L);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm2, jSSubstitution0);
      assertTrue(jSSubstitution0.fail());
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8978141278730893
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4< 3iK<");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.495100515745279
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" 4hO)Q6DI;BQ6.P8");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar(1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      assertFalse(jSTerm2.isEval());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.2931300021708616
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSJshopVars.interrogation = 63;
      StringReader stringReader0 = new StringReader("ZxIsmO");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.close();
      jSTerm0.clone();
      streamTokenizer0.wordChars(63, (-1101));
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9024533308450557
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends Integer>) function2);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      function3.compose((Function<? super JSTerm, ?>) unaryOperator2);
      unaryOperator1.compose((Function<? super Integer, ? extends Integer>) function2);
      StringReader stringReader0 = new StringReader("o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(o1bB?L");
      StringReader stringReader1 = new StringReader("(o1bB?L");
      char[] charArray0 = new char[5];
      charArray0[2] = '9';
      charArray0[4] = '9';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.wordChars('9', '9');
      streamTokenizer0.whitespaceChars((-4), '9');
      streamTokenizer0.wordChars((-4), 192);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.pushBack();
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer2.pushBack();
      streamTokenizer2.ttype = (-4);
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer2.ordinaryChar(41);
      stringReader1.markSupported();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer2.ordinaryChars((-4), (-1216));
      streamTokenizer1.ordinaryChars((-4), (-2030));
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.parseNumbers();
      streamTokenizer1.whitespaceChars(1263, 192);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "->";
      StringReader stringReader0 = new StringReader("->");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      JSJshopVars.rightPar = (-405);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.000070067138046
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?g>=0ctFji/HA%wu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.equals(jSTerm0);
      jSTerm0.parallelStream();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "?g>=0ctFji/HA%wu");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.remove((Object) "?g>=0ctFji/HA%wu");
      jSSubstitution0.addElement(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      jSSubstitution1.setSize(263);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution4);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution4);
      jSSubstitution3.add((Object) jSSubstitution5);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm0.call();
      jSTerm2.print();
      jSTerm1.equals(jSTerm2);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm5.matches(jSTerm3);
      JSTerm jSTerm6 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm6.removeElementAt(3701);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3701 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(47);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(o1bB?L");
      StringReader stringReader1 = new StringReader("(o1bB?L");
      char[] charArray0 = new char[5];
      charArray0[2] = '9';
      charArray0[4] = '9';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.wordChars('9', '9');
      streamTokenizer0.slashStarComments(true);
      stringReader1.skip((-492L));
      streamTokenizer0.whitespaceChars((-4), '9');
      streamTokenizer0.wordChars((-4), 192);
      stringReader1.skip('9');
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.pushBack();
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer2.ttype = (-4);
      streamTokenizer2.slashSlashComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      stringReader1.markSupported();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.parseNumbers();
      streamTokenizer1.whitespaceChars(1263, 192);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("T");
      StringReader stringReader2 = new StringReader("(;1bB?L");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z-E5word,*[s,%aK%*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertEquals("%%% ", stringBuffer0.toString());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.8872385926133708
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U\"7:ExPIDxxky\"}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function4 = unaryOperator1.compose((Function<? super Object, ? extends String>) function3);
      unaryOperator2.compose((Function<? super Object, ? extends String>) function4);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Integer, Integer> function8 = function7.compose((Function<? super Integer, ?>) unaryOperator0);
      function2.compose((Function<? super String, ?>) function1);
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, Integer> function10 = unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function6);
      function7.andThen((Function<? super Integer, ? extends Integer>) function10);
      Function<Object, Object> function11 = Function.identity();
      function11.compose((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator3.apply("%%%");
      function9.compose((Function<? super Integer, ?>) function11);
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      function1.compose((Function<? super Integer, ?>) unaryOperator5);
      unaryOperator5.compose((Function<? super String, ? extends Integer>) function7);
      function6.compose((Function<? super JSTerm, ?>) function10);
      unaryOperator5.compose((Function<? super Integer, ? extends Integer>) function8);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fs@h;e@FSway()5mV");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("fs@h;e@FSway()5mV");
      StringReader stringReader2 = new StringReader("6.0");
      stringReader1.reset();
      StringReader stringReader3 = new StringReader("");
      StringReader stringReader4 = new StringReader("P[%{tl");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.print();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.setSize(279);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSSubstitution3.add((Object) jSTerm0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm0.isEmpty();
      jSSubstitution0.add((Object) jSSubstitution3);
      jSSubstitution2.add((Object) jSSubstitution4);
      JSJshopVars.rightPar = (-2477);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(o1bB?L");
      StringReader stringReader1 = new StringReader("(o1bB?L");
      char[] charArray0 = new char[5];
      charArray0[2] = '9';
      charArray0[4] = '9';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.wordChars('9', '9');
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.whitespaceChars((-4), '9');
      streamTokenizer0.wordChars((-4), 192);
      stringReader1.skip(0L);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.pushBack();
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer2.ttype = (-4);
      streamTokenizer2.slashSlashComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar(41);
      stringReader1.markSupported();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.parseNumbers();
      streamTokenizer1.whitespaceChars(1263, 192);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PET");
      StringReader stringReader1 = new StringReader("(o1bB?L");
      char[] charArray0 = new char[5];
      charArray0[2] = '9';
      charArray0[4] = '9';
      stringReader1.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.wordChars(1172, 1172);
      stringReader1.skip((-492L));
      streamTokenizer0.whitespaceChars((-2), 5);
      streamTokenizer0.wordChars((-2), 192);
      stringReader0.reset();
      stringReader1.skip(0L);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.quoteChar(0);
      streamTokenizer1.pushBack();
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      stringReader1.markSupported();
      streamTokenizer1.lowerCaseMode(true);
      stringReader1.close();
      streamTokenizer2.parseNumbers();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(o1bB?L");
      char[] charArray0 = new char[5];
      charArray0[4] = '9';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars('9', '9');
      streamTokenizer0.whitespaceChars((-4), '9');
      streamTokenizer0.wordChars((-4), 192);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(192);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.pushBack();
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer2.pushBack();
      streamTokenizer2.ttype = (-4);
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer2.ordinaryChar(41);
      stringReader0.markSupported();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer2.ordinaryChars((-4), (-1216));
      streamTokenizer1.ordinaryChars((-4), (-2030));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.whitespaceChars(1263, 192);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
