/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 01:57:59 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0622847261454798
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nSt");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "nSt");
      SystemInUtil.addInputLine("nSt");
      Consumer<JSPredicateForm> consumer0 = (Consumer<JSPredicateForm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.print();
      SystemInUtil.addInputLine("nSt");
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2691330114083126
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nSt");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "nSt");
      Consumer<JSPredicateForm> consumer0 = (Consumer<JSPredicateForm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      jSTerm1.add((Object) jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.print();
      SystemInUtil.addInputLine("nSt");
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution1);
      assertTrue(jSSubstitution1.fail());
      
      JSPredicateForm jSPredicateForm1 = jSTerm2.clonePF();
      boolean boolean0 = jSTerm2.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
      
      JSPredicateForm jSPredicateForm2 = jSTerm1.clonePF();
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm0));
      
      jSPredicateForm1.print();
      assertFalse(jSPredicateForm1.equals((Object)jSPredicateForm2));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3978523541751737
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      jSTerm0.trimToSize();
      jSTerm0.add((Object) "<");
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAll(jSSubstitution0);
      jSTerm0.listIterator();
      jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      System.setCurrentTimeMillis((-20L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-20L));
      System.setCurrentTimeMillis((-925L));
      System.setCurrentTimeMillis(45L);
      System.setCurrentTimeMillis(45L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1441L));
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nSt");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "nSt");
      SystemInUtil.addInputLine("nSt");
      Consumer<JSPredicateForm> consumer0 = (Consumer<JSPredicateForm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      jSTerm1.add((Object) jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.print();
      jSTerm2.clone();
      jSTerm1.call();
      jSTerm1.add((Object) "nSt");
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.add((Object) null);
      jSTerm2.add((Object) jSTerm1);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.addAll((Collection) jSTerm0);
      jSTerm4.matches((JSPredicateForm) jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "not";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.add((Object) "not");
      jSTerm0.equals(jSTerm1);
      jSTerm1.add((Object) "not");
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.add((Object) jSTerm1);
      jSTerm0.listIterator();
      jSTerm1.add((Object) jSTerm1);
      jSTerm1.removeElement(jSTerm0);
      jSTerm1.removeAll(jSTerm0);
      jSTerm1.add((Object) jSTerm1);
      jSTerm1.makeVariable();
      jSTerm1.add((Object) "not");
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.clone();
      jSTerm0.makeConstant();
      jSTerm0.clone();
      jSTerm0.call();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.addAll((Collection) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0409193396442307
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.trimToSize();
      jSTerm0.add((Object) "<");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.listIterator();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      SystemInUtil.addInputLine("<");
      jSTerm1.add((Object) "@");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      SystemInUtil.addInputLine("WfZxBxj'-+T8,");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution2 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.matches((JSPredicateForm) jSTerm1, jSSubstitution2);
      UnaryOperator<JSPredicateForm> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm1.replaceAll(unaryOperator0);
      jSTerm0.equals(jSPredicateForm0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSTerm2.applySubstitutionPF(jSSubstitution3);
      jSPredicateForm2.standarizerPredicateForm();
      int int0 = (-1973);
      // Undeclared exception!
      try { 
        jSPredicateForm2.subList((-1973), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1973
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1984543287850427
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "nou");
      jSPredicateForm0.capacity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.apply("nou");
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.apply("nou");
      Function.identity();
      unaryOperator2.compose((Function<? super String, ?>) unaryOperator1);
      Function<String, String> function0 = unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator1.compose((Function<? super String, ? extends String>) function0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      unaryOperator2.apply(unaryOperator0);
      jSPredicateForm1.isEmpty();
      JSJshopVars.interrogation = 3380;
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("nou");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSPredicateForm0.add((Object) jSTerm0);
      unaryOperator3.apply(unaryOperator0);
      unaryOperator2.compose((Function<? super Object, ?>) unaryOperator3);
      jSPredicateForm0.isEmpty();
      System.setCurrentTimeMillis((-11L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSPredicateForm2.matches(jSPredicateForm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      boolean boolean0 = jSPredicateForm2.equals(jSPredicateForm0);
      assertNotSame(jSPredicateForm1, jSPredicateForm2);
      assertFalse(boolean0);
      
      JSPredicateForm jSPredicateForm3 = jSPredicateForm0.standarizerPredicateForm();
      assertEquals("[nou, [%%%]]", jSPredicateForm3.toString());
      assertNotSame(jSPredicateForm3, jSPredicateForm0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2609694417359947
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.trimToSize();
      jSTerm0.add((Object) "<");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.listIterator();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      SystemInUtil.addInputLine("<");
      jSTerm1.add((Object) "@");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution2 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      JSSubstitution jSSubstitution3 = jSTerm2.matches((JSPredicateForm) jSTerm1, jSSubstitution2);
      jSTerm0.print();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      jSTerm1.clonePF();
      jSTerm1.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm2 = jSTerm2.applySubstitutionPF(jSSubstitution3);
      JSPredicateForm jSPredicateForm3 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm4 = jSTerm0.standarizerPredicateForm();
      assertTrue(jSPredicateForm4.equals((Object)jSPredicateForm3));
      
      jSPredicateForm2.print();
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertFalse(jSSubstitution2.fail());
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm4));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4780709313740181
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "iNm");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.lastElement();
      jSSubstitution0.add((Object) "iNm");
      SystemInUtil.addInputLine("iNm");
      System.setCurrentTimeMillis(1692L);
      StringReader stringReader0 = new StringReader("4Cx{;WE|pp)\"tp");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(1172, 0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.spliterator();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      stringReader0.markSupported();
      jSTerm1.stream();
      SystemInUtil.addInputLine((String) null);
      jSTerm0.add((Object) jSTerm1);
      streamTokenizer0.ordinaryChar((-1));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.pushBack();
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      jSTerm0.clonePF();
      SystemInUtil.addInputLine((String) null);
      System.setCurrentTimeMillis((-2585L));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8593009895205146
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeEval(false);
      jSTerm0.trimToSize();
      jSTerm0.add((Object) "<");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.add((Object) "@");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.listIterator();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      jSSubstitution1.listIterator();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.print();
      jSTerm3.add((Object) "<");
      jSTerm3.removeAllElements();
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.clonePF();
      // Undeclared exception!
      try { 
        jSTerm3.equals((JSPredicateForm) jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "no/");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.add((Object) jSTerm1);
      jSTerm0.listIterator();
      jSTerm1.add((Object) jSTerm1);
      jSTerm1.removeElement(jSTerm0);
      jSTerm1.add((Object) jSTerm1);
      jSTerm1.makeVariable();
      jSTerm1.add((Object) "no/");
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.clone();
      jSTerm0.makeConstant();
      jSTerm0.clone();
      jSTerm0.call();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.add((Object) "no/");
      jSTerm0.addAll((Collection) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "not";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "not");
      jSTerm0.add((Object) null);
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4505052290598255
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nSt");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "nSt");
      Consumer<JSPredicateForm> consumer0 = (Consumer<JSPredicateForm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSTerm0.add((Object) jSTerm1);
      Object object0 = jSTerm1.clone();
      jSTerm1.add(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.print();
      jSSubstitution0.clear();
      SystemInUtil.addInputLine("nSt");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(17, stringBuffer0.length());
      assertEquals("[nSt, [nSt, [nSt]]]", jSPredicateForm0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "iNm");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.lastElement();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) "iNm");
      SystemInUtil.addInputLine((String) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "iNm";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "iNm";
      objectArray0[3] = (Object) "iNm";
      jSTerm0.firstElement();
      objectArray0[4] = (Object) "iNm";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      jSSubstitution0.toArray(objectArray0);
      jSSubstitution0.add((Object) null);
      UnaryOperator.identity();
      jSTerm0.addAll((Collection) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.add((Object) "not");
      jSTerm1.add((Object) "not");
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.add((Object) "not");
      int int0 = 59;
      Integer integer0 = new Integer(59);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.addElement(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      charBuffer0.get();
      char[] charArray0 = new char[3];
      charBuffer0.codePoints();
      CharBuffer charBuffer1 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer2 = CharBuffer.allocate('x');
      CharBuffer charBuffer3 = CharBuffer.allocate(1312);
      charBuffer3.put('\u0000');
      charBuffer1.read(charBuffer3);
      CharBuffer charBuffer4 = charBuffer2.duplicate();
      CharBuffer charBuffer5 = CharBuffer.allocate('x');
      charBuffer5.read(charBuffer1);
      charBuffer5.get(charArray0);
      charBuffer5.rewind();
      charBuffer4.read(charBuffer1);
      charBuffer2.asReadOnlyBuffer();
      charBuffer4.clear();
      charBuffer2.read(charBuffer1);
      CharBuffer charBuffer6 = CharBuffer.wrap((CharSequence) charBuffer5);
      charBuffer6.mark();
      StringReader stringReader0 = new StringReader("!#Ra>P)r");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      SystemInUtil.addInputLine("not");
      Function<Object, Object> function1 = unaryOperator1.andThen((Function<? super Object, ?>) function0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      Function<Object, Object> function2 = unaryOperator1.andThen((Function<? super Object, ?>) function1);
      Function<Object, Object> function3 = unaryOperator1.compose((Function<? super Object, ?>) function2);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function6 = function2.andThen((Function<? super Object, ? extends String>) function5);
      Function<String, Object> function7 = function3.compose((Function<? super String, ?>) unaryOperator1);
      function1.compose((Function<? super Integer, ?>) function2);
      Function.identity();
      function2.apply(function6);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function9 = function1.andThen((Function<? super Object, ? extends Integer>) function8);
      function2.apply(unaryOperator0);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function9);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.apply(function7);
      function3.compose((Function<? super String, ?>) function9);
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ?>) function2);
      Integer integer0 = new Integer(10);
      function3.apply(integer0);
      unaryOperator3.compose((Function<? super Integer, ?>) function2);
      Function.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function10 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      SystemInUtil.addInputLine("not");
      unaryOperator2.compose((Function<? super Integer, ?>) function10);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.036019355145124
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) "Expecting ')' for term.");
      System.setCurrentTimeMillis(392L);
      jSTerm0.clonePF();
      System.setCurrentTimeMillis(392L);
      // Undeclared exception!
      try { 
        jSTerm2.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(42, 1516);
      streamTokenizer0.commentChar(1516);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) jSPredicateForm1);
      System.setCurrentTimeMillis(4280L);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(5, stringBuffer0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      charBuffer0.codePoints();
      StringReader stringReader0 = new StringReader("7b#xWCN%Ao;9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars(1312, 1312);
      streamTokenizer0.pushBack();
      CharBuffer.allocate(0);
      charBuffer0.limit(0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(1312);
      Reader reader0 = null;
      StreamTokenizer streamTokenizer2 = null;
      try {
        streamTokenizer2 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "not");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.forEach(consumer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      SystemInUtil.addInputLine("not");
      jSPredicateForm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4659497192528061
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "os&");
      JSJshopVars.backquote = 0;
      JSJshopVars.semicolon = 0;
      StringReader stringReader0 = new StringReader("7b#xWN%Ao;9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSJshopVars.minus = 0;
      streamTokenizer0.eolIsSignificant(false);
      jSPredicateForm0.clone();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.pushBack();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      CharBuffer.allocate(0);
      SystemInUtil.addInputLine((String) null);
      jSPredicateForm0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      SystemInUtil.addInputLine((String) null);
      String string0 = "o";
      SystemInUtil.addInputLine("o");
      jSTerm0.standarizerPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nJe");
      char[] charArray0 = new char[3];
      stringReader0.mark(1312);
      stringReader0.skip(1312);
      stringReader0.read(charArray0);
      stringReader0.ready();
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("`B{K[2%vSvI$cW-uqO8");
      stringReader0.reset();
      stringReader0.mark(1889);
      stringReader0.read();
      stringReader1.read();
      stringReader0.reset();
      stringReader0.markSupported();
      stringReader0.read(charArray0);
      StringReader stringReader2 = new StringReader("`B{K[2%vSvI$cW-uqO8");
      stringReader0.reset();
      stringReader1.read();
      char[] charArray1 = new char[1];
      charArray1[0] = ':';
      stringReader2.read(charArray1);
      stringReader2.skip((-2311L));
      stringReader1.markSupported();
      StringReader stringReader3 = new StringReader("u[4#A]&aM_zL");
      stringReader2.skip((-1L));
      stringReader0.ready();
      stringReader2.markSupported();
      System.setCurrentTimeMillis(66);
      System.setCurrentTimeMillis((-2311L));
      System.setCurrentTimeMillis((-2311L));
      System.setCurrentTimeMillis(1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".@#^*(p1<\":d9:K");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.setSize(1000);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) unaryOperator1);
      StringReader stringReader1 = new StringReader("<@e &;abw");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-2), 3282);
      streamTokenizer2.resetSyntax();
      streamTokenizer0.quoteChar(218);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-3));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer4.lowerCaseMode(true);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      streamTokenizer5.whitespaceChars((-4), (-1010));
      System.setCurrentTimeMillis(71L);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.188118820046292
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Line ");
      char[] charArray0 = new char[2];
      stringReader0.mark(1312);
      stringReader0.skip(0L);
      stringReader0.ready();
      charArray0[0] = 'm';
      stringReader0.read(charArray0);
      stringReader0.skip(0L);
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("Line ");
      stringReader1.reset();
      char[] charArray1 = new char[4];
      stringReader1.read();
      stringReader1.mark(1);
      charArray1[1] = 'm';
      charArray1[2] = 'q';
      stringReader1.reset();
      CharBuffer charBuffer0 = CharBuffer.allocate('q');
      charBuffer0.asReadOnlyBuffer();
      stringReader1.read(charArray1);
      charBuffer0.codePoints();
      stringReader1.read(charBuffer0);
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(:QbLd0>>m");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("(");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      charBuffer0.get();
      char[] charArray0 = new char[3];
      charBuffer0.codePoints();
      CharBuffer charBuffer1 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer2 = CharBuffer.allocate('x');
      CharBuffer charBuffer3 = CharBuffer.allocate(1312);
      charBuffer3.put('\u0000');
      charBuffer1.read(charBuffer3);
      CharBuffer charBuffer4 = charBuffer2.duplicate();
      CharBuffer charBuffer5 = CharBuffer.allocate('x');
      charBuffer5.read(charBuffer1);
      charBuffer5.get(charArray0);
      charBuffer5.rewind();
      charBuffer4.read(charBuffer1);
      charBuffer2.asReadOnlyBuffer();
      charBuffer4.clear();
      charBuffer2.read(charBuffer1);
      CharBuffer charBuffer6 = CharBuffer.wrap((CharSequence) charBuffer5);
      charBuffer6.mark();
      StringReader stringReader0 = new StringReader("!#Ra>P)r");
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addAll((Collection) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine(".");
      StringReader stringReader0 = new StringReader("($UMQ+b[!m0<k (O");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "ono");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.iterator();
      SystemInUtil.addInputLine("ono");
      jSPredicateForm0.spliterator();
      jSPredicateForm0.toStr();
      jSPredicateForm0.setSize(724);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "os&");
      jSPredicateForm0.add((Object) "os&");
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Line ");
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      charArray0[1] = 'x';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      charArray0[5] = 'm';
      charArray0[6] = 'm';
      charArray0[7] = 'm';
      charArray0[8] = 'm';
      stringReader0.read(charArray0);
      stringReader0.skip(0L);
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("Line ");
      stringReader1.read(charArray0);
      stringReader0.reset();
      stringReader1.reset();
      SystemInUtil.addInputLine("Line ");
      stringReader0.mark(5);
      StringReader stringReader2 = new StringReader("Line ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader2.reset();
      jSTerm0.trimToSize();
      jSTerm0.setSize(32);
      SystemInUtil.addInputLine("+kFcmQ`UX+rXt^vc&[a");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      jSTerm0.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Object> function1 = unaryOperator1.andThen((Function<? super Object, ?>) function0);
      Function<Object, Object> function2 = unaryOperator1.andThen((Function<? super Object, ?>) function1);
      jSTerm0.add((Object) unaryOperator0);
      Function<Integer, Object> function3 = function2.compose((Function<? super Integer, ?>) function1);
      unaryOperator1.compose((Function<? super Object, ?>) function2);
      function1.compose((Function<? super String, ?>) unaryOperator1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      function2.apply(unaryOperator0);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ?>) function2);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator4.compose((Function<? super Integer, ?>) function2);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function4);
      Integer integer0 = new Integer((-1372));
      unaryOperator4.compose((Function<? super String, ?>) unaryOperator3);
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) function3);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.UnaryOperator$$Lambda$45/652010274 cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SystemInUtil.addInputLine("noW");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noW");
      jSTerm0.add((Object) "noW");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ?>) unaryOperator2);
      unaryOperator3.compose((Function<? super Integer, ?>) function0);
      System.setCurrentTimeMillis((-130L));
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Predicate<JSPredicateForm> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      jSPredicateForm0.add((Object) predicate0);
      System.setCurrentTimeMillis(43L);
      System.setCurrentTimeMillis((-18L));
      System.setCurrentTimeMillis((-1274L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1274L));
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$48/1852030759 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "iNm");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[9];
      jSPredicateForm0.lastElement();
      jSSubstitution0.add((Object) "iNm");
      jSSubstitution0.add((Object) "iNm");
      objectArray0[0] = (Object) jSPredicateForm0;
      objectArray0[1] = (Object) jSSubstitution0;
      SystemInUtil.addInputLine("iNm");
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) jSPredicateForm0;
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = (Object) jSPredicateForm0;
      jSSubstitution0.toArray(objectArray0);
      objectArray0[6] = (Object) jSSubstitution0;
      objectArray0[7] = (Object) "iNm";
      objectArray0[8] = (Object) jSSubstitution0;
      jSPredicateForm0.add(objectArray0[7]);
      SystemInUtil.addInputLine("iNm");
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      System.setCurrentTimeMillis(16L);
      System.setCurrentTimeMillis(3380);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(3380);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(807L);
      System.setCurrentTimeMillis(3380);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2481L));
      System.setCurrentTimeMillis(3380);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "nou");
      jSPredicateForm0.print();
      System.setCurrentTimeMillis(16L);
      System.setCurrentTimeMillis(16L);
      System.setCurrentTimeMillis((-2481L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(3380);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(807L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2481L));
      System.setCurrentTimeMillis(3380);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "not");
      jSTerm0.add((Object) null);
      jSTerm0.add((Object) "not");
      jSTerm0.equals(jSTerm0);
      jSTerm0.add((Object) null);
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      jSTerm1.add((Object) null);
      Integer integer0 = new Integer(3395);
      System.setCurrentTimeMillis(3395);
      System.setCurrentTimeMillis(706L);
      System.setCurrentTimeMillis(1634L);
      System.setCurrentTimeMillis(59);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(3395);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9448468679826323
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "os&");
      JSJshopVars.backquote = 0;
      JSJshopVars.semicolon = 0;
      JSJshopVars.astherisk = 0;
      StringReader stringReader0 = new StringReader("7b#xWCN%Ao;9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) 0;
      streamTokenizer0.eolIsSignificant(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars(0, 0);
      streamTokenizer0.pushBack();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      charBuffer0.limit(0);
      SystemInUtil.addInputLine(":4],s7&oBI$");
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer(0);
      jSTerm0.add((Object) integer0);
      streamTokenizer1.quoteChar(0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      stringReader0.skip(0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "nSt";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nSt");
      jSTerm0.add((Object) "nSt");
      jSTerm0.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "noW";
      SystemInUtil.addInputLine("noW");
      SystemInUtil.addInputLine("noW");
      SystemInUtil.addInputLine("noW");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("noW");
      jSTerm0.add((Object) "noW");
      String string1 = " ";
      SystemInUtil.addInputLine("noW");
      SystemInUtil.addInputLine(" ");
      jSTerm0.add((Object) "noW");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine(" ");
      SystemInUtil.addInputLine("noW");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.equals((JSPredicateForm) null);
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "list ");
      jSTerm0.add((Object) "!l0b=met^&QId");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "");
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.add((Object) "");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      jSTerm0.add((Object) "");
      Integer integer0 = new Integer(59);
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-2));
      StringReader stringReader1 = new StringReader(" ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.ordinaryChar((-2));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.commentChar((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer2.resetSyntax();
      streamTokenizer1.quoteChar((-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.flagLevel = 2535;
      jSPredicateForm0.add((Object) "iNm");
      JSJshopVars.backquote = 2535;
      JSJshopVars.minus = 2535;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSPredicateForm0;
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) jSSubstitution0;
      JSPredicateForm jSPredicateForm1 = (JSPredicateForm)jSPredicateForm0.clone();
      objectArray0[3] = (Object) jSPredicateForm1;
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = (Object) jSPredicateForm0;
      objectArray0[6] = (Object) jSSubstitution0;
      objectArray0[7] = (Object) "iNm";
      objectArray0[8] = (Object) jSSubstitution0;
      jSSubstitution0.toArray(objectArray0);
      jSSubstitution0.add(objectArray0[0]);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm1.replaceAll(unaryOperator0);
      jSPredicateForm0.equals(jSPredicateForm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals("[]", jSSubstitution1.toString());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Integer integer0 = new Integer(9);
      jSPredicateForm0.add((Object) integer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      SystemInUtil.addInputLine("nou");
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Object> function1 = unaryOperator1.andThen((Function<? super Object, ?>) function0);
      Function<Object, Object> function2 = unaryOperator1.andThen((Function<? super Object, ?>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Object> function3 = unaryOperator2.compose((Function<? super Object, ?>) function2);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function5 = function3.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function6 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function5);
      Function<String, Object> function7 = unaryOperator1.compose((Function<? super String, ?>) function6);
      function3.apply(function2);
      function3.compose((Function<? super Integer, ?>) unaryOperator1);
      Function.identity();
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends Integer>) function8);
      function5.compose((Function<? super String, ?>) function3);
      unaryOperator1.apply(unaryOperator0);
      function7.compose((Function<? super String, ? extends String>) unaryOperator0);
      Function<Object, Integer> function9 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function10 = function1.andThen((Function<? super Object, ? extends Integer>) function9);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function10);
      function1.andThen((Function<? super Object, ?>) unaryOperator1);
      Object object0 = jSPredicateForm0.lastElement();
      unaryOperator1.apply(object0);
      unaryOperator2.compose((Function<? super Object, ?>) function2);
      function2.compose((Function<? super String, ?>) function6);
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.addAll((Collection) jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "nou");
      jSPredicateForm0.capacity();
      jSPredicateForm0.add((Object) null);
      System.setCurrentTimeMillis(10);
      System.setCurrentTimeMillis(10);
      System.setCurrentTimeMillis(3380);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1955L));
      System.setCurrentTimeMillis(3380);
      System.setCurrentTimeMillis((-1692L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1955L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(1L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.4052943815963697
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "nou");
      jSPredicateForm0.capacity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.apply("nou");
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.apply("nou");
      Function.identity();
      unaryOperator2.compose((Function<? super String, ?>) unaryOperator1);
      Function<String, String> function0 = unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator1.compose((Function<? super String, ? extends String>) function0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      unaryOperator2.apply(unaryOperator0);
      unaryOperator0.andThen((Function<? super String, ?>) function0);
      jSPredicateForm1.isEmpty();
      JSJshopVars.interrogation = 3380;
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.apply(unaryOperator1);
      unaryOperator3.apply(unaryOperator0);
      unaryOperator2.compose((Function<? super Object, ?>) unaryOperator3);
      jSPredicateForm0.isEmpty();
      System.setCurrentTimeMillis((-11L));
      CharBuffer.wrap((CharSequence) "nou");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "nou");
      CharBuffer.wrap((CharSequence) "nou");
      charBuffer0.mark();
      charBuffer0.mark();
      JSPredicateForm jSPredicateForm2 = null;
      try {
        jSPredicateForm2 = new JSPredicateForm("(bQRL<0>[m");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Object> function1 = unaryOperator1.andThen((Function<? super Object, ?>) function0);
      Function<Object, Object> function2 = unaryOperator1.andThen((Function<? super Object, ?>) function1);
      jSTerm0.add((Object) unaryOperator0);
      function2.compose((Function<? super Integer, ?>) function1);
      unaryOperator1.compose((Function<? super Object, ?>) function2);
      function1.compose((Function<? super String, ?>) unaryOperator1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      function2.apply(unaryOperator0);
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ?>) function2);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Integer, ?>) function2);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function3);
      Integer integer0 = new Integer((-1372));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator3);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.apply(" ");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.UnaryOperator$$Lambda$45/652010274 cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SystemInUtil.addInputLine("noW");
      SystemInUtil.addInputLine("noW");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("noW");
      SystemInUtil.addInputLine("noW");
      SystemInUtil.addInputLine(" ");
      jSTerm0.add((Object) "noW");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine(" ");
      SystemInUtil.addInputLine("noW");
      jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      System.setCurrentTimeMillis((-1864L));
      char[] charArray0 = new char[1];
      SystemInUtil.addInputLine("noW");
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("FNx<X|g!k+l]@m-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      StringReader stringReader1 = new StringReader("FNx<X|g!k+l]@m-");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer1.wordChars((-4), 41);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer0.slashStarComments(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(true);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer3.resetSyntax();
      streamTokenizer4.quoteChar((-565));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader1);
      streamTokenizer3.lowerCaseMode(true);
      streamTokenizer2.whitespaceChars((-565), (-4));
      streamTokenizer3.whitespaceChars((-4), (-1912836250));
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Object> function1 = unaryOperator1.andThen((Function<? super Object, ?>) function0);
      Function<Object, Object> function2 = unaryOperator1.andThen((Function<? super Object, ?>) function1);
      Function<Object, Object> function3 = unaryOperator1.compose((Function<? super Object, ?>) function2);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function6 = function2.andThen((Function<? super Object, ? extends String>) function5);
      Function<String, Object> function7 = function3.compose((Function<? super String, ?>) unaryOperator1);
      function3.apply(function7);
      function1.compose((Function<? super Integer, ?>) function2);
      Function.identity();
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function9 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function8);
      function6.compose((Function<? super String, ?>) function9);
      function2.apply(function6);
      Function<Object, Integer> function10 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.compose((Function<? super String, ?>) function7);
      function7.compose((Function<? super String, ? extends String>) function6);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) null);
      jSTerm1.clone();
      jSTerm0.makeConstant();
      Object object0 = jSTerm1.clone();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.add(object0);
      jSTerm2.add((Object) "not");
      jSTerm2.addAll((Collection) jSTerm1);
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = unaryOperator0.andThen((Function<? super Object, ?>) function0);
      Function<Object, Object> function2 = unaryOperator0.andThen((Function<? super Object, ?>) function1);
      unaryOperator0.compose((Function<? super Object, ?>) function2);
      Function.identity();
      unaryOperator0.compose((Function<? super String, ?>) function1);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function3);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Object> function4 = Function.identity();
      unaryOperator1.andThen((Function<? super String, ?>) function4);
      unaryOperator2.compose((Function<? super Integer, ?>) function2);
      Integer integer0 = new Integer((-1365));
      unaryOperator3.compose((Function<? super String, ? extends String>) unaryOperator1);
      UnaryOperator.identity();
      System.setCurrentTimeMillis((-1365));
      System.setCurrentTimeMillis((-1365));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Object> function1 = unaryOperator1.andThen((Function<? super Object, ?>) function0);
      Function<Object, Object> function2 = unaryOperator1.andThen((Function<? super Object, ?>) function1);
      Function<Object, Object> function3 = unaryOperator1.compose((Function<? super Object, ?>) function2);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function5 = function2.andThen((Function<? super Object, ? extends String>) function4);
      unaryOperator1.apply(function5);
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function7 = function2.andThen((Function<? super Object, ? extends String>) function6);
      Function<String, Object> function8 = function3.compose((Function<? super String, ?>) unaryOperator1);
      function3.apply(function8);
      Function<Integer, Object> function9 = function1.compose((Function<? super Integer, ?>) function2);
      Function.identity();
      Function<Object, Integer> function10 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function11 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function10);
      function7.compose((Function<? super String, ?>) function11);
      function2.apply(function7);
      Function<Object, Integer> function12 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function8.compose((Function<? super String, ? extends String>) function7);
      Function<Object, Integer> function13 = function1.andThen((Function<? super Object, ? extends Integer>) function12);
      function7.compose((Function<? super Integer, ?>) function9);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function13);
      function1.andThen((Function<? super Object, ?>) function3);
      unaryOperator1.apply(function8);
      function1.compose((Function<? super Object, ?>) function2);
      function3.compose((Function<? super String, ?>) function13);
      UnaryOperator.identity();
      function3.andThen((Function<? super Object, ? extends String>) function7);
      Integer integer0 = new Integer(62);
      function3.apply(integer0);
      Integer integer1 = new Integer(62);
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "($UMQ+b[!m0<k (O";
      StringReader stringReader0 = new StringReader("($UMQ+b[!m0<k (O");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Object> function1 = unaryOperator0.andThen((Function<? super Object, ?>) function0);
      Function<Object, Object> function2 = unaryOperator0.andThen((Function<? super Object, ?>) function1);
      Function<Object, Object> function3 = unaryOperator0.compose((Function<? super Object, ?>) function2);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function6 = function2.andThen((Function<? super Object, ? extends String>) function5);
      Integer integer0 = new Integer(68);
      function2.apply(integer0);
      function3.compose((Function<? super String, ?>) unaryOperator0);
      function1.compose((Function<? super Integer, ?>) function2);
      Function.identity();
      function2.apply(function6);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      function1.apply("not");
      function1.andThen((Function<? super Object, ? extends String>) function6);
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function8 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function7);
      function1.apply(unaryOperator0);
      Function<Object, Integer> function9 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function8);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ?>) function3);
      Function.identity();
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ?>) function3);
      Integer integer1 = new Integer(2013);
      Object object0 = new Object();
      unaryOperator2.compose((Function<? super Integer, ?>) function9);
      Function.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) function9);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Line ");
      char[] charArray0 = new char[2];
      stringReader0.mark(1312);
      stringReader0.skip(1312);
      stringReader0.ready();
      charArray0[0] = 'm';
      stringReader0.read(charArray0);
      stringReader0.skip(0L);
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("`0{K,2%vSI$cW-uyO8");
      stringReader0.reset();
      stringReader0.read();
      stringReader1.read();
      stringReader0.reset();
      stringReader0.markSupported();
      stringReader0.read(charArray0);
      StringReader stringReader2 = new StringReader("`0{K,2%vSI$cW-uyO8");
      stringReader0.reset();
      stringReader1.read();
      StringReader stringReader3 = new StringReader("u[4#A]&aM_zL");
      stringReader0.ready();
      stringReader2.markSupported();
      stringReader1.close();
      StringReader stringReader4 = new StringReader("% ");
      stringReader4.mark(48);
      stringReader0.reset();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1312);
      charBuffer0.get();
      char[] charArray0 = new char[3];
      charBuffer0.codePoints();
      CharBuffer charBuffer1 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer2 = CharBuffer.allocate('x');
      CharBuffer charBuffer3 = CharBuffer.allocate(1312);
      CharBuffer charBuffer4 = charBuffer3.put('\u0000');
      charBuffer1.read(charBuffer3);
      CharBuffer charBuffer5 = charBuffer2.duplicate();
      CharBuffer charBuffer6 = CharBuffer.allocate('x');
      charBuffer6.read(charBuffer1);
      charBuffer6.get(charArray0);
      charBuffer6.rewind();
      charBuffer5.read(charBuffer1);
      charBuffer2.asReadOnlyBuffer();
      CharBuffer charBuffer7 = charBuffer4.asReadOnlyBuffer();
      charBuffer2.clear();
      charBuffer7.clear();
      CharBuffer.wrap((CharSequence) charBuffer1);
      CharBuffer.wrap((CharSequence) charBuffer7);
      CharBuffer.wrap((CharSequence) charBuffer5);
      charBuffer1.mark();
      charBuffer6.mark();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(" Expected (");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L5< ");
      stringReader0.skip(0L);
      char[] charArray0 = new char[2];
      stringReader0.mark(1312);
      stringReader0.skip(1312);
      stringReader0.ready();
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.mark(1312);
      stringReader0.read(charBuffer0);
      charArray0[0] = 'm';
      stringReader0.read(charArray0);
      stringReader0.skip(0L);
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("L5< ");
      stringReader1.reset();
      char[] charArray1 = new char[4];
      stringReader1.read();
      stringReader1.mark(1);
      charArray1[1] = 'm';
      stringReader1.read(charBuffer0);
      stringReader1.markSupported();
      stringReader0.reset();
      CharBuffer charBuffer1 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer2 = CharBuffer.allocate('q');
      charBuffer1.read(charBuffer2);
      stringReader1.read(charArray1);
      stringReader1.markSupported();
      charBuffer1.codePoints();
      stringReader1.read(charBuffer1);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(&QbLd0>[m");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      int int0 = (-26772340);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-26772340));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CjR");
      char[] charArray0 = new char[3];
      stringReader0.mark(1312);
      stringReader0.skip(1312);
      stringReader0.read(charArray0);
      stringReader0.ready();
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("5Vjtwzb`teN");
      stringReader0.reset();
      stringReader0.mark(1868);
      stringReader0.read();
      stringReader0.reset();
      stringReader0.markSupported();
      stringReader0.read(charArray0);
      StringReader stringReader2 = new StringReader("5Vjtwzb`teN");
      stringReader0.reset();
      stringReader1.read();
      char[] charArray1 = new char[1];
      charArray1[0] = '\u001C';
      stringReader2.read(charArray1);
      stringReader1.read();
      stringReader1.read();
      stringReader2.skip(127);
      stringReader1.markSupported();
      StringReader stringReader3 = new StringReader("(|x=y'");
      stringReader2.skip(11L);
      stringReader0.ready();
      stringReader2.markSupported();
      StringReader stringReader4 = new StringReader("5Vjtwzb`teN");
      stringReader4.markSupported();
      stringReader4.reset();
      stringReader4.read(charArray0);
      stringReader4.mark(53);
      stringReader0.reset();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CjR");
      char[] charArray0 = new char[3];
      stringReader0.mark(1312);
      stringReader0.skip(1312);
      stringReader0.read(charArray0);
      stringReader0.ready();
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("5Vjtwzb`teN");
      stringReader0.reset();
      stringReader0.mark(1868);
      stringReader0.read();
      stringReader1.read();
      stringReader0.reset();
      stringReader0.markSupported();
      StringReader stringReader2 = new StringReader("5Vjtwzb`teN");
      stringReader0.reset();
      stringReader1.read();
      char[] charArray1 = new char[1];
      charArray1[0] = '\u001C';
      stringReader2.read(charArray1);
      stringReader1.read();
      stringReader1.read();
      stringReader2.skip(106);
      stringReader1.markSupported();
      StringReader stringReader3 = new StringReader("(|x=y'");
      stringReader2.skip(11L);
      stringReader0.ready();
      stringReader2.markSupported();
      StringReader stringReader4 = new StringReader("5Vjtwzb`teN");
      stringReader4.markSupported();
      stringReader4.reset();
      stringReader4.read(charArray0);
      stringReader4.mark(86);
      stringReader0.reset();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }
}
