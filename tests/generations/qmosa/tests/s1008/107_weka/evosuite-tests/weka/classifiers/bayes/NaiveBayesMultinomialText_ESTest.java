/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 16:09:54 GMT 2020
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.lazy.IBk;
import weka.classifiers.misc.InputMappedClassifier;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TestInstances;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.stemmers.IteratedLovinsStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.Tokenizer;
import weka.filters.supervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.985285382856462
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.reset();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/replication/scripts/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "u`dq%=Zi|3r:b");
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.setStopwords((File) null);
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.m_normalize = true;
      naiveBayesMultinomialText1.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText1.getOptions();
      naiveBayesMultinomialText1.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SparseInstance sparseInstance0 = new SparseInstance(500);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      try { 
        naiveBayesMultinomialText1.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9065528426722014
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(7);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Sum (`oubles): ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)14;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("\nThe probability of a word given the class\n");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray1 = new String[0];
      naiveBayesMultinomialText1.setOptions(stringArray1);
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.setNorm((byte)33);
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.tokenizerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.toString();
      naiveBayesMultinomialText4.setOptions(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("[Mtz4=(+Cf2wsVV$m");
      NaiveBayesMultinomialText naiveBayesMultinomialText5 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText5.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.052480693923316
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Sum (doubles): ");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumString(39);
      testInstances0.setNumRelationalNumeric((-353));
      Instances instances0 = testInstances0.generate("Sum (doubles): ");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "hrM*9ekwF@GS9Brn$");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setPeriodicPruning((byte) (-100));
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      testInstances2.generate("c#'fAujID.j\"cZAV");
      testInstances1.generate("R?i>q#Dw");
      naiveBayesMultinomialText0.buildClassifier(instances0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2861321540986952
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(7);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Sum (`oubles): ");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)8;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile2);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumString(7);
      Instances instances0 = testInstances0.generate("Sum (`oubles): ");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)33;
      doubleArray0[5] = (double) (-2);
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 7;
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      doubleArray0[8] = (double) (-2);
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate(".arff");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1941243767508656
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SGD sGD0 = new SGD();
      Capabilities capabilities0 = sGD0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumString(2);
      testInstances0.setNumRelationalNumeric(2);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setPeriodicPruning(11);
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances0.generate("");
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.toString();
      assertEquals(11, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4479871140961187
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.debugTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = (-3213.241536513);
      doubleArray0[1] = (-649.8904251485271);
      doubleArray0[6] = 0.001;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.setPeriodicPruning(10000);
      TestInstances testInstances1 = new TestInstances();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances2.generate("oq");
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1869.83);
      doubleArray1[1] = (-649.8904251485271);
      doubleArray1[2] = (double) (-2);
      doubleArray1[3] = (-868.0);
      doubleArray1[4] = 0.001;
      doubleArray1[5] = (-3213.241536513);
      doubleArray1[6] = (double) (-1);
      doubleArray1[7] = (-1869.83);
      doubleArray1[8] = 0.001;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-868.0), doubleArray1);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      naiveBayesMultinomialText2.m_t = (-1869.83);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      try { 
        naiveBayesMultinomialText2.buildClassifier(instances0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6087603607651826
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.debugTipText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-649.8904251485271);
      doubleArray0[6] = (-649.8904251485271);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.setPeriodicPruning(10000);
      TestInstances testInstances1 = new TestInstances();
      naiveBayesMultinomialText2.m_leplace = (double) (-1);
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances2.generate("oq");
      naiveBayesMultinomialText2.buildClassifier(instances0);
      naiveBayesMultinomialText2.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText2.stopwordsTipText();
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Stopwords stopwords0 = new Stopwords();
      naiveBayesMultinomialText0.m_stopwords = stopwords0;
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 1872);
      naiveBayesMultinomialText0.setPeriodicPruning(1872);
      naiveBayesMultinomialText0.setNorm((-2701.365651940119));
      StringReader stringReader0 = new StringReader("Whether to convert all tokens to lowercase");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1872);
      stopwords0.read(bufferedReader0);
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.m_periodicP = (-2007);
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.setNorm(13.0);
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.toString();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2032880514087454
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Sum (doubles): ");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/replication/scripts/projects/107_weka");
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)33;
      byteArray0[5] = (byte)73;
      FileSystemHandling.appendDataToFile(evoSuiteFile2, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile3);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumString(7);
      testInstances0.setNumRelationalNumeric((-353));
      Instances instances0 = testInstances0.generate("Sum (doubles): ");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, ".bsi");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      naiveBayesMultinomialText0.setPeriodicPruning(11);
      testInstances0.generate((String) null);
      testInstances0.generate(".arff");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals(11, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.135611785947226
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.setStopwords((File) null);
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setNorm(0.0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.tokenizerTipText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("9122");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      assertEquals(0.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      
      naiveBayesMultinomialText1.normTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.LNormTipText();
      assertEquals(2.0, naiveBayesMultinomialText2.getLNorm(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.322078457476883
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\tConvert all tokens to lowercase before adding to the dictionary.";
      stringArray0[1] = "-nominal-class";
      stringArray0[2] = "SpQjp&N9wt[t0gk+";
      stringArray0[3] = "-nominal-class";
      stringArray0[4] = "OLmsB(J";
      stringArray0[5] = "SpQjp&N9wt[t0gk+";
      stringArray0[6] = "\tConvert all tokens to lowercase before adding to the dictionary.";
      stringArray0[7] = "$ReIisio*: 9122 $";
      stringArray0[8] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = (-3213.241536513);
      doubleArray0[1] = (-649.8904251485271);
      doubleArray0[2] = 0.001;
      doubleArray0[3] = 15.0;
      doubleArray0[4] = 3.0;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      instances0.setClassIndex((-2));
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.334881892747466
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.getRevision();
      System.setCurrentTimeMillis(0L);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning((-1));
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      Tokenizer tokenizer0 = naiveBayesMultinomialText1.getTokenizer();
      naiveBayesMultinomialText0.m_tokenizer = tokenizer0;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      snowballStemmer0.getStemmer();
      snowballStemmer0.getStemmer();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.m_minWordP = (-3225.0);
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText1.listOptions();
      naiveBayesMultinomialText0.listOptions();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9858586614236438
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 110);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SGDText sGDText0 = new SGDText();
      sGDText0.setMinWordFrequency(888.45153);
      sGDText0.setLambda((-1616.7439426256));
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      naiveBayesMultinomialText0.getRevision();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.tokenizerTipText();
      Random.setNextRandom(110);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.238941108704779
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "-nominal-class";
      stringArray0[2] = "SpQjp&N9wt[t0gk+";
      stringArray0[3] = "-nominal-class";
      stringArray0[4] = "OLmsB(J";
      stringArray0[5] = "SpQjp&N9wt[t0gk+";
      stringArray0[6] = "Q?`nt_nv{JQKXAG";
      stringArray0[7] = "$Revision: 9122 $";
      stringArray0[8] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3213.241536513);
      doubleArray0[1] = (-649.8904251485271);
      doubleArray0[2] = 0.001;
      doubleArray0[3] = 15.0;
      doubleArray0[4] = 3.0;
      doubleArray0[5] = 763.43225369;
      doubleArray0[6] = 2669.181536335;
      doubleArray0[7] = 1.0E-10;
      doubleArray0[8] = 1.0;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      iteratedLovinsStemmer1.toString();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_norm = 3618.990253535618;
      naiveBayesMultinomialText0.getOptions();
      MockRandom mockRandom0 = new MockRandom();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText0.setMinWordFrequency((-762));
      naiveBayesMultinomialText0.m_periodicP = (-762);
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.useStopListTipText();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      naiveBayesMultinomialText0.m_normalize = false;
      int[] intArray0 = new int[5];
      intArray0[0] = (-762);
      intArray0[1] = (-762);
      intArray0[2] = (-762);
      intArray0[3] = (-762);
      intArray0[4] = (-762);
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(7);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Sum (doubles): ");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)8;
      FileSystemHandling.appendDataToFile(evoSuiteFile2, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile3);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumString(7);
      testInstances0.setNumRelationalNumeric((-353));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)33;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 7;
      doubleArray0[7] = 140.660999052365;
      doubleArray0[8] = (double) (byte)8;
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      TestInstances testInstances1 = new TestInstances();
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      
      naiveBayesMultinomialText0.setLNorm(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.deleteAttributeAt(0);
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance1, false);
      assertEquals(0.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.729722341528714
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Sum (doubles): ");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)33;
      byteArray0[8] = (byte)14;
      FileSystemHandling.appendDataToFile(evoSuiteFile2, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile3);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumString((byte)0);
      Instances instances0 = testInstances0.generate("Sum (doubles): ");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      TestInstances testInstances1 = new TestInstances();
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, testInstances1.DEFAULT_WORDS);
      Instances instances1 = testInstances1.generate("");
      naiveBayesMultinomialText0.buildClassifier(instances1);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.473170167456632
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "OLmsB(J";
      stringArray0[1] = "-nominal-class";
      stringArray0[2] = "OLmsB(J";
      stringArray0[3] = "-nominal-class";
      stringArray0[4] = "Q?`nt_/v{JQKXAG";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.listOptions();
      naiveBayesMultinomialText1.tokenizerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.tokenizerTipText();
      naiveBayesMultinomialText2.LNormTipText();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-752.95154);
      doubleArray0[1] = (-752.95154);
      doubleArray0[2] = (-752.95154);
      SparseInstance sparseInstance0 = new SparseInstance((-752.95154), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      try { 
        naiveBayesMultinomialText2.updateClassifier((Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 2688.0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.updateClassifier(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.821941022571158
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.getOptions();
      Instances instances0 = null;
      MockRandom mockRandom0 = new MockRandom();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6593053020517714
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/replication/scripts/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.m_periodicP = 200;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(200, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/replication/scripts/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(200);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.toString();
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      naiveBayesMultinomialText0.toString();
      boolean boolean0 = naiveBayesMultinomialText0.getUseWordFrequencies();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.238941108704779
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1122.643);
      doubleArray0[4] = 52.3;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 3359.5;
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.getPeriodicPruning();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The tokenizing algorithm to use on the strings.";
      stringArray0[1] = "The tokenizing algorithm to use on the strings.";
      stringArray0[2] = "";
      stringArray0[3] = "The tokenizing algorithm to use on the strings.";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      KDTree kDTree0 = new KDTree();
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.473170167456632
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/replication/scripts/projects/107_weka");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-lowercase";
      stringArray0[1] = "$Revision: 9122 $";
      stringArray0[2] = "";
      stringArray0[3] = "Use word frequencies rather than binary bag of words representation";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer2 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer2.toString();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.stopwordsTipText();
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.821941022571158
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/replication/scripts/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.toString();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      naiveBayesMultinomialText0.m_periodicP = 179;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertEquals(179, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_norm = (double) (-3740);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3740.0);
      doubleArray0[1] = (-3740.0);
      doubleArray0[2] = (double) (-3740);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.m_periodicP = (-3740);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.stopwordsTipText();
      BallTree ballTree0 = new BallTree();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      BallNode ballNode0 = new BallNode((-3740), (-3127), (-3740), (Instance) null, 50.0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 3000;
      try { 
        inputMappedClassifier0.classifyInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.448809970188831
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Sum (doubles): ");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)73;
      FileSystemHandling.appendDataToFile(evoSuiteFile2, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile3);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNumeric((-353));
      Instances instances0 = testInstances0.generate("Sum (doubles): ");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, ".bsi");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile4 = new EvoSuiteFile("/home/ubuntu/replication/scripts/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile4, "Thirteenth International Conference on Machine Learning");
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.setPeriodicPruning(11);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate((String) null);
      testInstances1.generate(".arff");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals(11, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.95, intArray0, 1908874353);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\tConvert all tokens to lowercase before adding to the dictionary.";
      stringArray0[1] = "-nominal-class";
      stringArray0[2] = "SpQjp&N9wt[t0gk+";
      stringArray0[3] = "-nominal-class";
      stringArray0[4] = "OLmsB(J";
      stringArray0[5] = "SpQjp&N9wt[t0gk+";
      stringArray0[6] = "Q?`nt_nv{JQKXAG";
      stringArray0[7] = "$Revision: 9122 $";
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4.5;
      doubleArray0[1] = 4.5;
      doubleArray0[2] = 4.5;
      doubleArray0[3] = 4.5;
      doubleArray0[4] = 389.57679;
      doubleArray0[5] = 4.5;
      SparseInstance sparseInstance0 = new SparseInstance(4.5, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1537419427010902
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.pruneDictionary();
      Instances instances0 = null;
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 368;
      doubleArray0[1] = (double) (-261);
      doubleArray0[2] = (double) 81;
      doubleArray0[3] = (double) 368;
      doubleArray0[5] = (double) 81;
      int[] intArray0 = new int[4];
      intArray0[0] = 81;
      intArray0[1] = 368;
      intArray0[2] = 368;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-261), doubleArray0, intArray0, 342);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2523542313691998
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setMinWordFrequency(13.0);
      naiveBayesMultinomialText0.getOptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/replication/scripts/projects/107_weka");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/replication/scripts/projects/107_weka");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6797060388399334
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_t = (-3.0);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normTipText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setPeriodicPruning(100);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      NaiveBayesMultinomialText.main(stringArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(27);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.toString();
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      System.setCurrentTimeMillis((-1593L));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getStemmer();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "a8,M7";
      stringArray0[1] = "Class must be nominal for margin distributions";
      stringArray0[2] = "";
      stringArray0[3] = "-normalize";
      stringArray0[4] = "n~Z";
      stringArray0[5] = "\tHow often to prune the dictionary of low frequency words (default = 0, i.e. don't prune)";
      stringArray0[6] = "[_0T>iiE<!~WAy)";
      inputMappedClassifier0.enumerateMeasures();
      stringArray0[7] = "N";
      inputMappedClassifier0.getOptions();
      Capabilities capabilities0 = new Capabilities(inputMappedClassifier0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getData();
      inputMappedClassifier0.setModelHeader((Instances) null);
      naiveBayesMultinomialText0.setNorm(3338.572068519);
      stringArray0[8] = "thTJ'XT$";
      naiveBayesMultinomialText0.useStopListTipText();
      InputMappedClassifier.main(stringArray0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(3338.572068519, doubleArray0);
      try { 
        inputMappedClassifier0.constructMappedInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      System.setCurrentTimeMillis((-1593L));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, double0, 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "NM*K;";
      stringArray0[2] = "SpQjp&N9wt[t0gk+";
      stringArray0[3] = "SpQjp&N9wt[t0gk+";
      stringArray0[4] = "OLmsB(J";
      stringArray0[5] = "SpQjp&N9wt[t0gk+";
      boolean boolean0 = naiveBayesMultinomialText0.getUseWordFrequencies();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/replication/scripts/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-6);
      intArray0[1] = 0;
      intArray0[2] = (-6);
      intArray0[3] = 162;
      intArray0[4] = (-6);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.setUseStopList(true);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/replication/scripts/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 162;
      intArray0[4] = 0;
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.setUseStopList(true);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      System.setCurrentTimeMillis((-1593L));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4122102014318156
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\tConvert all tokens to lowercase before adding to the dictionary.";
      stringArray0[1] = "-nominal-class";
      stringArray0[2] = "SpQjp&N9wt[t0gk+";
      stringArray0[3] = "-nominal-class";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText0.getOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-nominal-class");
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getStopwords();
      MockFile mockFile0 = new MockFile("m");
      mockFile0.setWritable(false, true);
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.399963437259953
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BallTree ballTree0 = new BallTree();
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 1;
      iBk0.setDebug(true);
      doubleArray0[4] = (double) 4;
      doubleArray0[4] = (double) 1;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Q?`nt_/v{JQKXAG";
      stringArray0[1] = "";
      stringArray0[2] = "Q?`nt_/v{JQKXAG";
      stringArray0[3] = "p.oce";
      stringArray0[4] = "Q?`nt_/v{JQKXAG";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      String string0 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string0);
      
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.tokenizerTipText();
      String string1 = naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals("The tokenizing algorithm to use on the strings.", string1);
      
      String string2 = naiveBayesMultinomialText1.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string2);
      
      Random.setNextRandom(2139);
      String string3 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string3);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      
      String string4 = naiveBayesMultinomialText1.globalInfo();
      assertEquals(0, naiveBayesMultinomialText1.getPeriodicPruning());
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
      assertEquals("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string4);
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      file0.setWritable(true, false);
      naiveBayesMultinomialText0.setStopwords(file0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      
      naiveBayesMultinomialText0.m_periodicP = (-5045);
      naiveBayesMultinomialText0.setLNorm(1.0);
      assertEquals(1.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }
}
