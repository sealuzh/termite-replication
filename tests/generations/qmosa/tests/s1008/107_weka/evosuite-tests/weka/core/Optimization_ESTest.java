/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 02:52:57 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Optimization;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Optimization_ESTest extends Optimization_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.7890426925472673
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)31;
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.identity((byte)31, (byte)31);
      double[] doubleArray0 = new double[7];
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      decimalFormat0.setParseIntegerOnly(false);
      DecimalFormat decimalFormat1 = new DecimalFormat("B#T=GW{+R\"LVR>D92R", decimalFormatSymbols0);
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      decimalFormat0.setRoundingMode(roundingMode0);
      DecimalFormatSymbols decimalFormatSymbols1 = new DecimalFormatSymbols();
      doubleArray0[1] = (double) (byte)0;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
      Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray((byte)31);
      optimization_DynamicIntArray0.addElement(1250);
      assertEquals(1, optimization_DynamicIntArray0.size());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)31;
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.identity((byte)31, (byte)31);
      double[] doubleArray0 = new double[7];
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      decimalFormat0.setParseIntegerOnly(true);
      DecimalFormat decimalFormat1 = new DecimalFormat("B#T=GW{+R\"LVR>D92R", decimalFormatSymbols0);
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      decimalFormat0.setRoundingMode(roundingMode0);
      DecimalFormatSymbols decimalFormatSymbols1 = new DecimalFormatSymbols();
      doubleArray0[1] = (double) (byte)0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B#T=GW{+R\"LVR>D92R");
      doubleArray0[3] = (double) (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (byte)31;
      doubleArray1[1] = 2.0;
      doubleArray1[2] = (double) (byte)31;
      doubleArray1[3] = (double) (byte)31;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)69;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix((double[][]) null, (byte) (-56), (-1466));
      MockFile mockFile0 = new MockFile("fzqKWx/eWD$", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.forLanguageTag("Matlab: ");
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", (Object[]) null);
      locale0.getDisplayLanguage();
      matrix0.print((PrintWriter) mockPrintWriter0, (-1), (int) (byte)69);
      double[] doubleArray0 = new double[0];
      boolean[] booleanArray0 = new boolean[7];
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = '0';
      charArray0[2] = 's';
      charArray0[3] = ':';
      charArray0[4] = '$';
      charArray0[5] = 'o';
      charArray0[6] = 'g';
      printWriter0.print(charArray0);
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      matrix0.print(printWriter0, 3206, (-1352));
      booleanArray0[5] = true;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      assertEquals(0, doubleArray1.length);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)31;
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.identity((byte)31, (byte)31);
      double[] doubleArray0 = new double[7];
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      decimalFormat0.getDecimalFormatSymbols();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setZeroDigit('N');
      decimalFormatSymbols0.setPercent('K');
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      decimalFormat0.setParseIntegerOnly(false);
      decimalFormatSymbols0.setDigit('K');
      DecimalFormat decimalFormat1 = new DecimalFormat("B#T=GW{+R\"LVR>D92R", decimalFormatSymbols0);
      NumberFormat.getIntegerInstance();
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      decimalFormat0.setRoundingMode(roundingMode0);
      DecimalFormatSymbols decimalFormatSymbols1 = new DecimalFormatSymbols();
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[1] = (double) (byte)31;
      Optimization.solveTriangle(matrix0, doubleArray0, true, (boolean[]) null);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[5] = true;
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumberFormat.getNumberInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormatSymbols decimalFormatSymbols0 = decimalFormat0.getDecimalFormatSymbols();
      DecimalFormatSymbols decimalFormatSymbols1 = new DecimalFormatSymbols();
      decimalFormatSymbols1.setPerMill('p');
      decimalFormatSymbols0.setZeroDigit('N');
      decimalFormatSymbols0.setPercent('N');
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      decimalFormat0.setParseIntegerOnly(false);
      decimalFormatSymbols0.setDigit('N');
      DecimalFormat decimalFormat1 = new DecimalFormat("|EZ}*H){", decimalFormatSymbols1);
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.random(4, 50);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'N';
      doubleArray0[1] = (double) 'N';
      doubleArray0[2] = (double) 'N';
      doubleArray0[3] = (double) 'N';
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
      assertArrayEquals(new double[] {78.0, 78.0, 78.0, 78.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 390.0, 130.0, 260.0}, doubleArray2, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumberFormat.getNumberInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormatSymbols decimalFormatSymbols0 = decimalFormat0.getDecimalFormatSymbols();
      decimalFormatSymbols0.setInfinity("I2!wnr(8 ||N");
      DecimalFormatSymbols decimalFormatSymbols1 = new DecimalFormatSymbols();
      decimalFormatSymbols1.setPerMill('N');
      decimalFormatSymbols0.setPercent('N');
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols1);
      decimalFormat0.setParseIntegerOnly(false);
      decimalFormat0.setParseIntegerOnly(false);
      decimalFormatSymbols1.setDigit('N');
      DecimalFormat decimalFormat1 = new DecimalFormat("I2!wnr(8 ||N", decimalFormatSymbols1);
      NumberFormat.getIntegerInstance();
      decimalFormat1.setDecimalSeparatorAlwaysShown(false);
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, true, (boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)31;
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.identity((byte)31, (byte)31);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = decimalFormat0.getDecimalFormatSymbols();
      DecimalFormatSymbols decimalFormatSymbols1 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setZeroDigit('N');
      decimalFormatSymbols0.setPercent('K');
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      decimalFormat0.setParseIntegerOnly(true);
      decimalFormatSymbols1.setDigit('\"');
      DecimalFormat decimalFormat1 = new DecimalFormat("@WSD#\"c{", decimalFormatSymbols1);
      NumberFormat.getIntegerInstance();
      decimalFormat0.setDecimalSeparatorAlwaysShown(true);
      decimalFormat1.setDecimalFormatSymbols(decimalFormatSymbols0);
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      decimalFormat1.setRoundingMode(roundingMode0);
      DecimalFormatSymbols decimalFormatSymbols2 = new DecimalFormatSymbols();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ZJg+D");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)31;
      doubleArray0[1] = (double) (byte)31;
      doubleArray0[2] = (double) 'N';
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, false, (boolean[]) null);
      assertNotSame(doubleArray1, doubleArray0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5672464197286162
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(503);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      Optimization.DynamicIntArray optimization_DynamicIntArray1 = (Optimization.DynamicIntArray)optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray1.removeAllElements();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray1.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement(0);
      assertEquals(1, optimization_DynamicIntArray0.size());
      
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.size();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.elementAt(0);
      optimization_DynamicIntArray0.removeAllElements();
      assertEquals(0, optimization_DynamicIntArray0.size());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0343946195677223
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.addElement(2019);
      optimization_DynamicIntArray0.addElement(1015);
      optimization_DynamicIntArray0.addElement(2019);
      optimization_DynamicIntArray0.copy();
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.elementAt(2019);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2019
         //
         verifyException("weka.core.Optimization$DynamicIntArray", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2240585736572336
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.addElement(2019);
      optimization_DynamicIntArray0.addElement(1015);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement((-182));
      optimization_DynamicIntArray0.copy();
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.elementAt((-182));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -182
         //
         verifyException("weka.core.Optimization$DynamicIntArray", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)31;
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.identity((byte)31, (byte)31);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      decimalFormat0.getDecimalFormatSymbols();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setZeroDigit('N');
      decimalFormatSymbols0.setCurrencySymbol("B#T=GW{+R\"LVR>D92R");
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      decimalFormat0.setParseIntegerOnly(false);
      decimalFormatSymbols0.setDigit('C');
      DecimalFormat decimalFormat1 = new DecimalFormat("B#T=GW{+R\"LVR>D92R", decimalFormatSymbols0);
      NumberFormat.getIntegerInstance();
      decimalFormat0.setDecimalSeparatorAlwaysShown(true);
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'N';
      doubleArray0[1] = (double) 'C';
      doubleArray0[2] = (-966.0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {78.0, 67.0, (-966.0)}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)31;
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.identity((byte)31, (byte)31);
      double[] doubleArray0 = new double[7];
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      decimalFormat0.getDecimalFormatSymbols();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setZeroDigit('N');
      decimalFormatSymbols0.setCurrencySymbol("B#T=GW{+R\"LVR>D92R");
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      decimalFormat0.setParseIntegerOnly(false);
      decimalFormatSymbols0.setDigit('K');
      DecimalFormat decimalFormat1 = new DecimalFormat("B#T=GW{+R\"LVR>D92R", decimalFormatSymbols0);
      NumberFormat.getIntegerInstance();
      decimalFormat0.setDecimalSeparatorAlwaysShown(true);
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)23;
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.identity((byte)23, (byte)23);
      double[] doubleArray0 = new double[7];
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      decimalFormat0.setParseIntegerOnly(false);
      Locale locale0 = Locale.CHINA;
      DecimalFormatSymbols.getInstance(locale0);
      DecimalFormat decimalFormat1 = new DecimalFormat("B#T=GW{+R\"LVR>D92R", decimalFormatSymbols0);
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      DecimalFormat decimalFormat1 = new DecimalFormat();
      DecimalFormatSymbols decimalFormatSymbols0 = decimalFormat1.getDecimalFormatSymbols();
      decimalFormatSymbols0.setInfinity("|EZ}*H){");
      DecimalFormatSymbols decimalFormatSymbols1 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setDecimalSeparator('F');
      decimalFormatSymbols1.setPerMill('N');
      decimalFormatSymbols0.setPercent('N');
      decimalFormat1.setDecimalFormatSymbols(decimalFormatSymbols1);
      decimalFormatSymbols1.setExponentSeparator("|EZ}*H){");
      decimalFormat1.setParseIntegerOnly(false);
      decimalFormatSymbols1.setDigit('N');
      DecimalFormat decimalFormat2 = new DecimalFormat("|EZ}*H){");
      decimalFormatSymbols1.setInternationalCurrencySymbol("Statistical learning in multiple instance problem");
      DecimalFormat decimalFormat3 = new DecimalFormat("|EZ}*H){", decimalFormatSymbols1);
      decimalFormat2.setDecimalSeparatorAlwaysShown(false);
      decimalFormat2.setMinimumFractionDigits(3);
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols1);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      decimalFormat2.setRoundingMode(roundingMode0);
      DecimalFormatSymbols decimalFormatSymbols2 = new DecimalFormatSymbols();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[0];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 3);
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, false, (boolean[]) null);
      assertEquals(0, doubleArray1.length);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|EZ}*H){");
      char[] charArray0 = new char[1];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      charArray0[0] = 'V';
      stringReader0.read(charArray0, 0, 0);
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      stringReader0.skip(756L);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0, 195);
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.random(200, 5);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 195;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      Random.setNextRandom(0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8249506629220404
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)31;
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.identity((byte)31, (byte)31);
      double[] doubleArray0 = new double[7];
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      decimalFormat0.getDecimalFormatSymbols();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setZeroDigit('N');
      decimalFormatSymbols0.setCurrencySymbol("B#T=GW{+R\"LVR>D92R");
      decimalFormatSymbols0.setMonetaryDecimalSeparator('R');
      decimalFormatSymbols0.setPercent('K');
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      decimalFormat0.setParseIntegerOnly(false);
      decimalFormatSymbols0.setDigit('K');
      DecimalFormat decimalFormat1 = new DecimalFormat("B#T=GW{+R\"LVR>D92R", decimalFormatSymbols0);
      NumberFormat.getIntegerInstance();
      decimalFormat0.setDecimalSeparatorAlwaysShown(true);
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      decimalFormat0.setRoundingMode(roundingMode0);
      Optimization.solveTriangle(matrix0, doubleArray0, true, (boolean[]) null);
      Optimization.solveTriangle(matrix0, doubleArray0, false, (boolean[]) null);
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(411);
      optimization_DynamicIntArray0.addElement((-270));
      assertEquals(1, optimization_DynamicIntArray0.size());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.size();
      boolean boolean0 = true;
      weka.core.matrix.Matrix.random(200, 5);
      double[] doubleArray0 = new double[3];
      boolean boolean1 = true;
      boolean boolean2 = true;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.2795643472768354
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(14);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement(821);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement(14);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement(821);
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.addElement(14);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(821);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.getRevision();
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
}
