/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 16:30:54 GMT 2020
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1125817740998791
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("kd");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("88a`h6-.XLk");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("kd");
      lovinsStemmer0.stem("+,B^&G|tf");
      lovinsStemmer0.stemString("p:$wV^z&4(");
      String[] stringArray0 = new String[4];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("!zH4xgcy.4UDV");
      lovinsStemmer0.stemString("2FS");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("machine learnpex");
      lovinsStemmer0.stem("+,b^&g|tf");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("metr");
      lovinsStemmer0.stem("PDF");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0677453861799158
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("$Revision: ~034 $");
      lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it vol and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("$revision: ~034 $");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer2.stemString("iev");
      assertEquals("ief", string2);
      
      lovinsStemmer1.stemString("ishness");
      String string3 = lovinsStemmer1.stem("Median (doubles): ");
      assertEquals("median (doubles): ", string3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1581277843644817
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("kd");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      String string0 = lovinsStemmer0.stemString("88a`h6-.XLk");
      assertEquals("88`h6-.xlk", string0);
      
      lovinsStemmer0.stem("kd");
      lovinsStemmer0.stemString("kd");
      lovinsStemmer0.stem("+,B^&G|tf");
      lovinsStemmer0.stemString("p:$wV^z&4(");
      String[] stringArray0 = new String[4];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("!zH4xgcy.4UDV");
      lovinsStemmer0.stemString("2FS");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("2FS");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("antiher");
      String string2 = lovinsStemmer0.stem("iev");
      assertEquals("ief", string2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2120244579911938
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Get flag -fL: ");
      assertEquals("ges flag -fl: ", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("YJ7v<.3SopsL-O");
      String string2 = lovinsStemmer1.stemString("&$f'4WF}");
      assertEquals("&$f'4wf}", string2);
      
      String string3 = lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string3);
      
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("olv");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("ate");
      String string4 = lovinsStemmer0.getRevision();
      assertEquals("8034", string4);
      
      String string5 = lovinsStemmer1.stemString("8034");
      assertEquals("8034", string5);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.148537466351077
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("zn2ruset");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("zn2ruses");
      lovinsStemmer0.stemString("ically");
      lovinsStemmer0.stemString("zn2ruses");
      lovinsStemmer0.stem("2OU");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ically";
      stringArray0[1] = "lovinsstemmertex";
      stringArray0[2] = "2OU";
      stringArray0[3] = "zn2ruses";
      stringArray0[4] = "zn2ruset";
      stringArray0[5] = "zn2ruset";
      stringArray0[6] = "ical";
      stringArray0[7] = "zn2ruset";
      stringArray0[8] = "The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("zn2ruses");
      String string1 = lovinsStemmer0.stemString("N<Ap<\"IxpNA~m");
      assertEquals("n<ap<\"ixpn~m", string1);
      
      lovinsStemmer0.stemString("ical");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      lovinsStemmer0.globalInfo();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1075526617211047
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("$Revision: 8034 $");
      lovinsStemmer0.stem("iz)tSonal");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("iz)tson");
      lovinsStemmer0.stemString("iz)tson");
      lovinsStemmer0.stem("$Revision: 8034 $");
      lovinsStemmer0.stemString("");
      String[] stringArray0 = new String[2];
      lovinsStemmer0.stemString("Gq");
      lovinsStemmer0.stem("$revis: 8034 $");
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("$revision: 8034 $");
      assertEquals("$revis: 8034 $", string0);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("=Sp<Xsd<6*Nc");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("EDITOR");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("iz)tson");
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("icity");
      assertEquals("ic", string2);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0541471744202968
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("$Revision: 8034 $");
      lovinsStemmer0.stem("iz)tSonal");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("iz)tson");
      lovinsStemmer0.stemString("iz)tson");
      lovinsStemmer0.stem("$Revision: 8034 $");
      lovinsStemmer0.stemString("");
      String[] stringArray0 = new String[2];
      lovinsStemmer0.stemString("Gq");
      String string0 = "aM";
      lovinsStemmer0.stem("$revis: 8034 $");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("$revision: 8034 $");
      lovinsStemmer0.stemString("6BBO_p");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.060383706564867
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("$Revision: ~034 $");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("$revision: ~034 $");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "$Revision: ~034 $";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("[[olEH]bM<eDT");
      lovinsStemmer0.stemString("#<N#B");
      lovinsStemmer0.stemString("W`57;A,7+IbM");
      lovinsStemmer0.stem("luc");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("end");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string2);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("The Mathematical Reviews number.");
      lovinsStemmer0.stemString(" njlx5I_M^c9E");
      String string3 = lovinsStemmer0.stemString(" njlx5I_M^c9E");
      assertEquals(" njlx5_m^c9e", string3);
      
      String string4 = lovinsStemmer0.stem("$revision: ~034 $");
      assertEquals("$revision: ~034 $", string4);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2040515278924688
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("Sorted array with NaN (doubles): ");
      assertEquals("sort arra with nan (doubl): ", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Sorted array with NaN (doubles): ";
      stringArray0[1] = "8034";
      stringArray0[2] = "sort arra with nan (doubl): ";
      stringArray0[3] = "sort arra with nan (doubl): ";
      stringArray0[4] = "Sorted array with NaN (doubles): ";
      stringArray0[5] = "sort arra with nan (doubl): ";
      stringArray0[6] = "ik+|U";
      stringArray0[7] = "sort arra with nan (doubl): ";
      stringArray0[8] = "Sorted array with NaN (doubles): ";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String[] stringArray1 = new String[9];
      stringArray1[0] = "8034";
      stringArray1[8] = "sort arra with nan (doubl): ";
      lovinsStemmer0.toString();
      stringArray1[2] = "sort arra with nan (doubl): ";
      stringArray1[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[5] = "school";
      stringArray1[6] = "8034";
      lovinsStemmer0.stemString("A link to a p8stscript file.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("dex");
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.stemString("sort arra with nan (doubl): ");
      assertEquals("sort ar with nan (doubl): ", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1823041680122817
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stem("aical");
      lovinsStemmer1.stemString("jo\"MK;b,");
      lovinsStemmer1.stemString("intyz");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("1993");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1306711948643042
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("$RevTision: 8034 $");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem(" y");
      lovinsStemmer0.stemString("Cff=Ienq[kf");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("h{^e%ZdoCvkwJ");
      lovinsStemmer0.stemString("$RevTision: 8034 $");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[0] = "$RevTision: 8034 $";
      stringArray0[2] = "$revtis: 8034 $";
      stringArray0[3] = "p9vWvh}";
      stringArray0[4] = "h{^e%zdocvkwj";
      stringArray0[6] = "h{^e%zdocvkwj";
      stringArray0[7] = "r*F/cz8OoOu*W0a![";
      stringArray0[8] = "h{^e%zdocvkwj";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString(" y");
      lovinsStemmer0.stemString("Title of a book, part of which is being cited. See the LaTeX book for how to type titles. For book entries, usethe title feld istead");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("titl of a book, part of which is being cit. se th latic book for how to typ titl. for book entr, useth titl feld istead");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.067285493028481
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("$R:v/suion: 803 $");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("R[SIR<T(7L}oPx");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer1.stemString("s8h<?{MMYQty/O|");
      assertEquals("s8h<?{mmyqt/o|", string1);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("$R:v/suion: 803 $");
      String string2 = lovinsStemmer1.stemString("$r:v/suion: 803 $");
      assertEquals("$r:v/suion: 803 $", string2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0907035872197488
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string0 = lovinsStemmer1.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.stem("end");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ens";
      stringArray0[1] = "lid";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("kc$`~6oySN(uYvAw");
      lovinsStemmer1.stemString("ement");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stem("70001axtex");
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer1.stem("70001axtex");
      lovinsStemmer2.stemString("end");
      String string3 = lovinsStemmer2.stemString("ur");
      assertEquals("ur", string3);
      
      String string4 = lovinsStemmer1.stem("+R\u0006-9");
      assertEquals("+r\u0006-9", string4);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.177633237149953
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Get flag -f: ");
      assertEquals("ges flag -f: ", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer1.stemString("&$f'4WF}");
      assertEquals("&$f'4wf}", string2);
      
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[5] = "wek.cor.stemmer.lovinsstemmer";
      stringArray0[6] = "Get flag -f: ";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[1] = "Jq;PL<";
      stringArray1[2] = "Jq;PL<";
      lovinsStemmer0.stem("Jq;PL<");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("M_b,B");
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      String string3 = lovinsStemmer0.stemString("O>P-X\"l?xlDUwEoi*g");
      assertEquals("o>p-x\"l?xlduweo*g", string3);
      
      String string4 = lovinsStemmer1.stem(">a_y}nx?d8de1!r{)yz");
      assertEquals(">a_y}nx?d8de1!r{)ys", string4);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.150644010714647
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "P331M0LT";
      stringArray0[2] = "P331M0LT";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("Any additional information that can help the reader. The first word should be capitalized.");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.stemString("any addit inform that can help th reader. th first word should be capital.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.217509883679811
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[3];
      lovinsStemmer0.stemString("ylYY=r>MZlul/");
      lovinsStemmer0.globalInfo();
      stringArray0[0] = "8034";
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("yly=r>mzll/");
      lovinsStemmer1.stemString("8034");
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0427828950656057
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("$Revision: ~034 $");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("$revision: ~034 $");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      lovinsStemmer0.stemString("Median (doubles): ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("$revision: ~034 $");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it vol and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      lovinsStemmer1.stemString("1nYJ");
      lovinsStemmer0.stem("1nyj");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("1");
      lovinsStemmer0.stem("b4");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer2.stemString("B");
      lovinsStemmer1.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer2.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      lovinsStemmer2.stem("xz");
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1503549654138736
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("gdex");
      lovinsStemmer0.stemString(" {1TZip+HD[0Gg");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString(" {1tzip+hd[0g");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.stemString("8034");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.137559500580129
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("$RevTision: 8034 $");
      String string0 = lovinsStemmer0.stemString("$revtision: 8034 $");
      assertEquals("$revtis: 8034 $", string0);
      
      lovinsStemmer0.stem("$RevTision: 8034 $");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("q01rend");
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("|");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stem("ert");
      assertEquals("ers", string1);
      
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1230852636120985
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("$Revision: 8034 $");
      lovinsStemmer0.stem("iz)tSonal");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("iz)tson");
      lovinsStemmer0.stemString("iz)tson");
      lovinsStemmer0.stem("$Revision: 8034 $");
      lovinsStemmer0.stemString("");
      String[] stringArray0 = new String[2];
      lovinsStemmer0.stemString("Gq");
      lovinsStemmer0.stem("$revis: 8034 $");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("$revision: 8034 $");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("$Revision: 8034 $");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("ishness");
      lovinsStemmer0.toString();
      String string0 = "The Mathematical Reviews number.";
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("edituad");
      lovinsStemmer1.stemString("$revision: 8034 $");
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1125028057977435
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("(zK9zX(X.d_");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer0.stemString("8034et");
      lovinsStemmer1.stem("W");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer2.stem("inism");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.toString();
      String string0 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8034es";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer3.stemString("oidal");
      String string1 = lovinsStemmer2.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1645657820380708
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("648|7zJdf=sD_pH");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("ns");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("MANUAL");
      String string1 = lovinsStemmer1.stemString("\tThe file to process.");
      assertEquals("\tth fil to proces.", string1);
      
      lovinsStemmer0.stemString("ns");
      String string2 = lovinsStemmer1.stemString("MANUAL");
      assertEquals("manu", string2);
      
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer1.stemString("gkqqix");
      assertEquals("gkqqic", string3);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1418807612622128
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "$RevTision: 8034 $";
      stringArray0[2] = "$RevTision: 8034 $";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("$RevTision: 8034 $");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("Development of a stemming algorithm");
      String string1 = lovinsStemmer1.stemString("Development of a stemming algorithm");
      assertEquals("developm of a stem algorithm", string1);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("<");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("T1TAR|7]x0[J!q ,dM");
      lovinsStemmer1.getTechnicalInformation();
      String string2 = lovinsStemmer0.stem("cid");
      assertEquals("cis", string2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1510346808504979
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("uCu");
      lovinsStemmer1.stemString("wek.cor.stemmer.lovinsstemmer");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("11*");
      lovinsStemmer0.stemString("11*");
      lovinsStemmer0.stemString("um");
      lovinsStemmer1.stemString("uad");
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer0.stemString("antialness");
      assertEquals("anti", string2);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1267294150810778
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("UwL $Y^9qR~tj{(");
      String[] stringArray0 = new String[3];
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("ealy");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("rYt@n");
      assertEquals("rys@n", string0);
      
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1276652835175176
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("!nW");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("!nW");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stem("kd");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("kd");
      lovinsStemmer0.stemString("ancies");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.13482774178327
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("Q=/+QE&&*");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "Q=/+QE&&*";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.stemString("=SbkN");
      lovinsStemmer0.stem("aM");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("A&ray-Dimensions of 'new String[,][4][]': ");
      assertEquals("a&ray-dimens of 'new string[,][4][]': ", string1);
      
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("umpt");
      assertEquals("um", string3);
      
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("Q=/+QE&&*");
      lovinsStemmer0.stemString("9K");
      String string4 = lovinsStemmer0.stem("A&ray-Dimensions of 'new String[,][4][]': ");
      assertEquals("a&ray-dimensions of 'new string[,][4][]': ", string4);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1459894915787072
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "$RevTision: 8034 $";
      stringArray0[2] = "$RevTision: 8034 $";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("B4,%hlkQshMBTr");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("$RevTision: 8034 $");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("$RevTision: 8034 $");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("d8laDd");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.2716864995094157
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("6>s4~ZV_3");
      assertEquals("6>s4~zv_3", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("enctex");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("lid");
      assertEquals("lis", string2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0995026151288394
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("anced");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("An annotation. It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.");
      lovinsStemmer0.stemString("Bled, Slovenia");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("lux");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("Bled, Slovenia");
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9834179261248782
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("$RevTision: 8034 $");
      lovinsStemmer0.stemString("otide");
      lovinsStemmer0.stem("eouslux");
      String string0 = lovinsStemmer0.stemString("Proceeding of the Sixteenth International Conference on Machine Learning");
      assertEquals("proceed of th sixteenth intern confer on mach learn", string0);
      
      lovinsStemmer0.stemString("icatiow{Gn");
      String string1 = lovinsStemmer0.stemString("qIZLGtr&cHv~.");
      assertEquals("qizlgtr&chv~.", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.092978955260574
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("$RevTision: 8034 $");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("?y");
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.stemString("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$RevTision: 8034 $";
      stringArray0[1] = "$revtision: 8034 $";
      stringArray0[2] = "a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray0[3] = "";
      stringArray0[4] = "a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      lovinsStemmer0.stemString("r*F/cz8OoOu*W0a![");
      lovinsStemmer0.stemString("her");
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string2);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("uv5dbex");
      String string3 = lovinsStemmer0.stemString("vmkEL/eaU,D");
      assertEquals("vmkel/eau,d", string3);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9532572422204091
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("$RevTision: 8034 $");
      lovinsStemmer0.stemString("otide");
      String string0 = lovinsStemmer0.stem("eouslux");
      assertEquals("eousluc", string0);
      
      String string1 = lovinsStemmer0.stemString("Proceeding of the Sixteenth International Conference on Machine Learning");
      assertEquals("proceed of th sixteenth intern confer on mach learn", string1);
      
      lovinsStemmer0.stemString("icatiow{Gn");
      String string2 = lovinsStemmer0.stemString("proceed of th sixteenth intern confer on mach learn");
      assertEquals("proceed of th sixteenth intern confer on mach learn", string2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1491912758819582
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("iz)tSonal");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("CROSSREF");
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.stem("ifverid");
      lovinsStemmer0.stemString("ons");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ons";
      stringArray0[1] = "";
      stringArray0[2] = "ifverid";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("iz)tson");
      lovinsStemmer0.stem("ward");
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("Can't construct a path to file relative to user dir.");
      assertEquals("can't construc a path to fil rel to user dir.", string1);
      
      lovinsStemmer0.stemString("on");
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.getRevision();
      String string3 = lovinsStemmer0.stemString("{[9");
      assertEquals("{[9", string3);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string4 = lovinsStemmer0.stem("CROSSREF");
      assertEquals("crossref", string4);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.115724419700855
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("sY%zxQ");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("pexdex");
      assertEquals("pexdic", string0);
      
      lovinsStemmer0.stemString("An annotation. It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.");
      lovinsStemmer1.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1319579917777067
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("anced");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("iveness");
      lovinsStemmer0.stemString("iv");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("weka.core.stemmers.lovinsstemmerex");
      lovinsStemmer2.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "An abstract of the work.";
      stringArray0[1] = "weka.core.stemmers.lovinsstemmerex";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0995026151288394
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("anced");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("An annotation. It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.");
      assertEquals("an annot. it is not us by th standard bibliograph styl, but may be us by other that produc an annot bibliograph.", string1);
      
      lovinsStemmer0.stemString("Y_eWK");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("Q");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "An annotation. It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.";
      stringArray0[1] = "";
      stringArray0[2] = "q";
      stringArray0[3] = "";
      stringArray0[4] = "q";
      stringArray0[5] = "ical";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("iefond");
      assertEquals("iefons", string2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1718518869774917
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("vad");
      lovinsStemmer0.stemString("vas");
      lovinsStemmer0.stemString("vad");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "vad";
      stringArray0[1] = "%dlpjuydiv#ix";
      stringArray0[2] = "vad";
      stringArray0[3] = "vas";
      stringArray0[4] = "vas";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("al");
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("vas");
      lovinsStemmer0.stemString("%dlpjuydiv#her");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.160579653174331
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[3];
      String string0 = lovinsStemmer0.stemString("ylYY=r>MZlul/");
      assertEquals("yly=r>mzll/", string0);
      
      lovinsStemmer0.globalInfo();
      stringArray0[0] = "8034";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("pand");
      assertEquals("pans", string3);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0394151749763916
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("$Revision: ~034 $");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("$revision: ~034 $");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      lovinsStemmer0.stemString("Median (doubles): ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("$revision: ~034 $");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.ax");
      lovinsStemmer1.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.erid");
      lovinsStemmer1.stemString("z},{gERxEu^fG|rAO");
      lovinsStemmer0.stem("luc");
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.2099888987689733
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("1/v,+");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String string0 = lovinsStemmer1.stemString("ifve");
      lovinsStemmer1.stemString("ax");
      lovinsStemmer1.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "ifve";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "ax";
      stringArray0[5] = "Get flag -f: ";
      stringArray0[6] = "Get flag -f: ";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("end");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.122998968871231
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("anced");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("An annotation. It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.");
      lovinsStemmer0.stemString("anced");
      lovinsStemmer0.stemString("an annot. it is not us by th standard bibliograph styl, but may be us by other that produc an annot bibliograph.");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.stemString("cid");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.074248342491122
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("$Revision: 8034 $");
      String string0 = lovinsStemmer0.stem("iz)tTonal");
      assertEquals("iz)tton", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "iz)tTonal";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem("}M|>BFOIbGg");
      String string2 = lovinsStemmer0.stemString("pex");
      assertEquals("pic", string2);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string3 = lovinsStemmer1.stemString("}m|>bfoibg");
      assertTrue(string3.equals((Object)string1));
      
      String string4 = lovinsStemmer1.stem("!Ove?N>4Eyh3URDZ");
      assertEquals("!ove?n>4eyh3urdz", string4);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1421431791224685
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("kd");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("88a`h6-.XLk");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("kd");
      lovinsStemmer0.stem("+,B^&G|tf");
      lovinsStemmer0.stemString("p:$wV^z&4(");
      String[] stringArray0 = new String[4];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("!zH4xgcy.4UDV");
      lovinsStemmer0.stemString("2FS");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("machine learnpex");
      assertEquals("mach learnpic", string1);
      
      lovinsStemmer0.stem("+,b^&g|tf");
      lovinsStemmer0.stem("?,w,pQg!");
      String string2 = lovinsStemmer0.stem("ancial");
      assertEquals("anc", string2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0593905505010173
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("ence");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("enc");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("q01rensrud");
      lovinsStemmer1.stemString("enc");
      LovinsStemmer.main(stringArray0);
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.7905698620453724
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("lovinsstemmerax");
      assertEquals("lovinsstemmerac", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.2123776128222228
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "Q=/+QE&&*";
      stringArray0[2] = "Q=/+QE&&*";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("eousert");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer4.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.291566313453444
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "IG,%S";
      stringArray0[1] = "k{Hz30q(1{$Cl{";
      stringArray0[2] = "8034lud";
      stringArray0[3] = "The volume of a journal or multi-volume book.";
      stringArray0[4] = "mit";
      stringArray0[5] = "qe^K*;E;4";
      stringArray0[6] = "8034yt";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("qe^K*;E;4");
      String string0 = lovinsStemmer0.stem("");
      lovinsStemmer0.stem("mit");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1482230373756015
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Get flag -f: ");
      assertEquals("ges flag -f: ", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("&$f'4WF}");
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      String[] stringArray0 = new String[24];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[5] = "wek.cor.stemmer.lovinsstemmer";
      stringArray0[6] = "Get flag -f: ";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[1] = "Jq;PL<";
      stringArray1[2] = "Jq;PL<";
      stringArray1[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[4] = "An annotation. It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("3jnhS%3nU*xiX5fy");
      LovinsStemmer.main(stringArray1);
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1177593915680966
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("UwL $Y^9qR~tj{(");
      String[] stringArray0 = new String[3];
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("lid");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("rYt@n");
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.stemString("eously");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("lid");
      lovinsStemmer1.stemString("eous");
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("ially");
      LovinsStemmer.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.127418601572013
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("The month in which the work was published or, for an unpublished work, in which it was written. You should use the standard three-letter abbreviation, as described in Appendix B.1.3 of the LaTeX book.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1262903298790277
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("i)tTon^l");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("i)tton^l");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3054142551851817
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("Q=/+QE&&*");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "Q=/+QE&&*";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.stemString("=SbkN");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1196140076029166
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("anced");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("An annotation. It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.");
      lovinsStemmer0.stemString("anced");
      lovinsStemmer0.stemString("Use this type when nothing else fits.");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Jq;PL<";
      stringArray0[1] = "An annotation. It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.";
      stringArray0[2] = "anced";
      stringArray0[3] = "Use this type when nothing else fits.";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[1] = "An annotation. It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.";
      LovinsStemmer.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1290910935331566
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Get flag -f: ");
      assertEquals("ges flag -f: ", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[5] = "wek.cor.stemmer.lovinsstemmer";
      stringArray0[6] = "Get flag -f: ";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[1] = "Jq;PL<";
      stringArray1[2] = "Jq;PL<";
      stringArray1[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[4] = "An annotation. It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.";
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("nesses");
      assertEquals("nes", string2);
      
      LovinsStemmer.main(stringArray1);
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string3 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      LovinsStemmer.main(stringArray1);
      String string4 = lovinsStemmer1.stemString("");
      assertFalse(string4.equals((Object)string2));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0590406435126878
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "IG,%S";
      stringArray0[1] = "k{Hz30q(1{$Cl{";
      stringArray0[2] = "8034lud";
      stringArray0[3] = "The volume of a journal or multi-volume book.";
      stringArray0[4] = "8034lud";
      stringArray0[5] = "qe^K*;E;4";
      stringArray0[6] = "8034yt";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("");
      lovinsStemmer0.stem("8034lud");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0862582185479221
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("MxdPyQ*nAVX");
      assertEquals("mxdpyq*navx", string0);
  }
}
