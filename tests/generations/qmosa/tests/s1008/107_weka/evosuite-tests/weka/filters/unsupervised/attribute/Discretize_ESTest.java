/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 02:48:17 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.975006424044347
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 7);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      Attribute attribute0 = new Attribute((String) null);
      Object object0 = new Object();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)87;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instances0.listIterator();
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0627299875428027
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 7);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null);
      Object object0 = new Object();
      attribute0.value(7);
      Attribute attribute1 = new Attribute("@data", arrayList1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)87;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.parallelStream();
      arrayList0.add(attribute0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "6~xum.UG[p.");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "n+");
      instances0.listIterator();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)87);
      discretize0.input(binarySparseInstance0);
      discretize0.convertInstance(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4061887407480635
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Q]O.B.I&l$>b<0bo", arrayList0, 6);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Q]O.B.I&l$>b<0bo", arrayList1);
      Attribute.typeToString((-2705));
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("");
      arrayList0.listIterator();
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      AllFilter allFilter2 = new AllFilter();
      AllFilter allFilter3 = new AllFilter();
      AllFilter allFilter4 = new AllFilter();
      AllFilter allFilter5 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      discretize0.input((Instance) null);
      // Undeclared exception!
      try { 
        multiFilter0.getFilter(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 0;
      discretize0.m_NumBins = 0;
      discretize0.m_UseBinNumbers = true;
      discretize0.getCapabilities();
      discretize0.useBinNumbersTipText();
      discretize0.getUseBinNumbers();
      System.setCurrentTimeMillis(0);
      discretize0.m_UseEqualFrequency = true;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3168.732717061303);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance((-3168.732717061303), doubleArray0);
      denseInstance0.copy();
      // Undeclared exception!
      try { 
        discretize0.convertInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = true;
      discretize0.getOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|");
      SparseInstance sparseInstance0 = new SparseInstance(66);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      sparseInstance1.setWeight(66);
      // Undeclared exception!
      try { 
        binarySparseInstance0.toString((Attribute) null, 66);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.121201249937038
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Q]O.B.Il$>b<0bo", arrayList0, 6);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Q]O.B.Il$>b<0bo", arrayList1);
      Object object0 = new Object();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      arrayList0.add(attribute0);
      arrayList1.add("");
      Instances instances1 = new Instances(instances0, 1);
      Discretize discretize0 = new Discretize("");
      instances0.clear();
      Instances instances2 = new Instances(instances0, 2423);
      MockRandom mockRandom0 = new MockRandom(2L);
      double[] doubleArray0 = new double[2];
      SparseInstance sparseInstance0 = new SparseInstance((-1278.93011148), doubleArray0);
      sparseInstance0.toStringNoWeight((-1717986916));
      instances0.add((Instance) sparseInstance0);
      Instances instances3 = new Instances("LXh%NKO+s[i;N{hX", arrayList0, 6);
      instances3.spliterator();
      Instances instances4 = new Instances(instances2, 2423);
      instances0.deleteWithMissing((-1804));
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList2.forEach(consumer0);
      discretize0.setInputFormat(instances4);
      discretize0.setInputFormat(instances3);
      discretize0.batchFinished();
      SparseInstance sparseInstance1 = new SparseInstance(2996);
      boolean boolean0 = discretize0.input(sparseInstance1);
      assertFalse(discretize0.isNewBatch());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("dr_9#T|on[{");
      discretize0.setMakeBinary(true);
      discretize0.getMakeBinary();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.getCutPoints(1024);
      discretize0.invertSelectionTipText();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.getInvertSelection();
      discretize0.attributeIndicesTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1024);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9780714584265757
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Q]O.B.Il$>b<0bo", arrayList0, 6);
      Instances instances1 = new Instances("Nominal attributes", arrayList0, 6);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(".arff", arrayList1);
      Attribute attribute1 = new Attribute("qWp+%f,", "D");
      attribute1.indexOfValue("@attribute");
      arrayList0.add(attribute1);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(attribute0);
      arrayList0.add(attribute1);
      arrayList0.stream();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.clear();
      arrayList1.add("zVTw>xBt`p| NyC");
      Instances instances2 = new Instances(instances1, 3);
      Instances instances3 = new Instances(instances1, 2);
      Instances instances4 = new Instances(instances3, 2);
      Discretize discretize0 = new Discretize();
      instances1.spliterator();
      Instances instances5 = new Instances(instances4, (-1400));
      Instances instances6 = new Instances(instances0, 77);
      instances1.deleteStringAttributes();
      discretize0.setInputFormat(instances6);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "string";
      stringArray0[2] = "qWp+%f,";
      stringArray0[3] = "@data";
      stringArray0[4] = "@attribute";
      stringArray0[5] = "@data";
      stringArray0[6] = "qWp+%f,";
      stringArray0[7] = "@data";
      stringArray0[8] = "aP[Df}>h]tH(](gdz%o";
      discretize0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'qWp+%f,' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1049471293850557
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 70);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      arrayList1.parallelStream();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("MvY|(uc3", protectedProperties1);
      arrayList1.add(attribute0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) arrayList2, locale_FilteringMode0);
      arrayList0.add(attribute0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList1.add(attribute0);
      arrayList1.stream();
      Instances instances1 = new Instances(instances0, 3);
      Instances instances2 = new Instances(instances0, 2);
      attribute0.equalsMsg(protectedProperties0);
      Discretize discretize0 = new Discretize();
      instances1.spliterator();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList2.forEach(consumer0);
      discretize0.setInputFormat(instances1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      SparseInstance sparseInstance0 = new SparseInstance(6);
      discretize0.input(sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.246022341854547
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 70);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      arrayList1.parallelStream();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("MvY|(uc3", protectedProperties1);
      arrayList1.add(attribute0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) arrayList2, locale_FilteringMode0);
      Attribute attribute1 = new Attribute("@relation", list0);
      arrayList0.add(attribute1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList1.add(attribute1);
      arrayList1.stream();
      Instances instances1 = new Instances(instances0, 40);
      Discretize discretize0 = new Discretize();
      instances0.spliterator();
      Instances instances2 = new Instances(instances1, 2);
      discretize0.setInputFormat(instances1);
      Instances instances3 = new Instances(instances2, 2);
      instances2.deleteStringAttributes();
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "relational";
      stringArray0[1] = "@attribute";
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      discretize0.calculateCutPoints();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.05592522077561
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 7);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null);
      Object object0 = new Object();
      Attribute attribute1 = new Attribute("numeric", arrayList1);
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)87;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.parallelStream();
      arrayList0.add(attribute0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "integer");
      instances0.listIterator();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
      
      boolean boolean0 = discretize0.batchFinished();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.091939703917201
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      SystemInUtil.addInputLine("Q]O.B.Il$>b<0bo");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, (byte)21);
      instances0.compactify();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("@data");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(attribute0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "BxT92{-tp~.^%K}");
      arrayList1.add(".bsi");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)21;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Instances instances1 = new Instances((String) null, arrayList0, 0);
      Discretize discretize0 = new Discretize();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances2 = new Instances(instances1, 1);
      Instances instances3 = new Instances(instances1, 1);
      discretize0.setInputFormat(instances2);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1302569367369952
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byteArray0[2] = (byte)21;
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList1, 7);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null);
      Object object0 = new Object();
      Attribute attribute1 = new Attribute("numeric", arrayList2);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      arrayList1.add(attribute0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "relational");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@end");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      arrayList2.add("nVTK-@b2p=p`}");
      instances0.listIterator();
      Instances instances1 = new Instances(instances0);
      Discretize discretize0 = new Discretize();
      Instances instances2 = new Instances(instances1, 0, 0);
      Instances instances3 = new Instances(instances1, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances3.add((Instance) binarySparseInstance0);
      discretize0.setInputFormat(instances3);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4);
      double[] doubleArray0 = new double[1];
      binarySparseInstance1.s_numericAfterDecimalPoint = 1;
      SparseInstance sparseInstance0 = new SparseInstance(1902.1684, doubleArray0);
      discretize0.input(sparseInstance0);
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.534873438322099
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList1, (byte)20);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("0RL^|I^.3`w", arrayList2);
      arrayList0.add(attribute0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList1.add(attribute0);
      arrayList0.add(attribute0);
      arrayList1.stream();
      arrayList2.clear();
      arrayList2.add(".arff");
      Instances instances1 = new Instances(instances0, (-2100));
      Instances instances2 = new Instances(instances0, (-488));
      Discretize discretize0 = new Discretize();
      instances1.spliterator();
      Instances instances3 = new Instances(instances2, (-488));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      discretize0.setInvertSelection(true);
      arrayList2.forEach(consumer0);
      discretize0.setInputFormat(instances1);
      int int0 = (-1998);
      discretize0.getCutPoints((-1952257859));
      discretize0.getInvertSelection();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(767);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.983795636054818
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[1] = (byte)21;
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList1, 6);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null);
      Object object0 = new Object();
      Attribute attribute1 = new Attribute("numeric", arrayList2);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      arrayList1.add(attribute0);
      arrayList2.add("A:G#'Mm");
      arrayList0.add(attribute0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".bsi");
      arrayList2.add("nVTK-@b2p=p`}");
      Instances instances1 = new Instances(instances0, 2);
      Instances instances2 = new Instances(instances1, 2);
      Discretize discretize0 = new Discretize();
      Instances instances3 = new Instances(instances2, 3795);
      Instances instances4 = new Instances(instances2, 1);
      discretize0.m_NumBins = 0;
      discretize0.setInputFormat(instances4);
      discretize0.batchFinished();
      Discretize discretize1 = new Discretize("string");
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-2095105995));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1025959429841774
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      SystemInUtil.addInputLine("Q]O.B.Il$>b<0bo");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, (byte)21);
      instances0.compactify();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("0RL^|I^.3`w", arrayList1);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(attribute0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "BxT92{-tp~.^%K}");
      arrayList1.add(".bsi");
      Instances instances1 = new Instances(instances0, 4);
      Instances instances2 = new Instances((String) null, arrayList0, 0);
      Discretize discretize0 = new Discretize();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances3 = new Instances(instances2, 1);
      Instances instances4 = new Instances(instances2, 1);
      discretize0.setInputFormat(instances3);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1128652291696746
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Q]O.B.I&l$>b<0bo", arrayList0, 6);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Q]O.B.I&l$>b<0bo", arrayList1);
      arrayList0.add(attribute0);
      arrayList1.add("@relation");
      Discretize discretize0 = new Discretize("");
      arrayList0.listIterator();
      int int0 = 193;
      Instances instances1 = new Instances(instances0, 193);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.getBinRangesString(0);
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0527038136803877
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[1] = (byte)36;
      FileSystemHandling.createFolder(evoSuiteFile0);
      SystemInUtil.addInputLine("Q]O.B.Il$>b<0bo");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList1, 6);
      arrayList0.addAll((Collection<? extends Attribute>) arrayList1);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(".bsi", (byte)36);
      FileSystemHandling.createFolder(evoSuiteFile0);
      Object object0 = new Object();
      Attribute attribute1 = new Attribute("numeric", arrayList2);
      attribute0.isInRange((byte)36);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      arrayList1.add(attribute0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      arrayList0.add(attribute0);
      attribute0.copy("-F");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".bsi");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, false, true);
      instances0.toArray();
      Instances instances1 = new Instances(instances0, 1);
      Discretize discretize0 = new Discretize("");
      Instances instances2 = new Instances(instances0, 0);
      discretize0.setInputFormat(instances2);
      discretize0.batchFinished();
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-1042));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1042
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.123168425011997
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 7);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null);
      Object object0 = new Object();
      Attribute attribute1 = new Attribute("numeric", arrayList1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)87;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "integer");
      instances0.listIterator();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      arrayList1.add((String) null);
      discretize0.input(binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0942989674817407
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 70);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      arrayList1.parallelStream();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("MvY|(uc3", protectedProperties1);
      arrayList1.add(attribute0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) arrayList2, locale_FilteringMode0);
      Attribute attribute1 = new Attribute("@relation", list0);
      arrayList0.add(attribute1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList1.add(attribute1);
      arrayList1.stream();
      Instances instances1 = new Instances(instances0, 3);
      Instances instances2 = new Instances(instances0, 2);
      attribute0.equalsMsg(protectedProperties0);
      Discretize discretize0 = new Discretize();
      instances2.spliterator();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList2.forEach(consumer0);
      discretize0.setInputFormat(instances1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      SparseInstance sparseInstance0 = new SparseInstance(6);
      boolean boolean0 = discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1079537478166976
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Q]O.B.I&l$>b<0bo", arrayList0, 6);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Q]O.B.I&l$>b<0bo", arrayList1);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("");
      arrayList0.listIterator();
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1120.5747185770865, intArray0, 1);
      arrayList0.stream();
      Instances instances1 = new Instances(instances0, 6);
      Discretize discretize1 = new Discretize();
      instances0.spliterator();
      Instances instances2 = new Instances(instances1, (-4256));
      Instances instances3 = new Instances(instances2, (-1840700267));
      instances3.deleteStringAttributes();
      discretize1.setInputFormat(instances3);
      discretize0.findNumBins(0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9166731665848316
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 70);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      arrayList1.parallelStream();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("MvY|(uc3", protectedProperties1);
      arrayList1.add(attribute0);
      Attribute attribute1 = new Attribute("@relation", arrayList2);
      arrayList0.add(attribute1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList1.add(attribute1);
      arrayList1.stream();
      Instances instances1 = new Instances(instances0, 40);
      Discretize discretize0 = new Discretize();
      instances0.spliterator();
      Instances instances2 = new Instances(instances1, 2);
      Instances instances3 = new Instances(instances2, 2);
      instances2.deleteStringAttributes();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.034357353745759
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Q]O.B.I&l$>b<0bo", arrayList0, 6);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("]cFK_/%\"9");
      Attribute attribute0 = new Attribute("Q]O.B.I&l$>b<0bo", arrayList1);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("");
      arrayList0.listIterator();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "unknown attribute type in column ";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "unknown attribute type in column ";
      stringArray1[1] = "unknown attribute type in column ";
      stringArray1[2] = "unknown attribute type in column ";
      stringArray1[3] = "-M";
      stringArray1[4] = "unknown attribute type in column ";
      try { 
        discretize0.setOptions(stringArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(120.1587105983918);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.m_MakeBinary = false;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-545));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      discretize0.getCapabilities();
      Enumeration enumeration0 = new StringTokenizer("weka/core/Capabilities.props", "{Q");
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Q]O.B.I&l$>b<0bo", arrayList0, 6);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("]cFK_/%\"9");
      Attribute attribute0 = new Attribute("Q]O.B.I&l$>b<0bo", arrayList1);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("");
      arrayList0.listIterator();
      Instances instances1 = new Instances(instances0, 193);
      discretize0.setMakeBinary(true);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.108064289718111
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(true);
      int[] intArray0 = new int[0];
      discretize0.setAttributeIndicesArray(intArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*");
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.getCutPoints(2);
      discretize0.makeBinaryTipText();
      discretize0.invertSelectionTipText();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.makeBinaryTipText();
      discretize0.invertSelectionTipText();
      discretize0.getOptions();
      discretize0.getUseBinNumbers();
      boolean boolean0 = discretize0.m_IgnoreClass;
      discretize0.findNumBinsTipText();
      discretize0.getBinRangesString((-530));
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.2293064255849746
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[0];
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.setIgnoreClass(true);
      int[] intArray1 = new int[0];
      discretize0.setAttributeIndicesArray(intArray1);
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*");
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1.3142423871888131;
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.getCutPoints(2);
      discretize0.m_FindNumBins = true;
      discretize0.makeBinaryTipText();
      discretize0.invertSelectionTipText();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.makeBinaryTipText();
      discretize0.invertSelectionTipText();
      discretize0.getOptions();
      discretize0.getUseBinNumbers();
      boolean boolean0 = discretize0.m_IgnoreClass;
      discretize0.findNumBinsTipText();
      discretize0.getBinRangesString((-530));
      discretize0.attributeIndicesTipText();
      discretize0.useBinNumbersTipText();
      assertEquals(1.3142423871888131, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Q]O.B.Il$>b<0bo", arrayList0, 6);
      MockRandom mockRandom0 = new MockRandom();
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      instances0.resampleWithWeights((Random) mockRandom0, booleanArray0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Q]O.B.Il$>b<0bo", arrayList1);
      Object object0 = new Object();
      arrayList0.add(attribute0);
      arrayList1.add("");
      Instances instances1 = new Instances(instances0, 1);
      Discretize discretize0 = new Discretize("");
      instances0.clear();
      Instances instances2 = new Instances(instances0, 2423);
      MockRandom mockRandom1 = new MockRandom(2L);
      double[] doubleArray0 = new double[2];
      SparseInstance sparseInstance0 = new SparseInstance((-1278.93011148), doubleArray0);
      Instances instances3 = new Instances("LXh%NKO+s[i;N{hX", arrayList0, 6);
      instances3.spliterator();
      Instances instances4 = new Instances(instances2, 2423);
      instances0.deleteWithMissing((-1804));
      instances3.retainAll(instances4);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList2.forEach(consumer0);
      discretize0.setInputFormat(instances3);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8147201890239515
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize("u1dK\"@-Y/|}");
      discretize0.listOptions();
      discretize0.setBins((-1046));
      discretize0.getOptions();
      discretize0.m_NumBins = (-1717986916);
      discretize0.getBins();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-1717986916));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.099385592429035
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getBinRangesString(1630);
      Discretize discretize1 = new Discretize("qG%do;9$/O5J;.pna~");
      discretize0.makeBinaryTipText();
      discretize1.desiredWeightOfInstancesPerIntervalTipText();
      discretize1.desiredWeightOfInstancesPerIntervalTipText();
      assertFalse(discretize1.getUseBinNumbers());
      
      discretize1.setUseBinNumbers(true);
      discretize0.binsTipText();
      discretize0.attributeIndicesTipText();
      discretize1.getDesiredWeightOfInstancesPerInterval();
      discretize1.getOptions();
      assertTrue(discretize1.getUseBinNumbers());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.104419928392294
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList1, (byte)20);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("0RL^|I^.3`w", arrayList2);
      arrayList0.add(attribute0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList1.add(attribute0);
      arrayList0.add(attribute0);
      arrayList1.stream();
      arrayList2.clear();
      arrayList2.add(".arff");
      Instances instances1 = new Instances(instances0, (-2100));
      Instances instances2 = new Instances(instances0, (-488));
      Discretize discretize0 = new Discretize();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList3.forEach(consumer0);
      discretize0.setInputFormat(instances1);
      discretize0.m_UseBinNumbers = true;
      discretize0.setInputFormat(instances1);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Q]O.B.I&l$>b<0bo", arrayList0, 6);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Q]O.B.I&l$>b<0bo", arrayList1);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("");
      arrayList0.listIterator();
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 3;
      intArray0[2] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1120.5747185770865, (int[]) null, 1);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      arrayList1.removeAll(set0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.toStringNoWeight();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Q]O.B.I&l$>b<0bo", arrayList0, 6);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Q]O.B.I&l$>b<0bo", arrayList1);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.");
      arrayList0.listIterator();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Discretize discretize0 = new Discretize("9iDY");
      assertFalse(discretize0.getFindNumBins());
      
      arrayList0.listIterator();
      discretize0.m_FindNumBins = true;
      int[] intArray0 = new int[3];
      arrayList1.add("9iDY");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.getDisplayName();
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      arrayList1.removeAll(set0);
      String string0 = discretize0.globalInfo();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SystemInUtil.addInputLine("\tOptimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is set then the -B option will be ignored.");
      Discretize discretize0 = new Discretize();
      int int0 = discretize0.getBins();
      assertEquals(10, int0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 6;
      Instances instances0 = new Instances("Q]O.B.I&l$>b<0bo", arrayList0, 6);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Q]O.B.I&l$>b<0bo", arrayList1);
      Discretize discretize0 = new Discretize("");
      arrayList0.listIterator();
      discretize0.m_FindNumBins = true;
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-25);
      byteArray0[0] = (byte) (-25);
      byte byte1 = (byte)21;
      byteArray0[1] = (byte)21;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.380937795632014
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopies(discretize0, 0);
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) 0;
      discretize0.getRevision();
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.m_UseBinNumbers = true;
      discretize0.findNumBinsTipText();
      String[] stringArray0 = new String[3];
      discretize0.m_UseEqualFrequency = true;
      stringArray0[0] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[2] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      Discretize.main(stringArray0);
      discretize0.getMakeBinary();
      discretize0.setOutputFormat();
      discretize0.getUseEqualFrequency();
      discretize0.setInvertSelection(false);
      discretize0.makeBinaryTipText();
      discretize0.setFindNumBins(true);
      discretize0.getFindNumBins();
      discretize0.makeBinaryTipText();
      discretize0.findNumBinsTipText();
      discretize0.invertSelectionTipText();
      discretize0.findNumBinsTipText();
      discretize0.useEqualFrequencyTipText();
      discretize0.setMakeBinary(false);
      discretize0.invertSelectionTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.attributeIndicesTipText();
      discretize0.findNumBinsTipText();
      discretize0.useBinNumbersTipText();
      String string0 = discretize0.makeBinaryTipText();
      assertEquals("Make resulting attributes binary.", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 6;
      MockRandom mockRandom0 = new MockRandom();
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1212686947470734
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      String[] stringArray1 = new String[5];
      stringArray1[0] = ":2Z`b%n9$C;";
      Filter.runFilter(discretize0, stringArray0);
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      AllFilter allFilter2 = new AllFilter();
      AllFilter allFilter3 = new AllFilter();
      AllFilter allFilter4 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      AllFilter allFilter5 = new AllFilter();
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: java.io.IOException: Simulated exception in System.in).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1212686947470734
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      String[] stringArray1 = new String[5];
      stringArray1[0] = ":2Z`b%n9$C;";
      Filter.runFilter(discretize0, stringArray0);
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      Filter.runFilter(discretize0, stringArray0);
      AllFilter allFilter2 = new AllFilter();
      AllFilter allFilter3 = new AllFilter();
      AllFilter allFilter4 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      AllFilter allFilter5 = new AllFilter();
      Filter.runFilter(allFilter1, stringArray1);
      AllFilter allFilter6 = new AllFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter1.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize("Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.sort((Comparator<? super Attribute>) null);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(128);
      sparseInstance1.setWeight((-327.34215487));
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.isMissing(1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1517.5448276, (int[]) null, 10);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      SparseInstance sparseInstance4 = new SparseInstance((SparseInstance) binarySparseInstance0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize("Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.sort((Comparator<? super Attribute>) null);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(128);
      sparseInstance1.setWeight((-327.34215487));
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1517.5448276, (int[]) null, 10);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1.2, (int[]) null, 25);
      SparseInstance sparseInstance4 = new SparseInstance((SparseInstance) binarySparseInstance0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      String string0 = discretize0.useBinNumbersTipText();
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5197611019057504
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize("&u");
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      discretize0.getOptions();
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize("Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator1);
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "FG%*c";
      stringArray0[2] = "merge";
      stringArray0[3] = "Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[4] = "+inf";
      stringArray0[5] = "uJfg&e@YgF~)bZSF";
      stringArray0[6] = "L.W8HVT,";
      stringArray0[7] = "ttR";
      stringArray0[8] = "<o`/@";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_ClassIndex = (-1958);
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.107291076631567
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 7);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null);
      Object object0 = new Object();
      Attribute attribute1 = new Attribute("numeric", arrayList1);
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)3;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)87;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.parallelStream();
      arrayList0.add(attribute0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "integer");
      instances0.listIterator();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.setUseEqualFrequency(true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "EG9D3";
      stringArray0[1] = "D";
      discretize0.setInvertSelection(true);
      stringArray0[2] = "Cannot handle missing class value!!";
      stringArray0[3] = "l WPbF*'y&BP/b";
      stringArray0[4] = "";
      stringArray0[5] = "EG9D3";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Q]O..I&l$>b<0Zbo", arrayList0, 6);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Q]O..I&l$>b<0Zbo", arrayList1);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("");
      arrayList0.listIterator();
      Instances instances1 = new Instances(instances0, 193);
      discretize0.getFindNumBins();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Specifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)73;
      intArray0[1] = (int) (byte)73;
      intArray0[2] = (int) (byte)73;
      intArray0[3] = 212;
      intArray0[4] = (int) (byte)73;
      intArray0[5] = (int) (byte)73;
      intArray0[6] = (int) (byte)73;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.setOutputFormat();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      String string0 = discretize0.getAttributeIndices();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("74,74,74,213,74,74,74", string0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "QU.ch:]w<GIVK*i";
      stringArray0[1] = "c";
      stringArray0[2] = "Ar-hY)>fk<jD7^Z";
      stringArray0[3] = "6KUD)[eyRvo fCrU!)";
      stringArray0[4] = "Ar-hY)>fk<jD7^Z";
      stringArray0[5] = "hVVey=(X\"$>#F+yNBI";
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1936.649636);
      doubleArray0[1] = (-1936.649636);
      doubleArray0[2] = (-1936.649636);
      doubleArray0[3] = (-1936.649636);
      doubleArray0[4] = (-1936.649636);
      doubleArray0[5] = (-1936.649636);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1936.649636), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      DenseInstance denseInstance1 = new DenseInstance((-1936.649636), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(denseInstance1);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.getInvertSelection();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.823242702131751
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      SystemInUtil.addInputLine("\tOptimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is set then the -B option will be ignored.");
      Discretize.main((String[]) null);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Q]O.B.I&l$>b<0bo", arrayList0, 6);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.parallelStream();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("kb._hG=nAe@M:LNjS13", protectedProperties1);
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("MvY|(uc3", arrayList1);
      arrayList0.add(attribute1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      properties0.entrySet();
      arrayList0.add((Attribute) null);
      arrayList0.stream();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Discretize discretize0 = new Discretize("Dg");
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      SystemInUtil.addInputLine("Q]O.B.Il$>b<0bo");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList1, (byte)20);
      Attribute attribute0 = new Attribute("@data");
      Properties properties0 = new Properties();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder(evoSuiteFile0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) protectedProperties1);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("[6;o(!gCKA}RNZS", arrayList2, protectedProperties0);
      Predicate.isEqual((Object) attribute1);
      predicate0.test("");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      arrayList1.removeIf(predicate1);
      FileSystemHandling.setPermissions(evoSuiteFile1, true, false, true);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Discretize discretize0 = new Discretize();
      discretize0.getUseEqualFrequency();
      Instances instances1 = new Instances(instances0);
      instances1.deleteStringAttributes();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.711395681466945
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Discretize discretize0 = new Discretize("u1dK\"@-Y/|}");
      discretize0.m_MakeBinary = true;
      discretize0.setFindNumBins(true);
      discretize0.setBins((-4074));
      discretize0.getOptions();
      discretize0.setBins(1507);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.parallelStream();
      Instances instances0 = new Instances((String) null, arrayList0, 3234);
      // Undeclared exception!
      try { 
        instances0.renameAttribute(35, (String) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 35, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("{of'");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator1);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(754);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SystemInUtil.addInputLine("MvY|(uc3");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMAN;
      Discretize discretize0 = new Discretize();
      discretize0.setBins(6);
      org.evosuite.runtime.Random.setNextRandom((-3628));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getBinRangesString(1630);
      Discretize discretize1 = new Discretize("qG%do;9$/O5J;.pna~");
      discretize0.makeBinaryTipText();
      discretize1.desiredWeightOfInstancesPerIntervalTipText();
      discretize1.desiredWeightOfInstancesPerIntervalTipText();
      discretize1.setUseBinNumbers(true);
      discretize0.binsTipText();
      discretize0.attributeIndicesTipText();
      // Undeclared exception!
      try { 
        discretize1.findNumBins((-689));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)21;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      SystemInUtil.addInputLine("Q]O.B.Il$>b<0bo");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList1, 6);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[0];
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.setOutputFormat();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      discretize0.getAttributeIndices();
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("", arrayList0, 4);
      // Undeclared exception!
      try { 
        instances1.meanOrMode((int) (byte) (-121));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range range0 = new Range();
      Discretize discretize0 = new Discretize("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.");
      String string0 = discretize0.getRevision();
      assertEquals("8964", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }
}
