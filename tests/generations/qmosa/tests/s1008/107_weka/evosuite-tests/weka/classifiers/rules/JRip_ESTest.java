/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 02:31:19 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.bayes.net.search.SearchAlgorithm;
import weka.classifiers.functions.SGD;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.ZeroR;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.Tag;
import weka.core.Utils;
import weka.core.matrix.Matrix;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.MiddleOutConstructor;
import weka.core.neighboursearch.balltrees.TopDownConstructor;
import weka.core.tokenizers.WordTokenizer;
import weka.estimators.Estimator;
import weka.estimators.KernelEstimator;
import weka.estimators.MahalanobisEstimator;
import weka.estimators.NormalEstimator;
import weka.estimators.PoissonEstimator;
import weka.filters.Filter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.FRANCE;
      Locale locale2 = Locale.GERMAN;
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale.getISOCountries();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("??", linkedList1, 1110);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      arrayList0.iterator();
      jRip_NumericAntd0.toString();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      ArrayList<String> arrayList2 = new ArrayList<String>();
      locale0.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale locale3 = Locale.KOREAN;
      Locale locale4 = Locale.CHINESE;
      locale1.getExtensionKeys();
      locale0.clone();
      locale3.getUnicodeLocaleKeys();
      Locale locale5 = Locale.CANADA;
      locale4.hasExtensions();
      locale0.getUnicodeLocaleKeys();
      jRip_NumericAntd0.value = (-953.88229334);
      Locale.setDefault(locale1);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      Set<String> set0 = locale3.getUnicodeLocaleAttributes();
      ArrayList<String> arrayList5 = new ArrayList<String>();
      Locale.lookupTag(arrayList0, set0);
      System.setCurrentTimeMillis((-3762L));
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("?? >= NaN", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3300185960211162
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", (List<String>) null, (-58));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.clear();
      arrayList1.add(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList1, 0);
      arrayList1.add(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      instances0.add((Instance) sparseInstance0);
      Attribute attribute1 = new Attribute((String) null, 4);
      jRip_NominalAntd0.splitData(instances0, 2, Double.NaN);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "date", 4, 102);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList1);
      arrayList1.removeIf(predicate0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X{`t?bs,`wfJJeXv_s");
      Attribute attribute0 = new Attribute("X{`t?bs,`wfJJeXv_s", arrayList1, 9);
      arrayList0.add(attribute0);
      jRip0.setMinNo((-1.0));
      Instances instances0 = new Instances("X{`t?bs,`wfJJeXv_s", arrayList0, 5);
      Attribute attribute1 = new Attribute("X{`t?bs,`wfJJeXv_s", instances0);
      arrayList0.add(attribute1);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances1 = decisionTable0.m_dtInstances;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      Instances instances2 = decisionTable1.m_theInstances;
      double double0 = jRip0.getMinNo();
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7646308653001808
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.FRANCE;
      Locale locale2 = Locale.GERMAN;
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("??", linkedList1, 1110);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      locale0.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale locale3 = Locale.KOREAN;
      Locale locale4 = locale2.stripExtensions();
      locale1.getExtensionKeys();
      locale3.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList1, locale_FilteringMode1);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList4, (Collection<Locale>) arrayList1, locale_FilteringMode2);
      Locale locale5 = Locale.ITALIAN;
      locale4.hasExtensions();
      locale0.getUnicodeLocaleKeys();
      jRip_NumericAntd0.value = (double) 1;
      Locale.setDefault(locale1);
      ArrayList<Locale.LanguageRange> arrayList5 = new ArrayList<Locale.LanguageRange>();
      Set<String> set0 = locale3.getUnicodeLocaleAttributes();
      ArrayList<String> arrayList6 = new ArrayList<String>();
      Locale.lookupTag(arrayList0, set0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      System.setCurrentTimeMillis((-3762L));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7646308653001808
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.FRANCE;
      Locale locale2 = Locale.GERMAN;
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("??", linkedList1, 1110);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      locale0.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale locale3 = Locale.KOREAN;
      Locale locale4 = Locale.TRADITIONAL_CHINESE;
      locale1.getExtensionKeys();
      locale3.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList1, locale_FilteringMode1);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList4, (Collection<Locale>) arrayList1, locale_FilteringMode2);
      Locale locale5 = Locale.ITALIAN;
      locale4.hasExtensions();
      locale0.getUnicodeLocaleKeys();
      jRip_NumericAntd0.value = (-953.88229334);
      Locale.setDefault(locale1);
      ArrayList<Locale.LanguageRange> arrayList5 = new ArrayList<Locale.LanguageRange>();
      Set<String> set0 = locale3.getUnicodeLocaleAttributes();
      ArrayList<String> arrayList6 = new ArrayList<String>();
      Locale.lookupTag(arrayList0, set0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      System.setCurrentTimeMillis((-3762L));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      ClassOrder classOrder0 = new ClassOrder();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "yk.'5Ud";
      stringArray0[1] = "IE8=@Fz";
      stringArray0[2] = "5m5\"?9M3=9_5";
      stringArray0[3] = "hcEJLU";
      stringArray0[4] = "Kgbc5bu<Wn4Yv";
      stringArray0[5] = "-";
      stringArray0[6] = "6ya /N%oH}'5X=V'}";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\nGrowing and pruning Revision ...");
      Random.setNextRandom((-1928));
      JRip jRip0 = new JRip();
      Utils.SMALL = (double) (-1928);
      jRip0.setCheckErrorRate(false);
      jRip0.setFolds((-3093));
      jRip0.setFolds((-1928));
      AbstractClassifier.makeCopies(jRip0, 8);
      jRip0.listOptions();
      jRip0.getFolds();
      jRip0.foldsTipText();
      assertEquals((-1928), jRip0.getFolds());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getDebug();
      assertTrue(jRip0.getUsePruning());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Too few positives.";
      stringArray0[1] = "";
      stringArray0[2] = ",P[";
      stringArray0[3] = "iq-vT?.]";
      stringArray0[4] = "jn}F4C* Ng%m";
      stringArray0[5] = "]";
      stringArray0[6] = "-P";
      stringArray0[7] = "8T6'";
      stringArray0[8] = "\nPruning the rule ...";
      jRip0.setOptions(stringArray0);
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("inate", arrayList0, (-2070649111));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "inate");
      Instances instances0 = new Instances(">>[~/PKM,mp-qv0Q[&", arrayList1, 1);
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 0.0;
      ClassOrder classOrder0 = new ClassOrder();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3464.6695320112326, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[3] = (byte) (-72);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      binarySparseInstance0.value(attribute0);
      binarySparseInstance0.setWeight((-2070649111));
      byteArray0[7] = (byte) (-38);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "inate");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip0.foldsTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      JRip jRip0 = new JRip();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      ZeroR zeroR0 = new ZeroR();
      bayesNet1.measureAICScore();
      jRip0.setDebug(true);
      bayesNet1.measureMissingArcs();
      bayesNet0.measureMissingArcs();
      bayesNet0.measureAICScore();
      bayesNet0.measureAICScore();
      bayesNet0.measureMissingArcs();
      BayesNet bayesNet2 = new BayesNet();
      bayesNet2.measureMissingArcs();
      bayesNet2.measureAICScore();
      bayesNet2.measureAICScore();
      bayesNet2.measureMissingArcs();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      bayesNet4.measureMissingArcs();
      NaiveBayesUpdateable naiveBayesUpdateable1 = new NaiveBayesUpdateable();
      bayesNet0.measureAICScore();
      bayesNet1.measureMissingArcs();
      BayesNet bayesNet5 = new BayesNet();
      bayesNet2.measureMissingArcs();
      bayesNet1.measureMissingArcs();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      bayesNet5.measureAICScore();
      bayesNet5.measureMissingArcs();
      BayesNet bayesNet8 = new BayesNet();
      bayesNet8.measureMissingArcs();
      try { 
        jRip0.rulesetForOneClass(2.0, (Instances) null, (-1141.7150973314), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-is=llM-paz^te", arrayList0, (-2070649090));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@end", arrayList1, 1);
      Predicate<Attribute> predicate0 = Predicate.isEqual((Object) arrayList1);
      Predicate<Attribute> predicate1 = predicate0.negate();
      Predicate<Attribute> predicate2 = predicate1.or(predicate0);
      Predicate<Attribute> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) attribute0);
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (double) 3;
      doubleArray0[2] = 3.0;
      Predicate<Object> predicate5 = Predicate.isEqual((Object) attribute0);
      Predicate<Attribute> predicate6 = predicate0.or(predicate5);
      predicate6.negate();
      Predicate<Attribute> predicate7 = predicate0.and(predicate6);
      doubleArray0[5] = (double) 4;
      ClassOrder classOrder0 = new ClassOrder();
      Predicate.isEqual((Object) classOrder0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3464.6695320112326, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      predicate3.and(predicate4);
      ClassOrder classOrder1 = new ClassOrder();
      Filter.makeCopies(classOrder0, 2);
      Predicate.isEqual((Object) classOrder1);
      predicate4.or(predicate4);
      Predicate.isEqual((Object) predicate5);
      ClassOrder classOrder2 = new ClassOrder();
      Predicate.isEqual((Object) classOrder2);
      predicate3.negate();
      predicate7.negate();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances1 = decisionTable0.m_theInstances;
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 3, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-install-package", (List<String>) null, (-2070649111));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("{", arrayList1, 1);
      Predicate<Attribute> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Attribute> predicate1 = predicate0.negate();
      Predicate<Attribute> predicate2 = predicate1.or(predicate0);
      Predicate<Attribute> predicate3 = predicate0.and(predicate0);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) attribute0);
      Predicate<Object> predicate5 = predicate4.negate();
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (double) 1;
      doubleArray0[2] = 3464.6695320112326;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) (-2070649111);
      ClassOrder classOrder0 = new ClassOrder();
      Predicate.isEqual((Object) classOrder0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3464.6695320112326, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      predicate5.or(predicate4);
      ClassOrder classOrder1 = new ClassOrder();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) classOrder1);
      Predicate<Attribute> predicate7 = predicate2.and(predicate0);
      Predicate<Attribute> predicate8 = predicate3.negate();
      Object object0 = new Object();
      predicate6.test(object0);
      Predicate<Attribute> predicate9 = predicate7.negate();
      predicate8.negate();
      Predicate<Object> predicate10 = Predicate.isEqual((Object) attribute0);
      predicate6.or(predicate10);
      arrayList1.removeIf(predicate9);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, (-2.070649111E9), 1.8434708657677858);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-install-package", (List<String>) null, (-2070649111));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("{", arrayList1, 1);
      Predicate<Attribute> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Attribute> predicate1 = predicate0.negate();
      Predicate<Attribute> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) attribute0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate3.and(predicate4);
      Predicate<Object> predicate5 = predicate3.negate();
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 3464.6695320112326;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) (-2070649111);
      ClassOrder classOrder0 = new ClassOrder();
      Predicate.isEqual((Object) classOrder0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3464.6695320112326, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      predicate5.or(predicate3);
      ClassOrder classOrder1 = new ClassOrder();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) classOrder1);
      Predicate<Attribute> predicate7 = predicate2.and(predicate0);
      Predicate<Attribute> predicate8 = predicate0.negate();
      Object object0 = new Object();
      predicate6.test(object0);
      Predicate<Attribute> predicate9 = predicate7.negate();
      predicate8.negate();
      Predicate<Object> predicate10 = Predicate.isEqual((Object) attribute0);
      predicate6.or(predicate10);
      arrayList1.removeIf(predicate9);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, (-2.070649111E9), 14.818985464241129);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-istal-pckWage", arrayList0, (-2070649111));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("{", arrayList1, 1);
      Predicate<Attribute> predicate0 = Predicate.isEqual((Object) "-istal-pckWage");
      predicate0.negate();
      Predicate<Attribute> predicate1 = predicate0.negate();
      Predicate<Attribute> predicate2 = predicate0.or(predicate1);
      Predicate<Attribute> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate5 = predicate4.negate();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      Predicate<Object> predicate6 = predicate4.or(predicate5);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate1);
      Predicate<Attribute> predicate8 = predicate0.and(predicate3);
      Predicate<Attribute> predicate9 = predicate1.negate();
      Predicate<Object> predicate10 = predicate6.and(predicate7);
      Predicate<Attribute> predicate11 = predicate9.and(predicate10);
      predicate8.negate();
      Predicate<Attribute> predicate12 = predicate0.and(predicate9);
      predicate12.or(predicate11);
      predicate4.negate();
      Predicate<Object> predicate13 = predicate4.or(predicate6);
      predicate13.negate();
      arrayList1.removeIf(predicate12);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_RipperRule0.setConsequent((-913.4102));
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", arrayList1, 122);
      arrayList1.add("Nkx'stY84)!|Eb`@+R");
      arrayList1.removeAll(arrayList0);
      attribute0.setStringValue("y8Of$Qf");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-S";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -S option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", 0);
      attribute0.copy();
      attribute0.indexOfValue("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      attribute0.value((-11));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-11);
      DenseInstance denseInstance0 = new DenseInstance(2, doubleArray0);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      jRip_NominalAntd0.toString();
      jRip_NominalAntd0.covers(denseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      assertFalse(arrayList1.contains(attribute0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("W", arrayList0, 1391);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Q", arrayList1, 122);
      attribute0.setStringValue("y8Of$Qf");
      arrayList0.clear();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("relational", arrayList2, 1202);
      StringReader stringReader0 = new StringReader("@attribute");
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      Tag tag0 = new Tag();
      SelectedTag selectedTag0 = new SelectedTag(3, decisionTable3.TAGS_EVALUATION);
      DecisionTable decisionTable5 = new DecisionTable();
      SGD sGD0 = new SGD();
      SelectedTag selectedTag1 = sGD0.getLossFunction();
      decisionTable5.setEvaluationMeasure(selectedTag1);
      DecisionTable decisionTable6 = new DecisionTable();
      DecisionTable decisionTable7 = new DecisionTable();
      DecisionTable decisionTable8 = new DecisionTable();
      DecisionTable decisionTable9 = new DecisionTable();
      Instances instances1 = decisionTable0.m_theInstances;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      
      jRip_NumericAntd0.accu = 1388.71000547;
      jRip_NumericAntd0.splitData(instances0, (-1.0), 2);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("Q <= NaN", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-istal-pckWage", arrayList0, (-2070649111));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("real", arrayList1, 1);
      Predicate<Attribute> predicate0 = Predicate.isEqual((Object) "-istal-pckWage");
      Predicate<Attribute> predicate1 = predicate0.negate();
      Predicate<Attribute> predicate2 = predicate0.or(predicate1);
      Predicate<Attribute> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.or(predicate5);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate1);
      Predicate<Attribute> predicate8 = predicate0.and(predicate3);
      Predicate<Attribute> predicate9 = predicate1.negate();
      Predicate<Object> predicate10 = predicate6.and(predicate7);
      Predicate<Attribute> predicate11 = predicate9.and(predicate10);
      predicate8.negate();
      Predicate<Attribute> predicate12 = predicate0.and(predicate9);
      predicate12.or(predicate11);
      predicate4.negate();
      Predicate<Object> predicate13 = predicate4.or(predicate6);
      predicate13.negate();
      arrayList1.removeIf(predicate12);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_RipperRule0.setConsequent((-913.4102));
      jRip_RipperRule0.grow(instances0);
      assertEquals((-913.4102), jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("h`JQ", 0);
      Attribute attribute1 = (Attribute)attribute0.copy();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 4;
      attribute0.value(2);
      DenseInstance denseInstance0 = new DenseInstance(1.0, doubleArray0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute1);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      DenseInstance denseInstance1 = new DenseInstance(3);
      boolean boolean0 = jRip_NominalAntd0.covers(denseInstance1);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("real", arrayList0, 1);
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      jRip_RipperRule0.prune(instances1, false);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      SystemInUtil.addInputLine("X{`t?bs,`wfJJeXv_s");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X{`t?bs,`wfJJeXv_s");
      Attribute attribute0 = new Attribute("X{`t?bs,`wfJJeXv_s", arrayList1, 9);
      attribute0.setStringValue("X{`t?bs,`wfJJeXv_s");
      arrayList0.add(attribute0);
      arrayList0.clear();
      Instances instances0 = new Instances("X{`t?bs,`wfJJeXv_s", arrayList0, 5);
      arrayList0.add(attribute0);
      Attribute attribute1 = attribute0.copy("date");
      Attribute attribute2 = attribute1.copy("weka.core.SerializedObject");
      arrayList0.add(attribute1);
      Instances instances1 = new Instances("integer", arrayList0, 3);
      Predicate<Attribute> predicate0 = Predicate.isEqual((Object) "X{`t?bs,`wfJJeXv_s");
      Predicate<Attribute> predicate1 = predicate0.negate();
      Predicate<Attribute> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(predicate3).test(any());
      Predicate<Attribute> predicate4 = predicate2.and(predicate3);
      predicate4.test(attribute2);
      arrayList0.removeIf(predicate4);
      arrayList0.add(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances1, 5, 3);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      SystemInUtil.addInputLine("X{`t?bs,`wfJJeXv_s");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X{`t?bs,`wfJJeXv_s");
      Attribute attribute0 = new Attribute("X{`t?bs,`wfJJeXv_s", arrayList1, 9);
      arrayList0.add(attribute0);
      arrayList0.clear();
      Instances instances0 = new Instances("X{`t?bs,`wfJJeXv_s", arrayList0, 5);
      Attribute attribute1 = new Attribute("X{`t?bs,`wfJJeXv_s", instances0);
      arrayList0.add(attribute1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd0.splitData(instances0, (-1809.62120651), 1);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      AbstractClassifier.makeCopy(bayesNet0);
      byte[] byteArray0 = new byte[8];
      jRip0.setDebug(true);
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-38);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-16);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip0.getOptions();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      boolean boolean0 = jRip0.getDebug();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("h`JQ", 0);
      Attribute attribute1 = (Attribute)attribute0.copy();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      attribute0.indexOfValue("integer");
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 3;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@attribute";
      stringArray0[1] = "numeric";
      stringArray0[2] = "date";
      stringArray0[3] = "date";
      stringArray0[4] = "date";
      stringArray0[5] = "numeric";
      attribute0.value(4);
      DenseInstance denseInstance0 = new DenseInstance(1.0, doubleArray0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      boolean boolean0 = jRip_NominalAntd0.covers(denseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("h`JQ", 0);
      Attribute attribute1 = (Attribute)attribute0.copy();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      attribute0.indexOfValue("integer");
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 3;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@attribute";
      stringArray0[1] = "numeric";
      stringArray0[2] = "date";
      stringArray0[3] = "date";
      stringArray0[4] = "date";
      stringArray0[5] = "numeric";
      attribute0.value(4);
      DenseInstance denseInstance0 = new DenseInstance(1.0, doubleArray0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      boolean boolean0 = jRip_NominalAntd0.covers(denseInstance0);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(boolean0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = null;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      JRip jRip0 = new JRip();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      bayesNet1.measureAICScore();
      bayesNet1.measureMissingArcs();
      bayesNet0.measureMissingArcs();
      bayesNet0.measureAICScore();
      bayesNet0.measureMissingArcs();
      BayesNet bayesNet2 = new BayesNet();
      bayesNet2.measureMissingArcs();
      SearchAlgorithm searchAlgorithm0 = bayesNet0.getSearchAlgorithm();
      bayesNet2.setSearchAlgorithm(searchAlgorithm0);
      bayesNet2.measureAICScore();
      bayesNet2.measureAICScore();
      bayesNet2.measureMissingArcs();
      BayesNet bayesNet3 = new BayesNet();
      bayesNet2.measureBayesScore();
      BayesNet bayesNet4 = new BayesNet();
      AbstractClassifier.makeCopies(bayesNet4, 677);
      AbstractClassifier.makeCopies(naiveBayesUpdateable0, 677);
      bayesNet4.measureMissingArcs();
      NaiveBayesUpdateable naiveBayesUpdateable1 = new NaiveBayesUpdateable();
      bayesNet0.measureAICScore();
      bayesNet2.measureMissingArcs();
      bayesNet1.measureMissingArcs();
      BayesNet bayesNet5 = new BayesNet();
      bayesNet2.measureMissingArcs();
      bayesNet1.measureMissingArcs();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      bayesNet5.measureAICScore();
      bayesNet5.measureMissingArcs();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_RipperRule0.setConsequent(0.0);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      Attribute attribute0 = new Attribute("h`JQ", 3);
      attribute0.copy();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance(4);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(boolean0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.CANADA_FRENCH;
      Locale locale2 = Locale.JAPAN;
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList1);
      Locale.lookup(arrayList0, list0);
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      locale0.getUnicodeLocaleAttributes();
      Locale locale3 = Locale.GERMANY;
      locale2.hasExtensions();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList2, (Collection<Locale>) arrayList1);
      Locale.filter((List<Locale.LanguageRange>) arrayList2, (Collection<Locale>) list1);
      Locale.setDefault(locale0);
      Locale locale4 = Locale.CHINA;
      locale4.getDisplayCountry(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0);
      locale2.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale locale5 = Locale.TAIWAN;
      locale0.getExtensionKeys();
      locale0.getUnicodeLocaleAttributes();
      locale1.getUnicodeLocaleKeys();
      Locale.setDefault(locale5);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleAttributes();
      Attribute attribute0 = new Attribute("Chine");
      ArrayList<String> arrayList5 = new ArrayList<String>();
      Locale.lookupTag(arrayList4, arrayList5);
      arrayList5.add("DL too Varge~ ");
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(" => Chine=", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Q", arrayList1, 122);
      attribute0.setStringValue("y8Of$Qf");
      arrayList0.clear();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("relational", arrayList2, 1202);
      Predicate<Attribute> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Attribute> predicate1 = predicate0.negate();
      Predicate<Attribute> predicate2 = predicate1.or(predicate0);
      Predicate<Attribute> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate2);
      Predicate<Attribute> predicate5 = predicate2.and(predicate4);
      predicate5.negate();
      predicate2.and(predicate5);
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate7 = predicate4.or(predicate6);
      predicate7.negate();
      predicate7.negate();
      try { 
        jRip0.rulesetForOneClass((-1.0), instances0, 144.735457, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getCheckErrorRate());
      
      jRip0.setCheckErrorRate(false);
      jRip0.checkErrorRateTipText();
      jRip0.debugTipText();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0);
      Attribute attribute0 = new Attribute("Whether debug information is output to the console.", list0);
      jRip0.getOptions();
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.measureBayesScore();
      JRip jRip0 = new JRip();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      NaiveBayesUpdateable naiveBayesUpdateable1 = new NaiveBayesUpdateable();
      bayesNet1.measureAICScore();
      bayesNet0.measureMissingArcs();
      bayesNet0.measureMissingArcs();
      bayesNet1.measureAICScore();
      bayesNet0.measureMissingArcs();
      bayesNet0.measureMissingArcs();
      int[] intArray0 = new int[4];
      intArray0[0] = (-1080);
      intArray0[1] = (-67);
      intArray0[2] = (-1855);
      intArray0[3] = (-1121);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-5861.89958), intArray0, (-1121));
      Attribute attribute0 = new Attribute("", "");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(boolean0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("One rule added: has positive? ", "");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = jRip_NominalAntd0.getAccu();
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.964532803443662
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("h`JQ", 0);
      attribute0.copy();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2;
      KernelEstimator kernelEstimator0 = new KernelEstimator(2414.3916775611);
      Matrix matrix0 = Matrix.random(1, 8);
      MahalanobisEstimator mahalanobisEstimator0 = new MahalanobisEstimator(matrix0, (-802.102), 267.996030363);
      String[] stringArray0 = new String[0];
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      JRip jRip1 = new JRip();
      String[] stringArray1 = jRip0.getOptions();
      assertEquals(11, stringArray1.length);
      
      double double0 = jRip_NumericAntd0.getAttrValue();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      ClassOrder classOrder0 = new ClassOrder();
      jRip0.minNoTipText();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("h`JQ", 0);
      attribute0.copy();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertTrue(jRip0.getUsePruning());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 2;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "real");
      doubleArray0[7] = (double) 2;
      jRip0.setUsePruning(false);
      doubleArray0[8] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance((-802.102), doubleArray0);
      jRip_NumericAntd0.covers(sparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double double0 = jRip_RipperRule0.getConsequent();
      assertFalse(jRip0.getUsePruning());
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.usePruningTipText();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.FRANCE;
      Locale locale2 = Locale.GERMANY;
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale locale3 = Locale.CHINA;
      boolean boolean0 = locale0.hasExtensions();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1);
      Locale.filter((List<Locale.LanguageRange>) arrayList2, (Collection<Locale>) list0);
      Locale locale4 = new Locale("nw@lp: ", "Whether pruning is performed.");
      Locale locale5 = Locale.PRC;
      locale1.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale locale6 = Locale.KOREAN;
      locale4.getUnicodeLocaleAttributes();
      Locale locale7 = Locale.ITALIAN;
      locale4.getUnicodeLocaleKeys();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      boolean boolean1 = arrayList4.add("UH<yw");
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.optimizationsTipText();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.GERMANY;
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      assertEquals(0, arrayList1.size());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.measureMissingArcs();
      BayesNet bayesNet1 = new BayesNet();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      bayesNet1.measureAICScore();
      bayesNet1.measureMissingArcs();
      bayesNet0.measureMissingArcs();
      bayesNet0.measureAICScore();
      bayesNet0.measureMissingArcs();
      BayesNet bayesNet2 = new BayesNet();
      bayesNet2.measureMissingArcs();
      SearchAlgorithm searchAlgorithm0 = bayesNet0.getSearchAlgorithm();
      bayesNet2.setSearchAlgorithm(searchAlgorithm0);
      bayesNet2.measureAICScore();
      bayesNet2.measureAICScore();
      bayesNet2.measureMissingArcs();
      bayesNet2.measureBayesScore();
      BayesNet bayesNet3 = new BayesNet();
      AbstractClassifier.makeCopies(bayesNet3, 677);
      AbstractClassifier.makeCopies(naiveBayesUpdateable0, 677);
      bayesNet3.measureMissingArcs();
      NaiveBayesUpdateable naiveBayesUpdateable1 = new NaiveBayesUpdateable();
      bayesNet0.measureAICScore();
      bayesNet1.measureMissingArcs();
      BayesNet bayesNet4 = new BayesNet();
      bayesNet2.measureMissingArcs();
      bayesNet1.measureMissingArcs();
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      bayesNet4.measureAICScore();
      bayesNet4.measureMissingArcs();
      BayesNet bayesNet7 = new BayesNet();
      bayesNet1.measureAICScore();
      bayesNet7.measureMissingArcs();
      JRip jRip0 = new JRip();
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = (-3402.0);
      String string0 = "\tThe seed for the random number generator used\n\tin selecting random anchor.\n(default: 1)";
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7578996213295177
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Jr@:(");
      Locale locale0 = Locale.GERMANY;
      arrayList0.add("JRIP: No model built yet.");
      assertTrue(arrayList0.contains(string0));
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = jRip1.getOptions();
      Random.setNextRandom((byte) (-16));
      jRip1.setOptions(stringArray0);
      assertEquals(2, jRip1.getOptimizations());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Q", (List<String>) null, 122);
      arrayList0.clear();
      Instances instances0 = new Instances("relational", arrayList0, 3);
      Predicate.isEqual((Object) arrayList0);
      arrayList0.add(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      jRip_NominalAntd0.splitData(instances0, 1.8434708657677858, 4);
      Properties properties0 = new Properties();
      CharBuffer.allocate(122);
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      TopDownConstructor topDownConstructor1 = new TopDownConstructor();
      try { 
        topDownConstructor1.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      LinkedList<ClassOrder> linkedList2 = new LinkedList<ClassOrder>();
      ClassOrder classOrder0 = new ClassOrder();
      linkedList2.add(classOrder0);
      arrayList2.retainAll(linkedList2);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\nRuleset so far: ";
      stringArray0[1] = "\nRuleset so far: ";
      stringArray0[2] = "\nRuleset so far: ";
      stringArray0[3] = "\nRuleset so far: ";
      stringArray0[4] = "\nRuleset so far: ";
      stringArray0[5] = "";
      stringArray0[6] = "\nRuleset so far: ";
      stringArray0[7] = "\nRuleset so far: ";
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getUsePruning();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip0 = new JRip();
      ZeroR zeroR0 = new ZeroR();
      bayesNet0.measureMissingArcs();
      Estimator[][] estimatorArray0 = new Estimator[10][8];
      Estimator[] estimatorArray1 = new Estimator[2];
      PoissonEstimator poissonEstimator0 = new PoissonEstimator();
      estimatorArray1[0] = (Estimator) poissonEstimator0;
      NormalEstimator normalEstimator0 = new NormalEstimator((-13.645737071186737));
      estimatorArray1[1] = (Estimator) normalEstimator0;
      estimatorArray0[0] = estimatorArray1;
      Estimator[] estimatorArray2 = new Estimator[3];
      estimatorArray2[0] = (Estimator) normalEstimator0;
      estimatorArray1[0] = (Estimator) normalEstimator0;
      estimatorArray2[2] = (Estimator) normalEstimator0;
      estimatorArray0[1] = estimatorArray2;
      Estimator[] estimatorArray3 = new Estimator[1];
      estimatorArray3[0] = (Estimator) poissonEstimator0;
      estimatorArray0[2] = estimatorArray3;
      Estimator[] estimatorArray4 = new Estimator[4];
      estimatorArray4[0] = (Estimator) poissonEstimator0;
      estimatorArray4[1] = (Estimator) poissonEstimator0;
      estimatorArray4[1] = (Estimator) poissonEstimator0;
      estimatorArray0[3] = estimatorArray4;
      Estimator[] estimatorArray5 = new Estimator[2];
      estimatorArray5[0] = (Estimator) poissonEstimator0;
      estimatorArray5[1] = (Estimator) normalEstimator0;
      estimatorArray0[4] = estimatorArray5;
      Estimator[] estimatorArray6 = new Estimator[8];
      estimatorArray6[0] = (Estimator) normalEstimator0;
      estimatorArray6[1] = (Estimator) normalEstimator0;
      estimatorArray6[2] = (Estimator) poissonEstimator0;
      estimatorArray6[4] = (Estimator) poissonEstimator0;
      estimatorArray6[5] = (Estimator) normalEstimator0;
      estimatorArray6[6] = (Estimator) poissonEstimator0;
      estimatorArray6[7] = (Estimator) normalEstimator0;
      estimatorArray0[7] = estimatorArray4;
      Estimator[] estimatorArray7 = new Estimator[3];
      estimatorArray7[0] = (Estimator) normalEstimator0;
      estimatorArray7[1] = (Estimator) normalEstimator0;
      estimatorArray7[2] = (Estimator) normalEstimator0;
      estimatorArray0[6] = estimatorArray7;
      bayesNet0.m_Distributions = estimatorArray0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      attribute0.setStringValue("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getMaxInfoGain();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((SparseInstance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = jRip0.getOptimizations();
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, int0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip0.getDebug();
      StringReader stringReader0 = new StringReader("  /**\n");
      StringReader stringReader1 = new StringReader("Avg.2log-likblihood: ");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "  /**\n", 1003, 1003);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.measureBayesScore();
      JRip jRip0 = new JRip();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      SystemInUtil.addInputLine("k$");
      NaiveBayesUpdateable naiveBayesUpdateable1 = new NaiveBayesUpdateable();
      bayesNet1.measureAICScore();
      bayesNet0.measureMissingArcs();
      bayesNet0.measureMissingArcs();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1.236838990671183);
      jRip0.setDebug(true);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      JRip jRip0 = new JRip();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      ZeroR zeroR0 = new ZeroR();
      bayesNet1.measureAICScore();
      bayesNet1.measureMissingArcs();
      bayesNet0.measureMissingArcs();
      bayesNet0.measureAICScore();
      bayesNet0.measureAICScore();
      bayesNet0.measureMissingArcs();
      BayesNet bayesNet2 = new BayesNet();
      bayesNet2.measureMissingArcs();
      NaiveBayesUpdateable naiveBayesUpdateable1 = new NaiveBayesUpdateable();
      bayesNet0.measureAICScore();
      bayesNet2.measureMissingArcs();
      BayesNet bayesNet3 = new BayesNet();
      bayesNet0.measureMissingArcs();
      bayesNet2.measureMissingArcs();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      bayesNet5.measureAICScore();
      bayesNet1.measureMissingArcs();
      bayesNet2.measureMissingArcs();
      try { 
        jRip0.rulesetForOneClass(2.895533589671505, (Instances) null, (-3974.92316274249), 1115.482);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.copy();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>(linkedList3);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.getRevision();
      assertEquals("8118", string0);
      
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.775877222176468
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("1Qq#9qcbNU2&<", 6);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAttr();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getSplitPoint();
      jRip0.setFolds((-396));
      jRip0.foldsTipText();
      jRip_NumericAntd0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "numeric";
      stringArray0[1] = "@attribute";
      attribute0.addStringValue("");
      stringArray0[2] = "1Qq#9qcbNU2&<";
      stringArray0[3] = "dO~{QsQKV\"}}.&r$pJP";
      stringArray0[4] = "Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.";
      stringArray0[5] = "@end";
      stringArray0[6] = "relational";
      stringArray0[7] = "numeric";
      stringArray0[8] = "@end";
      jRip0.setOptions(stringArray0);
      jRip0.debugTipText();
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREAN;
      jRip_RipperRule0.size();
      Locale locale1 = Locale.FRANCE;
      Locale locale2 = Locale.GERMANY;
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale locale3 = Locale.CHINA;
      locale2.hasExtensions();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList2, (Collection<Locale>) arrayList1);
      Locale.filter((List<Locale.LanguageRange>) arrayList2, (Collection<Locale>) list0);
      Locale locale4 = new Locale("JRIP: No model built yet.", "JRIP: No model built yet.");
      Locale locale5 = Locale.PRC;
      locale5.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale locale6 = Locale.KOREAN;
      Set<String> set0 = locale5.getUnicodeLocaleAttributes();
      Locale locale7 = Locale.ITALIAN;
      locale1.getUnicodeLocaleKeys();
      Locale.setDefault(locale6);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList4, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("q;", list1, 1769105057);
      ArrayList<String> arrayList5 = new ArrayList<String>();
      arrayList5.add("-S <seed>");
      arrayList5.add("DL too large: ");
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CANADA;
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList1);
      Locale.lookup(arrayList0, list0);
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale locale1 = Locale.KOREAN;
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList2, (Collection<Locale>) arrayList1);
      Locale.filter((List<Locale.LanguageRange>) arrayList2, (Collection<Locale>) list1);
      Locale locale2 = Locale.CHINA;
      locale2.getDisplayCountry(locale0);
      locale2.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale locale3 = Locale.TAIWAN;
      Locale locale4 = new Locale("China", "China", "China");
      locale3.getDisplayName(locale4);
      Locale locale5 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.setDefault(locale3);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("q;", list2, 1769105057);
      ArrayList<String> arrayList5 = new ArrayList<String>();
      Locale.lookupTag(arrayList4, arrayList5);
      String string0 = "DL too large: ";
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed(1581L);
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.010698604787972
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "4b";
      stringArray0[1] = "";
      stringArray0[2] = "Fa%fTsix6K<w";
      stringArray0[3] = "CfY^M(4h1i:?T4`x\"Ck";
      JRip.main(stringArray0);
      stringArray0[4] = "";
      JRip.main(stringArray0);
      String[] stringArray1 = jRip0.getOptions();
      jRip0.setSeed(0L);
      jRip0.toString();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("1RZ,ej_fib=#efcKW", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      
      Attribute.main(stringArray1);
      jRip_NumericAntd0.accu = (double) 0;
      jRip_NumericAntd0.att = attribute0;
      jRip_NumericAntd0.getCover();
      jRip0.getTechnicalInformation();
      jRip_NumericAntd0.getAccuRate();
      jRip0.getSeed();
      jRip_NumericAntd0.copy();
      jRip_NumericAntd0.copy();
      assertEquals(0L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Original array (doubles): ", protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAccuRate();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Q", arrayList1, 122);
      attribute0.setStringValue("y8Of$Qf");
      arrayList0.clear();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("relational", arrayList2, 1202);
      StringReader stringReader0 = new StringReader("@attribute");
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      Tag tag0 = new Tag();
      SelectedTag selectedTag0 = new SelectedTag(3, decisionTable3.TAGS_EVALUATION);
      decisionTable1.toString();
      DecisionTable decisionTable5 = new DecisionTable();
      SGD sGD0 = new SGD();
      SelectedTag selectedTag1 = sGD0.getLossFunction();
      decisionTable5.setEvaluationMeasure(selectedTag1);
      DecisionTable decisionTable6 = new DecisionTable();
      DecisionTable decisionTable7 = new DecisionTable();
      DecisionTable decisionTable8 = new DecisionTable();
      DecisionTable decisionTable9 = new DecisionTable();
      Instances instances1 = decisionTable0.m_theInstances;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("Q <= NaN", string0);
      
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "newlgpe: ";
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      JRip jRip0 = new JRip();
      jRip0.getRevision();
      BallNode ballNode0 = new BallNode(2058, 2058, (-4035));
      BallNode ballNode1 = new BallNode(2058);
      BallNode ballNode2 = ballNode1.m_Right;
      BallNode ballNode3 = new BallNode(18, 1363, 0);
      BallNode ballNode4 = ballNode3.m_Right;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("E.'Fejp% Z", arrayList1, 1);
      TopDownConstructor topDownConstructor1 = new TopDownConstructor();
      try { 
        topDownConstructor1.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      Predicate<Object> predicate5 = predicate3.and(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate6);
      predicate7.negate();
      arrayList0.removeIf(predicate3);
      long long0 = jRip0.getSeed();
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, long0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Attribute attribute0 = new Attribute(" |dl = ", list0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals("8118", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      SystemInUtil.addInputLine("X{`t?bs,`wfJJeXv_s");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X{`t?bs,`wfJJeXv_s");
      Attribute attribute0 = new Attribute("X{`t?bs,`wfJJeXv_s", arrayList1, 9);
      arrayList0.add(attribute0);
      arrayList0.clear();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = new Instances("X{`t?bs,`wfJJeXv_s", arrayList0, 5);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Attribute attribute1 = new Attribute(".bsi", 3);
      arrayList0.add(attribute1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      attribute1.equals((Object) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Attribute attribute2 = new Attribute("\nLM num: ", arrayList1);
      Attribute attribute3 = new Attribute(".bsi", "F");
      attribute3.copy();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute3);
      attribute3.copy();
      jRip_NominalAntd0.splitData(instances0, 4, 1);
      Properties properties0 = new Properties();
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals("8118", string0);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.540448551364985
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      jRip0.getCapabilities();
      jRip0.globalInfo();
      jRip0.setUsePruning(false);
      jRip0.getFolds();
      jRip0.getOptions();
      jRip0.enumerateMeasures();
      jRip0.seedTipText();
      ClassOrder classOrder0 = new ClassOrder();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1180);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "<k\"Ll<SkW";
      stringArray0[1] = "3VuOXqZ";
      stringArray0[2] = "$pK4,M^l&4dx";
      stringArray0[3] = ";2w";
      stringArray0[4] = "";
      stringArray0[5] = "FK/8Bd&a/E=";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.covers(denseInstance0);
      StringReader stringReader0 = new StringReader("  /**\n");
      StringReader stringReader1 = new StringReader("Avg. log-likelihood: ");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "  /**\n", 1003, 1003);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JRip jRip0 = new JRip();
      SparseInstance sparseInstance0 = new SparseInstance(1455);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("h`JQ", 0);
      attribute0.copy();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      attribute0.indexOfValue("integer");
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 3;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@attribute";
      stringArray0[1] = "numeric";
      stringArray0[2] = "date";
      stringArray0[3] = "date";
      stringArray0[4] = "date";
      stringArray0[5] = "numeric";
      attribute0.value(4);
      DenseInstance denseInstance0 = new DenseInstance(1.0, doubleArray0);
      DecisionTable decisionTable0 = new DecisionTable();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = (-832);
      Attribute attribute0 = new Attribute("m", (-832));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1180);
      jRip0.getCheckErrorRate();
      StringReader stringReader0 = new StringReader("  /**\n");
      StringReader stringReader1 = new StringReader("Avg. log-likelihood: ");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "  /**\n", 1003, 1003);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 704.630383275064;
      doubleArray0[1] = (-913.4102);
      doubleArray0[2] = (-913.4102);
      doubleArray0[3] = (-913.4102);
      jRip0.setOptimizations((-2153));
      doubleArray0[4] = (-913.4102);
      doubleArray0[5] = (-913.4102);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-913.4102), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      try { 
        jRip0.classifyInstance(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.4273916305367944
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.ROOT;
      Locale locale2 = Locale.GERMANY;
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale locale3 = Locale.CHINA;
      locale2.hasExtensions();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList2, (Collection<Locale>) arrayList1);
      Locale.filter((List<Locale.LanguageRange>) arrayList2, (Collection<Locale>) list0);
      Locale locale4 = Locale.CANADA;
      Locale locale5 = Locale.PRC;
      Set<String> set0 = locale5.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale locale6 = Locale.KOREAN;
      locale5.getUnicodeLocaleAttributes();
      Locale locale7 = Locale.ITALIAN;
      locale1.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("UH<yw", list1, 1769105057);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      arrayList3.add((Locale.LanguageRange) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      JRip jRip0 = new JRip();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      bayesNet1.measureAICScore();
      bayesNet1.measureMissingArcs();
      bayesNet0.measureMissingArcs();
      bayesNet0.measureAICScore();
      bayesNet0.measureAICScore();
      bayesNet0.measureMissingArcs();
      BayesNet bayesNet2 = new BayesNet();
      bayesNet2.measureMissingArcs();
      SearchAlgorithm searchAlgorithm0 = bayesNet0.getSearchAlgorithm();
      bayesNet2.setSearchAlgorithm(searchAlgorithm0);
      bayesNet2.measureAICScore();
      bayesNet2.measureAICScore();
      bayesNet2.measureMissingArcs();
      BayesNet bayesNet3 = new BayesNet();
      bayesNet2.measureBayesScore();
      BayesNet bayesNet4 = new BayesNet();
      AbstractClassifier.makeCopies(bayesNet4, 677);
      AbstractClassifier.makeCopies(naiveBayesUpdateable0, 677);
      bayesNet4.measureMissingArcs();
      NaiveBayesUpdateable naiveBayesUpdateable1 = new NaiveBayesUpdateable();
      bayesNet0.measureAICScore();
      bayesNet1.measureMissingArcs();
      BayesNet bayesNet5 = new BayesNet();
      bayesNet2.measureMissingArcs();
      bayesNet1.measureMissingArcs();
      BayesNet bayesNet6 = new BayesNet();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("u?2&c7g7UDc=9*zjZ");
      StringReader stringReader1 = new StringReader("u?2&c7g7UDc=9*zjZ");
      // Undeclared exception!
      try { 
        jRip0.getMeasure("KiC.IZE %%,X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // KiC.IZE %%,X not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      JRip jRip0 = new JRip();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      bayesNet1.measureAICScore();
      bayesNet1.measureMissingArcs();
      bayesNet0.measureMissingArcs();
      bayesNet0.measureAICScore();
      bayesNet0.measureAICScore();
      bayesNet0.measureMissingArcs();
      BayesNet bayesNet2 = new BayesNet();
      bayesNet2.measureMissingArcs();
      SearchAlgorithm searchAlgorithm0 = bayesNet0.getSearchAlgorithm();
      bayesNet2.setSearchAlgorithm(searchAlgorithm0);
      bayesNet2.measureAICScore();
      bayesNet2.measureAICScore();
      bayesNet2.measureMissingArcs();
      BayesNet bayesNet3 = new BayesNet();
      bayesNet2.measureBayesScore();
      BayesNet bayesNet4 = new BayesNet();
      AbstractClassifier.makeCopies(bayesNet4, 677);
      AbstractClassifier.makeCopies(naiveBayesUpdateable0, 677);
      bayesNet4.measureMissingArcs();
      NaiveBayesUpdateable naiveBayesUpdateable1 = new NaiveBayesUpdateable();
      bayesNet0.measureAICScore();
      bayesNet1.measureMissingArcs();
      BayesNet bayesNet5 = new BayesNet();
      bayesNet2.measureMissingArcs();
      bayesNet1.measureMissingArcs();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      bayesNet5.measureAICScore();
      bayesNet5.measureMissingArcs();
      BayesNet bayesNet8 = new BayesNet();
      bayesNet1.measureAICScore();
      bayesNet8.measureMissingArcs();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // v not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("The alternating decision tree learning algorithm", arrayList1, 122);
      Instances instances0 = new Instances("relational", arrayList0, 1202);
      arrayList0.stream();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      Tag tag0 = new Tag();
      decisionTable0.getSearchSpec();
      SelectedTag selectedTag0 = new SelectedTag(3, decisionTable3.TAGS_EVALUATION);
      DecisionTable decisionTable5 = new DecisionTable();
      SGD sGD0 = new SGD();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 5;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 4;
      decisionTable5.m_classPriors = doubleArray0;
      SelectedTag selectedTag1 = sGD0.getLossFunction();
      decisionTable5.setEvaluationMeasure(selectedTag1);
      DecisionTable decisionTable6 = new DecisionTable();
      decisionTable4.m_classIsNominal = false;
      decisionTable6.getTechnicalInformation();
      DecisionTable decisionTable7 = new DecisionTable();
      DecisionTable decisionTable8 = new DecisionTable();
      decisionTable6.setUpEvaluator();
      DecisionTable decisionTable9 = new DecisionTable();
      Instances instances1 = decisionTable0.m_theInstances;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 3, 2);
      System.setCurrentTimeMillis(2);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.948720592834763
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Q", arrayList1, 122);
      Instances instances0 = new Instances("relational", arrayList0, 1202);
      arrayList0.stream();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      Tag tag0 = new Tag();
      decisionTable0.getSearchSpec();
      SelectedTag selectedTag0 = new SelectedTag(3, decisionTable3.TAGS_EVALUATION);
      DecisionTable decisionTable5 = new DecisionTable();
      SGD sGD0 = new SGD();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 5;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 4;
      decisionTable5.m_classPriors = doubleArray0;
      SelectedTag selectedTag1 = sGD0.getLossFunction();
      decisionTable5.setEvaluationMeasure(selectedTag1);
      DecisionTable decisionTable6 = new DecisionTable();
      decisionTable4.m_classIsNominal = false;
      decisionTable6.getTechnicalInformation();
      DecisionTable decisionTable7 = new DecisionTable();
      DecisionTable decisionTable8 = new DecisionTable();
      decisionTable6.setUpEvaluator();
      DecisionTable decisionTable9 = new DecisionTable();
      Instances instances1 = decisionTable0.m_theInstances;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 3, 2);
      System.setCurrentTimeMillis(2);
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      intArray0[1] = 5;
      intArray0[2] = 74;
      intArray0[3] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1435.21721082537), intArray0, 4);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      JRip jRip0 = new JRip();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      ZeroR zeroR0 = new ZeroR();
      bayesNet1.measureAICScore();
      bayesNet0.measureMissingArcs();
      bayesNet0.measureMissingArcs();
      bayesNet0.measureAICScore();
      bayesNet1.measureMissingArcs();
      bayesNet0.measureMissingArcs();
      Estimator[][] estimatorArray0 = new Estimator[7][8];
      Estimator[] estimatorArray1 = new Estimator[2];
      PoissonEstimator poissonEstimator0 = new PoissonEstimator();
      estimatorArray1[0] = (Estimator) poissonEstimator0;
      NormalEstimator normalEstimator0 = new NormalEstimator((-13.645737071186737));
      estimatorArray1[1] = (Estimator) normalEstimator0;
      estimatorArray0[0] = estimatorArray1;
      Estimator[] estimatorArray2 = new Estimator[3];
      estimatorArray2[0] = (Estimator) normalEstimator0;
      estimatorArray2[1] = (Estimator) normalEstimator0;
      estimatorArray2[2] = (Estimator) normalEstimator0;
      estimatorArray0[1] = estimatorArray2;
      Estimator[] estimatorArray3 = new Estimator[1];
      estimatorArray3[0] = (Estimator) poissonEstimator0;
      estimatorArray0[2] = estimatorArray3;
      Estimator[] estimatorArray4 = new Estimator[4];
      estimatorArray4[0] = (Estimator) poissonEstimator0;
      estimatorArray4[1] = (Estimator) poissonEstimator0;
      estimatorArray4[2] = (Estimator) poissonEstimator0;
      estimatorArray4[3] = (Estimator) poissonEstimator0;
      estimatorArray0[3] = estimatorArray4;
      Estimator[] estimatorArray5 = new Estimator[2];
      estimatorArray5[0] = (Estimator) poissonEstimator0;
      estimatorArray5[1] = (Estimator) normalEstimator0;
      estimatorArray0[4] = estimatorArray5;
      Estimator[] estimatorArray6 = new Estimator[8];
      estimatorArray6[0] = (Estimator) normalEstimator0;
      estimatorArray6[1] = (Estimator) normalEstimator0;
      estimatorArray6[2] = (Estimator) poissonEstimator0;
      estimatorArray6[3] = (Estimator) normalEstimator0;
      estimatorArray6[4] = (Estimator) poissonEstimator0;
      estimatorArray6[5] = (Estimator) normalEstimator0;
      estimatorArray6[6] = (Estimator) poissonEstimator0;
      estimatorArray6[7] = (Estimator) normalEstimator0;
      estimatorArray0[5] = estimatorArray6;
      Estimator[] estimatorArray7 = new Estimator[3];
      estimatorArray7[0] = (Estimator) normalEstimator0;
      estimatorArray7[1] = (Estimator) normalEstimator0;
      estimatorArray7[2] = (Estimator) normalEstimator0;
      estimatorArray0[6] = estimatorArray7;
      bayesNet1.m_Distributions = estimatorArray0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ***";
      stringArray0[1] = " | pos3=4 ";
      jRip0.setOptions(stringArray0);
      Random.setNextRandom(34);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }
}
