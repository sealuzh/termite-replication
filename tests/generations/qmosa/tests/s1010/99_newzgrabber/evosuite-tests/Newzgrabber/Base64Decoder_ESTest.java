/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 07:33:45 GMT 2019
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.Base64Decoder;
import Newzgrabber.BufferedCustomInputStream;
import Newzgrabber.Newzgrabber;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Base64Decoder_ESTest extends Base64Decoder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.5540761036710294
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-99);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, true);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream0);
      base64Decoder0.foundbegin = true;
      try { 
        base64Decoder0.decodeStream();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.549994923610415
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-99);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, false);
      byteArrayInputStream0.reset();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)48);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, byteArrayOutputStream0);
      base64Decoder0.decodeStream();
      assertEquals(1L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6711893730418441
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)73;
      byteArray1[1] = (byte)50;
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte)10;
      byteArray1[4] = (byte)48;
      byteArray1[5] = (byte)48;
      byteArray1[6] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray1);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream2, false);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream0);
      base64Decoder0.decodeStream();
      bufferedCustomInputStream0.setTempfile("#nA9");
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6128114126752304
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)44;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, true);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream0);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream0);
      base64Decoder1.updateProgress();
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6024606254182605
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[1] = (byte)48;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)10;
      byteArray0[2] = (byte) (-99);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream1.flush();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream1, false);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream0);
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream1);
      Base64Decoder base64Decoder2 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream1);
      base64Decoder2.decodeStream();
      base64Decoder1.decodeStream();
      Base64Decoder base64Decoder3 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream1);
      base64Decoder3.decodeStream();
      assertFalse(base64Decoder3.ABORT);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.5584105701317909
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)80;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)100;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream0.flush();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream1.flush();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      pipedOutputStream2.flush();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream2, true);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream2);
      try { 
        base64Decoder0.decodeStream();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.7903503830635239
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)26;
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)10;
      byteArray0[6] = (byte)100;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, (byte)1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, byteArrayOutputStream0);
      base64Decoder0.decodeStream();
      BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(bufferedCustomInputStream0, (byte)100, false);
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream1, byteArrayOutputStream0);
      base64Decoder0.updateProgress();
      Base64Decoder base64Decoder2 = new Base64Decoder(bufferedCustomInputStream0, byteArrayOutputStream0);
      byteArrayInputStream0.reset();
      Newzgrabber.IsBatch = false;
      base64Decoder2.decodeStream();
      base64Decoder2.decodeStream();
      base64Decoder0.decodeStream();
      Base64Decoder base64Decoder3 = new Base64Decoder(bufferedCustomInputStream0, (OutputStream) null);
      base64Decoder1.decodeStream();
      base64Decoder0.setLineCount((byte)100);
      base64Decoder1.decodeStream();
      Base64Decoder base64Decoder4 = new Base64Decoder(bufferedCustomInputStream0, (OutputStream) null);
      base64Decoder4.decodeStream();
      base64Decoder1.decodeStream();
      base64Decoder1.decodeStream();
      base64Decoder4.decodeStream();
      base64Decoder1.decodeStream();
      base64Decoder1.decodeStream();
      assertEquals(0L, base64Decoder1.getLineCount());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6711893730418441
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = new byte[26];
      byteArray1[0] = (byte)73;
      byteArray1[1] = (byte)50;
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte)10;
      byteArray1[4] = (byte)48;
      byteArray1[5] = (byte)48;
      byteArray1[6] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray1);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream2, false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "i59=s#1nQ=`\"_Vw#^WE";
      stringArray0[1] = ")U*kb5'G#~i|Jg";
      stringArray0[2] = "EhP=tmP}-^j,U6\"7";
      BufferedCustomInputStream.main(stringArray0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream0);
      base64Decoder0.decodeStream();
      bufferedCustomInputStream0.setTempfile("#nA9");
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5747161745799924
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)1;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("hHR4qdTjm1D");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)100;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, (byte)1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream0);
      base64Decoder0.decodeStream();
      Newzgrabber.IsBatch = false;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "hHR4qdTjm1D";
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("hHR4qdTjm1D");
      FileSystemHandling.createFolder(evoSuiteFile1);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("hHR4qdTjm1D");
      FileSystemHandling.appendDataToFile(evoSuiteFile2, byteArray0);
      base64Decoder0.decodeStream();
      assertEquals(1L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0290018112854749
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)80;
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-99);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, true);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream0);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      Newzgrabber.verbose = true;
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream0);
      base64Decoder1.updateProgress();
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)100;
      String[] stringArray0 = new String[9];
      stringArray0[0] = ")bGjb";
      stringArray0[1] = "%l9cN)bHS_29>U8M;wL";
      stringArray0[2] = "hHR4qdTjm1D";
      stringArray0[3] = ")bGjb";
      stringArray0[5] = "hHR4qdTjm1D";
      Base64Decoder base64Decoder0 = new Base64Decoder((BufferedCustomInputStream) null, (OutputStream) null);
      // Undeclared exception!
      try { 
        base64Decoder0.decodeStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.Base64Decoder", e);
      }
  }
}
