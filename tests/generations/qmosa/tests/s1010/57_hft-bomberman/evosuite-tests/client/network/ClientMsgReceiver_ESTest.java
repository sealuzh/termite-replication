/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 10:10:19 GMT 2019
 */

package client.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import client.BomberClient;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import java.awt.HeadlessException;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.util.Locale;
import java.util.function.Consumer;
import messages.global.GlobalChatMsg;
import messages.global.GlobalStateMsg;
import messages.round.BombMoveMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.LogManager;
import org.apache.log4j.spi.LoggerRepository;
import org.apache.log4j.spi.RepositorySelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      String string0 = "#n4z)qNHK]]os";
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("#n4z)qNHK]]os", 620);
      Proxy proxy0 = new Proxy(proxy_Type0, inetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      Proxy proxy1 = new Proxy(proxy_Type0, inetSocketAddress0);
      InetSocketAddress inetSocketAddress1 = MockInetSocketAddress.createUnresolved("e.cX`u:>(Y8I>P", 713);
      Proxy proxy2 = new Proxy(proxy_Type0, inetSocketAddress1);
      Proxy.Type proxy_Type1 = Proxy.Type.SOCKS;
      Proxy proxy3 = new Proxy(proxy_Type1, inetSocketAddress1);
      mockSocket0.setReuseAddress(false);
      Integer integer0 = new Integer(620);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      GlobalStateMsg globalStateMsg0 = new GlobalStateMsg(1681);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(globalStateMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      Locale locale0 = Locale.UK;
      MockThread.getDefaultUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      MockThread.getDefaultUncaughtExceptionHandler();
      clientMsgReceiver0.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      GlobalChatMsg globalChatMsg0 = new GlobalChatMsg("ROR");
      mockSocket0.getSoLinger();
      StartFrame startFrame0 = StartFrame.startFrame;
      StartFrame.startFrame = null;
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(globalChatMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("messages.global.GlobalChatMsg", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedException0.setNextException(sQLFeatureNotSupportedException1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("m", sQLFeatureNotSupportedException1);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException();
      SQLDataException sQLDataException2 = new SQLDataException((String) null, sQLTransientConnectionException0);
      Throwable throwable0 = sQLDataException1.initCause(sQLDataException2);
      Object object0 = new Object();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("m", (String) null, throwable0);
      sQLInvalidAuthorizationSpecException1.getStackTrace();
      sQLInvalidAuthorizationSpecException1.getLocalizedMessage();
      sQLTransientConnectionException0.addSuppressed(sQLDataException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("=9[?kW-q7mEjd5|s", (String) null, sQLFeatureNotSupportedException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException5.forEach(consumer0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      sQLInvalidAuthorizationSpecException3.getSuppressed();
      sQLInvalidAuthorizationSpecException1.getSuppressed();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("=9[?kW-q7mEjd5|s", sQLInvalidAuthorizationSpecException5);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException((String) null, "", sQLSyntaxErrorException0);
      sQLInvalidAuthorizationSpecException2.setNextException(sQLFeatureNotSupportedException0);
      sQLInvalidAuthorizationSpecException2.getSuppressed();
      sQLInvalidAuthorizationSpecException4.getStackTrace();
      sQLInvalidAuthorizationSpecException3.getStackTrace();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      GlobalChatMsg globalChatMsg0 = new GlobalChatMsg((String) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(globalChatMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("messages.global.GlobalChatMsg", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedException0.setNextException(sQLFeatureNotSupportedException1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("m", sQLFeatureNotSupportedException1);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException();
      SQLDataException sQLDataException2 = new SQLDataException(sQLTransientConnectionException0);
      Throwable throwable0 = sQLDataException1.initCause(sQLDataException2);
      Object object0 = new Object();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("m", (String) null, throwable0);
      sQLInvalidAuthorizationSpecException1.getStackTrace();
      sQLInvalidAuthorizationSpecException1.getLocalizedMessage();
      sQLTransientConnectionException0.addSuppressed(sQLDataException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("=9[?kW-q7mEjd5|s", (String) null, sQLFeatureNotSupportedException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException5.forEach(consumer0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      sQLInvalidAuthorizationSpecException3.getSuppressed();
      sQLInvalidAuthorizationSpecException1.getSuppressed();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException((String) null, "", sQLSyntaxErrorException0);
      sQLInvalidAuthorizationSpecException2.setNextException(sQLFeatureNotSupportedException0);
      sQLInvalidAuthorizationSpecException2.getSuppressed();
      sQLInvalidAuthorizationSpecException4.getStackTrace();
      sQLInvalidAuthorizationSpecException3.getStackTrace();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      GlobalChatMsg globalChatMsg0 = new GlobalChatMsg((String) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(globalChatMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("messages.global.GlobalChatMsg", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      Locale locale0 = Locale.KOREA;
      MockThread.getDefaultUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      MockThread.getDefaultUncaughtExceptionHandler();
      clientMsgReceiver0.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      GlobalChatMsg globalChatMsg0 = new GlobalChatMsg("ROR");
      RepositorySelector repositorySelector0 = mock(RepositorySelector.class, new ViolatedAssumptionAnswer());
      doReturn((LoggerRepository) null).when(repositorySelector0).getLoggerRepository();
      LogManager.setRepositorySelector(repositorySelector0, "ROR");
      StartFrame startFrame0 = StartFrame.startFrame;
      StartFrame.startFrame = null;
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(globalChatMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("messages.global.GlobalChatMsg", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("#n4z)qNHK]]os", 620);
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      Proxy proxy1 = Proxy.NO_PROXY;
      MockSocket mockSocket1 = new MockSocket(proxy0);
      int int0 = MockThread.MAX_PRIORITY;
      MockSocket mockSocket2 = new MockSocket(proxy1);
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      Proxy proxy2 = new Proxy(proxy_Type0, inetSocketAddress0);
      InetSocketAddress inetSocketAddress1 = MockInetSocketAddress.createUnresolved("client.controller.LocalControl", 10);
      Proxy.Type proxy_Type1 = Proxy.Type.HTTP;
      Proxy proxy3 = new Proxy(proxy_Type1, inetSocketAddress1);
      Proxy proxy4 = Proxy.NO_PROXY;
      MockSocket mockSocket3 = new MockSocket(proxy4);
      Proxy.Type proxy_Type2 = Proxy.Type.SOCKS;
      Proxy proxy5 = new Proxy(proxy_Type2, inetSocketAddress1);
      MockSocket mockSocket4 = new MockSocket(proxy4);
      mockSocket3.setReuseAddress(false);
      Integer integer0 = new Integer(620);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket4, (BomberClient) null);
      MockException mockException0 = new MockException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(mockException0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(mockException0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qGjuCZ1[Xv<J,", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "CONNECTION LOST", 2417, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException("CONNECTION LOST", "CONNECTION LOST", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.getStackTrace();
      Object object0 = new Object();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("&}[T^IRi\"l.01F#y=DS", "[5");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("&}[T^IRi\"l.01F#y=DS", "", 0);
      sQLInvalidAuthorizationSpecException2.getStackTrace();
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException3.getSuppressed();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Nr", sQLInvalidAuthorizationSpecException0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      SQLException sQLException0 = new SQLException("&}[T^IRi\"l.01F#y=DS", sQLInvalidAuthorizationSpecException1);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLFeatureNotSupportedException0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("#n4z)qNHK]]os", 620);
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      Proxy proxy1 = Proxy.NO_PROXY;
      MockSocket mockSocket1 = new MockSocket(proxy0);
      mockSocket1.getPort();
      MockSocket mockSocket2 = new MockSocket(proxy1);
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      Proxy proxy2 = new Proxy(proxy_Type0, inetSocketAddress0);
      InetSocketAddress inetSocketAddress1 = MockInetSocketAddress.createUnresolved("client.controller.LocalControl", 0);
      Proxy.Type proxy_Type1 = Proxy.Type.HTTP;
      Proxy proxy3 = new Proxy(proxy_Type1, inetSocketAddress1);
      Proxy proxy4 = Proxy.NO_PROXY;
      MockSocket mockSocket3 = new MockSocket(proxy4);
      Proxy.Type proxy_Type2 = Proxy.Type.SOCKS;
      Proxy proxy5 = new Proxy(proxy_Type2, inetSocketAddress1);
      MockSocket mockSocket4 = new MockSocket(proxy4);
      mockSocket3.setReuseAddress(false);
      Integer integer0 = new Integer(620);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket1, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      int int0 = 0;
      int int1 = 2937;
      boolean boolean0 = true;
      int int2 = 3700;
      int[] intArray0 = new int[7];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int1;
      intArray0[3] = int2;
      intArray0[4] = int1;
      intArray0[5] = int1;
      intArray0[6] = int1;
      BombMoveMsg bombMoveMsg0 = new BombMoveMsg(int2, intArray0, intArray0, boolean0);
      ClientQuitRunningSessionMsg clientQuitRunningSessionMsg0 = new ClientQuitRunningSessionMsg(intArray0[1]);
      clientMsgReceiver0.processMsg(clientQuitRunningSessionMsg0);
      ClientMsgReceiver clientMsgReceiver1 = null;
      try {
        clientMsgReceiver1 = new ClientMsgReceiver(bomberClient0.server, bomberClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("common.network.MsgReceiver", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLFeatureNotSupportedException0);
      sQLTimeoutException0.spliterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Wait for game to start!", "A", "Couldn't close input stream", 135);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("KcXVz>[AK8OhR+S", "CONyNECT%ON LOST", "", 135);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Couldn't close input stream", "CONyNECT%ON LOST", (String) null, 135);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("Wait for game to start!", "Wait for game to start!", "A", 1723);
      stackTraceElementArray0[3] = stackTraceElement3;
      sQLTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      sQLNonTransientConnectionException0.addSuppressed(sQLTimeoutException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException("CONyNECT%ON LOST", "CONyNECT%ON LOST", sQLNonTransientConnectionException0);
      MockThrowable.getDefaultStackTrace();
      Object object0 = new Object();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLTimeoutException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      StackTraceElement[] stackTraceElementArray1 = sQLInvalidAuthorizationSpecException2.getStackTrace();
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException2.forEach(consumer0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLDataException0);
      sQLTimeoutException1.setStackTrace(stackTraceElementArray1);
      sQLInvalidAuthorizationSpecException1.getSuppressed();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      sQLInvalidAuthorizationSpecException1.getSuppressed();
      sQLInvalidAuthorizationSpecException2.getStackTrace();
      sQLInvalidAuthorizationSpecException2.getSuppressed();
      sQLInvalidAuthorizationSpecException2.getStackTrace();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException((String) null, sQLTimeoutException1);
      MockException mockException0 = new MockException(sQLFeatureNotSupportedException0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.displayErrorMessage();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
