/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 09:43:13 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7149457387057212
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<String, String> function0 = unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function1);
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm1);
      jSTerm0.add((Object) jSTerm1);
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      jSSubstitution0.add((Object) function0);
      UnaryOperator.identity();
      JSTerm jSTerm2 = new JSTerm();
      unaryOperator2.apply((Object) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      unaryOperator3.andThen((Function<? super String, ? extends String>) unaryOperator1);
      Function.identity();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      assertEquals("[not, [%%%, (this Collection)]]", jSTerm0.toString());
      
      jSTerm1.equals((JSPredicateForm) jSTerm2);
      jSTerm0.toStr();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("(not(%%%%%% ))", stringBuffer0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0622259981442395
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nn");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<String, String> function2 = unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function3);
      StringReader stringReader0 = new StringReader("nn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function.identity();
      jSSubstitution0.add((Object) function2);
      UnaryOperator.identity();
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1364891770417513
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nn");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<String, String> function2 = unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends String>) unaryOperator1);
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function3);
      StringReader stringReader0 = new StringReader("nn");
      stringReader0.mark(1343);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function.identity();
      jSSubstitution0.add((Object) function2);
      UnaryOperator.identity();
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4074765428331335
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertEquals(2, jSTerm0.size());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "not";
      jSTerm0.add((Object) "not");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      stringReader0.ready();
      stringReader0.markSupported();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3548015058139915
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-JBhDN:&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.pushBack();
      streamTokenizer0.ordinaryChars(2236, 39);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("5qf-JBhDN:&");
      StringReader stringReader2 = new StringReader("%%%");
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      assertEquals(10, jSPredicateForm0.capacity());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1363928385204862
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nn");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<String, String> function2 = unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends String>) unaryOperator1);
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function3);
      StringReader stringReader0 = new StringReader("nn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function.identity();
      jSSubstitution0.add((Object) function2);
      UnaryOperator.identity();
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Function<Object, Object> function0 = Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function1).apply(any());
      Function<Object, String> function2 = function0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = function2.compose((Function<? super Object, ?>) function0);
      Function<Object, Object> function4 = Function.identity();
      Function.identity();
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function6 = function2.compose((Function<? super Object, ?>) function5);
      Function<Object, String> function7 = function3.compose((Function<? super Object, ?>) function2);
      Function.identity();
      Function<Object, Object> function8 = function0.compose((Function<? super Object, ?>) function7);
      Function<Object, Object> function9 = Function.identity();
      function9.compose((Function<? super String, ?>) function6);
      function8.compose((Function<? super Integer, ?>) function4);
      Function<Object, Object> function10 = function4.andThen((Function<? super Object, ?>) function2);
      function8.compose((Function<? super Object, ?>) function10);
      function2.compose((Function<? super String, ?>) function10);
      Function<Object, String> function11 = function9.andThen((Function<? super Object, ? extends String>) function7);
      Function.identity();
      Function<Integer, Object> function12 = function8.compose((Function<? super Integer, ?>) function2);
      function11.andThen((Function<? super String, ?>) function2);
      function2.apply(function4);
      Integer integer0 = new Integer((-1));
      function11.apply(function12);
      Function.identity();
      Function.identity();
      Function.identity();
      Function<Object, String> function13 = function0.andThen((Function<? super Object, ? extends String>) function11);
      Function.identity();
      function8.compose((Function<? super Integer, ?>) function13);
      StringReader stringReader0 = new StringReader("(!(pqxq\"Hi+cd&;e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6888187137426884
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<String, String> function0 = unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function1);
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm1);
      jSTerm0.add((Object) jSTerm1);
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      jSSubstitution0.add((Object) function0);
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      unaryOperator2.apply((Object) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ? extends String>) unaryOperator1);
      Function.identity();
      jSTerm0.clonePF();
      assertEquals(2, jSTerm0.size());
      
      boolean boolean0 = jSTerm1.equals(jSPredicateForm0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.isGround();
      jSTerm0.setSize(768);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Integer> predicate1 = predicate0.negate();
      Integer integer0 = new Integer((-1610612698));
      predicate1.test(integer0);
      Predicate<Integer> predicate2 = predicate1.and(predicate0);
      jSSubstitution0.removeIf(predicate2);
      jSSubstitution0.standarizerSubs();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.setSize(768);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.retainAll(jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3594841863952412
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<String, String> function2 = unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function4 = unaryOperator1.andThen((Function<? super String, ? extends Integer>) function3);
      StringReader stringReader0 = new StringReader("o?t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      unaryOperator1.compose((Function<? super JSTerm, ? extends String>) function1);
      Function<Object, String> function5 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function.identity();
      UnaryOperator.identity();
      jSSubstitution0.add((Object) function2);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      System.setCurrentTimeMillis(2360L);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      unaryOperator0.andThen((Function<? super String, ? extends String>) unaryOperator3);
      function5.compose((Function<? super Object, ?>) unaryOperator2);
      unaryOperator0.andThen((Function<? super String, ? extends Integer>) function4);
      jSTerm0.toStr();
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9993169640567396
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = unaryOperator0.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends Integer>) function1);
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, String> function3 = unaryOperator0.compose((Function<? super Integer, ? extends String>) function2);
      stringReader0.reset();
      jSTerm1.add((Object) jSTerm1);
      jSTerm0.add((Object) jSTerm1);
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      jSSubstitution0.add((Object) function0);
      UnaryOperator.identity();
      jSTerm1.standarizerPredicateForm();
      Function.identity();
      unaryOperator1.apply((Object) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) function3);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.print();
      assertEquals("[not, [%%%, (this Collection)]]", jSTerm0.toString());
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.545727559299491
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = function1.andThen((Function<? super String, ? extends String>) unaryOperator1);
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function2);
      StringReader stringReader0 = new StringReader("nn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm1);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function4 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ? extends String>) function3);
      streamTokenizer0.nval = 0.0;
      Function.identity();
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      jSPredicateForm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      unaryOperator2.apply((Object) null);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      Function.identity();
      function1.compose((Function<? super Object, ?>) function4);
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.apply("nn");
      unaryOperator5.andThen((Function<? super String, ? extends String>) unaryOperator4);
      function3.compose((Function<? super Object, ?>) unaryOperator3);
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9303379533856173
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nn");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<String, String> function2 = unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function4 = function1.andThen((Function<? super String, ? extends String>) unaryOperator1);
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function3);
      StringReader stringReader0 = new StringReader("nn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm1);
      jSTerm0.add((Object) jSTerm1);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      jSSubstitution0.add((Object) function2);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      streamTokenizer0.nval = 0.0;
      Function.identity();
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      unaryOperator2.apply((Object) null);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super String, ? extends String>) unaryOperator4);
      function4.compose((Function<? super Object, ?>) unaryOperator3);
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      assertEquals("[nn, [%%%]]", jSPredicateForm2.toString());
      
      boolean boolean0 = jSTerm1.equals(jSPredicateForm1);
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = function1.andThen((Function<? super String, ? extends String>) unaryOperator1);
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function2);
      StringReader stringReader0 = new StringReader("nn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm1);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ? extends String>) function3);
      streamTokenizer0.nval = 0.0;
      Function.identity();
      jSTerm1.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      unaryOperator2.apply((Object) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm1.set((-1149), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1149
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SystemInUtil.addInputLine("Unexpected ) while reading Predicate");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSSubstitution");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(3163, 43);
      streamTokenizer0.ordinaryChars(43, 43);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Function<Object, Object> function0 = Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function1).apply(any());
      Function<Object, String> function2 = function0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = function2.compose((Function<? super Object, ?>) function0);
      Function<Object, Object> function4 = Function.identity();
      Function.identity();
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.compose((Function<? super Object, ?>) function5);
      Function<Object, String> function6 = function3.compose((Function<? super Object, ?>) function2);
      Function.identity();
      Function<Object, Object> function7 = function0.compose((Function<? super Object, ?>) function6);
      Function<Object, Object> function8 = Function.identity();
      Function<Object, Object> function9 = function4.andThen((Function<? super Object, ?>) function2);
      function7.compose((Function<? super Object, ?>) function9);
      function2.compose((Function<? super String, ?>) function9);
      Function<Object, String> function10 = function8.andThen((Function<? super Object, ? extends String>) function6);
      Function.identity();
      Function<Integer, Object> function11 = function7.compose((Function<? super Integer, ?>) function2);
      function10.andThen((Function<? super String, ?>) function2);
      function2.apply(function4);
      Integer integer0 = new Integer((-1));
      function10.apply(function11);
      Function.identity();
      Function.identity();
      Function.identity();
      Function<Object, String> function12 = function0.andThen((Function<? super Object, ? extends String>) function10);
      Function.identity();
      function7.compose((Function<? super Integer, ?>) function12);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(!(pqxq\"Hi+cd&;e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3771876589015464
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "";
      jSTerm0.add((Object) "");
      JSSubstitution jSSubstitution0 = null;
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.isEmpty();
      jSPredicateForm1.iterator();
      jSPredicateForm1.retainAll(jSPredicateForm0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSPredicateForm1.forEach(consumer0);
      jSPredicateForm1.print();
      jSPredicateForm0.toStr();
      jSPredicateForm1.standarizerPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSPredicateForm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("@FjXQmBY1");
      SystemInUtil.addInputLine("+-Iq2l?M");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("@FjXQmBY1");
      SystemInUtil.addInputLine("+-Iq2l?M");
      SystemInUtil.addInputLine("y6[W8NU");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      SystemInUtil.addInputLine("zFAy?{J ");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) "not";
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) "not";
      objectArray0[6] = (Object) "not";
      jSTerm0.toArray(objectArray0);
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.981327700366661
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-JB*hD:&");
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      jSTerm0.print();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm1.print();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm3.addElement(jSSubstitution0);
      jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSPredicateForm3.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SystemInUtil.addInputLine("5]fKBB/3uDP-");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(nusB=\"]q;1NP(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "n!%");
      jSTerm0.setSize(768);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clear();
      jSSubstitution0.retainAll(jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4779266835803924
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "no");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.isEmpty();
      StringReader stringReader0 = new StringReader("PlanningDomain: error");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "kiob-y8B_Sw";
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) "no";
      JSTerm jSTerm2 = (JSTerm)jSTerm0.lastElement();
      jSTerm2.toArray(objectArray0);
      objectArray0[3] = (Object) jSTerm2;
      objectArray0[4] = (Object) "kiob-y8B_Sw";
      objectArray0[5] = (Object) jSPredicateForm0;
      objectArray0[6] = (Object) jSTerm1;
      jSTerm2.add((Object) stringReader0);
      objectArray0[7] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      System.setCurrentTimeMillis(1814L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.clonePF();
      System.setCurrentTimeMillis(1814L);
      UnaryOperator.identity();
      UnaryOperator.identity();
      System.setCurrentTimeMillis(1040L);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7560447020241434
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nor");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm0.addAll((Collection) jSPredicateForm1);
      jSPredicateForm1.add((Object) jSTerm0);
      assertEquals("[nor]", jSTerm0.toString());
      
      jSPredicateForm1.toStr();
      jSPredicateForm1.toStr();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm1));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7824268046877836
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nor");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Object> function1 = unaryOperator0.andThen((Function<? super Object, ?>) function0);
      function0.apply("nor");
      Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function2).apply(any());
      Function<String, Integer> function3 = unaryOperator1.andThen((Function<? super String, ? extends Integer>) function2);
      Function.identity();
      function3.apply("nor");
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function3);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function5 = function1.compose((Function<? super Object, ?>) function0);
      Function<Object, String> function6 = function0.andThen((Function<? super Object, ? extends String>) function4);
      jSPredicateForm0.setSize(3602);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) function1);
      Function<Object, String> function7 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function6);
      Function.identity();
      unaryOperator0.apply("nor");
      unaryOperator0.compose((Function<? super String, ?>) function7);
      function5.compose((Function<? super Integer, ?>) function1);
      jSTerm0.clonePF();
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-JBhDN:&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("5qf-JBhDN:&");
      jSTerm1.makeEval(true);
      StringReader stringReader2 = new StringReader("%%%");
      stringReader2.markSupported();
      jSTerm1.add((Object) streamTokenizer0);
      stringReader1.markSupported();
      stringReader2.reset();
      stringReader1.markSupported();
      stringReader1.read();
      stringReader0.mark(53);
      System.setCurrentTimeMillis(53);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '~';
      charArray0[2] = 'p';
      StringReader stringReader3 = null;
      try {
        stringReader3 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "n!%");
      jSTerm0.setSize(768);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addAll((Collection) jSSubstitution0);
      jSSubstitution0.clear();
      jSSubstitution0.retainAll(jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super String, ?>) function1);
      unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = function1.andThen((Function<? super String, ? extends String>) unaryOperator1);
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function2);
      StringReader stringReader0 = new StringReader("nn");
      jSTerm0.add((Object) jSTerm0);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ? extends String>) function3);
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) null);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) function0);
      Function<Object, Object> function1 = Function.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) function1);
      jSTerm0.replaceAll(unaryOperator0);
      System.setCurrentTimeMillis(0L);
      long long0 = 1599L;
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.verticalL = 91;
      JSJshopVars.percent = (-373);
      JSJshopVars.rightPar = 93;
      jSPredicateForm0.setSize(93);
      JSJshopVars.lessT = 3217;
      JSJshopVars.colon = 93;
      JSJshopVars.verticalL = 93;
      JSJshopVars.verticalL = 93;
      JSJshopVars.rightPar = JSJshopVars.rightPar;
      JSJshopVars.rightPar = 93;
      JSJshopVars.astherisk = 3100;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-JBhDN:&");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.markSupported();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.commentChar((-1934343458));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.eolIsSignificant(true);
      StringReader stringReader1 = new StringReader("5qf-JBhDN:&");
      streamTokenizer0.pushBack();
      streamTokenizer0.whitespaceChars(2147483645, (-4077));
      jSTerm0.makeEval(false);
      stringReader0.read();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.wordChars(365, (-1969));
      StringReader stringReader2 = new StringReader("5qf-JBhDN:&");
      stringReader2.markSupported();
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0277013333517635
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noS");
      jSTerm0.standarizerPredicateForm();
      UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = function0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function4 = function2.compose((Function<? super Object, ?>) function0);
      Function<Object, Object> function5 = Function.identity();
      Function<Object, String> function6 = function2.compose((Function<? super Object, ?>) function4);
      function6.compose((Function<? super String, ?>) function3);
      Function<Object, Object> function7 = function0.compose((Function<? super Object, ?>) function4);
      function0.andThen((Function<? super Object, ?>) function6);
      Function<Object, Object> function8 = function5.andThen((Function<? super Object, ?>) function4);
      Function<Object, Object> function9 = Function.identity();
      Function<Object, Object> function10 = Function.identity();
      function5.compose((Function<? super Object, ?>) function9);
      function6.compose((Function<? super String, ?>) function10);
      function5.andThen((Function<? super Object, ? extends String>) function6);
      Function.identity();
      function2.andThen((Function<? super String, ?>) function7);
      Function.identity();
      Function<Object, Object> function11 = Function.identity();
      function8.compose((Function<? super Integer, ?>) function11);
      Function.identity();
      Function.identity();
      Function.identity();
      function8.andThen((Function<? super Object, ? extends String>) function6);
      Function.identity();
      Function.identity();
      function7.compose((Function<? super Integer, ?>) function4);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.print();
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.setSize(59);
      JSJshopVars.equalT = (-4177984);
      JSJshopVars.rightPar = 93;
      JSJshopVars.whiteSpace = 93;
      JSJshopVars.backquote = 93;
      JSJshopVars.percent = 93;
      JSJshopVars.rightPar = (-4177984);
      JSJshopVars.exclamation = (-4177984);
      JSJshopVars.semicolon = (-4177984);
      JSJshopVars.exclamation = (-4177984);
      JSJshopVars.rightPar = (-4177984);
      JSJshopVars.lessT = (-4177984);
      jSPredicateForm0.parallelStream();
      JSJshopVars.dot = (-4177984);
      JSJshopVars.colon = (-4177984);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5Yf-JBhD}=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.wordChars(264, 441);
      streamTokenizer0.nval = (double) 1596;
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.add((Object) "5Yf-JBhD}=");
      char[] charArray0 = new char[8];
      streamTokenizer1.ttype = (int) 'F';
      charArray0[1] = 'p';
      charArray0[5] = 'F';
      charArray0[3] = '$';
      charArray0[4] = 'T';
      charArray0[6] = 'C';
      charArray0[6] = ':';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      stringReader0.read();
      stringReader0.mark(0);
      streamTokenizer1.nval = 13.375469;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3221086830269158
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-JBhDN:&");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.pushBack();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.commentChar((-1934343458));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.lowerCaseMode(true);
      StringReader stringReader1 = new StringReader("5qf-JBhDN:&");
      streamTokenizer0.pushBack();
      jSTerm1.makeEval(true);
      stringReader0.read();
      stringReader0.ready();
      StringReader stringReader2 = new StringReader("%%%");
      stringReader1.markSupported();
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.add((Object) jSTerm0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-JBhDN:&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("5qf-JBhDN:&");
      StringReader stringReader2 = new StringReader("%%%");
      stringReader1.markSupported();
      stringReader0.markSupported();
      stringReader2.reset();
      stringReader1.markSupported();
      stringReader1.read();
      stringReader1.mark(53);
      System.setCurrentTimeMillis(53);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      stringReader2.ready();
      StringReader stringReader3 = new StringReader("%%%");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader1.read();
      stringReader0.ready();
      StringReader stringReader4 = new StringReader("5qf-JBhDN:&");
      stringReader4.ready();
      StringReader stringReader5 = null;
      try {
        stringReader5 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-JBhDN:&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      streamTokenizer0.ordinaryChars((-72069027), (-72069027));
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader1 = new StringReader("5qf-JBhDN:&");
      StringReader stringReader2 = new StringReader("%%%");
      stringReader1.markSupported();
      stringReader0.markSupported();
      stringReader2.reset();
      stringReader1.markSupported();
      stringReader1.read();
      stringReader1.mark(53);
      System.setCurrentTimeMillis(53);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      stringReader2.ready();
      StringReader stringReader3 = new StringReader("%%%");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader1.read();
      stringReader0.ready();
      StringReader stringReader4 = new StringReader("5qf-JBhDN:&");
      stringReader3.read();
      stringReader4.ready();
      StringReader stringReader5 = null;
      try {
        stringReader5 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nn");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.retainAll(jSSubstitution1);
      JSSubstitution jSSubstitution3 = null;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SystemInUtil.addInputLine("r`hC");
      SystemInUtil.addInputLine("`KB.0Yl9jQiU/y>r_");
      SystemInUtil.addInputLine("`KB.0Yl9jQiU/y>r_");
      SystemInUtil.addInputLine("`KB.0Yl9jQiU/y>r_");
      SystemInUtil.addInputLine("`KB.0Yl9jQiU/y>r_");
      SystemInUtil.addInputLine("@FOXQmE+oY1");
      SystemInUtil.addInputLine(": Error readi3g contr{l parameters: ");
      SystemInUtil.addInputLine(": Error readi3g contr{l parameters: ");
      SystemInUtil.addInputLine("@FOXQmE+oY1");
      SystemInUtil.addInputLine("h~\"yk[Eb5|2;j&");
      SystemInUtil.addInputLine("@FOXQmE+oY1");
      SystemInUtil.addInputLine("x%s");
      SystemInUtil.addInputLine("`KB.0Yl9jQiU/y>r_");
      SystemInUtil.addInputLine("72.0");
      SystemInUtil.addInputLine("h~\"yk[Eb5|2;j&");
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-JBhDN:&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "5qf-JBhDN:&";
      objectArray0[3] = (Object) streamTokenizer0;
      jSTerm0.firstElement();
      objectArray0[2] = (Object) "5.0";
      objectArray0[3] = (Object) streamTokenizer0;
      objectArray0[4] = (Object) stringReader0;
      objectArray0[0] = (Object) "5qf-JBhDN:&";
      jSTerm0.toArray(objectArray0);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.exclamation = (-3781);
      JSJshopVars.lessT = (-3781);
      JSJshopVars.whiteSpace = (-3781);
      JSJshopVars.lessT = (-3781);
      JSJshopVars.lessT = (-3781);
      JSJshopVars.equalT = (-3781);
      JSJshopVars.rightBrac = (-3781);
      JSJshopVars.rightPar = (-3781);
      JSJshopVars.greaterT = (-3781);
      JSJshopVars.whiteSpace = (-3781);
      JSJshopVars.rightBrac = (-3781);
      JSJshopVars.exclamation = (-3781);
      JSJshopVars.dot = (-3781);
      JSJshopVars.plus = (-3781);
      JSJshopVars.rightPar = (-3781);
      JSJshopVars.exclamation = (-3781);
      JSJshopVars.interrogation = (-3781);
      JSJshopVars.rightPar = (-3781);
      JSJshopVars.lessT = (-3781);
      JSJshopVars.plus = (-3781);
      JSJshopVars.whiteSpace = (-3781);
      JSJshopVars.coma = (-3781);
      JSJshopVars.dot = (-3781);
      JSJshopVars.flagLevel = (-3781);
      JSJshopVars.colon = (-3781);
      JSJshopVars.semicolon = (-3781);
      JSJshopVars.verticalL = (-3781);
      JSJshopVars.plus = (-3781);
      JSJshopVars.verticalL = (-3781);
      JSJshopVars.rightPar = JSJshopVars.rightPar;
      JSJshopVars.verticalL = (-3781);
      JSJshopVars.coma = (-3781);
      JSJshopVars.rightPar = (-3781);
      JSJshopVars.exclamation = (-3781);
      JSJshopVars.dot = (-3781);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0277013333517635
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noS");
      jSTerm0.standarizerPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = function0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function4 = function2.compose((Function<? super Object, ?>) function0);
      Function<Object, Object> function5 = Function.identity();
      Function.identity();
      Function<Object, String> function6 = function2.compose((Function<? super Object, ?>) function0);
      Function<String, String> function7 = Function.identity();
      Function.identity();
      Function<Object, Object> function8 = unaryOperator0.compose((Function<? super Object, ?>) unaryOperator0);
      Function<Object, String> function9 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, Object> function10 = Function.identity();
      function9.andThen((Function<? super String, ?>) function7);
      Function<Object, Object> function11 = function10.andThen((Function<? super Object, ?>) function0);
      function5.compose((Function<? super Object, ?>) function6);
      function2.compose((Function<? super String, ?>) function3);
      function11.compose((Function<? super String, ?>) function9);
      Function<Object, String> function12 = function8.andThen((Function<? super Object, ? extends String>) function4);
      function8.compose((Function<? super Integer, ?>) function4);
      Function.identity();
      function12.compose((Function<? super String, ?>) function0);
      Function.identity();
      function5.andThen((Function<? super Object, ? extends String>) function2);
      function11.andThen((Function<? super Object, ? extends String>) function2);
      Function.identity();
      jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("(noS)", stringBuffer0.toString());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.setSize(79);
      JSJshopVars.exclamation = (-3781);
      JSJshopVars.lessT = (-3781);
      JSJshopVars.equalT = (-3781);
      JSJshopVars.rightPar = 93;
      JSJshopVars.whiteSpace = 93;
      JSJshopVars.rightBrac = (-1306);
      JSJshopVars.plus = 93;
      JSJshopVars.rightPar = (-3781);
      JSJshopVars.exclamation = (-3781);
      JSJshopVars.rightPar = (-3781);
      JSJshopVars.lessT = (-3781);
      JSJshopVars.dot = (-3781);
      JSJshopVars.colon = (-3781);
      JSJshopVars.verticalL = (-3781);
      JSJshopVars.plus = (-3355);
      JSJshopVars.verticalL = (-3781);
      JSJshopVars.rightPar = JSJshopVars.rightPar;
      JSJshopVars.verticalL = (-3781);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.equalT = (-4177984);
      JSJshopVars.rightPar = 93;
      JSJshopVars.whiteSpace = 93;
      JSJshopVars.backquote = 93;
      JSJshopVars.percent = 93;
      JSJshopVars.rightPar = (-4177984);
      JSJshopVars.exclamation = (-4177984);
      JSJshopVars.semicolon = (-4177984);
      JSJshopVars.exclamation = (-4177984);
      JSJshopVars.rightPar = (-4177984);
      JSJshopVars.leftBrac = (-4177984);
      JSJshopVars.lessT = (-4177984);
      jSPredicateForm0.ensureCapacity(93);
      JSJshopVars.dot = (-4177984);
      Integer integer0 = new Integer((-4177984));
      jSPredicateForm0.addElement(integer0);
      JSJshopVars.colon = (-4177984);
      JSJshopVars.verticalL = (-4177984);
      JSJshopVars.verticalL = (-4177984);
      JSJshopVars.rightPar = JSJshopVars.rightPar;
      JSJshopVars.dot = (-4177984);
      JSJshopVars.rightPar = (-4177984);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.059448935610953
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nor");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      StringReader stringReader0 = new StringReader("kiob-y8B_Sw");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSPredicateForm0;
      objectArray0[2] = (Object) jSPredicateForm0;
      JSJshopVars.interrogation = 466;
      System.setCurrentTimeMillis(466);
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSSubstitution0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm1 = (JSPredicateForm)jSPredicateForm0.clone();
      jSSubstitution0.add((Object) jSPredicateForm1);
      jSPredicateForm0.sort((Comparator) null);
      jSTerm0.removeAll(jSPredicateForm0);
      jSTerm0.add((Object) unaryOperator0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm2.clonePF();
      // Undeclared exception!
      try { 
        jSPredicateForm2.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.UnaryOperator$$Lambda$44/550708101 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.exclamation = (-3781);
      JSJshopVars.lessT = (-3781);
      JSJshopVars.whiteSpace = (-3781);
      JSJshopVars.lessT = (-3781);
      JSJshopVars.lessT = (-3781);
      JSJshopVars.equalT = (-3781);
      JSJshopVars.rightBrac = (-3781);
      JSJshopVars.rightPar = (-3781);
      JSJshopVars.whiteSpace = (-3781);
      JSJshopVars.rightBrac = (-3781);
      JSJshopVars.exclamation = (-1881302851);
      JSJshopVars.dot = (-3781);
      JSJshopVars.plus = (-3781);
      JSJshopVars.rightPar = (-3781);
      JSJshopVars.exclamation = (-3781);
      JSJshopVars.interrogation = (-3781);
      JSJshopVars.rightPar = (-3781);
      JSJshopVars.lessT = (-3781);
      JSJshopVars.whiteSpace = (-3781);
      JSJshopVars.coma = (-3781);
      JSJshopVars.dot = (-3781);
      JSJshopVars.flagLevel = (-3781);
      JSJshopVars.colon = (-3781);
      JSJshopVars.semicolon = (-3781);
      JSJshopVars.verticalL = (-3781);
      JSJshopVars.backquote = (-3781);
      JSJshopVars.plus = (-3781);
      JSJshopVars.verticalL = (-3781);
      JSJshopVars.rightPar = JSJshopVars.rightPar;
      JSJshopVars.verticalL = (-3781);
      JSJshopVars.coma = (-3781);
      JSJshopVars.rightPar = (-3781);
      JSJshopVars.backquote = (-1487);
      JSJshopVars.dot = (-3781);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-JBhD:&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.wordChars(1596, 1596);
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.add((Object) "5qf-JBhD:&");
      stringReader0.reset();
      char[] charArray0 = new char[8];
      streamTokenizer1.ttype = (int) 'F';
      charArray0[1] = 'p';
      charArray0[5] = 'F';
      charArray0[3] = '$';
      charArray0[4] = 'T';
      charArray0[6] = 'C';
      charArray0[6] = ':';
      charArray0[7] = 'v';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      stringReader0.read();
      stringReader0.mark(0);
      streamTokenizer1.nval = 13.375469;
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.exclamation = (-3781);
      JSJshopVars.lessT = (-3781);
      JSJshopVars.whiteSpace = (-3781);
      JSJshopVars.lessT = (-3781);
      JSJshopVars.lessT = (-3781);
      JSJshopVars.equalT = (-3781);
      JSJshopVars.rightBrac = (-3781);
      Integer integer0 = new Integer((-3781));
      jSPredicateForm0.add((Object) integer0);
      JSJshopVars.rightPar = (-3781);
      JSJshopVars.greaterT = (-3781);
      JSJshopVars.whiteSpace = (-3781);
      JSJshopVars.rightBrac = (-3781);
      JSJshopVars.dot = (-3781);
      JSJshopVars.plus = (-3781);
      JSJshopVars.rightPar = (-3781);
      JSJshopVars.interrogation = (-3781);
      JSJshopVars.rightPar = (-3781);
      JSJshopVars.lessT = (-3781);
      JSJshopVars.plus = (-1432120587);
      JSJshopVars.whiteSpace = (-3781);
      JSJshopVars.coma = (-3781);
      JSJshopVars.dot = (-3781);
      JSJshopVars.flagLevel = (-3781);
      JSJshopVars.colon = (-3781);
      JSJshopVars.semicolon = (-3781);
      JSJshopVars.verticalL = (-3781);
      JSJshopVars.backquote = (-3781);
      JSJshopVars.plus = (-3781);
      JSJshopVars.verticalL = (-3781);
      JSJshopVars.rightPar = JSJshopVars.rightPar;
      SystemInUtil.addInputLine("n!%");
      JSJshopVars.verticalL = (-3781);
      JSJshopVars.rightPar = (-3781);
      JSJshopVars.backquote = (-3781);
      JSJshopVars.dot = (-3781);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Predicateform.print(): 0 elements");
      String string0 = "not";
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator.identity();
      JSJshopVars.lessT = 33;
      JSJshopVars.whiteSpace = 33;
      JSJshopVars.lessT = 33;
      JSJshopVars.lessT = 33;
      JSJshopVars.equalT = 33;
      JSJshopVars.rightBrac = 33;
      JSJshopVars.rightPar = 33;
      JSJshopVars.whiteSpace = 33;
      JSJshopVars.rightBrac = 33;
      JSJshopVars.plus = 33;
      JSJshopVars.rightPar = 33;
      JSJshopVars.interrogation = 33;
      JSJshopVars.lessT = 33;
      JSJshopVars.dot = 33;
      JSJshopVars.flagLevel = 33;
      JSJshopVars.colon = 33;
      JSJshopVars.semicolon = 33;
      JSJshopVars.verticalL = 33;
      JSJshopVars.backquote = 33;
      JSJshopVars.plus = (-3371);
      JSJshopVars.verticalL = 33;
      JSJshopVars.verticalL = 33;
      JSJshopVars.coma = (-3371);
      JSJshopVars.backquote = (-1487);
      StringReader stringReader0 = new StringReader("B3V-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.equalT = (-4177984);
      JSJshopVars.rightPar = 93;
      JSJshopVars.whiteSpace = 93;
      JSJshopVars.rightBrac = 93;
      JSJshopVars.backquote = 93;
      JSJshopVars.interrogation = (-1140735970);
      JSJshopVars.percent = 93;
      JSJshopVars.rightPar = (-4177984);
      JSJshopVars.exclamation = (-4177984);
      JSJshopVars.semicolon = (-4177984);
      JSJshopVars.exclamation = (-4177984);
      JSJshopVars.rightPar = (-4177984);
      JSJshopVars.lessT = (-4177984);
      JSJshopVars.colon = 93;
      JSJshopVars.dot = (-4177984);
      JSJshopVars.colon = (-4177984);
      JSJshopVars.verticalL = (-4177984);
      JSJshopVars.verticalL = (-4177984);
      JSJshopVars.rightPar = JSJshopVars.rightPar;
      StringReader stringReader0 = new StringReader("e2BY}T0P");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSPredicateForm0);
      jSTerm0.matches(jSPredicateForm0);
      JSSubstitution jSSubstitution0 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator0);
      JSJshopVars.lessT = 33;
      JSJshopVars.whiteSpace = 33;
      JSJshopVars.lessT = 33;
      JSJshopVars.lessT = 33;
      JSJshopVars.equalT = 33;
      JSJshopVars.rightBrac = 33;
      JSJshopVars.rightPar = 33;
      JSJshopVars.whiteSpace = 33;
      JSJshopVars.rightBrac = 33;
      JSJshopVars.plus = 33;
      JSJshopVars.rightPar = 33;
      JSJshopVars.interrogation = 33;
      JSJshopVars.lessT = 33;
      JSJshopVars.whiteSpace = 33;
      JSJshopVars.dot = 33;
      JSJshopVars.flagLevel = 33;
      JSJshopVars.colon = 33;
      JSJshopVars.semicolon = 33;
      JSJshopVars.verticalL = 33;
      JSJshopVars.backquote = 33;
      JSJshopVars.plus = (-3371);
      JSJshopVars.verticalL = 33;
      JSJshopVars.verticalL = 33;
      JSJshopVars.coma = (-3371);
      JSJshopVars.backquote = (-1487);
      JSJshopVars.dot = 33;
      System.setCurrentTimeMillis((-3371));
      StringReader stringReader0 = new StringReader("B3V-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SystemInUtil.addInputLine("dy}q_!ut?}hdamf");
      SystemInUtil.addInputLine("dy}q_!ut?}hdamf");
      SystemInUtil.addInputLine("dy}q_!ut?}hdamf");
      SystemInUtil.addInputLine("dy}q_!ut?}hdamf");
      SystemInUtil.addInputLine("@FOXQmE+oY1");
      SystemInUtil.addInputLine(": Error reading control parameters: ");
      SystemInUtil.addInputLine("gf)\"b{`^}3b[");
      SystemInUtil.addInputLine("gf)\"b{`^}3b[");
      SystemInUtil.addInputLine("y)6[}8NU");
      SystemInUtil.addInputLine("dy}q_!ut?}hdamf");
      SystemInUtil.addInputLine("dy}q_!ut?}hdamf");
      SystemInUtil.addInputLine("y)6[}8NU");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      assertEquals(10, jSPredicateForm0.capacity());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      System.setCurrentTimeMillis((-70L));
      System.setCurrentTimeMillis((-3807L));
      System.setCurrentTimeMillis(1234L);
      System.setCurrentTimeMillis(2781L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-507L));
      System.setCurrentTimeMillis(1765L);
      System.setCurrentTimeMillis(1661L);
      System.setCurrentTimeMillis(2411L);
      System.setCurrentTimeMillis((-507L));
      System.setCurrentTimeMillis(1765L);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.7774035244144605
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.exclamation = (-3781);
      JSJshopVars.lessT = (-3781);
      JSJshopVars.whiteSpace = (-3781);
      JSJshopVars.lessT = (-3781);
      JSJshopVars.lessT = (-3781);
      JSJshopVars.equalT = (-3781);
      JSJshopVars.rightBrac = (-3781);
      JSJshopVars.rightPar = (-3781);
      JSJshopVars.greaterT = (-3781);
      JSJshopVars.whiteSpace = (-3781);
      JSJshopVars.exclamation = (-3781);
      JSJshopVars.dot = (-3781);
      JSJshopVars.plus = (-3781);
      JSJshopVars.rightPar = (-3781);
      JSJshopVars.exclamation = (-3781);
      JSJshopVars.interrogation = (-3781);
      JSJshopVars.rightPar = (-3781);
      JSJshopVars.plus = (-3781);
      JSJshopVars.whiteSpace = (-3781);
      JSJshopVars.coma = (-3781);
      JSJshopVars.dot = (-3781);
      JSJshopVars.flagLevel = (-3781);
      JSJshopVars.colon = (-3781);
      JSJshopVars.semicolon = (-3781);
      JSJshopVars.verticalL = (-3781);
      JSJshopVars.backquote = (-3781);
      JSJshopVars.plus = (-3781);
      JSJshopVars.verticalL = (-3781);
      JSJshopVars.rightPar = JSJshopVars.rightPar;
      JSJshopVars.verticalL = (-3781);
      JSJshopVars.coma = (-3781);
      StringReader stringReader0 = new StringReader("(!(p}x@i+cd&;e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&&8N}Lw=%l");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer0.pushBack();
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.pushBack();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("5]fKBB/3uDP-");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("0l|oeq}9zb");
      SystemInUtil.addInputLine("y6[W8NU");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(+<Hvt$ddf");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&S8N}Lw=Jl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      int int0 = 482;
      streamTokenizer1.ordinaryChars((-4), 482);
      stringReader0.skip((-4));
      streamTokenizer0.pushBack();
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.pushBack();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SystemInUtil.addInputLine("r`hC");
      SystemInUtil.addInputLine("`KB.0Yl9jQiU/y>r_");
      SystemInUtil.addInputLine("`KB.0Yl9jQiU/y>r_");
      SystemInUtil.addInputLine("`KB.0Yl9jQiU/y>r_");
      SystemInUtil.addInputLine("`KB.0Yl9jQiU/y>r_");
      SystemInUtil.addInputLine("@FOXQmE+oY1");
      SystemInUtil.addInputLine(": Error readi3g contr{l parameters: ");
      SystemInUtil.addInputLine(": Error readi3g contr{l parameters: ");
      SystemInUtil.addInputLine("@FOXQmE+oY1");
      SystemInUtil.addInputLine("y)6}8EU");
      SystemInUtil.addInputLine("@FOXQmE+oY1");
      SystemInUtil.addInputLine("`KB.0Yl9jQiU/y>r_");
      SystemInUtil.addInputLine("72.0");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }
}
