/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 20:58:35 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Q");
      jSTerm0.ensureCapacity((-1854));
      char[] charArray0 = new char[6];
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      charArray0[0] = '0';
      charArray0[1] = 'I';
      charArray0[2] = '^';
      charArray0[3] = '!';
      jSTerm0.add((Object) jSTerm1);
      charArray0[4] = '0';
      charArray0[0] = '`';
      jSTerm1.makeEval(true);
      jSTerm0.matches((JSPredicateForm) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.24493002679463532
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("g)coI:w\"zi+v2tsew");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.sval = "g)coI:w\"zi+v2tsew";
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(41);
      Comparator<JSPredicateForm> comparator0 = (Comparator<JSPredicateForm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      UnaryOperator.identity();
      Function.identity();
      jSTerm0.parallelStream();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.ordinaryChar(6029);
      JSJshopVars.leftPar = 41;
      streamTokenizer0.resetSyntax();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) "not");
      Function.identity();
      jSTerm0.addAll((Collection) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "n&");
      jSTerm0.add((Object) null);
      jSTerm0.ensureCapacity((-1845));
      StringReader stringReader0 = new StringReader("n&");
      char[] charArray0 = new char[6];
      stringReader0.reset();
      stringReader0.reset();
      charArray0[1] = 'I';
      stringReader0.skip((-1845));
      jSTerm0.add((Object) stringReader0);
      charArray0[2] = '^';
      stringReader0.reset();
      stringReader0.ready();
      charArray0[3] = '!';
      stringReader0.skip((-1845));
      stringReader0.read();
      charArray0[4] = '+';
      charArray0[5] = 'n';
      stringReader0.read(charArray0);
      stringReader0.skip(110);
      stringReader0.read();
      System.setCurrentTimeMillis((-1));
      stringReader0.skip(1186L);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.ensureCapacity((-1845));
      char[] charArray0 = new char[6];
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      charArray0[0] = '0';
      charArray0[1] = 'I';
      charArray0[2] = '^';
      charArray0[3] = '!';
      charArray0[4] = '0';
      charArray0[5] = 'n';
      jSTerm1.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      int int0 = (-1854);
      jSTerm0.ensureCapacity((-1854));
      char[] charArray0 = new char[6];
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      charArray0[0] = '0';
      charArray0[1] = 'I';
      charArray0[2] = '^';
      charArray0[3] = '!';
      jSTerm0.add((Object) jSTerm1);
      charArray0[4] = '0';
      charArray0[0] = 'Q';
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.lastElement();
      Function<Integer, Integer> function0 = Function.identity();
      Function.identity();
      UnaryOperator.identity();
      jSSubstitution0.add((Object) jSTerm0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "not";
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) jSTerm0;
      Function.identity();
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = (Object) "not";
      objectArray0[7] = (Object) function0;
      jSTerm0.addAll((Collection) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("not");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.lastElement();
      Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.add((Object) null);
      Function.identity();
      jSTerm0.addAll((Collection) jSSubstitution0);
      unaryOperator0.apply("65#$sQ]mGR");
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<JSTerm, String> function0 = (Function<JSTerm, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<JSTerm, String> function1 = unaryOperator1.compose((Function<? super JSTerm, ? extends String>) function0);
      unaryOperator1.compose((Function<? super JSTerm, ? extends String>) function1);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<JSTerm, String> function2 = unaryOperator2.compose((Function<? super JSTerm, ? extends String>) function1);
      unaryOperator0.compose((Function<? super JSTerm, ? extends String>) function2);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.lastElement();
      Function<Integer, Integer> function0 = Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.add((Object) jSTerm0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "not";
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) jSTerm0;
      Function.identity();
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = (Object) "not";
      objectArray0[7] = (Object) function0;
      jSTerm0.addAll((Collection) jSSubstitution0);
      unaryOperator0.apply("Expecting Term");
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<JSTerm, String> function2 = unaryOperator0.compose((Function<? super JSTerm, ? extends String>) function1);
      unaryOperator1.compose((Function<? super JSTerm, ? extends String>) function2);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0114042647073516
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "nyt";
      jSTerm0.add((Object) "nyt");
      jSTerm0.parallelStream();
      StringReader stringReader0 = new StringReader("nyt");
      int int0 = 41;
      System.setCurrentTimeMillis(41);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.46341355882643
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("g)coI:w\"zi+v2tsew");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.sval = "g)coI:w\"zi+v2tsew";
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(41);
      Comparator<JSPredicateForm> comparator0 = (Comparator<JSPredicateForm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      UnaryOperator.identity();
      Function.identity();
      jSTerm0.parallelStream();
      stringReader0.reset();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.ordinaryChar(1380);
      JSJshopVars.leftPar = 41;
      jSTerm0.JSPredicateFormInit(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(tUA");
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-1611134474));
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Integer> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = predicate0.or(predicate1);
      Predicate<Integer> predicate3 = predicate2.and(predicate1);
      jSTerm0.removeIf(predicate3);
      jSTerm0.add((Object) "not");
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("not");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.5359610497090694
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "(tUA";
      StringReader stringReader0 = new StringReader("(tUA");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("operator");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4701319204088412
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nyt");
      StringReader stringReader0 = new StringReader("L>8LI`OZQN_N");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      jSPredicateForm1.addAll((Collection) jSPredicateForm0);
      jSPredicateForm0.addElement(jSTerm0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.standarizerPredicateForm();
      jSPredicateForm4.print();
      jSPredicateForm0.parallelStream();
      System.setCurrentTimeMillis((-1));
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm5 = new JSPredicateForm();
      jSPredicateForm5.spliterator();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.710493230055004
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm1.iterator();
      jSPredicateForm1.retainAll(jSPredicateForm0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm0.remove((Object) jSTerm0);
      Function.identity();
      Function.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSPredicateForm1.forEach(consumer0);
      jSPredicateForm1.print();
      jSPredicateForm0.toStr();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm2.toStr();
      jSPredicateForm2.setSize(1234);
      // Undeclared exception!
      try { 
        jSPredicateForm2.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.7595473914748635
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.astherisk = 91;
      JSJshopVars.rightPar = 93;
      JSJshopVars.colon = (-1610612734);
      JSJshopVars.verticalL = (-1610612734);
      JSJshopVars.rightPar = (-1610612734);
      System.setCurrentTimeMillis((-1610612734));
      System.setCurrentTimeMillis(93);
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm("(38|X|9 |VW.'dT*Qc");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) null);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator0.apply((Object) null);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.apply((Object) null);
      UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ?>) unaryOperator2);
      unaryOperator3.apply(".");
      unaryOperator0.compose((Function<? super Integer, ?>) unaryOperator1);
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator0);
      Function<Integer, Integer> function0 = Function.identity();
      unaryOperator3.apply("|");
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(115);
      function0.apply(integer0);
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      Function<Object, Integer> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      Integer integer1 = new Integer(115);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      function2.andThen((Function<? super Integer, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.apply(unaryOperator0);
      unaryOperator4.compose((Function<? super Object, ?>) unaryOperator5);
      Function.identity();
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator5.andThen((Function<? super Object, ? extends String>) function3);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(38|X|9 |VW.'dT*Qc");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.310783678099714
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-JBhD:&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      streamTokenizer0.slashStarComments(true);
      Function.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) streamTokenizer0);
      jSSubstitution0.add((Object) unaryOperator0);
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      jSSubstitution0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      System.setCurrentTimeMillis(35L);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      boolean boolean0 = jSTerm1.equals(jSPredicateForm0);
      assertFalse(boolean0);
      assertTrue(jSPredicateForm0.equals((Object)jSPredicateForm1));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6914343362809572
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nyt");
      StringReader stringReader0 = new StringReader("L>8LI`OZQN_N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.print();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.clonePF();
      jSPredicateForm1.addElement(jSTerm0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm3.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm5.standarizerPredicateForm();
      jSPredicateForm6.print();
      jSPredicateForm1.parallelStream();
      System.setCurrentTimeMillis(536L);
      System.setCurrentTimeMillis((-1));
      System.setCurrentTimeMillis((-1L));
      jSPredicateForm1.print();
      jSTerm0.toStr();
      JSPredicateForm jSPredicateForm7 = new JSPredicateForm();
      jSPredicateForm7.spliterator();
      JSPredicateForm jSPredicateForm8 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm1.equals(jSPredicateForm2);
      jSTerm0.toStr();
      JSPredicateForm jSPredicateForm9 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm8.print();
      jSPredicateForm9.standarizerPredicateForm();
      jSTerm0.standarizerPredicateForm();
      boolean boolean0 = jSPredicateForm1.equals(jSPredicateForm2);
      assertNotSame(jSPredicateForm2, jSPredicateForm4);
      assertFalse(boolean0);
      
      StringBuffer stringBuffer0 = jSPredicateForm1.toStr();
      assertEquals("(nyt(nyt ))", stringBuffer0.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "sal=gwsnoytsp");
      jSTerm0.add((Object) "sal=gwsnoytsp");
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "n&");
      jSTerm0.add((Object) null);
      jSTerm0.ensureCapacity((-1845));
      StringReader stringReader0 = new StringReader("n&");
      char[] charArray0 = new char[6];
      stringReader0.reset();
      stringReader0.reset();
      charArray0[1] = 'I';
      stringReader0.skip((-1845));
      jSTerm0.add((Object) stringReader0);
      charArray0[2] = '^';
      stringReader0.reset();
      stringReader0.ready();
      charArray0[3] = '!';
      stringReader0.skip((-1845));
      stringReader0.read();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[0];
      jSSubstitution0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-JBhD:&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), 482);
      long long0 = 0L;
      stringReader0.skip(0L);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.9231367675469941
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-JBhD:&");
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      jSSubstitution0.add((Object) null);
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSPredicateForm0, jSSubstitution2);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm1.print();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution2);
      stringReader0.read();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm3.addElement(jSSubstitution0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm1.applySubstitutionPF(jSSubstitution3);
      jSPredicateForm2.matches(jSPredicateForm3, jSSubstitution2);
      jSPredicateForm3.matches(jSPredicateForm2);
      jSPredicateForm4.standarizerPredicateForm();
      jSPredicateForm0.matches(jSPredicateForm2, jSSubstitution2);
      JSPredicateForm jSPredicateForm5 = jSPredicateForm2.clonePF();
      jSPredicateForm2.clonePF();
      JSPredicateForm jSPredicateForm6 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm6.addElement(jSPredicateForm5);
      JSPredicateForm jSPredicateForm7 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm8 = jSPredicateForm7.applySubstitutionPF(jSSubstitution2);
      jSSubstitution1.add((Object) jSPredicateForm6);
      jSTerm0.clear();
      jSPredicateForm4.equals(jSPredicateForm2);
      jSSubstitution1.add((Object) jSSubstitution0);
      System.setCurrentTimeMillis(168L);
      jSPredicateForm4.matches(jSPredicateForm8);
      // Undeclared exception!
      try { 
        jSPredicateForm5.matches(jSPredicateForm0, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "n&");
      jSTerm0.add((Object) null);
      jSTerm0.ensureCapacity((-1845));
      StringReader stringReader0 = new StringReader("n&");
      char[] charArray0 = new char[6];
      stringReader0.reset();
      stringReader0.reset();
      charArray0[1] = 'I';
      stringReader0.skip((-1845));
      jSTerm0.add((Object) stringReader0);
      charArray0[2] = '^';
      stringReader0.reset();
      stringReader0.ready();
      charArray0[3] = '!';
      stringReader0.skip((-1845));
      stringReader0.read();
      charArray0[4] = '+';
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.parallelStream();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null, jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-JBhDN:&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("5qf-JBhDN:&");
      char[] charArray0 = new char[2];
      stringReader1.ready();
      charArray0[0] = '0';
      stringReader1.ready();
      stringReader0.read(charArray0);
      StringReader stringReader2 = new StringReader("5qf-JBhDN:&");
      streamTokenizer0.ttype = 2;
      StringReader stringReader3 = new StringReader("5qf-JBhDN:&");
      System.setCurrentTimeMillis(2);
      System.setCurrentTimeMillis(3562L);
      System.setCurrentTimeMillis(2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5465986860485126
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7UrV=P2pGv#EJ%y3:T");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.resetSyntax();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.print();
      jSTerm0.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSTerm0.print();
      System.setCurrentTimeMillis(471L);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm2.addElement(stringReader0);
      Predicate<JSPredicateForm> predicate0 = Predicate.isEqual((Object) ":kGZ>^B5@KsP/|:1j");
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<JSPredicateForm> predicate2 = predicate0.and(predicate1);
      Predicate<JSPredicateForm> predicate3 = predicate2.negate();
      Predicate<JSPredicateForm> predicate4 = predicate3.or(predicate2);
      jSSubstitution1.removeIf(predicate4);
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.print();
      // Undeclared exception!
      try { 
        jSPredicateForm2.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-JBhDN:&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("5qf-JBhDN:&");
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '4';
      charArray0[2] = '\\';
      charArray0[3] = 'O';
      stringReader1.reset();
      charArray0[4] = 'G';
      stringReader1.read(charArray0);
      char[] charArray1 = new char[2];
      charArray1[0] = 'J';
      stringReader1.read(charArray1);
      stringReader1.skip(2);
      StringReader stringReader2 = new StringReader("5qf-JBhDN:&");
      StringReader stringReader3 = new StringReader("5qf-JBhDN:&");
      stringReader3.ready();
      stringReader0.markSupported();
      stringReader3.read(charArray0);
      StringReader stringReader4 = new StringReader("!");
      stringReader3.markSupported();
      stringReader1.ready();
      stringReader0.skip(2L);
      stringReader0.reset();
      stringReader0.read();
      stringReader1.mark(53);
      System.setCurrentTimeMillis(53);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      System.setCurrentTimeMillis(53);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9845459159938437
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nyt");
      StringReader stringReader0 = new StringReader("L>8LI`OZQN_N");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      jSTerm0.matches(jSPredicateForm1, jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.clonePF();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm2.addElement(jSTerm0);
      JSPredicateForm jSPredicateForm6 = jSPredicateForm5.clonePF();
      JSPredicateForm jSPredicateForm7 = jSPredicateForm4.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm8 = jSPredicateForm7.standarizerPredicateForm();
      jSPredicateForm8.print();
      jSPredicateForm2.parallelStream();
      assertEquals(1, jSTerm0.size());
      
      System.setCurrentTimeMillis((-1));
      jSPredicateForm2.print();
      jSPredicateForm5.parallelStream();
      jSPredicateForm1.toStr();
      JSPredicateForm jSPredicateForm9 = new JSPredicateForm();
      jSPredicateForm9.spliterator();
      jSPredicateForm4.matches(jSPredicateForm9, jSSubstitution0);
      jSPredicateForm2.equals(jSPredicateForm3);
      jSPredicateForm1.toStr();
      JSPredicateForm jSPredicateForm10 = jSPredicateForm3.standarizerPredicateForm();
      jSPredicateForm6.print();
      jSPredicateForm10.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm11 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm2.equals(jSPredicateForm5);
      jSPredicateForm11.toStr();
      JSPredicateForm jSPredicateForm12 = jSPredicateForm2.standarizerPredicateForm();
      boolean boolean0 = jSPredicateForm0.equals(jSPredicateForm12);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.lastElement();
      Function<Integer, Integer> function0 = Function.identity();
      Function.identity();
      UnaryOperator.identity();
      jSSubstitution0.add((Object) jSTerm0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "not";
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) jSTerm0;
      Function.identity();
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = (Object) "not";
      objectArray0[7] = (Object) function0;
      jSTerm0.addAll((Collection) jSSubstitution0);
      jSSubstitution0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "sal=gwsnoytsp");
      jSTerm0.add((Object) "sal=gwsnoytsp");
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.apply("sal=gwsnoytsp");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = function1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Object object0 = new Object();
      UnaryOperator.identity();
      function2.apply(unaryOperator0);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ?>) unaryOperator1);
      unaryOperator3.apply("iCv&4:");
      unaryOperator3.compose((Function<? super JSTerm, ? extends String>) function1);
      System.setCurrentTimeMillis(1570L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-J&hDx:M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader1 = new StringReader("5qf-J&hDx:M");
      char[] charArray0 = new char[19];
      charArray0[0] = '3';
      charArray0[1] = '4';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = 'G';
      stringReader1.read(charArray0);
      char[] charArray1 = new char[2];
      jSTerm1.makeEval(false);
      charArray1[0] = '0';
      stringReader1.read(charArray1);
      stringReader1.skip((-1));
      StringReader stringReader2 = new StringReader("5qf-J&hDx:M");
      StringReader stringReader3 = new StringReader("5qf-J&hDx:M");
      stringReader3.ready();
      stringReader0.markSupported();
      stringReader3.skip(0L);
      StringReader stringReader4 = new StringReader("!");
      stringReader3.markSupported();
      stringReader1.ready();
      stringReader0.read(charArray0);
      stringReader3.read();
      stringReader4.skip(2796L);
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-JBhDN:&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.ensureCapacity((-1100348282));
      StringReader stringReader1 = new StringReader("> ");
      StringReader stringReader2 = new StringReader("> ");
      stringReader2.reset();
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = '!';
      charArray0[2] = 'S';
      charArray0[3] = 'n';
      charArray0[4] = '^';
      charArray0[5] = 'n';
      charArray0[6] = '8';
      charArray0[7] = '0';
      stringReader2.read(charArray0);
      StringReader stringReader3 = new StringReader(" Term expected");
      stringReader3.read();
      stringReader2.skip(1186L);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.lastElement();
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSSubstitution0;
      jSSubstitution0.add((Object) "not");
      objectArray0[1] = (Object) function0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) "not";
      jSSubstitution0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "5qf-JBhD:&");
      jSTerm0.add((Object) null);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.apply("sal=gwsnoytsp");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      Function<String, String> function2 = Function.identity();
      Function<Object, String> function3 = function1.andThen((Function<? super String, ? extends String>) function2);
      Object object0 = new Object();
      UnaryOperator.identity();
      Integer integer0 = new Integer(1);
      Object object1 = jSTerm0.clone();
      function3.apply(object1);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator4);
      UnaryOperator.identity();
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator3.andThen((Function<? super String, ?>) function4);
      unaryOperator0.apply("n/ot");
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.compose((Function<? super JSTerm, ? extends String>) function3);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noR");
      jSTerm0.ensureCapacity((-4379));
      jSTerm0.parallelStream();
      Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.apply("noR");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = function1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function.identity();
      Object object0 = new Object();
      UnaryOperator.identity();
      function1.apply(object0);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ?>) function2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends Integer>) function3);
      Function.identity();
      unaryOperator1.apply("o2|0?");
      Function<Object, Object> function4 = Function.identity();
      unaryOperator2.andThen((Function<? super String, ?>) function4);
      function2.compose((Function<? super Object, ?>) function4);
      unaryOperator1.apply("");
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      assertFalse(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("SX");
      char[] charArray0 = new char[9];
      charArray0[0] = '}';
      charArray0[1] = '0';
      charArray0[2] = 'o';
      charArray0[3] = '6';
      charArray0[4] = ')';
      charArray0[5] = '}';
      charArray0[6] = '}';
      charArray0[7] = '}';
      charArray0[8] = '}';
      stringReader1.read(charArray0);
      stringReader1.reset();
      StringReader stringReader2 = new StringReader("SX");
      stringReader2.read();
      stringReader2.read();
      stringReader1.mark(88);
      System.setCurrentTimeMillis(0L);
      jSTerm0.equals((JSPredicateForm) null);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "sal=gwsnoytsp");
      jSTerm0.add((Object) "sal=gwsnoytsp");
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "sal=gwsnoytsp");
      jSTerm0.add((Object) "sal=gwsnoytsp");
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.apply("sal=gwsnoytsp");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = function1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Object object0 = new Object();
      UnaryOperator.identity();
      function2.apply(unaryOperator0);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ?>) unaryOperator1);
      unaryOperator3.apply("iCv&4:");
      unaryOperator3.compose((Function<? super JSTerm, ? extends String>) function1);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator2.apply("G85~^{wa@6h");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator3.compose((Function<? super Object, ? extends String>) function0);
      Function<String, String> function2 = Function.identity();
      Function<Object, String> function3 = function1.andThen((Function<? super String, ? extends String>) function2);
      Object object0 = new Object();
      UnaryOperator.identity();
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function5 = function3.andThen((Function<? super String, ? extends Integer>) function4);
      unaryOperator3.compose((Function<? super Object, ? extends String>) function3);
      Integer integer0 = new Integer(1);
      function1.apply(unaryOperator0);
      UnaryOperator.identity();
      Function.identity();
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator2);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super String, ? extends Integer>) function5);
      Function.identity();
      unaryOperator5.andThen((Function<? super String, ?>) function2);
      function1.compose((Function<? super Object, ?>) unaryOperator0);
      unaryOperator4.apply("l\"D?gu^gts7{!B");
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super JSTerm, ? extends String>) function1);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-JBhDN:&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("5qf-JBhDN:&");
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '4';
      charArray0[2] = '\\';
      charArray0[3] = 'O';
      charArray0[4] = 'G';
      stringReader1.read(charArray0);
      char[] charArray1 = new char[2];
      jSTerm1.makeEval(true);
      charArray1[0] = '0';
      stringReader1.read(charArray1);
      stringReader1.skip(2);
      StringReader stringReader2 = new StringReader("5qf-JBhDN:&");
      StringReader stringReader3 = new StringReader("5qf-JBhDN:&");
      stringReader3.ready();
      stringReader0.markSupported();
      StringReader stringReader4 = new StringReader("!");
      stringReader3.markSupported();
      stringReader1.ready();
      stringReader0.read(charArray0);
      stringReader3.read();
      stringReader4.skip(2796L);
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.exclamation = 963;
      JSJshopVars.semicolon = 3011;
      JSJshopVars.rightPar = 93;
      JSJshopVars.backquote = 963;
      JSJshopVars.minus = 93;
      JSJshopVars.colon = 93;
      JSJshopVars.verticalL = 93;
      JSJshopVars.leftPar = 93;
      JSJshopVars.semicolon = (-3);
      JSJshopVars.rightPar = 93;
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "n&");
      jSTerm0.ensureCapacity((-1845));
      StringReader stringReader0 = new StringReader("n&");
      char[] charArray0 = new char[6];
      stringReader0.reset();
      stringReader0.reset();
      charArray0[1] = 'I';
      jSTerm0.add((Object) stringReader0);
      charArray0[2] = '^';
      stringReader0.reset();
      stringReader0.ready();
      charArray0[3] = '!';
      stringReader0.skip((-1845));
      stringReader0.read();
      charArray0[4] = '+';
      charArray0[5] = 'n';
      stringReader0.read(charArray0);
      stringReader0.skip(110);
      stringReader0.read();
      stringReader0.skip(1186L);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.rightPar = 93;
      JSJshopVars.colon = 93;
      JSJshopVars.verticalL = 93;
      JSJshopVars.semicolon = (-3);
      JSJshopVars.exclamation = 93;
      JSJshopVars.apostrophe = 93;
      jSPredicateForm0.removeAllElements();
      JSJshopVars.rightPar = 93;
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(93);
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.exclamation = (-1232);
      JSJshopVars.exclamation = (-1232);
      JSJshopVars.semicolon = 3011;
      JSJshopVars.rightPar = 93;
      JSJshopVars.backquote = (-1232);
      JSJshopVars.minus = 93;
      JSJshopVars.colon = 93;
      JSJshopVars.verticalL = 93;
      JSJshopVars.leftPar = 93;
      JSJshopVars.semicolon = (-3);
      JSJshopVars.apostrophe = 93;
      JSJshopVars.rightPar = 93;
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-JBhD:&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.nval = streamTokenizer0.nval;
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.quoteChar(1448);
      streamTokenizer0.nextToken();
      streamTokenizer1.ordinaryChar((-2));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5qf-JBhD:&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.ttype = (-1132);
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.whitespaceChars(2, 2);
      streamTokenizer0.nextToken();
      streamTokenizer1.ordinaryChar((-2));
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.quoteChar((-2));
      stringReader0.read();
      stringReader0.mark(0);
      System.setCurrentTimeMillis(2979);
      System.setCurrentTimeMillis(102);
      System.setCurrentTimeMillis((-2998L));
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.exclamation = (-1232);
      JSJshopVars.exclamation = (-1232);
      JSJshopVars.semicolon = (-1232);
      JSJshopVars.rightPar = 93;
      JSJshopVars.backquote = (-1232);
      JSJshopVars.minus = 93;
      JSJshopVars.colon = 93;
      JSJshopVars.verticalL = 93;
      JSJshopVars.leftPar = 93;
      JSJshopVars.semicolon = (-3);
      JSJshopVars.apostrophe = 93;
      JSJshopVars.rightPar = 93;
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.exclamation = (-1232);
      JSJshopVars.exclamation = (-1232);
      JSJshopVars.semicolon = 3011;
      JSJshopVars.rightPar = 93;
      JSJshopVars.backquote = (-1232);
      JSJshopVars.minus = 93;
      JSJshopVars.colon = 93;
      JSJshopVars.verticalL = 93;
      JSJshopVars.semicolon = (-3);
      JSJshopVars.apostrophe = 93;
      JSJshopVars.rightPar = 93;
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(0, stringBuffer0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSJshopVars.exclamation = (-1230);
      JSJshopVars.rightPar = 93;
      JSJshopVars.colon = 93;
      JSJshopVars.semicolon = 0;
      JSJshopVars.rightPar = 124;
      System.setCurrentTimeMillis(93);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ?>) unaryOperator2);
      unaryOperator3.apply(".");
      unaryOperator0.compose((Function<? super Integer, ?>) unaryOperator1);
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator0);
      Function<Integer, Integer> function0 = Function.identity();
      unaryOperator3.apply("|");
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Integer integer0 = new Integer(115);
      function0.apply(integer0);
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      Function<Object, Integer> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      function2.apply(unaryOperator2);
      Integer integer1 = new Integer(115);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      function2.andThen((Function<? super Integer, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      unaryOperator5.compose((Function<? super String, ?>) unaryOperator4);
      unaryOperator6.apply(unaryOperator0);
      unaryOperator5.compose((Function<? super Object, ?>) unaryOperator6);
      Function.identity();
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator6.andThen((Function<? super Object, ? extends String>) function3);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(38|X|9 |VW.'dT*Qc");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      System.setCurrentTimeMillis((-4736L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-4736L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.rightPar = 93;
      JSJshopVars.colon = 93;
      JSJshopVars.verticalL = 93;
      JSJshopVars.semicolon = (-3);
      JSJshopVars.apostrophe = 93;
      JSJshopVars.rightPar = 93;
      System.setCurrentTimeMillis((-3));
      System.setCurrentTimeMillis(93);
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 93;
      int int1 = (-1442388801);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
