/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 20:40:33 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.07063917993131
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("G7VX)/[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      stringReader0.read();
      streamTokenizer0.whitespaceChars(1574, 1574);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      streamTokenizer0.ordinaryChar(1574);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.ordinaryChar(41);
      System.setCurrentTimeMillis(0L);
      jSTerm1.call();
      jSTerm1.print();
      System.setCurrentTimeMillis(1201L);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.08055716002842
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0 ~fm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = null;
      jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm0.makeEval(true);
      JSJshopVars.verticalL = (-2);
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.453861657383793
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.trimToSize();
      jSTerm0.add((Object) "vKtj?q~_=kR:n`2Hd.J");
      StringReader stringReader0 = new StringReader("F?{DtJ$NW");
      jSTerm0.clonePF();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm2.matches(jSTerm1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = jSTerm3.matches(jSTerm2);
      JSTerm jSTerm4 = jSTerm3.call();
      jSTerm3.makeVariable();
      StringReader stringReader1 = new StringReader("6+s%n)~i^o");
      jSTerm2.equals(jSTerm1);
      jSTerm4.matches(jSTerm0, jSSubstitution2);
      jSTerm3.standardizerTerm();
      jSTerm1.cloneT();
      jSTerm4.print();
      JSTerm jSTerm5 = jSTerm1.call();
      jSTerm5.cloneT();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0581822139380055
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<JSSubstitution> predicate4 = predicate0.or(predicate3);
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      StringReader stringReader0 = new StringReader(",");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      jSSubstitution0.add((Object) predicate3);
      jSTerm0.clone();
      predicate5.negate();
      Predicate.isEqual((Object) predicate1);
      predicate3.test((JSSubstitution) null);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) jSTerm0);
      predicate2.test(jSSubstitution0);
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      predicate7.and(predicate1);
      Predicate<Object> predicate8 = predicate1.or(predicate7);
      predicate8.and(predicate6);
      predicate8.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution1);
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      predicate2.negate();
      predicate4.negate();
      jSTerm0.isGround();
      System.setCurrentTimeMillis((-4));
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isConstant());
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0);
      assertTrue(jSTerm1.isFunction());
      assertEquals(2, jSTerm1.size());
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3269201940506905
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      Predicate.isEqual((Object) predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate2.negate();
      Predicate<JSSubstitution> predicate4 = predicate2.and(predicate3);
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      JSTerm jSTerm1 = new JSTerm();
      predicate5.negate();
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate1.or(predicate7);
      Predicate<Object> predicate10 = predicate8.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) predicate7);
      Predicate<JSSubstitution> predicate11 = predicate0.negate();
      predicate10.negate();
      jSSubstitution0.add((Object) predicate4);
      predicate9.test(jSSubstitution0);
      predicate9.and(predicate6);
      predicate9.negate();
      jSTerm0.add((Object) jSTerm1);
      predicate11.and(predicate10);
      predicate2.negate();
      predicate11.negate();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6015683031684986
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "vKtj?q~_=kR:n`2Hd.J");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("vKtj?q~_=kR:n`2Hd.J");
      jSTerm0.equals(jSTerm2);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm2, jSSubstitution1);
      jSTerm2.matches(jSTerm0, jSSubstitution2);
      jSTerm1.equals(jSTerm2);
      jSTerm0.equals(jSTerm2);
      System.setCurrentTimeMillis(0L);
      jSTerm0.applySubstitutionT(jSSubstitution2);
      jSTerm1.standardizerTerm();
      jSTerm2.print();
      System.setCurrentTimeMillis(197);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      jSTerm1.print();
      jSTerm1.call();
      JSTerm jSTerm5 = jSTerm3.cloneT();
      JSTerm jSTerm6 = jSTerm0.applySubstitutionT(jSSubstitution2);
      jSTerm6.equals(jSTerm5);
      jSTerm2.isGround();
      jSTerm6.call();
      jSTerm4.standardizerTerm();
      jSTerm3.cloneT();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.test(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) jSSubstitution0);
      predicate3.negate();
      Predicate<JSSubstitution> predicate4 = Predicate.isEqual((Object) predicate1);
      predicate0.and(predicate4);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate5);
      predicate1.or(predicate6);
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      predicate2.test(jSSubstitution0);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4460487396401422
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSJshopVars.exclamation = 0;
      StringReader stringReader0 = new StringReader("notequal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm2.makeEval(true);
      jSTerm0.isEval();
      streamTokenizer0.ordinaryChar((-2788));
      jSTerm0.isEval();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm3.removeElementAt(0);
      jSTerm3.clone();
      jSTerm0.makeEval(false);
      JSTerm jSTerm4 = jSTerm0.cloneT();
      jSTerm0.print();
      stringReader0.close();
      jSTerm4.makeEval(true);
      jSTerm0.isGround();
      jSTerm1.listIterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm3.matches(jSTerm5, jSSubstitution0);
      StringReader stringReader1 = new StringReader("notequal");
      StringReader stringReader2 = new StringReader("notequal");
      jSTerm5.trimToSize();
      jSTerm0.matches(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm4.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.715263227902811
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSJshopVars.exclamation = 0;
      StringReader stringReader0 = new StringReader("notequal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      jSTerm0.standarizerPredicateForm();
      jSTerm0.clone();
      boolean boolean0 = true;
      jSTerm0.makeEval(true);
      jSTerm0.isEval();
      jSTerm0.isEval();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.037734194785151
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate0.or(predicate3);
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      StringReader stringReader0 = new StringReader(",");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      jSSubstitution0.add((Object) predicate3);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      Predicate.isEqual((Object) jSTerm1);
      Predicate.isEqual((Object) predicate1);
      predicate3.test(jSSubstitution0);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) jSTerm0);
      predicate2.test(jSSubstitution0);
      Predicate<Object> predicate5 = predicate1.and(predicate4);
      predicate5.and(predicate1);
      Predicate<Object> predicate6 = predicate1.or(predicate5);
      predicate6.and(predicate4);
      predicate6.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution1);
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm2);
      predicate2.negate();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm3.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6015683031684986
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "GCGjHA&\"&5M&");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      jSTerm1.equals(jSTerm1);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      jSTerm1.isGround();
      jSTerm1.cloneT();
      jSTerm0.print();
      jSTerm1.call();
      jSTerm0.matches(jSTerm1);
      jSTerm0.isGround();
      jSTerm0.matches(jSTerm0, jSSubstitution2);
      jSTerm1.print();
      jSTerm1.print();
      jSTerm0.equals(jSTerm1);
      System.setCurrentTimeMillis(0L);
      jSTerm0.applySubstitutionT(jSSubstitution2);
      jSTerm1.standardizerTerm();
      jSTerm1.print();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm1.cloneT();
      jSTerm2.print();
      jSTerm1.clonePF();
      System.setCurrentTimeMillis(1L);
      jSTerm0.print();
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      StringReader stringReader1 = new StringReader("( ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChars((-447), (-4));
      streamTokenizer1.commentChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.whitespaceChars((-3), 1);
      StringReader stringReader2 = new StringReader("hY^]gx");
      jSTerm0.ensureCapacity(139);
      streamTokenizer2.whitespaceChars((-4), (-447));
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6015683031684986
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "GCGjHA&\"&5&M&T");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0);
      jSTerm0.isVariable();
      jSTerm0.matches(jSTerm0);
      jSTerm0.isGround();
      jSTerm0.cloneT();
      jSTerm0.print();
      jSTerm0.call();
      jSTerm0.matches(jSTerm0);
      jSTerm0.isGround();
      jSTerm0.matches(jSTerm0, jSSubstitution1);
      jSTerm0.print();
      jSTerm0.print();
      jSTerm0.equals(jSTerm0);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.cloneT();
      jSTerm0.standardizerTerm();
      jSTerm0.print();
      System.setCurrentTimeMillis(197);
      jSTerm0.cloneT();
      jSTerm0.clonePF();
      System.setCurrentTimeMillis(197);
      jSTerm0.print();
      System.setCurrentTimeMillis(197);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.796311640173813
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%B(PASM)]jz_C6I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.get(2393);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2393
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2510486588729868
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.and(predicate1);
      predicate0.and(predicate2);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) "Undefined function to be evaluated  in Call statement");
      predicate1.or(predicate3);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      predicate4.or(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.or(predicate1);
      predicate0.or(predicate4);
      StringReader stringReader0 = new StringReader(",");
      Predicate.isEqual((Object) stringReader0);
      jSTerm0.add((Object) "LCo aC~@cgn>3ns_A\"y");
      StringReader stringReader1 = new StringReader(",");
      StringReader stringReader2 = new StringReader("KPo6");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSJshopVars.interrogation = 62;
      jSTerm2.setSize(1578);
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm4 = jSTerm3.call();
      jSTerm4.call();
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.068513497359536
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("G7VX)/[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.whitespaceChars(1574, 8);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      streamTokenizer1.ordinaryChar(41);
      JSJshopVars.verticalL = 59;
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer1.ordinaryChar(1574);
      System.setCurrentTimeMillis(71L);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.set(2, ">lGec6nwV");
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0291545628109144
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      unaryOperator0.apply("/");
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      function1.apply((Object) null);
      StringReader stringReader0 = new StringReader("G7VX)/[");
      function1.andThen((Function<? super String, ?>) unaryOperator0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      jSSubstitution0.add((Object) function1);
      streamTokenizer0.slashStarComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSJshopVars.verticalL = 1574;
      streamTokenizer0.eolIsSignificant(false);
      stringReader0.read();
      System.setCurrentTimeMillis(71L);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm1.matches(jSTerm1, jSSubstitution0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-206L));
      jSTerm0.matches(jSTerm1);
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      assertEquals(41, streamTokenizer0.ttype);
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.854806284951481
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChars((-4), 2703);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-4), 2703);
      streamTokenizer1.commentChar(2703);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.whitespaceChars((-3), 12);
      streamTokenizer0.ordinaryChar((-3));
      streamTokenizer2.parseNumbers();
      streamTokenizer2.ttype = (-4);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.pushBack();
      streamTokenizer2.nval = (double) (-4);
      streamTokenizer2.sval = "M";
      streamTokenizer2.quoteChar(33);
      streamTokenizer2.whitespaceChars((-4), (-437));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.159731616075493
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "vKtj?q~_=kR:n`2Hd.J");
      StringReader stringReader0 = new StringReader("F?{DtJ$NW");
      jSTerm0.clonePF();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.makeVariable();
      StringReader stringReader1 = new StringReader("$>57BW.PD/_O}");
      jSTerm0.equals(jSTerm2);
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      int int0 = 197;
      jSTerm2.clone();
      // Undeclared exception!
      try { 
        jSTerm2.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1295580771832303
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("G7VX)/[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.parseList(streamTokenizer0);
      streamTokenizer0.nval = (double) 1574;
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSJshopVars.minus = 34;
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSJshopVars.apostrophe = 4309;
      JSTerm jSTerm5 = jSTerm2.cloneT();
      JSPredicateForm jSPredicateForm0 = jSTerm5.clonePF();
      jSTerm2.standardizerTerm();
      JSJshopVars.apostrophe = 124;
      JSTerm jSTerm6 = jSTerm3.cloneT();
      JSTerm jSTerm7 = jSTerm5.cloneT();
      JSTerm jSTerm8 = jSTerm6.applySubstitutionT(jSSubstitution0);
      jSTerm8.removeAll(jSPredicateForm0);
      JSJshopVars.minus = (-950);
      System.setCurrentTimeMillis(124);
      jSTerm3.applySubstitutionT(jSSubstitution0);
      jSTerm7.standardizerTerm();
      jSTerm4.cloneT();
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.130689306584121
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("G7VX)/[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSSubstitution0.parallelStream();
      streamTokenizer0.whitespaceChars(24, (-577));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.parseList(streamTokenizer1);
      System.setCurrentTimeMillis((-101L));
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1513220799212713
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "vKtj?q~_=kR:n`2Hd.J");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm1.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      Predicate<JSSubstitution> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate0);
      predicate1.negate();
      predicate1.test((Object) null);
      Predicate<JSSubstitution> predicate5 = predicate0.and(predicate1);
      predicate1.test(predicate2);
      Predicate.isEqual((Object) predicate1);
      predicate2.and(predicate5);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSTerm0.add((Object) predicate2);
      StringReader stringReader0 = new StringReader("G7VX)/[");
      predicate3.and(predicate2);
      predicate5.and(predicate2);
      predicate2.or(predicate0);
      predicate0.negate();
      predicate0.negate();
      Predicate<Object> predicate6 = predicate1.and(predicate4);
      predicate4.and(predicate1);
      predicate6.or(predicate1);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate2);
      predicate6.and(predicate7);
      predicate1.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = jSTerm0.clone();
      Predicate.isEqual(object0);
      jSTerm0.clone();
      jSTerm0.add((Object) null);
      Predicate<JSSubstitution> predicate8 = predicate0.negate();
      predicate8.negate();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<JSSubstitution> predicate4 = predicate0.or(predicate3);
      predicate3.and(predicate4);
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      jSSubstitution0.add((Object) predicate3);
      jSTerm0.clone();
      predicate5.negate();
      Predicate<JSSubstitution> predicate6 = Predicate.isEqual((Object) predicate1);
      predicate3.test(jSSubstitution0);
      Predicate<Object> predicate7 = predicate1.negate();
      predicate2.test(jSSubstitution0);
      Predicate<Object> predicate8 = predicate1.and(predicate7);
      Predicate<Object> predicate9 = predicate8.and(predicate1);
      Predicate<Object> predicate10 = predicate1.or(predicate8);
      predicate9.negate();
      jSSubstitution0.add((Object) predicate7);
      Predicate<Object> predicate11 = predicate8.and(predicate9);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) predicate11);
      predicate0.negate();
      predicate7.or(predicate1);
      jSSubstitution1.add((Object) predicate6);
      predicate10.test(jSSubstitution1);
      predicate10.and(predicate7);
      predicate10.negate();
      Predicate.isEqual((Object) jSSubstitution0);
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      predicate2.negate();
      System.setCurrentTimeMillis((-2124L));
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(124, stringBuffer0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSJshopVars.dot = (-3);
      jSTerm0.trimToSize();
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-1445421684), (-3));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.commentChar(159);
      StringReader stringReader1 = new StringReader("` ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.sval = "abR0#q7";
      System.setCurrentTimeMillis((-1329L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6094379124341003
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("A7Vl)/[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      jSTerm0.makeVariable();
      StringReader stringReader1 = new StringReader("$>57BW.PD/_O}");
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.percent = (-4);
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2, jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      predicate2.test((JSSubstitution) null);
      predicate1.test(predicate0);
      predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate3 = Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      Predicate.isEqual((Object) predicate3);
      jSTerm0.add((Object) null);
      StringReader stringReader0 = new StringReader("");
      Object object0 = new Object();
      Predicate.isEqual(object0);
      jSTerm0.add((Object) null);
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("");
      StringReader stringReader3 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      System.setCurrentTimeMillis(239L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      predicate2.test((JSSubstitution) null);
      predicate3.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.test(jSSubstitution0);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      Predicate<JSSubstitution> predicate5 = predicate2.or(predicate1);
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      predicate4.or(predicate5);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate6 = predicate1.negate();
      predicate3.negate();
      predicate6.negate();
      predicate1.and(predicate6);
      jSTerm0.add((Object) jSSubstitution1);
      predicate3.negate();
      Predicate<JSSubstitution> predicate7 = predicate2.negate();
      predicate7.and(predicate1);
      Predicate<JSSubstitution> predicate8 = predicate0.and(predicate7);
      predicate8.test(jSSubstitution0);
      predicate7.or(predicate2);
      predicate8.or(predicate4);
      Predicate<JSSubstitution> predicate9 = predicate4.negate();
      predicate9.test(jSSubstitution1);
      predicate9.and(predicate3);
      predicate7.negate();
      predicate8.or(predicate9);
      predicate8.negate();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      predicate2.test((JSSubstitution) null);
      predicate3.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.test(jSSubstitution0);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<JSSubstitution> predicate5 = predicate2.or(predicate1);
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      predicate4.or(predicate5);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      predicate1.negate();
      predicate1.and(predicate1);
      jSTerm0.add((Object) jSSubstitution2);
      Predicate<JSSubstitution> predicate6 = predicate2.negate();
      predicate6.and(predicate1);
      Predicate<JSSubstitution> predicate7 = predicate0.and(predicate6);
      predicate7.test(jSSubstitution1);
      predicate6.or(predicate2);
      predicate7.or(predicate4);
      Predicate<JSSubstitution> predicate8 = predicate4.negate();
      predicate8.test(jSSubstitution2);
      predicate8.and(predicate3);
      predicate7.or(predicate8);
      predicate7.negate();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2470794495066992
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.apply("/");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      unaryOperator0.apply("|1]guIv=GR+)");
      jSTerm0.toString();
      StringReader stringReader0 = new StringReader("G7VXT)/[");
      function1.andThen((Function<? super String, ?>) unaryOperator0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      unaryOperator0.andThen((Function<? super String, ? extends String>) function1);
      jSSubstitution0.add((Object) function1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.print();
      System.setCurrentTimeMillis((-1656L));
      jSTerm1.standardizerTerm();
      jSTerm1.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate0.or(predicate3);
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      StringReader stringReader0 = new StringReader(",");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.markSupported();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      predicate2.test(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.clone();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      predicate3.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.test(jSSubstitution0);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution2);
      predicate3.negate();
      Predicate<JSSubstitution> predicate5 = Predicate.isEqual((Object) predicate1);
      Predicate<JSSubstitution> predicate6 = predicate0.and(predicate5);
      predicate6.or(predicate4);
      Predicate<JSSubstitution> predicate7 = predicate4.negate();
      predicate7.and(predicate3);
      predicate6.or(predicate7);
      predicate6.negate();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      predicate3.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.test(jSSubstitution0);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution2);
      predicate3.negate();
      Predicate<JSSubstitution> predicate5 = Predicate.isEqual((Object) predicate1);
      Predicate<JSSubstitution> predicate6 = predicate5.and(predicate1);
      Predicate<JSSubstitution> predicate7 = predicate0.and(predicate5);
      predicate7.or(predicate4);
      Predicate<JSSubstitution> predicate8 = predicate4.negate();
      predicate8.and(predicate3);
      predicate6.negate();
      predicate7.negate();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<JSSubstitution> predicate4 = predicate0.or(predicate3);
      predicate3.and(predicate4);
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      jSSubstitution0.add((Object) predicate3);
      JSTerm jSTerm1 = new JSTerm();
      predicate5.negate();
      Predicate<JSSubstitution> predicate6 = Predicate.isEqual((Object) predicate1);
      predicate3.test(jSSubstitution0);
      Predicate<Object> predicate7 = predicate1.negate();
      predicate2.test(jSSubstitution0);
      Predicate<Object> predicate8 = predicate1.and(predicate7);
      Predicate<Object> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate1.or(predicate8);
      Predicate<Object> predicate11 = predicate9.negate();
      jSSubstitution0.add((Object) predicate7);
      Predicate<Object> predicate12 = predicate8.and(predicate9);
      Object object0 = jSTerm1.clone();
      predicate12.test(object0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      predicate6.test(jSSubstitution0);
      jSSubstitution1.add((Object) predicate12);
      Predicate<JSSubstitution> predicate13 = predicate0.negate();
      predicate7.or(predicate1);
      jSSubstitution1.add((Object) predicate6);
      predicate10.test(jSSubstitution1);
      predicate10.and(predicate7);
      predicate10.negate();
      Predicate.isEqual((Object) jSSubstitution0);
      jSTerm0.add((Object) jSTerm1);
      predicate13.and(predicate11);
      Predicate.isEqual((Object) predicate11);
      predicate4.and(predicate6);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7274635571421673
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      predicate1.test((Object) null);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      predicate1.test(predicate0);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate.isEqual((Object) predicate1);
      predicate0.and(predicate4);
      jSTerm0.add((Object) predicate0);
      predicate4.negate();
      predicate0.negate();
      predicate4.negate();
      Predicate<JSSubstitution> predicate6 = predicate4.negate();
      predicate6.negate();
      predicate4.or(predicate6);
      Predicate<JSSubstitution> predicate7 = predicate6.negate();
      Predicate<JSSubstitution> predicate8 = predicate7.negate();
      Predicate<JSSubstitution> predicate9 = predicate4.negate();
      predicate9.negate();
      predicate6.negate();
      predicate9.or(predicate2);
      predicate8.negate();
      Predicate<Object> predicate10 = predicate3.or(predicate5);
      predicate4.and(predicate10);
      predicate6.negate();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$44/555939063 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1321922400878854
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate0.or(predicate3);
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      jSSubstitution0.add((Object) predicate3);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      Predicate.isEqual((Object) jSTerm1);
      Predicate.isEqual((Object) predicate1);
      predicate3.test(jSSubstitution0);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) jSTerm0);
      predicate2.test(jSSubstitution0);
      Predicate<Object> predicate5 = predicate1.and(predicate4);
      predicate5.and(predicate1);
      Predicate<Object> predicate6 = predicate1.or(predicate5);
      predicate6.or(predicate4);
      predicate6.and(predicate4);
      predicate6.negate();
      StringReader stringReader0 = new StringReader("A.,]t");
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertTrue(jSTerm2.isFunction());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm4 = new JSTerm();
      boolean boolean0 = jSTerm4.equals(jSTerm3);
      assertFalse(boolean0);
      
      JSTerm jSTerm5 = jSTerm3.standardizerTerm();
      assertNotSame(jSTerm5, jSTerm3);
      assertTrue(jSTerm3.isFunction());
      assertTrue(jSTerm5.isFunction());
      assertFalse(jSTerm3.isEval());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.0577798113276455
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.negate();
      predicate1.test(predicate0);
      predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) predicate2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution2);
      predicate2.test(jSSubstitution3);
      Predicate.isEqual((Object) null);
      jSTerm0.add((Object) "n");
      StringReader stringReader0 = new StringReader("n");
      StringReader stringReader1 = new StringReader("W%m{l_Flk{=K");
      StringReader stringReader2 = new StringReader("fMoa+Y 0? {#^");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals(jSTerm2);
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      predicate1.test((Object) null);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      predicate1.test(predicate0);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) "min");
      Predicate.isEqual((Object) predicate1);
      predicate0.and(predicate4);
      jSTerm0.add((Object) predicate0);
      Predicate<JSSubstitution> predicate6 = predicate4.and(predicate0);
      predicate0.negate();
      predicate0.negate();
      Predicate<JSSubstitution> predicate7 = predicate4.negate();
      Predicate<JSSubstitution> predicate8 = predicate7.negate();
      predicate6.or(predicate7);
      Predicate<JSSubstitution> predicate9 = predicate7.negate();
      Predicate<JSSubstitution> predicate10 = predicate9.negate();
      Predicate<JSSubstitution> predicate11 = predicate4.negate();
      Predicate<JSSubstitution> predicate12 = predicate11.negate();
      predicate11.or(predicate2);
      predicate10.negate();
      Predicate<Object> predicate13 = predicate3.or(predicate5);
      predicate4.and(predicate13);
      predicate7.negate();
      Predicate.isEqual((Object) predicate11);
      Predicate<JSSubstitution> predicate14 = predicate0.or(predicate10);
      predicate14.negate();
      predicate0.negate();
      jSTerm0.clone();
      jSTerm0.add((Object) predicate12);
      predicate14.negate();
      predicate8.negate();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$47/1002524470 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      predicate3.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.test(jSSubstitution0);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<JSSubstitution> predicate5 = predicate2.or(predicate1);
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      predicate4.or(predicate5);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate<Object> predicate6 = predicate1.negate();
      predicate1.and(predicate6);
      jSTerm0.add((Object) jSSubstitution2);
      predicate3.negate();
      Predicate<JSSubstitution> predicate7 = predicate2.negate();
      predicate7.and(predicate1);
      Predicate<JSSubstitution> predicate8 = predicate0.and(predicate7);
      predicate8.or(predicate4);
      Predicate<JSSubstitution> predicate9 = predicate4.negate();
      predicate9.and(predicate3);
      predicate8.or(predicate9);
      predicate8.negate();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      Predicate.isEqual((Object) predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate2.negate();
      predicate2.and(predicate3);
      Predicate<String> predicate4 = Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      JSTerm jSTerm1 = new JSTerm();
      predicate4.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate6);
      Predicate<Object> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate6.and(predicate7);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) predicate10);
      Predicate<JSSubstitution> predicate11 = predicate0.negate();
      predicate9.negate();
      predicate8.test(jSSubstitution0);
      predicate8.and(predicate5);
      predicate8.negate();
      jSTerm0.add((Object) jSTerm1);
      predicate11.and(predicate9);
      predicate2.negate();
      predicate11.negate();
      System.setCurrentTimeMillis((-1302L));
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.1131891473974855
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("G7VX)/[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.parseList(streamTokenizer0);
      JSJshopVars.verticalL = 1574;
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      int int0 = 34;
      JSJshopVars.minus = 34;
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm4.equals(jSTerm3);
      JSJshopVars.apostrophe = 4309;
      jSTerm2.cloneT();
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        jSTerm2.elementAt(4309);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4309 >= 3
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.2148896539491203
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer2.slashStarComments(true);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer2.parseNumbers();
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.ttype = (-4);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.pushBack();
      streamTokenizer2.nval = (double) (-4);
      streamTokenizer2.sval = "M";
      streamTokenizer1.wordChars((-4), 92);
      streamTokenizer2.quoteChar(33);
      streamTokenizer2.whitespaceChars((-4), (-437));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.854806284951481
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChars((-4), 2703);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-4), 2703);
      streamTokenizer1.commentChar(2703);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.whitespaceChars((-4), 12);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer2.parseNumbers();
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.ttype = (-4);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.pushBack();
      streamTokenizer2.nval = (double) (-4);
      streamTokenizer2.sval = "M";
      streamTokenizer1.wordChars(2703, 92);
      streamTokenizer2.quoteChar(33);
      streamTokenizer2.whitespaceChars((-4), (-437));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChars((-4), 2703);
      streamTokenizer0.commentChar((-4));
      StringReader stringReader1 = new StringReader("( ");
      stringReader1.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.parseNumbers();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.ordinaryChars((-447), 2703);
      streamTokenizer1.commentChar(2703);
      StringReader stringReader2 = new StringReader("( ");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.whitespaceChars((-3), 1);
      StringReader stringReader3 = new StringReader("( ");
      streamTokenizer0.whitespaceChars((-4), (-3));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer5);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0140355237092673
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      predicate1.test((Object) null);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      predicate1.test(predicate0);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) "min");
      Predicate.isEqual((Object) predicate1);
      predicate0.and(predicate4);
      jSTerm0.add((Object) predicate0);
      Predicate<JSSubstitution> predicate6 = predicate4.and(predicate0);
      predicate0.negate();
      predicate0.negate();
      Predicate<JSSubstitution> predicate7 = predicate4.negate();
      predicate7.negate();
      predicate6.or(predicate7);
      Predicate<JSSubstitution> predicate8 = predicate7.negate();
      Predicate<JSSubstitution> predicate9 = predicate8.negate();
      Predicate<JSSubstitution> predicate10 = predicate4.negate();
      predicate10.negate();
      predicate10.or(predicate2);
      predicate9.negate();
      Predicate<Object> predicate11 = predicate3.or(predicate5);
      predicate4.and(predicate11);
      predicate7.negate();
      Predicate.isEqual((Object) predicate10);
      StringReader stringReader0 = new StringReader("#D1$pfH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clone();
      String string0 = "?";
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.trimToSize();
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), 46);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.commentChar(159);
      StringReader stringReader1 = new StringReader("` ");
      streamTokenizer0.whitespaceChars(33, (-2));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      predicate2.test((JSSubstitution) null);
      predicate3.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.test(jSSubstitution0);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<JSSubstitution> predicate5 = predicate2.or(predicate1);
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      predicate4.or(predicate5);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate<Object> predicate6 = predicate1.negate();
      predicate6.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      jSTerm0.add((Object) jSSubstitution2);
      predicate3.negate();
      Predicate<JSSubstitution> predicate8 = predicate2.negate();
      predicate8.and(predicate1);
      Predicate<JSSubstitution> predicate9 = predicate0.and(predicate8);
      predicate9.test(jSSubstitution1);
      predicate8.or(predicate2);
      predicate9.or(predicate4);
      predicate4.negate();
      Predicate.isEqual((Object) predicate7);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.395215446822611
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSJshopVars.exclamation = 0;
      StringReader stringReader0 = new StringReader("notequal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.isEval();
      jSTerm0.isEval();
      jSTerm0.standardizerTerm();
      jSTerm0.makeEval(false);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm0.print();
      jSTerm3.makeEval(true);
      jSTerm0.isGround();
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm5 = new JSTerm();
      StringReader stringReader1 = new StringReader("| ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      System.setCurrentTimeMillis(0);
      JSTerm jSTerm6 = jSTerm1.cloneT();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm6.sort(comparator0);
      jSTerm3.applySubstitutionT(jSSubstitution0);
      jSTerm2.call();
      // Undeclared exception!
      try { 
        jSTerm4.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.1761856615603072
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.trimToSize();
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      jSTerm0.add((Object) "{aOi(");
      StringReader stringReader1 = new StringReader("F?{DtJ$NW");
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.print();
      jSTerm1.makeEval(false);
      jSTerm0.isGround();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader2 = new StringReader("{aOi(");
      StringReader stringReader3 = new StringReader("| ");
      JSTerm jSTerm4 = jSTerm0.call();
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm4.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.395215446822611
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSJshopVars.exclamation = 0;
      StringReader stringReader0 = new StringReader("notequal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.isEval();
      jSTerm0.standardizerTerm();
      jSTerm0.makeEval(true);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm0.print();
      jSTerm3.makeEval(true);
      jSTerm0.isGround();
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm5 = new JSTerm();
      StringReader stringReader1 = new StringReader("| ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      System.setCurrentTimeMillis(0);
      JSTerm jSTerm6 = jSTerm1.cloneT();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm6.sort(comparator0);
      jSTerm3.applySubstitutionT(jSSubstitution0);
      jSTerm2.call();
      // Undeclared exception!
      try { 
        jSTerm4.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.1873223188492537
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSJshopVars.dot = (-3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.removeAll(jSSubstitution0);
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.addAll((Collection) jSSubstitution0);
      jSTerm0.cloneT();
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.1060030727171837
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ig)xA'k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.stream();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSSubstitution1.remove((Object) stringReader0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.parseList(streamTokenizer0);
      System.setCurrentTimeMillis(0L);
      jSTerm2.matches(jSTerm3, jSSubstitution1);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.0566704284991197
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "GCGjHA&\"&5&M&T");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.matches(jSTerm1);
      jSTerm1.equals(jSTerm1);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      int int0 = 197;
      // Undeclared exception!
      try { 
        jSTerm0.elementAt(197);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 197 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.8018185525433373
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4B0r");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("%6G%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.6645316133102304
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "GCGjHA&\"&5&M&T");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0);
      jSTerm0.equals(jSTerm0);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm0, jSSubstitution1);
      jSTerm0.matches(jSTerm0);
      jSTerm0.isGround();
      jSTerm0.cloneT();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.matches(jSTerm0);
      jSTerm0.isGround();
      jSTerm0.matches(jSTerm0, jSSubstitution2);
      jSTerm0.print();
      jSTerm0.print();
      jSTerm0.equals(jSTerm0);
      System.setCurrentTimeMillis(0L);
      jSTerm0.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.print();
      System.setCurrentTimeMillis(197);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm0.cloneT();
      jSTerm3.print();
      jSTerm0.clonePF();
      System.setCurrentTimeMillis(1L);
      jSTerm0.print();
      System.setCurrentTimeMillis(197);
      jSTerm2.toStr();
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.2634794940650305
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n)4oPl{>8gR:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.eolIsSignificant(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(124, 41);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.8891591637540217
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.containsAll(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.9356005054539458
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), 46);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      StringReader stringReader1 = new StringReader("` ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader1.read();
      streamTokenizer1.sval = "abR0#q7";
      boolean boolean0 = true;
      streamTokenizer0.sval = "` ";
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.whitespaceChars(613, (-3415));
      streamTokenizer1.whitespaceChars((-4), (-2));
      stringReader1.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      jSTerm0.call();
      JSJshopVars.VarCounter = (-4);
      JSJshopVars.greaterT = (-4);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9^#Rq6}C'g*={Z';9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.lowerCaseMode(false);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.2240978714293633
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n)4oPl{>8gR:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm2.call();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm3.replaceAll(unaryOperator0);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm4.isEval());
      assertTrue(jSTerm4.isConstant());
      
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm1);
      assertFalse(jSTerm3.isVariable());
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSSubstitution1.fail());
      assertEquals("[n]", jSTerm1.toString());
      assertFalse(jSTerm3.isFunction());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ls");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertEquals(4, stringBuffer0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChars((-4), 2703);
      streamTokenizer0.commentChar((-4));
      StringReader stringReader1 = new StringReader("");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-447), 2703);
      streamTokenizer1.commentChar(2703);
      StringReader stringReader2 = new StringReader("");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.whitespaceChars((-3), 1);
      streamTokenizer2.ttype = 58;
      stringReader0.markSupported();
      StringReader stringReader3 = new StringReader("hY^]gx");
      streamTokenizer2.whitespaceChars(58, (-437));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.4287691203187398
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n)4oPl{>8gR:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<JSSubstitution> predicate2 = predicate0.and(predicate1);
      Predicate<JSSubstitution> predicate3 = predicate2.negate();
      Predicate<JSSubstitution> predicate4 = predicate3.or(predicate2);
      Predicate<JSSubstitution> predicate5 = predicate4.and(predicate2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution2.add((Object) "n)4oPl{>8gR:");
      predicate0.test(jSSubstitution0);
      Predicate.isEqual((Object) predicate2);
      jSTerm0.add((Object) null);
      predicate4.negate();
      predicate5.negate();
      predicate4.and(predicate0);
      predicate0.or(predicate2);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      assertFalse(jSTerm0.isEval());
      assertTrue(jSSubstitution4.fail());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.377819508039033
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n)4oPl{>8gR:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSTerm0, jSSubstitution2);
      assertNotSame(jSSubstitution4, jSSubstitution2);
      assertFalse(jSSubstitution4.fail());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<JSSubstitution> predicate4 = predicate0.or(predicate3);
      jSTerm0.add((Object) predicate2);
      StringReader stringReader0 = new StringReader(",");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      predicate2.test(jSSubstitution0);
      jSSubstitution0.add((Object) predicate3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution1);
      predicate3.test(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution2);
      jSTerm0.clone();
      stringReader0.reset();
      predicate2.negate();
      predicate4.negate();
      jSTerm0.isFunction();
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), 46);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      streamTokenizer1.sval = "abR0}q7";
      streamTokenizer0.sval = "` ";
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.whitespaceChars(1477, (-3415));
      streamTokenizer1.whitespaceChars((-4), (-4));
      stringReader0.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSJshopVars.VarCounter = (-4);
      JSJshopVars.greaterT = (-4);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      JSJshopVars.leftPar = 849;
      JSJshopVars.flagLevel = 849;
      int int0 = 3274;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      int int0 = 849;
      JSJshopVars.leftPar = 849;
      JSJshopVars.flagLevel = 849;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("ig");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChars((-4), 2703);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-4), 2703);
      streamTokenizer1.commentChar(2703);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.whitespaceChars((-3), 12);
      streamTokenizer0.ordinaryChar((-3));
      streamTokenizer2.parseNumbers();
      streamTokenizer2.ttype = (-4);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.pushBack();
      streamTokenizer2.nval = (double) (-4);
      streamTokenizer2.sval = "M";
      streamTokenizer1.wordChars(2703, 92);
      streamTokenizer2.quoteChar(33);
      streamTokenizer2.whitespaceChars((-4), (-437));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChars((-4), 2703);
      streamTokenizer0.commentChar((-4));
      StringReader stringReader1 = new StringReader("( ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-447), 2703);
      streamTokenizer1.commentChar(2703);
      StringReader stringReader2 = new StringReader("( ");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      jSTerm0.isConstant();
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.whitespaceChars((-3), 1);
      streamTokenizer2.ttype = 58;
      stringReader0.markSupported();
      StringReader stringReader3 = new StringReader("hY^]gx");
      streamTokenizer2.whitespaceChars(58, (-437));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n)4oPlQ{>8gR:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      CharBuffer charBuffer0 = CharBuffer.allocate(41);
      stringReader0.read(charBuffer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isConstant();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nil");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.484457535817486
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eInMmg!Ys*?<V*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      CharBuffer charBuffer0 = CharBuffer.allocate(59);
      StringReader stringReader1 = new StringReader("n)4oPl{>8gR:");
      stringReader0.read(charBuffer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean0);
      assertFalse(jSTerm0.isVariable());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0888999753452235
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eInMmg!Ys*?<V*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      CharBuffer charBuffer0 = CharBuffer.allocate(37);
      StringReader stringReader1 = new StringReader("n)4oPl{>8gR:");
      stringReader1.read(charBuffer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1269287948006759
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.pushBack();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.whitespaceChars((-3), 12);
      streamTokenizer0.ordinaryChar((-3));
      streamTokenizer1.resetSyntax();
      streamTokenizer1.pushBack();
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.sval = "M";
      streamTokenizer0.wordChars((-4), 92);
      streamTokenizer1.quoteChar(33);
      streamTokenizer1.whitespaceChars((-4), (-437));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0751393240053733
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("E6G%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars((-2912), (-2994));
      streamTokenizer0.commentChar((-2912));
      StringReader stringReader1 = new StringReader("nil");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChars((-2994), (-1));
      streamTokenizer1.commentChar((-2912));
      StringReader stringReader2 = new StringReader("nil");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      StringReader stringReader3 = new StringReader("<");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
      streamTokenizer3.whitespaceChars((-4), (-4));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.coma = (-3);
      JSJshopVars.percent = (-3);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "_~)=_c<y");
      jSSubstitution0.trimToSize();
      Object[] objectArray0 = new Object[2];
      jSSubstitution0.toArray(objectArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("( ");
      StringReader stringReader1 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(46, 4183);
      streamTokenizer0.commentChar(1967);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.whitespaceChars(46, (-1088));
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.854806284951481
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("(g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChars((-4), 2703);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-4), 2703);
      streamTokenizer1.commentChar(2703);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.whitespaceChars((-3), 12);
      streamTokenizer0.ordinaryChar((-3));
      streamTokenizer2.parseNumbers();
      streamTokenizer2.ttype = (-4);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.pushBack();
      streamTokenizer2.nval = (double) (-4);
      streamTokenizer2.sval = "M";
      streamTokenizer1.wordChars(2703, 92);
      streamTokenizer2.quoteChar(33);
      streamTokenizer2.whitespaceChars((-4), (-437));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
