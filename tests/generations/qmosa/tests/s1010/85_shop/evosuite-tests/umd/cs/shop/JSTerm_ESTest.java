/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 09:08:29 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0873803563338225
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("5S");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add(0, (Object) jSTerm1);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm2.makeEval(true);
      streamTokenizer0.commentChar((-1675));
      streamTokenizer0.commentChar(33);
      streamTokenizer0.whitespaceChars((-2), 613);
      stringReader0.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(false);
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2 >= 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(teua,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.resetSyntax();
      stringReader0.mark(46);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8872385926133708
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("n(tequal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      jSTerm1.makeEval(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-1675));
      streamTokenizer0.commentChar(33);
      streamTokenizer1.whitespaceChars((-2), 39);
      streamTokenizer0.whitespaceChars((-4), 613);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.869604376043558
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.trimToSize();
      jSTerm0.add((Object) ".");
      StringReader stringReader0 = new StringReader("F?{DtJ$NW");
      jSTerm0.clonePF();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.makeVariable();
      StringReader stringReader1 = new StringReader(".");
      jSTerm0.isGround();
      jSTerm2.matches(jSTerm0, jSSubstitution1);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7700453703173724
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<JSSubstitution> predicate4 = predicate0.or(predicate3);
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      StringReader stringReader0 = new StringReader(",");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      jSSubstitution0.add((Object) predicate3);
      Object object0 = jSTerm0.clone();
      Predicate.isEqual(object0);
      Predicate.isEqual((Object) predicate1);
      predicate3.test(jSSubstitution0);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) jSTerm0);
      predicate2.test(jSSubstitution0);
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      predicate6.and(predicate1);
      Predicate<Object> predicate7 = predicate1.or(predicate6);
      predicate7.and(predicate5);
      predicate7.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution1);
      Object object1 = jSTerm0.clone();
      jSTerm0.add(object1);
      predicate2.negate();
      predicate4.negate();
      jSTerm0.isGround();
      System.setCurrentTimeMillis((-4));
      jSTerm0.print();
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8117686788991754
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate0.negate();
      Predicate<JSSubstitution> predicate3 = predicate0.or(predicate2);
      Predicate<String> predicate4 = Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      predicate4.test("d;SQZq");
      predicate3.and(predicate2);
      predicate2.and(predicate3);
      predicate4.test(",");
      predicate3.and(predicate2);
      predicate4.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate6 = predicate5.and(predicate5);
      Predicate<Object> predicate7 = predicate6.and(predicate1);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate8 = predicate7.negate();
      predicate8.negate();
      predicate8.and(predicate5);
      predicate8.and(predicate5);
      Predicate.isEqual((Object) predicate5);
      predicate3.or(predicate2);
      predicate5.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.or(predicate5);
      Predicate.isEqual((Object) jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      predicate2.negate();
      jSTerm0.isGround();
      System.setCurrentTimeMillis(0L);
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0990557403544283
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.trimToSize();
      jSTerm0.add((Object) "FgMB*qER8BlNlKI.T3W");
      StringReader stringReader0 = new StringReader("F?{DtJ$NW");
      jSTerm0.clonePF();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.makeVariable();
      StringReader stringReader1 = new StringReader(".");
      jSTerm2.equals(jSTerm0);
      jSTerm0.matches(jSTerm0, jSSubstitution1);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm3.print();
      JSTerm jSTerm4 = jSTerm2.call();
      JSJshopVars.plus = 44;
      JSTerm jSTerm5 = jSTerm2.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm4.remove((Object) jSSubstitution1);
      jSTerm4.trimToSize();
      jSTerm5.equals(jSTerm1);
      jSTerm0.isGround();
      JSTerm jSTerm6 = jSTerm1.call();
      JSTerm jSTerm7 = jSTerm4.applySubstitutionT(jSSubstitution2);
      JSJshopVars.astherisk = 44;
      jSTerm7.equals(jSTerm4);
      jSTerm5.equals(jSTerm3);
      jSTerm5.call();
      jSTerm6.cloneT();
      jSTerm0.equals(jSTerm1);
      jSTerm4.call();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.test(jSSubstitution0);
      predicate2.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) jSSubstitution0);
      JSJshopVars.colon = 46;
      predicate3.negate();
      Predicate<JSSubstitution> predicate4 = Predicate.isEqual((Object) predicate1);
      predicate0.and(predicate4);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate5);
      predicate1.or(predicate6);
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      predicate2.test(jSSubstitution0);
      jSSubstitution0.add((Object) predicate3);
      predicate2.test(jSSubstitution0);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.201349254691185
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate0.test(jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) null);
      predicate1.or(predicate2);
      Object object0 = new Object();
      predicate1.test(object0);
      Predicate<JSSubstitution> predicate3 = predicate0.negate();
      predicate1.test(predicate0);
      predicate3.or(predicate2);
      predicate3.and(predicate0);
      predicate3.and(predicate1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate3);
      StringReader stringReader0 = new StringReader("G7Vf&_X)/[");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.parseList(streamTokenizer0);
      stringReader0.reset();
      JSJshopVars.verticalL = 1585;
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      jSSubstitution1.spliterator();
      jSTerm3.print();
      assertEquals("[., [G7VfX], [nil]]", jSTerm3.toString());
      
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution1);
      boolean boolean0 = jSTerm4.isGround();
      assertTrue(boolean0);
      assertTrue(jSTerm4.isFunction());
      
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      jSTerm5.isGround();
      assertFalse(jSTerm5.isEval());
      
      JSTerm jSTerm6 = jSTerm0.cloneT();
      jSTerm0.call();
      JSTerm jSTerm7 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution2 = jSTerm7.matches(jSTerm6);
      assertTrue(jSTerm6.isFunction());
      assertEquals("[., [G7VfX], [nil]]", jSTerm7.toString());
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.195263227902811
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSJshopVars.exclamation = 0;
      StringReader stringReader0 = new StringReader("notequal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      jSTerm0.standarizerPredicateForm();
      jSTerm0.clone();
      boolean boolean0 = true;
      jSTerm0.makeEval(true);
      jSTerm0.isEval();
      jSTerm0.isEval();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0652173913644494
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      Predicate<JSSubstitution> predicate3 = predicate2.negate();
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate1.test(predicate2);
      Predicate.isEqual((Object) predicate1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSSubstitution0.containsAll(linkedList0);
      jSTerm0.add((Object) predicate2);
      StringReader stringReader0 = new StringReader("G7VX)/[");
      predicate3.and(predicate2);
      Predicate<JSSubstitution> predicate5 = predicate4.and(predicate2);
      predicate2.or(predicate0);
      Predicate<JSSubstitution> predicate6 = Predicate.isEqual((Object) "G7VX)/[");
      Predicate<JSSubstitution> predicate7 = predicate6.negate();
      predicate7.negate();
      predicate2.test(jSSubstitution0);
      StringReader stringReader1 = new StringReader("E%");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) predicate5);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.applySubstitutionT(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.820671354031734
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.trimToSize();
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add((Object) "{aOi(");
      StringReader stringReader1 = new StringReader("F?{DtJ$NW");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSTerm0.clonePF();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      stringReader0.skip(1234L);
      streamTokenizer2.whitespaceChars((-1032), 2546);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      jSTerm1.print();
      stringReader1.reset();
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      streamTokenizer3.ttype = (int) 'q';
      charArray0[3] = 'L';
      charArray0[4] = 'K';
      charArray0[5] = '|';
      charArray0[6] = 'N';
      stringReader1.read(charArray0);
      streamTokenizer3.commentChar((-2810));
      streamTokenizer1.ordinaryChar(3);
      System.setCurrentTimeMillis((-63L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer1);
      jSTerm3.cloneT();
      streamTokenizer3.resetSyntax();
      jSTerm3.standardizerTerm();
      boolean boolean0 = jSTerm1.equals(jSTerm3);
      assertTrue(jSTerm0.isVariable());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.trimToSize();
      String string0 = ".";
      jSTerm0.isVariable();
      StringReader stringReader0 = new StringReader("F?{DtJ$NW");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%B(PASM)]jz_C6I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.get(2393);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2393
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.66638173999168
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.trimToSize();
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      jSTerm0.add((Object) "{aOi(");
      StringReader stringReader1 = new StringReader("F?{DtJ$NW");
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.print();
      jSTerm1.makeEval(false);
      jSTerm0.isGround();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader2 = new StringReader("{aOi(");
      StringReader stringReader3 = new StringReader("| ");
      JSTerm jSTerm4 = jSTerm0.call();
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm4.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7445551523794802
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.and(predicate1);
      predicate0.and(predicate2);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) "Undefined function to be evaluated  in Call statement");
      predicate1.or(predicate3);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      predicate4.or(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate.isEqual((Object) "Undefined function to be evaluated  in Call statement");
      predicate2.or(predicate1);
      predicate0.or(predicate4);
      StringReader stringReader0 = new StringReader(",");
      Predicate.isEqual((Object) stringReader0);
      jSTerm0.add((Object) "LCo aC~@cgn>3ns_A\"y");
      StringReader stringReader1 = new StringReader(",");
      StringReader stringReader2 = new StringReader("KPo6");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSJshopVars.interrogation = 62;
      jSTerm2.setSize(1578);
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm4 = jSTerm3.call();
      jSTerm4.call();
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9715503473033111
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      predicate2.test((JSSubstitution) null);
      predicate3.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.test(jSSubstitution0);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<JSSubstitution> predicate5 = predicate2.or(predicate1);
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      predicate4.or(predicate5);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate<Object> predicate6 = predicate1.negate();
      predicate6.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      jSTerm0.add((Object) jSSubstitution2);
      predicate3.negate();
      Predicate<JSSubstitution> predicate8 = predicate2.negate();
      predicate8.and(predicate1);
      Predicate<JSSubstitution> predicate9 = predicate0.and(predicate8);
      predicate9.test(jSSubstitution1);
      predicate8.or(predicate2);
      predicate9.or(predicate4);
      predicate4.negate();
      Predicate.isEqual((Object) predicate7);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7832440392907998
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      Predicate<JSSubstitution> predicate3 = predicate2.negate();
      predicate1.test((Object) null);
      predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<JSSubstitution> predicate5 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate1.test(predicate2);
      Predicate<String> predicate6 = Predicate.isEqual((Object) predicate1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSTerm0.add((Object) predicate2);
      predicate0.negate();
      Predicate<JSSubstitution> predicate7 = predicate5.or(predicate1);
      Predicate<JSSubstitution> predicate8 = predicate3.and(predicate2);
      Predicate<JSSubstitution> predicate9 = predicate5.and(predicate2);
      Predicate<JSSubstitution> predicate10 = predicate2.or(predicate0);
      Predicate<JSSubstitution> predicate11 = predicate10.negate();
      Predicate.isEqual((Object) predicate9);
      predicate2.negate();
      predicate0.negate();
      predicate11.negate();
      Predicate<Object> predicate12 = predicate4.and(predicate1);
      predicate12.and(predicate1);
      predicate3.or(predicate12);
      predicate2.negate();
      predicate7.test(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) predicate4);
      jSSubstitution1.add((Object) predicate6);
      predicate8.test(jSSubstitution1);
      jSTerm0.toStr();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.508060625968141
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.apply(unaryOperator0);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("G7VX)/[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.whitespaceChars(1574, (-4));
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer2);
      StringReader stringReader1 = new StringReader("fud?/");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.ordinaryChars((-4), 2703);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), 0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.pushBack();
      streamTokenizer1.wordChars((-1953), (-4));
      streamTokenizer1.commentChar(2703);
      StringReader stringReader1 = new StringReader("( ");
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.nval = (double) (-4);
      stringReader0.markSupported();
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.nextToken();
      streamTokenizer2.quoteChar((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0304524912830937
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      jSTerm0.add((Object) "FgMB*qER8BlNlKI.T3W");
      StringReader stringReader0 = new StringReader("F?{DtJ$NW");
      jSTerm0.clonePF();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.makeVariable();
      StringReader stringReader1 = new StringReader(".");
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm3.print();
      JSTerm jSTerm4 = jSTerm2.call();
      JSJshopVars.plus = 44;
      JSTerm jSTerm5 = jSTerm2.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm6.trimToSize();
      boolean boolean0 = jSTerm5.equals(jSTerm1);
      assertFalse(boolean0);
      
      jSTerm0.isGround();
      jSTerm1.call();
      JSTerm jSTerm7 = jSTerm4.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm7.isConstant());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6721686157349103
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("G7VX)/[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.parseList(streamTokenizer0);
      stringReader0.reset();
      JSJshopVars.verticalL = 1574;
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution1);
      jSTerm4.equals(jSTerm3);
      jSTerm0.isGround();
      stringReader0.mark(1574);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.retainAll(jSTerm3);
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm2.remove((-729));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -729
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.576131263832842
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.trimToSize();
      jSTerm0.add((Object) "wdP<gICn7.~Ees");
      StringReader stringReader0 = new StringReader("F?{DtJ$NW");
      jSTerm0.clonePF();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.makeVariable();
      StringReader stringReader1 = new StringReader(".");
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.774526081506421
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.trimToSize();
      jSTerm0.add((Object) "wdP<gICn7.~Ees");
      StringReader stringReader0 = new StringReader("F?{DtJ$NW");
      jSTerm0.clonePF();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.makeVariable();
      StringReader stringReader1 = new StringReader(".");
      jSTerm2.equals(jSTerm0);
      jSTerm0.matches(jSTerm0, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7689192975524
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.and(predicate1);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate2);
      Predicate<JSSubstitution> predicate4 = predicate3.or(predicate1);
      predicate2.or(predicate4);
      predicate2.and(predicate0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.or(predicate0);
      Predicate.isEqual((Object) predicate2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      StringReader stringReader0 = new StringReader(" Expected (");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      jSSubstitution0.add((Object) ",");
      predicate3.test(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      Predicate.isEqual((Object) jSTerm1);
      jSTerm1.clone();
      jSTerm0.add((Object) null);
      Predicate<JSSubstitution> predicate5 = predicate2.negate();
      predicate5.negate();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.307102025739417
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate2.negate();
      predicate3.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate3.test((JSSubstitution) null);
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate3);
      predicate0.negate();
      Predicate<JSSubstitution> predicate4 = predicate0.negate();
      predicate4.negate();
      predicate4.and(predicate2);
      predicate4.or(predicate0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3080561808079394
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), 46);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      StringReader stringReader1 = new StringReader("` ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader1.read();
      streamTokenizer1.sval = "abR0#q7";
      streamTokenizer0.sval = "` ";
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.whitespaceChars(613, (-3415));
      streamTokenizer1.commentChar((-424));
      streamTokenizer1.whitespaceChars((-4), (-2));
      stringReader1.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.VarCounter = (-4);
      JSJshopVars.greaterT = (-4);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.820049746700607
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fgmb*qer8blnlki.t3w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(415, 2062);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      streamTokenizer0.quoteChar(1052);
      stringReader0.ready();
      JSJshopVars.whiteSpace = 2062;
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.interrogation = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.applySubstitutionPF(jSSubstitution0);
      jSTerm2.isGround();
      jSTerm0.isGround();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution1);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm3.forEach(consumer0);
      JSJshopVars.backquote = (-1);
      jSTerm3.removeElementAt(0);
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm3, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4213147911682316
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.trimToSize();
      jSTerm0.add((Object) "wdP<gICn7.~Ees");
      StringReader stringReader0 = new StringReader("F?{DtJ$NW");
      jSTerm0.clonePF();
      jSTerm0.print();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm1.makeVariable();
      StringReader stringReader1 = new StringReader(".");
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      predicate2.test((JSSubstitution) null);
      predicate1.test(predicate0);
      predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate3 = Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      Predicate.isEqual((Object) predicate3);
      jSTerm0.add((Object) null);
      StringReader stringReader0 = new StringReader("");
      Object object0 = new Object();
      Predicate.isEqual(object0);
      jSTerm0.add((Object) null);
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("");
      StringReader stringReader3 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      System.setCurrentTimeMillis(239L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.605963309666577
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.compose((Function<? super JSSubstitution, ? extends String>) function2);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, JSTerm> function4 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.apply("=6)<");
      Function<Object, JSTerm> function5 = unaryOperator1.andThen((Function<? super Object, ? extends JSTerm>) function4);
      function5.andThen((Function<? super JSTerm, ?>) unaryOperator1);
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.apply(function5);
      function1.apply("teqpbual");
      unaryOperator1.apply(unaryOperator0);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function6);
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) function1);
      StringReader stringReader0 = new StringReader("G7VX)/[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.matches(jSTerm1, jSSubstitution0);
      jSTerm1.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      predicate2.test((JSSubstitution) null);
      predicate3.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.test(jSSubstitution0);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      Predicate<JSSubstitution> predicate5 = predicate2.or(predicate1);
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      Predicate<JSSubstitution> predicate6 = predicate4.or(predicate5);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      predicate1.negate();
      Predicate<Object> predicate7 = predicate1.negate();
      predicate6.negate();
      predicate7.negate();
      predicate1.and(predicate7);
      jSTerm0.add((Object) jSSubstitution1);
      predicate3.negate();
      Predicate<JSSubstitution> predicate8 = predicate2.negate();
      predicate8.and(predicate1);
      Predicate<JSSubstitution> predicate9 = predicate0.and(predicate8);
      predicate9.test(jSSubstitution0);
      predicate8.or(predicate2);
      predicate9.or(predicate4);
      Predicate<JSSubstitution> predicate10 = predicate4.negate();
      predicate10.test(jSSubstitution1);
      predicate10.and(predicate3);
      predicate8.negate();
      predicate9.or(predicate10);
      predicate9.negate();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6771182372166007
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSJshopVars.dot = (-3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.removeAll(jSSubstitution0);
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.addAll((Collection) jSSubstitution0);
      jSTerm0.cloneT();
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6466487230056184
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, JSTerm> function3 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function3).apply(any());
      Function<Object, JSTerm> function4 = unaryOperator1.andThen((Function<? super Object, ? extends JSTerm>) function3);
      function4.apply((Object) null);
      function4.andThen((Function<? super JSTerm, ?>) unaryOperator1);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.apply(function4);
      function1.apply("teqpbual");
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.compose((Function<? super JSSubstitution, ? extends String>) function6);
      unaryOperator0.andThen((Function<? super String, ?>) function1);
      unaryOperator1.apply(unaryOperator0);
      Function<Object, String> function7 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function7);
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) function1);
      StringReader stringReader0 = new StringReader("G7VX)/[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2036540333326435
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("n(tequal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm2.makeEval(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-1675));
      streamTokenizer0.commentChar(33);
      streamTokenizer1.whitespaceChars((-2), 39);
      streamTokenizer0.whitespaceChars((-4), 613);
      stringReader0.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9715503473033111
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate0.or(predicate3);
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      StringReader stringReader0 = new StringReader(",");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.markSupported();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      predicate2.test(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.clone();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      predicate3.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.test(jSSubstitution0);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution2);
      predicate3.negate();
      Predicate<JSSubstitution> predicate5 = Predicate.isEqual((Object) predicate1);
      Predicate<JSSubstitution> predicate6 = predicate0.and(predicate5);
      predicate6.or(predicate4);
      Predicate<JSSubstitution> predicate7 = predicate4.negate();
      predicate7.and(predicate3);
      predicate6.or(predicate7);
      predicate6.negate();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.98271462162548
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate0.negate();
      Predicate<JSSubstitution> predicate3 = predicate0.or(predicate2);
      predicate2.and(predicate0);
      Predicate<String> predicate4 = Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      predicate4.test("d;SQZq");
      predicate3.and(predicate2);
      predicate2.and(predicate3);
      predicate4.test("");
      predicate3.and(predicate2);
      Predicate.isEqual((Object) null);
      predicate4.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate5.and(predicate5);
      Predicate<Object> predicate9 = predicate8.and(predicate1);
      Predicate<Integer> predicate10 = Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate11 = predicate9.negate();
      predicate11.negate();
      predicate11.and(predicate5);
      Predicate.isEqual((Object) predicate7);
      predicate11.and(predicate5);
      predicate10.negate();
      predicate3.or(predicate2);
      predicate5.negate();
      predicate2.or(predicate5);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      predicate2.negate();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      predicate3.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.test(jSSubstitution0);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution2);
      predicate3.negate();
      Predicate<JSSubstitution> predicate5 = Predicate.isEqual((Object) predicate1);
      Predicate<JSSubstitution> predicate6 = predicate5.and(predicate1);
      Predicate<JSSubstitution> predicate7 = predicate0.and(predicate5);
      predicate7.or(predicate4);
      Predicate<JSSubstitution> predicate8 = predicate4.negate();
      predicate8.and(predicate3);
      predicate6.negate();
      predicate7.negate();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.59248955920367
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, JSTerm> function3 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      Function<Object, JSTerm> function4 = unaryOperator1.andThen((Function<? super Object, ? extends JSTerm>) function3);
      function4.andThen((Function<? super JSTerm, ?>) unaryOperator1);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.apply(function4);
      function1.apply("teqpbual");
      unaryOperator1.apply(unaryOperator0);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) function1);
      StringReader stringReader0 = new StringReader("G7VX)/[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.736534960151444
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, JSTerm> function3 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, JSTerm> function4 = unaryOperator1.andThen((Function<? super Object, ? extends JSTerm>) function3);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(194);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function7 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function6);
      unaryOperator2.compose((Function<? super Object, ? extends Integer>) function7);
      unaryOperator2.apply(integer0);
      Function<Object, Integer> function8 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function5);
      function8.compose((Function<? super Integer, ?>) function4);
      function8.compose((Function<? super Integer, ?>) unaryOperator2);
      function4.compose((Function<? super Object, ?>) function8);
      function4.andThen((Function<? super JSTerm, ?>) unaryOperator1);
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.apply(function4);
      function1.apply("teqbual");
      unaryOperator0.andThen((Function<? super String, ?>) function8);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function9);
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) function1);
      StringReader stringReader0 = new StringReader("G7VX)/[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.matches(jSTerm1, jSSubstitution0);
      System.setCurrentTimeMillis(2192L);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      Predicate<JSSubstitution> predicate3 = predicate2.negate();
      predicate1.test((Object) null);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<JSSubstitution> predicate5 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate1.test(predicate2);
      Predicate.isEqual((Object) predicate1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSTerm0.add((Object) predicate2);
      predicate5.or(predicate1);
      StringReader stringReader0 = new StringReader("G7VX)/[");
      predicate3.and(predicate2);
      predicate3.test(jSSubstitution0);
      Predicate.isEqual((Object) predicate0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      predicate5.negate();
      predicate0.negate();
      Predicate<JSSubstitution> predicate6 = predicate5.and(predicate4);
      predicate5.or(predicate6);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution3.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6210811289767744
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate1);
      predicate4.negate();
      Predicate<JSSubstitution> predicate5 = predicate0.and(predicate1);
      predicate1.test(predicate0);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate0);
      predicate5.and(predicate6);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.test(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Object object0 = jSTerm0.clone();
      Predicate.isEqual(object0);
      jSSubstitution1.add((Object) jSSubstitution2);
      predicate2.test(jSSubstitution3);
      Predicate.isEqual((Object) null);
      jSTerm0.add((Object) "n");
      StringReader stringReader0 = new StringReader("n");
      StringReader stringReader1 = new StringReader("W%m{l_Flk{=K");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.setSize(1611);
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertTrue(jSTerm2.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(boolean0);
      
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm3.isEval());
      assertNotSame(jSTerm3, jSTerm1);
      assertTrue(jSTerm3.isFunction());
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5507375578065186
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.negate();
      predicate1.test(predicate0);
      predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) predicate2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      jSSubstitution1.add((Object) jSSubstitution2);
      predicate2.test(jSSubstitution3);
      Predicate.isEqual((Object) null);
      jSTerm0.add((Object) "n");
      StringReader stringReader0 = new StringReader("n");
      StringReader stringReader1 = new StringReader("W%m{l_Flk{=K");
      StringReader stringReader2 = new StringReader("fMoa+Y 0? {#^");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals(jSTerm2);
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      predicate0.negate();
      predicate0.and(predicate1);
      Predicate<JSSubstitution> predicate3 = predicate2.or(predicate1);
      jSTerm0.add((Object) predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<JSSubstitution> predicate5 = predicate0.negate();
      predicate0.or(predicate5);
      Predicate<Object> predicate6 = predicate1.negate();
      predicate0.negate();
      Predicate<Object> predicate7 = predicate1.negate();
      predicate3.and(predicate7);
      Predicate<Object> predicate8 = predicate7.and(predicate1);
      predicate0.negate();
      Predicate<Object> predicate9 = predicate6.and(predicate8);
      Predicate<Object> predicate10 = predicate4.and(predicate6);
      Predicate<Object> predicate11 = predicate10.and(predicate9);
      Predicate<Object> predicate12 = predicate9.or(predicate6);
      Predicate.isEqual((Object) predicate11);
      Predicate<Object> predicate13 = predicate1.negate();
      predicate9.and(predicate8);
      predicate9.and(predicate13);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate.isEqual((Object) predicate12);
      jSTerm0.clone();
      Object object0 = new Object();
      Predicate.isEqual(object0);
      jSTerm0.add((Object) "");
      predicate5.negate();
      predicate2.negate();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7039917864324614
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      predicate3.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.test(jSSubstitution0);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<JSSubstitution> predicate5 = predicate2.or(predicate1);
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      predicate4.or(predicate5);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate<Object> predicate6 = predicate1.negate();
      predicate1.and(predicate6);
      jSTerm0.add((Object) jSSubstitution2);
      predicate3.negate();
      Predicate<JSSubstitution> predicate7 = predicate2.negate();
      predicate7.and(predicate1);
      Predicate<JSSubstitution> predicate8 = predicate0.and(predicate7);
      predicate8.or(predicate4);
      Predicate<JSSubstitution> predicate9 = predicate4.negate();
      predicate9.and(predicate3);
      predicate8.or(predicate9);
      predicate8.negate();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7186438010844762
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      Predicate<JSSubstitution> predicate3 = predicate0.negate();
      predicate2.and(predicate0);
      Predicate<String> predicate4 = Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      predicate4.test("d;SQZq");
      predicate0.and(predicate2);
      predicate2.and(predicate3);
      predicate4.test("");
      predicate0.and(predicate2);
      Predicate.isEqual((Object) null);
      predicate4.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate5.and(predicate5);
      Predicate<Object> predicate9 = predicate8.and(predicate1);
      Predicate<Integer> predicate10 = Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate11 = predicate9.negate();
      predicate11.negate();
      predicate11.and(predicate5);
      Predicate.isEqual((Object) predicate7);
      predicate11.and(predicate5);
      predicate10.negate();
      predicate3.or(predicate2);
      predicate5.negate();
      predicate2.or(predicate5);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      predicate2.negate();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.513022961939611
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate1);
      predicate4.negate();
      Predicate<JSSubstitution> predicate5 = predicate0.and(predicate1);
      predicate1.test(predicate0);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate0);
      predicate5.and(predicate6);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate2.test(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      predicate2.test(jSSubstitution3);
      Predicate.isEqual((Object) null);
      jSTerm0.add((Object) "n");
      StringReader stringReader0 = new StringReader("n");
      StringReader stringReader1 = new StringReader("W%m{l_Flk{=K");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertTrue(boolean0);
      
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      
      boolean boolean1 = jSTerm1.equals(jSTerm0);
      assertFalse(boolean1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6694351084945749
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.ordinaryChars((-4), 2703);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), 0);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.pushBack();
      streamTokenizer1.wordChars((-1953), (-4));
      streamTokenizer1.commentChar(2703);
      StringReader stringReader1 = new StringReader("( ");
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.nval = (double) (-4);
      stringReader0.markSupported();
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.nextToken();
      streamTokenizer2.quoteChar((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChars((-4), 2703);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), 0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.pushBack();
      streamTokenizer1.wordChars((-1953), (-326));
      streamTokenizer1.ordinaryChars((-447), 2703);
      streamTokenizer1.commentChar(2703);
      StringReader stringReader1 = new StringReader("( ");
      stringReader1.read();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer2.slashStarComments(false);
      stringReader0.close();
      streamTokenizer1.slashStarComments(false);
      stringReader1.markSupported();
      streamTokenizer1.whitespaceChars((-4), (-1953));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer3);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.3631322031433784
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      Predicate<JSSubstitution> predicate3 = predicate2.negate();
      predicate1.test((Object) null);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate1.test(predicate2);
      Predicate.isEqual((Object) predicate1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSSubstitution0.containsAll(linkedList0);
      jSTerm0.add((Object) predicate2);
      predicate4.or(predicate1);
      StringReader stringReader0 = new StringReader("G7VX)/[");
      predicate3.and(predicate2);
      Predicate<JSSubstitution> predicate5 = predicate4.and(predicate2);
      predicate2.or(predicate0);
      Predicate<JSSubstitution> predicate6 = Predicate.isEqual((Object) "G7VX)/[");
      predicate0.negate();
      predicate0.negate();
      Predicate<JSSubstitution> predicate7 = predicate6.negate();
      predicate7.negate();
      predicate2.test(jSSubstitution0);
      StringReader stringReader1 = new StringReader("E%");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) null);
      jSSubstitution1.add((Object) predicate5);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clone();
      String string0 = "?";
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.7773934290873914
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("n(tequal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm2.makeEval(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm2.equals(jSTerm1);
      jSTerm3.isGround();
      stringReader0.mark(1578);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.retainAll(jSTerm3);
      jSTerm4.isGround();
      jSTerm2.cloneT();
      // Undeclared exception!
      try { 
        jSTerm4.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.820345680284499
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      int int0 = 0;
      JSJshopVars.exclamation = 0;
      StringReader stringReader0 = new StringReader("notequal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.equals(jSPredicateForm0);
      jSTerm0.clone();
      jSTerm0.isEval();
      jSTerm0.standardizerTerm();
      jSTerm0.makeEval(true);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm0.print();
      jSTerm2.makeEval(true);
      jSTerm0.isGround();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.matches(jSTerm4, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm3.removeElementAt((-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -3
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.4092847159802617
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), 46);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      StringReader stringReader1 = new StringReader("` ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader1.read();
      streamTokenizer1.sval = "abR0#q7";
      streamTokenizer0.sval = "` ";
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.whitespaceChars(613, (-3415));
      streamTokenizer1.commentChar((-424));
      streamTokenizer1.whitespaceChars((-4), (-2));
      stringReader1.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      jSTerm0.call();
      streamTokenizer2.lowerCaseMode(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5476781211524027
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      predicate0.or(predicate4);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate6 = predicate0.or(predicate5);
      predicate6.negate();
      predicate5.test((Object) null);
      predicate5.negate();
      predicate0.and(predicate5);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("G7VX)/[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.whitespaceChars(1556, 1556);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer1);
      streamTokenizer1.eolIsSignificant(true);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm3 = jSTerm2.call();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm3, jSSubstitution1);
      System.setCurrentTimeMillis(2159L);
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.5733186571042395
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      streamTokenizer0.commentChar((-1437));
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm3.call();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm3);
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSSubstitution1.fail());
      assertNotSame(jSTerm2, jSTerm0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.146802573169566
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n)4oPl{>8gR:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      CharBuffer charBuffer0 = CharBuffer.allocate(41);
      charBuffer0.position(41);
      stringReader0.read(charBuffer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[nil]", jSTerm1.toString());
      assertFalse(boolean0);
      assertFalse(jSTerm1.isFunction());
      
      JSTerm jSTerm2 = jSTerm0.call();
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.326412913146613
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BAe`zQfGPY65  K~;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '/';
      stringReader0.read(charArray0);
      stringReader0.ready();
      streamTokenizer1.commentChar(2);
      streamTokenizer1.commentChar(613);
      System.setCurrentTimeMillis(32);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.equals(jSTerm0);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm3.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("%6G%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.385544868886597
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.negate();
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate4 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) predicate4);
      StringReader stringReader0 = new StringReader("-");
      Predicate<JSSubstitution> predicate5 = predicate3.or(predicate4);
      Predicate<JSSubstitution> predicate6 = predicate4.and(predicate1);
      Predicate<JSSubstitution> predicate7 = predicate5.and(predicate6);
      Predicate<JSSubstitution> predicate8 = predicate6.and(predicate7);
      predicate8.or(predicate4);
      Predicate.isEqual((Object) predicate2);
      Predicate<JSSubstitution> predicate9 = Predicate.isEqual((Object) jSTerm0);
      Predicate<JSSubstitution> predicate10 = predicate9.negate();
      predicate7.negate();
      StringReader stringReader1 = new StringReader("?Q;kG1~v");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) predicate10);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.cloneT();
      jSTerm1.toStr();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.coma = (-3);
      JSJshopVars.percent = 44;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.ordinaryChars((-4), 2703);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), 0);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.ordinaryChar(0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.pushBack();
      streamTokenizer1.wordChars((-1953), (-4));
      streamTokenizer1.commentChar(2703);
      StringReader stringReader1 = new StringReader("o( ");
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.eolIsSignificant(false);
      stringReader0.markSupported();
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.nextToken();
      streamTokenizer2.quoteChar((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.5519610865100173
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), 46);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      StringReader stringReader1 = new StringReader("` ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader1.read();
      streamTokenizer1.sval = "abR0#q7";
      streamTokenizer0.sval = "` ";
      streamTokenizer1.slashStarComments(true);
      stringReader1.close();
      streamTokenizer0.whitespaceChars(613, (-3415));
      streamTokenizer1.commentChar((-424));
      streamTokenizer1.whitespaceChars((-4), (-2));
      stringReader1.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = jSTerm0.call();
      streamTokenizer0.quoteChar(613);
      JSJshopVars.colon = (-1429);
      JSJshopVars.VarCounter = (-4);
      JSJshopVars.greaterT = (-4);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.4092847159802617
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), 46);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      StringReader stringReader1 = new StringReader("` ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader1.read();
      streamTokenizer1.sval = "abR0#q7";
      streamTokenizer0.sval = "` ";
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.whitespaceChars(613, (-3415));
      streamTokenizer1.commentChar((-424));
      streamTokenizer1.whitespaceChars((-4), (-2));
      stringReader1.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      jSTerm0.call();
      JSJshopVars.VarCounter = (-4);
      JSJshopVars.greaterT = (-4);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6036051515160747
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9^#Rq6}C'g*={Z';9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.lowerCaseMode(false);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.713459573557023
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n)4oPl{>8gR:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm2.call();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm3.replaceAll(unaryOperator0);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm4.isConstant());
      assertFalse(jSTerm4.isEval());
      
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSSubstitution1.fail());
      assertNotSame(jSTerm1, jSTerm4);
      assertFalse(jSTerm3.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm3.isFunction());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Uc@t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      streamTokenizer0.sval = "+ ";
      streamTokenizer0.ttype = (-1024);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      JSJshopVars.astherisk = 0;
      JSJshopVars.verticalL = 1611;
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertEquals("%%% ", stringBuffer0.toString());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.9024533308450557
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n)4oPl{>8gR:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<JSSubstitution> predicate2 = predicate0.and(predicate1);
      Predicate<JSSubstitution> predicate3 = predicate2.negate();
      Predicate<JSSubstitution> predicate4 = predicate3.or(predicate2);
      Predicate<JSSubstitution> predicate5 = predicate4.and(predicate2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution2.add((Object) "n)4oPl{>8gR:");
      predicate0.test(jSSubstitution0);
      Predicate.isEqual((Object) predicate2);
      jSTerm0.add((Object) null);
      predicate4.negate();
      predicate5.negate();
      predicate4.and(predicate0);
      predicate0.or(predicate2);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      assertTrue(jSSubstitution4.fail());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.8484077433331505
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n)4oPl{>8gR:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSTerm0, jSSubstitution2);
      assertFalse(jSTerm0.isEval());
      assertNotSame(jSSubstitution4, jSSubstitution2);
      assertFalse(jSSubstitution4.fail());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<JSSubstitution> predicate4 = predicate0.or(predicate3);
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      predicate5.test("d;SQZq");
      jSSubstitution0.instance(jSTerm0);
      StringReader stringReader0 = new StringReader(",");
      stringReader0.markSupported();
      jSSubstitution0.add((Object) predicate3);
      predicate5.test(",");
      jSTerm0.clone();
      stringReader0.ready();
      predicate5.negate();
      Predicate.isEqual((Object) predicate1);
      predicate3.test(jSSubstitution0);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) jSTerm0);
      predicate2.test(jSSubstitution0);
      Predicate<Object> predicate7 = predicate6.and(predicate6);
      Predicate<Object> predicate8 = predicate7.and(predicate1);
      Predicate<Object> predicate9 = predicate7.or(predicate8);
      Predicate<Object> predicate10 = predicate9.negate();
      predicate10.and(predicate6);
      predicate6.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution1);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      predicate2.negate();
      predicate4.negate();
      jSTerm1.isFunction();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.7725516359815323
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function1 = unaryOperator1.compose((Function<? super String, ? extends Integer>) function0);
      unaryOperator0.andThen((Function<? super String, ? extends Integer>) function1);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends String>) function2);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, JSTerm> function4 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super Object, ? extends JSTerm>) function4);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.apply(unaryOperator0);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator2.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator2);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      StringReader stringReader0 = new StringReader("G7VX)/[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.parseList(streamTokenizer0);
      System.setCurrentTimeMillis(2159L);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChars((-4), 2703);
      streamTokenizer0.commentChar((-4));
      StringReader stringReader1 = new StringReader("( ");
      stringReader1.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.ordinaryChars((-447), 2703);
      streamTokenizer1.commentChar(2703);
      StringReader stringReader2 = new StringReader("( ");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.whitespaceChars((-3), 1);
      streamTokenizer2.ttype = 58;
      stringReader0.markSupported();
      StringReader stringReader3 = new StringReader("hY^]gx");
      streamTokenizer2.whitespaceChars(58, (-437));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "( ";
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      boolean boolean0 = false;
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.ordinaryChars((-4), 2703);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), 0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.pushBack();
      streamTokenizer1.wordChars((-1953), (-4));
      streamTokenizer1.commentChar(2703);
      stringReader0.read();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.nval = (double) (-4);
      stringReader0.markSupported();
      streamTokenizer2.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.quoteChar((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.ordinaryChars((-4), 2703);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), 0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.pushBack();
      streamTokenizer1.wordChars((-1953), (-4));
      streamTokenizer1.commentChar(2703);
      StringReader stringReader1 = new StringReader("( ");
      stringReader1.read();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer0.eolIsSignificant(false);
      stringReader0.markSupported();
      streamTokenizer2.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer3.quoteChar((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(2);
      JSJshopVars.lessT = 37;
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.141858182523713
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, JSTerm> function3 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function3).apply(any());
      Function<Object, JSTerm> function4 = unaryOperator1.andThen((Function<? super Object, ? extends JSTerm>) function3);
      function4.apply((Object) null);
      function4.andThen((Function<? super JSTerm, ?>) unaryOperator1);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function5).apply(any());
      unaryOperator1.apply(function4);
      function1.apply("teqpbual");
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ?>) function1);
      unaryOperator1.apply(unaryOperator0);
      Function<Object, String> function7 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      Function<Object, JSSubstitution> function8 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.apply("3.0");
      Function<Object, JSSubstitution> function9 = unaryOperator1.andThen((Function<? super Object, ? extends JSSubstitution>) function8);
      StringReader stringReader0 = new StringReader("6/^||,1\"Va)!E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      function7.apply(jSTerm1);
      function7.apply(unaryOperator1);
      function7.andThen((Function<? super String, ? extends JSSubstitution>) function9);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function7);
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) function1);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n)4oPlQ{>8gR:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      CharBuffer charBuffer0 = CharBuffer.allocate(41);
      stringReader0.read(charBuffer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isConstant();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      stringReader0.reset();
      stringReader0.mark(46);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(teua,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 620;
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.04776041683849
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.ordinaryChars((-4), 2703);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), 0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.pushBack();
      streamTokenizer1.wordChars((-1953), (-4));
      streamTokenizer1.commentChar(2703);
      StringReader stringReader1 = new StringReader("( ");
      stringReader1.read();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.nval = (double) (-4);
      stringReader0.markSupported();
      streamTokenizer2.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer3.quoteChar((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.04776041683849
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.greaterT = 0;
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "_~)=_c<y");
      jSSubstitution0.addElement(jSTerm0);
      Object[] objectArray0 = new Object[2];
      jSSubstitution0.toArray(objectArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(10, jSSubstitution1.capacity());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(teua,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(46);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "(teua,", 46, (-4));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
}
