/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 09:48:03 GMT 2019
 */

package org.jsecurity.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.servlet.ServletInputStream;
import javax.servlet.ServletRequest;
import javax.servlet.ServletRequestWrapper;
import javax.servlet.ServletResponse;
import javax.servlet.ServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsecurity.authc.AuthenticationListener;
import org.jsecurity.authz.ModularRealmAuthorizer;
import org.jsecurity.authz.permission.PermissionResolver;
import org.jsecurity.authz.permission.WildcardPermissionResolver;
import org.jsecurity.realm.Realm;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.session.Session;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.jsecurity.subject.Subject;
import org.jsecurity.web.DefaultWebSecurityManager;
import org.jsecurity.web.WebRememberMeManager;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultWebSecurityManager_ESTest extends DefaultWebSecurityManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, true, (Session) null, (ServletRequest) null, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      WebRememberMeManager webRememberMeManager1 = new WebRememberMeManager();
      WebRememberMeManager webRememberMeManager2 = new WebRememberMeManager();
      webRememberMeManager2.setCookieSecure(false);
      webRememberMeManager2.setCipherKey((byte[]) null);
      defaultWebSecurityManager0.isAuthenticated((Session) null);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieMaxAge((-63));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      boolean boolean0 = defaultWebSecurityManager0.isAuthenticated((Session) null, servletRequestWrapper0, servletResponseWrapper0);
      assertFalse(boolean0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7102476273485032
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) null);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection("jsecurity", "jsecurity");
      String[] stringArray0 = new String[0];
      modularRealmAuthorizer0.isPermittedAll((PrincipalCollection) simplePrincipalCollection0, stringArray0);
      simplePrincipalCollection0.asSet();
      Consumer<SimplePrincipalCollection> consumer0 = (Consumer<SimplePrincipalCollection>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      simplePrincipalCollection0.asSet();
      Locale locale0 = Locale.PRC;
      simplePrincipalCollection0.forEach(consumer0);
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(":!D5Iz?wHX`6avOls8", "9B=<{E(0k*(x{a7=1");
      modularRealmAuthorizer0.getRealms();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.newSessionManagerInstance();
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.018703762168135
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) null);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection("jsecurity", "jsecurity");
      String[] stringArray0 = new String[0];
      modularRealmAuthorizer0.isPermittedAll((PrincipalCollection) simplePrincipalCollection0, stringArray0);
      simplePrincipalCollection0.fromRealm("org.jsecurity.authc.CredentialsException");
      FileSystemHandling.shouldAllThrowIOExceptions();
      simplePrincipalCollection0.asSet();
      Consumer<SimplePrincipalCollection> consumer0 = (Consumer<SimplePrincipalCollection>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      simplePrincipalCollection0.asSet();
      Locale locale0 = Locale.PRC;
      simplePrincipalCollection0.forEach(consumer0);
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(":!D5Iz?wHX`6avOls8", "9B=<{E(0k*(x{a7=1");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.setSessionIdCookiePath("l$");
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9564895369375028
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm1);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      DefaultWebSecurityManager defaultWebSecurityManager2 = null;
      try {
        defaultWebSecurityManager2 = new DefaultWebSecurityManager(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realms collection argument cannot be empty.
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(servletRequest0).getAttribute(anyString());
      doReturn((String) null).when(servletRequest0).getLocalName();
      doReturn(0).when(servletRequest0).getLocalPort();
      doReturn((Enumeration) null).when(servletRequest0).getLocales();
      doReturn((Enumeration) null).when(servletRequest0).getParameterNames();
      doReturn((String) null).when(servletRequest0).getRealPath(anyString());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletRequestWrapper0.getRealPath("a");
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper2.getLocalPort();
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      servletRequestWrapper2.getAttribute("xn$/KR[");
      servletRequestWrapper3.getLocales();
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper2.getAttribute(".HA*-na\"}");
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper5);
      ServletRequestWrapper servletRequestWrapper8 = new ServletRequestWrapper(servletRequestWrapper7);
      servletRequestWrapper8.getLocalName();
      ServletRequestWrapper servletRequestWrapper9 = new ServletRequestWrapper(servletRequestWrapper5);
      servletRequestWrapper1.getParameterNames();
      ServletRequestWrapper servletRequestWrapper10 = new ServletRequestWrapper(servletRequestWrapper9);
      ServletRequestWrapper servletRequestWrapper11 = new ServletRequestWrapper(servletRequestWrapper10);
      ServletRequestWrapper servletRequestWrapper12 = new ServletRequestWrapper(servletRequestWrapper0);
      LinkedHashSet<AuthenticationListener> linkedHashSet0 = new LinkedHashSet<AuthenticationListener>();
      ServletRequestWrapper servletRequestWrapper13 = new ServletRequestWrapper(servletRequestWrapper9);
      ServletRequestWrapper servletRequestWrapper14 = new ServletRequestWrapper(servletRequestWrapper5);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      Integer.getInteger("wB9ha>");
      LinkedHashSet<AuthenticationListener> linkedHashSet2 = new LinkedHashSet<AuthenticationListener>();
      Boolean boolean0 = new Boolean((String) null);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Subject subject0 = defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, true, (Session) null, (ServletRequest) servletRequestWrapper5, (ServletResponse) servletResponseWrapper0);
      assertTrue(subject0.isAuthenticated());
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.getPrincipals((Session) null);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getLocalAddr();
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletRequestWrapper0.getLocalAddr();
      Subject subject0 = defaultWebSecurityManager0.createSubject((PrincipalCollection) null, false, (Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) null);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(subject0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.285822107535199
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      LinkedHashSet<AuthenticationListener> linkedHashSet0 = new LinkedHashSet<AuthenticationListener>();
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(authenticationListener0);
      Class<AuthenticationListener> class0 = AuthenticationListener.class;
      simplePrincipalCollection0.byType(class0);
      AuthenticationListener authenticationListener1 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(authenticationListener1);
      LinkedHashSet<AuthenticationListener> linkedHashSet1 = new LinkedHashSet<AuthenticationListener>();
      LinkedHashSet<Integer> linkedHashSet2 = new LinkedHashSet<Integer>();
      LinkedHashSet<AuthenticationListener> linkedHashSet3 = new LinkedHashSet<AuthenticationListener>();
      defaultWebSecurityManager0.setAuthenticationListeners(linkedHashSet0);
      LinkedHashSet<AuthenticationListener> linkedHashSet4 = new LinkedHashSet<AuthenticationListener>();
      Integer.getInteger("-authorization");
      LinkedHashSet<AuthenticationListener> linkedHashSet5 = new LinkedHashSet<AuthenticationListener>();
      LinkedHashSet<AuthenticationListener> linkedHashSet6 = new LinkedHashSet<AuthenticationListener>();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      LinkedHashSet<AuthenticationListener> linkedHashSet7 = new LinkedHashSet<AuthenticationListener>();
      defaultWebSecurityManager0.setSessionIdCookieSecure(false);
      System.setCurrentTimeMillis(1L);
      defaultWebSecurityManager0.setSessionIdCookieMaxAge((-1));
      defaultWebSecurityManager0.setSessionIdCookieMaxAge(928);
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7063260587210523
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) null);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection("jsecurity", "jsecurity");
      String[] stringArray0 = new String[0];
      modularRealmAuthorizer0.isPermittedAll((PrincipalCollection) simplePrincipalCollection0, stringArray0);
      simplePrincipalCollection0.asSet();
      Consumer<SimplePrincipalCollection> consumer0 = (Consumer<SimplePrincipalCollection>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      simplePrincipalCollection0.asSet();
      Locale locale0 = Locale.PRC;
      simplePrincipalCollection0.forEach(consumer0);
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(":!D5Iz?wHX`6avOls8", "9B=<{E(0k*(x{a7=1");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.isHttpSessionMode();
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6120172700343436
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      Locale locale0 = Locale.ENGLISH;
      servletResponseWrapper1.flushBuffer();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getRealPath(anyString());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletRequestWrapper0.getRealPath("a");
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper0.setRequest(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper5);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper2);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320/org.jsecurity.realm.text.PropertiesRealm-0-accounts.index");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jscuity");
      FileSystemHandling.createFolder(evoSuiteFile1);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.getPrincipals((Session) null);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      defaultWebSecurityManager0.getPrincipals((Session) null, servletRequestWrapper0, (ServletResponse) null);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6120172700343436
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      Locale locale0 = Locale.ENGLISH;
      servletResponseWrapper1.flushBuffer();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((ServletInputStream) null).when(servletRequest0).getInputStream();
      doReturn((Enumeration) null).when(servletRequest0).getLocales();
      doReturn((String) null).when(servletRequest0).getRealPath(anyString());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletRequestWrapper0.getRealPath("a");
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper2.getInputStream();
      servletRequestWrapper1.getLocales();
      servletRequestWrapper2.setRequest(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper1, (ServletResponse) servletResponseWrapper2);
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm((String) null);
      simpleAccountRealm1.setName("org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY");
      assertFalse(simpleAccountRealm1.equals((Object)simpleAccountRealm0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.161836259170902
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      DefaultWebSecurityManager defaultWebSecurityManager2 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionIdCookieName("sj!%$*qQZ`UK");
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
      
      defaultWebSecurityManager1.newSessionManagerInstance();
      assertTrue(defaultWebSecurityManager1.isHttpSessionMode());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      String string0 = defaultWebSecurityManager0.getSessionMode();
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      assertEquals("http", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.282722188566408
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      DefaultWebSecurityManager defaultWebSecurityManager2 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionIdCookieMaxAge((-2089685830));
      DefaultWebSecurityManager defaultWebSecurityManager3 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.getSessionMode();
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
      
      defaultWebSecurityManager2.newSessionManagerInstance();
      assertEquals("http", defaultWebSecurityManager2.getSessionMode());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.ENGLISH;
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("G7!TE2#_");
      PermissionResolver permissionResolver0 = simpleAccountRealm1.getPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      wildcardPermissionResolver0.resolvePermission("G7!TE2#_");
      wildcardPermissionResolver0.resolvePermission(".index");
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm();
      simpleAccountRealm0.setPermissionResolver(permissionResolver0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m1xv{'M%p->-");
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm("(<Pk|+-!uj&_S");
      SimpleAccountRealm simpleAccountRealm5 = new SimpleAccountRealm("Invalid sessionMode [");
      simpleAccountRealm1.setName("Invalid sessionMode [");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind((Subject) null, servletRequestWrapper0, servletResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setRememberMeCookiePath("a");
      LinkedHashSet<AuthenticationListener> linkedHashSet0 = new LinkedHashSet<AuthenticationListener>();
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(authenticationListener0);
      Stream<AuthenticationListener> stream0 = linkedHashSet0.parallelStream();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stream0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.and(predicate0);
      linkedHashSet0.removeIf(predicate1);
      linkedHashSet0.add((AuthenticationListener) null);
      LinkedHashSet<AuthenticationListener> linkedHashSet1 = new LinkedHashSet<AuthenticationListener>();
      linkedHashSet1.clone();
      LinkedHashSet<AuthenticationListener> linkedHashSet2 = new LinkedHashSet<AuthenticationListener>();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      LinkedHashSet<AuthenticationListener> linkedHashSet3 = new LinkedHashSet<AuthenticationListener>();
      linkedHashSet3.add((AuthenticationListener) null);
      linkedHashSet1.add((AuthenticationListener) null);
      LinkedHashSet<AuthenticationListener> linkedHashSet4 = new LinkedHashSet<AuthenticationListener>();
      LinkedHashSet<AuthenticationListener> linkedHashSet5 = new LinkedHashSet<AuthenticationListener>();
      LinkedHashSet<Integer> linkedHashSet6 = new LinkedHashSet<Integer>();
      LinkedHashSet<AuthenticationListener> linkedHashSet7 = new LinkedHashSet<AuthenticationListener>();
      Integer.getInteger("]mt2$");
      LinkedHashSet<AuthenticationListener> linkedHashSet8 = new LinkedHashSet<AuthenticationListener>();
      System.setCurrentTimeMillis(507L);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = new Boolean(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [null].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8083695164005986
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-127);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale locale0 = Locale.ENGLISH;
      servletResponseWrapper0.setBufferSize((-1614649357));
      servletResponseWrapper0.flushBuffer();
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      DefaultWebSecurityManager defaultWebSecurityManager2 = new DefaultWebSecurityManager();
      Integer integer0 = new Integer((byte) (-127));
      defaultWebSecurityManager2.setRememberMeCookieMaxAge(integer0);
      assertTrue(defaultWebSecurityManager2.isHttpSessionMode());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "|'>Z:Sp'*w1[w +4N");
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      simpleAccountRealm1.setName("");
      defaultWebSecurityManager0.setSessionMode("http");
      System.setCurrentTimeMillis(1316L);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      Locale locale0 = Locale.ENGLISH;
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(servletRequest0).getAttribute(anyString());
      doReturn((String) null).when(servletRequest0).getLocalName();
      doReturn((Enumeration) null).when(servletRequest0).getLocales();
      doReturn((Enumeration) null).when(servletRequest0).getParameterNames();
      doReturn((String) null).when(servletRequest0).getRealPath(anyString());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletRequestWrapper0.getRealPath("a");
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      servletRequestWrapper2.getAttribute("xn$/KR[");
      servletRequestWrapper3.getLocales();
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper2.getAttribute(".HA*-na\"}");
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper5);
      ServletRequestWrapper servletRequestWrapper8 = new ServletRequestWrapper(servletRequestWrapper7);
      servletRequestWrapper8.getLocalName();
      ServletRequestWrapper servletRequestWrapper9 = new ServletRequestWrapper(servletRequestWrapper5);
      servletRequestWrapper1.getParameterNames();
      ServletRequestWrapper servletRequestWrapper10 = new ServletRequestWrapper(servletRequestWrapper9);
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer();
      modularRealmAuthorizer0.getRealms();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequestWrapper servletRequestWrapper11 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      servletResponseWrapper0.setContentType((String) null);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) null, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320/org.jsecurity.realm.text.PropertiesRealm-0-accounts.data");
      FileSystemHandling.createFolder(evoSuiteFile0);
      System.setCurrentTimeMillis((-1L));
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      LinkedHashSet<AuthenticationListener> linkedHashSet0 = new LinkedHashSet<AuthenticationListener>();
      linkedHashSet0.parallelStream();
      linkedHashSet0.add((AuthenticationListener) null);
      LinkedHashSet<AuthenticationListener> linkedHashSet1 = new LinkedHashSet<AuthenticationListener>();
      linkedHashSet1.clone();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      LinkedHashSet<AuthenticationListener> linkedHashSet2 = new LinkedHashSet<AuthenticationListener>();
      linkedHashSet1.clone();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      LinkedHashSet<AuthenticationListener> linkedHashSet3 = new LinkedHashSet<AuthenticationListener>();
      linkedHashSet1.add((AuthenticationListener) null);
      Class<AuthenticationListener> class0 = AuthenticationListener.class;
      simplePrincipalCollection1.byType(class0);
      linkedHashSet2.add((AuthenticationListener) null);
      LinkedHashSet<AuthenticationListener> linkedHashSet4 = new LinkedHashSet<AuthenticationListener>();
      LinkedHashSet<Integer> linkedHashSet5 = new LinkedHashSet<Integer>();
      LinkedHashSet<AuthenticationListener> linkedHashSet6 = new LinkedHashSet<AuthenticationListener>();
      defaultWebSecurityManager0.setAuthenticationListeners(linkedHashSet0);
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      LinkedHashSet<AuthenticationListener> linkedHashSet7 = new LinkedHashSet<AuthenticationListener>();
      Integer.getInteger("~HS;o'rjUsu6");
      LinkedHashSet<AuthenticationListener> linkedHashSet8 = new LinkedHashSet<AuthenticationListener>();
      LinkedHashSet<AuthenticationListener> linkedHashSet9 = new LinkedHashSet<AuthenticationListener>();
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection();
      LinkedHashSet<AuthenticationListener> linkedHashSet10 = new LinkedHashSet<AuthenticationListener>();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieSecure(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(servletRequest0).getContentLength();
      doReturn((ServletInputStream) null).when(servletRequest0).getInputStream();
      doReturn((Enumeration) null).when(servletRequest0).getLocales();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      servletRequestWrapper3.getContentLength();
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?!cEIMHPms56");
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper5);
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper7.getInputStream();
      servletRequestWrapper3.getLocales();
      ServletRequestWrapper servletRequestWrapper8 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper9 = new ServletRequestWrapper(servletRequestWrapper6);
      servletRequestWrapper6.setRequest(servletRequestWrapper9);
      ServletRequestWrapper servletRequestWrapper10 = new ServletRequestWrapper(servletRequestWrapper9);
      ServletRequestWrapper servletRequestWrapper11 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper12 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper13 = new ServletRequestWrapper(servletRequestWrapper5);
      ServletRequestWrapper servletRequestWrapper14 = new ServletRequestWrapper(servletRequestWrapper7);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper3);
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager((Realm) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realm argument cannot be null
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      LinkedHashSet<AuthenticationListener> linkedHashSet0 = new LinkedHashSet<AuthenticationListener>();
      linkedHashSet0.parallelStream();
      linkedHashSet0.add((AuthenticationListener) null);
      LinkedHashSet<AuthenticationListener> linkedHashSet1 = new LinkedHashSet<AuthenticationListener>();
      LinkedHashSet<AuthenticationListener> linkedHashSet2 = new LinkedHashSet<AuthenticationListener>();
      linkedHashSet2.parallelStream();
      LinkedHashSet<AuthenticationListener> linkedHashSet3 = new LinkedHashSet<AuthenticationListener>(0);
      linkedHashSet1.add((AuthenticationListener) null);
      LinkedHashSet<AuthenticationListener> linkedHashSet4 = new LinkedHashSet<AuthenticationListener>();
      LinkedHashSet<SimplePrincipalCollection> linkedHashSet5 = new LinkedHashSet<SimplePrincipalCollection>();
      linkedHashSet0.add((AuthenticationListener) null);
      LinkedHashSet<AuthenticationListener> linkedHashSet6 = new LinkedHashSet<AuthenticationListener>();
      LinkedHashSet<Integer> linkedHashSet7 = new LinkedHashSet<Integer>();
      LinkedHashSet<AuthenticationListener> linkedHashSet8 = new LinkedHashSet<AuthenticationListener>();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      LinkedHashSet<AuthenticationListener> linkedHashSet9 = new LinkedHashSet<AuthenticationListener>();
      Integer.getInteger("^_uCdl/$O:K<j).");
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookiePath("$>MG$H]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      Locale locale0 = Locale.ENGLISH;
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(servletRequest0).getAttribute(anyString());
      doReturn((String) null).when(servletRequest0).getContentType();
      doReturn((ServletInputStream) null).when(servletRequest0).getInputStream();
      doReturn((String) null).when(servletRequest0).getLocalName();
      doReturn((Enumeration) null).when(servletRequest0).getLocales();
      doReturn((Enumeration) null).when(servletRequest0).getParameterNames();
      doReturn((String) null).when(servletRequest0).getProtocol();
      doReturn((String) null).when(servletRequest0).getRemoteAddr();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      Object object0 = new Object();
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper2.getAttribute(".HA*-na\"}");
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper5);
      ServletRequestWrapper servletRequestWrapper8 = new ServletRequestWrapper(servletRequestWrapper7);
      servletRequestWrapper8.getLocalName();
      ServletRequestWrapper servletRequestWrapper9 = new ServletRequestWrapper(servletRequestWrapper5);
      servletRequestWrapper1.getParameterNames();
      ServletRequestWrapper servletRequestWrapper10 = new ServletRequestWrapper(servletRequestWrapper9);
      ServletRequestWrapper servletRequestWrapper11 = new ServletRequestWrapper(servletRequestWrapper10);
      ServletRequestWrapper servletRequestWrapper12 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper4.getContentType();
      ServletRequestWrapper servletRequestWrapper13 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletRequestWrapper servletRequestWrapper14 = new ServletRequestWrapper(servletRequestWrapper10);
      ServletRequestWrapper servletRequestWrapper15 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper15.getRemoteAddr();
      servletRequestWrapper15.getInputStream();
      servletRequestWrapper3.getProtocol();
      ServletRequestWrapper servletRequestWrapper16 = new ServletRequestWrapper(servletRequestWrapper8);
      servletRequestWrapper7.getLocales();
      servletRequestWrapper0.getRequest();
      ServletRequestWrapper servletRequestWrapper17 = new ServletRequestWrapper(servletRequestWrapper8);
      ServletRequestWrapper servletRequestWrapper18 = new ServletRequestWrapper(servletRequestWrapper16);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieName(".HA*-na\"}");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      PermissionResolver permissionResolver0 = simpleAccountRealm0.getPermissionResolver();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      simpleAccountRealm1.setPermissionResolver(permissionResolver0);
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("role.");
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm("role.");
      simpleAccountRealm2.setName(", which is enabled by default when the ");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(simpleAccountRealm3, ".RX1r%iLj`c +.<>");
      Class<Realm> class0 = Realm.class;
      Collection<Realm> collection0 = simplePrincipalCollection0.byType(class0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(collection0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookiePath("public static final String constants in the ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4558487091517962
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.isHttpSessionMode();
      simpleAccountRealm0.setName("");
      PermissionResolver permissionResolver0 = simpleAccountRealm0.getPermissionResolver();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      simpleAccountRealm1.setPermissionResolver(permissionResolver0);
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm("");
      simpleAccountRealm3.setName("].  Allowed values are ");
      assertFalse(simpleAccountRealm3.equals((Object)simpleAccountRealm1));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4558487091517962
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.isHttpSessionMode();
      simpleAccountRealm0.setName("");
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      simpleAccountRealm1.setPermissionResolver(wildcardPermissionResolver0);
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("http");
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm("");
      simpleAccountRealm3.setName("G.  Allowed values are ");
      assertFalse(simpleAccountRealm3.equals((Object)simpleAccountRealm0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      Locale locale0 = Locale.ENGLISH;
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(servletRequest0).getAttribute(anyString());
      doReturn((String) null).when(servletRequest0).getContentType();
      doReturn((String) null).when(servletRequest0).getLocalName();
      doReturn((Enumeration) null, (Enumeration) null).when(servletRequest0).getLocales();
      doReturn((Enumeration) null).when(servletRequest0).getParameterNames();
      doReturn((String) null).when(servletRequest0).getRealPath(anyString());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletRequestWrapper0.getRealPath("a");
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      servletRequestWrapper2.getAttribute("xn$/KR[");
      servletRequestWrapper3.getLocales();
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper1);
      String string0 = ".HA*-na\"}";
      servletRequestWrapper2.getAttribute(".HA*-na\"}");
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper5);
      ServletRequestWrapper servletRequestWrapper8 = new ServletRequestWrapper(servletRequestWrapper7);
      servletRequestWrapper8.getLocalName();
      ServletRequestWrapper servletRequestWrapper9 = new ServletRequestWrapper(servletRequestWrapper5);
      servletRequestWrapper1.getParameterNames();
      ServletRequestWrapper servletRequestWrapper10 = new ServletRequestWrapper(servletRequestWrapper9);
      ServletRequestWrapper servletRequestWrapper11 = new ServletRequestWrapper(servletRequestWrapper10);
      ServletRequestWrapper servletRequestWrapper12 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper4.getContentType();
      ServletRequestWrapper servletRequestWrapper13 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletRequestWrapper servletRequestWrapper14 = new ServletRequestWrapper(servletRequestWrapper10);
      ServletRequestWrapper servletRequestWrapper15 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper16 = new ServletRequestWrapper(servletRequestWrapper15);
      servletRequestWrapper7.getLocales();
      ServletRequestWrapper servletRequestWrapper17 = new ServletRequestWrapper(servletRequestWrapper8);
      ServletRequestWrapper servletRequestWrapper18 = new ServletRequestWrapper(servletRequestWrapper16);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) servletRequestWrapper6, (ServletResponse) servletResponseWrapper2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.servlet.ServletRequestWrapper cannot be cast to javax.servlet.http.HttpServletRequest
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) null);
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      modularRealmAuthorizer0.setPermissionResolver(wildcardPermissionResolver0);
      modularRealmAuthorizer0.getRealms();
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      wildcardPermissionResolver1.resolvePermission("jsecurity");
      wildcardPermissionResolver1.resolvePermission("jsecurity");
      simpleAccountRealm0.setPermissionResolver(wildcardPermissionResolver1);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode(", which is enabled by default when the ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [, which is enabled by default when the ].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer((Collection<Realm>) null);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection("_AUTHENTICATED_SESSION_KEY", "_AUTHENTICATED_SESSION_KEY");
      String[] stringArray0 = new String[0];
      modularRealmAuthorizer0.isPermittedAll((PrincipalCollection) simplePrincipalCollection0, stringArray0);
      simplePrincipalCollection0.fromRealm("_AUTHENTICATED_SESSION_KEY");
      simplePrincipalCollection0.spliterator();
      simplePrincipalCollection0.fromRealm("org.jsecurity.authc.CredentialsExcRption");
      simplePrincipalCollection0.asSet();
      Consumer<SimplePrincipalCollection> consumer0 = (Consumer<SimplePrincipalCollection>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      simplePrincipalCollection0.asSet();
      Locale locale0 = Locale.PRC;
      simplePrincipalCollection0.forEach(consumer0);
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(":!D5Iz?wHX`6avOls8", "9B=<{E(0k*(x{a7=1");
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm(":!D5Iz?wHX`6avOls8");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      LinkedHashSet<AuthenticationListener> linkedHashSet0 = new LinkedHashSet<AuthenticationListener>();
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.parallelStream();
      linkedHashSet0.add((AuthenticationListener) null);
      LinkedHashSet<AuthenticationListener> linkedHashSet1 = new LinkedHashSet<AuthenticationListener>();
      linkedHashSet1.clone();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Class<AuthenticationListener> class0 = AuthenticationListener.class;
      linkedHashSet1.add((AuthenticationListener) null);
      simplePrincipalCollection0.byType(class0);
      linkedHashSet1.add((AuthenticationListener) null);
      LinkedHashSet<AuthenticationListener> linkedHashSet2 = new LinkedHashSet<AuthenticationListener>();
      LinkedHashSet<Integer> linkedHashSet3 = new LinkedHashSet<Integer>();
      LinkedHashSet<AuthenticationListener> linkedHashSet4 = new LinkedHashSet<AuthenticationListener>();
      defaultWebSecurityManager0.setAuthenticationListeners(linkedHashSet4);
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      LinkedHashSet<AuthenticationListener> linkedHashSet5 = new LinkedHashSet<AuthenticationListener>();
      Integer.getInteger("public static final String constants in the ");
      LinkedHashSet<AuthenticationListener> linkedHashSet6 = new LinkedHashSet<AuthenticationListener>();
      linkedHashSet4.add((AuthenticationListener) null);
      linkedHashSet2.add((AuthenticationListener) null);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("public static final String constants in the ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [public static final String constants in the ].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }
}
