/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 09:57:09 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("zkz#hy<SS.6uo^[Q17.");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress1 = MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("]dVor\">#fgGs", (String) null, inetAddress1);
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress2 = MockInetAddress.getLocalHost();
      assertFalse(inetAddress2.equals((Object)inetAddress0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "viTlrRt|4_yg", false);
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("j", (String) null, false);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("qj63f\u0006l6G3<d[mq");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName(")");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = ')';
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("qj63f\u0006l6G3<d[mq", charArray0, true, inetAddress0);
      InetAddress inetAddress1 = MockInetAddress.getLocalHost();
      assertFalse(inetAddress1.isMulticastAddress());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("kz#hy<SS.6uo^[Q17.");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName(")");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("kz#hy<SS.6uo^[Q17.", (String) null, true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("qj63f\u0006l6G3<d[mq");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName(")");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = ')';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("qj63f\u0006l6G3<d[mq", "Z3_D.Wa/9Z-t_DR", inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("kz#hy<SS.6uo^[Q17.");
      MockInetAddress.getLocalHost();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("Y!V+GW&w7#FWBydmU");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = '9';
      charArray0[2] = 'x';
      charArray0[3] = 'G';
      charArray0[4] = '4';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, inetAddress0);
      usernamePasswordToken0.clear();
      InetAddress inetAddress1 = MockInetAddress.getLocalHost();
      assertFalse(inetAddress1.isLoopbackAddress());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(":FT$9\"_QA0zK", "", false);
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(":FT$9\"_QA0zK", "i", false);
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("zkz#hy<SS.6uo^[Q17.");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "di{uZ1:(sRsi J", true, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=true (/127.0.0.1)", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = '4';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("E8L).C?vJ=KNRI&5A2", "", true);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Tx=$JIoDQ?E!^w=enG", "H8wg{Q=]D?km.nBoS1r", true);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName(")");
      MockInetAddress.getByName(")");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Ra}{<dagA", "Ra}{<dagA", inetAddress0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = 'N';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("UXOqCDvm=);JH=.O", "'>xp*tdz*BtVz4IUTxG");
      usernamePasswordToken0.setPassword(charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("[<scLV^c_}lmMw_IXA:", "[<scLV^c_}lmMw_IXA:");
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("Y!V+GW&w7#FWBydmU");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Ra}{<dagA", "=))~LdTMc.`V`'v_", inetAddress0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - Ra}{<dagA, rememberMe=false (Y!V+GW&w7#FWBydmU/200.42.42.0)", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      char[] charArray0 = new char[5];
      charArray0[0] = '9';
      charArray0[1] = '&';
      charArray0[3] = '^';
      charArray0[4] = 'F';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("kz#hy<SS.6uo^[Q17.");
      MockInetAddress.getLocalHost();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress1 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("kz#hy<SS.6uo^[Q17.");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("I", "c5pL", inetAddress1);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      InetAddress inetAddress2 = MockInetAddress.getLocalHost();
      assertEquals("192.168.1.42", inetAddress2.getHostAddress());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("i?%");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("$nm80KWC5J]D");
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress1 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "$nm80KWC5J]D", inetAddress1);
      usernamePasswordToken0.setUsername("i?%");
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress2 = MockInetAddress.getLocalHost();
      assertFalse(inetAddress2.equals((Object)inetAddress0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Tx=$JI'ZoDQ?E!^w=enG", "B:P`w_S7bnE|/=SBY^h");
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("1\"h)RqiT", (char[]) null);
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = '4';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("/*`rc&wY", "[?f|");
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null);
      usernamePasswordToken0.setRememberMe(false);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("x|pzRdZqE", "x|pzRdZqE", false);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("9kbfNe0ekb{a4o'Ki%", "9kbfNe0ekb{a4o'Ki%", false);
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'U';
      charArray0[2] = '[';
      charArray0[3] = 'v';
      charArray0[4] = 'T';
      charArray0[5] = 'B';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("et.x3</*<WqD", charArray0, false);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }
}
