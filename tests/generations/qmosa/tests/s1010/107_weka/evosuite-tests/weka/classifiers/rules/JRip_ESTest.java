/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 10:33:48 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASEvaluation;
import weka.attributeSelection.ASSearch;
import weka.attributeSelection.BestFirst;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.Ranker;
import weka.attributeSelection.SymmetricalUncertAttributeEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9456645463488123
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      binarySparseInstance0.setWeight(Double.NaN);
      DenseInstance denseInstance0 = new DenseInstance(1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      Integer integer0 = new Integer(2);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      jRip0.toString();
      Attribute attribute0 = new Attribute("bm*@3K7FSMfqy>", "=");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ClassOrder classOrder0 = new ClassOrder();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("E", arrayList1, 1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip1 = new JRip();
      instances0.add((Instance) binarySparseInstance0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.accu = (double) 0;
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd((Attribute) null);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 2784.0, 1002.10765369948);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      Integer[] integerArray0 = new Integer[5];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer integer2 = new Integer(int0);
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(5);
      Integer integer4 = new Integer(int0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      jRip0.toString();
      Attribute attribute0 = new Attribute("", "=");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ClassOrder classOrder0 = new ClassOrder();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList1, 2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip1 = new JRip();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      arrayList1.add(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 0, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      binarySparseInstance0.setWeight(Double.NaN);
      Attribute attribute0 = new Attribute("", 5);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (-960.64674);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      CostMatrix costMatrix0 = new CostMatrix(3);
      CostMatrix costMatrix1 = null;
      try {
        costMatrix1 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-84);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-26);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "];JB;&4@`a'3(`}^|P");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "];JB;&4@`a'3(`}^|P");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "];JB;&4@`a'3(`}^|P");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Whether debug information is output to the console.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iu@HI$2W");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoverTree coverTree0 = new CoverTree();
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getCheckErrorRate());
      
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "];JB;&4@`a'3(`}^|P");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "];JB;&4@`a'3(`}^|P");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "];JB;&4@`a'3(`}^|P");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iHI$2W");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)79;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      CoverTree coverTree2 = new CoverTree();
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      jRip0.setDebug(true);
      jRip0.getOptions();
      assertTrue(jRip0.getDebug());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte) (-37);
      byteArray0[7] = (byte) (-28);
      byteArray0[7] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7T1u!~T -MaZd:J2");
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      CoverTree coverTree2 = new CoverTree();
      CoverTree coverTree3 = new CoverTree();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.ensureCapacity((-100));
      Instances instances0 = new Instances("?(?", arrayList0, 830);
      jRip0.minNoTipText();
      DenseInstance denseInstance0 = new DenseInstance(2035);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      instances0.add((Instance) sparseInstance0);
      jRip0.minNoTipText();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7T1u!~T -MaZd:J2");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7T1u!~T -MaZd:J2");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7T1u!~T -MaZd:J2");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7T1u!~T -MaZd:J2");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7T1u!~T -MaZd:J2");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-15);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      jRip0.toString();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.value = (double) (byte)111;
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Hashtable<String, List<String>> hashtable0 = new Hashtable<String, List<String>>();
      DenseInstance denseInstance0 = new DenseInstance(5);
      Attribute attribute0 = new Attribute("]QO8jWeTx4N7YjH#", 2);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(denseInstance0);
      CostMatrix costMatrix0 = new CostMatrix(4);
      CostMatrix costMatrix1 = null;
      try {
        costMatrix1 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      jRip0.getDebug();
      jRip0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ClassOrder classOrder0 = new ClassOrder();
      IBk iBk0 = new IBk();
      CoverTree coverTree0 = new CoverTree();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Random.setNextRandom((-2134754847));
      JRip jRip0 = new JRip();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      
      jRip0.setMinNo((-1.0));
      jRip0.getSeed();
      double double0 = jRip0.getMinNo();
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "]}PQl2*X)#C#)";
      stringArray0[2] = "";
      stringArray0[3] = "&";
      stringArray0[4] = "(U";
      stringArray0[5] = "-";
      stringArray0[6] = "  public String globalInfo() {\n";
      stringArray0[7] = "AFFILIATION";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      int[] intArray0 = new int[6];
      jRip0.getUsePruning();
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = 3;
      intArray0[4] = 4;
      intArray0[5] = (-68);
      try { 
        decisionTable0.evaluateFoldCV((Instances) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.DecisionTable", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      binarySparseInstance0.setWeight(Double.NaN);
      DenseInstance denseInstance0 = new DenseInstance(1);
      Attribute attribute0 = new Attribute("5v+BT%", 5);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (double) 2;
      jRip_NumericAntd0.covers(binarySparseInstance0);
      CostMatrix costMatrix0 = new CostMatrix(3);
      CostMatrix costMatrix1 = null;
      CostMatrix costMatrix2 = null;
      try {
        costMatrix2 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.873029116491111
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      binarySparseInstance0.setWeight(Double.NaN);
      Attribute attribute0 = new Attribute("", 5);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      Instances instances1 = decisionTable1.m_dtInstances;
      try { 
        jRip0.rulesetForOneClass(Double.NaN, (Instances) null, 2.0, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Hashtable<String, List<String>> hashtable0 = new Hashtable<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashtable0);
      Hashtable<String, List<String>> hashtable1 = new Hashtable<String, List<String>>();
      hashtable0.putAll(hashtable1);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(list0);
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      locale0.toLanguageTag();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags(list0, (Collection<String>) set0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode1);
      locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.JAPANESE;
      locale0.getDisplayName(locale1);
      linkedList2.addAll((Collection<? extends Locale.LanguageRange>) arrayList0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("A.regression(B, weights} ridge)\n");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      ClassOrder classOrder0 = new ClassOrder();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("| dat size: ", arrayList1, 1);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      Instances instances1 = new Instances(instances0, 6);
      jRip_NumericAntd0.splitData(instances1, 6, 0);
      jRip_NumericAntd0.splitData(instances0, 119.0, (-1396.0));
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Random.setNextRandom(1717986918);
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 4, 1.0E-4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("wdf{;x;0f^MLU2", arrayList0, 1710);
      Attribute attribute0 = new Attribute("wdf{;x;0f^MLU2");
      JRip jRip0 = new JRip();
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      CoverTree coverTree2 = new CoverTree();
      CoverTree coverTree3 = new CoverTree();
      CoverTree coverTree4 = new CoverTree();
      CoverTree coverTree5 = new CoverTree();
      coverTree0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.ensureCapacity(3);
      Instances instances1 = new Instances("A Bayesian method for constructing Bayesian belief networks from databases", arrayList0, 2);
      jRip_RipperRule0.prune(instances0, true);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8720520186532996
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("weka.filters.SimpleBatchFilter", arrayList0, 1710);
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      DecisionTable decisionTable0 = new DecisionTable();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      Instances instances1 = decisionTable1.m_dtInstances;
      try { 
        jRip0.rulesetForOneClass(1, instances0, 4.5, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      Integer[] integerArray0 = new Integer[5];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer integer2 = new Integer(int0);
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(int0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) int0;
      integerArray0[1] = integer0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[3] = (double) int0;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      jRip0.toString();
      Attribute attribute0 = new Attribute("JRIP: No model built yet.", 5);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ClassOrder classOrder0 = new ClassOrder();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("R*mRH6:)PS=nr)C0{m", arrayList1, 37);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, int0, 64.0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1017582594794764
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      DecisionTable decisionTable1 = new DecisionTable();
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      decisionTable1.m_evaluator = (ASEvaluation) symmetricalUncertAttributeEval0;
      try { 
        jRip0.rulesetForOneClass(4, (Instances) null, 2296.05352778419, (-1186.15413129326));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Random.setNextRandom(4);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getAccuRate();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier3 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier4 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier5 = new InputMappedClassifier();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "w!8LdDe}>_W0:Q1<";
      stringArray0[1] = "&5R}*$,U[K";
      stringArray0[2] = "w!8LdDe}>_W0:Q1<";
      stringArray0[3] = "w!8LdDe}>_W0:Q1<";
      stringArray0[4] = "w!8LdDe}>_W0:Q1<";
      stringArray0[5] = "| isResidual?";
      AbstractClassifier.runClassifier(decisionTable1, stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(2.0);
      Instances instances0 = null;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("weka.filters.SimpleBatchFilter", arrayList0, 1710);
      Attribute attribute0 = new Attribute("weka.filters.SimpleBatchFilter", 1710);
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 177.3874444229, 0);
      StringReader stringReader0 = new StringReader("]Ud-O#j8");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader1);
      int int0 = (-2146338913);
      BufferedReader bufferedReader3 = new BufferedReader(bufferedReader0, 4);
      int int1 = (-12);
      BufferedReader bufferedReader4 = null;
      try {
        bufferedReader4 = new BufferedReader(stringReader0, (-12));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.getSearchSpec();
      Instances instances0 = decisionTable0.m_theInstances;
      int[] intArray0 = new int[9];
      intArray0[2] = 2;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 3;
      intArray0[5] = 3;
      Attribute attribute0 = new Attribute("@relation", (String) null, 2);
      attribute0.getRevision();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getMaxInfoGain();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(3);
      sparseInstance0.toString();
      jRip_NominalAntd0.covers(sparseInstance0);
      jRip0.checkErrorRateTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.optimizationsTipText();
      jRip0.getRevision();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("antiality");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // antiality not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4696072829762055
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.optimizationsTipText();
      jRip0.getFolds();
      Attribute attribute0 = new Attribute("The number of optimization runs.", (String) null, 1975);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getMaxInfoGain();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.value = (double) 3;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "date";
      stringArray0[1] = "relational";
      stringArray0[2] = "integer";
      jRip0.setOptions(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7T1u!~T -MaZd:J2");
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      CoverTree coverTree2 = new CoverTree();
      CoverTree coverTree3 = new CoverTree();
      CoverTree coverTree4 = new CoverTree();
      CoverTree coverTree5 = new CoverTree();
      CoverTree coverTree6 = new CoverTree();
      CoverTree coverTree7 = new CoverTree();
      CoverTree coverTree8 = new CoverTree();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3469992135645263
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 64.0;
      Environment environment0 = Environment.getSystemWide();
      environment0.getVariableNames();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jRip0.setOptions(stringArray0);
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      CoverTree coverTree2 = new CoverTree();
      CoverTree coverTree3 = new CoverTree();
      CoverTree coverTree4 = new CoverTree();
      assertFalse(coverTree4.equals((Object)coverTree2));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Hashtable<String, List<String>> hashtable0 = new Hashtable<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashtable0);
      Hashtable<String, List<String>> hashtable1 = new Hashtable<String, List<String>>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      hashtable1.put("", linkedList2);
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      hashtable1.clone();
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode0);
      hashtable1.put("", list1);
      hashtable0.putAll(hashtable1);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(list0);
      Locale locale0 = Locale.FRANCE;
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set1);
      locale0.toLanguageTag();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags(list0, (Collection<String>) set1, locale_FilteringMode1);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set1, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("", list2, (-325));
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(" <= NaN", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      Integer[] integerArray0 = new Integer[5];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer integer2 = new Integer(int0);
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[4] = integer3;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      Attribute attribute0 = new Attribute((String) null, (String) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string1 = jRip_NumericAntd0.toString();
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals("null <= NaN", string1);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      binarySparseInstance0.setWeight(Double.NaN);
      DenseInstance denseInstance0 = new DenseInstance(2);
      decisionTable0.setCrossVal(2);
      Attribute attribute0 = new Attribute("", 5);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.covers(binarySparseInstance0);
      CostMatrix costMatrix0 = new CostMatrix(3);
      CostMatrix costMatrix1 = null;
      try {
        costMatrix1 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.004692434434373
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptimizations();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.size();
      jRip_RipperRule0.setConsequent((-800.0));
      jRip_RipperRule0.getConsequent();
      jRip0.setMinNo(2);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("n]", linkedList0, 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      jRip_NominalAntd0.getAttrValue();
      jRip_NominalAntd0.getAttr();
      String string0 = "W~fdCd++GW&/x";
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      int int0 = 24;
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute isn't relation-valued!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.optimizationsTipText();
      jRip0.getOptimizations();
      Attribute attribute0 = new Attribute("The number of optimization runs.", (String) null, 1975);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getMaxInfoGain();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      jRip_NominalAntd0.value = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance(1);
      jRip_NominalAntd0.covers(sparseInstance0);
      jRip0.checkErrorRateTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" => The number of optimization runs.=", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      AbstractClassifier.makeCopy(inputMappedClassifier1);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Object object0 = new Object();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", arrayList0, 1105);
      Attribute attribute1 = attribute0.copy("_principal components");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd0.copy();
      jRip_RipperRule0.copy();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Object object1 = jRip_RipperRule0.copy();
      BiFunction<Object, Object, JRip.RipperRule> biFunction0 = (BiFunction<Object, Object, JRip.RipperRule>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties0.merge(object1, jRip_RipperRule0, biFunction0);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4.0;
      doubleArray0[1] = 4.0;
      SparseInstance sparseInstance0 = new SparseInstance(4.0, doubleArray0);
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2114);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Utils.SMALL = (double) 2114;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2114, (int[]) null, (-365));
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance2);
      assertTrue(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      int int0 = jRip0.getFolds();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, int0);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7T1u!~T -MaZd:J2");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      System.setCurrentTimeMillis(3053L);
      System.setCurrentTimeMillis(3053L);
      Attribute attribute0 = new Attribute("7T1u!~T -MaZd:J2");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("sRcGG^8Q/TKe!KU", arrayList0, 689);
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass((-1776), instances0, 262.291161, (-6607.542875417));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "";
      int int0 = 3339;
      int int1 = 2143664158;
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[3] = "";
      stringArray0[6] = "";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      Integer[] integerArray0 = new Integer[5];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = (Integer) int0;
      integerArray0[2] = integer0;
      Integer integer2 = new Integer(int0);
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[4] = integer3;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[2] = (double) int0;
      integerArray0[3] = (Integer) 5;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      integerArray0[0] = (Integer) int0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(int0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      jRip0.usePruningTipText();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0.0, (int[]) null, int0);
      assertEquals(0.0, binarySparseInstance2.weight(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4.0;
      doubleArray0[1] = 4.0;
      doubleArray0[3] = 4.0;
      SparseInstance sparseInstance0 = new SparseInstance(4.0, doubleArray0);
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2114);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertFalse(jRip0.getDebug());
      
      jRip0.setDebug(true);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2114, (int[]) null, (-365));
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance2);
      assertTrue(jRip0.getDebug());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseInstance sparseInstance0 = new SparseInstance((-99.0), doubleArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("n]", linkedList0, 3418);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(sparseInstance0);
      jRip_NominalAntd0.getAttrValue();
      jRip_NominalAntd0.getAttr();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.105029631334913
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Attribute attribute0 = new Attribute("entixtion", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      jRip_NominalAntd0.copy();
      StringReader stringReader0 = new StringReader("K`%9CIBD+S%t_cc 0");
      jRip_NominalAntd0.covers(binarySparseInstance0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "string";
      stringArray0[1] = "date";
      stringArray0[2] = "entixtion";
      stringArray0[3] = "real";
      jRip0.setOptions(stringArray0);
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader1, 2);
      BufferedReader bufferedReader3 = new BufferedReader(bufferedReader2, 2);
      BufferedReader bufferedReader4 = new BufferedReader(bufferedReader0, 2114);
      BufferedReader bufferedReader5 = new BufferedReader(bufferedReader2, 2009);
      try { 
        bufferedReader4.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream not marked
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Hashtable<String, List<String>> hashtable0 = new Hashtable<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashtable0);
      Hashtable<String, List<String>> hashtable1 = new Hashtable<String, List<String>>();
      hashtable0.putAll(hashtable1);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(list0);
      Locale locale0 = Locale.UK;
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      arrayList0.add((Locale.LanguageRange) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1, locale_FilteringMode0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      locale0.toLanguageTag();
      Hashtable<String, List<String>> hashtable2 = new Hashtable<String, List<String>>();
      hashtable2.put("99JqWvC81T\"N", list1);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list1, locale_FilteringMode1);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("&[Mn|Y++.Vqaj=3:|", arrayList0, 1);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Attribute attribute0 = new Attribute("&[Mn|Y++.Vqaj=3:|");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      attribute0.indexOfValue("");
      jRip_NominalAntd0.getRevision();
      jRip_NominalAntd0.getCover();
      try { 
        principalComponents0.convertInstance((Instance) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // convertInstance: Principal components not built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale locale0 = Locale.CHINA;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      locale0.getUnicodeLocaleKeys();
      Integer[] integerArray0 = new Integer[5];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      locale0.getDisplayScript();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      CostMatrix.parseMatlab("Y]KOW");
      Attribute attribute0 = new Attribute(".ct;^Z", arrayList1, int0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "wdf{;x;0f^MLU2";
      stringArray0[1] = "wdf{;x;0f^MLU2";
      stringArray0[2] = "wdf{;x;0f^MLU2";
      stringArray0[3] = " (";
      stringArray0[4] = "wdf{;x;0f^MLU2";
      stringArray0[5] = "wdf{;x;0f^MLU2";
      stringArray0[6] = "wdf{;x;0f^MLU2";
      JRip.main(stringArray0);
      JRip jRip1 = new JRip();
      StringReader stringReader0 = new StringReader("CjUk#JrFM}s");
      System.setCurrentTimeMillis((-5));
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 68);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0, 3287);
      BufferedReader bufferedReader2 = null;
      try {
        bufferedReader2 = new BufferedReader(bufferedReader0, (-5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.CHINESE;
      locale0.getDisplayVariant();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      hashMap0.put(">Xs!]11||c,*I6In{", list0);
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale locale1 = Locale.ITALY;
      locale0.getDisplayLanguage();
      Locale locale2 = Locale.CHINESE;
      Locale locale3 = Locale.SIMPLIFIED_CHINESE;
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale locale4 = Locale.KOREAN;
      linkedList0.add((Locale.LanguageRange) null);
      Locale.setDefault(locale3);
      locale2.getDisplayLanguage(locale3);
      Set<String> set1 = locale3.getUnicodeLocaleAttributes();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      locale0.getUnicodeLocaleKeys();
      linkedList0.parallelStream();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list1, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set1, locale_FilteringMode1);
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) set1, locale_FilteringMode3);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Attribute attribute0 = new Attribute("");
      // Undeclared exception!
      try { 
        jRip0.getMeasure("numeric");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numeric not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Hashtable<String, List<String>> hashtable0 = new Hashtable<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashtable0);
      Hashtable<String, List<String>> hashtable1 = new Hashtable<String, List<String>>();
      hashtable0.putAll(hashtable1);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(list0);
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      hashtable0.put("", list1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      locale0.toLanguageTag();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.JAPANESE;
      locale0.getDisplayName(locale1);
      linkedList2.addAll((Collection<? extends Locale.LanguageRange>) arrayList0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) set0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      ClassOrder classOrder0 = new ClassOrder();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("| dat size: ", arrayList1, 1);
      JRip jRip0 = new JRip();
      Instances instances1 = new Instances(instances0, 6);
      String string0 = jRip0.foldsTipText();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      Integer[] integerArray0 = new Integer[5];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer integer2 = new Integer(int0);
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(int0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      double[] doubleArray0 = new double[7];
      integerArray0[2] = (Integer) int0;
      integerArray0[1] = (Integer) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      jRip0.getUsePruning();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix0 = new CostMatrix(1);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      try { 
        CostMatrix.parseMatlab("<IB}(+$ck|f5@L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.CHINESE;
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      hashMap0.put(">Xs!]11||c,*I6In{", list0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      Locale.lookup(linkedList0, list1);
      locale0.getDisplayLanguage();
      Locale locale1 = Locale.forLanguageTag("\tSize of each subspace:\n\t\t< 1: percentage of the number of attributes\n\t\t>=1: absolute number of attributes\n");
      Locale locale2 = Locale.SIMPLIFIED_CHINESE;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale locale3 = Locale.KOREAN;
      linkedList0.add((Locale.LanguageRange) null);
      Locale.setDefault(locale2);
      locale1.getDisplayLanguage(locale2);
      Set<String> set1 = locale1.getUnicodeLocaleAttributes();
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      locale0.getUnicodeLocaleKeys();
      linkedList0.parallelStream();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list2, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set1, locale_FilteringMode1);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set1, locale_FilteringMode3);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Attribute attribute0 = new Attribute("");
      double double0 = jRip0.getMinNo();
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, double0, 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Hashtable<String, List<String>> hashtable0 = new Hashtable<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashtable0);
      Hashtable<String, List<String>> hashtable1 = new Hashtable<String, List<String>>();
      hashtable0.putAll(hashtable1);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(list0);
      Locale locale0 = Locale.UK;
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      arrayList0.add((Locale.LanguageRange) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1, locale_FilteringMode0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      locale0.toLanguageTag();
      Hashtable<String, List<String>> hashtable2 = new Hashtable<String, List<String>>();
      hashtable2.put("99JqWvC81T\"N", list1);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list1, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-3095.223261322));
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      arrayList2.removeIf(predicate3);
      Instances instances0 = new Instances("Sets whether the number of LogitBoost iterations is to be cross-validated or the stopping criterion on the training set should be used. If not set (and no fixed number of iterations was given), the number of LogitBoost iterations is used that minimizes the error on the training set (misclassification error or error on probabilities depending on errorOnProbabilities).", arrayList2, 1026);
      jRip_RipperRule0.grow(instances0);
      try { 
        CostMatrix.parseMatlab("99JqWvC81T\"N");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.0426322117102855
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0);
      Attribute attribute0 = new Attribute(".arff", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getSplitPoint();
      jRip_NumericAntd0.getAccu();
      try { 
        jRip0.rulesetForOneClass(10.0, (Instances) null, 2, 0.5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("n]", linkedList0, 3418);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAttrValue();
      Attribute attribute1 = jRip_NominalAntd0.getAttr();
      attribute1.setWeight(0);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip jRip2 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute1);
      StringReader stringReader0 = new StringReader("probToLogOdds: probability must be in [0,1] ");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 4);
      // Undeclared exception!
      try { 
        linkedList0.add(65, "real");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      Attribute attribute0 = new Attribute("entiation", (List<String>) null, 3);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      binarySparseInstance0.dataset();
      decisionTable0.setDisplayRules(false);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 2114, (-304.095908478));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      JRip jRip0 = new JRip();
      AbstractClassifier.runClassifier(decisionTable1, (String[]) null);
      BestFirst bestFirst0 = new BestFirst();
      decisionTable1.setSearch(bestFirst0);
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      decisionTable1.m_evaluator = (ASEvaluation) symmetricalUncertAttributeEval0;
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      binarySparseInstance0.setWeight(3904.9198810591656);
      Attribute attribute0 = new Attribute("\n\tClass ", 5);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip0.getCheckErrorRate();
      CostMatrix costMatrix0 = new CostMatrix(3);
      try { 
        CostMatrix.parseMatlab(".arff");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7T1u!~T -MaZd:J2");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JRip jRip0 = new JRip();
      jRip0.seedTipText();
      System.setCurrentTimeMillis(3053L);
      System.setCurrentTimeMillis(3053L);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 300.0;
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      List<String> list1 = new LinkedList<String>();
      Locale locale2 = Locale.forLanguageTag("Y]KOW");
      locale2.getDisplayScript();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      boolean boolean1 = jRip0.getDebug();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(boolean1 == boolean0);
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.7575827984108483
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo(1319.833809433633);
      jRip0.setFolds(0);
      jRip0.checkErrorRateTipText();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.copy();
      jRip_RipperRule0.copy();
      // Undeclared exception!
      try { 
        jRip1.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      Integer[] integerArray0 = new Integer[5];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer integer2 = new Integer(int0);
      Integer integer3 = new Integer(int0);
      integerArray0[4] = integer3;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) int0;
      doubleArray0[5] = (double) (int)integer0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      String[] stringArray0 = new String[1];
      AbstractClassifier.runClassifier(inputMappedClassifier0, stringArray0);
      String string0 = jRip0.debugTipText();
      assertEquals(1L, jRip0.getSeed());
      assertEquals("Whether debug information is output to the console.", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Attribute attribute0 = new Attribute("entiation", (List<String>) null, 3);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      binarySparseInstance0.dataset();
      jRip_NominalAntd0.copy();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 2114, (-304.095908478));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 7;
      intArray0[3] = 491;
      intArray0[4] = 11;
      intArray0[5] = 703;
      intArray0[6] = 6;
      intArray0[7] = (-3297);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2305.1304912751816, intArray0, 7);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      jRip0.listOptions();
      IBk iBk0 = new IBk(1311);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      iBk0.pruneToK((Instances) null, doubleArray0, 4);
      System.setCurrentTimeMillis(1129L);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Attribute attribute0 = new Attribute("entiation", (List<String>) null, 3);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      StringReader stringReader0 = new StringReader("K`%9CIBD+S%t_cc 0");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      jRip0.enumerateMeasures();
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader1, 2);
      BufferedReader bufferedReader3 = new BufferedReader(bufferedReader2, 2);
      BufferedReader bufferedReader4 = new BufferedReader(bufferedReader2, 2009);
      BufferedReader bufferedReader5 = new BufferedReader(bufferedReader3);
      bufferedReader4.read();
      try { 
        bufferedReader1.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream not marked
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7T1u!~T -MaZd:J2");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "18d|\"Z$VVSapoKKD");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)45;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1366), intArray0, (byte)45);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.getRevision();
      assertEquals("8118", string0);
      
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(boolean0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4.0;
      doubleArray0[1] = 4.0;
      SparseInstance sparseInstance0 = new SparseInstance(4.0, doubleArray0);
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2114);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Utils.SMALL = (double) 2114;
      jRip0.setOptimizations((-365));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2114, (int[]) null, (-365));
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance2);
      assertEquals((-365), jRip0.getOptimizations());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed((-1546L));
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier3 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier4 = new InputMappedClassifier();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        CostMatrix.parseMatlab("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("&[Mn|Y++.Vqaj=3:|", arrayList0, 0);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      jRip0.getTechnicalInformation();
      CostMatrix costMatrix0 = new CostMatrix(3);
      CostMatrix costMatrix1 = null;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      CostMatrix costMatrix2 = null;
      try {
        costMatrix2 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte) (-17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, true);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "|4r!9_>T");
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.getSearchSpec();
      Instances instances0 = decisionTable0.m_dtInstances;
      Ranker ranker0 = new Ranker();
      decisionTable0.m_search = (ASSearch) ranker0;
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[6] = 2;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 4;
      intArray0[5] = 3;
      CoverTree coverTree0 = new CoverTree();
      coverTree0.setMeasurePerformance(false);
      CoverTree coverTree1 = new CoverTree();
      ClassOrder classOrder0 = new ClassOrder();
      CoverTree coverTree2 = new CoverTree();
      CoverTree coverTree3 = new CoverTree();
      CoverTree coverTree4 = new CoverTree();
      jRip0.getCapabilities();
      Random.setNextRandom(99);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JRip jRip0 = new JRip();
      Integer[] integerArray0 = new Integer[5];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer integer2 = new Integer(int0);
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[4] = integer3;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      integerArray0[0] = (Integer) int0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(int0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.globalInfo();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(5.0, (int[]) null, int0);
      jRip_RipperRule0.covers(binarySparseInstance0);
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }
}
