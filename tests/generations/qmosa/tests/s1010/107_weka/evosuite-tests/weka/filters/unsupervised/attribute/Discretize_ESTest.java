/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 08:08:27 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.158751157727798
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.toString();
      Attribute attribute0 = new Attribute("Binary class");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("fP%i", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      MultiFilter multiFilter1 = new MultiFilter();
      discretize0.findNumBins(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2174);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      discretize0.input(binarySparseInstance0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)91;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((byte)36);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      discretize0.input(binarySparseInstance1);
      discretize0.binsTipText();
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4904032277870636
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Attribute attribute0 = new Attribute("1,n^=+Pq", (-1));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("1,n^=+Pq", arrayList0, 2);
      attribute0.addRelation(instances0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[2];
      arrayList0.add(attribute0);
      discretize0.m_UseEqualFrequency = true;
      discretize0.isOutputFormatDefined();
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[0] = (double) 0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      doubleArray0[1] = (double) (-1);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2072059749309014
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopy(discretize0);
      discretize0.setUseBinNumbers(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[2];
      discretize0.setIgnoreClass(false);
      stringArray0[0] = "O|U;1FZe@E>u/&";
      discretize0.setAttributeIndices("O|U;1FZe@E>u/&");
      stringArray0[1] = "J:xen/";
      Discretize.main(stringArray0);
      discretize0.setBins(2503);
      discretize0.setIgnoreClass(true);
      discretize0.m_NumBins = 2503;
      discretize0.getRevision();
      discretize0.getUseBinNumbers();
      discretize0.listOptions();
      discretize0.binsTipText();
      discretize0.makeBinaryTipText();
      discretize0.invertSelectionTipText();
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: O|U;1FZe@E>u/& J:xen/ 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1756978596603926
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList2, locale_FilteringMode0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("uc!2?", list0, protectedProperties1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("$tE|HFM4Wv", arrayList0, 2);
      Discretize discretize0 = new Discretize();
      Instances instances1 = new Instances(instances0, 1459);
      discretize0.setInputFormat(instances1);
      discretize0.batchFinished();
      discretize0.globalInfo();
      discretize0.globalInfo();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      DenseInstance denseInstance0 = new DenseInstance((-3500.59775), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      discretize0.input(binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(167);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 167
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9383303383194748
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties1);
      Properties properties2 = new Properties();
      MockPrintStream mockPrintStream0 = new MockPrintStream("ntCeUEoQ]}DbxExnY");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) properties1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "ntCeUEoQ]}DbxExnY";
      objectArray0[3] = (Object) mockPrintStream0;
      mockPrintStream0.format("ntCeUEoQ]}DbxExnY", objectArray0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties4);
      protectedProperties1.list((PrintStream) mockPrintStream0);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties8);
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.toString();
      Attribute attribute0 = new Attribute("4+Idw-HebHxN,|K%");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ntCeUEoQ]}DbxE\\xnY");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances0 = new Instances("@end", arrayList0, 66);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      discretize0.batchFinished();
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      assertTrue(discretize0.isNewBatch());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.094156710263356
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties2);
      Properties properties2 = new Properties();
      MockPrintStream mockPrintStream0 = new MockPrintStream("MN$/w#z");
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties0);
      protectedProperties8.list((PrintStream) mockPrintStream0);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties8);
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.toString();
      Attribute attribute0 = new Attribute("\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 2);
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      boolean boolean1 = discretize0.batchFinished();
      assertTrue(boolean1 == boolean0);
      
      discretize0.findNumBinsTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9536075111963163
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties2);
      Properties properties2 = new Properties();
      MockPrintStream mockPrintStream0 = new MockPrintStream("MN$/w#z");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("MN$/w#z", arrayList2, protectedProperties5);
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("        values[i] = (Double) obj[i];\n", arrayList1, 0);
      attribute0.addRelation(instances0);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      discretize0.batchFinished();
      discretize0.setOutputFormat();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.122734208772309
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.toString();
      Attribute attribute0 = new Attribute("Binary class");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("fP%i", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      MultiFilter multiFilter1 = new MultiFilter();
      discretize0.findNumBins(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2174);
      arrayList0.add(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6145235356985044
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Attribute attribute0 = new Attribute("1,n^=+Pq", (-1));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute1 = new Attribute("@attribute");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "relational";
      stringArray0[1] = "@end";
      stringArray0[2] = "real";
      stringArray0[3] = "1,n^=+Pq";
      stringArray0[4] = "numeric";
      stringArray0[5] = "relational";
      stringArray0[6] = "date";
      stringArray0[7] = "date";
      Attribute.main(stringArray0);
      Instances instances0 = new Instances("1,n^=+Pq", arrayList0, 2);
      attribute0.addRelation(instances0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[2];
      discretize0.m_UseEqualFrequency = true;
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      intArray0[1] = 2;
      intArray0[2] = (-12);
      discretize0.setAttributeIndicesArray(intArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0112095852513443
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Attribute attribute0 = new Attribute("1,n^=+Pq", (-1));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("1,n^=+Pq", arrayList0, 2);
      attribute0.addRelation(instances0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[2];
      discretize0.m_UseEqualFrequency = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[0] = (double) 0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      doubleArray0[1] = (double) (-1);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9922924435929237
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Attribute attribute0 = new Attribute("1,n^=+Pq", (-1));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 102);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.globalInfo();
      discretize0.globalInfo();
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 1246.2;
      arrayList0.add(attribute0);
      DenseInstance denseInstance0 = new DenseInstance(2, doubleArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4314883190328733
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Attribute attribute0 = new Attribute("1,n^=+Pq", (-1));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("1,n^=+Pq", arrayList0, 2);
      attribute0.addRelation(instances0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[2];
      discretize0.m_UseEqualFrequency = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[0] = (double) 0;
      discretize0.calculateCutPoints();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      doubleArray0[1] = (double) (-1);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.059317141836356
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      MultiFilter multiFilter0 = new MultiFilter();
      Attribute attribute0 = new Attribute("|]+(Ia._");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("Expected closing brace on range, found: ", arrayList1, 17);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      MultiFilter multiFilter1 = new MultiFilter();
      discretize0.setOutputFormat();
      DenseInstance denseInstance0 = new DenseInstance(5);
      discretize0.input(denseInstance0);
      assertFalse(discretize0.isNewBatch());
      
      discretize0.batchFinished();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0098273478755466
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "AX#my";
      stringArray0[1] = "";
      stringArray0[2] = "~ cTLD>zz&";
      stringArray0[3] = "";
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      multiFilter1.toString();
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("-Y", arrayList0, 4);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      MultiFilter multiFilter2 = new MultiFilter();
      Filter.runFilter(discretize0, stringArray0);
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      discretize0.calculateCutPoints();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1235685850760224
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      Object object0 = new Object();
      properties0.put(object0, protectedProperties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      protectedProperties2.keySet();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties2);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      Attribute attribute0 = new Attribute("|]+(Ia._");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("Expected closing brace on range, found: ", arrayList1, 17);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(44);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      discretize0.outputPeek();
      discretize0.input(binarySparseInstance0);
      discretize0.convertInstance(binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2062));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2062
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.063934323150992
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      Properties properties2 = new Properties();
      Attribute attribute0 = new Attribute(")\"P/*f'|", (-939));
      Attribute attribute1 = new Attribute("Sitr:");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("}sP6/@5VcGdo=QPdE", arrayList0, 4);
      attribute0.addRelation(instances0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      int[] intArray0 = new int[11];
      int int0 = 19;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-939), intArray0, 19);
      discretize0.convertInstance(binarySparseInstance0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9378135424538416
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "AX#my";
      stringArray0[1] = "";
      stringArray0[2] = "~ cTLD>zz&";
      stringArray0[3] = "";
      Attribute attribute0 = new Attribute("-B", (-2089443546));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute1 = new Attribute("equals ? ");
      attribute0.enumerateValues();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      attribute0.equals((Object) null);
      arrayList0.add(attribute1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 0);
      instances0.indexOf((Object) null);
      attribute0.addRelation(instances0);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 4;
      Filter.runFilter(discretize0, stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8ijua{:*5v#.G>+");
      boolean boolean0 = discretize0.batchFinished();
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.059504959994525
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Attribute attribute0 = new Attribute("1,n^=+Pq", (-1));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("1,n^=+Pq", arrayList0, 2);
      attribute0.addRelation(instances0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[2];
      discretize0.m_UseEqualFrequency = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[0] = (double) 0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      doubleArray0[1] = (double) 1;
      discretize0.batchFinished();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = 4;
      intArray0[7] = 2;
      intArray0[8] = 4;
      SparseInstance sparseInstance0 = new SparseInstance(1.7976931348623157E308, doubleArray0, intArray0, (-2021161078));
      discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.091939703917201
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties6);
      Properties properties2 = new Properties();
      MockPrintStream mockPrintStream0 = new MockPrintStream("ntCeUEoQ]}DbxExnY");
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties5);
      protectedProperties8.list((PrintStream) mockPrintStream0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties1);
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.toString();
      Attribute attribute0 = new Attribute("T?8J;DxkB2");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 1373);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0687328541069125
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      StringReader stringReader0 = new StringReader("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("", 406);
      Attribute attribute1 = new Attribute((String) null);
      boolean boolean0 = arrayList0.add(attribute1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 406);
      discretize0.setInputFormat(instances0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)106;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)2;
      Discretize discretize1 = new Discretize("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "integer";
      stringArray0[1] = "@end";
      Filter.runFilter(discretize0, stringArray0);
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y");
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.883690599420432
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(true);
      discretize0.setFindNumBins(false);
      discretize0.m_DefaultCols = "MN$/w#z";
      discretize0.getOptions();
      discretize0.setAttributeIndices("MN$/w#z");
      discretize0.findNumBinsTipText();
      discretize0.findNumBinsTipText();
      discretize0.findNumBinsTipText();
      discretize0.m_DefaultCols = null;
      discretize0.findNumBinsTipText();
      discretize0.getRevision();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.971558425985957
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "impot weka.core.Capabilities;\n";
      stringArray0[1] = "impot weka.core.Capabilities;\n";
      stringArray0[2] = "Pop on empty queue correctly gave exception.";
      stringArray0[3] = "impot weka.core.Capabilities;\n";
      stringArray0[4] = "Pop on empty queue correctly gave exception.";
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.toString();
      Attribute attribute0 = new Attribute("DenseInstance has access to a dataset!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 33);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      MultiFilter multiFilter1 = new MultiFilter();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(385);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 385
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.384415616105067
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties6);
      Properties properties2 = new Properties();
      MockPrintStream mockPrintStream0 = new MockPrintStream("ntCeUEoQ]}DbxExnY");
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties5);
      protectedProperties8.list((PrintStream) mockPrintStream0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties1);
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.toString();
      Attribute attribute0 = new Attribute("T?8J;DxkB2");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 1373);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      Discretize discretize1 = new Discretize("hnD/60");
      try { 
        discretize1.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at hnD/60
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals(10, discretize0.getBins());
      
      discretize0.m_NumBins = 14;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka.core.ProtectedProperties");
      discretize0.setUseEqualFrequency(true);
      discretize0.getUseEqualFrequency();
      discretize0.attributeIndicesTipText();
      discretize0.useEqualFrequencyTipText();
      discretize0.getCutPoints(8);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.743582301544638
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis(2L);
      Discretize discretize0 = new Discretize();
      discretize0.getOptions();
      Filter.makeCopy(discretize0);
      discretize0.setInvertSelection(true);
      discretize0.findNumBinsTipText();
      discretize0.getCapabilities();
      int int0 = discretize0.getBins();
      assertEquals(10, int0);
      
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(7, stringArray0.length);
      
      String string0 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.attributeIndicesTipText();
      discretize0.useEqualFrequencyTipText();
      discretize0.setFindNumBins(true);
      discretize0.getFindNumBins();
      int int0 = 2147483645;
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) 2147483645;
      discretize0.m_UseBinNumbers = true;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2147483645);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1,n^=+P1");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1,n^=+P1");
      Discretize discretize0 = new Discretize(" CN[l.4#JdgsE");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1.0);
      doubleArray1[0] = (-1828.86958);
      discretize0.m_CutPoints = doubleArray0;
      doubleArray1[3] = (-1828.86958);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[3] = doubleArray3;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("1,n^=+P1", protectedProperties0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) attribute0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate0.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      Predicate.isEqual((Object) protectedProperties0);
      predicate4.or(predicate3);
      double[] doubleArray4 = discretize0.getCutPoints(4);
      assertEquals(10, discretize0.getBins());
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertNotNull(doubleArray4);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.2085716838811678
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DiscretizeCols = null;
      // Undeclared exception!
      try { 
        discretize0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = (MultiFilter)Filter.makeCopy(multiFilter1);
      MultiFilter multiFilter3 = new MultiFilter();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "~ cTLD>zz&";
      stringArray0[1] = "-R";
      Filter.makeCopies(multiFilter3, 1751);
      stringArray0[2] = "class ";
      Filter.runFilter(multiFilter3, stringArray0);
      Filter[] filterArray0 = new Filter[9];
      filterArray0[0] = (Filter) multiFilter3;
      filterArray0[4] = (Filter) multiFilter0;
      Filter.makeCopy(filterArray0[1]);
      multiFilter2.isStreamableFilter();
      filterArray0[2] = (Filter) null;
      filterArray0[3] = (Filter) multiFilter3;
      filterArray0[4] = (Filter) multiFilter1;
      filterArray0[5] = (Filter) multiFilter3;
      Filter.runFilter(filterArray0[0], stringArray0);
      MultiFilter multiFilter4 = new MultiFilter();
      multiFilter0.setDebug(true);
      Filter.makeCopy(multiFilter2);
      MultiFilter multiFilter5 = new MultiFilter();
      multiFilter3.setDebug(true);
      MultiFilter multiFilter6 = new MultiFilter();
      Discretize discretize0 = new Discretize("~ cTLD>zz&");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("~ cTLD>zz&", arrayList0, 1700);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.799512206233116
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setMakeBinary(true);
      discretize0.getCapabilities();
      discretize0.getOptions();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Discretize discretize0 = new Discretize("weka.core.ProtectedProperties");
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("");
      discretize0.getAttributeIndices();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2570;
      doubleArray0[1] = (double) 2570;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 2570;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, "", 2570);
      discretize0.setDesiredWeightOfInstancesPerInterval((-1298.556487914));
      discretize0.getUseBinNumbers();
      discretize0.makeBinaryTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.findNumBinsTipText();
      assertEquals((-1298.556487914), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize("weka.core.ProtectedProperties");
      discretize0.m_UseEqualFrequency = true;
      discretize0.getOptions();
      StringReader stringReader0 = new StringReader("weka.core.ProtectedProperties");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[weka.core.ProtectedProperties], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6902535776209735
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      Filter.makeCopy(multiFilter1);
      Discretize discretize0 = new Discretize("wp /5p<$G$/4p");
      Filter.makeCopies(discretize0, 1751);
      MultiFilter multiFilter2 = new MultiFilter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-R";
      Filter.runFilter(multiFilter2, stringArray0);
      MultiFilter multiFilter3 = new MultiFilter();
      multiFilter3.setDebug(true);
      MultiFilter multiFilter4 = new MultiFilter();
      Filter.makeCopy(multiFilter4);
      MultiFilter multiFilter5 = new MultiFilter();
      multiFilter1.setDebug(true);
      Filter.makeCopy(multiFilter5);
      Filter.makeCopy(multiFilter0);
      Discretize discretize1 = new Discretize("wp /5p<$G$/4p");
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -R option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1,n^=+Pq");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1,n^=+Pq");
      Discretize discretize0 = new Discretize(" CN[l.4#JdgsE");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[4];
      discretize0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1,n^=+Pq";
      stringArray0[1] = " CN[l.4#JdgsE";
      stringArray0[2] = " CN[l.4#JdgsE";
      stringArray0[3] = "1,n^=+Pq";
      Filter.runFilter(discretize0, stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1,n^=+Pq");
      doubleArray1[0] = (-1.0);
      doubleArray1[0] = (-1828.86958);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.m_CutPoints = doubleArray0;
      doubleArray1[3] = (-1828.86958);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      doubleArray0[7] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[3] = doubleArray3;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "1,n^=+Pq");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.or(predicate0);
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-2134546997));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2134546997
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1,n=+2q");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1,n=+2q");
      SystemInUtil.addInputLine("1,n=+2q");
      Discretize discretize0 = new Discretize(" CN[l.4#JdgsE");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[4];
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1,n=+2q";
      stringArray0[1] = " CN[l.4#JdgsE";
      stringArray0[2] = " CN[l.4#JdgsE";
      stringArray0[3] = "1,n=+2q";
      Filter.runFilter(discretize0, stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1,n=+2q");
      doubleArray1[0] = (-1.0);
      doubleArray1[0] = (-1.0);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      discretize0.m_CutPoints = doubleArray0;
      doubleArray1[3] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[3] = doubleArray3;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.979262827961008
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Attribute attribute0 = new Attribute("1,n^=+Pq", (-1));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("1,n^=+Pq", arrayList0, 2);
      attribute0.addRelation(instances0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[2];
      discretize0.m_UseEqualFrequency = true;
      doubleArray0[0] = (double) 0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      doubleArray0[1] = (double) (-1);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1232614207518714
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[1];
      doubleArray0[2] = doubleArray1;
      discretize0.m_UseBinNumbers = false;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      discretize0.listOptions();
      Filter.makeCopies(discretize0, 66);
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-527.6920094287167);
      doubleArray3[1] = (-527.6920094287167);
      doubleArray3[2] = (-527.6920094287167);
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.toString();
      String string0 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      
      String string1 = discretize0.getBinRangesString(0);
      assertEquals("(-inf-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-inf)", string1);
      
      discretize0.useBinNumbersTipText();
      discretize0.invertSelectionTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      Filter.makeCopy(discretize0);
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter1);
      MultiFilter multiFilter2 = new MultiFilter();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "~ cTLD>zz&";
      stringArray0[1] = "-R";
      stringArray0[2] = "8ijua:*5~.G>+,";
      Filter.runFilter(multiFilter2, stringArray0);
      MultiFilter multiFilter3 = new MultiFilter();
      multiFilter3.setDebug(true);
      MultiFilter multiFilter4 = (MultiFilter)Filter.makeCopy(filter0);
      MultiFilter multiFilter5 = new MultiFilter();
      multiFilter2.setDebug(false);
      Filter[] filterArray0 = new Filter[9];
      filterArray0[0] = filter0;
      filterArray0[5] = (Filter) multiFilter0;
      filterArray0[2] = (Filter) multiFilter1;
      filterArray0[3] = (Filter) multiFilter1;
      filterArray0[4] = (Filter) multiFilter0;
      filterArray0[5] = (Filter) multiFilter1;
      filterArray0[6] = filter0;
      filterArray0[7] = (Filter) multiFilter2;
      filterArray0[8] = (Filter) multiFilter2;
      multiFilter4.setFilters(filterArray0);
      Filter.makeCopy(multiFilter0);
      Filter.makeCopy(multiFilter4);
      Discretize discretize0 = new Discretize("8ijua:*5~.G>+,");
      assertFalse(discretize0.getFindNumBins());
      
      String[] stringArray1 = new String[4];
      stringArray1[0] = "8ijua:*5~.G>+,";
      stringArray1[1] = "qYiRj&'oe5hU54";
      stringArray1[2] = "-R";
      stringArray1[3] = "~ cTLD>zz&";
      discretize0.setOptions(stringArray1);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7300480657918285
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V^_/_eGAy*");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-R <col1,col2-col4,...>");
      SystemInUtil.addInputLine("w%tlH4[D.+:DDJs");
      Discretize discretize0 = new Discretize("-R <col1,col2-col4,...>");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-M";
      stringArray0[1] = "\"7=U1JJ8~klX??5[";
      stringArray0[2] = "w%tlH4[D.+:DDJs";
      stringArray0[3] = "-R <col1,col2-col4,...>";
      stringArray0[4] = " CN[l.4#JdgsE";
      stringArray0[5] = " CN[l.4#JdgsE";
      Filter.runFilter(discretize0, stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'B1of2'");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.setOutputFormat();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      SystemInUtil.addInputLine("]selY}tNu+H");
      discretize0.getCapabilities();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.7976931348623157E308, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      int int0 = 845;
      // Undeclared exception!
      try { 
        sparseInstance0.relationalValue(845);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.4461755171495705
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize("weka.core.ProtectedProperties");
      discretize0.m_IgnoreClass = true;
      discretize0.getOptions();
      StringReader stringReader0 = new StringReader("weka.core.ProtectedProperties");
      stringReader0.skip(0L);
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[weka.core.ProtectedProperties], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize("?XUb[n ^Xv@H5T");
      String[] stringArray0 = new String[1];
      discretize0.listOptions();
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      predicate2.negate();
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate6);
      Predicate<Object> predicate8 = predicate6.negate();
      predicate7.or(predicate8);
      Object object2 = new Object();
      Predicate<Object> predicate9 = Predicate.isEqual(object2);
      Predicate<Object> predicate10 = predicate0.negate();
      Predicate<Object> predicate11 = predicate5.and(predicate6);
      Predicate<Object> predicate12 = predicate3.and(predicate10);
      predicate0.or(predicate12);
      predicate7.and(predicate11);
      predicate4.or(predicate9);
      // Undeclared exception!
      try { 
        predicate11.or((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      assertFalse(discretize0.getMakeBinary());
      
      SystemInUtil.addInputLine("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.setMakeBinary(true);
      discretize0.getCapabilities();
      boolean boolean0 = discretize0.getMakeBinary();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1,n^=+Pq");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("-");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-";
      stringArray0[1] = "H";
      stringArray0[2] = "1,n^=+Pq";
      int[] intArray0 = new int[7];
      intArray0[0] = (-3);
      intArray0[1] = 67;
      intArray0[2] = (-2021161078);
      intArray0[3] = 662;
      intArray0[4] = 12;
      intArray0[5] = (-2013265917);
      intArray0[6] = 2088;
      discretize0.setAttributeIndicesArray(intArray0);
      stringArray0[3] = "1,n^=+Pq";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "?XUb[n ^Xv@H5T";
      stringArray0[1] = "Options:\n\t-list-packages <all | installed | available>\n\t-package-info <repository | installed | archive> <packageName | packageZip>\n\t-install-package <packageName | packageZip | URL> [version]\n\t-uninstall-package packageName\n\t-refresh-cache";
      Discretize discretize0 = new Discretize("Options:\n\t-list-packages <all | installed | available>\n\t-package-info <repository | installed | archive> <packageName | packageZip>\n\t-install-package <packageName | packageZip | URL> [version]\n\t-uninstall-package packageName\n\t-refresh-cache");
      String string0 = discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize("?XUb[n ^Xv@H5T");
      String[] stringArray0 = new String[1];
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1,n^=+Pq");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1,n^=+Pq");
      Discretize discretize0 = new Discretize(" CN[l.4#JdgsE");
      discretize0.getAttributeIndices();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1.0);
      doubleArray1[0] = (-1828.86958);
      doubleArray1[3] = (-1828.86958);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[3] = doubleArray3;
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      discretize0.getInvertSelection();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties3);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize("Q~!-(ii^d_+%f_3");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1226));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1932735280);
      doubleArray0[2] = (double) (-1932735280);
      doubleArray0[3] = (-1.93273528E9);
      doubleArray0[4] = (double) (-1932735280);
      doubleArray0[2] = 0.0;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1.0), doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance2);
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      denseInstance0.toStringMaxDecimalDigits(3212);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6174998898943667
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getOptions();
      StringReader stringReader0 = new StringReader("");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate4.or(predicate2);
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      Predicate<Object> predicate7 = predicate4.or(predicate1);
      Predicate<Object> predicate8 = predicate1.or(predicate7);
      predicate0.negate();
      Object object0 = new Object();
      predicate1.test(object0);
      Predicate<Object> predicate9 = predicate8.or(predicate1);
      Predicate<Object> predicate10 = predicate0.or(predicate4);
      Predicate<Object> predicate11 = predicate6.negate();
      Discretize discretize1 = new Discretize();
      discretize1.m_MakeBinary = true;
      assertTrue(discretize1.getMakeBinary());
      
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate10);
      predicate11.and(predicate10);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      predicate9.or(predicate12);
      Object object1 = new Object();
      Predicate.isEqual(object1);
      Discretize discretize2 = new Discretize();
      Predicate<Object> predicate13 = Predicate.isEqual((Object) discretize2);
      Predicate<Object> predicate14 = predicate13.negate();
      predicate10.and(predicate13);
      Predicate<Object> predicate15 = predicate11.negate();
      predicate15.or(predicate14);
      assertFalse(discretize2.getMakeBinary());
      assertEquals(10, discretize2.getBins());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1,n^=+Pq");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a~o0|");
      SystemInUtil.addInputLine("1,n^=+Pq");
      Discretize discretize0 = new Discretize("a~o0|");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1,n^=+Pq";
      stringArray0[1] = "a~o0|";
      stringArray0[2] = "a~o0|";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.setUseBinNumbers(false);
      stringArray0[3] = "1,n^=+Pq";
      stringArray0[4] = "1,n^=+Pq";
      stringArray0[5] = "a~o0|";
      Filter.runFilter(discretize0, stringArray0);
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P$)&'Yk;mz?");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize("?XUb[n ^Xv@H5T");
      String[] stringArray0 = new String[1];
      discretize0.listOptions();
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate6);
      Predicate<Object> predicate8 = predicate6.negate();
      predicate7.or(predicate8);
      Object object2 = new Object();
      Predicate<Object> predicate9 = Predicate.isEqual(object2);
      Predicate<Object> predicate10 = predicate5.and(predicate6);
      predicate3.and(predicate7);
      predicate7.and(predicate10);
      predicate4.or(predicate9);
      // Undeclared exception!
      try { 
        predicate10.or((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.toStringMaxDecimalDigits((-1932735280));
      binarySparseInstance0.dataset();
      // Undeclared exception!
      try { 
        binarySparseInstance0.toString(0, (-1932735280));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1,n^=+Pq");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a~o0|");
      SystemInUtil.addInputLine((String) null);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter1);
      MultiFilter multiFilter2 = new MultiFilter();
      String[] stringArray0 = new String[9];
      Filter.makeCopies(multiFilter2, 1751);
      multiFilter0.isStreamableFilter();
      stringArray0[2] = "8ijua:*5~.G>+,";
      Filter.runFilter(multiFilter2, stringArray0);
      multiFilter2.toString();
      Filter[] filterArray0 = new Filter[9];
      filterArray0[0] = (Filter) multiFilter2;
      filterArray0[1] = (Filter) multiFilter0;
      MultiFilter multiFilter3 = (MultiFilter)Filter.makeCopy(filterArray0[1]);
      filterArray0[2] = (Filter) multiFilter3;
      filterArray0[3] = (Filter) multiFilter2;
      filterArray0[4] = filter0;
      multiFilter3.isStreamableFilter();
      MultiFilter multiFilter4 = (MultiFilter)Filter.makeCopy(filterArray0[1]);
      FileSystemHandling.shouldAllThrowIOExceptions();
      filterArray0[5] = (Filter) multiFilter2;
      Filter.runFilter(filterArray0[0], stringArray0);
      Filter.runFilter(filterArray0[5], stringArray0);
      MultiFilter multiFilter5 = new MultiFilter();
      Filter.makeCopy(multiFilter4);
      MultiFilter multiFilter6 = new MultiFilter();
      Filter.makeCopy(multiFilter5);
      Discretize discretize0 = new Discretize("weka.filters.MultiFilter");
      String string0 = discretize0.getRevision();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("8964", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "4+Ldw-HeHxN,|K%");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<Object> predicate5 = predicate4.and(predicate3);
      predicate3.negate();
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate<Object> predicate8 = predicate0.negate();
      predicate5.or(predicate7);
      Predicate<Object> predicate9 = predicate7.or(predicate1);
      Predicate<Object> predicate10 = predicate8.or(predicate6);
      Object object0 = new Object();
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate12 = predicate7.negate();
      Discretize discretize0 = new Discretize();
      Predicate<Object> predicate13 = Predicate.isEqual((Object) discretize0);
      predicate8.and(predicate13);
      Predicate<Object> predicate14 = predicate3.and(predicate12);
      predicate13.or(predicate11);
      Predicate<Object> predicate15 = predicate11.or(predicate13);
      Predicate<Object> predicate16 = predicate11.and(predicate8);
      Predicate<Object> predicate17 = predicate1.or(predicate4);
      predicate8.negate();
      Object object1 = new Object();
      Predicate.isEqual(object1);
      Predicate<Object> predicate18 = predicate8.or(predicate12);
      predicate15.or(predicate7);
      predicate3.negate();
      predicate17.negate();
      predicate10.and(predicate4);
      predicate14.or(predicate7);
      predicate12.negate();
      predicate2.negate();
      predicate16.and(predicate6);
      predicate9.or(predicate18);
      discretize0.getBinRangesString(17);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1,n^=+Pq");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a~o0|");
      SystemInUtil.addInputLine("1,n^=+Pq");
      Discretize discretize0 = new Discretize("a~o0|");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1,n^=+Pq";
      stringArray0[1] = "a~o0|";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      stringArray0[2] = "a~o0|";
      stringArray0[3] = "1,n^=+Pq";
      stringArray0[4] = "1,n^=+Pq";
      stringArray0[5] = "a~o0|";
      Filter.runFilter(discretize0, stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P$)&'Yk;mz?");
      String string0 = discretize0.makeBinaryTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1,n^=+Pq");
      Discretize discretize0 = new Discretize(" CN[l.4#JdgsE");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1828.86958);
      discretize0.m_CutPoints = doubleArray0;
      doubleArray1[3] = (-1828.86958);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[3] = doubleArray3;
      String string0 = discretize0.invertSelectionTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object object0 = new Object();
      Discretize discretize0 = new Discretize("Qc#FK-3@(Z");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2933.312428366);
      doubleArray0[2] = (double) (-1932735280);
      doubleArray0[3] = (-1.93273528E9);
      doubleArray0[4] = (double) (-1932735280);
      doubleArray0[2] = 0.0;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1.0), doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Discretize discretize0 = new Discretize("-F");
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.8836404106149494
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Discretize discretize0 = new Discretize("-B");
      discretize0.binsTipText();
      discretize0.getCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-B";
      stringArray0[1] = "-B";
      stringArray0[2] = "AttributeTest";
      stringArray0[3] = "-B";
      stringArray0[4] = "-B";
      stringArray0[5] = "";
      stringArray0[6] = "Number of bins.";
      discretize0.toString();
      stringArray0[7] = "-B";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-B\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1,n^=+Pq");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a~o0|");
      SystemInUtil.addInputLine("1,n^=+Pq");
      Discretize discretize0 = new Discretize("a~o0|");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Filter.runFilter(discretize0, (String[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1,n^=+Pq");
      discretize0.binsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.7828802543858893
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1,n^=+Pq");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1,n^=+Pq");
      SystemInUtil.addInputLine("1,n^=+Pq");
      Discretize discretize0 = new Discretize("-B");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1,n^=+Pq";
      stringArray0[1] = "-B";
      stringArray0[2] = "-B";
      stringArray0[3] = "1,n^=+Pq";
      Filter.runFilter(discretize0, stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1,n^=+Pq");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.setOutputFormat();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties3);
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties2);
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties5);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties5);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties14);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties15);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties7);
      Properties properties6 = new Properties();
      ProtectedProperties protectedProperties19 = new ProtectedProperties(properties4);
      Properties properties7 = new Properties();
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties1);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-1938));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties10);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties4);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(888);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "import weka.core.Capabilities;\n";
      stringArray0[1] = "import weka.core.Capabilities;\n";
      stringArray0[2] = "Pop on empty queue correctly gave exception.";
      stringArray0[3] = "import weka.core.Capabilities;\n";
      stringArray0[4] = "";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("import weka.core.Capabilities;\n", arrayList0, 82);
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.runFilter(multiFilter0, stringArray0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-1952257859));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Discretize discretize0 = new Discretize("?XUb[n ^Xv@H5T");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "?XUb[n ^Xv@H5T";
      discretize0.setOptions(stringArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate7);
      Predicate<Object> predicate9 = predicate5.or(predicate2);
      Predicate<Object> predicate10 = predicate8.or(predicate9);
      Object object2 = new Object();
      Predicate<Object> predicate11 = Predicate.isEqual(object2);
      Predicate<Object> predicate12 = predicate0.negate();
      Predicate<Object> predicate13 = predicate6.and(predicate7);
      Predicate<Object> predicate14 = predicate3.and(predicate12);
      predicate14.test(predicate1);
      predicate0.or(predicate14);
      Predicate<Object> predicate15 = predicate12.or(predicate10);
      predicate8.and(predicate13);
      predicate5.or(predicate11);
      predicate14.negate();
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate16 = predicate6.negate();
      predicate16.and(predicate15);
      Predicate<Object> predicate17 = predicate4.or(predicate16);
      assertFalse(predicate17.equals((Object)predicate16));
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Discretize discretize0 = new Discretize("?XUb[n ^Xv@H5T");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "?XUb[n ^Xv@H5T";
      discretize0.setOptions(stringArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      predicate2.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate6);
      Predicate<Object> predicate8 = predicate4.or(predicate2);
      Predicate<Object> predicate9 = predicate7.or(predicate8);
      Object object2 = new Object();
      Predicate<Object> predicate10 = Predicate.isEqual(object2);
      Predicate<Object> predicate11 = predicate0.negate();
      Predicate<Object> predicate12 = predicate5.and(predicate6);
      Predicate<Object> predicate13 = predicate3.and(predicate11);
      predicate13.test(predicate1);
      predicate0.or(predicate13);
      predicate11.or(predicate9);
      predicate7.and(predicate12);
      predicate4.or(predicate10);
      // Undeclared exception!
      try { 
        predicate12.or((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "AX#my";
      stringArray0[1] = "";
      stringArray0[2] = "~ cTLD>zz&";
      stringArray0[3] = "      else if (format.attribute(i).isNumeric())\n";
      stringArray0[4] = "";
      stringArray0[5] = "Y";
      stringArray0[6] = "-R";
      stringArray0[7] = "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.";
      stringArray0[8] = "";
      Discretize.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.9093506761746544
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-D");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Different number of labels: ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Discretize discretize0 = new Discretize("?XUb[n ^Xv@H5T");
      assertFalse(discretize0.getUseBinNumbers());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?XUb[n ^Xv@H5T";
      stringArray0[1] = "-Y";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)104;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[2] = "Different number of labels: ";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.setAttributeIndices("Different number of labels: ");
      discretize0.setOutputFormat();
      discretize0.globalInfo();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "?XUb[n ^Xv@H5T";
      stringArray0[1] = "Options:\n\t-list-packages <all | installed | available>\n\t-package-info <repository | installed | archive> <packageName | packageZip>\n\t-install-package <packageName | packageZip | URL> [version]\n\t-uninstall-package packageName\n\t-refresh-cache";
      discretize0.setInvertSelection(false);
      stringArray0[2] = "first-last";
      stringArray0[3] = "?XUb[n ^Xv@H5T";
      stringArray0[4] = ":J1f(+JTQT<g}T";
      stringArray0[5] = "first-last";
      stringArray0[6] = ":J1f(+JTQT<g}T";
      stringArray0[8] = "?XUb[n ^Xv@H5T";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // null
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      Filter.makeCopies(multiFilter0, 1751);
      multiFilter0.isStreamableFilter();
      multiFilter0.toString();
      Filter[] filterArray0 = new Filter[4];
      filterArray0[1] = (Filter) multiFilter1;
      filterArray0[1] = (Filter) multiFilter0;
      MultiFilter multiFilter3 = new MultiFilter();
      multiFilter3.toString();
      MultiFilter multiFilter4 = new MultiFilter();
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Discretize discretize0 = new Discretize("_=,lyS!CL':\"");
      discretize0.setBins(2363);
      System.setCurrentTimeMillis(2363);
      int int0 = (-441);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-441));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "?XUb[n ^Xv@H5T";
      stringArray0[1] = "Options:\n\t-list-packages <all | installed | available>\n\t-package-info <repository | installed | archive> <packageName | packageZip>\n\t-install-package <packageName | packageZip | URL> [version]\n\t-uninstall-package packageName\n\t-refresh-cache";
      Discretize discretize0 = new Discretize("GjtS'");
      int int0 = discretize0.getBins();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, int0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DenseInstance denseInstance0 = new DenseInstance(45);
      Discretize discretize0 = new Discretize(")u@JV8cSI?");
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1,n^=+Pq");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a~o0|");
      SystemInUtil.addInputLine("1,n^=+Pq");
      Discretize discretize0 = new Discretize("a~o0|");
      assertFalse(discretize0.getUseEqualFrequency());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Filter.runFilter(discretize0, (String[]) null);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(566);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 566;
      doubleArray0[1] = (double) (-1932735280);
      doubleArray0[2] = (double) (-1932735280);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(722.0, doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(566);
      BinarySparseInstance binarySparseInstance5 = null;
      try {
        binarySparseInstance5 = new BinarySparseInstance((-1932735280));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(566);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 566;
      doubleArray0[1] = (double) (-1932735280);
      doubleArray0[2] = (double) (-1932735280);
      doubleArray0[3] = (double) (-1932735280);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(722.0, doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(566);
      BinarySparseInstance binarySparseInstance5 = null;
      try {
        binarySparseInstance5 = new BinarySparseInstance((-1932735280));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Discretize discretize0 = new Discretize("4+Ldw-HeHxN,|K%");
      discretize0.getOptions();
      Object object0 = new Object();
      InputStream inputStream0 = null;
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }
}
