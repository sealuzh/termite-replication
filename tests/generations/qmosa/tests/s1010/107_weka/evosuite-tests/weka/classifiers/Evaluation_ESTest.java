/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 07:50:57 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.DataFlavor;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TimeZone;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.InfoGainAttributeEval;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.IntervalEstimator;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.clusterers.FilteredClusterer;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CheckOptionHandler;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.balltrees.TopDownConstructor;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1878873818696016
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.setNumRelationalNominalValues((-3774));
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      infoGainAttributeEval2.getCapabilities();
      Stack<MultilayerPerceptron> stack0 = new Stack<MultilayerPerceptron>();
      infoGainAttributeEval0.setBinarizeNumericAttributes(false);
      TestInstances.forCapabilities(capabilities0);
      Capabilities capabilities1 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances3 = TestInstances.forCapabilities(capabilities1);
      testInstances3.setClassIndex((-2));
      Instances instances1 = testInstances3.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      evaluation0.SFEntropyGain();
      Double double0 = new Double(0.0);
      evaluation0.SFMeanPriorEntropy();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5743631318055766
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.weightedAreaUnderROC();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      evaluation0.m_NumClasses = (-1300);
      double double0 = Evaluation.MIN_SF_PROB;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setHandler(principalComponents0);
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-99.0);
      doubleArray0[3] = (double) (-1300);
      doubleArray0[4] = (double) (-2);
      iBk0.pruneToK(instances0, doubleArray0, (-1));
      BallTree ballTree0 = new BallTree(instances0);
      evaluation0.numTrueNegatives(2);
      evaluation0.incorrect();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Object object1 = new Object();
      evaluation0.numFalsePositives(2);
      evaluation0.truePositiveRate(110);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.63478439690641
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      infoGainAttributeEval0.listOptions();
      instances0.compactify();
      testInstances0.setNumRelationalNominalValues((-635));
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      J48 j48_0 = new J48();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation1.toClassDetailsString("@relation");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Double double0 = new Double(Double.NaN);
      double double1 = evaluation0.m_WithClass;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1780.2940594243);
      doubleArray0[1] = (-1780.2940594243);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9562458976262915
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.pctIncorrect();
      capabilities0.setMinimumNumberInstances((-2));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      evaluation0.toMatrixString(".arff");
      AllFilter allFilter0 = new AllFilter();
      Capabilities capabilities1 = allFilter0.getCapabilities(instances1);
      capabilities0.supports(capabilities1);
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (-99.0);
      doubleArray0[6] = 0.001;
      doubleArray0[7] = Double.NaN;
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.m_WithClass = 1185.16812010498;
      evaluation1.rootMeanPriorSquaredError();
      evaluation0.weightedPrecision();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      Double double0 = new Double(0.3183098861837907);
      evaluation2.kappa();
      evaluation1.coverageOfTestCasesByPredictedRegions();
      evaluation2.weightedRecall();
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6550675376280375
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval(191);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.weightedAreaUnderROC();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      evaluation0.toMatrixString();
      Object object0 = new Object();
      Instances instances1 = textDirectoryLoader0.getStructure();
      VotedPerceptron votedPerceptron1 = new VotedPerceptron();
      J48 j48_0 = new J48();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.weightedTrueNegativeRate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tOnly outputs cumulative margin distribution.\n");
      Double double0 = new Double((-5.713154899488265));
      evaluation0.SFMeanPriorEntropy();
      evaluation0.areaUnderPRC(10);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.clear();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-195225789), charArray0, (-195225789));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.5977505507408667
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setNumRelationalNominalValues(906);
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      Capabilities capabilities1 = infoGainAttributeEval1.getCapabilities();
      Stack<MultilayerPerceptron> stack0 = new Stack<MultilayerPerceptron>();
      TestInstances.forCapabilities(capabilities1);
      infoGainAttributeEval2.getCapabilities();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities2 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities2);
      testInstances1.setClassIndex(906);
      Instances instances1 = testInstances2.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.weightedAreaUnderROC();
      evaluation0.SFEntropyGain();
      evaluation1.SFMeanSchemeEntropy();
      evaluation0.toClassDetailsString(".bsi");
      // Undeclared exception!
      try { 
        evaluation1.unweightedMicroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.688348030447724
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      evaluation0.m_SumKBInfo = (double) (-2);
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      evaluation0.KBMeanInformation();
      evaluation0.weightedAreaUnderROC();
      evaluation0.trueNegativeRate((-2));
      testInstances0.setWordSeparators("?.0*");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_WithClass = (-1.0);
      evaluation0.trueNegativeRate((-1));
      evaluation1.rootMeanPriorSquaredError();
      evaluation1.weightedPrecision();
      // Undeclared exception!
      try { 
        evaluation1.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7099857443999786
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      infoGainAttributeEval1.listOptions();
      instances0.compactify();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval3 = new InfoGainAttributeEval();
      infoGainAttributeEval0.listOptions();
      infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedAreaUnderROC();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances1 = instances0.stringFreeStructure();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.weightedPrecision();
      Evaluation evaluation3 = new Evaluation(instances1);
      evaluation2.weightedTrueNegativeRate();
      Double double0 = new Double(2039.137939);
      evaluation2.kappa();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances2 = bayesNet0.m_Instances;
      try { 
        evaluation1.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.6954923565787623
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      infoGainAttributeEval0.listOptions();
      instances0.compactify();
      testInstances0.setNumRelationalNominalValues((-1361));
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      J48 j48_0 = new J48();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedTrueNegativeRate();
      evaluation0.toClassDetailsString(".arff");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~ofA#");
      evaluation0.relativeAbsoluteError();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      evaluation1.weightedTrueNegativeRate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.globalInfo();
      evaluation0.falseNegativeRate(0);
      evaluation1.coverageOfTestCasesByPredictedRegions();
      evaluation1.falsePositiveRate((-2));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1057142820195405
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.clear();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.weightedAreaUnderROC();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      evaluation0.toMatrixString();
      Object object1 = new Object();
      instances0.stringFreeStructure();
      VotedPerceptron votedPerceptron1 = new VotedPerceptron();
      J48 j48_0 = new J48();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Double double0 = new Double(Double.NaN);
      evaluation0.errorRate();
      evaluation1.matthewsCorrelationCoefficient((-3857));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-3857);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.337827080898473
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.weightedAreaUnderROC();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      evaluation0.m_NumClasses = (-1300);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.falseNegativeRate(1568);
      Object object1 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)11;
      evaluation0.numFalseNegatives(4016);
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      try { 
        topDownConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8325460710116053
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      infoGainAttributeEval0.listOptions();
      testInstances0.setNumRelationalNominalValues((-1361));
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      Capabilities capabilities1 = infoGainAttributeEval1.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      Evaluation evaluation0 = new Evaluation(instances0);
      infoGainAttributeEval1.setBinarizeNumericAttributes(true);
      evaluation0.weightedAreaUnderROC();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instances0.stringFreeStructure();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.rootMeanPriorSquaredError();
      evaluation1.weightedPrecision();
      evaluation1.weightedTrueNegativeRate();
      Double double0 = new Double(2039.137939);
      evaluation1.kappa();
      M5Rules m5Rules0 = new M5Rules();
      Classifier classifier0 = AbstractClassifier.makeCopy(m5Rules0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(classifier0, (Instance) sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9254196998768593
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = filteredClusterer0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      evaluation1.weightedAreaUnderROC();
      evaluation0.trueNegativeRate(10000);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation2 = new Evaluation(instances1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation2.trueNegativeRate((-2));
      double double0 = evaluation0.m_SumAbsErr;
      Stacking stacking0 = new Stacking();
      Evaluation.makeOptionString(stacking0, true);
      evaluation2.setPriors(instances1);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation3 = new Evaluation(instances1);
      evaluation3.numTruePositives(0);
      evaluation3.toSummaryString(true);
      evaluation2.KBInformation();
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.214173924777526
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.weightedAreaUnderROC();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      int int0 = (-1300);
      evaluation0.m_NumClasses = (-1300);
      double double0 = Evaluation.MIN_SF_PROB;
      int int1 = 1568;
      evaluation0.falseNegativeRate(1568);
      Object object1 = new Object();
      Evaluation evaluation1 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.6895870335279453
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      infoGainAttributeEval0.listOptions();
      instances0.compactify();
      testInstances0.setNumRelationalNominalValues((-1361));
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      infoGainAttributeEval1.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      J48 j48_0 = new J48();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.toClassDetailsString(".arff");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.weightedAreaUnderROC();
      evaluation0.rootRelativeSquaredError();
      CSVLoader cSVLoader0 = new CSVLoader();
      Instances instances1 = testInstances1.generate(".arff");
      Instances instances2 = instances1.stringFreeStructure();
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances1.replaceAll(unaryOperator0);
      instances2.stringFreeStructure();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.getHeader();
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setNumBins(2);
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.doubles((long) 0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Double double0 = new Double(2);
      double double1 = 5.3;
      evaluation0.m_TotalCost = (-2.0);
      double[] doubleArray0 = new double[0];
      evaluation0.precision(0);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) costSensitiveClassifier0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.062757575418182
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.setNumRelationalNominalValues((-3774));
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      infoGainAttributeEval2.getCapabilities();
      Stack<MultilayerPerceptron> stack0 = new Stack<MultilayerPerceptron>();
      TestInstances.forCapabilities(capabilities0);
      Capabilities capabilities1 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances3 = TestInstances.forCapabilities(capabilities1);
      testInstances3.setClassIndex((-2));
      Instances instances1 = testInstances3.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Evaluation.makeOptionString(votedPerceptron0, false);
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.575636726393011
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      infoGainAttributeEval0.listOptions();
      instances0.compactify();
      testInstances0.setNumRelationalNominalValues((-1031));
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      infoGainAttributeEval2.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      J48 j48_0 = new J48();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.toClassDetailsString("weka/core/Capabilities.props");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " are not compatible");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.weightedAreaUnderROC();
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      evaluation0.numFalseNegatives((-949));
      TopDownConstructor topDownConstructor1 = new TopDownConstructor();
      try { 
        topDownConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.265505545811745
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      capabilities0.enableAllClasses();
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      infoGainAttributeEval1.listOptions();
      instances0.compactify();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval3 = new InfoGainAttributeEval();
      infoGainAttributeEval3.listOptions();
      infoGainAttributeEval3.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "weka/core/Capabilities.props");
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.doubles(2981L);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Stacking stacking0 = new Stacking();
      evaluation0.toSummaryString(" statistics for each class.\n", false);
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.areaUnderROC(86);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7577727184369
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      infoGainAttributeEval0.listOptions();
      instances0.compactify();
      testInstances0.setNumRelationalNominalValues((-1361));
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      infoGainAttributeEval1.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)108;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      evaluation0.getDiscardPredictions();
      instances0.stringFreeStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedPrecision();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.63478439690641
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      infoGainAttributeEval0.listOptions();
      instances0.compactify();
      testInstances0.setNumRelationalNominalValues((-1361));
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      J48 j48_0 = new J48();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedTrueNegativeRate();
      evaluation0.toClassDetailsString(".arff");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~ofA#");
      Double double0 = new Double(1.7976931348623157E308);
      double double1 = evaluation1.m_WithClass;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-1780.2940594243);
      doubleArray0[1] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.678901382025149
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      instances0.retainAll(priorityQueue0);
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      instances0.deleteWithMissingClass();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.SFPriorEntropy();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.toClassDetailsString(" seconds");
      evaluation0.KBMeanInformation();
      evaluation0.falseNegativeRate((-2));
      Object object0 = new Object();
      int int0 = (-1619);
      IBk iBk0 = new IBk((-1619));
      iBk0.setKNN((-1619));
      evaluation0.precision(1);
      evaluation0.weightedPrecision();
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      TopDownConstructor topDownConstructor1 = new TopDownConstructor();
      try { 
        topDownConstructor1.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7402464825566364
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getOptions();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[9];
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (-211.658);
      doubleArray1[4] = (double) 0;
      evaluation1.updateNumericScores(doubleArray1, doubleArray1, (-1.0));
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      regressionByDiscretization1.getOptions();
      SparseInstance sparseInstance0 = new SparseInstance(240.9697, doubleArray0, intArray0, 0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.equals(regressionByDiscretization0);
      evaluation0.toMatrixString();
      evaluation0.priorEntropy();
      evaluation1.updateMargins(doubleArray1, 0, 2);
      evaluation0.weightedAreaUnderPRC();
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      evaluation1.weightedPrecision();
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1987926481569326
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setNumBins((-2));
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.doubles(42L);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Stacking stacking0 = new Stacking();
      evaluation0.toSummaryString(".bsi", true);
      MockRandom mockRandom1 = new MockRandom();
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7467959615815976
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.weightedAreaUnderROC();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      evaluation0.m_NumClasses = (-1300);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.falseNegativeRate(1568);
      Object object1 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)17;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-89);
      doubleArray0[1] = (double) 1568;
      doubleArray0[2] = (double) (-1300);
      doubleArray0[3] = (double) (byte)17;
      doubleArray0[4] = (double) 1568;
      doubleArray0[5] = (double) (-1300);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.964);
      evaluation0.toSummaryString();
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.178235655793613
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setNumBins(69);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      Evaluation evaluation1 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      regressionByDiscretization0.getCapabilities();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      instances0.stratify(52);
      evaluation1.weightedAreaUnderPRC();
      FileSystemHandling.setPermissions(evoSuiteFile1, false, true, true);
      DenseInstance denseInstance0 = new DenseInstance(2);
      evaluation1.weightedPrecision();
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      topDownConstructor0.globalInfo();
      topDownConstructor0.listOptions();
      evaluation0.numFalseNegatives(2204);
      TopDownConstructor topDownConstructor1 = new TopDownConstructor();
      try { 
        topDownConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.461934648705106
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.weightedAreaUnderROC();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      evaluation0.m_NumClasses = (-1300);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.falseNegativeRate(1568);
      Object object1 = new Object();
      IBk iBk0 = new IBk((-1619));
      double[] doubleArray0 = new double[0];
      iBk0.pruneToK(instances0, doubleArray0, (byte) (-89));
      BallTree ballTree0 = new BallTree((Instances) null);
      evaluation0.numTrueNegatives((-1300));
      evaluation0.incorrect();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1300));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.337827080898473
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.weightedAreaUnderROC();
      Object object0 = new Object();
      instances0.deleteWithMissingClass();
      evaluation0.m_NumClasses = (-1300);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.falseNegativeRate(1581);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[1];
      evaluation0.numTruePositives((-849));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.7546570630252747
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.weightedFalseNegativeRate();
      double double0 = evaluation0.m_SumPriorSqrErr;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(28.031678087, doubleArray0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5310293279511287
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      Capabilities capabilities0 = simpleLogistic0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumNominal(101);
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.buildEvaluator(instances0);
      cfsSubsetEval0.buildEvaluator(instances0);
      Capabilities capabilities1 = cfsSubsetEval0.getCapabilities();
      capabilities1.enableAllClasses();
      capabilities0.and(capabilities1);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.weightedAreaUnderROC();
      evaluation0.trueNegativeRate((-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation1.trueNegativeRate((-1641));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instances0.stringFreeStructure();
      evaluation1.weightedTrueNegativeRate();
      evaluation1.confusionMatrix();
      try { 
        evaluation0.updateStatsForIntervalEstimator((IntervalEstimator) null, (Instance) null, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5321452728962495
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = new double[17];
      doubleArray1[0] = (double) 1;
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, 0);
      regressionByDiscretization0.getOptions();
      int[] intArray0 = new int[1];
      intArray0[0] = 1732;
      SparseInstance sparseInstance0 = new SparseInstance((-211.658), doubleArray1, intArray0, 2);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.equals(sparseInstance0);
      evaluation0.toMatrixString();
      evaluation0.priorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 0, 1.7976931348623157E308);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 750
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.62599252580228
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.weightedFalseNegativeRate();
      double double0 = evaluation0.m_SumPriorSqrErr;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1.0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getOptions();
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 1732;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = 1;
      SparseInstance sparseInstance0 = new SparseInstance(3415.66917262, doubleArray0, intArray0, 1732);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      evaluation0.equals(checkOptionHandler0);
      evaluation0.toMatrixString();
      evaluation0.priorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-1717986918), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1717986918
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.629820911715024
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      instances0.add((Instance) sparseInstance0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1409.5975110431266;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1409.5975110431266;
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, 0);
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.274842682442605
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1409.5975110431266;
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, 0);
      regressionByDiscretization0.getOptions();
      int[] intArray0 = new int[1];
      evaluation0.m_ClassIsNominal = false;
      intArray0[0] = 1732;
      evaluation0.SFMeanSchemeEntropy();
      Object object0 = new Object();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setDiscardPredictions(false);
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3655934560029954
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.weightedAreaUnderROC();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      evaluation0.m_NumClasses = (-1300);
      double double1 = Evaluation.MIN_SF_PROB;
      double double2 = evaluation0.falseNegativeRate(1581);
      assertEquals(0.0, double2, 0.01);
      
      Object object1 = new Object();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[5];
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      stringArray0[0] = "@data";
      stringArray0[1] = "@data";
      stringArray0[2] = "@data";
      stringArray0[3] = ".arff";
      stringArray0[4] = "@relation";
      costSensitiveClassifier0.setOptions(stringArray0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      costSensitiveClassifier0.getCostMatrix();
      Object object2 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      Random.setNextRandom(1581);
      double double3 = evaluation0.truePositiveRate((-1300));
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      Capabilities capabilities0 = simpleLogistic0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.buildEvaluator(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.7844639292579476
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double1, 0.01);
      
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      evaluation0.toMatrixString();
      Object object1 = new Object();
      Instances instances1 = instances0.stringFreeStructure();
      VotedPerceptron votedPerceptron1 = new VotedPerceptron();
      J48 j48_0 = new J48();
      Evaluation evaluation1 = new Evaluation(instances1);
      double double2 = evaluation0.weightedTrueNegativeRate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tOnly outputs cumulative margin distribution.\n");
      double double3 = evaluation1.weightedPrecision();
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation0.truePositiveRate((-4298));
      assertEquals(0.0, double4, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      String string0 = Evaluation.getGlobalInfo(j48_0);
      assertEquals("\nSynopsis for weka.classifiers.trees.J48:\n\nClass for generating a pruned or unpruned C4.5 decision tree. For more information, see\n\nRoss Quinlan (1993). C4.5: Programs for Machine Learning. Morgan Kaufmann Publishers, San Mateo, CA.", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2058632900417225
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Object object0 = new Object();
      Object object1 = new Object();
      LogitBoost logitBoost0 = new LogitBoost();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      String string0 = evaluation0.toClassDetailsString("@relation");
      assertEquals("@relation\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedTrueNegativeRate();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      instances0.randomize(mockRandom0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      Object object2 = new Object();
      VotedPerceptron votedPerceptron1 = new VotedPerceptron();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      MockRandom mockRandom1 = new MockRandom();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      MockRandom mockRandom2 = new MockRandom();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Object object3 = new Object();
      double double1 = evaluation0.unweightedMicroFmeasure();
      double double2 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4587447035883914
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      infoGainAttributeEval0.listOptions();
      instances0.compactify();
      testInstances0.setNumRelationalNominalValues((-1361));
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      infoGainAttributeEval1.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instances1.stringFreeStructure();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Evaluation evaluation1 = new Evaluation(instances1);
      double double1 = evaluation1.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      Evaluation.makeOptionString((Classifier) null, true);
      evaluation1.setPriors(instances0);
      assertEquals(Double.NaN, evaluation1.weightedTrueNegativeRate(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.678860086672528
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      instances0.retainAll(priorityQueue0);
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      instances0.deleteWithMissingClass();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.SFPriorEntropy();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.toClassDetailsString(" seconds");
      evaluation0.KBMeanInformation();
      evaluation0.falseNegativeRate((-2));
      Object object0 = new Object();
      IBk iBk0 = new IBk((-1619));
      iBk0.setKNN((-1619));
      iBk0.pruneToK(instances1, (double[]) null, 102);
      BallTree ballTree0 = new BallTree(instances1);
      evaluation0.numTrueNegatives(1);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1619));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6331247730629703
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setNumRelationalNominalValues(906);
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      Capabilities capabilities1 = infoGainAttributeEval1.getCapabilities();
      Stack<MultilayerPerceptron> stack0 = new Stack<MultilayerPerceptron>();
      TestInstances.forCapabilities(capabilities1);
      infoGainAttributeEval2.getCapabilities();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities2 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities2);
      testInstances1.setClassIndex(906);
      Instances instances1 = testInstances2.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      InfoGainAttributeEval infoGainAttributeEval3 = new InfoGainAttributeEval();
      infoGainAttributeEval2.getCapabilities();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.3695150246304464
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1409.5975110431266;
      evaluation0.toSummaryString();
      try { 
        evaluation0.evaluateModelOnce((Classifier) regressionByDiscretization0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7158498682448617
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = instances0.stringFreeStructure();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances1.enumerateInstances();
      Object object0 = new Object();
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      Capabilities.forInstances(instances0);
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances1);
      double double0 = evaluation1.m_ClassPriorsSum;
      double double1 = evaluation1.m_ClassPriorsSum;
      double double2 = evaluation2.m_SumPriorSqrErr;
      double double3 = evaluation2.numTruePositives(3);
      assertEquals(0.0, evaluation2.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1812556483113945
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.clear();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.weightedAreaUnderROC();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      evaluation0.toMatrixString();
      Object object1 = new Object();
      Instances instances1 = instances0.stringFreeStructure();
      VotedPerceptron votedPerceptron1 = new VotedPerceptron();
      J48 j48_0 = new J48();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.weightedTrueNegativeRate();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@relation";
      stringArray0[1] = "=== Confusion Matrix ===\n\n   <-- classified as\n";
      stringArray0[2] = "@relation";
      stringArray0[3] = "=== Confusion Matrix ===\n\n   <-- classified as\n";
      Instances.test(stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tOnly outputs cumulative margin distribution.\n");
      Double double0 = new Double(0.0);
      double double1 = evaluation1.errorRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation1.matthewsCorrelationCoefficient((-3857));
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.precision((-2530));
      double double4 = evaluation0.SFPriorEntropy();
      assertEquals(double4, double3, 0.01);
      
      evaluation0.unclassified();
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.111883562420972
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      testInstances0.setNumRelationalNominalValues(9);
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval1.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      testInstances1.generate();
      DenseInstance denseInstance0 = new DenseInstance(632);
      J48 j48_0 = new J48();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "makeCopies");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instances0.stringFreeStructure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      Evaluation.makeOptionString(j48_0, false);
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      textDirectoryLoader0.listOptions();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 0.975;
      doubleArray0[3] = 0.975;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (-10.0);
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.975, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) regressionByDiscretization0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.86207719526477
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      Capabilities capabilities0 = simpleLogistic0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.buildEvaluator(instances0);
      cfsSubsetEval0.getCapabilities();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      double double0 = Evaluation.MIN_SF_PROB;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate((-1300));
      Object object0 = new Object();
      try { 
        evaluation0.crossValidateModel((Classifier) votedPerceptron0, instances0, (-1), (java.util.Random) null, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.7099857443999786
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      infoGainAttributeEval1.listOptions();
      instances0.compactify();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval3 = new InfoGainAttributeEval();
      infoGainAttributeEval3.listOptions();
      infoGainAttributeEval3.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedAreaUnderROC();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instances0.stringFreeStructure();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation1.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation2.weightedPrecision();
      Evaluation evaluation3 = new Evaluation(instances0);
      double double2 = evaluation3.weightedTrueNegativeRate();
      assertEquals(double2, double0, 0.01);
      
      Double double3 = new Double(2039.137939);
      double double4 = evaluation2.kappa();
      assertEquals(1.0, double4, 0.01);
      
      evaluation1.setPriors(instances0);
      assertEquals(1.0, evaluation1.kappa(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.setNumRelationalNominalValues((-3774));
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      infoGainAttributeEval2.getCapabilities();
      Stack<MultilayerPerceptron> stack0 = new Stack<MultilayerPerceptron>();
      TestInstances testInstances3 = TestInstances.forCapabilities(capabilities0);
      Capabilities capabilities1 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances4 = TestInstances.forCapabilities(capabilities1);
      testInstances4.setClassIndex((-2));
      testInstances4.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      Stacking stacking1 = new Stacking();
      stacking0.getMetaClassifier();
      try { 
        evaluation0.evaluateModel((Classifier) stacking1, instances1, (Object[]) testInstances3.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.760062476368205
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      AbstractClassifier.makeCopy(regressionByDiscretization0);
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(1);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation1.KBRelativeInformation();
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      Evaluation evaluation4 = new Evaluation(instances0);
      evaluation4.trueNegativeRate(2);
      evaluation4.precision(2);
      evaluation3.weightedPrecision();
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      TopDownConstructor topDownConstructor1 = new TopDownConstructor();
      try { 
        topDownConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "useLaplaceTipText");
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.502278238282822
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.weightedAreaUnderROC();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      evaluation0.m_NumClasses = (-1300);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.falseNegativeRate(1568);
      Object object1 = new Object();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)121;
      Evaluation.getGlobalInfo(votedPerceptron0);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-13);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Object[] objectArray0 = new Object[1];
      try { 
        evaluation0.crossValidateModel((Classifier) votedPerceptron0, instances0, 1568, (java.util.Random) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[4] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      evaluation0.weightedMatthewsCorrelation();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      costSensitiveClassifier0.setClassifier(regressionByDiscretization0);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation.main((String[]) null);
      try { 
        evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setNumBins(2);
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.doubles((long) 0);
      String[] stringArray0 = new String[1];
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Version.MINOR = 2;
      costSensitiveClassifier0.getCostMatrix();
      Stacking stacking0 = new Stacking();
      Stacking stacking1 = new Stacking();
      stacking1.getMetaClassifier();
      evaluation0.evaluateModel((Classifier) regressionByDiscretization0, instances0, (Object[]) stringArray0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6714599763614508
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      testInstances1.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation1.updateNumericScores((double[]) null, (double[]) null, 0.95);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.659231099391246
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalNominalValues((-524));
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      Capabilities capabilities1 = infoGainAttributeEval0.getCapabilities();
      Stack<MultilayerPerceptron> stack0 = new Stack<MultilayerPerceptron>();
      infoGainAttributeEval1.setBinarizeNumericAttributes(true);
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities1);
      infoGainAttributeEval0.getCapabilities();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Capabilities capabilities2 = multilayerPerceptron0.getCapabilities();
      TestInstances.forCapabilities(capabilities2);
      testInstances2.setClassIndex((-1603));
      testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      evaluation0.SFEntropyGain();
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toClassDetailsString("");
      assertEquals("\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\n                 0        0        0          0       0          0     ?         ?         class3\n                 0        0        0          0       0          0     ?         ?         class4\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double1 = evaluation0.unweightedMicroFmeasure();
      evaluation0.falsePositiveRate((-2));
      double double2 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.6537614694710703
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval(221);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.weightedAreaUnderROC();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
      
      Object object0 = new Object();
      Instances instances1 = instances0.stringFreeStructure();
      VotedPerceptron votedPerceptron1 = new VotedPerceptron();
      J48 j48_0 = new J48();
      Evaluation evaluation1 = new Evaluation(instances1);
      Version.REVISION = 221;
      double double1 = evaluation1.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tOnly outputs cumulative margin distribution.\n");
      Double double2 = new Double(0.0);
      evaluation0.SFMeanPriorEntropy();
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      String string1 = evaluation1.num2ShortID(175, charArray0, 480);
      assertEquals("                                                                                                                                                                                                                                                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", string1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.2731738319283363
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = new double[17];
      doubleArray1[0] = (double) 1;
      regressionByDiscretization0.getOptions();
      int[] intArray0 = new int[1];
      intArray0[0] = 1732;
      SparseInstance sparseInstance0 = new SparseInstance((-211.658), doubleArray1, intArray0, 2);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 6;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 6;
      doubleArray2[6] = (double) 2;
      doubleArray2[7] = (double) 2;
      SparseInstance sparseInstance2 = new SparseInstance((-211.658), doubleArray2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0, doubleArray0);
      evaluation0.toSummaryString(false);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) regressionByDiscretization0, (Instance) binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.6423905840943096
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanSquaredError();
      instances0.stringFreeStructure();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Object object1 = new Object();
      Object object2 = new Object();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.toClassDetailsString();
      evaluation0.KBRelativeInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.5969836290788786
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.stringFreeStructure();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Object object1 = new Object();
      Object object2 = new Object();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.weightedAreaUnderROC();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\n                 0        0        0          0       0          0     ?         ?         class3\n                 0        0        0          0       0          0     ?         ?         class4\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      instances0.randomize(mockRandom0);
      double double1 = evaluation0.m_SumSqrClass;
      Object object3 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      evaluation0.weightedPrecision();
      evaluation0.truePositiveRate(1);
      JSONLoader jSONLoader0 = new JSONLoader();
      evaluation0.numFalsePositives(46);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.626135667040316
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.weightedAreaUnderROC();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron1 = new VotedPerceptron();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setTrim(false);
      Capabilities capabilities1 = inputMappedClassifier0.getCapabilities();
      capabilities1.enableAllClassDependencies();
      capabilities0.assign(capabilities1);
      instances0.deleteWithMissingClass();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.SFSchemeEntropy();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.equals(principalComponents0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      DenseInstance denseInstance0 = new DenseInstance(493);
      try { 
        evaluation0.updatePriors(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.5367219319351513
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      textDirectoryLoader0.setCharSet("@relation");
      evaluation0.toMatrixString("|n*c,4tgks3");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DenseInstance denseInstance0 = new DenseInstance(669);
      J48 j48_0 = new J48();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instances0.stringFreeStructure();
      evaluation0.weightedTrueNegativeRate();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.numFalsePositives(2703);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.kappa();
      evaluation1.getHeader();
      assertEquals(Double.NaN, evaluation1.weightedRecall(), 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.9801948987350535
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      instances1.spliterator();
      TestInstances testInstances0 = new TestInstances();
      Instances instances2 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.areaUnderROC(2392);
      CostMatrix costMatrix0 = new CostMatrix(29);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.KBRelativeInformation();
      Evaluation evaluation3 = new Evaluation(instances1);
      Evaluation evaluation4 = new Evaluation(instances2);
      assertEquals(Double.NaN, evaluation4.unweightedMicroFmeasure(), 0.01);
      
      double double1 = evaluation1.weightedAreaUnderROC();
      Evaluation evaluation5 = new Evaluation(instances1);
      double double2 = evaluation2.trueNegativeRate(29);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation5.precision(29);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.weightedPrecision();
      assertEquals(double4, double0, 0.01);
      
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      TopDownConstructor topDownConstructor1 = new TopDownConstructor();
      double double5 = evaluation5.unweightedMicroFmeasure();
      assertEquals(double5, double1, 0.01);
      
      evaluation0.falsePositiveRate(112);
      double double6 = evaluation5.totalCost();
      assertEquals(double6, double3, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.8727606824715153
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[3] = (byte)7;
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numTrueNegatives((byte)7);
      double double1 = evaluation1.fMeasure(97);
      double double2 = evaluation0.weightedTrueNegativeRate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      double double3 = evaluation0.pctUnclassified();
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation1.unweightedMicroFmeasure();
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.787798865982713
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.trueNegativeRate((-1));
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability0);
      evaluation0.rootMeanPriorSquaredError();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.485215761775983
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = (-611.48904986);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1422.7514;
      doubleArray0[6] = 0.0;
      evaluation0.m_TrainClassWeights = doubleArray0;
      evaluation0.weightedFalseNegativeRate();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      instances1.stringFreeStructure();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.setNumericPriorsFromBuffer();
      evaluation1.weightedTrueNegativeRate();
      Double double1 = new Double((-445.46));
      evaluation1.kappa();
      evaluation1.setNumericPriorsFromBuffer();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances1);
      try { 
        evaluation1.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 4.9E-324);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval(191);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) costSensitiveClassifier0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.0556935818406394
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      instances1.spliterator();
      double double0 = evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation0.m_SumPriorSqrErr;
      Object object0 = new Object();
      instances0.stringFreeStructure();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      double double2 = evaluation0.m_SumPriorAbsErr;
      Instances instances2 = instances0.stringFreeStructure();
      Evaluation evaluation1 = new Evaluation(instances2, (CostMatrix) null);
      double double3 = evaluation1.weightedTrueNegativeRate();
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation1.truePositiveRate((-214));
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.364587762068977
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setNumBins(2);
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.doubles((long) 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-211.658);
      doubleArray0[1] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 1732;
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = 2;
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0, intArray0, 2);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.equals((Object) null);
      evaluation0.toMatrixString();
      evaluation0.priorEntropy();
      double double0 = 1.7976931348623157E308;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 2, 300.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      decisionStump0.toString();
      MockRandom mockRandom0 = new MockRandom();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("?+", arrayList0, 97);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.5991666106316718
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = instances0.stringFreeStructure();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Object object1 = new Object();
      evaluation0.toClassDetailsString();
      evaluation0.weightedTrueNegativeRate();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.weightedAreaUnderPRC();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation1.trueNegativeRate(350);
      Evaluation evaluation3 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier1.getCostMatrix();
      Evaluation evaluation4 = null;
      try {
        evaluation4 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.06585355065038
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.stringFreeStructure();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Object object1 = new Object();
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      infoGainAttributeEval1.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.trueNegativeRate((-1));
      instances0.deleteAttributeType(51);
      IBk iBk0 = new IBk((-2));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 4;
      iBk0.pruneToK(instances0, doubleArray0, (-1));
      BallTree ballTree0 = new BallTree(instances0);
      evaluation0.numTrueNegatives(51);
      evaluation0.incorrect();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1954653100));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.9049385692021703
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.setNumRelationalNominalValues((-3774));
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      Capabilities capabilities1 = infoGainAttributeEval2.getCapabilities();
      Stack<MultilayerPerceptron> stack0 = new Stack<MultilayerPerceptron>();
      TestInstances.forCapabilities(capabilities0);
      Capabilities capabilities2 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances3 = TestInstances.forCapabilities(capabilities2);
      testInstances3.setClassIndex((-2));
      testInstances3.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      evaluation0.SFEntropyGain();
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(double1, double0, 0.01);
      
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      TestInstances.forCapabilities(capabilities1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-2);
      double double2 = evaluation0.weightedFMeasure();
      double double3 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.1660899068057584
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = new double[17];
      doubleArray1[0] = (double) 1;
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, 0);
      regressionByDiscretization0.getOptions();
      int[] intArray0 = new int[1];
      intArray0[0] = 1732;
      SparseInstance sparseInstance0 = new SparseInstance((-211.658), doubleArray1, intArray0, 2);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.equals(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance1);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      double double0 = evaluation0.falsePositiveRate((-938));
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.678922564608705
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = instances0.stringFreeStructure();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Object object1 = new Object();
      Object object2 = new Object();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.weightedAreaUnderROC();
      evaluation0.toClassDetailsString();
      evaluation0.weightedTrueNegativeRate();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedAreaUnderROC();
      evaluation0.trueNegativeRate(4);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.trueNegativeRate(4);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.261965716624005
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k'6V0Q|%=IJhq(Au5");
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Object object1 = new Object();
      Object object2 = new Object();
      LogitBoost logitBoost0 = new LogitBoost();
      textDirectoryLoader0.getStructure();
      evaluation0.weightedAreaUnderROC();
      evaluation0.toClassDetailsString();
      evaluation0.weightedTrueNegativeRate();
      MockRandom mockRandom0 = new MockRandom();
      instances0.randomize(mockRandom0);
      evaluation0.weightedFalseNegativeRate();
      Object object3 = new Object();
      VotedPerceptron votedPerceptron1 = new VotedPerceptron();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.setDiscardPredictions(true);
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      MockRandom mockRandom2 = new MockRandom();
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1079198340953655
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.pctIncorrect();
      capabilities0.setMinimumNumberInstances((-2));
      evaluation0.toMatrixString(".arff");
      AllFilter allFilter0 = new AllFilter();
      Capabilities capabilities1 = allFilter0.getCapabilities(instances1);
      capabilities0.supports(capabilities1);
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      testInstances0.setHandler(iBk0);
      doubleArray0[5] = (-99.0);
      doubleArray0[6] = 0.001;
      doubleArray0[7] = Double.NaN;
      Instances instances2 = iBk0.pruneToK(instances1, doubleArray0, (-1619));
      BallTree ballTree0 = new BallTree(instances2);
      evaluation0.numTrueNegatives((-2));
      evaluation0.incorrect();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.134656824181712
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setUseEqualFrequency(true);
      regressionByDiscretization0.setNumBins(2);
      evaluation0.meanPriorAbsoluteError();
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)125;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      ConverterUtils.DataSource.read((InputStream) byteArrayInputStream0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Object object0 = new Object();
      evaluation0.addNumericTrainClass((byte)17, 50.0);
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.correct(), 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.859020218805783
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval(191);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      evaluation0.toMatrixString();
      Object object1 = new Object();
      Instances instances1 = instances0.stringFreeStructure();
      VotedPerceptron votedPerceptron1 = new VotedPerceptron();
      J48 j48_0 = new J48();
      Evaluation evaluation1 = new Evaluation(instances1);
      double double1 = evaluation0.weightedTrueNegativeRate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tOnly outputs cumulative margin distribution.\n");
      Double double2 = new Double(0.0);
      double double3 = evaluation1.errorRate();
      assertEquals(double3, double1, 0.01);
      
      evaluation0.SFMeanPriorEntropy();
      evaluation1.weightedMatthewsCorrelation();
      double double4 = evaluation0.correct();
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.541056560536253
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.weightedAreaUnderROC();
      Object object0 = new Object();
      evaluation0.weightedAreaUnderPRC();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numTrueNegatives((-2));
      Evaluation evaluation2 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation2.fMeasure(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getDataSet();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision(2525);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2525
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.237823399356052
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      instances1.spliterator();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.toClassDetailsString("1[%si2P7@6CUqv>yZ");
      evaluation0.KBMeanInformation();
      evaluation0.falseNegativeRate(974);
      Object object0 = new Object();
      IBk iBk0 = new IBk(974);
      iBk0.setKNN(15);
      evaluation0.precision(1);
      evaluation0.weightedPrecision();
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      TopDownConstructor topDownConstructor1 = new TopDownConstructor();
      TopDownConstructor topDownConstructor2 = new TopDownConstructor();
      try { 
        topDownConstructor1.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.3655934560029954
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(double1, double0, 0.01);
      
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      double double2 = Evaluation.MIN_SF_PROB;
      double double3 = evaluation0.falseNegativeRate(1581);
      assertEquals(0.0, double3, 0.01);
      
      Object object1 = new Object();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".arff";
      stringArray0[3] = "@relation";
      costSensitiveClassifier1.setOptions(stringArray0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      costSensitiveClassifier1.getCostMatrix();
      Object object2 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      Random.setNextRandom(1);
      double double4 = evaluation0.truePositiveRate((-887));
      assertEquals(0.0, double4, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.746992609566588
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double double0 = evaluation0.weightedAreaUnderROC();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron1 = new VotedPerceptron();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setTrim(false);
      Capabilities capabilities1 = inputMappedClassifier0.getCapabilities();
      capabilities0.assign(capabilities1);
      instances0.deleteWithMissingClass();
      evaluation0.unweightedMacroFmeasure();
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
      
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.equals(principalComponents0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      Object object1 = new Object();
      double double2 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.numFalsePositives(1);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.95);
      // Undeclared exception!
      try { 
        testInstances0.setRelationalFormat(479, instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 479
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.565049539126117
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      textDirectoryLoader0.setCharSet("@relation");
      double double0 = evaluation0.weightedAreaUnderROC();
      evaluation0.toMatrixString("|n*c,4tgks3");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DenseInstance denseInstance0 = new DenseInstance(669);
      J48 j48_0 = new J48();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instances0.stringFreeStructure();
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double2 = evaluation1.numFalsePositives(2703);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.weightedRecall();
      assertEquals(double3, double0, 0.01);
      
      evaluation0.kappa();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-31);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Classifier classifier0 = AbstractClassifier.makeCopy(classificationViaRegression0);
      costSensitiveClassifier0.setClassifier(classifier0);
      costSensitiveClassifier0.setClassifier(classificationViaRegression0);
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.8106032920136463
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      Object object0 = new Object();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      MockRandom mockRandom0 = new MockRandom();
      textDirectoryLoader0.reset();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      AdditiveRegression additiveRegression0 = new AdditiveRegression((Classifier) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) instances0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) naiveBayesUpdateable0;
      objectArray0[3] = (Object) instances0;
      Object object2 = new Object();
      Instances instances2 = instances0.stringFreeStructure();
      instances2.stringFreeStructure();
      evaluation0.weightedTrueNegativeRate();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(4.94E-321);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setNumBins(2);
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.doubles((long) 0);
      String[] stringArray0 = new String[1];
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      mockRandom0.doubles((long) 0);
      try { 
        evaluation0.crossValidateModel("@relation", instances0, 0, stringArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @relation
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[24];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = new double[17];
      doubleArray1[0] = (double) 1;
      regressionByDiscretization0.getOptions();
      int[] intArray0 = new int[1];
      intArray0[0] = 1756;
      SparseInstance sparseInstance0 = new SparseInstance((-211.658), doubleArray1, intArray0, 2);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 6;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 6;
      doubleArray2[6] = (double) 2;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, sparseInstance1, 3882.089104365);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.340234055942502
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1409.5975110431266;
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, 0);
      regressionByDiscretization0.getOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_SumSqrClass;
      double double1 = evaluation0.weightedPrecision();
      double double2 = evaluation1.weightedTrueNegativeRate();
      assertEquals(double2, double1, 0.01);
      
      Double double3 = new Double((-3565.70454043442));
      double double4 = evaluation1.kappa();
      assertEquals(1.0, double4, 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.1954817370080812
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = new double[17];
      doubleArray1[0] = (double) 1;
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, 0);
      regressionByDiscretization0.getOptions();
      int[] intArray0 = new int[1];
      intArray0[0] = 1732;
      SparseInstance sparseInstance0 = new SparseInstance((-211.658), doubleArray1, intArray0, 2);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.toClassDetailsString("rQDa1uj");
      evaluation0.sizeOfPredictedRegions();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.2116676591133655
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval(191);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.weightedAreaUnderROC();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      Object object0 = new Object();
      IBk iBk0 = new IBk((-1619));
      try { 
        iBk0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.lazy.IBk: Cannot handle string attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.4438656505524
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      evaluation0.rootRelativeSquaredError();
      instances1.stringFreeStructure();
      instances1.stringFreeStructure();
      double double2 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double2, double0, 0.01);
      
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setNumBins(2);
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.doubles((long) 0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Double double0 = new Double(2);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5.3, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnce((double) 0, (Instance) binarySparseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.3208119525559794
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setNumBins(69);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      Evaluation evaluation1 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      regressionByDiscretization0.getCapabilities();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      instances0.stratify(52);
      evaluation1.weightedAreaUnderPRC();
      FileSystemHandling.setPermissions(evoSuiteFile1, false, true, true);
      DenseInstance denseInstance0 = new DenseInstance(2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      evaluation1.m_SumSqrClass = (double) 2;
      instances0.stringFreeStructure();
      evaluation1.weightedTrueNegativeRate();
      evaluation0.confusionMatrix();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, (Instance) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.396867068207634
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      instances1.spliterator();
      double double0 = evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation0.m_SumPriorSqrErr;
      Object object0 = new Object();
      instances0.stringFreeStructure();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      evaluation0.weightedMatthewsCorrelation();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@data");
      Instances instances2 = instances0.stringFreeStructure();
      Evaluation evaluation1 = new Evaluation(instances2, (CostMatrix) null);
      double double2 = evaluation1.weightedTrueNegativeRate();
      assertEquals(double2, double0, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      evaluation0.rootMeanSquaredError();
      evaluation1.getClassPriors();
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances0 = testInstances0.generate("O\"zS2$~y&[jL@");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.2613403257547118
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Object object0 = new Object();
      Object object1 = new Object();
      LogitBoost logitBoost0 = new LogitBoost();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      evaluation0.toClassDetailsString();
      evaluation0.weightedTrueNegativeRate();
      MockRandom mockRandom0 = new MockRandom();
      instances0.randomize(mockRandom0);
      evaluation0.weightedFalseNegativeRate();
      Object object2 = new Object();
      VotedPerceptron votedPerceptron1 = new VotedPerceptron();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.setDiscardPredictions(false);
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      MockRandom mockRandom2 = new MockRandom();
      DenseInstance denseInstance0 = new DenseInstance(5);
      try { 
        evaluation0.updatePriors(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.6721708036977385
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setNumBins(2);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      MockRandom mockRandom0 = new MockRandom(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      mockRandom0.doubles((long) 0);
      evaluation0.trueNegativeRate(0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation1.matthewsCorrelationCoefficient(1);
      double double1 = evaluation0.precision(1);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.2864856301803007
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      instances1.spliterator();
      double double0 = evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation0.m_SumPriorSqrErr;
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      
      Object object0 = new Object();
      instances0.stringFreeStructure();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      double double2 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double2, 0.01);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@data");
      Instances instances2 = instances0.stringFreeStructure();
      Evaluation evaluation1 = new Evaluation(instances2, (CostMatrix) null);
      double double3 = evaluation1.weightedTrueNegativeRate();
      assertEquals(double3, double0, 0.01);
      
      String string1 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      Object object0 = new Object();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      MockRandom mockRandom0 = new MockRandom();
      textDirectoryLoader0.reset();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      AdditiveRegression additiveRegression0 = new AdditiveRegression((Classifier) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) instances0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) naiveBayesUpdateable0;
      objectArray0[3] = (Object) instances0;
      Object object2 = new Object();
      objectArray0[4] = object2;
      try { 
        evaluation0.crossValidateModel((Classifier) additiveRegression0, instances1, 30, (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Instances cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      MockRandom mockRandom0 = new MockRandom();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      try { 
        evaluation0.crossValidateModel((Classifier) randomSubSpace0, instances0, (int) (byte) (-31), (java.util.Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.727775420563765
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      instances1.spliterator();
      TestInstances testInstances0 = new TestInstances();
      Instances instances2 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.areaUnderROC(2392);
      CostMatrix costMatrix0 = new CostMatrix(29);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.KBRelativeInformation();
      Evaluation evaluation3 = new Evaluation(instances1);
      Evaluation evaluation4 = new Evaluation(instances2);
      evaluation4.m_TotalCost = Double.NaN;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      evaluation1.weightedAreaUnderROC();
      Evaluation evaluation5 = new Evaluation(instances1, (CostMatrix) null);
      evaluation2.trueNegativeRate(29);
      evaluation5.precision(29);
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      evaluation0.numFalseNegatives((-1));
      TopDownConstructor topDownConstructor1 = new TopDownConstructor();
      try { 
        topDownConstructor1.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.6838678152830173
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      // Undeclared exception!
      try { 
        evaluation0.recall((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.3695150246304464
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setNumBins(2);
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.doubles((long) 0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Version.MINOR = 2;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (-2789.4937041949547);
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 2;
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, 2.0);
      evaluation0.toSummaryString();
      Instance instance0 = null;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray1, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.463035280467866
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instances0.equalHeadersMsg(instances1);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      textDirectoryLoader0.setCharSet("@relation");
      evaluation0.weightedAreaUnderROC();
      evaluation0.toMatrixString((String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      DenseInstance denseInstance0 = new DenseInstance(669);
      textDirectoryLoader0.getDirectory();
      J48 j48_0 = new J48();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instances0.stringFreeStructure();
      evaluation0.weightedTrueNegativeRate();
      double[] doubleArray0 = new double[8];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@relation";
      stringArray0[1] = "QA~t;sk(k\":^J`dY4K";
      stringArray0[2] = "?L!UfWCx>i]/Zl";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "@data";
      stringArray0[5] = "@data";
      stringArray0[6] = "@data";
      stringArray0[7] = ".arff";
      stringArray0[8] = ".bsi";
      textDirectoryLoader0.setOptions(stringArray0);
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null\n   <-- classified as\n");
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 669;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = Double.NaN;
      evaluation0.weightedFMeasure();
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.549457393775458
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1409.5975110431266;
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, 0);
      String[] stringArray0 = TimeZone.getAvailableIDs(0);
      int[] intArray0 = new int[1];
      evaluation0.m_ClassIsNominal = true;
      intArray0[0] = 1732;
      double double0 = evaluation0.SFMeanSchemeEntropy();
      Object object0 = new Object();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setDiscardPredictions(true);
      TextDirectoryLoader.main(stringArray0);
      double double1 = evaluation0.KBInformation();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation1.priorEntropy();
      assertNotEquals(double2, double0, 0.01);
      
      evaluation0.setPriors(instances0);
      double double3 = evaluation1.meanAbsoluteError();
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.5806789212792607
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval(191);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.weightedAreaUnderROC();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.relativeAbsoluteError();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.reset();
      evaluation0.weightedTrueNegativeRate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      assertEquals("If set to true, classifier may output additional info to the console.", regressionByDiscretization0.debugTipText());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.206556290734724
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      LogitBoost logitBoost0 = new LogitBoost();
      textDirectoryLoader0.getStructure();
      double double0 = evaluation0.weightedAreaUnderROC();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedTrueNegativeRate();
      MockRandom mockRandom0 = new MockRandom();
      instances0.randomize(mockRandom0);
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.setDiscardPredictions(true);
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      MockRandom mockRandom2 = new MockRandom();
      double double2 = evaluation0.weightedFMeasure();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setUseEqualFrequency(true);
      regressionByDiscretization0.setNumBins(2);
      evaluation0.meanPriorAbsoluteError();
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)125;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      ConverterUtils.DataSource.read((InputStream) byteArrayInputStream0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Object object0 = new Object();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.1449110973868017
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "h5A*MxZC,_S{g";
      stringArray0[1] = "-Ya1i%|*W@a";
      stringArray0[2] = "getClass";
      stringArray0[3] = "getClass";
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedTrueNegativeRate();
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.2077774573089504
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1409.5975110431266;
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, 0);
      regressionByDiscretization0.getOptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[4] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      evaluation0.weightedMatthewsCorrelation();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "=== Detailed Accuracy By Class ===\n");
      double double0 = evaluation0.matthewsCorrelationCoefficient(528);
      evaluation0.getRevision();
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.SFMeanEntropyGain();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Environment environment0 = Environment.getSystemWide();
      inputMappedClassifier0.setEnvironment(environment0);
      evaluation0.equals(inputMappedClassifier0);
      evaluation0.toMatrixString();
      double double2 = evaluation0.priorEntropy();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.numInstances();
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1409.5975110431266;
      regressionByDiscretization0.getOptions();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      SparseInstance sparseInstance0 = new SparseInstance((-211.658), doubleArray0, intArray0, 2);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.recall(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.1012448189540684
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      instances0.spliterator();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      textDirectoryLoader0.setCharSet("main");
      evaluation0.weightedAreaUnderROC();
      evaluation0.useNoPriors();
      evaluation0.toMatrixString("@data");
      DenseInstance denseInstance0 = new DenseInstance(2);
      J48 j48_0 = new J48();
      LogitBoost logitBoost0 = new LogitBoost();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "@data");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.2864856301803007
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      instances1.spliterator();
      evaluation0.weightedPrecision();
      double double0 = evaluation0.m_SumPriorSqrErr;
      Object object0 = new Object();
      instances0.stringFreeStructure();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      double double1 = evaluation0.weightedMatthewsCorrelation();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@data");
      Instances instances2 = instances0.stringFreeStructure();
      Evaluation evaluation1 = new Evaluation(instances2, (CostMatrix) null);
      double double2 = evaluation1.weightedTrueNegativeRate();
      assertEquals(double2, double1, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double3 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.1049561813316413
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = new double[17];
      doubleArray1[0] = (double) 1;
      regressionByDiscretization0.getOptions();
      int[] intArray0 = new int[1];
      intArray0[0] = 1732;
      SparseInstance sparseInstance0 = new SparseInstance((-211.658), doubleArray1, intArray0, 2);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 6;
      doubleArray2[2] = (double) 1;
      IBk iBk0 = new IBk();
      iBk0.pruneToK(instances0, doubleArray1, 108);
      BallTree ballTree0 = new BallTree((Instances) null);
      double double0 = evaluation0.numTrueNegatives(4);
      double double1 = evaluation0.incorrect();
      assertEquals(0.0, double1, 0.01);
      
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1732);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      Object object0 = new Object();
      double double2 = evaluation0.numFalsePositives(1732);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      votedPerceptron0.getCapabilities();
      Capabilities capabilities1 = infoGainAttributeEval0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities1.disableDependency(capabilities_Capability0);
      infoGainAttributeEval0.setMissingMerge(true);
      AbstractClassifier.makeCopy(votedPerceptron0);
      int[] intArray0 = new int[2];
      intArray0[0] = 6;
      intArray0[1] = 105;
      capabilities1.or(capabilities0);
      infoGainAttributeEval0.postProcess(intArray0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      testInstances0.generate();
      try { 
        Evaluation.evaluateModel((Classifier) votedPerceptron0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.VotedPerceptron:
         // 
         // -I <int>
         // \tThe number of iterations to be performed.
         // \t(default 1)
         // -E <double>
         // \tThe exponent for the polynomial kernel.
         // \t(default 1)
         // -S <int>
         // \tThe seed for the random number generation.
         // \t(default 1)
         // -M <int>
         // \tThe maximum number of alterations allowed.
         // \t(default 10000)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      textDirectoryLoader0.reset();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      AdditiveRegression additiveRegression0 = new AdditiveRegression((Classifier) null);
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) naiveBayesUpdateable0;
      Object object2 = new Object();
      String[] stringArray0 = new String[3];
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.3423901693012241
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = new double[17];
      doubleArray1[0] = (double) 1;
      regressionByDiscretization0.getOptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-100);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, (-539));
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 458, 767);
      byteArrayInputStream1.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      ConverterUtils.DataSource.read((InputStream) byteArrayInputStream1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier1.getCostMatrix();
      costSensitiveClassifier2.listOptions();
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 2);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.461934648705106
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double double1 = evaluation0.weightedAreaUnderROC();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.deleteWithMissingClass();
      evaluation0.unweightedMacroFmeasure();
      double double2 = evaluation0.SFSchemeEntropy();
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      double double3 = evaluation0.weightedPrecision();
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.4955170051907487
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Object object0 = new Object();
      LogitBoost logitBoost0 = new LogitBoost();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedAreaUnderROC();
      double double0 = evaluation0.weightedTrueNegativeRate();
      MockRandom mockRandom0 = new MockRandom();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.weightedAreaUnderROC();
      assertEquals(double2, double0, 0.01);
      
      evaluation0.trueNegativeRate(82);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double3 = evaluation1.trueNegativeRate(111);
      assertEquals(0.0, double3, 0.01);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation1.unweightedMacroFmeasure();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.9797552103099456
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = instances0.stringFreeStructure();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Object object1 = new Object();
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      Capabilities.forInstances(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances1);
      double double0 = evaluation1.m_ClassPriorsSum;
      Evaluation evaluation3 = new Evaluation(instances0);
      double double1 = evaluation1.m_ClassPriorsSum;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Object object2 = new Object();
      double double2 = evaluation1.weightedTruePositiveRate();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      infoGainAttributeEval0.listOptions();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InfoGainAttributeEval infoGainAttributeEval1 = new InfoGainAttributeEval();
      InfoGainAttributeEval infoGainAttributeEval2 = new InfoGainAttributeEval();
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      Random.setNextRandom(495);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.truePositiveRate(495);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.avgCost();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      ZeroR zeroR0 = new ZeroR();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "setCollapseTree");
      assertNotNull(string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.337827080898473
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      textDirectoryLoader0.getDirectory();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      instances1.spliterator();
      double double0 = evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
      
      instances1.stringFreeStructure();
      Object object0 = new Object();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      
      Object object1 = new Object();
      objectArray0[0] = object1;
      Object object2 = new Object();
      objectArray0[2] = (Object) instances0;
      objectArray0[3] = (Object) instances0;
      objectArray0[5] = (Object) textDirectoryLoader0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) evaluation0;
      instances1.stringFreeStructure();
      evaluation0.weightedTrueNegativeRate();
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.9799151714181009
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      infoGainAttributeEval0.setMissingMerge(true);
      infoGainAttributeEval0.getCapabilities();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      try { 
        Evaluation.evaluateModel((Classifier) null, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      DenseInstance denseInstance0 = new DenseInstance(13);
      J48 j48_0 = new J48();
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, ".arff");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      J48 j48_0 = new J48();
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, "heQ;f94`DU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      binarySparseInstance0.isMissing(122);
      binarySparseInstance0.setWeight(122);
      binarySparseInstance0.dataset();
      Evaluation.handleCostOption("", 6);
      MockRandom mockRandom0 = new MockRandom();
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "setNumFolds";
      stringArray0[1] = "debugTipText";
      try { 
        Evaluation.evaluateModel("debugTipText", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name debugTipText.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "HrCovbT}x-C)Y";
      stringArray0[1] = "-Ya1i%|*W@a";
      stringArray0[2] = "geClaQs";
      stringArray0[3] = "geClaQs";
      Evaluation.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      decisionStump0.toString();
      Evaluation.makeOptionString(decisionStump0, true);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      MockRandom mockRandom0 = new MockRandom();
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      String string0 = decisionStump0.toString();
      String string1 = Evaluation.makeOptionString(decisionStump0, false);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      binarySparseInstance0.dataset();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)82;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)62;
      byteArray1[2] = (byte) (-4);
      byteArray1[3] = (byte)44;
      byteArray1[4] = (byte)7;
      byteArray1[5] = (byte)7;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream1.close();
      ConverterUtils.DataSource.read((InputStream) byteArrayInputStream1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costSensitiveClassifier0.listOptions();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      int int0 = (-1814);
      Evaluation.handleCostOption((String) null, (-1814));
      int int1 = 468;
      PipedReader pipedReader0 = new PipedReader(468);
      DataFlavor[] dataFlavorArray0 = new DataFlavor[2];
      DataFlavor dataFlavor0 = null;
      try {
        dataFlavor0 = new DataFlavor(".arff");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // failed to parse:.arff
         //
         verifyException("java.awt.datatransfer.DataFlavor", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      decisionStump0.toString();
      int int0 = 11;
      try { 
        Evaluation.handleCostOption("Decision Stump: No model built yet.", 11);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
