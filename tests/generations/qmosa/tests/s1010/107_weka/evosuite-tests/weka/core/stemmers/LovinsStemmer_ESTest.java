/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 08:44:39 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6921972761562545
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "nev";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("}p+?gHo,:w &[YmNy@");
      assertEquals("}p+?gh,:w &[ymn@", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("}p+?gh,:w &[ymn@");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("?h9q~xBb>_99Qx7!fc");
      assertEquals("?h9q~xb>_99qx7!fc", string1);
      
      lovinsStemmer0.stemString("yx");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("}p+?gh,:w &[ymn@");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string3 = lovinsStemmer1.stemString("}p+?gh,:w &[ymn@");
      assertEquals("}p+?gh,:w &[ymn@", string3);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6696286228797335
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("acie");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "acie";
      stringArray0[2] = "aci";
      stringArray0[3] = "aci";
      stringArray0[4] = "aci";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("acie");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Qut~iwum)%}NzXPE{T");
      assertEquals("qut~iwum)%}nzxp{t", string0);
      
      lovinsStemmer0.stemString("n#xJ Lru]1v");
      lovinsStemmer0.stemString("n#xj lru]1v");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6031643028134526
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("v_-\"XoruklT.g");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("ation");
      lovinsStemmer0.stem("8034");
      lovinsStemmer2.toString();
      lovinsStemmer0.stem("5ir*a");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "5ir*a";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      String string0 = lovinsStemmer2.getRevision();
      assertEquals("8034", string0);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stem("ation");
      lovinsStemmer3.stemString("8034");
      lovinsStemmer0.stem("ation");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer2.stemString("v_-\"XoruklT.g");
      assertEquals("v_-\"xoruklt.g", string1);
      
      lovinsStemmer1.stemString("8034");
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer1.stemString("ation");
      String string2 = lovinsStemmer0.stem("acity");
      assertEquals("ac", string2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.610758798379797
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("No input file defined!");
      lovinsStemmer0.stem("\"1g^yH*RVC");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("Nqe2KlOT<iyAR");
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmermit");
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stemString("weka.core.stemmers.lovinsstemmermit");
      // Undeclared exception!
      try { 
        lovinsStemmer1.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6422744995192549
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core@TechniRalInormaton$Type");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka.core@TechniRalInormaton$Type";
      stringArray0[1] = "ix";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("6Q_&t@cq4Ys>Idv@O>");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core@TechniRalInormaton$Type");
      lovinsStemmer0.stemString("wek.cor@techniralinormat$typ");
      lovinsStemmer0.stemString("lV[!ySTp7");
      lovinsStemmer0.stem("end");
      lovinsStemmer0.stemString("!7x~ilN");
      lovinsStemmer0.stemString("metr");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core@techniralinormaton$typ");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.639597012802364
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("No input file defined!");
      lovinsStemmer0.stem("\"1g^yH*RVC");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("wek.cor.technicalinform$typ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "\"1g^yH*RVC";
      stringArray0[2] = "wek.cor.technicalinform$typ";
      stringArray0[3] = "\"1g^yh*rvc";
      stringArray0[4] = "\"1g^yH*RVC";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("5zhEQPMh&T{BNYh*");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("\"1g^yH*RVC");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("icide");
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.stemString("no input fil defin!");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer2.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6290780219093393
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("No input file defined!");
      lovinsStemmer0.stem("\"1g^yH*RVC");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("wek.cor.technicalinform$typ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("wek.cor.technicalinform$typ");
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("izement");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("it");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("olv");
      assertEquals("olut", string2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6039776695761931
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "how someth strang ha been publ. th first word should be capital.";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "O";
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "O";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[6] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("O");
      lovinsStemmer0.stemString("lovinsstemmererid");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString(" P`?$X5k");
      lovinsStemmer0.stem("lovinsstemmerert");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("C^tHP(Mw?yBonE)u");
      assertEquals("c^thp(mw?ybon)u", string1);
      
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stem("1986");
      assertEquals("1986", string3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6224883880067371
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Get position of option -: ");
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      assertEquals("wek.cor.technicalinform$typ", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "orga2bex";
      String string1 = lovinsStemmer0.stemString("misend");
      assertEquals("misens", string1);
      
      lovinsStemmer0.stemString("wek.cor.technicalinform$typ");
      lovinsStemmer0.stemString("misens");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("misens");
      lovinsStemmer1.stem("R6rYl");
      lovinsStemmer1.stemString("<v ~xkDXogSlS");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stemString("CMg %&8hVv");
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer0.stemString("wek.cor.technicalinform$typ");
      assertEquals("wek.cor.technicalinform$typ", string3);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6581642530477785
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "nev";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("tex");
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("The Mathematical Reviews number.");
      assertEquals("th mathemat review number.", string2);
      
      String string3 = lovinsStemmer0.stemString("nev");
      assertEquals("nev", string3);
      
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String string4 = lovinsStemmer0.stem("istr");
      assertEquals("ister", string4);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.85511317282613
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("C-/'@-rW`:[Ay");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("~Yy|n$qBUcR=%|");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "f(7^HG:Ogb\"O?v";
      stringArray0[2] = "Bled, Slovenia";
      stringArray0[3] = "~yy|n$qbucr=%|";
      stringArray0[4] = "ZFPN98,o]g8";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[6] = "ZFPN98,o]g8";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("bbPP,yS7;ZZ6G=>");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.getRevision();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6128802254926544
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      assertEquals("how someth strang ha been publ. th first word should be capital.", string0);
      
      String[] stringArray0 = new String[7];
      lovinsStemmer0.globalInfo();
      stringArray0[0] = "how someth strang ha been publ. th first word should be capital.";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "O";
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("@;");
      String string1 = lovinsStemmer0.stemString("cid");
      assertEquals("cis", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("how someth strang ha been publ. th first word should be capital.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6836158314956824
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ewkq0~Nq";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "how someth strang ha been publ. th first word should be capital.";
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[4] = "How something strange has been published. The first word should be capitalized.";
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("VzOr0(`Yeon$edJ@$w'");
      lovinsStemmer4.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer4.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6059395017176643
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("atic");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("PROCEEDINGS");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("cZP1Px RW[3mm2,dT|f");
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("ionlux");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.stem("ionluc");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("vad");
      lovinsStemmer1.stem("ionet");
      lovinsStemmer2.stem("ionet");
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.613629797949956
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("acie");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "acie";
      stringArray0[2] = "aci";
      stringArray0[3] = "aci";
      stringArray0[4] = "aci";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("acie");
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("$Revision: 8034 $");
      assertEquals("$revis: 8034 $", string1);
      
      lovinsStemmer1.stem("ently");
      String string2 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("typher");
      lovinsStemmer2.stemString("aci");
      lovinsStemmer2.toString();
      lovinsStemmer2.stemString("aci");
      String string3 = lovinsStemmer0.stemString("ac");
      assertEquals("ac", string3);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5862945093672314
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ated");
      lovinsStemmer0.stem("");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("organization");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stem("at");
      lovinsStemmer2.stem("Cl?Uz8zsgO>jlX");
      lovinsStemmer0.stemString("izability");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("iev");
      lovinsStemmer0.toString();
      lovinsStemmer1.stemString("izability");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.stemString("uad");
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6393241340385578
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "cv";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("bbokle");
      assertEquals("bbokl", string0);
      
      String string1 = lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("th www univers resourc loc that point to th item being refer. th oft is us for techn report to point to th ftp sit whes th postscript sourc of th report is loc.", string1);
      
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.getRevision();
      assertEquals("8034", string2);
      
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6147430069137796
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ated");
      lovinsStemmer0.stem("");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      String string0 = lovinsStemmer1.stemString("organization");
      assertEquals("organ", string0);
      
      String string1 = lovinsStemmer0.stemString("Machine Learning");
      assertEquals("mach learn", string1);
      
      lovinsStemmer1.stemString("eiulid");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stemString("ated");
      lovinsStemmer0.stemString("mach learn");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string3 = lovinsStemmer3.stemString("eiulis");
      assertEquals("eiul", string3);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6106608288603725
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("acie");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "acie";
      stringArray0[2] = "aci";
      stringArray0[3] = "aci";
      stringArray0[4] = "aci";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("acie");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("aci");
      lovinsStemmer0.stem("uct");
      lovinsStemmer0.stemString("Key words used for searching or possibly for annotation.");
      lovinsStemmer0.stemString("aci");
      lovinsStemmer0.stem("uc");
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("$Revision: 8034 $");
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("pex");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("uct");
      assertEquals("uc", string2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6106362488080503
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("acie");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "acie";
      stringArray0[2] = "aci";
      stringArray0[3] = "aci";
      stringArray0[4] = "aci";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("acie");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("aci");
      String string1 = lovinsStemmer0.stem("t*uct");
      assertEquals("t*uc", string1);
      
      String string2 = lovinsStemmer0.stemString("Key words used for searching or possibly for annotation.");
      assertEquals("key word us for search or pos for annot.", string2);
      
      lovinsStemmer0.stemString("aci");
      lovinsStemmer0.stem("t*uc");
      String string3 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
      
      lovinsStemmer0.stemString("$Revision: 8034 $");
      lovinsStemmer0.toString();
      String string4 = lovinsStemmer0.stemString("aci");
      assertEquals("ac", string4);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.610802414669274
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("acie");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "acie";
      stringArray0[2] = "aci";
      stringArray0[3] = "aci";
      stringArray0[4] = "aci";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("acie");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("aci");
      String string1 = lovinsStemmer0.stem("uct");
      assertEquals("uc", string1);
      
      lovinsStemmer0.stemString("Key words used for searching or possibly for annotation.");
      lovinsStemmer0.stemString("aci");
      lovinsStemmer0.stem("uc");
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      lovinsStemmer0.stemString("$Revision: 8034 $");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("aci");
      String string3 = lovinsStemmer0.stemString("WZX3SvAv.-@`Be7");
      assertEquals("wzx3svav.-@`be7", string3);
      
      String string4 = lovinsStemmer0.stemString("$revis: 8034 $");
      assertEquals("$rev: 8034 $", string4);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.634616653448205
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("No input file defined!");
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer3.stemString("weka.core.TechnicalInformation$Type");
      assertEquals("wek.cor.technicalinform$typ", string1);
      
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.stemString("A work that is printed and bound, but without a named publisher or sponsoring institution.");
      lovinsStemmer3.stemString("uad");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A work that is printed and bound, but without a named publisher or sponsoring institution.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      String string2 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer2.stemString("ical");
      assertEquals("ical", string3);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6369181821895835
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString("ister");
      lovinsStemmer3.globalInfo();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer4.getRevision();
      lovinsStemmer6.toString();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer7.globalInfo();
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      lovinsStemmer5.getRevision();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "umpt";
      stringArray0[1] = "ister";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "ister";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer7.getTechnicalInformation();
      lovinsStemmer2.toString();
      lovinsStemmer0.stemString("editor");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer7.getRevision();
      lovinsStemmer2.getTechnicalInformation();
      String[] stringArray1 = new String[5];
      stringArray1[0] = "8034";
      stringArray1[2] = "8034";
      stringArray1[3] = "8034";
      stringArray1[4] = "editor";
      LovinsStemmer.main(stringArray0);
      TechnicalInformation technicalInformation0 = lovinsStemmer5.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6420951730345033
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("No input file defined!");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("bboklix");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      TechnicalInformation technicalInformation1 = lovinsStemmer2.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5943324115395465
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      String string1 = lovinsStemmer0.stemString("vad");
      assertEquals("vas", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("year");
      String string2 = lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      assertEquals("a loc associ with th entr, such as th cit in which a confer took plac.", string2);
      
      lovinsStemmer0.stemString("ous");
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString(").");
      String string3 = lovinsStemmer0.stemString("Max index (doubles): ");
      assertEquals("mac indic (doubl): ", string3);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6558197202578786
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("probToogOdds: probability must be in [0,1] ");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("}p+?gh,:w &[ymn@uad");
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"%e~+jZ-K";
      stringArray0[1] = "Max index (doubles): ";
      stringArray0[2] = "probToogOdds: probability must be in [0,1] ";
      stringArray0[3] = "Max index (doubles): ";
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6334457151472683
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Get position of option -o: ");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "organbex";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "organbex";
      stringArray0[3] = "organbex";
      stringArray0[4] = "organbex";
      lovinsStemmer0.stem("luxix");
      stringArray0[5] = "ges posit of opt -o: ";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("ges posit of opt -o: ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("pand");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("Oq.MsEJKht].UMRR+");
      lovinsStemmer2.toString();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stem("4QiT|PsG+bHU@!>m^5");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7777773573644644
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("(k%f23Kld%@(un(CG");
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.stemString("umpt");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer1.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6590248630668596
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("5.55555 rounded to 2 decimal places: ");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer2.stemString("gogeclud");
      lovinsStemmer1.stemString("gogeclud");
      lovinsStemmer2.toString();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "ZFPN98,o]g8";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "5.55555 round to 2 decim plac: ";
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.606780388582663
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("pagdex");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.stem("PROCEEDINGS");
      lovinsStemmer0.stemString("proceed");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "pagdic";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("atic");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer2.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6379199229323786
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      assertEquals("a loc associ with th entr, such as th cit in which a confer took plac.", string0);
      
      lovinsStemmer0.stem("a loc associ with th entr, such as th cit in which a confer took plac.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      lovinsStemmer0.stemString("vad");
      lovinsStemmer0.stemString("a loc associ with th entr, such as th cit in which a confer took plac.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Max index (doubles): ";
      stringArray0[1] = "ZFPN98,o]g8";
      lovinsStemmer0.stemString("Max index (doubles): ");
      lovinsStemmer1.stemString("%7mb.7xbwXd?jXL");
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("uasend");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String[] stringArray1 = new String[9];
      stringArray1[0] = "xfF>/Fmn";
      stringArray1[1] = "Max index (doubles): ";
      stringArray1[2] = "A location associated with the entry, such as the city in which a conference took place.";
      stringArray1[3] = "a loc assoc with th entr, such as th cit in which a confer took plac.";
      stringArray1[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[5] = "%7mb.7xbwXd?jXL";
      stringArray1[6] = "a loc associ with th entr, such as th cit in which a confer took plac.";
      stringArray1[7] = "\"1g^yh*rvc";
      stringArray1[8] = "a loc associ with th entr, such as th cit in which a confer took plac.";
      LovinsStemmer.main(stringArray1);
      String string2 = lovinsStemmer2.stemString("rpt");
      assertEquals("rb", string2);
      
      String string3 = lovinsStemmer1.stemString("S08>q:$z`1I");
      assertEquals("s08>q:$z`1i", string3);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6225062049561458
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("rud");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("rus");
      String string0 = lovinsStemmer0.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string0);
      
      lovinsStemmer0.stemString("uH~z+{GC3?(");
      String string1 = lovinsStemmer0.stemString("ix");
      assertEquals("ix", string1);
      
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("rus");
      lovinsStemmer0.stemString("lux");
      lovinsStemmer0.stemString("!-e%SlDhfPss");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("!-e%SlDhfPss");
      assertEquals("!-e%sldhfps", string3);
      
      String string4 = lovinsStemmer0.stem("ix");
      assertEquals("ix", string4);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6408101486044169
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core@TechniRalInormaton$Type");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka.core@TechniRalInormaton$Type";
      stringArray0[1] = "ix";
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("rud");
      lovinsStemmer0.stemString("wg4w\"dr[s9@xtex");
      lovinsStemmer0.stemString("ix");
      lovinsStemmer0.stemString("ex");
      LovinsStemmer.main(stringArray0);
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6501633171502648
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("probToogOdds: probability must be in [0,1] ");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("n1k_k/");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("q~Ku");
      lovinsStemmer0.stemString("n1k_k/");
      String string0 = lovinsStemmer0.stemString("probToogOdds: probability must be in [0,1] ");
      assertEquals("probtoogod: prob must be in [0,1] ", string0);
      
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("probtoogod: prob must be in [0,1] ");
      lovinsStemmer0.stemString("ativism");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("n1k_k/");
      String string1 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string2 = lovinsStemmer4.stemString("6WFY1G)~?zmm |8");
      assertEquals("6wfy1g)~?zm |8", string2);
      
      String string3 = lovinsStemmer4.stemString("pex");
      assertEquals("pic", string3);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.669275243136066
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("her");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("her");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("hes");
      assertEquals("he", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("ruddex");
      String string1 = lovinsStemmer1.stemString("wg4w\"dr[s9@xtex");
      assertEquals("wg4w\"dr[s9@xtic", string1);
      
      String string2 = lovinsStemmer2.stemString("First option split up:");
      assertEquals("first opt split up:", string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "hes";
      stringArray0[1] = "nev";
      stringArray0[2] = "ix";
      stringArray0[3] = "5u/}\"I*B?cQu";
      stringArray0[4] = "first opt split up:";
      stringArray0[5] = "ruddic";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("m5#\"pGQ$ti3@q+12");
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer2.stemString("ex");
      assertEquals("ex", string4);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.638833787894725
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[6];
      stringArray1[0] = "{F$";
      stringArray1[1] = "Morgan Kaufmann Publishers";
      stringArray1[2] = "Morgan Kaufmann Publishers";
      stringArray1[3] = "Morgan Kaufmann Publishers";
      stringArray1[4] = "Morgan Kaufmann Publishers";
      stringArray1[5] = "Morgan Kaufmann Publishers";
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("encies");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("Morgan Kaufmann Publishers");
      String string0 = lovinsStemmer0.stemString("ex");
      assertEquals("ex", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("W;`lK8gEA?ycoV#'^CY");
      assertEquals("w;`lk8ge?ycov#'^cy", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray1);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.stemString("8zfkrud");
      assertEquals("8zfkrus", string3);
      
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      String string4 = lovinsStemmer0.stemString("encies");
      assertEquals("enci", string4);
      
      String string5 = lovinsStemmer0.stem("author");
      assertEquals("author", string5);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6310258551594266
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core@TechniRalInormaton$Type");
      assertEquals("wek.cor@techniralinormat$typ", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka.core@TechniRalInormaton$Type";
      stringArray0[1] = "ix";
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("cid");
      lovinsStemmer0.stemString("<-gq[:FRIju}M");
      String string1 = lovinsStemmer0.stemString("<-gq[:FRIju}M");
      assertEquals("<-gq[:friju}m", string1);
      
      String string2 = lovinsStemmer0.stemString("cid");
      assertEquals("cis", string2);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("cis");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string4 = lovinsStemmer2.stemString("yz");
      assertEquals("yz", string4);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.569222006947304
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("probToogOdds: probability must be in [0,1] ");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6327981192267726
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core@TechniRalInormaton$Type");
      lovinsStemmer0.stemString("wek.cor@techniralinormat$typ");
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka.core@TechniRalInormaton$Type";
      stringArray0[1] = "ix";
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("slovenyz");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("weka.core@TechniRalInormaton$Type");
      lovinsStemmer0.stemString("<-gq[:FRIju}M");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer3.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6361715614109142
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("FIWJ($DyS&\u0001");
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      String string2 = lovinsStemmer0.stemString("Array-Dimensions of 'new String[3][4][]': ");
      assertEquals("arra-dimens of 'new string[3][4][]': ", string2);
      
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.654317084102225
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer1.stemString("3yjh;xhn?ax");
      lovinsStemmer0.stemString("bex");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "wek.cor.technicalinform$typ";
      stringArray0[1] = "bic";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer3.stemString("Indices from stable sort (doubles): ");
      lovinsStemmer3.toString();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String[] stringArray1 = new String[2];
      stringArray1[0] = "Indices from stable sort (doubles): ";
      stringArray1[1] = "ISBN";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer1.stemString("bic");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6604335506331123
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      assertEquals("wek.cor.technicalinform$typ", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("wek.cor.technicalinform$typ");
      lovinsStemmer0.stemString("(");
      lovinsStemmer0.stemString("B_|j|yhy[p<@ /3");
      lovinsStemmer0.stemString("ert");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "weka.core.TechnicalInformation$Type";
      stringArray0[1] = "ert";
      stringArray0[2] = "b_|j|yhy[p<@ /3";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("Z}8ix8#");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("wg4w\"dr[s9@xtex");
      assertEquals("wg4w\"dr[s9@xtic", string2);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6175937944963135
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core@TechniRalInormaton$Type");
      assertEquals("wek.cor@techniralinormat$typ", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("");
      lovinsStemmer0.stemString("end");
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer1.stemString("dex");
      assertEquals("dic", string1);
      
      lovinsStemmer1.stemString(": ");
      lovinsStemmer1.stemString(": ");
      lovinsStemmer0.stemString("wek.cor@techniralinormat$typ");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "cEd";
      stringArray0[1] = "cEd";
      stringArray0[2] = "";
      stringArray0[3] = "H^v_{'iDA";
      stringArray0[4] = "ens";
      stringArray0[5] = "ens";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer1.stemString("~5ke''9ltTC(\"FOR`");
      assertEquals("~5ke''9lttc(\"for`", string2);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string4 = lovinsStemmer1.stemString("Illegal options: ");
      assertEquals("illeg opt: ", string4);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6049189282573408
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "cv";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("bbokle");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("iefond");
      lovinsStemmer3.toString();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6517349655786195
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.stemString(";FG:95lV*qssz");
      lovinsStemmer0.stemString("lid");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("a loc associ with th entr, such as th cit in which a confer took plac.");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "a loc associ with th entr, such as th cit in which a confer took plac.";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "Max index (doubles): ";
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.617327743046928
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      lovinsStemmer0.stemString("vad");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString(")WJd");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("Max index (doubles): ");
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")wjd";
      LovinsStemmer.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6462979223769594
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("C-/'@-rW`:[Ay");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("c-/'@-rw`:[ay");
      lovinsStemmer0.stemString("0_EY)`1-|8V=TQ:@");
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("biconsyt");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "0_EY)`1-|8V=TQ:@";
      stringArray0[2] = "C-/'@-rW`:[Ay";
      stringArray0[3] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray0[4] = "C-/'@-rW`:[Ay";
      stringArray0[5] = "C-/'@-rW`:[Ay";
      LovinsStemmer.main(stringArray0);
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5764027651657326
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core@TechniRalInormaton$Type");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("Problem reading local properties: ");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("rk/yj);Uj:");
      lovinsStemmer2.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer2.stemString("*Gbj69@yq@vQ");
      lovinsStemmer1.stemString("CkLe|r6nj|E");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("her");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      String string2 = lovinsStemmer3.stemString("How something strange has been published. The first word should be capitalized.");
      assertEquals("how someth strang ha been publ. th first word should be capital.", string2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6389040387528695
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "nev";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("nev");
      String string0 = lovinsStemmer0.stemString("W;`lK8gEA?ycoV#'^CY");
      assertEquals("w;`lk8ge?ycov#'^cy", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("A report published by a school or other institution, usually numbered within a series.");
      assertEquals("a report publ by a school or other institut, usu number within a ser.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("wek.cor.stemmer.lovinsstemmer");
      String string3 = lovinsStemmer0.stemString("capitallud");
      assertEquals("capitallus", string3);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6439911195651844
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Get position of option -o: ");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("ges posit of opt -o: ");
      lovinsStemmer0.stemString("$rkqftS?*'=g;\"/I$Ej");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.7046515245844005
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("null");
      assertEquals("nl", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "iM<OnJ2C`9Pf1";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6430806374346016
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core@TechniRalInormaton$Type");
      lovinsStemmer0.stemString("wek.cor@techniralinormat$typ");
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka.core@TechniRalInormaton$Type";
      stringArray0[1] = "ix";
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("cEd");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("ix");
      lovinsStemmer0.stemString("wek.cor@techniralinormat$typ");
      lovinsStemmer0.stem("ert");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5633308597665052
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Morgan Kaufmann Publishers";
      stringArray0[1] = "Morgan Kaufmann Publishers";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("W;`lK8gEA?ycoV#'^CY");
      lovinsStemmer0.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("w;`lk8ge?ycov#'^cy");
      assertEquals("w;`lk8g?ycov#'^cy", string1);
      
      lovinsStemmer0.stemString("typerid");
      lovinsStemmer0.stemString("us");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string3);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.652640988849686
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("WEY]F$7eqJp+bX");
      lovinsStemmer0.stem("lovinsstemmerher");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("eriset");
      lovinsStemmer0.stem("lovinsstemmerher");
      lovinsStemmer0.stemString("(bgTR~0n?2 @E:bd%t9");
      lovinsStemmer0.stemString("eriset");
      String string1 = lovinsStemmer0.stemString("eriset");
      assertEquals("erises", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("5.7 <= 5.70001 ? ");
      lovinsStemmer1.stem("ement");
      lovinsStemmer0.stem("ement");
      lovinsStemmer0.stemString("ul");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("p]lsQck");
      assertEquals("p]lsqck", string2);
      
      lovinsStemmer1.toString();
      String string3 = lovinsStemmer0.stem("ul");
      assertEquals("ul", string3);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "(bgTR~0n?2 @E:bd%t9";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("9%s#");
      lovinsStemmer1.stemString("ement");
      String string4 = lovinsStemmer2.stem("weka.core.stemmers.LovinsStemmer");
      assertEquals("weka.core.stemmers.lovinsstemmer", string4);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6488413201019738
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Morgan Kaufmann Publishers";
      stringArray0[1] = "Morgan Kaufmann Publishers";
      stringArray0[2] = "Morgan Kaufmann Publishers";
      stringArray0[3] = "Morgan Kaufmann Publishers";
      stringArray0[4] = "ator";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer1.stemString("Morgan Kaufmann Publishers");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("$Tz=NMdW7");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("morgan kaufman publishes");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.toString();
      lovinsStemmer3.stemString("rpzex");
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.toString();
      lovinsStemmer4.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5765879497766666
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("f3OZQPq`y=.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.getTechnicalInformation();
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives ita number; and sometimes books are given numbers in a named series.");
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5501313261105492
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Morgan Kaufmann Publishers";
      stringArray0[1] = "Morgan Kaufmann Publishers";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      lovinsStemmer0.stemString("Morgan Kaufmann Publishers");
      lovinsStemmer0.stemString("Morgan Kaufmann Publishers");
      lovinsStemmer0.stemString("151");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("dY(I!@/I_R");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = null;
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6569617876365839
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("yMb^dNZ5h5b-\"+,=y");
      assertEquals("ymb^dnz5h5b-\"+,=y", string0);
      
      String string1 = lovinsStemmer0.stemString("ix");
      assertEquals("ix", string1);
      
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("fwV1G!xm!p\"F");
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("rud");
      assertEquals("rus", string2);
      
      String string3 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string3);
      
      lovinsStemmer0.stemString("nti");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      String string4 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
  }
}
