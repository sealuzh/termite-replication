/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 20:01:46 GMT 2020
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1180692359548383
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      assertEquals("wek.cor.technicalinform$typ", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("No input file defined!");
      lovinsStemmer0.stem("\"1I:g^yH*RVC");
      lovinsStemmer0.stem("\"1i:g^yh*rvc");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "\"1I:g^yH*RVC";
      stringArray0[2] = "wek.cor.technicalinform$typ";
      stringArray0[3] = "\"1I:g^yH*RVC";
      String string2 = lovinsStemmer0.stemString("istr");
      assertEquals("ister", string2);
      
      lovinsStemmer0.stem("\"1I:g^yH*RVC");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("wek.cor.technicalinform$typ");
      lovinsStemmer0.stemString("wek.cor.technicalinform$typ");
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stemString("chapter");
      lovinsStemmer2.stemString("icism");
      lovinsStemmer1.toString();
      String string3 = lovinsStemmer0.stemString("\"1I:g^yH*RVC");
      assertEquals("\"1i:g^yh*rvc", string3);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1752205200939305
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      assertEquals("wek.cor.technicalinform$typ", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("No input file defined!");
      lovinsStemmer0.stem("\"1g^yH*RVC");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("wek.cor.technicalinform$typ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.stemString("Fatal error.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer1.stemString("P[m`'*A7jG~");
      assertEquals("p[m`'*a7jg~", string2);
      
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1872654665321787
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ewkq0~Nq";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "how someth strang ha been publ. th first word should be capital.";
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[4] = "How something strange has been published. The first word should be capitalized.";
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("VzOr0(`Yeon$edJ@$w'");
      lovinsStemmer4.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer4.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1107938706497031
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("atic");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("PROCEEDINGS");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("cZP1Px RW[3mm2,dT|f");
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("ionlux");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.stem("ionluc");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("vad");
      lovinsStemmer1.stem("ionet");
      lovinsStemmer2.stem("ionet");
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1160452568871542
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("acie");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "acie";
      stringArray0[2] = "aci";
      stringArray0[3] = "aci";
      stringArray0[4] = "aci";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("acie");
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("$Revision: 8034 $");
      lovinsStemmer1.stem("ently");
      String string1 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("typher");
      lovinsStemmer2.stemString("aci");
      lovinsStemmer2.toString();
      lovinsStemmer2.stemString("aci");
      String string2 = lovinsStemmer0.stemString("ac");
      assertEquals("ac", string2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1295798795513128
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer3.stemString("umpt");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "G?SmIQ&}";
      stringArray0[1] = "diex";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer3.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer0.stemString("iev");
      lovinsStemmer0.toString();
      lovinsStemmer3.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      lovinsStemmer0.stemString("G");
      lovinsStemmer0.stemString("riicyz");
      LovinsStemmer.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1195973758458184
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ated");
      lovinsStemmer0.stem("");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      String string0 = lovinsStemmer1.stemString("organization");
      assertEquals("organ", string0);
      
      String string1 = lovinsStemmer0.stemString("Machine Learning");
      assertEquals("mach learn", string1);
      
      String string2 = lovinsStemmer1.stemString("eiulid");
      assertEquals("eiulis", string2);
      
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.stemString("ated");
      lovinsStemmer0.stemString("mach learn");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string4 = lovinsStemmer3.stemString("eiulis");
      assertEquals("eiul", string4);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1125334880364024
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("acie");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "acie";
      stringArray0[2] = "aci";
      stringArray0[3] = "aci";
      stringArray0[4] = "aci";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("acie");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("aci");
      lovinsStemmer0.stem("uct");
      String string0 = lovinsStemmer0.stemString("Key words used for searching or possibly for annotation.");
      assertEquals("key word us for search or pos for annot.", string0);
      
      lovinsStemmer0.stemString("aci");
      lovinsStemmer0.stem("uc");
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("$Revision: 8034 $");
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("pex");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("uct");
      assertEquals("uc", string3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0928455919388462
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      assertEquals("wek.cor.technicalinform$typ", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("No input file defined!");
      lovinsStemmer0.stem("\"1g^yH*RVC");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("tNv(/>1V");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("tnv(/>1v");
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("pand");
      lovinsStemmer1.stemString("kuWf?K\"7I");
      lovinsStemmer2.stem("weka.core.TechnicalInformation$Type");
      lovinsStemmer2.stemString("O");
      String string2 = lovinsStemmer0.stemString("Induction of decision trees");
      assertEquals("induc of decis tree", string2);
      
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer1.stemString("mit");
      assertEquals("mis", string3);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1049789086807216
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("k! *X");
      lovinsStemmer0.stem("k! *X");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("k! *x");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("k! *x");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Bled, Slovenia");
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("O'n_Dps3UeXdZkKV");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("[]=q7J.F7gNhbu4(>w~");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("O'n_Dps3UeXdZkKV");
      assertEquals("o'n_dps3uexdzkkv", string2);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string3 = lovinsStemmer4.stemString("ical");
      assertEquals("ical", string3);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2188220041154891
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("|4Q");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer7.globalInfo();
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      lovinsStemmer5.getRevision();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "umpt";
      stringArray0[1] = "|4q";
      stringArray0[2] = "umpt";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer7.getTechnicalInformation();
      lovinsStemmer2.toString();
      lovinsStemmer0.stemString("editor");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer7.getRevision();
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1306711948643042
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      assertEquals("wek.cor.technicalinform$typ", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"1g^yh*rvc";
      stringArray0[2] = "wek.cor.technicalinform$typ";
      stringArray0[3] = "\"1g^yh*rvc";
      stringArray0[4] = "wek.cor.technicalinform$typ";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("wek.cor.technicalinform$typ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.toString();
      lovinsStemmer0.toString();
      lovinsStemmer1.stemString("Tn*Ao@L]+1`{>L?TE<R");
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("ionqlK");
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer1.stemString("k! *xix");
      assertEquals("k! *xic", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.stemString("How something strange has been published. The first word should be capitalized.");
      String string3 = lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string3);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.138082802371587
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      lovinsStemmer0.toString();
      stringArray0[0] = "A Table of Contents ";
      stringArray0[1] = "A location associated wiOh t*e entry, such as the city in which a conference took place.";
      stringArray0[3] = "A location associated wiOh t*e entry, such as the city in which a conference took place.";
      stringArray0[4] = "A location associated wiOh t*e entry, such as the city in which a conference took place.";
      stringArray0[5] = "A0FzXk9>O<_WIh";
      stringArray0[6] = "A location associated wiOh t*e entry, such as the city in which a conference took place.";
      stringArray0[7] = "A location associated wiOh t*e entry, such as the city in which a conference took place.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("A0FzXk9>O<_WIh");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stemString("\tUses lowercase strings.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stem("A location associated wiOh t*e entry, such as the city in which a conference took place.");
      lovinsStemmer1.stem("vy|GXB");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.096293195853272
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      lovinsStemmer0.stemString("vad");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("year");
      String string1 = lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      assertEquals("a loc associ with th entr, such as th cit in which a confer took plac.", string1);
      
      lovinsStemmer0.stemString("ous");
      String string2 = lovinsStemmer0.stemString("\"1g^yH*RVC");
      assertEquals("\"1g^yh*rvc", string2);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString(").");
      String string3 = lovinsStemmer0.stemString("Max index (doubles): ");
      assertEquals("mac indic (doubl): ", string3);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1571603474058958
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.cure.TechnicalIformation$T=pe");
      assertEquals("wek.cur.technicaliform$t=pe", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("No input file defined!");
      lovinsStemmer0.stem("\"1g^yH*RVC");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "\"1g^yH*RVC";
      stringArray0[2] = "wek.cur.technicaliform$t=pe";
      stringArray0[3] = "\"1g^yH*RVC";
      stringArray0[4] = "\"1g^yH*RVC";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[7] = "\"1g^yH*RVC";
      stringArray0[8] = "\"1g^yH*RVC";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("idine");
      String string2 = lovinsStemmer0.stem("encible");
      assertEquals("enc", string2);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      lovinsStemmer1.stemString("enc");
      lovinsStemmer1.stem("Fpe?VVAj-k");
      String string3 = lovinsStemmer1.stemString("z}'QN6kd");
      assertEquals("z}'qn6kd", string3);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1761998525773971
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("No input file defined!");
      lovinsStemmer0.stemString("title");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString("uad");
      assertEquals("uas", string0);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("p:o^|B'0");
      assertEquals("p:o^|b'0", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("es");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      String string2 = lovinsStemmer2.stemString("weka.core.TechnicalInformation$Type");
      assertEquals("wek.cor.technicalinform$typ", string2);
      
      String string3 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1196140076029166
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "nev";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("tex");
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("a2&Tvk;@");
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("nev");
      lovinsStemmer0.stemString("Quote parse error.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      TechnicalInformation technicalInformation1 = lovinsStemmer2.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1364397271233162
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Get position of option -o: ");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "organbex";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "organbex";
      stringArray0[3] = "organbex";
      stringArray0[4] = "organbex";
      lovinsStemmer0.stem("luxix");
      stringArray0[5] = "ges posit of opt -o: ";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("ges posit of opt -o: ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("pand");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("Oq.MsEJKht].UMRR+");
      lovinsStemmer2.toString();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stem("4QiT|PsG+bHU@!>m^5");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.135377341944489
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("iality");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stem("}");
      lovinsStemmer1.stemString("}");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stem("end");
      lovinsStemmer0.stem("iality");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "|<x_TWw!";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      lovinsStemmer0.stemString("Can't find class called: ");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer2.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.2469887315981492
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "\"1g^yH*RVC";
      stringArray0[3] = "\"1g^yH*RVC";
      stringArray0[4] = "\"1g^yH*RVC";
      stringArray0[7] = "\"1g^yH*RVC";
      stringArray0[8] = "\"1g^yH*RVC";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("nanend");
      assertEquals("nanens", string0);
      
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1569792511161692
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      assertEquals("wek.cor.technicalinform$typ", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("No input file defined!");
      lovinsStemmer0.stem("\"1g^yH*RVC");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String[] stringArray0 = new String[10];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "\"1g^yH*RVC";
      stringArray0[2] = "wek.cor.technicalinform$typ";
      stringArray0[3] = "\"1g^yH*RVC";
      lovinsStemmer0.stem("$Revision: 8034 $");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("pLX_}pz/0{,pdq");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("ativism");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("ativ");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("end");
      assertEquals("ens", string2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1494151271363733
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      assertEquals("a loc associ with th entr, such as th cit in which a confer took plac.", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "a loc associ with th entr, such as th cit in which a confer took plac.";
      stringArray0[1] = "A location associated with the entry, such as the city in which a conference took place.";
      stringArray0[2] = "\"1g^yH*RVC";
      stringArray0[3] = "\"1g^yH*RVC";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[6] = "\"1g^yH*RVC";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("NB1%#G4uB");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("$ ,ix");
      assertEquals("$ ,ix", string2);
      
      lovinsStemmer1.stemString("a loc associ with th entr, such as th cit in which a confer took plac.");
      lovinsStemmer0.stemString("$Revision: 8034 $");
      lovinsStemmer1.stemString("a loc associ with th entr, such as th cit in which a confer took plac.");
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("$ ,lux");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string3 = lovinsStemmer3.stemString("lud");
      assertEquals("lus", string3);
      
      String string4 = lovinsStemmer3.stemString("$qBUcR");
      assertEquals("$qbucr", string4);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.168590870793638
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("[a3");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("PROCEEDINGS");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray1 = new String[2];
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.stemString("Sorted array (doubles): ");
      assertEquals("sort arra (doubl): ", string2);
      
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
      
      String string4 = lovinsStemmer0.stemString("proceed");
      assertTrue(string4.equals((Object)string0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1465572750411985
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core@TechniRalInormaton$Type");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka.core@TechniRalInormaton$Type";
      stringArray0[1] = "ix";
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("rud");
      lovinsStemmer0.stemString("wg4w\"dr[s9@xtex");
      lovinsStemmer0.stemString("ix");
      lovinsStemmer0.stemString("ex");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1808094396573299
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A report published by a school or other institution, usually numbered within a series.");
      lovinsStemmer0.stem("GD;J&):Uk");
      lovinsStemmer0.stem("The language the document is in.");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("CONTENTS");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("ional");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("");
      String string0 = lovinsStemmer0.stemString("rpt");
      assertEquals("rb", string0);
      
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer1.stemString("l[)Pzs%/#E|");
      assertEquals("l[)pz%/#e|", string2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9914998530480177
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "4ekdf@~3]/s]3kvyt";
      stringArray0[1] = "A Table of Contents ";
      stringArray0[2] = "weka.core@TechniRalInormaton$Type";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("iness");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1570027577765116
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("|4Q");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("Za:I4Ozh");
      lovinsStemmer1.stemString("weka.core.technicalinformation$typet");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer2.stemString("S");
      lovinsStemmer1.toString();
      lovinsStemmer4.globalInfo();
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1482627325873735
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("fs<?d]PkIZTJ~s$");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("Get position of option -o: ");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "weka.core.TechnicalInformation$Type";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "ges posit of opt -o: ";
      stringArray0[3] = "fs<?d]pkiztj~s$";
      stringArray0[4] = "..";
      stringArray0[5] = "Or>  p0v ";
      stringArray0[6] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("W2wR V: P;A");
      lovinsStemmer1.stemString("lux");
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.7356907463699587
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("tex");
      assertEquals("tic", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1193310345261434
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      assertEquals("a loc associ with th entr, such as th cit in which a confer took plac.", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      lovinsStemmer0.stemString("vad");
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stemString(")WJd");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("");
      lovinsStemmer1.toString();
      lovinsStemmer1.globalInfo();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"1g^yh*rvc";
      stringArray0[1] = "";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "\"1g^yH*RVC";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[5] = "a loc associ with th entr, such as th cit in which a confer took plac.";
      stringArray0[6] = "\"1g^yH*RVC";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("pex");
      String string3 = lovinsStemmer1.stemString("");
      assertFalse(string3.equals((Object)string1));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1579647963882482
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("pagdicvad");
      lovinsStemmer1.stem("pagdicvas");
      String string0 = lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.stemString("%q>Y3yK,><Sl j{3r3");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer2.stem("%5v#6az;M");
      lovinsStemmer3.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer3.toString();
      lovinsStemmer2.toString();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer0.stemString("ancies");
      lovinsStemmer3.getTechnicalInformation();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer7.globalInfo();
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer6.stemString("pagdicuad");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1930516377448672
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "nev";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("cid");
      lovinsStemmer1.stemString("nev");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.toString();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.056933859421968
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Morgan Kaufmann Publishers";
      stringArray0[1] = "Morgan Kaufmann Publishers";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer1.stemString("W;`lK8gEA?ycoV#'^CY");
      assertEquals("w;`lk8ge?ycov#'^cy", string1);
      
      lovinsStemmer0.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stemString("Can't add object to itself!");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("ZcqOujCgZ&QG6lrC");
      String string2 = lovinsStemmer1.stemString("Im");
      assertEquals("im", string2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1653539769909103
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("ementyz");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      lovinsStemmer0.stemString("^8va~{1|)3Uy6f3+cJ");
      lovinsStemmer0.stemString("4ec*S+VU");
      lovinsStemmer0.stemString("a loc associ with th entr, such as th cit in which a confer took plac.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("4ec*S+VU");
      lovinsStemmer1.toString();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1200833469963534
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core@TechniRalInormaton$Type");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.stem("No input file dmfined!");
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("wek.cor@techniralinormat$typ");
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stem("no input file dmfined!");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("A part of a book having its own title.");
      lovinsStemmer1.stemString("weka.core@TechniRalInormaton$Type");
      lovinsStemmer3.toString();
      lovinsStemmer2.globalInfo();
      lovinsStemmer3.globalInfo();
      String[] stringArray1 = new String[7];
      lovinsStemmer2.stemString("9s,o;Ut]VMNW25Jww>3");
      stringArray1[0] = "No input file dmfined!";
      stringArray1[1] = "wek.cor@techniralinormat$typ";
      stringArray1[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[4] = "";
      stringArray1[5] = "ings";
      stringArray1[6] = "rpt";
      LovinsStemmer.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1319579917777067
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      assertEquals("wek.cor.technicalinform$typ", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("wek.cor.technicalinform$typ");
      String string1 = lovinsStemmer1.stemString("ax");
      assertEquals("ax", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("organbex");
      assertEquals("organbic", string2);
      
      lovinsStemmer2.getTechnicalInformation();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka.core.TechnicalInformation$Type";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "ax";
      stringArray0[3] = "organbex";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string3 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer4.toString();
      lovinsStemmer4.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer4.getTechnicalInformation();
      String string4 = lovinsStemmer2.stemString("x");
      assertEquals("x", string4);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1299844492144984
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("izement");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("entert");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1407011260760216
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Get position of option -o: ");
      assertEquals("ges posit of opt -o: ", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "organbex";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.stemString("misend");
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("Z!%8)*Qe-^i_i]");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      String string3 = lovinsStemmer2.stemString("z!%8)*qe-^i_i]");
      assertEquals("z!%8)*qe-^i_i]", string3);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1783921365443883
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("No input file defined!");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("ond");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("eW-O");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1537112501635998
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.stemString(";FG:95lV*qssz");
      lovinsStemmer0.stemString("lid");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("a loc associ with th entr, such as th cit in which a confer took plac.");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "a loc associ with th entr, such as th cit in which a confer took plac.";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "Max index (doubles): ";
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1190578468531562
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      lovinsStemmer0.stemString("vad");
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.stemString(")WJd");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("#L:A");
      assertEquals("#l:a", string1);
      
      lovinsStemmer1.stemString("Max index (doubles): ");
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")wjd";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1393926514443387
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core@TechniRalInormaton$Type");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      String[] stringArray0 = new String[4];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("entyt");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString(")g%2npy)L");
      lovinsStemmer1.stemString("wek.cor@techniralinormat$typ");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("ativyt");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("BP]{$tSvEN9BXKD,;U");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.07787769141942
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core@TechniRalInormaton$Type");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("Problem reading local properties: ");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("rk/yj);Uj:");
      lovinsStemmer2.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer2.stemString("*Gbj69@yq@vQ");
      lovinsStemmer1.stemString("CkLe|r6nj|E");
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer2.stemString("her");
      assertEquals("hes", string2);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      String string3 = lovinsStemmer3.stemString("How something strange has been published. The first word should be capitalized.");
      assertEquals("how someth strang ha been publ. th first word should be capital.", string3);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1523317014051044
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      assertEquals("wek.cor.technicalinform$typ", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"1g^yh*rvc";
      stringArray0[2] = "wek.cor.technicalinform$typ";
      stringArray0[3] = "\"1g^yh*rvc";
      stringArray0[4] = "wek.cor.technicalinform$typ";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("wek.cor.technicalinform$typ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("\"1g^yh*rvc");
      lovinsStemmer1.stemString("\"1g^yh*rvc");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("\"1g^yh*rvc");
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("isther");
      assertEquals("isther", string2);
      
      String string3 = lovinsStemmer2.stemString(",n5[]StP^?cVCi~#5x");
      assertEquals(",n5[]stp^?cvc~#5x", string3);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0950470899647917
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core@TechniRalInormaton$Type");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("\"1g^yH*RVC");
      assertEquals("\"1g^yh*rvc", string1);
      
      String[] stringArray0 = new String[4];
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("entyt");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.toString();
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("Original array with NaN (doubles): ");
      lovinsStemmer0.stemString("Original array with NaN (doubles): ");
      lovinsStemmer0.stemString("");
      String string3 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
      
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("wek.cor@techniralinormat$typ");
      String string4 = lovinsStemmer0.stemString("");
      assertFalse(string4.equals((Object)string2));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.137844650055747
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Get position of option -o: ");
      assertEquals("ges posit of opt -o: ", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      assertEquals("wek.cor.technicalinform$typ", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "organbex";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("Z!%8)*Qe-^i_i]");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string2 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer3.getTechnicalInformation();
      String string3 = lovinsStemmer3.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string3);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1231670442800543
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.toString();
      lovinsStemmer1.stemString("Il");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString("il");
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer7.stemString("Problem reading user properties: ");
      lovinsStemmer7.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "diex";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "G?SmIQ&}";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer5.stemString("wek.cor.technicalinform$typ");
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer7.stemString("Problem reading user properties: ");
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.084083310285715
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("acie");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "acie";
      stringArray0[2] = "aci";
      stringArray0[3] = "aci";
      stringArray0[4] = "aci";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("acie");
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      lovinsStemmer0.stem("NUMBER");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stemString("aci");
      String string1 = lovinsStemmer0.stem("uct");
      assertEquals("uc", string1);
      
      String string2 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string2);
      
      lovinsStemmer0.stemString("izing");
      lovinsStemmer1.toString();
      String string3 = lovinsStemmer1.stemString("BHw");
      assertEquals("bhw", string3);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.180050271107664
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("F;8J6>LUnJ,");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("rud");
      lovinsStemmer1.stemString("\"1g^yH*RVC");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("NN*'miEx!{cq&");
      lovinsStemmer2.stemString("K;eA}x");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer3.toString();
      lovinsStemmer3.globalInfo();
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.128522156772819
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("No input file defined!");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "wek.cor.technicalinform$typ";
      stringArray0[2] = "weka.core.TechnicalInformation$Type";
      stringArray0[4] = "organbex";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("-lijHf?nZK)5c");
      lovinsStemmer1.stemString("alist");
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.8317603713216299
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("acie");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "acie";
      stringArray0[2] = "aci";
      stringArray0[3] = "aci";
      stringArray0[4] = "aci";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("acie");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1383581162937828
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      assertEquals("a loc associ with th entr, such as th cit in which a confer took plac.", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      lovinsStemmer0.stemString("vad");
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Max index (doubles): ";
      stringArray0[1] = "ZFPN98,o]g8";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[6] = "Max index (doubles): ";
      stringArray0[7] = "vas";
      stringArray0[8] = "San Mateo, CA";
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer1.stemString("\u0003GoaG'\"s2Aetz`1qaD");
      assertEquals("\u0003goag'\"s2aetz`1qad", string3);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.142765764133806
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      assertEquals("wek.cor.technicalinform$typ", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"1g^yh*rvc";
      stringArray0[2] = "wek.cor.technicalinform$typ";
      stringArray0[3] = "\"1g^yh*rvc";
      stringArray0[4] = "wek.cor.technicalinform$typ";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("wek.cor.technicalinform$typ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.toString();
      lovinsStemmer0.toString();
      lovinsStemmer1.stemString("Tn*Ao@L]+1`{>L?TE<R");
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("ionqlK");
      lovinsStemmer1.stemString("w12uad");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer1.stemString("w12erid");
      assertEquals("w12eris", string2);
      
      String string3 = lovinsStemmer1.stemString("\"1g^yh*rvc");
      assertEquals("\"1g^yh*rvc", string3);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1536032248638786
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Morgan Kaufmann Publishers";
      stringArray0[1] = "Morgan Kaufmann Publishers";
      stringArray0[2] = "Morgan Kaufmann Publishers";
      stringArray0[3] = "Morgan Kaufmann Publishers";
      stringArray0[4] = "ator";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer1.stemString("Morgan Kaufmann Publishers");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("$Tz=NMdW7");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("morgan kaufman publishes");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.toString();
      lovinsStemmer3.stemString("rpzex");
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.toString();
      lovinsStemmer4.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.086112166945698
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Morgan Kaufmann Publishers";
      stringArray0[1] = "Morgan Kaufmann Publishers";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("W;`lK8gEA?ycoV#'^CY");
      lovinsStemmer0.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.139699130081755
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("?-^RYrz36Yv");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.stemString("?-^RYrz36Yv");
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer1.stemString("ably");
      lovinsStemmer2.stemString("ists");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer2.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "?-^ryrz36yv";
      stringArray0[1] = "Max index (doubles): ";
      stringArray0[2] = "ists";
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.7356907463699587
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("mit");
      assertEquals("mis", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1559522471278318
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("WEY]F$7eqJp+bX");
      assertEquals("wey]f$7eqjp+bx", string0);
      
      lovinsStemmer0.stem("lovinsstemmerher");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("eriset");
      lovinsStemmer0.stem("lovinsstemmerher");
      lovinsStemmer0.stemString("(bgTR~0n?2 @E:bd%t9");
      lovinsStemmer0.stemString("eriset");
      String string2 = lovinsStemmer0.stemString("eriset");
      assertEquals("erises", string2);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("5.7 <= 5.70001 ? ");
      lovinsStemmer1.stem("ement");
      lovinsStemmer0.stem("ement");
      lovinsStemmer0.stemString("ul");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("p]lsQck");
      lovinsStemmer1.toString();
      String string3 = lovinsStemmer0.stem("ul");
      assertEquals("ul", string3);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "(bgTR~0n?2 @E:bd%t9";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("9%s#");
      lovinsStemmer1.stemString("ement");
      String string4 = lovinsStemmer2.stem("weka.core.stemmers.LovinsStemmer");
      assertEquals("weka.core.stemmers.lovinsstemmer", string4);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.075424934377739
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = "sYA^QNL_zK\"t'VXSGj3";
      lovinsStemmer0.stem("sYA^QNL_zK\"t'VXSGj3");
      lovinsStemmer0.stem("");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("organization");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("eLO");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.dex");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer2.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.7788315947272568
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("the same as inproceedings.her");
      assertEquals("the same as inproceedings.hes", string0);
  }
}
