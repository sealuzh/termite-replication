/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 20:21:53 GMT 2020
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.MindIcon;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Insets;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.io.PrintStream;
import java.sql.Time;
import java.text.DateFormat;
import java.time.Instant;
import java.time.LocalTime;
import java.time.format.FormatStyle;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Stack;
import javax.help.ForwardAction;
import javax.swing.AbstractButton;
import javax.swing.DebugGraphics;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JList;
import javax.swing.JTree;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.SoftBevelBorder;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.metal.MetalPopupMenuSeparatorUI;
import javax.swing.text.AsyncBoxView;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.PlainDocument;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.xml.transform.ErrorListener;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.dom.GenericDocument;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.dom.svg.SVGDOMImplementation;
import org.apache.batik.dom.svg.SVGOMSymbolElement;
import org.apache.batik.script.InterpreterPool;
import org.apache.commons.logging.impl.Log4JLogger;
import org.apache.crimson.tree.DOMImplementationImpl;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.processor.ProcessorCharacters;
import org.apache.xalan.templates.ElemTemplateElement;
import org.apache.xalan.templates.StylesheetRoot;
import org.apache.xalan.transformer.TransformerImpl;
import org.apache.xerces.dom.DeferredDOMImplementationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.tilesources.OsmTileSource;
import org.w3c.dom.DOMImplementation;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.73815617436435
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser0.createToolTip();
      jDayChooser0.getMaxDayCharacters();
      Locale locale0 = Locale.ITALIAN;
      locale0.stripExtensions();
      jDayChooser0.setLocale(locale0);
      StringContent stringContent0 = new StringContent(650);
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.setYear(0);
      jDayChooser0.drawDays();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      StringContent stringContent1 = new StringContent(0);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent1, styleContext0);
      Element element0 = defaultStyledDocument0.getCharacterElement(0);
      AsyncBoxView asyncBoxView0 = new AsyncBoxView(element0, (-406));
      // Undeclared exception!
      try { 
        asyncBoxView0.getGraphics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.View", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.73815617436435
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser0.createToolTip();
      Locale locale0 = Locale.ITALIAN;
      locale0.stripExtensions();
      jDayChooser0.setLocale(locale0);
      StringContent stringContent0 = new StringContent(650);
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Date date0 = jDayChooser1.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setYear(0);
      jDayChooser1.drawDays();
      jDayChooser1.getDaysInMonth();
      MockCalendar.getInstance();
      jDayChooser0.setMonth(4);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7978196315633808
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Metal");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(1993);
      Color.getColor("14");
      jDayChooser0.getDay();
      jDayChooser0.setMonth(46);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getSelectedDay();
      assertEquals(30, jDayChooser0.getDay());
      
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.getComponentListeners();
      JDayChooser jDayChooser3 = new JDayChooser(false);
      jDayChooser3.setYear(19);
      jDayChooser2.drawDays();
      JDayChooser jDayChooser4 = new JDayChooser(false);
      jDayChooser3.updateUI();
      assertEquals(14, jDayChooser3.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Time time0 = new Time(480L);
      time0.clone();
      time0.getTime();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      InterpreterPool interpreterPool0 = new InterpreterPool();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, interpreterPool0, documentLoader0);
      DOMImplementationImpl.getDOMImplementation();
      DeferredDOMImplementationImpl.getDOMImplementation();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      Color color0 = Color.black;
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setForeground(color0);
      jDayChooser1.getDecorationBackgroundColor();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7854326888240037
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Time time0 = new Time(480L);
      time0.clone();
      time0.getTime();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Date date0 = jDayChooser1.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange(time0, time0);
      jDayChooser1.day = 74;
      jDayChooser1.drawWeeks();
      Stack<MockCalendar> stack0 = new Stack<MockCalendar>();
      JList<Calendar> jList0 = new JList<Calendar>(stack0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1077, 0L, 1077, 37, '}', (MenuElement[]) null, menuSelectionManager0);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.keyPressed(menuKeyEvent0);
      jDayChooser1.setMonth(8);
      boolean boolean0 = jDayChooser2.isDecorationBordersVisible();
      assertEquals(13, jDayChooser2.getDay());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7270602215797326
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Time time0 = new Time(480L);
      time0.clone();
      time0.getTime();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Date date0 = jDayChooser1.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange(time0, time0);
      Stack<MockCalendar> stack0 = new Stack<MockCalendar>();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1077, 0L, 1077, 37, '}', (MenuElement[]) null, menuSelectionManager0);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.keyPressed(menuKeyEvent0);
      assertEquals(13, jDayChooser2.getDay());
      
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.723470183627356
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSundayForeground();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(231);
      Insets insets0 = jDayChooser0.getInsets();
      Insets insets1 = softBevelBorder0.getBorderInsets((Component) jDayChooser0, insets0);
      insets1.clone();
      jDayChooser0.getInsets(insets1);
      jDayChooser0.isDecorationBackgroundVisible();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.drawWeeks();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6929037542586007
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "accessories.plugins.time.JDayChooser$1");
      jDayChooser0.setDay(10085);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "r?GGYMZ(M");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Time time0 = new Time(0L);
      time0.clone();
      LocalTime localTime0 = MockLocalTime.now();
      Time time1 = Time.valueOf(localTime0);
      time1.getTime();
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange(time0, time0);
      jDayChooser0.drawWeeks();
      Stack<MockCalendar> stack0 = new Stack<MockCalendar>();
      stack0.clone();
      JList<Calendar> jList0 = new JList<Calendar>(stack0);
      jDayChooser0.drawDays();
      jDayChooser0.getTreeLock();
      JButton jButton0 = new JButton("Windows");
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 17, "13");
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.698009616895563
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      java.sql.Date date0 = new java.sql.Date(1000L);
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      MindIcon.factory("day");
      date0.before(date1);
      Time time0 = new Time(2542L);
      time0.clone();
      time0.getTime();
      time0.clone();
      jDayChooser0.setSelectableDateRange(time0, date0);
      jDayChooser0.getTreeLock();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getVerifyInputWhenFocusTarget();
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("fJB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'f'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Metal");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Time time0 = new Time(0L);
      time0.clone();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap0.getTileUrl(1419, (-1743), 1419);
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode();
      DefaultTreeModel defaultTreeModel0 = new DefaultTreeModel(defaultMutableTreeNode0);
      JTree jTree0 = new JTree(defaultTreeModel0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Stack<Object> stack0 = new Stack<Object>();
      JTree jTree1 = new JTree(stack0);
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree1, defaultTreeCellRenderer0);
      defaultTreeCellEditor0.getFont();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.init();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7325637712329622
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Metal");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Time time0 = new Time(0L);
      time0.clone();
      time0.getTime();
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange(time0, date0);
      jDayChooser0.drawWeeks();
      Stack<MockCalendar> stack0 = new Stack<MockCalendar>();
      JList<Calendar> jList0 = new JList<Calendar>(stack0);
      jDayChooser0.drawDays();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.62460900034393
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      String string0 = "accessories.plugins.time.JDayChooser";
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 11, "accessories.plugins.time.JDayChooser");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8091943779309343
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getAutoscrolls();
      jDayChooser0.getToolTipText();
      jDayChooser0.getName();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getPreferredSize();
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.getSundayForeground();
      jDayChooser0.getSundayForeground();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setFocus();
      jDayChooser0.setMonth(0);
      jDayChooser0.getDecorationBackgroundColor();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, (-3037), 1073741824L, (-3037), 12, '_');
      jDayChooser0.keyReleased(keyEvent0);
      MenuElement[] menuElementArray0 = new MenuElement[5];
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getFreeMindMapController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Time time0 = new Time(0L);
      Time time1 = new Time(623L);
      time1.clone();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap0.getTileUrl(1419, 1419, (-4498));
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode();
      DefaultTreeModel defaultTreeModel0 = new DefaultTreeModel(defaultMutableTreeNode0);
      JTree jTree0 = new JTree(defaultTreeModel0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Stack<Object> stack0 = new Stack<Object>();
      JTree jTree1 = new JTree(stack0);
      ActionEvent actionEvent0 = new ActionEvent(stack0, 1419, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Stack cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8760075221074675
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addFocusListener(jDayChooser0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputBinary0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) rowOutputBinary0;
      PrintStream printStream0 = mockPrintStream0.printf("day", objectArray0);
      DebugGraphics.setLogStream(printStream0);
      jDayChooser0.setMonth(3648);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setEnabled(true);
      jDayChooser0.getSelectedDay();
      jDayChooser0.isFocusable();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMaxDayCharacters(3106);
      MockDate mockDate0 = new MockDate(3106, 3106, 3106, 3, (-1060));
      jDayChooser1.setMaxDayCharacters(0);
      jDayChooser1.getSundayForeground();
      jDayChooser0.setMonth(228);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setDay(355);
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.641992437260311
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFocusTraversalPolicy();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap0.getAttributionImage();
      osmTileSource_CycleMap0.getTilePath(3161, 3161, 0);
      Stack<MockCalendar> stack0 = new Stack<MockCalendar>();
      Stack<MockGregorianCalendar> stack1 = new Stack<MockGregorianCalendar>();
      JList<Calendar> jList0 = new JList<Calendar>(stack1);
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setWeekOfYearVisible(false);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7759300457856506
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFocusTraversalPolicy();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap0.getAttributionImage();
      osmTileSource_CycleMap0.getTilePath(3161, 3161, 0);
      osmTileSource_CycleMap0.getTileUrl(3161, 0, (-1741));
      jDayChooser0.imageUpdate((Image) null, (-1789), (-1789), (-1789), 213, 262);
      Color.getColor("vrP,k", 0);
      Color color0 = Color.getHSBColor(0, 304, 0);
      jDayChooser0.setWeekdayForeground(color0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1663), false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      
      Color color1 = jDayChooser0.getSundayForeground();
      assertEquals(0, color1.getGreen());
      
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.860759672467969
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFocusTraversalPolicy();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap0.getAttributionImage();
      osmTileSource_CycleMap0.getTilePath(3161, 3161, 0);
      osmTileSource_CycleMap0.getTileUrl(3161, 0, (-1741));
      osmTileSource_CycleMap0.getTilePath(24, 0, 26);
      osmTileSource_CycleMap0.getBaseUrl();
      jDayChooser0.imageUpdate((Image) null, (-1789), (-1789), (-1789), 213, 262);
      jDayChooser0.setMonth(3648);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setEnabled(true);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setMaxDayCharacters((-1789));
      MockDate mockDate0 = new MockDate(0, 3648, (-1741), (-1741), 3161);
      jDayChooser0.setMaxDayCharacters(213);
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals((-6029312), color0.getRGB());
      
      jDayChooser0.setMonth((-3409));
      jDayChooser0.focusGained((FocusEvent) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.593621512459067
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Metal");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l=\"p8");
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-1437625606));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.drawWeeks();
      Stack<MockCalendar> stack0 = new Stack<MockCalendar>();
      Stack<MockCalendar> stack1 = new Stack<MockCalendar>();
      stack1.add((MockCalendar) null);
      stack1.clone();
      JList<Calendar> jList0 = new JList<Calendar>(stack1);
      jDayChooser0.drawDays();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.869193217017213
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(19);
      Color.getColor("day");
      jDayChooser0.getDay();
      jDayChooser0.setMonth(19);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDecorationBackgroundVisible(true);
      jDayChooser0.setEnabled(true);
      jDayChooser1.getSelectedDay();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser1.getComponentListeners();
      jDayChooser2.setMaxDayCharacters((-3955));
      jDayChooser2.drawDays();
      JDayChooser jDayChooser3 = new JDayChooser(false);
      jDayChooser3.updateUI();
      jDayChooser2.getLocale();
      jDayChooser0.isDayBordersVisible();
      assertEquals(19, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.714323055955069
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Metal");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Time time0 = new Time(0L);
      time0.clone();
      time0.getTime();
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange(time0, date0);
      jDayChooser0.drawWeeks();
      Stack<MockCalendar> stack0 = new Stack<MockCalendar>();
      JList<Calendar> jList0 = new JList<Calendar>(stack0);
      jDayChooser0.drawDays();
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7129242178517146
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Metal");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Time time0 = new Time(0L);
      time0.setTime(9223372036854775807L);
      time0.getTime();
      time0.clone();
      time0.getTime();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.setMonth(2);
      jDayChooser0.updateUI();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, interpreterPool0, documentLoader0);
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("document", "Metal", (String) null);
      DOMImplementation dOMImplementation0 = DOMImplementationImpl.getDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, dOMImplementation0);
      SVGOMSymbolElement sVGOMSymbolElement0 = new SVGOMSymbolElement("Metal", genericDocument0);
      sVGColorProfileElementBridge0.createICCColorSpaceExt(bridgeContext0, sVGOMSymbolElement0, "accessories.plugins.time.JDayChooser$1");
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 9223372036854775807L;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) 2;
      jDayChooser0.getDay();
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMonth(14);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.616230775360895
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters((-457));
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6266116706270757
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(49);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7883982443058835
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.removeContainerListener((ContainerListener) null);
      jDayChooser0.setFocus();
      jDayChooser0.setMaxDayCharacters(2751);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMaxSelectableDate();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-13);
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("tU,f9cN?Wvr", ")", "day");
      DOMImplementation dOMImplementation0 = SVGDOMImplementation.getDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, dOMImplementation0);
      SVGOMSymbolElement sVGOMSymbolElement0 = new SVGOMSymbolElement("day", genericDocument0);
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0);
      sVGColorProfileElementBridge0.createICCColorSpaceExt(bridgeContext0, sVGOMSymbolElement0, "28");
      jDayChooser0.getDay();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      
      jDayChooser0.setMonth(0);
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, int0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.getDayPanel();
      SystemColor systemColor0 = SystemColor.menu;
      SystemColor systemColor1 = SystemColor.window;
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        systemColor0.getComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getUIClassID();
      jDayChooser0.getRegisteredKeyStrokes();
      jDayChooser0.repaint(0L, 48, 48, 2555, 600);
      SystemColor systemColor0 = SystemColor.windowText;
      jDayChooser0.setBackground(systemColor0);
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.menu;
      systemColor0.getRGBColorComponents((float[]) null);
      jDayChooser0.getSelectedDay();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getSelectedDay();
      MockDate mockDate0 = new MockDate(19, 19, (-2434), 33, (-2434));
      jDayChooser0.setMonth(15);
      jDayChooser1.getSelectedDay();
      boolean boolean0 = jDayChooser1.isDayBordersVisible();
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(boolean0);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.746209545491265
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Time time0 = new Time(0L);
      time0.setTime((-9223372036854775807L));
      time0.clone();
      long long0 = new Long(0L);
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.setMonth(2);
      jDayChooser0.updateUI();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, interpreterPool0, documentLoader0);
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("document", "Metal", (String) null);
      DOMImplementation dOMImplementation0 = DOMImplementationImpl.getDOMImplementation();
      GenericDocument genericDocument0 = new GenericDocument(genericDocumentType0, dOMImplementation0);
      SVGOMSymbolElement sVGOMSymbolElement0 = new SVGOMSymbolElement("Metal", genericDocument0);
      sVGColorProfileElementBridge0.createICCColorSpaceExt(bridgeContext0, sVGOMSymbolElement0, "accessories.plugins.time.JDayChooser$1");
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) (-9223372036854775807L);
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) 2;
      jDayChooser0.getDay();
      jDayChooser0.getWeekdayForeground();
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int[] intArray0 = new int[10];
      intArray0[0] = 0;
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      Log4JLogger log4JLogger0 = new Log4JLogger();
      pDFDocumentGraphics2D0.setLogger(log4JLogger0);
      jDayChooser_DecoratorButton0.update(pDFDocumentGraphics2D0);
      intArray0[1] = 0;
      char char0 = 'g';
      jDayChooser_DecoratorButton0.firePropertyChange("day", 'g', 'g');
      jDayChooser_DecoratorButton0.hasFocus();
      HashMap<JButton, MockGregorianCalendar> hashMap0 = new HashMap<JButton, MockGregorianCalendar>();
      jDayChooser_DecoratorButton0.repaint((long) 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 47, 47, 0);
      jDayChooser0.getSelectedDay();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      jDayChooser_DecoratorButton0.getVerifyInputWhenFocusTarget();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      Locale locale0 = Locale.UK;
      int int0 = (-2132);
      // Undeclared exception!
      try { 
        DateFormat.getTimeInstance((-2132), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2132
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setDecorationBordersVisible(true);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 1153, 0L, 8776, (-3269), '&', (-2939));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int[] intArray0 = new int[10];
      intArray0[0] = 0;
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      Log4JLogger log4JLogger0 = new Log4JLogger();
      pDFDocumentGraphics2D0.setLogger(log4JLogger0);
      jDayChooser_DecoratorButton0.update(pDFDocumentGraphics2D0);
      intArray0[1] = 0;
      jDayChooser_DecoratorButton0.firePropertyChange("day", 'g', 'g');
      jDayChooser_DecoratorButton0.hasFocus();
      HashMap<JButton, MockGregorianCalendar> hashMap0 = new HashMap<JButton, MockGregorianCalendar>();
      jDayChooser_DecoratorButton0.repaint((long) 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 47, 47, 0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      jDayChooser_DecoratorButton0.getVerifyInputWhenFocusTarget();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      Locale locale0 = Locale.UK;
      DateFormat.getTimeInstance(0, locale0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jDayChooser0.setMonth((-738));
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFocusTraversalPolicy();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap0.getAttributionImage();
      osmTileSource_CycleMap0.getTilePath(3161, 3161, 0);
      osmTileSource_CycleMap0.getTileUrl(3161, 0, (-1741));
      ForwardAction forwardAction0 = new ForwardAction("Metal");
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 641, 14L, 29, (-1518), (-1741), 46, (-1415), (-1518), true, (-1415), 24, 3161);
      forwardAction0.mouseClicked(mouseWheelEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.repaint(90, 0, (-3333), (-2825));
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.keyTyped((KeyEvent) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addFocusListener(jDayChooser0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputBinary0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) rowOutputBinary0;
      PrintStream printStream0 = mockPrintStream0.printf("day", objectArray0);
      DebugGraphics.setLogStream(printStream0);
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser0.createToolTip();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      Locale locale0 = Locale.ITALIAN;
      locale0.stripExtensions();
      jDayChooser0.setLocale(locale0);
      StringContent stringContent0 = new StringContent(650);
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      Element element0 = plainDocument0.getDefaultRootElement();
      LabelView labelView0 = new LabelView(element0);
      // Undeclared exception!
      try { 
        labelView0.getFont();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // LabelView needs StyledDocument
         //
         verifyException("javax.swing.text.LabelView", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser0.createToolTip();
      jDayChooser0.getMaxDayCharacters();
      Locale locale0 = Locale.ITALIAN;
      locale0.stripExtensions();
      jDayChooser0.setLocale(locale0);
      StringContent stringContent0 = new StringContent(650);
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      Element element0 = plainDocument0.getDefaultRootElement();
      LabelView labelView0 = new LabelView(element0);
      // Undeclared exception!
      try { 
        labelView0.getFont();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // LabelView needs StyledDocument
         //
         verifyException("javax.swing.text.LabelView", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      MetalPopupMenuSeparatorUI metalPopupMenuSeparatorUI0 = new MetalPopupMenuSeparatorUI();
      Dimension dimension0 = metalPopupMenuSeparatorUI0.getPreferredSize(jMonthChooser0);
      jMonthChooser0.getSize(dimension0);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getDaysInMonth();
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement((jdbcConnection) null, "month", 28);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.isFocusOwner();
      jDayChooser0.setIgnoreRepaint(true);
      jDayChooser0.setWeekOfYearVisible(false);
      int int0 = (-2742);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2742));
      focusEvent0.paramString();
      JButton[] jButtonArray0 = new JButton[2];
      JButton jButton0 = new JButton();
      jButtonArray0[0] = jButton0;
      MindIcon mindIcon0 = MindIcon.factory("");
      ImageIcon imageIcon0 = mindIcon0.getIcon();
      JButton jButton1 = new JButton((String) null, imageIcon0);
      jButtonArray0[1] = jButton1;
      jDayChooser0.weeks = jButtonArray0;
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.drawDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.isFocusOwner();
      jDayChooser0.setIgnoreRepaint(true);
      jDayChooser0.setWeekOfYearVisible(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2742));
      String string0 = AbstractButton.MODEL_CHANGED_PROPERTY;
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      // Undeclared exception!
      try { 
        processorCharacters0.appendChild((ElemTemplateElement) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Trying to add a null child!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Metal");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Time time0 = new Time(0L);
      time0.clone();
      time0.getTime();
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.drawWeeks();
      Stack<MockCalendar> stack0 = new Stack<MockCalendar>();
      JList<Calendar> jList0 = new JList<Calendar>(stack0);
      Color color0 = jList0.getSelectionBackground();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.drawDays();
      jList0.setVisible(false);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setSundayForeground(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true);
      jDayChooser0.focusLost(focusEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Time time0 = new Time(1L);
      time0.clone();
      time0.getTime();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap0.setTermsOfUseText("13");
      time0.getTime();
      OsmTileSource.CycleMap osmTileSource_CycleMap1 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap1.setTermsOfUseText((String) null);
      OsmTileSource.CycleMap osmTileSource_CycleMap2 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap2.setTermsOfUseText("20");
      OsmTileSource.CycleMap osmTileSource_CycleMap3 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap3.getTileUrl((-1381), 8746, (-1381));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DATABASE_CLOSING";
      stringArray0[1] = "20";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.775930045785651
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      jDayChooser_DecoratorButton0.firePropertyChange("_=,lyS!CL':\"", '(', '2');
      Hashtable<JButton, Calendar> hashtable0 = new Hashtable<JButton, Calendar>();
      HashMap<JButton, MockGregorianCalendar> hashMap0 = new HashMap<JButton, MockGregorianCalendar>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9999, 2161, (-30), 0, 234);
      hashMap0.put(jDayChooser_DecoratorButton0, mockGregorianCalendar0);
      hashtable0.putAll(hashMap0);
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(0, 0, intArray0, 0, 9999, hashtable0);
      Image image0 = jDayChooser0.createImage((ImageProducer) memoryImageSource0);
      jDayChooser_DecoratorButton0.getVerifyInputWhenFocusTarget();
      jDayChooser0.prepareImage(image0, (ImageObserver) jDayChooser_DecoratorButton0);
      jDayChooser_DecoratorButton0.isFocusable();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setYear(0);
      jDayChooser0.addListeners(0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getMaxDayCharacters();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Time time0 = new Time(0L);
      time0.clone();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      MapDialog mapDialog0 = new MapDialog();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDaysInMonth();
      mapDialog0.setSingleSearch();
      // Undeclared exception!
      try { 
        mapDialog0.getFreeMindMapController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7100799133333875
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Metal");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Time time0 = new Time(0L);
      time0.toLocalTime();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Date.from(instant0);
      time0.clone();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap0.getTileUrl(639, 2, 850);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("Dialog Plain 11", false);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jCheckBoxMenuItem0, (-1332), 2, 9999, 12, 'O', (MenuElement[]) null, menuSelectionManager1);
      KeyEvent.getKeyModifiersText((-1));
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setMonth(2);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(231);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.createVolatileImage((-2611), (-2145));
      jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.7325637712329622
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      java.sql.Date date0 = new java.sql.Date(1000L);
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      JButton jButton0 = new JButton();
      MindIcon.factory("day");
      date0.before(date1);
      Time time0 = new Time(2542L);
      time0.clone();
      time0.getTime();
      time0.clone();
      jDayChooser0.setSelectableDateRange(time0, date0);
      jDayChooser0.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent(date1, (-1), "day");
      StylesheetRoot stylesheetRoot0 = new StylesheetRoot((ErrorListener) null);
      TransformerImpl transformerImpl0 = new TransformerImpl(stylesheetRoot0);
      transformerImpl0.getCountersTable();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      jDayChooser0.drawWeeks();
      jDayChooser0.setMinSelectableDate(date1);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Time time0 = new Time(0L);
      Time time1 = new Time(0L);
      time1.getTime();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      jDayChooser_DecoratorButton0.firePropertyChange("_=,lyS!CL':\"", '(', '2');
      Hashtable<JButton, Calendar> hashtable0 = new Hashtable<JButton, Calendar>();
      HashMap<JButton, MockGregorianCalendar> hashMap0 = new HashMap<JButton, MockGregorianCalendar>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9999, 2161, (-30), 0, 0);
      hashMap0.put(jDayChooser_DecoratorButton0, mockGregorianCalendar0);
      hashtable0.putAll(hashMap0);
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(0, 0, intArray0, 0, 9999, hashtable0);
      Image image0 = jDayChooser0.createImage((ImageProducer) memoryImageSource0);
      jDayChooser0.prepareImage(image0, (ImageObserver) jDayChooser_DecoratorButton0);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setYear(0);
      jDayChooser0.drawDays();
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(29, int0);
      
      MockCalendar.getInstance();
      jDayChooser0.setMonth(15);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.593621512459067
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getFocusTraversalPolicy();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.decorationBordersVisible = false;
      jDayChooser0.removeAll();
      jDayChooser0.setDay(86);
      SystemColor systemColor0 = SystemColor.menu;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 86;
      floatArray0[1] = (float) 86;
      // Undeclared exception!
      try { 
        systemColor0.getRGBColorComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.7039446318508733
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Metal");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Time time0 = new Time(0L);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      time0.clone();
      time0.getTime();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap0.setTermsOfUseText("DATABASE_CLOSING");
      osmTileSource_CycleMap0.getTileUrl(8746, 8746, 8746);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Metal";
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      time0.before(date0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.WHITE;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.getDecorationBackgroundColor();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-1143));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.710079913333388
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int[] intArray0 = new int[10];
      intArray0[0] = 0;
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      Log4JLogger log4JLogger0 = new Log4JLogger();
      pDFDocumentGraphics2D0.setLogger(log4JLogger0);
      jDayChooser_DecoratorButton0.update(pDFDocumentGraphics2D0);
      intArray0[1] = 0;
      jDayChooser_DecoratorButton0.firePropertyChange("day", 'g', 'g');
      jDayChooser_DecoratorButton0.hasFocus();
      HashMap<JButton, MockGregorianCalendar> hashMap0 = new HashMap<JButton, MockGregorianCalendar>();
      jDayChooser_DecoratorButton0.repaint((long) 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 47, 47, 0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      jDayChooser_DecoratorButton0.getVerifyInputWhenFocusTarget();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      Locale locale0 = Locale.UK;
      DateFormat.getTimeInstance(0, locale0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser_DecoratorButton0, 41, 0L, (-738), 0, 'g', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.7759300457856506
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getAutoscrolls();
      jDayChooser0.getToolTipText();
      jDayChooser0.getName();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getPreferredSize();
      boolean boolean1 = false;
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.getSundayForeground();
      jDayChooser0.getSundayForeground();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setFocus();
      int int0 = 0;
      jDayChooser0.setMonth(0);
      jDayChooser0.getDecorationBackgroundColor();
      long long0 = 600000L;
      int int1 = 0;
      int int2 = 10119;
      char char0 = '.';
      MenuElement[] menuElementArray0 = new MenuElement[5];
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getFreeMindMapController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }
}
