/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 08:40:26 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("1");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      String[] stringArray0 = new String[35];
      stringArray0[0] = "1";
      stringArray0[2] = "1";
      vector0.clear();
      stringArray0[3] = "1";
      Object object0 = new Object();
      vector0.add(object0);
      archiveScanner0.includes = stringArray0;
      archiveScanner0.addDefaultExcludes();
      Object object1 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      Object object2 = new Object();
      vector0.add((Object) consumer0);
      Object object3 = new Object();
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.dirsIncluded = vector1;
      Object object4 = new Object();
      vector0.spliterator();
      vector0.add((Object) null);
      Object object5 = new Object();
      try { 
        archiveScanner0.processDirectory(improvedFile0, "1", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/1
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.699926769623198
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DirectoryScanner.matchPatternStart("EyFty+~+T,C", "EyFty+~+T,C");
      ImprovedFile improvedFile0 = new ImprovedFile("/C(ate");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "EyFty+~+T,C";
      improvedFile0.deleteAll();
      Vector<ByteArrayInputStream> vector0 = new Vector<ByteArrayInputStream>();
      archiveScanner0.filesNotIncluded = vector0;
      stringArray0[2] = "/C(ate";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<InputStream> vector1 = new Vector<InputStream>();
      archiveScanner0.dirsExcluded = vector1;
      vector0.clone();
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.includes = stringArray0;
      vector1.removeAllElements();
      archiveScanner0.isArchive(improvedFile0);
      archiveScanner0.processDirectory(improvedFile0, "EyFty+~+T,C", true);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "/C(ate");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("CgQ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "CgQ";
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      byte[] byteArray1 = new byte[8];
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector0;
      byteArrayInputStream1.read(byteArray1);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream2.read(byteArray1);
      stringArray0[5] = "CgQ";
      Vector<InputStream> vector1 = new Vector<InputStream>();
      byteArrayInputStream2.read();
      byteArrayInputStream1.reset();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream2);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream1.read();
      byteArrayInputStream3.skip(8);
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream4.skip((byte)0);
      byteArrayInputStream3.close();
      byteArrayInputStream3.close();
      ByteArrayInputStream byteArrayInputStream5 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream3.skip((-1));
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.includes = stringArray0;
      archiveScanner0.processArchive(improvedFile0, "CgQ");
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "CgQ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/home/ubuntu/termite/projects/78_caloriecount/.OdWA/.OdWA0.OdWA");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ImprovedFile improvedFile0 = new ImprovedFile(".OdWA");
      MockFile mockFile0 = new MockFile(".OdWA", ".OdWA");
      mockFile0.getAbsolutePath();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/home/ubuntu/termite/projects/78_caloriecount/.OdWA/.OdWA");
      String[] stringArray0 = new String[9];
      MockFile mockFile1 = new MockFile(".OdWA");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/home/ubuntu/termite/projects/78_caloriecount/.OWA");
      Vector<ByteArrayInputStream> vector0 = new Vector<ByteArrayInputStream>();
      archiveScanner0.filesIncluded = vector0;
      FileSystemHandling.createFolder(evoSuiteFile1);
      stringArray0[0] = ".OdWA";
      stringArray0[2] = "/home/ubuntu/termite/projects/78_caloriecount/.OdWA/.OdWA";
      MockFile.createTempFile("/home/ubuntu/termite/projects/78_caloriecount/.OdWA/.OdWA", ".OdWA");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      String[] stringArray1 = new String[2];
      stringArray1[0] = ".OdWA";
      stringArray1[1] = "!";
      archiveScanner0.setExcludes(stringArray1);
      stringArray0[2] = ".OdWA";
      stringArray0[5] = ".OdWA";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, stringArray0[6]);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/tmp/home/ubuntu/termite/projects/78_caloriecount/.OWA");
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile("/tmp/home/ubuntu/termite/projects/78_caloriecount/.OdWA/.OdWA0.OdWA");
      FileSystemHandling.setPermissions(evoSuiteFile3, true, true, true);
      FileSystemHandling.createFolder(evoSuiteFile2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".OdWA");
      stringArray0[6] = ".OdWA";
      MockFile mockFile2 = new MockFile(stringArray0[1], ".OdWA");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".OdWA");
      FileSystemHandling.createFolder(evoSuiteFile1);
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.includes = stringArray0;
      FileSystemHandling.createFolder(evoSuiteFile1);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(mockFile0, ".OdWA", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7862097648384696
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(",rYhI|H");
      ImprovedFile improvedFile1 = ImprovedFile.createTempImprovedFile(",rYhI|H", ",rYhI|H", improvedFile0);
      DirectoryScanner.match(",rYhI|H", ",rYhI|H");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",rYhI|H";
      stringArray0[1] = ",rYhI|H";
      stringArray0[2] = ",rYhI|H";
      stringArray0[3] = ",rYhI|H";
      stringArray0[4] = ",rYhI|H";
      stringArray0[5] = ",rYhI|H";
      stringArray0[6] = ",rYhI|H";
      stringArray0[7] = ",rYhI|H";
      stringArray0[8] = ",rYhI|H";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.scandir(improvedFile0, ",rYhI|H", true);
      assertEquals(0L, improvedFile0.getUsableSpace());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("0/'A@0oJ7bt:0O/");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "]Sg`*hthS~C7{;9hr";
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      vector0.add(object0);
      archiveScanner0.haveSlowResults = true;
      archiveScanner0.dirsNotIncluded = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      stringArray0[1] = "0/'A@0oJ7bt:0O/";
      stringArray0[2] = "]Sg`*hthS~C7{;9hr";
      stringArray0[3] = "]Sg`*hthS~C7{;9hr";
      stringArray0[4] = "]Sg`*hthS~C7{;9hr";
      archiveScanner0.addDefaultExcludes();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      vector0.add(object1);
      vector0.forEach(consumer0);
      stringArray0[5] = "]Sg`*hthS~C7{;9hr";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      vector0.sort(comparator0);
      Object object2 = new Object();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("0/'A@0oJ7bt:0O");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      vector0.removeElement(object2);
      stringArray0[6] = "0/'A@0oJ7bt:0O/";
      stringArray0[7] = "0/'A@0oJ7bt:0O/";
      archiveScanner0.includes = stringArray0;
      Object object3 = new Object();
      vector0.add(object3);
      try { 
        archiveScanner0.processDirectory(improvedFile0, "Error trying to ascertain the existence of entry, ", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/0/'A@0oJ7bt:0O
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DirectoryScanner.match("/C(eate", "/C(eate");
      ImprovedFile improvedFile0 = new ImprovedFile("/C(eate");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "fZOMK-lJ.";
      Vector<ByteArrayInputStream> vector0 = new Vector<ByteArrayInputStream>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      archiveScanner0.filesNotIncluded = vector0;
      stringArray0[0] = "fZOMK-lJ.";
      stringArray0[5] = "/C(eate";
      Vector<InputStream> vector1 = new Vector<InputStream>();
      archiveScanner0.dirsExcluded = vector1;
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-2);
      byteArray0[3] = (byte)8;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(1L);
      vector0.add(byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.skip((byte)4);
      vector0.add(byteArrayInputStream1);
      Vector<InputStream> vector2 = new Vector<InputStream>();
      archiveScanner0.filesExcluded = vector2;
      archiveScanner0.excludes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      DirectoryScanner.match("/C(eate", "fZOMK-lJ.");
      archiveScanner0.includes = stringArray0;
      vector1.removeAllElements();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "fZOMK-lJ.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("n8w?kNv<_je~KapQ`");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesIncluded = vector0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "n8w?kNv<_je~KapQ`";
      vector0.addAll(0, (Collection<?>) archiveScanner0.filesIncluded);
      stringArray0[1] = "n8w?kNv<_je~KapQ`";
      stringArray0[3] = "n8w?kNv<_je~KapQ`";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.addDefaultExcludes();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      archiveScanner0.processFile("n8w?kNv<_je~KapQ`");
      try { 
        archiveScanner0.processArchive(improvedFile0, "n8w?kNv<_je~KapQ`");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, n8w?kNv<_je~KapQ`
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5663673941808118
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("0/'A@AoJ7bt:0O/");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "]Sg`*hthS~C7{;9hr";
      Vector<Object> vector0 = new Vector<Object>(1, 1);
      Object object0 = new Object();
      vector0.add(object0);
      improvedFile0.createTempDir(".war", "0/'A@AoJ7bt:0O/");
      archiveScanner0.dirsNotIncluded = vector0;
      vector0.clone();
      stringArray0[1] = "0/'A@AoJ7bt:0O/";
      stringArray0[2] = "]Sg`*hthS~C7{;9hr";
      stringArray0[3] = "]Sg`*hthS~C7{;9hr";
      stringArray0[4] = "]Sg`*hthS~C7{;9hr";
      archiveScanner0.addDefaultExcludes();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      vector0.add(object1);
      vector0.forEach(consumer0);
      stringArray0[5] = "]Sg`*hthS~C7{;9hr";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      vector0.sort(comparator0);
      vector0.add((Object) "0/'A@AoJ7bt:0O/");
      Object object2 = new Object();
      vector0.removeElement(object2);
      stringArray0[6] = "0/'A@AoJ7bt:0O/";
      stringArray0[7] = "0/'A@AoJ7bt:0O/";
      archiveScanner0.includes = stringArray0;
      Object object3 = new Object();
      vector0.add(object3);
      archiveScanner0.processDirectory(improvedFile0, "Error trying to ascertain the existence of entry, ", false);
      archiveScanner0.scandir(improvedFile0, ".ZIP", false);
      System.setCurrentTimeMillis((-1438L));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("/C(eate");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<ByteArrayInputStream> vector0 = new Vector<ByteArrayInputStream>();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[0] = (byte) (-35);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      archiveScanner0.filesNotIncluded = vector0;
      Vector<InputStream> vector1 = new Vector<InputStream>();
      byte[] byteArray1 = new byte[14];
      byteArrayInputStream0.read();
      byteArray1[0] = (byte) (-15);
      byteArray1[1] = (byte)8;
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      vector1.add((InputStream) dataInputStream0);
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)8;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream1.skip(1010L);
      vector0.add((ByteArrayInputStream) null);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream2.skip((byte)4);
      byteArrayInputStream1.close();
      byteArrayInputStream1.close();
      vector0.add(byteArrayInputStream1);
      archiveScanner0.excludes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      archiveScanner0.includes = archiveScanner0.excludes;
      vector1.removeAllElements();
      archiveScanner0.processArchive(improvedFile0, "/C(eate");
      assertEquals(0L, improvedFile0.getTotalSpace());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("/C(eate");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/C(eate";
      Vector<ByteArrayInputStream> vector0 = new Vector<ByteArrayInputStream>();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      vector0.add(byteArrayInputStream0);
      byteArray0[0] = (byte)12;
      byteArray0[0] = (byte) (-35);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      archiveScanner0.filesNotIncluded = vector0;
      stringArray0[5] = "/C(eate";
      Vector<InputStream> vector1 = new Vector<InputStream>();
      byte[] byteArray1 = new byte[14];
      byteArrayInputStream1.read();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream1);
      vector1.add((InputStream) dataInputStream0);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream2.skip(1010L);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream3.skip((byte)0);
      vector1.add((InputStream) byteArrayInputStream0);
      byteArrayInputStream3.reset();
      byteArrayInputStream2.close();
      byteArrayInputStream2.close();
      vector0.add(byteArrayInputStream2);
      archiveScanner0.excludes = stringArray0;
      vector1.add((InputStream) byteArrayInputStream0);
      archiveScanner0.includes = archiveScanner0.excludes;
      vector1.removeAllElements();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "/C(eate");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("CqQ?e");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "CqQ?e";
      Vector<ByteArrayInputStream> vector0 = new Vector<ByteArrayInputStream>();
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      vector0.add(byteArrayInputStream0);
      byte[] byteArray1 = new byte[9];
      byteArrayInputStream0.read(byteArray1);
      vector0.add((ByteArrayInputStream) null);
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.dirsExcluded = vector1;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream1.read(byteArray1);
      stringArray0[5] = "CqQ?e";
      Vector<InputStream> vector2 = new Vector<InputStream>();
      byteArrayInputStream1.read();
      byteArrayInputStream0.read();
      byteArrayInputStream0.reset();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream1);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray1);
      vector0.add((ByteArrayInputStream) null);
      byteArrayInputStream2.skip((-1));
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream3.mark((-1597));
      byteArrayInputStream3.skip((byte)0);
      byteArrayInputStream2.close();
      byteArrayInputStream2.close();
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream2.skip((-1));
      vector0.add(byteArrayInputStream4);
      vector0.add(byteArrayInputStream2);
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "CqQ?e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Create/.WA");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ImprovedFile improvedFile0 = new ImprovedFile("/Create");
      MockFile mockFile0 = new MockFile(improvedFile0, ".OWA");
      mockFile0.getAbsolutePath();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[9];
      mockFile0.getAbsoluteFile();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/Create/.WA");
      FileSystemHandling.createFolder(evoSuiteFile1);
      stringArray0[0] = "/Create";
      stringArray0[2] = "/Create";
      mockFile0.setWritable(true);
      stringArray0[6] = ".OWA";
      mockFile0.setExecutable(true);
      improvedFile0.toPath();
      improvedFile0.setReadable(false, false);
      stringArray0[5] = "/Create";
      mockFile0.toPath();
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.filesExcluded = vector0;
      mockFile0.createNewFile();
      mockFile0.setExecutable(true);
      MockFile mockFile1 = new MockFile(".OWA");
      FileSystemHandling.createFolder(evoSuiteFile0);
      mockFile0.setWritable(false, false);
      stringArray0[6] = ".OWA";
      MockFile mockFile2 = new MockFile(stringArray0[1], "/Create");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".OWA");
      FileSystemHandling.createFolder(evoSuiteFile1);
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.includes = stringArray0;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/Create/.OWA");
      DirectoryScanner.match("/Create", "/Create");
      archiveScanner0.processFile("/Create");
      assertEquals(1, ArchiveScanner.DIRECTORY);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("/,&-zSHv-H(u");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "/,&-zSHv-H(u";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      stringArray0[1] = "/,&-zSHv-H(u";
      Object object0 = new Object();
      vector0.add((Object) vector1);
      vector0.add(object0);
      vector1.remove(object0);
      archiveScanner0.includes = stringArray0;
      stringArray0[2] = "/,&-zSHv-H(u";
      Object object1 = new Object();
      Object object2 = new Object();
      vector1.add((Object) null);
      vector0.add(object2);
      vector0.add(object1);
      stringArray0[3] = "/,&-zSHv-H(u";
      stringArray0[4] = "/,&-zSHv-H(u";
      Object object3 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      vector0.sort(comparator0);
      stringArray0[5] = "/,&-zSHv-H(u";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.add((Object) "/,&-zSHv-H(u");
      vector1.sort((Comparator<? super Object>) null);
      Object object4 = new Object();
      vector0.removeElement(object4);
      vector0.add((Object) "/,&-zSHv-H(u");
      stringArray0[6] = "/,&-zSHv-H(u";
      stringArray0[7] = "/,&-zSHv-H(u";
      archiveScanner0.processDirectory(improvedFile0, "DHk *J", true);
      assertEquals(0L, improvedFile0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis((-2L));
      ImprovedFile improvedFile0 = new ImprovedFile("=u/z6cTf");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "tl||";
      Vector<Object> vector0 = new Vector<Object>(1, 1);
      archiveScanner0.dirsNotIncluded = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      stringArray0[1] = "=u/z6cTf";
      archiveScanner0.includes = stringArray0;
      stringArray0[2] = "tl||";
      stringArray0[3] = "tl||";
      stringArray0[4] = "tl||";
      archiveScanner0.addDefaultExcludes();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      vector0.forEach(consumer0);
      vector0.add((Object) "tl||");
      stringArray0[5] = "tl||";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      vector0.add(1, (Object) "tl||");
      Object object1 = new Object();
      vector0.removeElement(object1);
      stringArray0[6] = "=u/z6cTf";
      stringArray0[7] = "=u/z6cTf";
      System.setCurrentTimeMillis((-329L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-325L));
      System.setCurrentTimeMillis(2);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "=u/z6cTf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      ImprovedFile improvedFile0 = new ImprovedFile("0/_A@AoJ7b0O/");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0/_A@AoJ7b0O/";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      stringArray0[1] = "0/_A@AoJ7b0O/";
      stringArray0[2] = "0/_A@AoJ7b0O/";
      vector0.add((Object) "0/_A@AoJ7b0O/");
      stringArray0[3] = "0/_A@AoJ7b0O/";
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      function1.compose((Function<? super String, ?>) unaryOperator0);
      vector0.replaceAll(unaryOperator0);
      function1.andThen((Function<? super Integer, ?>) unaryOperator0);
      stringArray0[4] = "0/_A@AoJ7b0O/";
      archiveScanner0.addDefaultExcludes();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      Object object0 = new Object();
      vector0.addElement(object0);
      stringArray0[0] = "0/_A@AoJ7b0O/";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      vector0.sort(comparator0);
      vector0.add((Object) function1);
      stringArray0[6] = "0/_A@AoJ7b0O/";
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("0/_A@AoJ7b0O/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      ImprovedFile improvedFile0 = new ImprovedFile("0/_A@AoJ7b0O/");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>(1, 1);
      archiveScanner0.dirsNotIncluded = vector0;
      vector0.clone();
      archiveScanner0.addDefaultExcludes();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("0/_A@AoJ7b0O/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("/,&-zSHv-H(u");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "/,&-zSHv-H(u";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      stringArray0[1] = "/,&-zSHv-H(u";
      Object object0 = new Object();
      vector0.add(object0);
      archiveScanner0.includes = stringArray0;
      stringArray0[2] = "/,&-zSHv-H(u";
      Object object1 = new Object();
      Object object2 = new Object();
      vector0.add((Object) vector1);
      vector0.add(object2);
      vector0.add(object1);
      stringArray0[3] = "/,&-zSHv-H(u";
      stringArray0[4] = "/,&-zSHv-H(u";
      Object object3 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      vector0.sort(comparator0);
      stringArray0[5] = "/,&-zSHv-H(u";
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator1).compare(any() , any());
      vector0.sort(comparator1);
      Object object4 = new Object();
      vector0.removeElement(object4);
      stringArray0[6] = "/,&-zSHv-H(u";
      stringArray0[7] = "/,&-zSHv-H(u";
      archiveScanner0.processDirectory(improvedFile0, "trYhI|H.jNr", true);
      System.setCurrentTimeMillis((-305L));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("1");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      String[] stringArray0 = new String[35];
      stringArray0[0] = "1";
      stringArray0[2] = "1";
      vector0.clear();
      stringArray0[3] = "1";
      Object object0 = new Object();
      vector0.add(object0);
      archiveScanner0.includes = stringArray0;
      archiveScanner0.addDefaultExcludes();
      Object object1 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      Object object2 = new Object();
      vector0.add((Object) consumer0);
      Object object3 = new Object();
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.dirsIncluded = vector1;
      Object object4 = new Object();
      vector0.spliterator();
      vector0.add((Object) null);
      Object object5 = new Object();
      try { 
        archiveScanner0.processDirectory(improvedFile0, "1", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/1
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("1");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      String[] stringArray0 = new String[23];
      stringArray0[0] = "1";
      stringArray0[1] = "1";
      stringArray0[2] = "1";
      vector0.clear();
      stringArray0[3] = "1";
      Object object0 = new Object();
      vector0.add(object0);
      archiveScanner0.includes = stringArray0;
      archiveScanner0.addDefaultExcludes();
      Object object1 = new Object();
      vector0.add((Object) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      vector0.sort(comparator0);
      Object object2 = new Object();
      vector0.add((Object) consumer0);
      Object object3 = new Object();
      Object object4 = new Object();
      vector0.add((Object) null);
      Object object5 = new Object();
      vector0.add(object5);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "1", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7862097648384696
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(",rYhI|H");
      ImprovedFile improvedFile1 = ImprovedFile.createTempImprovedFile(",rYhI|H", ",rYhI|H", improvedFile0);
      DirectoryScanner.matchPath(",rYhI|H", ",rYhI|H");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",rYhI|H";
      stringArray0[1] = ",rYhI|H";
      stringArray0[2] = ",rYhI|H";
      stringArray0[3] = ",rYhI|H";
      stringArray0[4] = ",rYhI|H";
      stringArray0[5] = ",rYhI|H";
      stringArray0[6] = ",rYhI|H";
      stringArray0[7] = ",rYhI|H";
      stringArray0[8] = ",rYhI|H";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.scandir(improvedFile0, ",rYhI|H", true);
      assertEquals(",rYhI|H", improvedFile0.getName());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/home/ubuntu/termite/projects/78_caloriecount/.OdWA/.OdWA0.OdWA");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/home/ubuntu/termite/projects/78_caloriecount/.OWA");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)6;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ImprovedFile improvedFile0 = new ImprovedFile(".OdWA");
      MockFile mockFile0 = new MockFile(".OdWA", ".OdWA");
      mockFile0.getAbsolutePath();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      FileSystemHandling.createFolder(evoSuiteFile1);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/tmp/home/ubuntu/termite/projects/78_caloriecount/.OWA");
      FileSystemHandling.createFolder(evoSuiteFile2);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/home/ubuntu/termite/projects/78_caloriecount/.OdWA/.OdWA");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile("/tmp/home/ubuntu/termite/projects/78_caloriecount/.OdWA/.OdWA0.OdWA");
      EvoSuiteFile evoSuiteFile4 = new EvoSuiteFile("/tmp/home/ubuntu/termite/projects/78_caloriecount/.OdWA/.OdWA0.OdWA");
      FileSystemHandling.setPermissions(evoSuiteFile4, false, false, false);
      FileSystemHandling.createFolder(evoSuiteFile3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/home/ubuntu/termite/projects/78_caloriecount/.OdWA/.OdWA");
      MockFile mockFile1 = new MockFile(".OdWA", ".OdWA");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".OdWA");
      FileSystemHandling.createFolder(evoSuiteFile2);
      archiveScanner0.excludes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      FileSystemHandling.createFolder(evoSuiteFile2);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(mockFile0, ".OdWA", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8150593372879413
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(",rYhIE|H");
      ImprovedFile improvedFile1 = ImprovedFile.createTempImprovedFile(",rYhIE|H", ",rYhIE|H", improvedFile0);
      DirectoryScanner.match(",rYhIE|H", ",rYhIE|H");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",rYhIE|H";
      stringArray0[1] = ",rYhIE|H";
      stringArray0[2] = ",rYhIE|H";
      improvedFile1.getAbsoluteFile();
      stringArray0[3] = ",rYhIE|H";
      stringArray0[4] = ",rYhIE|H";
      stringArray0[5] = ",rYhIE|H";
      stringArray0[6] = ",rYhIE|H";
      stringArray0[7] = ",rYhIE|H";
      stringArray0[8] = ",rYhIE|H";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.scandir(improvedFile0, ",rYhIE|H", true);
      improvedFile0.getCanonicalPath();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      dataInputStream0.markSupported();
      DataInputStream dataInputStream1 = null;
      improvedFile1.toPath();
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream0);
      try { 
        dataInputStream2.readLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("/C(e$rQ?e");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/C(e$rQ?e";
      Vector<ByteArrayInputStream> vector0 = new Vector<ByteArrayInputStream>();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[2] = (byte)27;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)27, (byte)100);
      vector0.add(byteArrayInputStream0);
      byte[] byteArray1 = new byte[1];
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream1.read(byteArray1);
      vector0.add((ByteArrayInputStream) null);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream2.read(byteArray1);
      stringArray0[5] = "/C(e$rQ?e";
      Vector<InputStream> vector1 = new Vector<InputStream>();
      byte[] byteArray2 = new byte[8];
      byteArrayInputStream2.read();
      byteArrayInputStream1.read();
      byteArrayInputStream1.reset();
      byteArray2[1] = (byte)0;
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream2);
      byteArray2[3] = (byte) (-7);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray1);
      vector0.add((ByteArrayInputStream) null);
      byteArrayInputStream3.skip(1);
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray2);
      byteArrayInputStream4.skip((byte) (-7));
      byteArrayInputStream3.close();
      byteArrayInputStream3.close();
      ByteArrayInputStream byteArrayInputStream5 = new ByteArrayInputStream(byteArray2);
      byteArrayInputStream3.skip((-1));
      vector0.add(byteArrayInputStream5);
      vector0.add(byteArrayInputStream3);
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "/C(e$rQ?e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = ",rYhI|H";
      ImprovedFile improvedFile0 = new ImprovedFile(",rYhI|H");
      ImprovedFile improvedFile1 = ImprovedFile.createTempImprovedFile(",rYhI|H", ",rYhI|H", improvedFile0);
      DirectoryScanner.match(",rYhI|H", ",rYhI|H");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, ",rYhI|H", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8548720307766426
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "P-rP13;7kIf";
      ImprovedFile improvedFile0 = new ImprovedFile("P-rP13;7kIf");
      ImprovedFile improvedFile1 = ImprovedFile.createTempImprovedFile("P-rP13;7kIf", "P-rP13;7kIf", improvedFile0);
      DirectoryScanner.match("P-rP13;7kIf", "P-rP13;7kIf");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "P-rP13;7kIf", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Create/.WA");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ImprovedFile improvedFile0 = new ImprovedFile("/Create");
      MockFile mockFile0 = new MockFile(improvedFile0, ".OWA");
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile("/Create", "/Create/.OWA");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[9];
      mockFile0.getAbsoluteFile();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/Create/.WA");
      FileSystemHandling.createFolder(evoSuiteFile1);
      stringArray0[0] = "/Create";
      stringArray0[2] = "/Create";
      mockFile1.setWritable(true);
      stringArray0[6] = ".OWA";
      mockFile0.setExecutable(true);
      mockFile1.toPath();
      improvedFile0.setReadable(false, false);
      stringArray0[5] = "/Create";
      mockFile0.toPath();
      mockFile0.createNewFile();
      mockFile1.setExecutable(true);
      mockFile1.getCanonicalFile();
      FileSystemHandling.createFolder(evoSuiteFile0);
      mockFile1.setWritable(false, false);
      stringArray0[6] = ".OWA";
      MockFile mockFile2 = new MockFile(stringArray0[1], "/Create");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".OWA");
      FileSystemHandling.createFolder(evoSuiteFile1);
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.includes = stringArray0;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/Create/.OWA");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("/Create");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("dir0");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("dir0/dir0");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) improvedFile0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate2.or(predicate3);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate6);
      Predicate<Object> predicate8 = predicate0.or(predicate0);
      Predicate<Object> predicate9 = predicate2.negate();
      Predicate<Object> predicate10 = predicate1.negate();
      Predicate<Object> predicate11 = predicate4.or(predicate0);
      Predicate<Object> predicate12 = predicate0.negate();
      Predicate<Object> predicate13 = predicate8.or(predicate5);
      Predicate<Object> predicate14 = predicate8.negate();
      Predicate<Object> predicate15 = predicate13.negate();
      Predicate<Object> predicate16 = predicate3.and(predicate14);
      predicate10.test(predicate16);
      predicate1.or(predicate13);
      Predicate<Object> predicate17 = predicate10.negate();
      Predicate<Object> predicate18 = predicate11.negate();
      predicate17.and(predicate18);
      predicate7.negate();
      Predicate<Object> predicate19 = predicate17.negate();
      predicate9.and(predicate19);
      Predicate<Object> predicate20 = predicate19.negate();
      Predicate<Object> predicate21 = predicate20.and(predicate3);
      predicate1.or(predicate21);
      Predicate<Object> predicate22 = predicate16.or(predicate15);
      predicate10.and(predicate22);
      Predicate<Object> predicate23 = predicate11.or(predicate10);
      predicate23.or(predicate12);
      predicate23.and(predicate0);
      predicate23.or(predicate4);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "G4sPR?", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(Integer.MIN_VALUE);
      Integer integer2 = new Integer(Integer.MIN_VALUE);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer3 = new Integer(1023);
      Integer integer4 = new Integer(1023);
      Integer integer5 = new Integer(Integer.MIN_VALUE);
      linkedList1.add(integer5);
      Integer integer6 = new Integer(Integer.MIN_VALUE);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer7 = new Integer(Integer.MIN_VALUE);
      linkedList1.removeLastOccurrence(integer2);
      linkedList2.add((Integer) null);
      Integer integer8 = new Integer(7);
      linkedList0.add(integer8);
      Integer integer9 = new Integer(Integer.MIN_VALUE);
      linkedList0.add((Integer) null);
      linkedList1.add(integer7);
      linkedList2.add(integer1);
      linkedList0.add(integer3);
      Integer integer10 = new Integer(Integer.MIN_VALUE);
      linkedList0.add(integer10);
      Integer integer11 = new Integer(1023);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Integer integer12 = new Integer(1023);
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer13 = new Integer(Integer.MIN_VALUE);
      vector0.add(integer0);
      Integer integer14 = new Integer(1023);
      Integer integer15 = new Integer(Integer.MIN_VALUE);
      vector0.add(integer1);
      ImprovedFile improvedFile0 = new ImprovedFile(",&-zSHv-H(u.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("dir0", "dir0");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("dir0/dir0");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) improvedFile0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate2);
      Predicate<Object> predicate6 = predicate0.or(predicate0);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate3.or(predicate0);
      Predicate<Object> predicate10 = predicate0.negate();
      Predicate<Object> predicate11 = predicate6.or(predicate4);
      Predicate<Object> predicate12 = predicate6.negate();
      Predicate<Object> predicate13 = predicate2.and(predicate12);
      predicate8.test(predicate13);
      Predicate<Object> predicate14 = predicate4.negate();
      Predicate<Object> predicate15 = predicate9.negate();
      predicate14.and(predicate15);
      predicate5.negate();
      Predicate<Object> predicate16 = predicate14.negate();
      Predicate<Object> predicate17 = predicate7.and(predicate16);
      predicate17.or(predicate13);
      predicate14.test(predicate17);
      predicate2.test(predicate6);
      Predicate<Object> predicate18 = predicate12.negate();
      Predicate<Object> predicate19 = predicate18.and(predicate1);
      predicate1.or(predicate19);
      Predicate<Object> predicate20 = predicate13.or(predicate3);
      predicate8.and(predicate20);
      Predicate<Object> predicate21 = predicate9.or(predicate8);
      Predicate<Object> predicate22 = predicate21.or(predicate10);
      predicate21.or(predicate11);
      predicate21.and(predicate0);
      predicate22.or(predicate8);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      Integer integer1 = new Integer(Integer.MIN_VALUE);
      Integer integer2 = new Integer(2147483645);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer3 = new Integer(Integer.MIN_VALUE);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      Integer integer4 = new Integer((-3499));
      Integer integer5 = new Integer(Integer.MIN_VALUE);
      Integer integer6 = new Integer((-3499));
      linkedList1.add(integer0);
      Vector<Integer> vector1 = new Vector<Integer>(linkedList1);
      Integer integer7 = new Integer(2147483645);
      Integer integer8 = new Integer(2147483645);
      Vector<Integer> vector2 = new Vector<Integer>(vector1);
      Integer integer9 = new Integer(Integer.MIN_VALUE);
      Integer integer10 = new Integer(870);
      linkedList1.removeFirst();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      vector2.add(integer4);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Vector<Integer> vector3 = new Vector<Integer>(linkedList2);
      linkedList1.retainAll(vector1);
      Integer integer11 = new Integer(3415);
      Vector<Integer> vector4 = new Vector<Integer>(vector2);
      Integer integer12 = new Integer(3415);
      ImprovedFile improvedFile0 = new ImprovedFile("8)TpkfguC_c:.jar", "sPzYw?4N.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(2, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      Integer integer4 = new Integer(Integer.MAX_VALUE);
      Integer integer5 = new Integer(Integer.MAX_VALUE);
      linkedList0.add(integer0);
      Integer integer6 = new Integer(Integer.MAX_VALUE);
      Integer integer7 = new Integer(Integer.MAX_VALUE);
      Integer integer8 = new Integer(Integer.MAX_VALUE);
      Integer integer9 = new Integer(Integer.MAX_VALUE);
      Integer integer10 = new Integer((-403912355));
      linkedList1.add(integer10);
      linkedList1.add(integer1);
      linkedList0.add(integer1);
      linkedList0.add(integer5);
      Integer integer11 = new Integer(Integer.MAX_VALUE);
      Integer integer12 = new Integer(Integer.MAX_VALUE);
      linkedList1.add(integer12);
      Integer integer13 = new Integer(Integer.MAX_VALUE);
      Integer integer14 = new Integer((-247));
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer15 = new Integer((-247));
      Integer integer16 = new Integer(Integer.MAX_VALUE);
      vector0.addElement(integer16);
      vector0.add(integer0);
      Integer integer17 = new Integer(Integer.MAX_VALUE);
      vector0.add(integer16);
      Integer integer18 = new Integer(Integer.MAX_VALUE);
      vector0.add(integer1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.isArchive((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(Integer.MIN_VALUE);
      Integer integer2 = new Integer(Integer.MIN_VALUE);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer3 = new Integer(Integer.MIN_VALUE);
      Integer integer4 = new Integer(Integer.MIN_VALUE);
      Integer integer5 = new Integer((-7));
      linkedList0.add(integer0);
      Integer integer6 = new Integer(Integer.MIN_VALUE);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer7 = new Integer(Integer.MIN_VALUE);
      Integer integer8 = new Integer((-1448955304));
      linkedList0.add(integer8);
      linkedList0.add(integer4);
      linkedList2.add(integer1);
      linkedList0.add(integer5);
      Integer integer9 = new Integer((-1448955304));
      linkedList0.add(integer9);
      Integer integer10 = new Integer((-7));
      Integer integer11 = new Integer((-7));
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer12 = new Integer(Integer.MIN_VALUE);
      Integer integer13 = new Integer((-1448955304));
      vector0.addElement(integer13);
      vector0.add(integer0);
      Integer integer14 = new Integer(Integer.MIN_VALUE);
      Integer integer15 = new Integer(Integer.MIN_VALUE);
      vector1.add(integer5);
      Integer integer16 = new Integer((-1448955304));
      vector0.add(integer1);
      ImprovedFile improvedFile0 = new ImprovedFile("0:wng.properties");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.toFileType((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(Integer.MIN_VALUE);
      Integer integer2 = new Integer(1288);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer3 = new Integer(1288);
      Integer integer4 = new Integer((-857));
      Integer integer5 = new Integer((-1));
      linkedList0.add(integer0);
      Integer integer6 = new Integer(Integer.MIN_VALUE);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.add(integer1);
      Integer integer7 = new Integer((-1099173672));
      linkedList0.add(integer7);
      Integer integer8 = new Integer((-1));
      Integer integer9 = new Integer((-1));
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Integer integer10 = new Integer(3);
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer11 = new Integer((-10384350));
      Integer integer12 = new Integer((-10384350));
      Integer integer13 = new Integer(2731);
      vector0.add(integer1);
      ImprovedFile improvedFile0 = new ImprovedFile("wr");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(Integer.MIN_VALUE);
      Integer integer2 = new Integer(Integer.MIN_VALUE);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer3 = new Integer(Integer.MIN_VALUE);
      Integer integer4 = new Integer(1332);
      Integer integer5 = new Integer(1023);
      linkedList0.add(integer0);
      Integer integer6 = new Integer(Integer.MIN_VALUE);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer7 = new Integer(Integer.MIN_VALUE);
      Integer integer8 = new Integer((-1448955298));
      linkedList0.add(integer8);
      linkedList2.add(integer7);
      linkedList2.add(integer1);
      linkedList0.add(integer5);
      Integer integer9 = new Integer((-1099173672));
      linkedList0.add(integer9);
      Integer integer10 = new Integer(1023);
      Integer integer11 = new Integer(1023);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Integer integer12 = new Integer(3);
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.clone();
      Integer integer13 = new Integer((-10384350));
      Integer integer14 = new Integer((-10384350));
      Integer integer15 = new Integer(2731);
      vector0.add(integer1);
      ImprovedFile improvedFile0 = new ImprovedFile("wr");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(Integer.MIN_VALUE);
      Integer integer2 = new Integer(Integer.MIN_VALUE);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer3 = new Integer(Integer.MIN_VALUE);
      Integer integer4 = new Integer(Integer.MIN_VALUE);
      Integer integer5 = new Integer((-18));
      linkedList0.add(integer0);
      Integer integer6 = new Integer(Integer.MIN_VALUE);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer7 = new Integer((-18));
      Integer integer8 = new Integer((-1448955304));
      linkedList0.add(integer4);
      Integer integer9 = new Integer(Integer.MIN_VALUE);
      linkedList0.add(integer9);
      linkedList2.add(integer1);
      linkedList0.add(integer5);
      Integer integer10 = new Integer((-1448955304));
      Integer integer11 = new Integer((-1448955304));
      linkedList1.add(integer11);
      Integer integer12 = new Integer((-18));
      Integer integer13 = new Integer((-247));
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer14 = new Integer(Integer.MIN_VALUE);
      Integer integer15 = new Integer((-1448955304));
      vector0.addElement(integer15);
      vector0.add(integer0);
      Integer integer16 = new Integer(Integer.MIN_VALUE);
      Integer integer17 = new Integer(Integer.MIN_VALUE);
      vector0.add(integer3);
      Integer integer18 = new Integer((-1448955304));
      vector0.add(integer1);
      ImprovedFile improvedFile0 = new ImprovedFile("0:wLg.Bprop3erties");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("dir0", "dir0");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) improvedFile0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate0.or(predicate1);
      Predicate<Object> predicate9 = predicate6.negate();
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate6.or(predicate4);
      Predicate<Object> predicate12 = predicate11.negate();
      Predicate<Object> predicate13 = predicate7.negate();
      Predicate<Object> predicate14 = predicate8.or(predicate13);
      Predicate<Object> predicate15 = predicate11.negate();
      Predicate<Object> predicate16 = predicate14.negate();
      Predicate<Object> predicate17 = predicate5.and(predicate15);
      predicate10.test(predicate17);
      Predicate<Object> predicate18 = predicate10.negate();
      Predicate<Object> predicate19 = predicate18.negate();
      predicate9.and(predicate19);
      Predicate<Object> predicate20 = Predicate.isEqual((Object) predicate12);
      Predicate<Object> predicate21 = predicate20.and(predicate5);
      predicate2.or(predicate21);
      predicate17.or(predicate16);
      predicate10.and(predicate17);
      Predicate<Object> predicate22 = predicate11.or(predicate10);
      predicate22.or(predicate12);
      predicate22.and(predicate0);
      predicate22.or(predicate6);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scandir(improvedFile0, "Qg]QtB>2yU1iw-r)Iq", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/dir0/dir0
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("m?&:YN?8", "m?&:YN?8");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) improvedFile0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate0.or(predicate3);
      Predicate<Object> predicate7 = predicate1.and(predicate4);
      predicate5.or(predicate3);
      predicate2.test(predicate7);
      Predicate<Object> predicate8 = predicate4.negate();
      predicate0.and(predicate8);
      predicate3.negate();
      predicate7.and(predicate4);
      Predicate<Object> predicate9 = predicate3.negate();
      Predicate<Object> predicate10 = predicate1.negate();
      Predicate<Object> predicate11 = predicate0.negate();
      Predicate<Object> predicate12 = predicate10.and(predicate11);
      predicate12.or(predicate7);
      predicate11.test(predicate12);
      predicate1.test(predicate1);
      predicate10.negate();
      Predicate<Object> predicate13 = predicate1.and(predicate6);
      Predicate<Object> predicate14 = predicate12.or(predicate1);
      predicate13.or(predicate14);
      predicate8.or(predicate13);
      predicate0.or(predicate5);
      predicate0.or(predicate2);
      predicate4.and(predicate3);
      Predicate<Object> predicate15 = predicate4.or(predicate2);
      Predicate<Object> predicate16 = predicate15.or(predicate5);
      predicate9.negate();
      predicate3.or(predicate6);
      predicate16.or(predicate12);
      predicate15.and(predicate0);
      predicate16.or(predicate3);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "m?&:YN?8");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /home/ubuntu/termite/projects/78_caloriecount/m?&:YN?8/m?&:YN?8
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("m?&:YN?8", "m?&:YN?8");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) improvedFile0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate0.or(predicate3);
      Predicate<Object> predicate8 = predicate1.and(predicate4);
      predicate5.test(predicate8);
      Predicate<Object> predicate9 = predicate2.negate();
      Predicate<Object> predicate10 = predicate5.negate();
      predicate0.and(predicate10);
      predicate3.negate();
      predicate9.and(predicate4);
      Predicate<Object> predicate11 = predicate3.negate();
      Predicate<Object> predicate12 = predicate1.negate();
      Predicate<Object> predicate13 = predicate11.negate();
      Predicate<Object> predicate14 = predicate12.and(predicate13);
      predicate14.or(predicate8);
      predicate13.test(predicate14);
      predicate1.test(predicate1);
      predicate2.negate();
      Predicate<Object> predicate15 = predicate1.and(predicate7);
      Predicate<Object> predicate16 = predicate14.or(predicate1);
      predicate15.or(predicate16);
      predicate10.or(predicate15);
      predicate0.or(predicate6);
      predicate0.or(predicate2);
      predicate4.and(predicate3);
      Predicate<Object> predicate17 = predicate4.or(predicate5);
      Predicate<Object> predicate18 = predicate17.or(predicate6);
      predicate3.or(predicate7);
      predicate18.or(predicate14);
      predicate17.and(predicate0);
      predicate18.or(predicate5);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "m?&:YN?8");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /home/ubuntu/termite/projects/78_caloriecount/m?&:YN?8/m?&:YN?8
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      System.setCurrentTimeMillis((-993L));
      System.setCurrentTimeMillis(277L);
      System.setCurrentTimeMillis(4117L);
      System.setCurrentTimeMillis(4117L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, "`_{B9ic!d>>ky");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(Integer.MIN_VALUE);
      Integer integer2 = new Integer(Integer.MIN_VALUE);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer3 = new Integer(Integer.MIN_VALUE);
      Integer integer4 = new Integer(1332);
      Integer integer5 = new Integer(1023);
      linkedList0.add(integer0);
      Integer integer6 = new Integer(Integer.MIN_VALUE);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer7 = new Integer(Integer.MIN_VALUE);
      Integer integer8 = new Integer((-1448955304));
      linkedList0.add(integer8);
      linkedList2.add(integer7);
      linkedList2.add(integer1);
      linkedList0.add(integer5);
      Integer integer9 = new Integer((-1099173672));
      linkedList0.add(integer9);
      Integer integer10 = new Integer(1023);
      Integer integer11 = new Integer(1023);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Integer integer12 = new Integer((-1109888980));
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.clone();
      Integer integer13 = new Integer((-10384350));
      Integer integer14 = new Integer((-10384350));
      Integer integer15 = new Integer(1023);
      vector0.add(integer1);
      ImprovedFile improvedFile0 = new ImprovedFile("wr", "wr");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("dir0", "dir0");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) improvedFile0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate2.or(predicate3);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate0.or(predicate0);
      Predicate<Object> predicate7 = predicate4.negate();
      Object object0 = new Object();
      Predicate<Object> predicate8 = predicate7.negate();
      predicate5.or(predicate3);
      Predicate<Object> predicate9 = predicate4.or(predicate0);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate<Object> predicate12 = predicate6.or(predicate11);
      Predicate<Object> predicate13 = predicate9.negate();
      predicate12.negate();
      Predicate<Object> predicate14 = predicate3.and(predicate13);
      predicate8.test(predicate14);
      Predicate<Object> predicate15 = predicate8.negate();
      Predicate<Object> predicate16 = predicate0.negate();
      Predicate<Object> predicate17 = predicate15.negate();
      predicate7.and(predicate17);
      Predicate<Object> predicate18 = Predicate.isEqual((Object) predicate10);
      predicate5.test(predicate16);
      predicate17.or(predicate18);
      Predicate<Object> predicate19 = predicate9.or(predicate5);
      predicate17.or(predicate19);
      predicate5.or(predicate8);
      Predicate<Object> predicate20 = predicate16.and(predicate4);
      predicate16.or(predicate6);
      predicate10.and(predicate16);
      predicate20.or(predicate15);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }
}
