/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 09:06:16 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.LinkedList;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.Comment;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.Text;
import org.dom4j.XPath;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMAttribute;
import org.dom4j.dom.DOMComment;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.dom.DOMProcessingInstruction;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultComment;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.FlyweightProcessingInstruction;
import org.dom4j.tree.FlyweightText;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jaxen.SimpleVariableContext;
import org.jaxen.VariableContext;
import org.junit.runner.RunWith;
import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.214734015212756
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      QName qName0 = defaultDocumentFactory0.createQName("//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul", "//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul", "//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      Element element0 = defaultDocumentFactory0.createElement("//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      BeanElement beanElement0 = new BeanElement(qName0, defaultElement0);
      defaultElement0.elementTextTrim("//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      defaultElement0.getPath((Element) beanElement0);
      LinkedList<QName> linkedList0 = new LinkedList<QName>();
      FlyweightProcessingInstruction flyweightProcessingInstruction0 = new FlyweightProcessingInstruction();
      BeanElement beanElement1 = new BeanElement(qName0);
      FlyweightText flyweightText0 = new FlyweightText("+*u#v t/z");
      beanElement1.add((Text) flyweightText0);
      element0.element(qName0);
      DOMComment dOMComment0 = new DOMComment(beanElement1, "//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      DOMElement dOMElement0 = new DOMElement(qName0, 3395);
      beanElement0.remove((Comment) dOMComment0);
      beanElement0.indexOf(element0);
      beanElement0.attributeIterator();
      MockFile mockFile0 = new MockFile("//tmp/3|\"K0/tmp/3|\"@Kq0kYqNO");
      mockFile0.toURL();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/properties/lexical-handler");
      sAXReader_SAXEntityResolver0.resolveEntity("///tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul", "///tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      SAXReader sAXReader0 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/lexical-handler", xMLFilterImpl0);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/lexical-handler' cannot be casted to org.xml.sax.ext.LexicalHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = "3|@K";
      String string1 = "";
      File file0 = MockFile.createTempFile("3|@K", "");
      MockFile mockFile0 = new MockFile(file0, "");
      File file1 = mockFile0.getAbsoluteFile();
      mockFile0.renameTo(file0);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      URL uRL0 = file1.toURL();
      MockURL.getFtpExample();
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /tmp/3|@K0 (No such file or directory) Nested exception: /tmp/3|@K0 (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      XMLFilter xMLFilter0 = sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilter0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      xMLFilterImpl3.unparsedEntityDecl("3|@K", "%wM]vp\"", "\" data: ", (String) null);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilter0);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl2);
      xMLFilterImpl0.skippedEntity("%wM]vp\"");
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl3.skippedEntity("9W1r/=zFU");
      xMLFilterImpl5.getContentHandler();
      xMLFilterImpl3.skippedEntity((String) null);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl();
      xMLFilterImpl8.skippedEntity(".");
      try { 
        sAXReader0.setXMLReaderClassName("\" data: ");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class \" data:  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.4044315430464698
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = "3|@K";
      File file0 = MockFile.createTempFile("3|@K", "3|@K");
      MockFile mockFile0 = new MockFile("3|@K", "3|@K");
      sAXReader0.setEncoding("3|@K");
      mockFile0.renameTo(file0);
      mockFile0.toPath();
      mockFile0.renameTo(file0);
      mockFile0.renameTo(file0);
      file0.renameTo(mockFile0);
      file0.toURL();
      file0.getCanonicalFile();
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"3|@K\". Nested exception: Invalid encoding name \"3|@K\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockURL.URL((URL) null, "http://xml.org/sax/features/namespaces");
      SAXReader sAXReader0 = new SAXReader((String) null);
      MockFile mockFile0 = new MockFile((String) null, "http://xml.org/sax/features/namespaces");
      mockFile0.setReadable(true);
      mockFile0.toURL();
      mockFile0.getCanonicalFile();
      sAXReader0.setEncoding("//tmp/%VKTYx0%VKTYx");
      try { 
        sAXReader0.read("//tmp/3|\"@Hq0 attributes: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //tmp/3|\"@Hq0 attributes:  Nested exception: no protocol: //tmp/3|\"@Hq0 attributes: 
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4491918825840884
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      sAXReader0.installXMLFilter(xMLReader0);
      sAXReader0.getXMLReader();
      sAXReader0.getXMLReader();
      sAXReader0.getXMLReader();
      try { 
        sAXReader0.setXMLReaderClassName("E+QN");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class E+QN not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5035870903352846
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, true);
      sAXReader0.createXMLReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter((XMLReader) null);
      sAXReader0.getXMLReader();
      sAXReader0.getXMLReader();
      try { 
        sAXReader0.setXMLReaderClassName("E+QN");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class E+QN not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, (-447), 40);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream3.skip((-2127L));
      byteArrayInputStream0.close();
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0, (-447), 3020);
      byteArrayInputStream0.reset();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2831);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream2);
      bufferedInputStream1.mark((byte)5);
      bufferedInputStream0.skip((byte)5);
      bufferedInputStream1.available();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      InputSource inputSource0 = new InputSource(bufferedInputStream0);
      defaultHandler2_0.resolveEntity("*jX*69'AN g", "number() takes at most one argument.");
      try { 
        sAXReader0.read("/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:/// : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1994755916055784
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-15);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)56;
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      xMLFilterImpl2.setParent(xMLFilterImpl0);
      xMLFilterImpl2.endPrefixMapping("$#i_N^3L]");
      xMLFilterImpl1.setParent(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl4.getDTDHandler();
      xMLFilterImpl3.processingInstruction((String) null, "//tmp/3|\"@Kq0w V)]/2y}*#Zd");
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.getLocalName((-1283));
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getQName("$#i_N^3L]", "//tmp/3|\"@Kq0w V)]/2y}*#Zd", "$#i_N^3L]");
      QName.get("//tmp/3|\"@Kq0w V)]/2y}*#Zd");
      NamespaceStack namespaceStack1 = new NamespaceStack();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.tree.DefaultDocumentType");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.tree.DefaultDocumentType", ":dPo'");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@20696cc4 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@20696cc4 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6439556568820564
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("]xu%JJO");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.getQName(2877);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributesImpl0);
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributes2Impl2);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Attributes2Impl attributes2Impl4 = new Attributes2Impl();
      attributes2Impl4.getLocalName((-2729));
      NamespaceStack namespaceStack1 = new NamespaceStack();
      defaultElement0.setAttributes((Attributes) attributes2Impl3, namespaceStack0, false);
      QName.get("_AX+8C>");
      NamespaceStack namespaceStack2 = new NamespaceStack();
      namespaceStack2.getDefaultNamespace();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("_AX+8C>");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setFeature("http://xml.org/sax/features/namespace-prefixes", false);
      SAXReader sAXReader1 = new SAXReader(false);
      try { 
        sAXReader1.setProperty("]xu%JJO", (Object) null);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property ']xu%JJO' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMElement dOMElement0 = new DOMElement("]xu%JVO");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      attributesImpl0.clear();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributesImpl0);
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributes2Impl2);
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      Attributes2Impl attributes2Impl4 = new Attributes2Impl();
      attributes2Impl4.getLocalName((-2729));
      NamespaceStack namespaceStack1 = new NamespaceStack();
      dOMElement0.setAttributes((Attributes) attributes2Impl4, namespaceStack0, true);
      String string0 = "n";
      SAXReader sAXReader0 = new SAXReader();
      MockURL.getFileExample();
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1724318111562746
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.getErrorHandler();
      String string0 = "";
      sAXReader0.removeHandler("");
      sAXReader0.getDispatchHandler();
      sAXReader0.isIgnoreComments();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      sAXReader0.getEncoding();
      sAXReader0.setIgnoreComments(false);
      sAXReader0.isStringInternEnabled();
      sAXReader0.createXMLReader();
      sAXReader0.isIncludeExternalDTDDeclarations();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      try { 
        sAXReader0.setProperty("//tmp/xs.oQSKga\f0xs.oQSKga\f", xMLFilterImpl0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '//tmp/xs.oQSKga\f0xs.oQSKga\f' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("]xu%JJO");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributesImpl0);
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributes2Impl2);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Attributes2Impl attributes2Impl4 = new Attributes2Impl();
      attributes2Impl4.getLocalName((-2729));
      NamespaceStack namespaceStack1 = new NamespaceStack();
      defaultElement0.setAttributes((Attributes) attributes2Impl4, namespaceStack0, false);
      QName.get("]xu%JJO");
      namespaceStack1.getDefaultNamespace();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("namespace::", "//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.setProperty("qT]CLg%Ku<&}W_&R", "//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'qT]CLg%Ku<&}W_&R' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setDTDHandler(xMLFilterImpl1);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl0.setContentHandler(xMLFilterImpl2);
      xMLFilterImpl0.unparsedEntityDecl("jyoqO'a1I6x)?]NK$f", "vg;v(uZ", (String) null, "Sw'wA]QelQyY");
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl3);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl4);
      xMLFilterImpl5.skippedEntity("jsNK:K");
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl2);
      xMLFilterImpl1.skippedEntity(" : ");
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl();
      xMLFilterImpl4.skippedEntity("j|s");
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl();
      xMLFilterImpl2.skippedEntity("jBntRt2l");
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.setErrorHandler(xMLFilterImpl8);
      try { 
        sAXReader0.setXMLReaderClassName("[WVhdB5t[Bn9@`");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class [WVhdB5t[Bn9@` not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("]xu%JJO");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributesImpl0);
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributes2Impl2);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Attributes2Impl attributes2Impl4 = new Attributes2Impl();
      attributes2Impl4.getLocalName((-2729));
      NamespaceStack namespaceStack1 = new NamespaceStack();
      defaultElement0.setAttributes((Attributes) attributes2Impl3, namespaceStack0, false);
      QName.get((String) null);
      NamespaceStack namespaceStack2 = new NamespaceStack();
      namespaceStack2.getDefaultNamespace();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("]xu%JJO");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "");
      SAXReader sAXReader0 = new SAXReader(false);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockURL.getFtpExample();
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      DOMDocument dOMDocument0 = new DOMDocument();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/AE2Y0/tmp/tmp/org.dom4j.io.SAXReader$SAXEntityResolver0W>^KMu\"h0nW#3fqv<Bi[}5B");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl2.setDTDHandler(xMLFilterImpl1);
      xMLFilterImpl1.setParent(xMLFilterImpl0);
      xMLFilterImpl2.getContentHandler();
      xMLFilterImpl0.getDTDHandler();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = '4';
      charArray0[2] = ']';
      charArray0[3] = 'I';
      charArray0[4] = 'b';
      charArray0[5] = 'Z';
      charArray0[6] = '$';
      charArray0[7] = '.';
      xMLFilterImpl2.ignorableWhitespace(charArray0, 3673, 3673);
      xMLFilterImpl3.setDTDHandler(xMLFilterImpl1);
      xMLFilterImpl2.unparsedEntityDecl((String) null, (String) null, (String) null, (String) null);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl((XMLReader) null);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl5.skippedEntity((String) null);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl4);
      xMLFilterImpl1.skippedEntity("`");
      xMLFilterImpl6.skippedEntity("UYj;oYz}%]");
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl();
      xMLFilterImpl3.skippedEntity((String) null);
      SAXReader sAXReader1 = new SAXReader((String) null);
      // Undeclared exception!
      try { 
        sAXReader1.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl2.setDTDHandler(xMLFilterImpl1);
      xMLFilterImpl1.setParent(xMLFilterImpl0);
      xMLFilterImpl2.getContentHandler();
      xMLFilterImpl0.getDTDHandler();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = '4';
      charArray0[2] = ']';
      charArray0[3] = 'I';
      charArray0[4] = 'b';
      charArray0[5] = 'Z';
      charArray0[6] = '$';
      charArray0[5] = '.';
      xMLFilterImpl2.ignorableWhitespace(charArray0, 3673, 3673);
      xMLFilterImpl3.setDTDHandler(xMLFilterImpl1);
      xMLFilterImpl2.unparsedEntityDecl((String) null, (String) null, (String) null, (String) null);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl((XMLReader) null);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl();
      xMLFilterImpl5.skippedEntity((String) null);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl4);
      xMLFilterImpl1.skippedEntity("`");
      xMLFilterImpl6.skippedEntity("UYj;oYz}%]");
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl();
      xMLFilterImpl3.skippedEntity((String) null);
      SAXReader sAXReader1 = new SAXReader((String) null);
      // Undeclared exception!
      try { 
        sAXReader1.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      File file0 = MockFile.createTempFile("3|@K", "3|@K");
      MockFile mockFile0 = new MockFile(file0, "3|@K");
      File file1 = mockFile0.getAbsoluteFile();
      file0.renameTo(mockFile0);
      file1.toPath();
      file0.getAbsoluteFile();
      MockFile mockFile1 = new MockFile("f<,");
      mockFile1.getCanonicalPath();
      file0.renameTo(mockFile1);
      MockFile mockFile2 = new MockFile(mockFile0, "//tmp/3|\"@Kq0kYqNO");
      mockFile2.renameTo(mockFile0);
      mockFile0.delete();
      file0.setExecutable(false);
      file0.renameTo(mockFile0);
      file0.renameTo(file1);
      MockFile mockFile3 = new MockFile("f<,", "//tmp/3|\"@Kq0kYqNO");
      mockFile3.toURL();
      MockFile mockFile4 = new MockFile("3|@K", "4cZY+<frf<G");
      URI uRI0 = MockURI.aHttpURI;
      MockURI.resolve(uRI0, uRI0);
      MockURI.toURL(uRI0);
      try { 
        sAXReader0.read((InputStream) null, "/home/ubuntu/termite/projects/62_dom4j/f<,");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: /home/ubuntu/termite/projects/62_dom4j/f<, Nested exception: no protocol: /home/ubuntu/termite/projects/62_dom4j/f<,
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3594545031847076
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[2] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.markSupported();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 235, 7968);
      byteArrayInputStream1.skip(0L);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.skip((-20L));
      byteArrayInputStream3.skip((byte)14);
      byteArrayInputStream3.close();
      byte[] byteArray1 = new byte[17];
      byteArray1[0] = (byte) (-24);
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray1, (byte) (-24), (byte) (-24));
      byteArrayInputStream0.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      bufferedInputStream0.skip((-275L));
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)14);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream4);
      bufferedInputStream1.markSupported();
      bufferedInputStream1.skip((-1L));
      bufferedInputStream0.close();
      bufferedInputStream1.available();
      ByteArrayInputStream byteArrayInputStream5 = new ByteArrayInputStream(byteArray0, 235, 7968);
      InputSource inputSource0 = new InputSource(byteArrayInputStream0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      byteArrayInputStream0.mark((byte) (-24));
      bufferedInputStream0.mark((byte) (-24));
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3326774197215174
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("]xu%JJO");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.getLocalName(72);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributesImpl0);
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributes2Impl2);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Attributes2Impl attributes2Impl4 = new Attributes2Impl();
      attributes2Impl4.getLocalName((-2729));
      NamespaceStack namespaceStack1 = new NamespaceStack();
      defaultElement0.setAttributes((Attributes) attributes2Impl3, namespaceStack0, false);
      QName.get(",0RxSIHPd");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte)52;
      NamespaceStack namespaceStack2 = new NamespaceStack();
      namespaceStack2.getDefaultNamespace();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(",0RxSIHPd");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, "");
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[2] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 235, 7968);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.skip(1L);
      byteArrayInputStream3.close();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-24);
      byteArrayInputStream3.reset();
      byteArrayInputStream3.reset();
      byteArrayInputStream0.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      byteArrayInputStream2.mark((-1714));
      PipedInputStream pipedInputStream0 = new PipedInputStream(4008);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream1);
      bufferedInputStream1.skip((-1L));
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      charArray0[1] = 'c';
      xMLFilterImpl0.skippedEntity("");
      charArray0[3] = '\'';
      xMLFilterImpl0.characters(charArray0, (-4038), 2393);
      xMLFilterImpl0.endElement("", "", "");
      xMLFilterImpl0.endElement("GM", "GM", "GM");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.resetHandlers();
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      sAXReader0.setMergeAdjacentText(true);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4196295699011285
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      File file0 = MockFile.createTempFile("3|@K", "3|@K");
      MockFile mockFile0 = new MockFile("3|@K", "3|@K");
      mockFile0.renameTo(file0);
      mockFile0.toPath();
      mockFile0.renameTo(file0);
      mockFile0.renameTo(file0);
      file0.renameTo(mockFile0);
      MockURL.getFileExample();
      MockFile mockFile1 = new MockFile("3|@K");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      String string0 = "R_%";
      StringReader stringReader0 = new StringReader("R_%");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "R_%");
      stringReader0.read();
      stringReader0.ready();
      stringReader0.reset();
      String string1 = "//tmp/%VKTY\\x0%VKTY\\x";
      try { 
        sAXReader0.read((Reader) stringReader0, "//tmp/%VKTYx0%VKTYx");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document //tmp/%VKTYx0%VKTYx : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = defaultDocumentFactory0.createQName("//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      DOMElement dOMElement0 = new DOMElement(qName0);
      BeanElement beanElement0 = new BeanElement(qName0, defaultElement0);
      defaultElement0.elementTextTrim("//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      defaultElement0.getPath((Element) beanElement0);
      beanElement0.getNamespace();
      LinkedList<QName> linkedList0 = new LinkedList<QName>();
      beanElement0.getXPathResult(3395);
      BeanElement beanElement1 = new BeanElement(qName0);
      dOMElement0.element(qName0);
      Namespace namespace0 = namespaceStack0.addNamespace("///tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul", "//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      DOMComment dOMComment0 = new DOMComment(beanElement1, "//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      DOMElement dOMElement1 = new DOMElement(qName0, 3395);
      QName.get((String) null, namespace0, "//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      NamespaceStack namespaceStack1 = new NamespaceStack();
      DOMNamespace dOMNamespace0 = new DOMNamespace(dOMElement1, "//tmp/3Vb@K03Vb@K", (String) null);
      namespaceStack0.push((Namespace) dOMNamespace0);
      namespaceStack1.getDefaultNamespace();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/features/use-locator2");
      sAXReader_SAXEntityResolver0.resolveEntity("&lt;", (String) null);
      SAXReader sAXReader0 = new SAXReader();
      Object object0 = new Object();
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8;Th=lX|QgD36ELou");
      String string0 = "";
      boolean boolean0 = false;
      try { 
        sAXReader0.configureReader(xMLFilterImpl2, defaultHandler2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@309e5a37 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)5;
      sAXReader0.setEncoding("N\"7!JEt$9cWok3ivbX");
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-1004), (-1004));
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.close();
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0, (byte)5, (-1));
      byteArrayInputStream2.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream1);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)14);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0);
      bufferedInputStream1.skip((-4736L));
      bufferedInputStream1.available();
      bufferedInputStream0.available();
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(pipedInputStream0);
      bufferedInputStream2.markSupported();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byteArrayInputStream2.skip(0);
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(pipedInputStream0);
      bufferedInputStream3.close();
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) null);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      InputSource inputSource0 = new InputSource(byteArrayInputStream2);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.367603587234484
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      String string0 = " attributes: ";
      sAXReader0.setEncoding(" attributes: ");
      sAXReader0.installXMLFilter((XMLReader) null);
      StringReader stringReader0 = new StringReader("P");
      try { 
        sAXReader0.read((Reader) stringReader0, "P");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/P : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      xMLFilterImpl2.endPrefixMapping("$#i_N^3L]");
      xMLFilterImpl1.setParent(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      xMLFilterImpl2.getContentHandler();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl4.getDTDHandler();
      xMLFilterImpl3.processingInstruction((String) null, "//tmp/3|\"@Kq0w V)]F2y}*MZd");
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      xMLFilterImpl5.setDTDHandler(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl4);
      xMLFilterImpl5.unparsedEntityDecl((String) null, "\" data: ", "\" data: ", "jyoqO'a1I6x)?]NK$f");
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl(xMLFilterImpl7);
      xMLFilterImpl6.skippedEntity("c_YPH");
      XMLFilterImpl xMLFilterImpl9 = new XMLFilterImpl(xMLFilterImpl4);
      xMLFilterImpl7.skippedEntity("//tmp/org.jaxen.DefaultNavigator08;Th=lX|gkELu");
      xMLFilterImpl0.getContentHandler();
      xMLFilterImpl0.skippedEntity("[8c9!wGRU");
      XMLFilterImpl xMLFilterImpl10 = new XMLFilterImpl();
      xMLFilterImpl9.skippedEntity("A6 #nA9'S;|WHHxKW");
      sAXReader0.getEntityResolver();
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.setStringInternEnabled(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      sAXReader0.getDispatchHandler();
      try { 
        sAXReader0.setXMLReaderClassName("j@v=DK&b[a-$meSs");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class j@v=DK&b[a-$meSs not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLFilter();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      sAXReader1.installXMLFilter((XMLReader) null);
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isStripWhitespaceText());
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SAXReader sAXReader2 = new SAXReader((String) null);
      assertFalse(sAXReader2.isMergeAdjacentText());
      assertFalse(sAXReader2.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader2.isIgnoreComments());
      assertTrue(sAXReader2.isStringInternEnabled());
      assertFalse(sAXReader2.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader2.isStripWhitespaceText());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "F&Nq+i{IP\"Gh]iDs";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      QName qName0 = new QName("F&Nq+i{IP\"Gh]iDs");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.setValidation(false);
      sAXReader0.isValidating();
      sAXReader0.isStripWhitespaceText();
      sAXReader0.isStringInternEnabled();
      sAXReader0.getErrorHandler();
      sAXReader0.getErrorHandler();
      Object object0 = new Object();
      try { 
        sAXReader0.setProperty("F&Nq+i{IP\"Gh]iDs", object0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'F&Nq+i{IP\"Gh]iDs' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7518685126965625
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      sAXReader0.isValidating();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("If8Ff8AEO&/z>", "2.0");
      DOMDocument dOMDocument0 = new DOMDocument(dOMDocumentType0);
      dOMDocument0.supports("*>avo#", "http://xml.org/sax/features/validation");
      dOMDocument0.getLocalName();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      sAXReader0.setDocumentFactory(documentFactory0);
      sAXReader0.getEncoding();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.addHandler("If8Ff8AEO&/z>", dispatchHandler0);
      sAXReader0.getXMLReader();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      String string0 = "W";
      String string1 = "43VE#";
      try { 
        MockURL.URL("W", "43VE#", 2688, "If8Ff8AEO&/z>");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: w
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl2.setDTDHandler(xMLFilterImpl1);
      xMLFilterImpl1.setParent(xMLFilterImpl0);
      xMLFilterImpl2.getContentHandler();
      xMLFilterImpl0.getDTDHandler();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      xMLFilterImpl3.setDTDHandler(xMLFilterImpl1);
      xMLFilterImpl2.unparsedEntityDecl((String) null, (String) null, (String) null, (String) null);
      QName.get(" : ", (String) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      DefaultDocument defaultDocument0 = new DefaultDocument(" : ");
      SAXReader sAXReader2 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader2.getEncoding();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction((String) null, "org.jaxen.BaseXPath");
      Map<String, String> map0 = dOMProcessingInstruction0.getValues();
      defaultDocumentFactory1.setXPathNamespaceURIs(map0);
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createQName("//tmp/3|\"@Hq0kYqNO", "", "");
      SimpleVariableContext simpleVariableContext1 = new SimpleVariableContext();
      XPath xPath0 = defaultDocumentFactory2.createXPath("y", (VariableContext) simpleVariableContext1);
      assertEquals("y", xPath0.getText());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.4383740327894543
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "";
          FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";$vA~VMY");
          FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
          FileSystemHandling.shouldAllThrowIOExceptions();
          FileSystemHandling.shouldAllThrowIOExceptions();
          SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
          sAXReader_SAXEntityResolver0.uriPrefix = "";
          sAXReader_SAXEntityResolver0.resolveEntity("", "");
          FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";$vA~VMY");
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          MockFile mockFile0 = new MockFile("", " N^GQeD0= 7ma!#+Xq");
          MockURL.getFtpExample();
          SAXReader sAXReader0 = new SAXReader();
          DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
          NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
          QName qName0 = namespaceStack0.getAttributeQName(" N^GQeD0= 7ma!#+Xq", " N^GQeD0= 7ma!#+Xq", "E7zW@)a@eJ>md9>ad");
          DocumentFactory documentFactory1 = qName0.getDocumentFactory();
          sAXReader0.setDocumentFactory(documentFactory1);
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor373.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor373.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributesImpl0);
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributes2Impl2);
      Attributes2Impl attributes2Impl4 = new Attributes2Impl();
      attributes2Impl4.getLocalName((-2729));
      NamespaceStack namespaceStack0 = new NamespaceStack();
      String string0 = "";
      namespaceStack0.getDefaultNamespace();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("namespace::", "");
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      try { 
        sAXReader0.setProperty("qT]CLg%Ku<&}W_&R", "//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'qT]CLg%Ku<&}W_&R' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)27;
      byteArray0[0] = (byte)27;
      FileSystemHandling.shouldAllThrowIOExceptions();
      EntityResolver entityResolver0 = sAXReader0.createDefaultEntityResolver("w<Pr_}?~3Dw");
      sAXReader0.setEntityResolver(entityResolver0);
      try { 
        sAXReader0.read((Reader) null, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.addHandler("//tmp/x2oQSKga\f0Z X %ff?-Ow]{", pruningDispatchHandler0);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockURL.URL((URL) null, "http://xml.org/sax/features/namespaces");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/features/namespaces");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/namespaces", " Pattern: ");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultElement defaultElement0 = new DefaultElement("]xu%JJO");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributesImpl0);
      attributesImpl0.getLength();
      Attributes2Impl attributes2Impl3 = new Attributes2Impl();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      attributes2Impl3.getLength();
      Attributes2Impl attributes2Impl4 = new Attributes2Impl();
      attributesImpl0.getType((-2729));
      attributes2Impl4.getValue("]xu%JJO");
      NamespaceStack namespaceStack1 = new NamespaceStack();
      defaultElement0.setAttributes((Attributes) attributes2Impl3, namespaceStack0, false);
      NamespaceStack namespaceStack2 = new NamespaceStack();
      DOMNamespace dOMNamespace0 = new DOMNamespace(defaultElement0, (String) null, (String) null);
      namespaceStack2.push((Namespace) dOMNamespace0);
      namespaceStack2.getDefaultNamespace();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("]xu%JJO");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "");
      SAXReader sAXReader0 = new SAXReader();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "//tmp/CP+5d_%^SUn_?je0J+hwFKA#HooD_27");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.4406133134903523
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      QName qName0 = defaultDocumentFactory0.createQName("//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul", "//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul", "//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      Element element0 = defaultDocumentFactory0.createElement("//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      BeanElement beanElement0 = new BeanElement(qName0, defaultElement0);
      defaultElement0.elementTextTrim("//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      defaultElement0.getPath((Element) beanElement0);
      LinkedList<QName> linkedList0 = new LinkedList<QName>();
      beanElement0.getXPathResult(3395);
      BeanElement beanElement1 = new BeanElement(qName0);
      element0.element(qName0);
      Namespace namespace0 = namespaceStack0.addNamespace("///tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul", "//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DOMComment dOMComment0 = new DOMComment("//tmp/3|\"K0/tmp/3|\"@Kq0kYqNO");
      namespace0.getName();
      beanElement0.remove((Comment) dOMComment0);
      QName qName1 = new QName("///tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul", namespace0, "///tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      beanElement0.indexOf(element0);
      beanElement0.attributeIterator();
      beanElement0.element("//tmp/3|\"K0/tmp/3|\"@Kq0kYqNO", namespace0);
      defaultDocumentFactory1.createDocType("//tmp/tmp/x2oQSKga\f0M.Qyn0,INul0", "///tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul", "//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      QName qName2 = new QName("//tmp/tmp/x2oQSKga\f0M.Qyn0,INul0");
      StringReader stringReader0 = new StringReader("Lf");
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.addHandler((String) null, dispatchHandler0);
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)41;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.resetHandlers();
      Object object0 = new Object();
      sAXReader0.getDispatchHandler();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("]xu%JVO");
      QName qName0 = defaultDocumentFactory0.createQName("]xu%JVO", "]xu%JVO", "]xu%JVO");
      defaultDocumentFactory0.createElement("]xu%JVO");
      BeanElement beanElement0 = new BeanElement(qName0, defaultElement0);
      defaultElement0.elementTextTrim("]xu%JVO");
      defaultElement0.getPath((Element) beanElement0);
      LinkedList<QName> linkedList0 = new LinkedList<QName>();
      BeanElement beanElement1 = new BeanElement(qName0);
      Object object0 = new Object();
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("]xu%JVO", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class ]xu%JVO not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.239095456210609
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl2.setDTDHandler(xMLFilterImpl1);
      xMLFilterImpl1.setParent(xMLFilterImpl0);
      xMLFilterImpl2.getContentHandler();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      xMLFilterImpl3.setDTDHandler(xMLFilterImpl1);
      xMLFilterImpl2.unparsedEntityDecl((String) null, (String) null, (String) null, (String) null);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl((XMLReader) null);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl5.getContentHandler();
      xMLFilterImpl5.skippedEntity((String) null);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl4);
      xMLFilterImpl6.skippedEntity("UYj;oYz}%]");
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl();
      xMLFilterImpl3.skippedEntity((String) null);
      xMLFilterImpl4.endDocument();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.resolveEntity("org.dom4j.io.SAXReader$SAXEntityResolver", "6yFfX4]pMtB");
      try { 
        sAXReader0.read("org.dom4j.io.SAXReader$SAXEntityResolver");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.239095456210609
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      xMLFilterImpl2.endPrefixMapping("$#i_N^3L]");
      xMLFilterImpl1.setParent(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl4.unparsedEntityDecl("$#i_N^3L]", "$#i_N^3L]", "$#i_N^3L]", "$#i_N^3L]");
      xMLFilterImpl4.getDTDHandler();
      xMLFilterImpl0.resolveEntity("org.jaxen.dom4j.Dom4jXPath", "//tmp/_AX+8C>0t]&bOn");
      xMLFilterImpl3.processingInstruction("org.jaxen.dom4j.Dom4jXPath", "//tmp/3|\"@Kq0w V)]/2y}*#Zd");
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl();
      xMLFilterImpl3.setDTDHandler(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl5);
      xMLFilterImpl0.setContentHandler(xMLFilterImpl6);
      xMLFilterImpl6.unparsedEntityDecl("org.jaxen.dom4j.Dom4jXPath", "ceiling", "ceiling", "//tmp/http:/xml.org/sax/features/namespaces0");
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.resolveEntity("//tmp/3|\"@Kq0w V)]/2y}*#Zd", "G>+D-\")");
      try { 
        sAXReader0.read("$#i_N^3L]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@58fccef5 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@58fccef5 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      File file0 = MockFile.createTempFile("3|@K", "3|@K");
      MockFile mockFile0 = new MockFile("3|@K", "3|@K");
      file0.renameTo(mockFile0);
      mockFile0.setWritable(false, false);
      mockFile0.renameTo(file0);
      mockFile0.toPath();
      mockFile0.renameTo(file0);
      mockFile0.renameTo(file0);
      file0.renameTo(mockFile0);
      file0.toURL();
      file0.getCanonicalFile();
      try { 
        sAXReader0.read((Reader) null, "3|@K");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: 3|@K Nested exception: no protocol: 3|@K
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 48, 40);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      pushbackInputStream0.close();
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0, 40, 40);
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream4.skip((-2127L));
      byteArrayInputStream1.close();
      ByteArrayInputStream byteArrayInputStream5 = new ByteArrayInputStream(byteArray0, 48, 2147483645);
      byteArrayInputStream1.reset();
      byteArrayInputStream3.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)5);
      ByteArrayInputStream byteArrayInputStream6 = new ByteArrayInputStream(byteArray0, 40, 40);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream6);
      byteArrayInputStream1.reset();
      bufferedInputStream1.skip(896L);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(byteArrayInputStream0);
      bufferedInputStream2.available();
      bufferedInputStream0.skip((byte)5);
      bufferedInputStream1.mark(2147483645);
      byteArrayInputStream1.markSupported();
      bufferedInputStream0.available();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(xMLFilterImpl1, defaultHandler2_0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      xMLFilterImpl1.setContentHandler(xMLFilterImpl0);
      xMLFilterImpl2.endPrefixMapping("$#i_N3L");
      xMLFilterImpl1.setParent(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl3.processingInstruction((String) null, (String) null);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      xMLFilterImpl5.setDTDHandler(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl4);
      xMLFilterImpl0.setContentHandler(xMLFilterImpl4);
      StringReader stringReader0 = new StringReader("[8kcl!wGRU");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      sAXReader0.createContentHandler(xMLFilterImpl7);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[0] = (byte) (-24);
      byteArray0[2] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 235, 7968);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.skip(1L);
      byteArrayInputStream3.close();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-24);
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray1, (byte) (-24), (byte) (-24));
      byteArrayInputStream3.reset();
      byteArrayInputStream0.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(4008);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream4);
      bufferedInputStream1.skip((-1L));
      bufferedInputStream1.available();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      InputSource inputSource0 = new InputSource(byteArrayInputStream2);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXReader sAXReader0 = new SAXReader(false);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.4440977644767417
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("]xu%JVO");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.getType(80);
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      defaultElement0.setAttributes((Attributes) attributes2Impl0, namespaceStack0, false);
      QName qName0 = defaultDocumentFactory0.createQName("]xu%JVO", "]xu%JVO", "]xu%JVO");
      defaultDocumentFactory0.createComment((String) null);
      BeanElement beanElement0 = new BeanElement(qName0, defaultElement0);
      defaultElement0.elementTextTrim("]xu%JVO");
      defaultElement0.getPath((Element) beanElement0);
      Namespace namespace0 = namespaceStack0.addNamespace("/]xu%JVO", "]xu%JVO");
      Namespace namespace1 = Namespace.NO_NAMESPACE;
      Object object0 = new Object();
      qName0.equals(object0);
      beanElement0.attributeIterator();
      beanElement0.element("", namespace0);
      defaultElement0.getUniquePath((Element) null);
      DOMAttribute dOMAttribute0 = new DOMAttribute(qName0);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.removeHandler("/]xu%JVO");
      StringReader stringReader0 = new StringReader("y9Y.Dj5G}du,sM1+");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      xMLFilterImpl2.endPrefixMapping("$#i_N^3L]");
      xMLFilterImpl1.setParent(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl4.getDTDHandler();
      xMLFilterImpl3.processingInstruction((String) null, (String) null);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      xMLFilterImpl5.setDTDHandler(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl4);
      xMLFilterImpl0.setContentHandler(xMLFilterImpl4);
      xMLFilterImpl5.unparsedEntityDecl((String) null, "$#i_N^3L]", "$#i_N^3L]", "<yoqO'a1I6x)?]NK$f");
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl(xMLFilterImpl3);
      XMLFilterImpl xMLFilterImpl9 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl1.unparsedEntityDecl("$#i_N^3L]", (String) null, (String) null, "FBbLW*X");
      xMLFilterImpl6.skippedEntity("$#i_N^3L]");
      XMLFilterImpl xMLFilterImpl10 = new XMLFilterImpl(xMLFilterImpl4);
      xMLFilterImpl10.getContentHandler();
      xMLFilterImpl10.notationDecl("FBbLW*X", "", "<yoqO'a1I6x)?]NK$f");
      xMLFilterImpl7.skippedEntity((String) null);
      XMLFilterImpl xMLFilterImpl11 = new XMLFilterImpl();
      xMLFilterImpl0.skippedEntity("[8kcl!wGRU");
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl9);
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isStripWhitespaceText());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("org.dom4j.io.SAXReader", "org.dom4j.io.SAXReader", "org.dom4j.io.SAXReader");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      defaultDocumentFactory0.createXPath("org.jaxen.SimpleFunctionContext");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      DocumentFactory documentFactory1 = sAXReader0.getDocumentFactory();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertSame(documentFactory1, documentFactory0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockURL.URL((URL) null, "http://xml.org/sax/features/namespaces");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.notationDecl("http://xml.org/sax/features/namespaces", "-^$z^.3KGTvT@@@N1O[", "-^$z^.3KGTvT@@@N1O[");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 48, 40);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0, (-447), 40);
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream4.close();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kB*Ok-%tmJ[YN=");
      byteArrayInputStream4.close();
      ByteArrayInputStream byteArrayInputStream5 = new ByteArrayInputStream(byteArray0, (-447), 3020);
      byteArrayInputStream3.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)5);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream3);
      bufferedInputStream0.skip(0L);
      bufferedInputStream0.available();
      bufferedInputStream0.available();
      bufferedInputStream1.markSupported();
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1);
      bufferedInputStream2.close();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl1.setContentHandler((ContentHandler) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl2.setDTDHandler(xMLFilterImpl1);
      xMLFilterImpl2.unparsedEntityDecl("'?xne)CH", "gv8QQHay", (String) null, "8;Th=lX|QgD36ELu");
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl3.endDocument();
      xMLFilterImpl0.endDocument();
      try { 
        sAXReader0.setFeature("DocumentType nodes cannot have children", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: DocumentType nodes cannot have children
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("]xu%JVO");
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      QName qName0 = defaultDocumentFactory0.createQName("]xu%JVO", "]xu%JVO", "]xu%JVO");
      defaultDocumentFactory0.createElement("]xu%JVO");
      BeanElement beanElement0 = new BeanElement(qName0, defaultElement0);
      defaultElement0.elementTextTrim("]xu%JVO");
      defaultElement0.getPath((Element) beanElement0);
      LinkedList<QName> linkedList0 = new LinkedList<QName>();
      BeanElement beanElement1 = new BeanElement(qName0);
      Namespace namespace0 = namespaceStack0.addNamespace("/]xu%JVO", "]xu%JVO");
      Namespace namespace1 = (Namespace)namespace0.detach();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultComment defaultComment0 = (DefaultComment)defaultDocumentFactory1.createComment("//tmp/3|\"K0/tmp/3|\"@Kq0kYqNO");
      beanElement0.remove((Comment) defaultComment0);
      QName qName1 = new QName("", namespace1);
      beanElement0.attributeIterator();
      beanElement0.element("//tmp/3|\"K0/tmp/3|\"@Kq0kYqNO", namespace0);
      namespaceStack0.getAttributeQName("//tmp/4U-mc6et- -_fQ&-!04U-mc6et- -_fQ&-!", "|", "|");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      Object object0 = new Object();
      sAXReader0.getXMLFilter();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.4401405002515815
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          EvoSuiteFile evoSuiteFile0 = null;
          FileSystemHandling.createFolder((EvoSuiteFile) null);
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          MockFile mockFile0 = new MockFile("Z X %ff?-Ow]{", "MbxG");
          SAXReader sAXReader0 = new SAXReader();
          sAXReader0.setStripWhitespaceText(false);
          FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"'MaM~");
          sAXReader0.setIgnoreComments(false);
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor373.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor373.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLReader xMLReader0 = null;
      SAXReader sAXReader1 = new SAXReader(parserAdapter0, true);
      ParserAdapter parserAdapter1 = null;
      try {
        parserAdapter1 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      File file0 = MockFile.createTempFile("3|@K", "3|@K");
      MockFile mockFile0 = new MockFile(file0, "3|@K");
      File file1 = mockFile0.getAbsoluteFile();
      file0.renameTo(mockFile0);
      file0.renameTo(file0);
      file1.renameTo(mockFile0);
      mockFile0.renameTo(file0);
      mockFile0.renameTo(file0);
      file0.renameTo(mockFile0);
      MockURL.getHttpExample();
      MockFile mockFile1 = new MockFile("3|@K", "3|@K");
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      xMLFilterImpl2.endPrefixMapping("$#i_N^3L]");
      xMLFilterImpl1.setParent(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      xMLFilterImpl2.getContentHandler();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl4.getDTDHandler();
      String string0 = "//tmp/3|\"@Kq0w V)]F2y}*MZd";
      xMLFilterImpl3.processingInstruction((String) null, "//tmp/3|\"@Kq0w V)]F2y}*MZd");
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      xMLFilterImpl5.setDTDHandler(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl4);
      sAXReader0.getXMLReader();
      sAXReader0.getXMLReader();
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl4, true);
      try { 
        sAXReader1.setXMLReaderClassName("osV^V^\bt;W/Zrd@");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class osV^V^\bt;W/Zrd@ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5280883009539779
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("x2oQSKga\f");
      sAXReader_SAXEntityResolver0.resolveEntity("", "x2oQSKga\f");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader_SAXEntityResolver0.resolveEntity("Z X %ff?-Ow]{", "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("Z X %ff?-Ow]{", "MbxG");
      MockURL.getFtpExample();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setValidation(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Yo(K");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vG6N");
      DefaultHandler defaultHandler0 = new DefaultHandler();
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("]xu%JVO");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributesImpl0);
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributes2Impl2);
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      Attributes2Impl attributes2Impl4 = new Attributes2Impl();
      NamespaceStack namespaceStack1 = new NamespaceStack();
      defaultElement0.setAttributes((Attributes) attributes2Impl4, namespaceStack0, true);
      defaultDocumentFactory0.createQName("//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul", (String) null, "n");
      namespaceStack1.getDefaultNamespace();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      SAXReader sAXReader0 = new SAXReader(false);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertNotNull(xMLReader0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      xMLFilterImpl2.endPrefixMapping("$#i_N^3L]");
      xMLFilterImpl1.setParent(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      xMLFilterImpl2.getContentHandler();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl4.getDTDHandler();
      xMLFilterImpl3.processingInstruction((String) null, (String) null);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      xMLFilterImpl5.setDTDHandler(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl4);
      xMLFilterImpl5.unparsedEntityDecl((String) null, "\" data: ", "\" data: ", "jyoqO'a1I6x)?]NK$f");
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl(xMLFilterImpl3);
      XMLFilterImpl xMLFilterImpl9 = new XMLFilterImpl(xMLFilterImpl7);
      char[] charArray0 = new char[0];
      xMLFilterImpl6.characters(charArray0, 1233, 47);
      xMLFilterImpl6.skippedEntity("c_YPH");
      XMLFilterImpl xMLFilterImpl10 = new XMLFilterImpl(xMLFilterImpl4);
      xMLFilterImpl7.skippedEntity("//tmp/org.jaxen.DefaultNavigator08;Th=lX|gkELu");
      xMLFilterImpl0.getContentHandler();
      xMLFilterImpl0.skippedEntity("[8c9!wGRU");
      XMLFilterImpl xMLFilterImpl11 = new XMLFilterImpl();
      xMLFilterImpl10.skippedEntity("A6 #nA9'S;|WHHxKW");
      try { 
        sAXReader0.setProperty("//tmp/org.jaxen.DefaultNavigator08;Th=lX|gkELu", xMLFilterImpl1);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: //tmp/org.jaxen.DefaultNavigator08;Th=lX|gkELu
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("]xu%JVO");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      attributes2Impl1.getLocalName(791);
      namespaceStack0.getQName("]xu%JVO", (String) null, "]xu%JVO");
      defaultElement0.setAttributes((Attributes) attributes2Impl1, namespaceStack0, true);
      QName.get("F#a,v", "//tmp/3|\"@Hq0 attributes: ", "F#a,v");
      namespaceStack0.getDefaultNamespace();
      QName.get((String) null, (Namespace) null);
      attributes2Impl1.setAttributes(attributes2Impl0);
      namespaceStack0.getQName("//tmp/3|\"@Hq0 attributes: ", (String) null, "");
      defaultElement0.elementTextTrim("");
      namespaceStack0.getDefaultNamespace();
      defaultElement0.setAttributes((Attributes) attributes2Impl0, namespaceStack0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      defaultDocumentFactory0.createPattern("org.jaxen.function.StringFunction");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.resolveEntity("6yFfX4]pMtB", (String) null);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      File file0 = MockFile.createTempFile("3|@K", "3|@K");
      MockFile mockFile0 = new MockFile(file0, "3|@K");
      File file1 = mockFile0.getAbsoluteFile();
      MockFile mockFile1 = new MockFile("3|@K");
      file0.renameTo(mockFile0);
      file1.toPath();
      mockFile0.getAbsoluteFile();
      file1.setReadable(false);
      file0.renameTo(mockFile0);
      file0.renameTo(file0);
      file1.renameTo(mockFile0);
      mockFile0.setExecutable(false);
      mockFile0.renameTo(file0);
      file0.renameTo(mockFile0);
      URL uRL0 = file0.toURL();
      MockFile mockFile2 = new MockFile("3|@K", "3|@K");
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /tmp/3|@K03|@K (No such file or directory) Nested exception: /tmp/3|@K03|@K (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.3087432950398514
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[2] = (byte)14;
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributes2Impl1);
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributes2Impl1);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Attributes2Impl attributes2Impl4 = new Attributes2Impl();
      NamespaceStack namespaceStack1 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockURI.toURL(uRI1);
      SAXReader sAXReader0 = new SAXReader(true);
      InputSource inputSource0 = new InputSource();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      File file0 = MockFile.createTempFile("3|@K", "3|@K");
      MockFile mockFile0 = new MockFile(file0, "3|@K");
      File file1 = mockFile0.getAbsoluteFile();
      MockFile mockFile1 = new MockFile("3|@K");
      file0.renameTo(mockFile0);
      file1.toPath();
      File file2 = mockFile1.getAbsoluteFile();
      MockFile mockFile2 = new MockFile("f<,");
      mockFile2.renameTo(file1);
      mockFile2.getCanonicalPath();
      mockFile1.renameTo(mockFile2);
      MockFile mockFile3 = new MockFile(mockFile1, "//tmp/3|\"@Kq0kYqNO");
      mockFile3.renameTo(mockFile0);
      MockFile mockFile4 = new MockFile("#### Warning: couldn't create bean: ", "//tmp/3|\"@Kq0kYqNO");
      mockFile1.setExecutable(false);
      file0.renameTo(mockFile4);
      file0.renameTo(file1);
      MockFile mockFile5 = new MockFile("f<,", "//tmp/3|\"@Kq0kYqNO");
      mockFile5.toURL();
      MockFile mockFile6 = new MockFile("3|@K", "4cZY;~rf<G");
      URI uRI0 = MockURI.aHttpURI;
      MockURI.resolve(uRI0, uRI0);
      MockURI.toURL(uRI0);
      try { 
        sAXReader0.read(file2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = "//tmp/3|\"@Kq0kYqNO";
      File file0 = MockFile.createTempFile("3|\"@Kq", "//tmp/3|\"@Kq0kYqNO");
      file0.getCanonicalFile();
      file0.getCanonicalFile();
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = defaultDocumentFactory0.createQName("//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul", "//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul", "//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      DefaultElement defaultElement1 = (DefaultElement)defaultDocumentFactory0.createElement("//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      BeanElement beanElement0 = new BeanElement(qName0, defaultElement0);
      defaultElement0.elementTextTrim("//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      defaultElement0.getPath((Element) beanElement0);
      LinkedList<QName> linkedList0 = new LinkedList<QName>();
      beanElement0.getXPathResult(3395);
      BeanElement beanElement1 = new BeanElement(qName0);
      defaultElement1.element(qName0);
      Namespace namespace0 = namespaceStack0.addNamespace("///tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul", "//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      DOMComment dOMComment0 = new DOMComment(beanElement1, "//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      DOMElement dOMElement0 = new DOMElement(qName0, 3395);
      namespace0.getName();
      QName.get((String) null, namespace0, "//tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
      defaultElement1.element(".*{hK&-p(S>qJ')1", namespace0);
      beanElement0.remove((Comment) dOMComment0);
      QName qName1 = new QName((String) null, namespace0);
      beanElement0.indexOf(defaultElement1);
      beanElement0.attributeIterator();
      MockFile mockFile0 = new MockFile("//tmp/3|\"K0/tmp/3|\"@Kq0kYqNO");
      mockFile0.toURL();
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockURI.toURL(uRI1);
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("///tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class ///tmp/]xu%JVO0/tmp/x2oQSKga\f0M.Qyn0,INul not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.createDefaultEntityResolver("m");
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      xMLFilterImpl2.endPrefixMapping("$#i_N^3L]");
      xMLFilterImpl1.setParent(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl4.getDTDHandler();
      xMLFilterImpl3.processingInstruction((String) null, "//tmp/3|\"@Kq0w V)]/2y}*#Zd");
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      xMLFilterImpl5.setDTDHandler(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl4);
      xMLFilterImpl0.setContentHandler(xMLFilterImpl4);
      xMLFilterImpl5.unparsedEntityDecl((String) null, "\" data: ", "\" data: ", "jyoqO'a1I6x)?]NK$f");
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl(xMLFilterImpl3);
      XMLFilterImpl xMLFilterImpl9 = new XMLFilterImpl(xMLFilterImpl7);
      xMLFilterImpl1.unparsedEntityDecl("$#i_N^3L]", "\" data: ", (String) null, "FBbLW*X");
      xMLFilterImpl6.skippedEntity("$#i_N^3L]");
      XMLFilterImpl xMLFilterImpl10 = new XMLFilterImpl(xMLFilterImpl4);
      xMLFilterImpl7.skippedEntity((String) null);
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '\"';
      xMLFilterImpl0.ignorableWhitespace(charArray0, (-4642), 98);
      XMLFilterImpl xMLFilterImpl11 = new XMLFilterImpl();
      xMLFilterImpl0.skippedEntity("[8kcl!wGRU");
      XMLFilterImpl xMLFilterImpl12 = new XMLFilterImpl();
      xMLFilterImpl10.skippedEntity("\" data: ");
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read("\" data: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: \" data:  Nested exception: no protocol: \" data: 
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.3594545031847076
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[2] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.markSupported();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 235, 7968);
      byteArrayInputStream1.skip(0L);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.skip(1L);
      byteArrayInputStream3.skip((byte)14);
      byteArrayInputStream3.close();
      byte[] byteArray1 = new byte[17];
      byteArray1[0] = (byte) (-24);
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray1, (byte) (-24), (byte) (-24));
      byteArrayInputStream0.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      bufferedInputStream0.skip((-275L));
      byteArrayInputStream4.read();
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)14);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream4);
      bufferedInputStream1.markSupported();
      bufferedInputStream1.skip((-1L));
      bufferedInputStream0.close();
      bufferedInputStream1.available();
      ByteArrayInputStream byteArrayInputStream5 = new ByteArrayInputStream(byteArray0, 235, 7968);
      InputSource inputSource0 = new InputSource(byteArrayInputStream5);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      byteArrayInputStream0.mark((byte) (-24));
      bufferedInputStream0.mark((byte) (-24));
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader();
      QName qName0 = QName.get(" : ", " : ", "http://xml.org/sax/features/use-locator2");
      DOMElement dOMElement0 = new DOMElement(qName0, 47);
      DOMDocument dOMDocument0 = new DOMDocument(" : ", dOMElement0, (DOMDocumentType) null);
      dOMDocument0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[2] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream2.skip((-2127L));
      byteArrayInputStream0.close();
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0, 40, 3020);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.reset();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2831);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream1);
      bufferedInputStream0.skip((byte)5);
      bufferedInputStream1.available();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultHandler defaultHandler0 = new DefaultHandler();
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-13);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      try { 
        sAXReader0.read((InputStream) pushbackInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Reference is not allowed in prolog. Nested exception: Reference is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
